#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Zulip notification post-commit hook.
# Copyright Â© 2012-2014 Zulip, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# The "post-commit" script is run after a transaction is completed and a new
# revision is created.  It is passed arguments on the command line in this
# form:
#  <path> <revision>
# For example:
# /srv/svn/carols 1843

import os
import sys
import os.path
import pysvn

if False:
    from typing import Any, Dict, List, Optional, Text, Tuple, Union

sys.path.insert(0, os.path.dirname(__file__))
import zulip_svn_config as config
VERSION = "0.9"

if config.ZULIP_API_PATH is not None:
    sys.path.append(config.ZULIP_API_PATH)

import zulip
client = zulip.Client(
    email=config.ZULIP_USER,
    site=config.ZULIP_SITE,
    api_key=config.ZULIP_API_KEY,
    client="ZulipSVN/" + VERSION)  # type: zulip.Client
svn = pysvn.Client()  # type: pysvn.Client

path, rev = sys.argv[1:]  # type: Tuple[Text, Text]

# since its a local path, prepend "file://"
path = "file://" + path

entry = svn.log(path, revision_end=pysvn.Revision(pysvn.opt_revision_kind.number, rev))[0]  # type: Dict[Text, Any]
message = "**{0}** committed revision r{1} to `{2}`.\n\n> {3}".format(
    entry['author'],
    rev,
    path.split('/')[-1],
    entry['revprops']['svn:log'])  # type: Text

destination = config.commit_notice_destination(path, rev)  # type: Optional[Dict[Text, Text]]

message_data = {
    "type": "stream",
    "to": destination["stream"],
    "subject": destination["subject"],
    "content": message,
}  # type: Dict[str, Any]
client.send_message(message_data)
