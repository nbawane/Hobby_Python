14:29:18: Sata Disconnector Board found in COM1.
14:29:22: *****************************************************

14:29:22: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

14:29:22: *                                                   *

14:29:22: *  Compatibility with this version is not verified! *

14:29:22: *****************************************************

14:29:25: [ DeviceSetupCompletion() , Command count = 7 ] 
14:29:25: Testname Mapping: ScriptName=[STPTRNSABRTST06_6_Call_All_CMD0] -> TestId=[STPTRNSABRTST06]
14:29:25: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
14:29:25: [ GetPhysicalChipsInfo() , Command count = 9 ] 
14:29:25: [ GetFileSize(0xEA) , Command count = 10 ] 
14:29:25: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
14:29:25: [ GetFileSize(0x16) , Command count = 12 ] 
14:29:25: [ GetCardStatus() , Command count = 13 ] 
14:29:25: [ GetFileSize(0x18) , Command count = 14 ] 
14:29:25: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
14:29:25: [ GetFileSize(0x15) , Command count = 16 ] 
14:29:25: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
14:29:27: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
14:29:27: [ GetFileSize(0xE) , Command count = 18 ] 
14:29:27: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
14:29:27: [ GetFileSize(0x1E) , Command count = 20 ] 
14:29:27: [ GetCardStatus() , Command count = 21 ] 
14:29:27: [ GetFileSize(0x21) , Command count = 22 ] 
14:29:27: [ GetCardStatus() , Command count = 23 ] 
14:29:27: [ GetFileSize(0x33) , Command count = 24 ] 
14:29:27: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
14:29:27: [ GetFileSize(0x1F) , Command count = 26 ] 
14:29:27: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
14:29:27: [ GetFileSize(0x2A) , Command count = 28 ] 
14:29:27: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
14:29:27: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
14:29:27: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
14:29:27: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
14:29:27: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
14:29:27: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
14:29:27: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
14:29:27: [ GetFileSize(0x33) , Command count = 36 ] 
14:29:27: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
14:29:27: [ GetFileSize(0x33) , Command count = 38 ] 
14:29:27: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
14:29:28: [ GetIpVersionInfo() , Command count = 40 ] 
14:29:28: [ GetPhysicalChipsInfo() , Command count = 41 ] 
14:29:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05CEF690>, <0x200/0x200, Arb>) , Command count = 42 ] 
14:29:28: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=STPTRNSABRTST06 --dbconnection=none --adapter=SD05771_ASVU --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05771_ASVU): (Slot#:0)
Adapter serial number      :  SD05771_ASVU
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 14:29:28
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165628
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165628
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05771_ASVU
   --extcmdset                                      : FBCC
   --sdtestid                                       : STPTRNSABRTST06
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 18367943830
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: STPTRNSABRTST06_6_Call_All_CMD0 >>>>>>>>>>>>>>>



14:29:34: ###### Running call_All_CMD0 scripts  ######
14:29:34: ########################################
14:29:34: Stated Running script STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump 
14:29:34: ########################################
14:29:34: MaxLba of the card: 0x3B72400 
14:29:36: ###### Running STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump Test ###### 

14:29:43: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
14:29:43: [GO7_globalPreTestingSettings]### Default Initialization Start
14:29:43: [DVTCommonLib]###  SwitchHostVoltageRegion called
14:29:43: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
14:29:43: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

14:29:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
14:29:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
14:29:46: [ CardInit() , Command count = 47 ] 
14:29:46: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165628
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165628
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

14:29:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:46: ####CSD Registe 2.0 Values####
14:29:46: CSD_STRUCTURE                                 :0x1
14:29:46: Reserv1                                       :0x0
14:29:46: Time Access 1 TAAC                            :0xe
14:29:46: Time Access 2 NSAC*100                        :0x0
14:29:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:46: Card Command Classess CCC                     :0x5b5
14:29:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:46: DSR(driver stage register)  DSR_IMP           :0x0
14:29:46: Reserv2                                       :0x0
14:29:46: Device Size C_SIZE                            :0xedc8
14:29:47: Reserv3                                       :0x0
14:29:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:47: Reserv4                                       :0x0
14:29:47: Write Speed Factor R2W_FACTOR                 :0x2
14:29:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:47: FILE_FORMAT_GRP                               :0x0
14:29:47: COPY flag                                     :0x1
14:29:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:47: File_Format                                   :0x0
14:29:47: CRC                                           :0x0
14:29:47: ####CSD Registe Values####  

14:29:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
14:29:47: ProductSerialNumber = 0x23482900
14:29:47: CardMaximumLBA      = 0x3b72400
14:29:47: CardCapacity        = 32G
14:29:47: Is card secure      = 0
14:29:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

14:29:47: [GO7_globalPreTestingSettings]### Default Initialization Completed 


14:29:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:49: Host Frequency set to 25000 KHz
14:29:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9AB0>, 0x0, True) , Command count = 49 ] 
14:29:49: [GO18_globalSetVolt]### Host voltage value is set.
14:29:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B70>, 0x0, False) , Command count = 50 ] 
14:29:49: [GO18_globalSetVolt]### Host voltage value is set.
14:29:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
14:29:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
14:29:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
14:29:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B10>, <py_sfcl.CommandDataDefinition object at 0x05DE9CF0>) , Command count = 54 ] 
14:29:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9900>, <py_sfcl.CommandDataDefinition object at 0x05DE9750>) , Command count = 55 ] 
14:29:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:49: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
14:29:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:50: Host Frequency set to 25000 KHz
14:29:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:50: ####CSD Registe 2.0 Values####
14:29:50: CSD_STRUCTURE                                 :0x1
14:29:50: Reserv1                                       :0x0
14:29:50: Time Access 1 TAAC                            :0xe
14:29:50: Time Access 2 NSAC*100                        :0x0
14:29:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:50: Card Command Classess CCC                     :0x5b5
14:29:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:50: DSR(driver stage register)  DSR_IMP           :0x0
14:29:50: Reserv2                                       :0x0
14:29:50: Device Size C_SIZE                            :0xedc8
14:29:50: Reserv3                                       :0x0
14:29:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:50: Reserv4                                       :0x0
14:29:50: Write Speed Factor R2W_FACTOR                 :0x2
14:29:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:50: FILE_FORMAT_GRP                               :0x0
14:29:50: COPY flag                                     :0x1
14:29:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:50: File_Format                                   :0x0
14:29:50: CRC                                           :0x0
14:29:50: ####CSD Registe Values####  

14:29:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:50: [GetSCRRegisterEntry] Passed
14:29:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:50: Data_Status_After Erases          : 0
14:29:50: CPRM Security Support             : No Security
14:29:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:50: Spec. Version                     : Version 3.0X
14:29:50: Extended Security Support         : Extended_Security_Not_Supported
14:29:50: Command Support                   : COMMAND_SUPPORT
14:29:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF52A0>, <py_sfcl.CommandDataDefinition object at 0x05DF50C0>) , Command count = 57 ] 
14:29:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5120>, <py_sfcl.CommandDataDefinition object at 0x05DF5150>) , Command count = 58 ] 
14:29:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:50: [ SetBusWidth(0x4) , Command count = 59 ] 
14:29:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
14:29:50: Protected Area Size 0x28000
14:29:50: Bus Width           2
14:29:50: Secure Mode         0
14:29:50: Speed  Class        4
14:29:50: Perf Move           0
14:29:50: Au Size             9
14:29:50: Erase Size          15
14:29:50: Erase Timeout       1
14:29:50: Erase offset        1
14:29:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
14:29:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:50: Host Frequency set to 100000 KHz
14:29:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:50: ####CSD Registe 2.0 Values####
14:29:50: CSD_STRUCTURE                                 :0x1
14:29:50: Reserv1                                       :0x0
14:29:50: Time Access 1 TAAC                            :0xe
14:29:50: Time Access 2 NSAC*100                        :0x0
14:29:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:50: Card Command Classess CCC                     :0x5b5
14:29:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:50: DSR(driver stage register)  DSR_IMP           :0x0
14:29:50: Reserv2                                       :0x0
14:29:50: Device Size C_SIZE                            :0xedc8
14:29:50: Reserv3                                       :0x0
14:29:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:50: Reserv4                                       :0x0
14:29:50: Write Speed Factor R2W_FACTOR                 :0x2
14:29:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:50: FILE_FORMAT_GRP                               :0x0
14:29:50: COPY flag                                     :0x1
14:29:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:50: File_Format                                   :0x0
14:29:50: CRC                                           :0x0
14:29:50: ####CSD Registe Values####  

14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5690>, <py_sfcl.CommandDataDefinition object at 0x05DF54B0>) , Command count = 62 ] 
14:29:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5510>, <py_sfcl.CommandDataDefinition object at 0x05DF5540>) , Command count = 63 ] 
14:29:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF55D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
14:29:50: Protected Area Size 0x28000
14:29:50: Bus Width           2
14:29:50: Secure Mode         0
14:29:50: Speed  Class        4
14:29:50: Perf Move           0
14:29:50: Au Size             9
14:29:50: Erase Size          15
14:29:50: Erase Timeout       1
14:29:50: Erase offset        1
14:29:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:29:53: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 65 ] 
14:29:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:29:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Outer loop Count 1024
14:29:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Inner loop Count 29
14:29:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission called
14:29:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5720>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5750>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5780>, <None>, <py_sfcl.Command23 object at 0x05DF57E0>) , Command count = 66 ] 
14:29:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:29:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:29:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5990>, <py_sfcl.PySEnhancedCmdData object at 0x05DF59C0>, <None>, <py_sfcl.Command23 object at 0x05DF57B0>) , Command count = 67 ] 
14:29:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:29:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:55: Host Frequency set to 25000 KHz
14:29:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5C30>, 0x0, True) , Command count = 68 ] 
14:29:55: [GO18_globalSetVolt]### Host voltage value is set.
14:29:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5A80>, 0x0, False) , Command count = 69 ] 
14:29:55: [GO18_globalSetVolt]### Host voltage value is set.
14:29:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 70 ] 
14:29:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 71 ] 
14:29:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 72 ] 
14:29:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5BD0>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 73 ] 
14:29:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C00>, <py_sfcl.CommandDataDefinition object at 0x05DF5C60>) , Command count = 74 ] 
14:29:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:55: [ SetCardRCA(0x1, 0xD555) , Command count = 75 ] 
14:29:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:56: Host Frequency set to 25000 KHz
14:29:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:56: ####CSD Registe 2.0 Values####
14:29:56: CSD_STRUCTURE                                 :0x1
14:29:56: Reserv1                                       :0x0
14:29:56: Time Access 1 TAAC                            :0xe
14:29:56: Time Access 2 NSAC*100                        :0x0
14:29:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:56: Card Command Classess CCC                     :0x5b5
14:29:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:56: DSR(driver stage register)  DSR_IMP           :0x0
14:29:56: Reserv2                                       :0x0
14:29:56: Device Size C_SIZE                            :0xedc8
14:29:56: Reserv3                                       :0x0
14:29:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:56: Reserv4                                       :0x0
14:29:56: Write Speed Factor R2W_FACTOR                 :0x2
14:29:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:56: FILE_FORMAT_GRP                               :0x0
14:29:56: COPY flag                                     :0x1
14:29:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:56: File_Format                                   :0x0
14:29:56: CRC                                           :0x0
14:29:56: ####CSD Registe Values####  

14:29:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:56: [GetSCRRegisterEntry] Passed
14:29:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:56: Data_Status_After Erases          : 0
14:29:56: CPRM Security Support             : No Security
14:29:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:56: Spec. Version                     : Version 3.0X
14:29:56: Extended Security Support         : Extended_Security_Not_Supported
14:29:56: Command Support                   : COMMAND_SUPPORT
14:29:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5ED0>, <py_sfcl.CommandDataDefinition object at 0x05DF5CF0>) , Command count = 76 ] 
14:29:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D50>, <py_sfcl.CommandDataDefinition object at 0x05DF5D80>) , Command count = 77 ] 
14:29:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:56: [ SetBusWidth(0x4) , Command count = 78 ] 
14:29:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 79 ] 
14:29:56: Protected Area Size 0x28000
14:29:56: Bus Width           2
14:29:56: Secure Mode         0
14:29:56: Speed  Class        4
14:29:56: Perf Move           0
14:29:56: Au Size             9
14:29:56: Erase Size          15
14:29:56: Erase Timeout       1
14:29:56: Erase offset        1
14:29:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 80 ] 
14:29:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:56: Host Frequency set to 100000 KHz
14:29:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:56: ####CSD Registe 2.0 Values####
14:29:56: CSD_STRUCTURE                                 :0x1
14:29:56: Reserv1                                       :0x0
14:29:56: Time Access 1 TAAC                            :0xe
14:29:56: Time Access 2 NSAC*100                        :0x0
14:29:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:56: Card Command Classess CCC                     :0x5b5
14:29:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:56: DSR(driver stage register)  DSR_IMP           :0x0
14:29:56: Reserv2                                       :0x0
14:29:56: Device Size C_SIZE                            :0xedc8
14:29:56: Reserv3                                       :0x0
14:29:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:56: Reserv4                                       :0x0
14:29:56: Write Speed Factor R2W_FACTOR                 :0x2
14:29:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:56: FILE_FORMAT_GRP                               :0x0
14:29:56: COPY flag                                     :0x1
14:29:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:56: File_Format                                   :0x0
14:29:56: CRC                                           :0x0
14:29:56: ####CSD Registe Values####  

14:29:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F30>, <py_sfcl.CommandDataDefinition object at 0x05DF5F60>) , Command count = 81 ] 
14:29:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5FC0>, <py_sfcl.CommandDataDefinition object at 0x05DFB030>) , Command count = 82 ] 
14:29:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:56: Failed Running script <module 'STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump.pyc'> with error WriteWithFPGAPattern() got an unexpected keyword argument 'startLba' 
14:29:56: ########################################
14:29:56: ########################################
14:29:56: Stated Running script STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap 
14:29:56: ########################################
14:29:56: ###### Running STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap Test ###### 

14:29:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:29:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:29:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:59: Host Frequency set to 25000 KHz
14:29:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB450>, 0x0, True) , Command count = 83 ] 
14:29:59: [GO18_globalSetVolt]### Host voltage value is set.
14:29:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB630>, 0x0, False) , Command count = 84 ] 
14:29:59: [GO18_globalSetVolt]### Host voltage value is set.
14:29:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 85 ] 
14:29:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 86 ] 
14:29:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 87 ] 
14:29:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBAB0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA50>) , Command count = 88 ] 
14:29:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB750>) , Command count = 89 ] 
14:29:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:59: [ SetCardRCA(0x1, 0xD555) , Command count = 90 ] 
14:29:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:59: Host Frequency set to 25000 KHz
14:29:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:59: ####CSD Registe 2.0 Values####
14:29:59: CSD_STRUCTURE                                 :0x1
14:29:59: Reserv1                                       :0x0
14:29:59: Time Access 1 TAAC                            :0xe
14:29:59: Time Access 2 NSAC*100                        :0x0
14:29:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:59: Card Command Classess CCC                     :0x5b5
14:29:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:59: DSR(driver stage register)  DSR_IMP           :0x0
14:29:59: Reserv2                                       :0x0
14:29:59: Device Size C_SIZE                            :0xedc8
14:29:59: Reserv3                                       :0x0
14:29:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:59: Reserv4                                       :0x0
14:29:59: Write Speed Factor R2W_FACTOR                 :0x2
14:29:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:59: FILE_FORMAT_GRP                               :0x0
14:29:59: COPY flag                                     :0x1
14:29:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:59: File_Format                                   :0x0
14:29:59: CRC                                           :0x0
14:29:59: ####CSD Registe Values####  

14:29:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:59: [GetSCRRegisterEntry] Passed
14:29:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:59: Data_Status_After Erases          : 0
14:29:59: CPRM Security Support             : No Security
14:29:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:59: Spec. Version                     : Version 3.0X
14:29:59: Extended Security Support         : Extended_Security_Not_Supported
14:29:59: Command Support                   : COMMAND_SUPPORT
14:29:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05DFB660>) , Command count = 91 ] 
14:29:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB600>, <py_sfcl.CommandDataDefinition object at 0x05DFB150>) , Command count = 92 ] 
14:29:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:59: [ SetBusWidth(0x4) , Command count = 93 ] 
14:29:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 94 ] 
14:29:59: Protected Area Size 0x28000
14:29:59: Bus Width           2
14:29:59: Secure Mode         0
14:29:59: Speed  Class        4
14:29:59: Perf Move           0
14:29:59: Au Size             9
14:29:59: Erase Size          15
14:29:59: Erase Timeout       1
14:29:59: Erase offset        1
14:29:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 95 ] 
14:29:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:59: Host Frequency set to 100000 KHz
14:29:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:59: ####CSD Registe 2.0 Values####
14:29:59: CSD_STRUCTURE                                 :0x1
14:29:59: Reserv1                                       :0x0
14:29:59: Time Access 1 TAAC                            :0xe
14:30:00: Time Access 2 NSAC*100                        :0x0
14:30:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:00: Card Command Classess CCC                     :0x5b5
14:30:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:00: DSR(driver stage register)  DSR_IMP           :0x0
14:30:00: Reserv2                                       :0x0
14:30:00: Device Size C_SIZE                            :0xedc8
14:30:00: Reserv3                                       :0x0
14:30:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:00: Reserv4                                       :0x0
14:30:00: Write Speed Factor R2W_FACTOR                 :0x2
14:30:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:00: FILE_FORMAT_GRP                               :0x0
14:30:00: COPY flag                                     :0x1
14:30:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:00: File_Format                                   :0x0
14:30:00: CRC                                           :0x0
14:30:00: ####CSD Registe Values####  

14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBED0>, <py_sfcl.CommandDataDefinition object at 0x05DFB4E0>) , Command count = 96 ] 
14:30:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB9C0>, <py_sfcl.CommandDataDefinition object at 0x05DFB3C0>) , Command count = 97 ] 
14:30:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:30:03: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 98 ] 
14:30:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:30:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBEA0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB3F0>, <None>, <py_sfcl.Command23 object at 0x05DFBF90>) , Command count = 99 ] 
14:30:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:05: Host Frequency set to 25000 KHz
14:30:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB2D0>, 0x0, True) , Command count = 100 ] 
14:30:05: [GO18_globalSetVolt]### Host voltage value is set.
14:30:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB180>, 0x0, False) , Command count = 101 ] 
14:30:05: [GO18_globalSetVolt]### Host voltage value is set.
14:30:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 102 ] 
14:30:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 103 ] 
14:30:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 104 ] 
14:30:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC60>, <py_sfcl.CommandDataDefinition object at 0x05DFB930>) , Command count = 105 ] 
14:30:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2A0>, <py_sfcl.CommandDataDefinition object at 0x05DFB9F0>) , Command count = 106 ] 
14:30:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:05: [ SetCardRCA(0x1, 0xD555) , Command count = 107 ] 
14:30:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:05: Host Frequency set to 25000 KHz
14:30:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:05: ####CSD Registe 2.0 Values####
14:30:05: CSD_STRUCTURE                                 :0x1
14:30:05: Reserv1                                       :0x0
14:30:05: Time Access 1 TAAC                            :0xe
14:30:05: Time Access 2 NSAC*100                        :0x0
14:30:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:05: Card Command Classess CCC                     :0x5b5
14:30:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:05: DSR(driver stage register)  DSR_IMP           :0x0
14:30:05: Reserv2                                       :0x0
14:30:05: Device Size C_SIZE                            :0xedc8
14:30:05: Reserv3                                       :0x0
14:30:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:05: Reserv4                                       :0x0
14:30:05: Write Speed Factor R2W_FACTOR                 :0x2
14:30:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:05: FILE_FORMAT_GRP                               :0x0
14:30:05: COPY flag                                     :0x1
14:30:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:05: File_Format                                   :0x0
14:30:05: CRC                                           :0x0
14:30:05: ####CSD Registe Values####  

14:30:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:05: [GetSCRRegisterEntry] Passed
14:30:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:05: Data_Status_After Erases          : 0
14:30:05: CPRM Security Support             : No Security
14:30:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:05: Spec. Version                     : Version 3.0X
14:30:05: Extended Security Support         : Extended_Security_Not_Supported
14:30:05: Command Support                   : COMMAND_SUPPORT
14:30:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB900>, <py_sfcl.CommandDataDefinition object at 0x05DFB870>) , Command count = 108 ] 
14:30:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFB540>) , Command count = 109 ] 
14:30:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:05: [ SetBusWidth(0x4) , Command count = 110 ] 
14:30:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 111 ] 
14:30:05: Protected Area Size 0x28000
14:30:05: Bus Width           2
14:30:05: Secure Mode         0
14:30:05: Speed  Class        4
14:30:05: Perf Move           0
14:30:05: Au Size             9
14:30:05: Erase Size          15
14:30:05: Erase Timeout       1
14:30:05: Erase offset        1
14:30:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 112 ] 
14:30:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:05: Host Frequency set to 100000 KHz
14:30:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:05: ####CSD Registe 2.0 Values####
14:30:05: CSD_STRUCTURE                                 :0x1
14:30:05: Reserv1                                       :0x0
14:30:05: Time Access 1 TAAC                            :0xe
14:30:06: Time Access 2 NSAC*100                        :0x0
14:30:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:06: Card Command Classess CCC                     :0x5b5
14:30:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:06: DSR(driver stage register)  DSR_IMP           :0x0
14:30:06: Reserv2                                       :0x0
14:30:06: Device Size C_SIZE                            :0xedc8
14:30:06: Reserv3                                       :0x0
14:30:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:06: Reserv4                                       :0x0
14:30:06: Write Speed Factor R2W_FACTOR                 :0x2
14:30:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:06: FILE_FORMAT_GRP                               :0x0
14:30:06: COPY flag                                     :0x1
14:30:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:06: File_Format                                   :0x0
14:30:06: CRC                                           :0x0
14:30:06: ####CSD Registe Values####  

14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF00>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 113 ] 
14:30:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB330>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 114 ] 
14:30:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB6C0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBE70>, <None>, <py_sfcl.Command23 object at 0x05DFB390>) , Command count = 115 ] 
14:30:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:08: Host Frequency set to 25000 KHz
14:30:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00210>, 0x0, True) , Command count = 116 ] 
14:30:08: [GO18_globalSetVolt]### Host voltage value is set.
14:30:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00060>, 0x0, False) , Command count = 117 ] 
14:30:08: [GO18_globalSetVolt]### Host voltage value is set.
14:30:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 118 ] 
14:30:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 119 ] 
14:30:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 120 ] 
14:30:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E001B0>, <py_sfcl.CommandDataDefinition object at 0x05E00150>) , Command count = 121 ] 
14:30:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E001E0>, <py_sfcl.CommandDataDefinition object at 0x05E00240>) , Command count = 122 ] 
14:30:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:09: [ SetCardRCA(0x1, 0xD555) , Command count = 123 ] 
14:30:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:09: Host Frequency set to 25000 KHz
14:30:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:09: ####CSD Registe 2.0 Values####
14:30:09: CSD_STRUCTURE                                 :0x1
14:30:09: Reserv1                                       :0x0
14:30:09: Time Access 1 TAAC                            :0xe
14:30:09: Time Access 2 NSAC*100                        :0x0
14:30:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:09: Card Command Classess CCC                     :0x5b5
14:30:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:09: DSR(driver stage register)  DSR_IMP           :0x0
14:30:09: Reserv2                                       :0x0
14:30:09: Device Size C_SIZE                            :0xedc8
14:30:09: Reserv3                                       :0x0
14:30:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:09: Reserv4                                       :0x0
14:30:09: Write Speed Factor R2W_FACTOR                 :0x2
14:30:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:09: FILE_FORMAT_GRP                               :0x0
14:30:09: COPY flag                                     :0x1
14:30:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:09: File_Format                                   :0x0
14:30:09: CRC                                           :0x0
14:30:09: ####CSD Registe Values####  

14:30:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:09: [GetSCRRegisterEntry] Passed
14:30:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:09: Data_Status_After Erases          : 0
14:30:09: CPRM Security Support             : No Security
14:30:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:09: Spec. Version                     : Version 3.0X
14:30:09: Extended Security Support         : Extended_Security_Not_Supported
14:30:09: Command Support                   : COMMAND_SUPPORT
14:30:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004B0>, <py_sfcl.CommandDataDefinition object at 0x05E002D0>) , Command count = 124 ] 
14:30:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00330>, <py_sfcl.CommandDataDefinition object at 0x05E00360>) , Command count = 125 ] 
14:30:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:09: [ SetBusWidth(0x4) , Command count = 126 ] 
14:30:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 127 ] 
14:30:09: Protected Area Size 0x28000
14:30:09: Bus Width           2
14:30:09: Secure Mode         0
14:30:09: Speed  Class        4
14:30:09: Perf Move           0
14:30:09: Au Size             9
14:30:09: Erase Size          15
14:30:09: Erase Timeout       1
14:30:09: Erase offset        1
14:30:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 128 ] 
14:30:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:09: Host Frequency set to 100000 KHz
14:30:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:09: ####CSD Registe 2.0 Values####
14:30:09: CSD_STRUCTURE                                 :0x1
14:30:09: Reserv1                                       :0x0
14:30:09: Time Access 1 TAAC                            :0xe
14:30:09: Time Access 2 NSAC*100                        :0x0
14:30:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:09: Card Command Classess CCC                     :0x5b5
14:30:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:09: DSR(driver stage register)  DSR_IMP           :0x0
14:30:09: Reserv2                                       :0x0
14:30:09: Device Size C_SIZE                            :0xedc8
14:30:09: Reserv3                                       :0x0
14:30:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:09: Reserv4                                       :0x0
14:30:09: Write Speed Factor R2W_FACTOR                 :0x2
14:30:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:09: FILE_FORMAT_GRP                               :0x0
14:30:09: COPY flag                                     :0x1
14:30:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:09: File_Format                                   :0x0
14:30:09: CRC                                           :0x0
14:30:09: ####CSD Registe Values####  

14:30:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E006C0>, <py_sfcl.CommandDataDefinition object at 0x05E004E0>) , Command count = 129 ] 
14:30:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00540>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 130 ] 
14:30:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E005D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00600>, <py_sfcl.PySEnhancedCmdData object at 0x05E00630>, <None>, <py_sfcl.Command23 object at 0x05DFB270>) , Command count = 131 ] 
14:30:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:12: Host Frequency set to 25000 KHz
14:30:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E008D0>, 0x0, True) , Command count = 132 ] 
14:30:12: [GO18_globalSetVolt]### Host voltage value is set.
14:30:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00720>, 0x0, False) , Command count = 133 ] 
14:30:12: [GO18_globalSetVolt]### Host voltage value is set.
14:30:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 134 ] 
14:30:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 135 ] 
14:30:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 136 ] 
14:30:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00870>, <py_sfcl.CommandDataDefinition object at 0x05E00810>) , Command count = 137 ] 
14:30:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008A0>, <py_sfcl.CommandDataDefinition object at 0x05E00900>) , Command count = 138 ] 
14:30:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:12: [ SetCardRCA(0x1, 0xD555) , Command count = 139 ] 
14:30:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:12: Host Frequency set to 25000 KHz
14:30:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:12: ####CSD Registe 2.0 Values####
14:30:12: CSD_STRUCTURE                                 :0x1
14:30:12: Reserv1                                       :0x0
14:30:12: Time Access 1 TAAC                            :0xe
14:30:12: Time Access 2 NSAC*100                        :0x0
14:30:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:12: Card Command Classess CCC                     :0x5b5
14:30:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:12: DSR(driver stage register)  DSR_IMP           :0x0
14:30:12: Reserv2                                       :0x0
14:30:12: Device Size C_SIZE                            :0xedc8
14:30:12: Reserv3                                       :0x0
14:30:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:12: Reserv4                                       :0x0
14:30:12: Write Speed Factor R2W_FACTOR                 :0x2
14:30:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:12: FILE_FORMAT_GRP                               :0x0
14:30:12: COPY flag                                     :0x1
14:30:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:12: File_Format                                   :0x0
14:30:12: CRC                                           :0x0
14:30:12: ####CSD Registe Values####  

14:30:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:12: [GetSCRRegisterEntry] Passed
14:30:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:12: Data_Status_After Erases          : 0
14:30:12: CPRM Security Support             : No Security
14:30:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:12: Spec. Version                     : Version 3.0X
14:30:12: Extended Security Support         : Extended_Security_Not_Supported
14:30:12: Command Support                   : COMMAND_SUPPORT
14:30:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B70>, <py_sfcl.CommandDataDefinition object at 0x05E00990>) , Command count = 140 ] 
14:30:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E009F0>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 141 ] 
14:30:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:12: [ SetBusWidth(0x4) , Command count = 142 ] 
14:30:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 143 ] 
14:30:12: Protected Area Size 0x28000
14:30:12: Bus Width           2
14:30:12: Secure Mode         0
14:30:12: Speed  Class        4
14:30:12: Perf Move           0
14:30:12: Au Size             9
14:30:12: Erase Size          15
14:30:12: Erase Timeout       1
14:30:12: Erase offset        1
14:30:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 144 ] 
14:30:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:12: Host Frequency set to 100000 KHz
14:30:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:12: ####CSD Registe 2.0 Values####
14:30:12: CSD_STRUCTURE                                 :0x1
14:30:12: Reserv1                                       :0x0
14:30:12: Time Access 1 TAAC                            :0xe
14:30:12: Time Access 2 NSAC*100                        :0x0
14:30:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:12: Card Command Classess CCC                     :0x5b5
14:30:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:12: DSR(driver stage register)  DSR_IMP           :0x0
14:30:12: Reserv2                                       :0x0
14:30:12: Device Size C_SIZE                            :0xedc8
14:30:12: Reserv3                                       :0x0
14:30:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:12: Reserv4                                       :0x0
14:30:13: Write Speed Factor R2W_FACTOR                 :0x2
14:30:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:13: FILE_FORMAT_GRP                               :0x0
14:30:13: COPY flag                                     :0x1
14:30:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:13: File_Format                                   :0x0
14:30:13: CRC                                           :0x0
14:30:13: ####CSD Registe Values####  

14:30:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D80>, <py_sfcl.CommandDataDefinition object at 0x05E00BA0>) , Command count = 145 ] 
14:30:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C00>, <py_sfcl.CommandDataDefinition object at 0x05E00C30>) , Command count = 146 ] 
14:30:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00CC0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00CF0>, <None>, <py_sfcl.Command23 object at 0x05E00660>) , Command count = 147 ] 
14:30:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:15: Host Frequency set to 25000 KHz
14:30:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00F90>, 0x0, True) , Command count = 148 ] 
14:30:15: [GO18_globalSetVolt]### Host voltage value is set.
14:30:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00DE0>, 0x0, False) , Command count = 149 ] 
14:30:15: [GO18_globalSetVolt]### Host voltage value is set.
14:30:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 150 ] 
14:30:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 151 ] 
14:30:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 152 ] 
14:30:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F30>, <py_sfcl.CommandDataDefinition object at 0x05E00ED0>) , Command count = 153 ] 
14:30:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F60>, <py_sfcl.CommandDataDefinition object at 0x05E00FC0>) , Command count = 154 ] 
14:30:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:15: [ SetCardRCA(0x1, 0xD555) , Command count = 155 ] 
14:30:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:15: Host Frequency set to 25000 KHz
14:30:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:15: ####CSD Registe 2.0 Values####
14:30:15: CSD_STRUCTURE                                 :0x1
14:30:15: Reserv1                                       :0x0
14:30:15: Time Access 1 TAAC                            :0xe
14:30:15: Time Access 2 NSAC*100                        :0x0
14:30:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:15: Card Command Classess CCC                     :0x5b5
14:30:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:15: DSR(driver stage register)  DSR_IMP           :0x0
14:30:15: Reserv2                                       :0x0
14:30:15: Device Size C_SIZE                            :0xedc8
14:30:15: Reserv3                                       :0x0
14:30:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:15: Reserv4                                       :0x0
14:30:15: Write Speed Factor R2W_FACTOR                 :0x2
14:30:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:15: FILE_FORMAT_GRP                               :0x0
14:30:15: COPY flag                                     :0x1
14:30:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:15: File_Format                                   :0x0
14:30:15: CRC                                           :0x0
14:30:15: ####CSD Registe Values####  

14:30:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:15: [GetSCRRegisterEntry] Passed
14:30:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:15: Data_Status_After Erases          : 0
14:30:15: CPRM Security Support             : No Security
14:30:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:15: Spec. Version                     : Version 3.0X
14:30:15: Extended Security Support         : Extended_Security_Not_Supported
14:30:15: Command Support                   : COMMAND_SUPPORT
14:30:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04270>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 156 ] 
14:30:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 157 ] 
14:30:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:15: [ SetBusWidth(0x4) , Command count = 158 ] 
14:30:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E041E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 159 ] 
14:30:16: Protected Area Size 0x28000
14:30:16: Bus Width           2
14:30:16: Secure Mode         0
14:30:16: Speed  Class        4
14:30:16: Perf Move           0
14:30:16: Au Size             9
14:30:16: Erase Size          15
14:30:16: Erase Timeout       1
14:30:16: Erase offset        1
14:30:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 160 ] 
14:30:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:16: Host Frequency set to 100000 KHz
14:30:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:16: ####CSD Registe 2.0 Values####
14:30:16: CSD_STRUCTURE                                 :0x1
14:30:16: Reserv1                                       :0x0
14:30:16: Time Access 1 TAAC                            :0xe
14:30:16: Time Access 2 NSAC*100                        :0x0
14:30:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:16: Card Command Classess CCC                     :0x5b5
14:30:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:16: DSR(driver stage register)  DSR_IMP           :0x0
14:30:16: Reserv2                                       :0x0
14:30:16: Device Size C_SIZE                            :0xedc8
14:30:16: Reserv3                                       :0x0
14:30:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:16: Reserv4                                       :0x0
14:30:16: Write Speed Factor R2W_FACTOR                 :0x2
14:30:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:16: FILE_FORMAT_GRP                               :0x0
14:30:16: COPY flag                                     :0x1
14:30:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:16: File_Format                                   :0x0
14:30:16: CRC                                           :0x0
14:30:16: ####CSD Registe Values####  

14:30:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04480>, <py_sfcl.CommandDataDefinition object at 0x05E042A0>) , Command count = 161 ] 
14:30:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04300>, <py_sfcl.CommandDataDefinition object at 0x05E04330>) , Command count = 162 ] 
14:30:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E043C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E043F0>, <None>, <py_sfcl.Command23 object at 0x05E00D20>) , Command count = 163 ] 
14:30:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:18: Host Frequency set to 25000 KHz
14:30:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04690>, 0x0, True) , Command count = 164 ] 
14:30:19: [GO18_globalSetVolt]### Host voltage value is set.
14:30:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E044E0>, 0x0, False) , Command count = 165 ] 
14:30:19: [GO18_globalSetVolt]### Host voltage value is set.
14:30:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 166 ] 
14:30:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 167 ] 
14:30:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 168 ] 
14:30:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04630>, <py_sfcl.CommandDataDefinition object at 0x05E045D0>) , Command count = 169 ] 
14:30:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E046C0>) , Command count = 170 ] 
14:30:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:19: [ SetCardRCA(0x1, 0xD555) , Command count = 171 ] 
14:30:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:19: Host Frequency set to 25000 KHz
14:30:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:19: ####CSD Registe 2.0 Values####
14:30:19: CSD_STRUCTURE                                 :0x1
14:30:19: Reserv1                                       :0x0
14:30:19: Time Access 1 TAAC                            :0xe
14:30:19: Time Access 2 NSAC*100                        :0x0
14:30:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:19: Card Command Classess CCC                     :0x5b5
14:30:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:19: DSR(driver stage register)  DSR_IMP           :0x0
14:30:19: Reserv2                                       :0x0
14:30:19: Device Size C_SIZE                            :0xedc8
14:30:19: Reserv3                                       :0x0
14:30:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:19: Reserv4                                       :0x0
14:30:19: Write Speed Factor R2W_FACTOR                 :0x2
14:30:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:19: FILE_FORMAT_GRP                               :0x0
14:30:19: COPY flag                                     :0x1
14:30:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:19: File_Format                                   :0x0
14:30:19: CRC                                           :0x0
14:30:19: ####CSD Registe Values####  

14:30:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:19: [GetSCRRegisterEntry] Passed
14:30:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:19: Data_Status_After Erases          : 0
14:30:19: CPRM Security Support             : No Security
14:30:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:19: Spec. Version                     : Version 3.0X
14:30:19: Extended Security Support         : Extended_Security_Not_Supported
14:30:19: Command Support                   : COMMAND_SUPPORT
14:30:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04930>, <py_sfcl.CommandDataDefinition object at 0x05E04750>) , Command count = 172 ] 
14:30:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047B0>, <py_sfcl.CommandDataDefinition object at 0x05E047E0>) , Command count = 173 ] 
14:30:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:19: [ SetBusWidth(0x4) , Command count = 174 ] 
14:30:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E048A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 175 ] 
14:30:19: Protected Area Size 0x28000
14:30:19: Bus Width           2
14:30:19: Secure Mode         0
14:30:19: Speed  Class        4
14:30:19: Perf Move           0
14:30:19: Au Size             9
14:30:19: Erase Size          15
14:30:19: Erase Timeout       1
14:30:19: Erase offset        1
14:30:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 176 ] 
14:30:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:19: Host Frequency set to 100000 KHz
14:30:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:19: ####CSD Registe 2.0 Values####
14:30:19: CSD_STRUCTURE                                 :0x1
14:30:19: Reserv1                                       :0x0
14:30:19: Time Access 1 TAAC                            :0xe
14:30:19: Time Access 2 NSAC*100                        :0x0
14:30:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:19: Card Command Classess CCC                     :0x5b5
14:30:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:19: DSR(driver stage register)  DSR_IMP           :0x0
14:30:19: Reserv2                                       :0x0
14:30:19: Device Size C_SIZE                            :0xedc8
14:30:19: Reserv3                                       :0x0
14:30:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:19: Reserv4                                       :0x0
14:30:19: Write Speed Factor R2W_FACTOR                 :0x2
14:30:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:19: FILE_FORMAT_GRP                               :0x0
14:30:19: COPY flag                                     :0x1
14:30:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:20: File_Format                                   :0x0
14:30:20: CRC                                           :0x0
14:30:20: ####CSD Registe Values####  

14:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B40>, <py_sfcl.CommandDataDefinition object at 0x05E04960>) , Command count = 177 ] 
14:30:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049C0>, <py_sfcl.CommandDataDefinition object at 0x05E049F0>) , Command count = 178 ] 
14:30:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04A80>, <py_sfcl.PySEnhancedCmdData object at 0x05E04AB0>, <None>, <py_sfcl.Command23 object at 0x05E04420>) , Command count = 179 ] 
14:30:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:22: Host Frequency set to 25000 KHz
14:30:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04D50>, 0x0, True) , Command count = 180 ] 
14:30:22: [GO18_globalSetVolt]### Host voltage value is set.
14:30:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04BA0>, 0x0, False) , Command count = 181 ] 
14:30:22: [GO18_globalSetVolt]### Host voltage value is set.
14:30:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 182 ] 
14:30:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 183 ] 
14:30:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 184 ] 
14:30:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CF0>, <py_sfcl.CommandDataDefinition object at 0x05E04C90>) , Command count = 185 ] 
14:30:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D20>, <py_sfcl.CommandDataDefinition object at 0x05E04D80>) , Command count = 186 ] 
14:30:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:22: [ SetCardRCA(0x1, 0xD555) , Command count = 187 ] 
14:30:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:22: Host Frequency set to 25000 KHz
14:30:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:22: ####CSD Registe 2.0 Values####
14:30:22: CSD_STRUCTURE                                 :0x1
14:30:22: Reserv1                                       :0x0
14:30:22: Time Access 1 TAAC                            :0xe
14:30:22: Time Access 2 NSAC*100                        :0x0
14:30:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:22: Card Command Classess CCC                     :0x5b5
14:30:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:22: DSR(driver stage register)  DSR_IMP           :0x0
14:30:22: Reserv2                                       :0x0
14:30:22: Device Size C_SIZE                            :0xedc8
14:30:22: Reserv3                                       :0x0
14:30:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:22: Reserv4                                       :0x0
14:30:22: Write Speed Factor R2W_FACTOR                 :0x2
14:30:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:22: FILE_FORMAT_GRP                               :0x0
14:30:22: COPY flag                                     :0x1
14:30:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:22: File_Format                                   :0x0
14:30:22: CRC                                           :0x0
14:30:22: ####CSD Registe Values####  

14:30:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:22: [GetSCRRegisterEntry] Passed
14:30:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:22: Data_Status_After Erases          : 0
14:30:22: CPRM Security Support             : No Security
14:30:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:22: Spec. Version                     : Version 3.0X
14:30:22: Extended Security Support         : Extended_Security_Not_Supported
14:30:22: Command Support                   : COMMAND_SUPPORT
14:30:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E10>, <py_sfcl.CommandDataDefinition object at 0x05E04E40>) , Command count = 188 ] 
14:30:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04EA0>, <py_sfcl.CommandDataDefinition object at 0x05E04ED0>) , Command count = 189 ] 
14:30:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:22: [ SetBusWidth(0x4) , Command count = 190 ] 
14:30:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 191 ] 
14:30:22: Protected Area Size 0x28000
14:30:22: Bus Width           2
14:30:22: Secure Mode         0
14:30:22: Speed  Class        4
14:30:22: Perf Move           0
14:30:22: Au Size             9
14:30:22: Erase Size          15
14:30:22: Erase Timeout       1
14:30:22: Erase offset        1
14:30:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 192 ] 
14:30:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:22: Host Frequency set to 100000 KHz
14:30:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:22: ####CSD Registe 2.0 Values####
14:30:22: CSD_STRUCTURE                                 :0x1
14:30:22: Reserv1                                       :0x0
14:30:22: Time Access 1 TAAC                            :0xe
14:30:23: Time Access 2 NSAC*100                        :0x0
14:30:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:23: Card Command Classess CCC                     :0x5b5
14:30:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:23: DSR(driver stage register)  DSR_IMP           :0x0
14:30:23: Reserv2                                       :0x0
14:30:23: Device Size C_SIZE                            :0xedc8
14:30:23: Reserv3                                       :0x0
14:30:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:23: Reserv4                                       :0x0
14:30:23: Write Speed Factor R2W_FACTOR                 :0x2
14:30:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:23: FILE_FORMAT_GRP                               :0x0
14:30:23: COPY flag                                     :0x1
14:30:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:23: File_Format                                   :0x0
14:30:23: CRC                                           :0x0
14:30:23: ####CSD Registe Values####  

14:30:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07240>, <py_sfcl.CommandDataDefinition object at 0x05E07060>) , Command count = 193 ] 
14:30:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E070C0>, <py_sfcl.CommandDataDefinition object at 0x05E070F0>) , Command count = 194 ] 
14:30:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07180>, <py_sfcl.PySEnhancedCmdData object at 0x05E071B0>, <None>, <py_sfcl.Command23 object at 0x05E04AE0>) , Command count = 195 ] 
14:30:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:25: Host Frequency set to 25000 KHz
14:30:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07450>, 0x0, True) , Command count = 196 ] 
14:30:25: [GO18_globalSetVolt]### Host voltage value is set.
14:30:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E072A0>, 0x0, False) , Command count = 197 ] 
14:30:25: [GO18_globalSetVolt]### Host voltage value is set.
14:30:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 198 ] 
14:30:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 199 ] 
14:30:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 200 ] 
14:30:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E073F0>, <py_sfcl.CommandDataDefinition object at 0x05E07390>) , Command count = 201 ] 
14:30:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07420>, <py_sfcl.CommandDataDefinition object at 0x05E07480>) , Command count = 202 ] 
14:30:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:26: [ SetCardRCA(0x1, 0xD555) , Command count = 203 ] 
14:30:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:26: Host Frequency set to 25000 KHz
14:30:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:26: ####CSD Registe 2.0 Values####
14:30:26: CSD_STRUCTURE                                 :0x1
14:30:26: Reserv1                                       :0x0
14:30:26: Time Access 1 TAAC                            :0xe
14:30:26: Time Access 2 NSAC*100                        :0x0
14:30:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:26: Card Command Classess CCC                     :0x5b5
14:30:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:26: DSR(driver stage register)  DSR_IMP           :0x0
14:30:26: Reserv2                                       :0x0
14:30:26: Device Size C_SIZE                            :0xedc8
14:30:26: Reserv3                                       :0x0
14:30:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:26: Reserv4                                       :0x0
14:30:26: Write Speed Factor R2W_FACTOR                 :0x2
14:30:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:26: FILE_FORMAT_GRP                               :0x0
14:30:26: COPY flag                                     :0x1
14:30:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:26: File_Format                                   :0x0
14:30:26: CRC                                           :0x0
14:30:26: ####CSD Registe Values####  

14:30:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:26: [GetSCRRegisterEntry] Passed
14:30:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:26: Data_Status_After Erases          : 0
14:30:26: CPRM Security Support             : No Security
14:30:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:26: Spec. Version                     : Version 3.0X
14:30:26: Extended Security Support         : Extended_Security_Not_Supported
14:30:26: Command Support                   : COMMAND_SUPPORT
14:30:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E076F0>, <py_sfcl.CommandDataDefinition object at 0x05E07510>) , Command count = 204 ] 
14:30:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07570>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 205 ] 
14:30:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:26: [ SetBusWidth(0x4) , Command count = 206 ] 
14:30:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 207 ] 
14:30:26: Protected Area Size 0x28000
14:30:26: Bus Width           2
14:30:26: Secure Mode         0
14:30:26: Speed  Class        4
14:30:26: Perf Move           0
14:30:26: Au Size             9
14:30:26: Erase Size          15
14:30:26: Erase Timeout       1
14:30:26: Erase offset        1
14:30:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 208 ] 
14:30:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:26: Host Frequency set to 100000 KHz
14:30:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:26: ####CSD Registe 2.0 Values####
14:30:26: CSD_STRUCTURE                                 :0x1
14:30:26: Reserv1                                       :0x0
14:30:26: Time Access 1 TAAC                            :0xe
14:30:26: Time Access 2 NSAC*100                        :0x0
14:30:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:26: Card Command Classess CCC                     :0x5b5
14:30:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:26: DSR(driver stage register)  DSR_IMP           :0x0
14:30:26: Reserv2                                       :0x0
14:30:26: Device Size C_SIZE                            :0xedc8
14:30:26: Reserv3                                       :0x0
14:30:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:26: Reserv4                                       :0x0
14:30:26: Write Speed Factor R2W_FACTOR                 :0x2
14:30:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:26: FILE_FORMAT_GRP                               :0x0
14:30:26: COPY flag                                     :0x1
14:30:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:26: File_Format                                   :0x0
14:30:26: CRC                                           :0x0
14:30:26: ####CSD Registe Values####  

14:30:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07900>, <py_sfcl.CommandDataDefinition object at 0x05E07720>) , Command count = 209 ] 
14:30:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07780>, <py_sfcl.CommandDataDefinition object at 0x05E077B0>) , Command count = 210 ] 
14:30:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07840>, <py_sfcl.PySEnhancedCmdData object at 0x05E07870>, <None>, <py_sfcl.Command23 object at 0x05E071E0>) , Command count = 211 ] 
14:30:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:29: Host Frequency set to 25000 KHz
14:30:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07B10>, 0x0, True) , Command count = 212 ] 
14:30:29: [GO18_globalSetVolt]### Host voltage value is set.
14:30:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07960>, 0x0, False) , Command count = 213 ] 
14:30:29: [GO18_globalSetVolt]### Host voltage value is set.
14:30:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 214 ] 
14:30:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 215 ] 
14:30:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 216 ] 
14:30:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07AB0>, <py_sfcl.CommandDataDefinition object at 0x05E07A50>) , Command count = 217 ] 
14:30:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07AE0>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 218 ] 
14:30:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:29: [ SetCardRCA(0x1, 0xD555) , Command count = 219 ] 
14:30:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:29: Host Frequency set to 25000 KHz
14:30:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:29: ####CSD Registe 2.0 Values####
14:30:29: CSD_STRUCTURE                                 :0x1
14:30:29: Reserv1                                       :0x0
14:30:29: Time Access 1 TAAC                            :0xe
14:30:29: Time Access 2 NSAC*100                        :0x0
14:30:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:29: Card Command Classess CCC                     :0x5b5
14:30:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:29: DSR(driver stage register)  DSR_IMP           :0x0
14:30:29: Reserv2                                       :0x0
14:30:29: Device Size C_SIZE                            :0xedc8
14:30:29: Reserv3                                       :0x0
14:30:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:29: Reserv4                                       :0x0
14:30:29: Write Speed Factor R2W_FACTOR                 :0x2
14:30:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:29: FILE_FORMAT_GRP                               :0x0
14:30:29: COPY flag                                     :0x1
14:30:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:29: File_Format                                   :0x0
14:30:29: CRC                                           :0x0
14:30:29: ####CSD Registe Values####  

14:30:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:29: [GetSCRRegisterEntry] Passed
14:30:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:29: Data_Status_After Erases          : 0
14:30:29: CPRM Security Support             : No Security
14:30:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:29: Spec. Version                     : Version 3.0X
14:30:29: Extended Security Support         : Extended_Security_Not_Supported
14:30:29: Command Support                   : COMMAND_SUPPORT
14:30:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07DB0>, <py_sfcl.CommandDataDefinition object at 0x05E07BD0>) , Command count = 220 ] 
14:30:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07C30>, <py_sfcl.CommandDataDefinition object at 0x05E07C60>) , Command count = 221 ] 
14:30:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:29: [ SetBusWidth(0x4) , Command count = 222 ] 
14:30:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 223 ] 
14:30:29: Protected Area Size 0x28000
14:30:29: Bus Width           2
14:30:29: Secure Mode         0
14:30:29: Speed  Class        4
14:30:29: Perf Move           0
14:30:29: Au Size             9
14:30:29: Erase Size          15
14:30:29: Erase Timeout       1
14:30:29: Erase offset        1
14:30:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 224 ] 
14:30:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:29: Host Frequency set to 100000 KHz
14:30:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:29: ####CSD Registe 2.0 Values####
14:30:29: CSD_STRUCTURE                                 :0x1
14:30:29: Reserv1                                       :0x0
14:30:29: Time Access 1 TAAC                            :0xe
14:30:29: Time Access 2 NSAC*100                        :0x0
14:30:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:29: Card Command Classess CCC                     :0x5b5
14:30:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:29: DSR(driver stage register)  DSR_IMP           :0x0
14:30:29: Reserv2                                       :0x0
14:30:29: Device Size C_SIZE                            :0xedc8
14:30:29: Reserv3                                       :0x0
14:30:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:29: Reserv4                                       :0x0
14:30:29: Write Speed Factor R2W_FACTOR                 :0x2
14:30:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:29: FILE_FORMAT_GRP                               :0x0
14:30:29: COPY flag                                     :0x1
14:30:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:30: File_Format                                   :0x0
14:30:30: CRC                                           :0x0
14:30:30: ####CSD Registe Values####  

14:30:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07FC0>, <py_sfcl.CommandDataDefinition object at 0x05E07DE0>) , Command count = 225 ] 
14:30:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07E40>, <py_sfcl.CommandDataDefinition object at 0x05E07E70>) , Command count = 226 ] 
14:30:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07ED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07F00>, <py_sfcl.PySEnhancedCmdData object at 0x05E07F30>, <None>, <py_sfcl.Command23 object at 0x05E078A0>) , Command count = 227 ] 
14:30:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:32: Host Frequency set to 25000 KHz
14:30:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B210>, 0x0, True) , Command count = 228 ] 
14:30:32: [GO18_globalSetVolt]### Host voltage value is set.
14:30:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B060>, 0x0, False) , Command count = 229 ] 
14:30:32: [GO18_globalSetVolt]### Host voltage value is set.
14:30:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 230 ] 
14:30:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 231 ] 
14:30:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 232 ] 
14:30:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B1B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B150>) , Command count = 233 ] 
14:30:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B240>) , Command count = 234 ] 
14:30:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:32: [ SetCardRCA(0x1, 0xD555) , Command count = 235 ] 
14:30:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:33: Host Frequency set to 25000 KHz
14:30:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:33: ####CSD Registe 2.0 Values####
14:30:33: CSD_STRUCTURE                                 :0x1
14:30:33: Reserv1                                       :0x0
14:30:33: Time Access 1 TAAC                            :0xe
14:30:33: Time Access 2 NSAC*100                        :0x0
14:30:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:33: Card Command Classess CCC                     :0x5b5
14:30:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:33: DSR(driver stage register)  DSR_IMP           :0x0
14:30:33: Reserv2                                       :0x0
14:30:33: Device Size C_SIZE                            :0xedc8
14:30:33: Reserv3                                       :0x0
14:30:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:33: Reserv4                                       :0x0
14:30:33: Write Speed Factor R2W_FACTOR                 :0x2
14:30:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:33: FILE_FORMAT_GRP                               :0x0
14:30:33: COPY flag                                     :0x1
14:30:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:33: File_Format                                   :0x0
14:30:33: CRC                                           :0x0
14:30:33: ####CSD Registe Values####  

14:30:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:33: [GetSCRRegisterEntry] Passed
14:30:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:33: Data_Status_After Erases          : 0
14:30:33: CPRM Security Support             : No Security
14:30:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:33: Spec. Version                     : Version 3.0X
14:30:33: Extended Security Support         : Extended_Security_Not_Supported
14:30:33: Command Support                   : COMMAND_SUPPORT
14:30:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B4B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B2D0>) , Command count = 236 ] 
14:30:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B330>, <py_sfcl.CommandDataDefinition object at 0x05E0B360>) , Command count = 237 ] 
14:30:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:33: [ SetBusWidth(0x4) , Command count = 238 ] 
14:30:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 239 ] 
14:30:33: Protected Area Size 0x28000
14:30:33: Bus Width           2
14:30:33: Secure Mode         0
14:30:33: Speed  Class        4
14:30:33: Perf Move           0
14:30:33: Au Size             9
14:30:33: Erase Size          15
14:30:33: Erase Timeout       1
14:30:33: Erase offset        1
14:30:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 240 ] 
14:30:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:33: Host Frequency set to 100000 KHz
14:30:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:33: ####CSD Registe 2.0 Values####
14:30:33: CSD_STRUCTURE                                 :0x1
14:30:33: Reserv1                                       :0x0
14:30:33: Time Access 1 TAAC                            :0xe
14:30:33: Time Access 2 NSAC*100                        :0x0
14:30:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:33: Card Command Classess CCC                     :0x5b5
14:30:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:33: DSR(driver stage register)  DSR_IMP           :0x0
14:30:33: Reserv2                                       :0x0
14:30:33: Device Size C_SIZE                            :0xedc8
14:30:33: Reserv3                                       :0x0
14:30:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:33: Reserv4                                       :0x0
14:30:33: Write Speed Factor R2W_FACTOR                 :0x2
14:30:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:33: FILE_FORMAT_GRP                               :0x0
14:30:33: COPY flag                                     :0x1
14:30:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:33: File_Format                                   :0x0
14:30:33: CRC                                           :0x0
14:30:33: ####CSD Registe Values####  

14:30:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B6C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B4E0>) , Command count = 241 ] 
14:30:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B540>, <py_sfcl.CommandDataDefinition object at 0x05E0B570>) , Command count = 242 ] 
14:30:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B5D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B600>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B630>, <None>, <py_sfcl.Command23 object at 0x05E07F60>) , Command count = 243 ] 
14:30:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:35: Host Frequency set to 25000 KHz
14:30:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B8D0>, 0x0, True) , Command count = 244 ] 
14:30:35: [GO18_globalSetVolt]### Host voltage value is set.
14:30:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B720>, 0x0, False) , Command count = 245 ] 
14:30:35: [GO18_globalSetVolt]### Host voltage value is set.
14:30:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 246 ] 
14:30:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 247 ] 
14:30:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 248 ] 
14:30:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B870>, <py_sfcl.CommandDataDefinition object at 0x05E0B810>) , Command count = 249 ] 
14:30:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B8A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B900>) , Command count = 250 ] 
14:30:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:36: [ SetCardRCA(0x1, 0xD555) , Command count = 251 ] 
14:30:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:36: Host Frequency set to 25000 KHz
14:30:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:36: ####CSD Registe 2.0 Values####
14:30:36: CSD_STRUCTURE                                 :0x1
14:30:36: Reserv1                                       :0x0
14:30:36: Time Access 1 TAAC                            :0xe
14:30:36: Time Access 2 NSAC*100                        :0x0
14:30:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:36: Card Command Classess CCC                     :0x5b5
14:30:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:36: DSR(driver stage register)  DSR_IMP           :0x0
14:30:36: Reserv2                                       :0x0
14:30:36: Device Size C_SIZE                            :0xedc8
14:30:36: Reserv3                                       :0x0
14:30:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:36: Reserv4                                       :0x0
14:30:36: Write Speed Factor R2W_FACTOR                 :0x2
14:30:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:36: FILE_FORMAT_GRP                               :0x0
14:30:36: COPY flag                                     :0x1
14:30:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:36: File_Format                                   :0x0
14:30:36: CRC                                           :0x0
14:30:36: ####CSD Registe Values####  

14:30:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:36: [GetSCRRegisterEntry] Passed
14:30:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:36: Data_Status_After Erases          : 0
14:30:36: CPRM Security Support             : No Security
14:30:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:36: Spec. Version                     : Version 3.0X
14:30:36: Extended Security Support         : Extended_Security_Not_Supported
14:30:36: Command Support                   : COMMAND_SUPPORT
14:30:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05144030>, <py_sfcl.CommandDataDefinition object at 0x05E0BB40>) , Command count = 252 ] 
14:30:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B9C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 253 ] 
14:30:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:36: [ SetBusWidth(0x4) , Command count = 254 ] 
14:30:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0521E180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 255 ] 
14:30:36: Protected Area Size 0x28000
14:30:36: Bus Width           2
14:30:36: Secure Mode         0
14:30:36: Speed  Class        4
14:30:36: Perf Move           0
14:30:36: Au Size             9
14:30:36: Erase Size          15
14:30:36: Erase Timeout       1
14:30:36: Erase offset        1
14:30:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 256 ] 
14:30:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:36: Host Frequency set to 100000 KHz
14:30:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:36: ####CSD Registe 2.0 Values####
14:30:36: CSD_STRUCTURE                                 :0x1
14:30:36: Reserv1                                       :0x0
14:30:36: Time Access 1 TAAC                            :0xe
14:30:36: Time Access 2 NSAC*100                        :0x0
14:30:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:36: Card Command Classess CCC                     :0x5b5
14:30:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:36: DSR(driver stage register)  DSR_IMP           :0x0
14:30:36: Reserv2                                       :0x0
14:30:36: Device Size C_SIZE                            :0xedc8
14:30:36: Reserv3                                       :0x0
14:30:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:36: Reserv4                                       :0x0
14:30:36: Write Speed Factor R2W_FACTOR                 :0x2
14:30:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:36: FILE_FORMAT_GRP                               :0x0
14:30:36: COPY flag                                     :0x1
14:30:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:36: File_Format                                   :0x0
14:30:36: CRC                                           :0x0
14:30:36: ####CSD Registe Values####  

14:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05262420>, <py_sfcl.CommandDataDefinition object at 0x05E0BC60>) , Command count = 257 ] 
14:30:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526DED0>, <py_sfcl.CommandDataDefinition object at 0x05E0BAB0>) , Command count = 258 ] 
14:30:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526F120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BB10>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BB70>, <None>, <py_sfcl.Command23 object at 0x05E0B660>) , Command count = 259 ] 
14:30:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:39: Host Frequency set to 25000 KHz
14:30:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F1B0>, 0x0, True) , Command count = 260 ] 
14:30:39: [GO18_globalSetVolt]### Host voltage value is set.
14:30:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F1E0>, 0x0, False) , Command count = 261 ] 
14:30:39: [GO18_globalSetVolt]### Host voltage value is set.
14:30:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 262 ] 
14:30:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 263 ] 
14:30:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 264 ] 
14:30:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0BC30>) , Command count = 265 ] 
14:30:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0514AE70>, <py_sfcl.CommandDataDefinition object at 0x05E0BC90>) , Command count = 266 ] 
14:30:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:39: [ SetCardRCA(0x1, 0xD555) , Command count = 267 ] 
14:30:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:39: Host Frequency set to 25000 KHz
14:30:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:39: ####CSD Registe 2.0 Values####
14:30:39: CSD_STRUCTURE                                 :0x1
14:30:39: Reserv1                                       :0x0
14:30:39: Time Access 1 TAAC                            :0xe
14:30:39: Time Access 2 NSAC*100                        :0x0
14:30:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:39: Card Command Classess CCC                     :0x5b5
14:30:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:39: DSR(driver stage register)  DSR_IMP           :0x0
14:30:39: Reserv2                                       :0x0
14:30:39: Device Size C_SIZE                            :0xedc8
14:30:39: Reserv3                                       :0x0
14:30:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:39: Reserv4                                       :0x0
14:30:39: Write Speed Factor R2W_FACTOR                 :0x2
14:30:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:39: FILE_FORMAT_GRP                               :0x0
14:30:39: COPY flag                                     :0x1
14:30:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:39: File_Format                                   :0x0
14:30:39: CRC                                           :0x0
14:30:39: ####CSD Registe Values####  

14:30:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:39: [GetSCRRegisterEntry] Passed
14:30:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:39: Data_Status_After Erases          : 0
14:30:39: CPRM Security Support             : No Security
14:30:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:39: Spec. Version                     : Version 3.0X
14:30:39: Extended Security Support         : Extended_Security_Not_Supported
14:30:39: Command Support                   : COMMAND_SUPPORT
14:30:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC60>, <py_sfcl.CommandDataDefinition object at 0x05E0BF00>) , Command count = 268 ] 
14:30:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E0BD50>) , Command count = 269 ] 
14:30:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:39: [ SetBusWidth(0x4) , Command count = 270 ] 
14:30:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BDB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 271 ] 
14:30:39: Protected Area Size 0x28000
14:30:39: Bus Width           2
14:30:39: Secure Mode         0
14:30:39: Speed  Class        4
14:30:39: Perf Move           0
14:30:39: Au Size             9
14:30:39: Erase Size          15
14:30:39: Erase Timeout       1
14:30:39: Erase offset        1
14:30:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 272 ] 
14:30:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:39: Host Frequency set to 100000 KHz
14:30:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:39: ####CSD Registe 2.0 Values####
14:30:39: CSD_STRUCTURE                                 :0x1
14:30:39: Reserv1                                       :0x0
14:30:39: Time Access 1 TAAC                            :0xe
14:30:39: Time Access 2 NSAC*100                        :0x0
14:30:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:39: Card Command Classess CCC                     :0x5b5
14:30:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:40: DSR(driver stage register)  DSR_IMP           :0x0
14:30:40: Reserv2                                       :0x0
14:30:40: Device Size C_SIZE                            :0xedc8
14:30:40: Reserv3                                       :0x0
14:30:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:40: Reserv4                                       :0x0
14:30:40: Write Speed Factor R2W_FACTOR                 :0x2
14:30:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:40: FILE_FORMAT_GRP                               :0x0
14:30:40: COPY flag                                     :0x1
14:30:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:40: File_Format                                   :0x0
14:30:40: CRC                                           :0x0
14:30:40: ####CSD Registe Values####  

14:30:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BE40>) , Command count = 273 ] 
14:30:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0BEA0>) , Command count = 274 ] 
14:30:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0527B4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BF30>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BF60>, <None>, <py_sfcl.Command23 object at 0x05E0BBA0>) , Command count = 275 ] 
14:30:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:42: Host Frequency set to 25000 KHz
14:30:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527B930>, 0x0, True) , Command count = 276 ] 
14:30:42: [GO18_globalSetVolt]### Host voltage value is set.
14:30:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C30>, 0x0, False) , Command count = 277 ] 
14:30:42: [GO18_globalSetVolt]### Host voltage value is set.
14:30:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 278 ] 
14:30:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 279 ] 
14:30:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 280 ] 
14:30:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281DE0>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 281 ] 
14:30:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0F0C0>) , Command count = 282 ] 
14:30:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:42: [ SetCardRCA(0x1, 0xD555) , Command count = 283 ] 
14:30:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:43: Host Frequency set to 25000 KHz
14:30:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:43: ####CSD Registe 2.0 Values####
14:30:43: CSD_STRUCTURE                                 :0x1
14:30:43: Reserv1                                       :0x0
14:30:43: Time Access 1 TAAC                            :0xe
14:30:43: Time Access 2 NSAC*100                        :0x0
14:30:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:43: Card Command Classess CCC                     :0x5b5
14:30:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:43: DSR(driver stage register)  DSR_IMP           :0x0
14:30:43: Reserv2                                       :0x0
14:30:43: Device Size C_SIZE                            :0xedc8
14:30:43: Reserv3                                       :0x0
14:30:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:43: Reserv4                                       :0x0
14:30:43: Write Speed Factor R2W_FACTOR                 :0x2
14:30:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:43: FILE_FORMAT_GRP                               :0x0
14:30:43: COPY flag                                     :0x1
14:30:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:43: File_Format                                   :0x0
14:30:43: CRC                                           :0x0
14:30:43: ####CSD Registe Values####  

14:30:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:43: [GetSCRRegisterEntry] Passed
14:30:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:43: Data_Status_After Erases          : 0
14:30:43: CPRM Security Support             : No Security
14:30:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:43: Spec. Version                     : Version 3.0X
14:30:43: Extended Security Support         : Extended_Security_Not_Supported
14:30:43: Command Support                   : COMMAND_SUPPORT
14:30:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F30>, <py_sfcl.CommandDataDefinition object at 0x05E0F300>) , Command count = 284 ] 
14:30:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F60>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 285 ] 
14:30:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:43: [ SetBusWidth(0x4) , Command count = 286 ] 
14:30:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F1E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 287 ] 
14:30:43: Protected Area Size 0x28000
14:30:43: Bus Width           2
14:30:43: Secure Mode         0
14:30:43: Speed  Class        4
14:30:43: Perf Move           0
14:30:43: Au Size             9
14:30:43: Erase Size          15
14:30:43: Erase Timeout       1
14:30:43: Erase offset        1
14:30:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 288 ] 
14:30:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:43: Host Frequency set to 100000 KHz
14:30:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:43: ####CSD Registe 2.0 Values####
14:30:43: CSD_STRUCTURE                                 :0x1
14:30:43: Reserv1                                       :0x0
14:30:43: Time Access 1 TAAC                            :0xe
14:30:43: Time Access 2 NSAC*100                        :0x0
14:30:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:43: Card Command Classess CCC                     :0x5b5
14:30:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:43: DSR(driver stage register)  DSR_IMP           :0x0
14:30:43: Reserv2                                       :0x0
14:30:43: Device Size C_SIZE                            :0xedc8
14:30:43: Reserv3                                       :0x0
14:30:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:43: Reserv4                                       :0x0
14:30:43: Write Speed Factor R2W_FACTOR                 :0x2
14:30:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:43: FILE_FORMAT_GRP                               :0x0
14:30:43: COPY flag                                     :0x1
14:30:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:43: File_Format                                   :0x0
14:30:43: CRC                                           :0x0
14:30:43: ####CSD Registe Values####  

14:30:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F420>) , Command count = 289 ] 
14:30:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF030>, <py_sfcl.CommandDataDefinition object at 0x05E0F270>) , Command count = 290 ] 
14:30:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEF2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F2D0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F330>, <None>, <py_sfcl.Command23 object at 0x05E0BF90>) , Command count = 291 ] 
14:30:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:46: Host Frequency set to 25000 KHz
14:30:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF4E0>, 0x0, True) , Command count = 292 ] 
14:30:46: [GO18_globalSetVolt]### Host voltage value is set.
14:30:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF7B0>, 0x0, False) , Command count = 293 ] 
14:30:46: [GO18_globalSetVolt]### Host voltage value is set.
14:30:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 294 ] 
14:30:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 295 ] 
14:30:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 296 ] 
14:30:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F480>) , Command count = 297 ] 
14:30:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F450>) , Command count = 298 ] 
14:30:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:46: [ SetCardRCA(0x1, 0xD555) , Command count = 299 ] 
14:30:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:46: Host Frequency set to 25000 KHz
14:30:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:46: ####CSD Registe 2.0 Values####
14:30:46: CSD_STRUCTURE                                 :0x1
14:30:46: Reserv1                                       :0x0
14:30:46: Time Access 1 TAAC                            :0xe
14:30:46: Time Access 2 NSAC*100                        :0x0
14:30:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:46: Card Command Classess CCC                     :0x5b5
14:30:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:46: DSR(driver stage register)  DSR_IMP           :0x0
14:30:46: Reserv2                                       :0x0
14:30:46: Device Size C_SIZE                            :0xedc8
14:30:46: Reserv3                                       :0x0
14:30:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:46: Reserv4                                       :0x0
14:30:46: Write Speed Factor R2W_FACTOR                 :0x2
14:30:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:46: FILE_FORMAT_GRP                               :0x0
14:30:46: COPY flag                                     :0x1
14:30:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:46: File_Format                                   :0x0
14:30:46: CRC                                           :0x0
14:30:46: ####CSD Registe Values####  

14:30:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:46: [GetSCRRegisterEntry] Passed
14:30:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:46: Data_Status_After Erases          : 0
14:30:46: CPRM Security Support             : No Security
14:30:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:46: Spec. Version                     : Version 3.0X
14:30:46: Extended Security Support         : Extended_Security_Not_Supported
14:30:46: Command Support                   : COMMAND_SUPPORT
14:30:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9ED0>, <py_sfcl.CommandDataDefinition object at 0x05DE9BA0>) , Command count = 300 ] 
14:30:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9AB0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 301 ] 
14:30:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:46: [ SetBusWidth(0x4) , Command count = 302 ] 
14:30:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 303 ] 
14:30:46: Protected Area Size 0x28000
14:30:46: Bus Width           2
14:30:46: Secure Mode         0
14:30:46: Speed  Class        4
14:30:46: Perf Move           0
14:30:46: Au Size             9
14:30:46: Erase Size          15
14:30:46: Erase Timeout       1
14:30:46: Erase offset        1
14:30:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 304 ] 
14:30:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:46: Host Frequency set to 100000 KHz
14:30:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:46: ####CSD Registe 2.0 Values####
14:30:46: CSD_STRUCTURE                                 :0x1
14:30:46: Reserv1                                       :0x0
14:30:46: Time Access 1 TAAC                            :0xe
14:30:46: Time Access 2 NSAC*100                        :0x0
14:30:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:46: Card Command Classess CCC                     :0x5b5
14:30:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:46: DSR(driver stage register)  DSR_IMP           :0x0
14:30:46: Reserv2                                       :0x0
14:30:46: Device Size C_SIZE                            :0xedc8
14:30:46: Reserv3                                       :0x0
14:30:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:46: Reserv4                                       :0x0
14:30:47: Write Speed Factor R2W_FACTOR                 :0x2
14:30:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:47: FILE_FORMAT_GRP                               :0x0
14:30:47: COPY flag                                     :0x1
14:30:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:47: File_Format                                   :0x0
14:30:47: CRC                                           :0x0
14:30:47: ####CSD Registe Values####  

14:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9FC0>) , Command count = 305 ] 
14:30:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B10>, <py_sfcl.CommandDataDefinition object at 0x05DE9CF0>) , Command count = 306 ] 
14:30:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F6F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F1E0>, <None>, <py_sfcl.Command23 object at 0x05E0F360>) , Command count = 307 ] 
14:30:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:49: Host Frequency set to 25000 KHz
14:30:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9900>, 0x0, True) , Command count = 308 ] 
14:30:49: [GO18_globalSetVolt]### Host voltage value is set.
14:30:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF52A0>, 0x0, False) , Command count = 309 ] 
14:30:49: [GO18_globalSetVolt]### Host voltage value is set.
14:30:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 310 ] 
14:30:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 311 ] 
14:30:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 312 ] 
14:30:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5120>, <py_sfcl.CommandDataDefinition object at 0x05DF5150>) , Command count = 313 ] 
14:30:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5690>, <py_sfcl.CommandDataDefinition object at 0x05DF54B0>) , Command count = 314 ] 
14:30:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:49: [ SetCardRCA(0x1, 0xD555) , Command count = 315 ] 
14:30:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:49: Host Frequency set to 25000 KHz
14:30:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:49: ####CSD Registe 2.0 Values####
14:30:49: CSD_STRUCTURE                                 :0x1
14:30:49: Reserv1                                       :0x0
14:30:49: Time Access 1 TAAC                            :0xe
14:30:49: Time Access 2 NSAC*100                        :0x0
14:30:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:49: Card Command Classess CCC                     :0x5b5
14:30:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:49: DSR(driver stage register)  DSR_IMP           :0x0
14:30:49: Reserv2                                       :0x0
14:30:49: Device Size C_SIZE                            :0xedc8
14:30:49: Reserv3                                       :0x0
14:30:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:49: Reserv4                                       :0x0
14:30:49: Write Speed Factor R2W_FACTOR                 :0x2
14:30:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:49: FILE_FORMAT_GRP                               :0x0
14:30:49: COPY flag                                     :0x1
14:30:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:49: File_Format                                   :0x0
14:30:49: CRC                                           :0x0
14:30:49: ####CSD Registe Values####  

14:30:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:49: [GetSCRRegisterEntry] Passed
14:30:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:49: Data_Status_After Erases          : 0
14:30:49: CPRM Security Support             : No Security
14:30:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:49: Spec. Version                     : Version 3.0X
14:30:49: Extended Security Support         : Extended_Security_Not_Supported
14:30:49: Command Support                   : COMMAND_SUPPORT
14:30:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5600>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 316 ] 
14:30:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5870>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 317 ] 
14:30:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:49: [ SetBusWidth(0x4) , Command count = 318 ] 
14:30:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 319 ] 
14:30:49: Protected Area Size 0x28000
14:30:49: Bus Width           2
14:30:49: Secure Mode         0
14:30:49: Speed  Class        4
14:30:49: Perf Move           0
14:30:49: Au Size             9
14:30:49: Erase Size          15
14:30:49: Erase Timeout       1
14:30:49: Erase offset        1
14:30:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 320 ] 
14:30:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:50: Host Frequency set to 100000 KHz
14:30:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:50: ####CSD Registe 2.0 Values####
14:30:50: CSD_STRUCTURE                                 :0x1
14:30:50: Reserv1                                       :0x0
14:30:50: Time Access 1 TAAC                            :0xe
14:30:50: Time Access 2 NSAC*100                        :0x0
14:30:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:50: Card Command Classess CCC                     :0x5b5
14:30:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:50: DSR(driver stage register)  DSR_IMP           :0x0
14:30:50: Reserv2                                       :0x0
14:30:50: Device Size C_SIZE                            :0xedc8
14:30:50: Reserv3                                       :0x0
14:30:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:50: Reserv4                                       :0x0
14:30:50: Write Speed Factor R2W_FACTOR                 :0x2
14:30:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:50: FILE_FORMAT_GRP                               :0x0
14:30:50: COPY flag                                     :0x1
14:30:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:50: File_Format                                   :0x0
14:30:50: CRC                                           :0x0
14:30:50: ####CSD Registe Values####  

14:30:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B10>, <py_sfcl.CommandDataDefinition object at 0x05DF5AB0>) , Command count = 321 ] 
14:30:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57E0>, <py_sfcl.CommandDataDefinition object at 0x05DF5A20>) , Command count = 322 ] 
14:30:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5930>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F7B0>, <None>, <py_sfcl.Command23 object at 0x05E0F570>) , Command count = 323 ] 
14:30:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:52: Host Frequency set to 25000 KHz
14:30:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5510>, 0x0, True) , Command count = 324 ] 
14:30:52: [GO18_globalSetVolt]### Host voltage value is set.
14:30:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5BD0>, 0x0, False) , Command count = 325 ] 
14:30:52: [GO18_globalSetVolt]### Host voltage value is set.
14:30:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 326 ] 
14:30:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 327 ] 
14:30:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 328 ] 
14:30:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DE0>, <py_sfcl.CommandDataDefinition object at 0x05DF5CF0>) , Command count = 329 ] 
14:30:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05DF55A0>) , Command count = 330 ] 
14:30:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:53: [ SetCardRCA(0x1, 0xD555) , Command count = 331 ] 
14:30:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:53: Host Frequency set to 25000 KHz
14:30:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:53: ####CSD Registe 2.0 Values####
14:30:53: CSD_STRUCTURE                                 :0x1
14:30:53: Reserv1                                       :0x0
14:30:53: Time Access 1 TAAC                            :0xe
14:30:53: Time Access 2 NSAC*100                        :0x0
14:30:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:53: Card Command Classess CCC                     :0x5b5
14:30:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:53: DSR(driver stage register)  DSR_IMP           :0x0
14:30:53: Reserv2                                       :0x0
14:30:53: Device Size C_SIZE                            :0xedc8
14:30:53: Reserv3                                       :0x0
14:30:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:53: Reserv4                                       :0x0
14:30:53: Write Speed Factor R2W_FACTOR                 :0x2
14:30:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:53: FILE_FORMAT_GRP                               :0x0
14:30:53: COPY flag                                     :0x1
14:30:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:53: File_Format                                   :0x0
14:30:53: CRC                                           :0x0
14:30:53: ####CSD Registe Values####  

14:30:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:53: [GetSCRRegisterEntry] Passed
14:30:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:53: Data_Status_After Erases          : 0
14:30:53: CPRM Security Support             : No Security
14:30:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:53: Spec. Version                     : Version 3.0X
14:30:53: Extended Security Support         : Extended_Security_Not_Supported
14:30:53: Command Support                   : COMMAND_SUPPORT
14:30:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D50>, <py_sfcl.CommandDataDefinition object at 0x05DF5D80>) , Command count = 332 ] 
14:30:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB060>, <py_sfcl.CommandDataDefinition object at 0x05DF5F30>) , Command count = 333 ] 
14:30:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:53: [ SetBusWidth(0x4) , Command count = 334 ] 
14:30:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 335 ] 
14:30:53: Protected Area Size 0x28000
14:30:53: Bus Width           2
14:30:53: Secure Mode         0
14:30:53: Speed  Class        4
14:30:53: Perf Move           0
14:30:53: Au Size             9
14:30:53: Erase Size          15
14:30:53: Erase Timeout       1
14:30:53: Erase offset        1
14:30:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 336 ] 
14:30:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:53: Host Frequency set to 100000 KHz
14:30:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:53: ####CSD Registe 2.0 Values####
14:30:53: CSD_STRUCTURE                                 :0x1
14:30:53: Reserv1                                       :0x0
14:30:53: Time Access 1 TAAC                            :0xe
14:30:53: Time Access 2 NSAC*100                        :0x0
14:30:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:53: Card Command Classess CCC                     :0x5b5
14:30:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:53: DSR(driver stage register)  DSR_IMP           :0x0
14:30:53: Reserv2                                       :0x0
14:30:53: Device Size C_SIZE                            :0xedc8
14:30:53: Reserv3                                       :0x0
14:30:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:53: Reserv4                                       :0x0
14:30:53: Write Speed Factor R2W_FACTOR                 :0x2
14:30:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:53: FILE_FORMAT_GRP                               :0x0
14:30:53: COPY flag                                     :0x1
14:30:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:53: File_Format                                   :0x0
14:30:53: CRC                                           :0x0
14:30:53: ####CSD Registe Values####  

14:30:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5AE0>, <py_sfcl.CommandDataDefinition object at 0x05DF5A50>) , Command count = 337 ] 
14:30:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB810>, <py_sfcl.CommandDataDefinition object at 0x05DF5BA0>) , Command count = 338 ] 
14:30:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:54: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBC00>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5FC0>, <None>, <py_sfcl.Command23 object at 0x05E0F510>) , Command count = 339 ] 
14:30:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:56: Host Frequency set to 25000 KHz
14:30:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBAB0>, 0x0, True) , Command count = 340 ] 
14:30:56: [GO18_globalSetVolt]### Host voltage value is set.
14:30:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB5A0>, 0x0, False) , Command count = 341 ] 
14:30:56: [GO18_globalSetVolt]### Host voltage value is set.
14:30:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 342 ] 
14:30:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 343 ] 
14:30:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 344 ] 
14:30:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5E10>, <py_sfcl.CommandDataDefinition object at 0x05DFB8D0>) , Command count = 345 ] 
14:30:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB840>) , Command count = 346 ] 
14:30:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:56: [ SetCardRCA(0x1, 0xD555) , Command count = 347 ] 
14:30:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:56: Host Frequency set to 25000 KHz
14:30:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:56: ####CSD Registe 2.0 Values####
14:30:56: CSD_STRUCTURE                                 :0x1
14:30:56: Reserv1                                       :0x0
14:30:56: Time Access 1 TAAC                            :0xe
14:30:56: Time Access 2 NSAC*100                        :0x0
14:30:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:56: Card Command Classess CCC                     :0x5b5
14:30:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:56: DSR(driver stage register)  DSR_IMP           :0x0
14:30:56: Reserv2                                       :0x0
14:30:56: Device Size C_SIZE                            :0xedc8
14:30:56: Reserv3                                       :0x0
14:30:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:56: Reserv4                                       :0x0
14:30:56: Write Speed Factor R2W_FACTOR                 :0x2
14:30:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:56: FILE_FORMAT_GRP                               :0x0
14:30:56: COPY flag                                     :0x1
14:30:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:56: File_Format                                   :0x0
14:30:56: CRC                                           :0x0
14:30:56: ####CSD Registe Values####  

14:30:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:56: [GetSCRRegisterEntry] Passed
14:30:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:56: Data_Status_After Erases          : 0
14:30:56: CPRM Security Support             : No Security
14:30:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:56: Spec. Version                     : Version 3.0X
14:30:56: Extended Security Support         : Extended_Security_Not_Supported
14:30:56: Command Support                   : COMMAND_SUPPORT
14:30:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBED0>, <py_sfcl.CommandDataDefinition object at 0x05DFB4E0>) , Command count = 348 ] 
14:30:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB150>, <py_sfcl.CommandDataDefinition object at 0x05DFB7E0>) , Command count = 349 ] 
14:30:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:56: [ SetBusWidth(0x4) , Command count = 350 ] 
14:30:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBD50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 351 ] 
14:30:56: Protected Area Size 0x28000
14:30:56: Bus Width           2
14:30:56: Secure Mode         0
14:30:56: Speed  Class        4
14:30:56: Perf Move           0
14:30:56: Au Size             9
14:30:56: Erase Size          15
14:30:56: Erase Timeout       1
14:30:56: Erase offset        1
14:30:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 352 ] 
14:30:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:56: Host Frequency set to 100000 KHz
14:30:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:56: ####CSD Registe 2.0 Values####
14:30:56: CSD_STRUCTURE                                 :0x1
14:30:56: Reserv1                                       :0x0
14:30:56: Time Access 1 TAAC                            :0xe
14:30:56: Time Access 2 NSAC*100                        :0x0
14:30:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:56: Card Command Classess CCC                     :0x5b5
14:30:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:56: DSR(driver stage register)  DSR_IMP           :0x0
14:30:56: Reserv2                                       :0x0
14:30:56: Device Size C_SIZE                            :0xedc8
14:30:56: Reserv3                                       :0x0
14:30:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:56: Reserv4                                       :0x0
14:30:57: Write Speed Factor R2W_FACTOR                 :0x2
14:30:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:57: FILE_FORMAT_GRP                               :0x0
14:30:57: COPY flag                                     :0x1
14:30:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:57: File_Format                                   :0x0
14:30:57: CRC                                           :0x0
14:30:57: ####CSD Registe Values####  

14:30:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF30>, <py_sfcl.CommandDataDefinition object at 0x05DFB2D0>) , Command count = 353 ] 
14:30:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC30>, <py_sfcl.CommandDataDefinition object at 0x05DFBCF0>) , Command count = 354 ] 
14:30:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:30:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:30:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBBD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB4B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F3C0>, <None>, <py_sfcl.Command23 object at 0x05DF5CC0>) , Command count = 355 ] 
14:30:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:30:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:59: Host Frequency set to 25000 KHz
14:30:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB9C0>, 0x0, True) , Command count = 356 ] 
14:30:59: [GO18_globalSetVolt]### Host voltage value is set.
14:30:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBC60>, 0x0, False) , Command count = 357 ] 
14:30:59: [GO18_globalSetVolt]### Host voltage value is set.
14:30:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 358 ] 
14:30:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 359 ] 
14:30:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 360 ] 
14:30:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA20>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 361 ] 
14:30:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB690>, <py_sfcl.CommandDataDefinition object at 0x05DFB300>) , Command count = 362 ] 
14:30:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:59: [ SetCardRCA(0x1, 0xD555) , Command count = 363 ] 
14:30:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:00: Host Frequency set to 25000 KHz
14:31:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:00: ####CSD Registe 2.0 Values####
14:31:00: CSD_STRUCTURE                                 :0x1
14:31:00: Reserv1                                       :0x0
14:31:00: Time Access 1 TAAC                            :0xe
14:31:00: Time Access 2 NSAC*100                        :0x0
14:31:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:00: Card Command Classess CCC                     :0x5b5
14:31:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:00: DSR(driver stage register)  DSR_IMP           :0x0
14:31:00: Reserv2                                       :0x0
14:31:00: Device Size C_SIZE                            :0xedc8
14:31:00: Reserv3                                       :0x0
14:31:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:00: Reserv4                                       :0x0
14:31:00: Write Speed Factor R2W_FACTOR                 :0x2
14:31:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:00: FILE_FORMAT_GRP                               :0x0
14:31:00: COPY flag                                     :0x1
14:31:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:00: File_Format                                   :0x0
14:31:00: CRC                                           :0x0
14:31:00: ####CSD Registe Values####  

14:31:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:00: [GetSCRRegisterEntry] Passed
14:31:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:00: Data_Status_After Erases          : 0
14:31:00: CPRM Security Support             : No Security
14:31:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:00: Spec. Version                     : Version 3.0X
14:31:00: Extended Security Support         : Extended_Security_Not_Supported
14:31:00: Command Support                   : COMMAND_SUPPORT
14:31:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFB540>) , Command count = 364 ] 
14:31:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF00>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 365 ] 
14:31:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:00: [ SetBusWidth(0x4) , Command count = 366 ] 
14:31:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 367 ] 
14:31:00: Protected Area Size 0x28000
14:31:00: Bus Width           2
14:31:00: Secure Mode         0
14:31:00: Speed  Class        4
14:31:00: Perf Move           0
14:31:00: Au Size             9
14:31:00: Erase Size          15
14:31:00: Erase Timeout       1
14:31:00: Erase offset        1
14:31:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 368 ] 
14:31:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:00: Host Frequency set to 100000 KHz
14:31:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:00: ####CSD Registe 2.0 Values####
14:31:00: CSD_STRUCTURE                                 :0x1
14:31:00: Reserv1                                       :0x0
14:31:00: Time Access 1 TAAC                            :0xe
14:31:00: Time Access 2 NSAC*100                        :0x0
14:31:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:00: Card Command Classess CCC                     :0x5b5
14:31:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:00: DSR(driver stage register)  DSR_IMP           :0x0
14:31:00: Reserv2                                       :0x0
14:31:00: Device Size C_SIZE                            :0xedc8
14:31:00: Reserv3                                       :0x0
14:31:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:00: Reserv4                                       :0x0
14:31:00: Write Speed Factor R2W_FACTOR                 :0x2
14:31:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:00: FILE_FORMAT_GRP                               :0x0
14:31:00: COPY flag                                     :0x1
14:31:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:00: File_Format                                   :0x0
14:31:00: CRC                                           :0x0
14:31:00: ####CSD Registe Values####  

14:31:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA80>) , Command count = 369 ] 
14:31:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB1E0>, <py_sfcl.CommandDataDefinition object at 0x05DFB3F0>) , Command count = 370 ] 
14:31:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBAE0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB210>, <None>, <py_sfcl.Command23 object at 0x05DFB990>) , Command count = 371 ] 
14:31:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:02: Host Frequency set to 25000 KHz
14:31:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB330>, 0x0, True) , Command count = 372 ] 
14:31:02: [GO18_globalSetVolt]### Host voltage value is set.
14:31:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E001B0>, 0x0, False) , Command count = 373 ] 
14:31:02: [GO18_globalSetVolt]### Host voltage value is set.
14:31:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 374 ] 
14:31:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 375 ] 
14:31:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 376 ] 
14:31:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E003C0>, <py_sfcl.CommandDataDefinition object at 0x05E00300>) , Command count = 377 ] 
14:31:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBA0>, <py_sfcl.CommandDataDefinition object at 0x05E00450>) , Command count = 378 ] 
14:31:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:03: [ SetCardRCA(0x1, 0xD555) , Command count = 379 ] 
14:31:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:03: Host Frequency set to 25000 KHz
14:31:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:03: ####CSD Registe 2.0 Values####
14:31:03: CSD_STRUCTURE                                 :0x1
14:31:03: Reserv1                                       :0x0
14:31:03: Time Access 1 TAAC                            :0xe
14:31:03: Time Access 2 NSAC*100                        :0x0
14:31:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:03: Card Command Classess CCC                     :0x5b5
14:31:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:03: DSR(driver stage register)  DSR_IMP           :0x0
14:31:03: Reserv2                                       :0x0
14:31:03: Device Size C_SIZE                            :0xedc8
14:31:03: Reserv3                                       :0x0
14:31:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:03: Reserv4                                       :0x0
14:31:03: Write Speed Factor R2W_FACTOR                 :0x2
14:31:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:03: FILE_FORMAT_GRP                               :0x0
14:31:03: COPY flag                                     :0x1
14:31:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:03: File_Format                                   :0x0
14:31:03: CRC                                           :0x0
14:31:03: ####CSD Registe Values####  

14:31:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:03: [GetSCRRegisterEntry] Passed
14:31:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:03: Data_Status_After Erases          : 0
14:31:03: CPRM Security Support             : No Security
14:31:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:03: Spec. Version                     : Version 3.0X
14:31:03: Extended Security Support         : Extended_Security_Not_Supported
14:31:03: Command Support                   : COMMAND_SUPPORT
14:31:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00330>, <py_sfcl.CommandDataDefinition object at 0x05E00360>) , Command count = 380 ] 
14:31:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E006C0>, <py_sfcl.CommandDataDefinition object at 0x05E004E0>) , Command count = 381 ] 
14:31:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:03: [ SetBusWidth(0x4) , Command count = 382 ] 
14:31:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 383 ] 
14:31:03: Protected Area Size 0x28000
14:31:03: Bus Width           2
14:31:03: Secure Mode         0
14:31:03: Speed  Class        4
14:31:03: Perf Move           0
14:31:03: Au Size             9
14:31:03: Erase Size          15
14:31:03: Erase Timeout       1
14:31:03: Erase offset        1
14:31:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 384 ] 
14:31:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:03: Host Frequency set to 100000 KHz
14:31:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:03: ####CSD Registe 2.0 Values####
14:31:03: CSD_STRUCTURE                                 :0x1
14:31:03: Reserv1                                       :0x0
14:31:03: Time Access 1 TAAC                            :0xe
14:31:03: Time Access 2 NSAC*100                        :0x0
14:31:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:03: Card Command Classess CCC                     :0x5b5
14:31:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:03: DSR(driver stage register)  DSR_IMP           :0x0
14:31:03: Reserv2                                       :0x0
14:31:03: Device Size C_SIZE                            :0xedc8
14:31:03: Reserv3                                       :0x0
14:31:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:03: Reserv4                                       :0x0
14:31:03: Write Speed Factor R2W_FACTOR                 :0x2
14:31:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:03: FILE_FORMAT_GRP                               :0x0
14:31:03: COPY flag                                     :0x1
14:31:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:03: File_Format                                   :0x0
14:31:03: CRC                                           :0x0
14:31:03: ####CSD Registe Values####  

14:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E007B0>, <py_sfcl.CommandDataDefinition object at 0x05E008D0>) , Command count = 385 ] 
14:31:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000C0>, <py_sfcl.CommandDataDefinition object at 0x05E00060>) , Command count = 386 ] 
14:31:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E007E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00690>, <py_sfcl.PySEnhancedCmdData object at 0x05E00180>, <None>, <py_sfcl.Command23 object at 0x05DFB2A0>) , Command count = 387 ] 
14:31:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:06: Host Frequency set to 25000 KHz
14:31:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00540>, 0x0, True) , Command count = 388 ] 
14:31:06: [GO18_globalSetVolt]### Host voltage value is set.
14:31:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00870>, 0x0, False) , Command count = 389 ] 
14:31:06: [GO18_globalSetVolt]### Host voltage value is set.
14:31:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 390 ] 
14:31:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 391 ] 
14:31:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 392 ] 
14:31:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A80>, <py_sfcl.CommandDataDefinition object at 0x05E009C0>) , Command count = 393 ] 
14:31:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E003F0>, <py_sfcl.CommandDataDefinition object at 0x05E00B10>) , Command count = 394 ] 
14:31:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:06: [ SetCardRCA(0x1, 0xD555) , Command count = 395 ] 
14:31:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:06: Host Frequency set to 25000 KHz
14:31:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:06: ####CSD Registe 2.0 Values####
14:31:06: CSD_STRUCTURE                                 :0x1
14:31:06: Reserv1                                       :0x0
14:31:06: Time Access 1 TAAC                            :0xe
14:31:06: Time Access 2 NSAC*100                        :0x0
14:31:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:06: Card Command Classess CCC                     :0x5b5
14:31:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:06: DSR(driver stage register)  DSR_IMP           :0x0
14:31:06: Reserv2                                       :0x0
14:31:06: Device Size C_SIZE                            :0xedc8
14:31:06: Reserv3                                       :0x0
14:31:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:06: Reserv4                                       :0x0
14:31:06: Write Speed Factor R2W_FACTOR                 :0x2
14:31:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:06: FILE_FORMAT_GRP                               :0x0
14:31:06: COPY flag                                     :0x1
14:31:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:06: File_Format                                   :0x0
14:31:06: CRC                                           :0x0
14:31:06: ####CSD Registe Values####  

14:31:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:06: [GetSCRRegisterEntry] Passed
14:31:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:06: Data_Status_After Erases          : 0
14:31:06: CPRM Security Support             : No Security
14:31:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:06: Spec. Version                     : Version 3.0X
14:31:06: Extended Security Support         : Extended_Security_Not_Supported
14:31:06: Command Support                   : COMMAND_SUPPORT
14:31:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E009F0>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 396 ] 
14:31:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00840>, <py_sfcl.CommandDataDefinition object at 0x05E008A0>) , Command count = 397 ] 
14:31:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:06: [ SetBusWidth(0x4) , Command count = 398 ] 
14:31:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 399 ] 
14:31:06: Protected Area Size 0x28000
14:31:06: Bus Width           2
14:31:06: Secure Mode         0
14:31:06: Speed  Class        4
14:31:06: Perf Move           0
14:31:06: Au Size             9
14:31:06: Erase Size          15
14:31:06: Erase Timeout       1
14:31:06: Erase offset        1
14:31:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 400 ] 
14:31:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:06: Host Frequency set to 100000 KHz
14:31:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:06: ####CSD Registe 2.0 Values####
14:31:06: CSD_STRUCTURE                                 :0x1
14:31:06: Reserv1                                       :0x0
14:31:06: Time Access 1 TAAC                            :0xe
14:31:07: Time Access 2 NSAC*100                        :0x0
14:31:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:07: Card Command Classess CCC                     :0x5b5
14:31:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:07: DSR(driver stage register)  DSR_IMP           :0x0
14:31:07: Reserv2                                       :0x0
14:31:07: Device Size C_SIZE                            :0xedc8
14:31:07: Reserv3                                       :0x0
14:31:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:07: Reserv4                                       :0x0
14:31:07: Write Speed Factor R2W_FACTOR                 :0x2
14:31:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:07: FILE_FORMAT_GRP                               :0x0
14:31:07: COPY flag                                     :0x1
14:31:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:07: File_Format                                   :0x0
14:31:07: CRC                                           :0x0
14:31:07: ####CSD Registe Values####  

14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E70>, <py_sfcl.CommandDataDefinition object at 0x05E00F90>) , Command count = 401 ] 
14:31:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00780>, <py_sfcl.CommandDataDefinition object at 0x05E00600>) , Command count = 402 ] 
14:31:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:07: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00D50>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F8A0>, <None>, <py_sfcl.Command23 object at 0x05E001E0>) , Command count = 403 ] 
14:31:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:09: Host Frequency set to 25000 KHz
14:31:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00C00>, 0x0, True) , Command count = 404 ] 
14:31:09: [GO18_globalSetVolt]### Host voltage value is set.
14:31:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04030>, 0x0, False) , Command count = 405 ] 
14:31:09: [GO18_globalSetVolt]### Host voltage value is set.
14:31:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 406 ] 
14:31:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 407 ] 
14:31:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 408 ] 
14:31:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04180>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 409 ] 
14:31:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04210>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 410 ] 
14:31:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:09: [ SetCardRCA(0x1, 0xD555) , Command count = 411 ] 
14:31:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:10: Host Frequency set to 25000 KHz
14:31:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:10: ####CSD Registe 2.0 Values####
14:31:10: CSD_STRUCTURE                                 :0x1
14:31:10: Reserv1                                       :0x0
14:31:10: Time Access 1 TAAC                            :0xe
14:31:10: Time Access 2 NSAC*100                        :0x0
14:31:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:10: Card Command Classess CCC                     :0x5b5
14:31:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:10: DSR(driver stage register)  DSR_IMP           :0x0
14:31:10: Reserv2                                       :0x0
14:31:10: Device Size C_SIZE                            :0xedc8
14:31:10: Reserv3                                       :0x0
14:31:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:10: Reserv4                                       :0x0
14:31:10: Write Speed Factor R2W_FACTOR                 :0x2
14:31:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:10: FILE_FORMAT_GRP                               :0x0
14:31:10: COPY flag                                     :0x1
14:31:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:10: File_Format                                   :0x0
14:31:10: CRC                                           :0x0
14:31:10: ####CSD Registe Values####  

14:31:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:10: [GetSCRRegisterEntry] Passed
14:31:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:10: Data_Status_After Erases          : 0
14:31:10: CPRM Security Support             : No Security
14:31:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:10: Spec. Version                     : Version 3.0X
14:31:10: Extended Security Support         : Extended_Security_Not_Supported
14:31:10: Command Support                   : COMMAND_SUPPORT
14:31:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 412 ] 
14:31:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00FC0>, <py_sfcl.CommandDataDefinition object at 0x05E00F00>) , Command count = 413 ] 
14:31:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:10: [ SetBusWidth(0x4) , Command count = 414 ] 
14:31:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 415 ] 
14:31:10: Protected Area Size 0x28000
14:31:10: Bus Width           2
14:31:10: Secure Mode         0
14:31:10: Speed  Class        4
14:31:10: Perf Move           0
14:31:10: Au Size             9
14:31:10: Erase Size          15
14:31:10: Erase Timeout       1
14:31:10: Erase offset        1
14:31:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 416 ] 
14:31:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:10: Host Frequency set to 100000 KHz
14:31:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:10: ####CSD Registe 2.0 Values####
14:31:10: CSD_STRUCTURE                                 :0x1
14:31:10: Reserv1                                       :0x0
14:31:10: Time Access 1 TAAC                            :0xe
14:31:10: Time Access 2 NSAC*100                        :0x0
14:31:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:10: Card Command Classess CCC                     :0x5b5
14:31:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:10: DSR(driver stage register)  DSR_IMP           :0x0
14:31:10: Reserv2                                       :0x0
14:31:10: Device Size C_SIZE                            :0xedc8
14:31:10: Reserv3                                       :0x0
14:31:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:10: Reserv4                                       :0x0
14:31:10: Write Speed Factor R2W_FACTOR                 :0x2
14:31:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:10: FILE_FORMAT_GRP                               :0x0
14:31:10: COPY flag                                     :0x1
14:31:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:10: File_Format                                   :0x0
14:31:10: CRC                                           :0x0
14:31:10: ####CSD Registe Values####  

14:31:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00660>, <py_sfcl.CommandDataDefinition object at 0x05E04570>) , Command count = 417 ] 
14:31:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E40>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 418 ] 
14:31:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E045A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04450>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F630>, <None>, <py_sfcl.Command23 object at 0x05E0F720>) , Command count = 419 ] 
14:31:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:13: Host Frequency set to 25000 KHz
14:31:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04300>, 0x0, True) , Command count = 420 ] 
14:31:13: [GO18_globalSetVolt]### Host voltage value is set.
14:31:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04630>, 0x0, False) , Command count = 421 ] 
14:31:13: [GO18_globalSetVolt]### Host voltage value is set.
14:31:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 422 ] 
14:31:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 423 ] 
14:31:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 424 ] 
14:31:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04840>, <py_sfcl.CommandDataDefinition object at 0x05E04780>) , Command count = 425 ] 
14:31:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E041B0>, <py_sfcl.CommandDataDefinition object at 0x05E048D0>) , Command count = 426 ] 
14:31:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:13: [ SetCardRCA(0x1, 0xD555) , Command count = 427 ] 
14:31:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:13: Host Frequency set to 25000 KHz
14:31:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:13: ####CSD Registe 2.0 Values####
14:31:13: CSD_STRUCTURE                                 :0x1
14:31:13: Reserv1                                       :0x0
14:31:13: Time Access 1 TAAC                            :0xe
14:31:13: Time Access 2 NSAC*100                        :0x0
14:31:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:13: Card Command Classess CCC                     :0x5b5
14:31:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:13: DSR(driver stage register)  DSR_IMP           :0x0
14:31:13: Reserv2                                       :0x0
14:31:13: Device Size C_SIZE                            :0xedc8
14:31:13: Reserv3                                       :0x0
14:31:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:13: Reserv4                                       :0x0
14:31:13: Write Speed Factor R2W_FACTOR                 :0x2
14:31:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:13: FILE_FORMAT_GRP                               :0x0
14:31:13: COPY flag                                     :0x1
14:31:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:13: File_Format                                   :0x0
14:31:13: CRC                                           :0x0
14:31:13: ####CSD Registe Values####  

14:31:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:13: [GetSCRRegisterEntry] Passed
14:31:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:13: Data_Status_After Erases          : 0
14:31:13: CPRM Security Support             : No Security
14:31:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:13: Spec. Version                     : Version 3.0X
14:31:13: Extended Security Support         : Extended_Security_Not_Supported
14:31:13: Command Support                   : COMMAND_SUPPORT
14:31:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047B0>, <py_sfcl.CommandDataDefinition object at 0x05E047E0>) , Command count = 428 ] 
14:31:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B40>, <py_sfcl.CommandDataDefinition object at 0x05E04960>) , Command count = 429 ] 
14:31:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:13: [ SetBusWidth(0x4) , Command count = 430 ] 
14:31:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 431 ] 
14:31:13: Protected Area Size 0x28000
14:31:13: Bus Width           2
14:31:13: Secure Mode         0
14:31:13: Speed  Class        4
14:31:13: Perf Move           0
14:31:13: Au Size             9
14:31:13: Erase Size          15
14:31:13: Erase Timeout       1
14:31:13: Erase offset        1
14:31:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 432 ] 
14:31:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:13: Host Frequency set to 100000 KHz
14:31:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:13: ####CSD Registe 2.0 Values####
14:31:13: CSD_STRUCTURE                                 :0x1
14:31:13: Reserv1                                       :0x0
14:31:13: Time Access 1 TAAC                            :0xe
14:31:13: Time Access 2 NSAC*100                        :0x0
14:31:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:13: Card Command Classess CCC                     :0x5b5
14:31:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:13: DSR(driver stage register)  DSR_IMP           :0x0
14:31:13: Reserv2                                       :0x0
14:31:13: Device Size C_SIZE                            :0xedc8
14:31:13: Reserv3                                       :0x0
14:31:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:13: Reserv4                                       :0x0
14:31:14: Write Speed Factor R2W_FACTOR                 :0x2
14:31:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:14: FILE_FORMAT_GRP                               :0x0
14:31:14: COPY flag                                     :0x1
14:31:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:14: File_Format                                   :0x0
14:31:14: CRC                                           :0x0
14:31:14: ####CSD Registe Values####  

14:31:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C30>, <py_sfcl.CommandDataDefinition object at 0x05E04D50>) , Command count = 433 ] 
14:31:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04540>, <py_sfcl.CommandDataDefinition object at 0x05E043C0>) , Command count = 434 ] 
14:31:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04B10>, <py_sfcl.PySEnhancedCmdData object at 0x05E04600>, <None>, <py_sfcl.Command23 object at 0x05E04720>) , Command count = 435 ] 
14:31:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:16: Host Frequency set to 25000 KHz
14:31:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E049C0>, 0x0, True) , Command count = 436 ] 
14:31:16: [GO18_globalSetVolt]### Host voltage value is set.
14:31:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04CF0>, 0x0, False) , Command count = 437 ] 
14:31:16: [GO18_globalSetVolt]### Host voltage value is set.
14:31:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 438 ] 
14:31:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 439 ] 
14:31:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 440 ] 
14:31:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F30>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 441 ] 
14:31:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04870>, <py_sfcl.CommandDataDefinition object at 0x05E04FC0>) , Command count = 442 ] 
14:31:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:16: [ SetCardRCA(0x1, 0xD555) , Command count = 443 ] 
14:31:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:16: Host Frequency set to 25000 KHz
14:31:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:16: ####CSD Registe 2.0 Values####
14:31:16: CSD_STRUCTURE                                 :0x1
14:31:16: Reserv1                                       :0x0
14:31:16: Time Access 1 TAAC                            :0xe
14:31:16: Time Access 2 NSAC*100                        :0x0
14:31:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:16: Card Command Classess CCC                     :0x5b5
14:31:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:16: DSR(driver stage register)  DSR_IMP           :0x0
14:31:16: Reserv2                                       :0x0
14:31:16: Device Size C_SIZE                            :0xedc8
14:31:16: Reserv3                                       :0x0
14:31:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:16: Reserv4                                       :0x0
14:31:16: Write Speed Factor R2W_FACTOR                 :0x2
14:31:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:16: FILE_FORMAT_GRP                               :0x0
14:31:16: COPY flag                                     :0x1
14:31:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:16: File_Format                                   :0x0
14:31:16: CRC                                           :0x0
14:31:16: ####CSD Registe Values####  

14:31:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:16: [GetSCRRegisterEntry] Passed
14:31:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:16: Data_Status_After Erases          : 0
14:31:16: CPRM Security Support             : No Security
14:31:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:16: Spec. Version                     : Version 3.0X
14:31:16: Extended Security Support         : Extended_Security_Not_Supported
14:31:16: Command Support                   : COMMAND_SUPPORT
14:31:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07090>, <py_sfcl.CommandDataDefinition object at 0x05E04EA0>) , Command count = 444 ] 
14:31:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CC0>, <py_sfcl.CommandDataDefinition object at 0x05E04D20>) , Command count = 445 ] 
14:31:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:16: [ SetBusWidth(0x4) , Command count = 446 ] 
14:31:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 447 ] 
14:31:16: Protected Area Size 0x28000
14:31:16: Bus Width           2
14:31:16: Secure Mode         0
14:31:16: Speed  Class        4
14:31:16: Perf Move           0
14:31:16: Au Size             9
14:31:16: Erase Size          15
14:31:16: Erase Timeout       1
14:31:16: Erase offset        1
14:31:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 448 ] 
14:31:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:17: Host Frequency set to 100000 KHz
14:31:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:17: ####CSD Registe 2.0 Values####
14:31:17: CSD_STRUCTURE                                 :0x1
14:31:17: Reserv1                                       :0x0
14:31:17: Time Access 1 TAAC                            :0xe
14:31:17: Time Access 2 NSAC*100                        :0x0
14:31:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:17: Card Command Classess CCC                     :0x5b5
14:31:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:17: DSR(driver stage register)  DSR_IMP           :0x0
14:31:17: Reserv2                                       :0x0
14:31:17: Device Size C_SIZE                            :0xedc8
14:31:17: Reserv3                                       :0x0
14:31:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:17: Reserv4                                       :0x0
14:31:17: Write Speed Factor R2W_FACTOR                 :0x2
14:31:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:17: FILE_FORMAT_GRP                               :0x0
14:31:17: COPY flag                                     :0x1
14:31:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:17: File_Format                                   :0x0
14:31:17: CRC                                           :0x0
14:31:17: ####CSD Registe Values####  

14:31:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04420>, <py_sfcl.CommandDataDefinition object at 0x05E07330>) , Command count = 449 ] 
14:31:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C00>, <py_sfcl.CommandDataDefinition object at 0x05E072D0>) , Command count = 450 ] 
14:31:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07210>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F870>, <None>, <py_sfcl.Command23 object at 0x05E04660>) , Command count = 451 ] 
14:31:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:19: Host Frequency set to 25000 KHz
14:31:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E070C0>, 0x0, True) , Command count = 452 ] 
14:31:19: [GO18_globalSetVolt]### Host voltage value is set.
14:31:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E073F0>, 0x0, False) , Command count = 453 ] 
14:31:19: [GO18_globalSetVolt]### Host voltage value is set.
14:31:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 454 ] 
14:31:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 455 ] 
14:31:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 456 ] 
14:31:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E07540>) , Command count = 457 ] 
14:31:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E07690>) , Command count = 458 ] 
14:31:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:20: [ SetCardRCA(0x1, 0xD555) , Command count = 459 ] 
14:31:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:20: Host Frequency set to 25000 KHz
14:31:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:20: ####CSD Registe 2.0 Values####
14:31:20: CSD_STRUCTURE                                 :0x1
14:31:20: Reserv1                                       :0x0
14:31:20: Time Access 1 TAAC                            :0xe
14:31:20: Time Access 2 NSAC*100                        :0x0
14:31:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:20: Card Command Classess CCC                     :0x5b5
14:31:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:20: DSR(driver stage register)  DSR_IMP           :0x0
14:31:20: Reserv2                                       :0x0
14:31:20: Device Size C_SIZE                            :0xedc8
14:31:20: Reserv3                                       :0x0
14:31:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:20: Reserv4                                       :0x0
14:31:20: Write Speed Factor R2W_FACTOR                 :0x2
14:31:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:20: FILE_FORMAT_GRP                               :0x0
14:31:20: COPY flag                                     :0x1
14:31:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:20: File_Format                                   :0x0
14:31:20: CRC                                           :0x0
14:31:20: ####CSD Registe Values####  

14:31:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:20: [GetSCRRegisterEntry] Passed
14:31:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:20: Data_Status_After Erases          : 0
14:31:20: CPRM Security Support             : No Security
14:31:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:20: Spec. Version                     : Version 3.0X
14:31:20: Extended Security Support         : Extended_Security_Not_Supported
14:31:20: Command Support                   : COMMAND_SUPPORT
14:31:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07570>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 460 ] 
14:31:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E073C0>, <py_sfcl.CommandDataDefinition object at 0x05E07420>) , Command count = 461 ] 
14:31:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:20: [ SetBusWidth(0x4) , Command count = 462 ] 
14:31:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 463 ] 
14:31:20: Protected Area Size 0x28000
14:31:20: Bus Width           2
14:31:20: Secure Mode         0
14:31:20: Speed  Class        4
14:31:20: Perf Move           0
14:31:20: Au Size             9
14:31:20: Erase Size          15
14:31:20: Erase Timeout       1
14:31:20: Erase offset        1
14:31:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 464 ] 
14:31:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:20: Host Frequency set to 100000 KHz
14:31:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:20: ####CSD Registe 2.0 Values####
14:31:20: CSD_STRUCTURE                                 :0x1
14:31:20: Reserv1                                       :0x0
14:31:20: Time Access 1 TAAC                            :0xe
14:31:20: Time Access 2 NSAC*100                        :0x0
14:31:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:20: Card Command Classess CCC                     :0x5b5
14:31:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:20: DSR(driver stage register)  DSR_IMP           :0x0
14:31:20: Reserv2                                       :0x0
14:31:20: Device Size C_SIZE                            :0xedc8
14:31:20: Reserv3                                       :0x0
14:31:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:20: Reserv4                                       :0x0
14:31:20: Write Speed Factor R2W_FACTOR                 :0x2
14:31:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:20: FILE_FORMAT_GRP                               :0x0
14:31:20: COPY flag                                     :0x1
14:31:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:20: File_Format                                   :0x0
14:31:20: CRC                                           :0x0
14:31:20: ####CSD Registe Values####  

14:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E079F0>, <py_sfcl.CommandDataDefinition object at 0x05E07B10>) , Command count = 465 ] 
14:31:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07300>, <py_sfcl.CommandDataDefinition object at 0x05E07180>) , Command count = 466 ] 
14:31:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E078D0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F780>, <None>, <py_sfcl.Command23 object at 0x05E0F7E0>) , Command count = 467 ] 
14:31:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:23: Host Frequency set to 25000 KHz
14:31:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07780>, 0x0, True) , Command count = 468 ] 
14:31:23: [GO18_globalSetVolt]### Host voltage value is set.
14:31:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07AB0>, 0x0, False) , Command count = 469 ] 
14:31:23: [GO18_globalSetVolt]### Host voltage value is set.
14:31:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 470 ] 
14:31:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 471 ] 
14:31:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 472 ] 
14:31:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CC0>, <py_sfcl.CommandDataDefinition object at 0x05E07C00>) , Command count = 473 ] 
14:31:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07630>, <py_sfcl.CommandDataDefinition object at 0x05E07D50>) , Command count = 474 ] 
14:31:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:23: [ SetCardRCA(0x1, 0xD555) , Command count = 475 ] 
14:31:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:23: Host Frequency set to 25000 KHz
14:31:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:23: ####CSD Registe 2.0 Values####
14:31:23: CSD_STRUCTURE                                 :0x1
14:31:23: Reserv1                                       :0x0
14:31:23: Time Access 1 TAAC                            :0xe
14:31:23: Time Access 2 NSAC*100                        :0x0
14:31:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:23: Card Command Classess CCC                     :0x5b5
14:31:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:23: DSR(driver stage register)  DSR_IMP           :0x0
14:31:23: Reserv2                                       :0x0
14:31:23: Device Size C_SIZE                            :0xedc8
14:31:23: Reserv3                                       :0x0
14:31:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:23: Reserv4                                       :0x0
14:31:23: Write Speed Factor R2W_FACTOR                 :0x2
14:31:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:23: FILE_FORMAT_GRP                               :0x0
14:31:23: COPY flag                                     :0x1
14:31:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:23: File_Format                                   :0x0
14:31:23: CRC                                           :0x0
14:31:23: ####CSD Registe Values####  

14:31:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:23: [GetSCRRegisterEntry] Passed
14:31:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:23: Data_Status_After Erases          : 0
14:31:23: CPRM Security Support             : No Security
14:31:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:23: Spec. Version                     : Version 3.0X
14:31:23: Extended Security Support         : Extended_Security_Not_Supported
14:31:23: Command Support                   : COMMAND_SUPPORT
14:31:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07C30>, <py_sfcl.CommandDataDefinition object at 0x05E07C60>) , Command count = 476 ] 
14:31:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07FC0>, <py_sfcl.CommandDataDefinition object at 0x05E07DE0>) , Command count = 477 ] 
14:31:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:23: [ SetBusWidth(0x4) , Command count = 478 ] 
14:31:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 479 ] 
14:31:23: Protected Area Size 0x28000
14:31:23: Bus Width           2
14:31:23: Secure Mode         0
14:31:23: Speed  Class        4
14:31:23: Perf Move           0
14:31:23: Au Size             9
14:31:23: Erase Size          15
14:31:23: Erase Timeout       1
14:31:23: Erase offset        1
14:31:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 480 ] 
14:31:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:23: Host Frequency set to 100000 KHz
14:31:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:23: ####CSD Registe 2.0 Values####
14:31:23: CSD_STRUCTURE                                 :0x1
14:31:23: Reserv1                                       :0x0
14:31:23: Time Access 1 TAAC                            :0xe
14:31:24: Time Access 2 NSAC*100                        :0x0
14:31:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:24: Card Command Classess CCC                     :0x5b5
14:31:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:24: DSR(driver stage register)  DSR_IMP           :0x0
14:31:24: Reserv2                                       :0x0
14:31:24: Device Size C_SIZE                            :0xedc8
14:31:24: Reserv3                                       :0x0
14:31:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:24: Reserv4                                       :0x0
14:31:24: Write Speed Factor R2W_FACTOR                 :0x2
14:31:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:24: FILE_FORMAT_GRP                               :0x0
14:31:24: COPY flag                                     :0x1
14:31:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:24: File_Format                                   :0x0
14:31:24: CRC                                           :0x0
14:31:24: ####CSD Registe Values####  

14:31:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B0F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 481 ] 
14:31:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E079C0>, <py_sfcl.CommandDataDefinition object at 0x05E07870>) , Command count = 482 ] 
14:31:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07F90>, <py_sfcl.PySEnhancedCmdData object at 0x05E07A80>, <None>, <py_sfcl.Command23 object at 0x05E07BA0>) , Command count = 483 ] 
14:31:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:26: Host Frequency set to 25000 KHz
14:31:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07E40>, 0x0, True) , Command count = 484 ] 
14:31:26: [GO18_globalSetVolt]### Host voltage value is set.
14:31:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B1B0>, 0x0, False) , Command count = 485 ] 
14:31:26: [GO18_globalSetVolt]### Host voltage value is set.
14:31:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 486 ] 
14:31:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 487 ] 
14:31:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 488 ] 
14:31:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B3C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B300>) , Command count = 489 ] 
14:31:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B450>) , Command count = 490 ] 
14:31:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:26: [ SetCardRCA(0x1, 0xD555) , Command count = 491 ] 
14:31:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:27: Host Frequency set to 25000 KHz
14:31:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:27: ####CSD Registe 2.0 Values####
14:31:27: CSD_STRUCTURE                                 :0x1
14:31:27: Reserv1                                       :0x0
14:31:27: Time Access 1 TAAC                            :0xe
14:31:27: Time Access 2 NSAC*100                        :0x0
14:31:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:27: Card Command Classess CCC                     :0x5b5
14:31:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:27: DSR(driver stage register)  DSR_IMP           :0x0
14:31:27: Reserv2                                       :0x0
14:31:27: Device Size C_SIZE                            :0xedc8
14:31:27: Reserv3                                       :0x0
14:31:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:27: Reserv4                                       :0x0
14:31:27: Write Speed Factor R2W_FACTOR                 :0x2
14:31:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:27: FILE_FORMAT_GRP                               :0x0
14:31:27: COPY flag                                     :0x1
14:31:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:27: File_Format                                   :0x0
14:31:27: CRC                                           :0x0
14:31:27: ####CSD Registe Values####  

14:31:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:27: [GetSCRRegisterEntry] Passed
14:31:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:27: Data_Status_After Erases          : 0
14:31:27: CPRM Security Support             : No Security
14:31:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:27: Spec. Version                     : Version 3.0X
14:31:27: Extended Security Support         : Extended_Security_Not_Supported
14:31:27: Command Support                   : COMMAND_SUPPORT
14:31:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B330>, <py_sfcl.CommandDataDefinition object at 0x05E0B360>) , Command count = 492 ] 
14:31:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B180>, <py_sfcl.CommandDataDefinition object at 0x05E0B1E0>) , Command count = 493 ] 
14:31:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:27: [ SetBusWidth(0x4) , Command count = 494 ] 
14:31:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 495 ] 
14:31:27: Protected Area Size 0x28000
14:31:27: Bus Width           2
14:31:27: Secure Mode         0
14:31:27: Speed  Class        4
14:31:27: Perf Move           0
14:31:27: Au Size             9
14:31:27: Erase Size          15
14:31:27: Erase Timeout       1
14:31:27: Erase offset        1
14:31:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 496 ] 
14:31:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:27: Host Frequency set to 100000 KHz
14:31:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:27: ####CSD Registe 2.0 Values####
14:31:27: CSD_STRUCTURE                                 :0x1
14:31:27: Reserv1                                       :0x0
14:31:27: Time Access 1 TAAC                            :0xe
14:31:27: Time Access 2 NSAC*100                        :0x0
14:31:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:27: Card Command Classess CCC                     :0x5b5
14:31:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:27: DSR(driver stage register)  DSR_IMP           :0x0
14:31:27: Reserv2                                       :0x0
14:31:27: Device Size C_SIZE                            :0xedc8
14:31:27: Reserv3                                       :0x0
14:31:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:27: Reserv4                                       :0x0
14:31:27: Write Speed Factor R2W_FACTOR                 :0x2
14:31:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:27: FILE_FORMAT_GRP                               :0x0
14:31:27: COPY flag                                     :0x1
14:31:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:27: File_Format                                   :0x0
14:31:27: CRC                                           :0x0
14:31:27: ####CSD Registe Values####  

14:31:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B8D0>) , Command count = 497 ] 
14:31:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B0C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 498 ] 
14:31:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B690>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F9C0>, <None>, <py_sfcl.Command23 object at 0x05E07AE0>) , Command count = 499 ] 
14:31:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:30: Host Frequency set to 25000 KHz
14:31:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B540>, 0x0, True) , Command count = 500 ] 
14:31:30: [GO18_globalSetVolt]### Host voltage value is set.
14:31:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B870>, 0x0, False) , Command count = 501 ] 
14:31:30: [GO18_globalSetVolt]### Host voltage value is set.
14:31:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 502 ] 
14:31:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 503 ] 
14:31:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 504 ] 
14:31:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052177E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BA20>) , Command count = 505 ] 
14:31:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B3F0>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 506 ] 
14:31:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:30: [ SetCardRCA(0x1, 0xD555) , Command count = 507 ] 
14:31:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:30: Host Frequency set to 25000 KHz
14:31:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:30: ####CSD Registe 2.0 Values####
14:31:30: CSD_STRUCTURE                                 :0x1
14:31:30: Reserv1                                       :0x0
14:31:30: Time Access 1 TAAC                            :0xe
14:31:30: Time Access 2 NSAC*100                        :0x0
14:31:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:30: Card Command Classess CCC                     :0x5b5
14:31:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:30: DSR(driver stage register)  DSR_IMP           :0x0
14:31:30: Reserv2                                       :0x0
14:31:30: Device Size C_SIZE                            :0xedc8
14:31:30: Reserv3                                       :0x0
14:31:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:30: Reserv4                                       :0x0
14:31:30: Write Speed Factor R2W_FACTOR                 :0x2
14:31:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:30: FILE_FORMAT_GRP                               :0x0
14:31:30: COPY flag                                     :0x1
14:31:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:30: File_Format                                   :0x0
14:31:30: CRC                                           :0x0
14:31:30: ####CSD Registe Values####  

14:31:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:30: [GetSCRRegisterEntry] Passed
14:31:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:30: Data_Status_After Erases          : 0
14:31:30: CPRM Security Support             : No Security
14:31:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:30: Spec. Version                     : Version 3.0X
14:31:30: Extended Security Support         : Extended_Security_Not_Supported
14:31:30: Command Support                   : COMMAND_SUPPORT
14:31:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B9C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 508 ] 
14:31:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B840>, <py_sfcl.CommandDataDefinition object at 0x05E0B8A0>) , Command count = 509 ] 
14:31:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:30: [ SetBusWidth(0x4) , Command count = 510 ] 
14:31:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 511 ] 
14:31:30: Protected Area Size 0x28000
14:31:30: Bus Width           2
14:31:30: Secure Mode         0
14:31:30: Speed  Class        4
14:31:30: Perf Move           0
14:31:30: Au Size             9
14:31:30: Erase Size          15
14:31:30: Erase Timeout       1
14:31:30: Erase offset        1
14:31:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 512 ] 
14:31:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:30: Host Frequency set to 100000 KHz
14:31:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:30: ####CSD Registe 2.0 Values####
14:31:30: CSD_STRUCTURE                                 :0x1
14:31:30: Reserv1                                       :0x0
14:31:30: Time Access 1 TAAC                            :0xe
14:31:30: Time Access 2 NSAC*100                        :0x0
14:31:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:30: Card Command Classess CCC                     :0x5b5
14:31:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:30: DSR(driver stage register)  DSR_IMP           :0x0
14:31:30: Reserv2                                       :0x0
14:31:30: Device Size C_SIZE                            :0xedc8
14:31:30: Reserv3                                       :0x0
14:31:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:30: Reserv4                                       :0x0
14:31:30: Write Speed Factor R2W_FACTOR                 :0x2
14:31:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:31: FILE_FORMAT_GRP                               :0x0
14:31:31: COPY flag                                     :0x1
14:31:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:31: File_Format                                   :0x0
14:31:31: CRC                                           :0x0
14:31:31: ####CSD Registe Values####  

14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F240>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 513 ] 
14:31:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B780>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 514 ] 
14:31:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BBD0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F960>, <None>, <py_sfcl.Command23 object at 0x05E0F8D0>) , Command count = 515 ] 
14:31:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:33: Host Frequency set to 25000 KHz
14:31:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526DED0>, 0x0, True) , Command count = 516 ] 
14:31:33: [GO18_globalSetVolt]### Host voltage value is set.
14:31:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F270>, 0x0, False) , Command count = 517 ] 
14:31:33: [GO18_globalSetVolt]### Host voltage value is set.
14:31:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 518 ] 
14:31:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 519 ] 
14:31:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 520 ] 
14:31:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FEA0>, <py_sfcl.CommandDataDefinition object at 0x05E0BD80>) , Command count = 521 ] 
14:31:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0521E030>, <py_sfcl.CommandDataDefinition object at 0x05E0BE10>) , Command count = 522 ] 
14:31:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:33: [ SetCardRCA(0x1, 0xD555) , Command count = 523 ] 
14:31:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:34: Host Frequency set to 25000 KHz
14:31:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:34: ####CSD Registe 2.0 Values####
14:31:34: CSD_STRUCTURE                                 :0x1
14:31:34: Reserv1                                       :0x0
14:31:34: Time Access 1 TAAC                            :0xe
14:31:34: Time Access 2 NSAC*100                        :0x0
14:31:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:34: Card Command Classess CCC                     :0x5b5
14:31:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:34: DSR(driver stage register)  DSR_IMP           :0x0
14:31:34: Reserv2                                       :0x0
14:31:34: Device Size C_SIZE                            :0xedc8
14:31:34: Reserv3                                       :0x0
14:31:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:34: Reserv4                                       :0x0
14:31:34: Write Speed Factor R2W_FACTOR                 :0x2
14:31:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:34: FILE_FORMAT_GRP                               :0x0
14:31:34: COPY flag                                     :0x1
14:31:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:34: File_Format                                   :0x0
14:31:34: CRC                                           :0x0
14:31:34: ####CSD Registe Values####  

14:31:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:34: [GetSCRRegisterEntry] Passed
14:31:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:34: Data_Status_After Erases          : 0
14:31:34: CPRM Security Support             : No Security
14:31:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:34: Spec. Version                     : Version 3.0X
14:31:34: Extended Security Support         : Extended_Security_Not_Supported
14:31:34: Command Support                   : COMMAND_SUPPORT
14:31:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E0BD50>) , Command count = 524 ] 
14:31:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BE40>) , Command count = 525 ] 
14:31:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:34: [ SetBusWidth(0x4) , Command count = 526 ] 
14:31:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 527 ] 
14:31:34: Protected Area Size 0x28000
14:31:34: Bus Width           2
14:31:34: Secure Mode         0
14:31:34: Speed  Class        4
14:31:34: Perf Move           0
14:31:34: Au Size             9
14:31:34: Erase Size          15
14:31:34: Erase Timeout       1
14:31:34: Erase offset        1
14:31:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 528 ] 
14:31:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:34: Host Frequency set to 100000 KHz
14:31:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:34: ####CSD Registe 2.0 Values####
14:31:34: CSD_STRUCTURE                                 :0x1
14:31:34: Reserv1                                       :0x0
14:31:34: Time Access 1 TAAC                            :0xe
14:31:34: Time Access 2 NSAC*100                        :0x0
14:31:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:34: Card Command Classess CCC                     :0x5b5
14:31:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:34: DSR(driver stage register)  DSR_IMP           :0x0
14:31:34: Reserv2                                       :0x0
14:31:34: Device Size C_SIZE                            :0xedc8
14:31:34: Reserv3                                       :0x0
14:31:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:34: Reserv4                                       :0x0
14:31:34: Write Speed Factor R2W_FACTOR                 :0x2
14:31:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:34: FILE_FORMAT_GRP                               :0x0
14:31:34: COPY flag                                     :0x1
14:31:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:34: File_Format                                   :0x0
14:31:34: CRC                                           :0x0
14:31:34: ####CSD Registe Values####  

14:31:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05E0BDE0>) , Command count = 529 ] 
14:31:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F420>, <py_sfcl.CommandDataDefinition object at 0x05E0BFC0>) , Command count = 530 ] 
14:31:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BCC0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BCF0>, <None>, <py_sfcl.Command23 object at 0x05E0FA20>) , Command count = 531 ] 
14:31:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:36: Host Frequency set to 25000 KHz
14:31:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x052819F0>, 0x0, True) , Command count = 532 ] 
14:31:36: [GO18_globalSetVolt]### Host voltage value is set.
14:31:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281DE0>, 0x0, False) , Command count = 533 ] 
14:31:36: [GO18_globalSetVolt]### Host voltage value is set.
14:31:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 534 ] 
14:31:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 535 ] 
14:31:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 536 ] 
14:31:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F90>, <py_sfcl.CommandDataDefinition object at 0x05E0F1B0>) , Command count = 537 ] 
14:31:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527BFC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F210>) , Command count = 538 ] 
14:31:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:37: [ SetCardRCA(0x1, 0xD555) , Command count = 539 ] 
14:31:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:37: Host Frequency set to 25000 KHz
14:31:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:37: ####CSD Registe 2.0 Values####
14:31:37: CSD_STRUCTURE                                 :0x1
14:31:37: Reserv1                                       :0x0
14:31:37: Time Access 1 TAAC                            :0xe
14:31:37: Time Access 2 NSAC*100                        :0x0
14:31:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:37: Card Command Classess CCC                     :0x5b5
14:31:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:37: DSR(driver stage register)  DSR_IMP           :0x0
14:31:37: Reserv2                                       :0x0
14:31:37: Device Size C_SIZE                            :0xedc8
14:31:37: Reserv3                                       :0x0
14:31:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:37: Reserv4                                       :0x0
14:31:37: Write Speed Factor R2W_FACTOR                 :0x2
14:31:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:37: FILE_FORMAT_GRP                               :0x0
14:31:37: COPY flag                                     :0x1
14:31:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:37: File_Format                                   :0x0
14:31:37: CRC                                           :0x0
14:31:37: ####CSD Registe Values####  

14:31:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:37: [GetSCRRegisterEntry] Passed
14:31:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:37: Data_Status_After Erases          : 0
14:31:37: CPRM Security Support             : No Security
14:31:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:37: Spec. Version                     : Version 3.0X
14:31:37: Extended Security Support         : Extended_Security_Not_Supported
14:31:37: Command Support                   : COMMAND_SUPPORT
14:31:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F60>, <py_sfcl.CommandDataDefinition object at 0x05E0F9F0>) , Command count = 540 ] 
14:31:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F420>) , Command count = 541 ] 
14:31:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:37: [ SetBusWidth(0x4) , Command count = 542 ] 
14:31:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 543 ] 
14:31:37: Protected Area Size 0x28000
14:31:37: Bus Width           2
14:31:37: Secure Mode         0
14:31:37: Speed  Class        4
14:31:37: Perf Move           0
14:31:37: Au Size             9
14:31:37: Erase Size          15
14:31:37: Erase Timeout       1
14:31:37: Erase offset        1
14:31:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 544 ] 
14:31:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:37: Host Frequency set to 100000 KHz
14:31:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:37: ####CSD Registe 2.0 Values####
14:31:37: CSD_STRUCTURE                                 :0x1
14:31:37: Reserv1                                       :0x0
14:31:37: Time Access 1 TAAC                            :0xe
14:31:37: Time Access 2 NSAC*100                        :0x0
14:31:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:37: Card Command Classess CCC                     :0x5b5
14:31:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:37: DSR(driver stage register)  DSR_IMP           :0x0
14:31:37: Reserv2                                       :0x0
14:31:37: Device Size C_SIZE                            :0xedc8
14:31:37: Reserv3                                       :0x0
14:31:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:37: Reserv4                                       :0x0
14:31:37: Write Speed Factor R2W_FACTOR                 :0x2
14:31:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:37: FILE_FORMAT_GRP                               :0x0
14:31:37: COPY flag                                     :0x1
14:31:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:37: File_Format                                   :0x0
14:31:37: CRC                                           :0x0
14:31:37: ####CSD Registe Values####  

14:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05CEF7E0>) , Command count = 545 ] 
14:31:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C90>, <py_sfcl.CommandDataDefinition object at 0x05E0F420>) , Command count = 546 ] 
14:31:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F5A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F390>, <None>, <py_sfcl.Command23 object at 0x05E0FC00>) , Command count = 547 ] 
14:31:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:40: Host Frequency set to 25000 KHz
14:31:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF030>, 0x0, True) , Command count = 548 ] 
14:31:40: [GO18_globalSetVolt]### Host voltage value is set.
14:31:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9DB0>, 0x0, False) , Command count = 549 ] 
14:31:40: [GO18_globalSetVolt]### Host voltage value is set.
14:31:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 550 ] 
14:31:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 551 ] 
14:31:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 552 ] 
14:31:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C00>, <py_sfcl.CommandDataDefinition object at 0x05DE9BA0>) , Command count = 553 ] 
14:31:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F540>) , Command count = 554 ] 
14:31:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:40: [ SetCardRCA(0x1, 0xD555) , Command count = 555 ] 
14:31:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:40: Host Frequency set to 25000 KHz
14:31:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:40: ####CSD Registe 2.0 Values####
14:31:40: CSD_STRUCTURE                                 :0x1
14:31:40: Reserv1                                       :0x0
14:31:40: Time Access 1 TAAC                            :0xe
14:31:40: Time Access 2 NSAC*100                        :0x0
14:31:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:40: Card Command Classess CCC                     :0x5b5
14:31:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:40: DSR(driver stage register)  DSR_IMP           :0x0
14:31:40: Reserv2                                       :0x0
14:31:40: Device Size C_SIZE                            :0xedc8
14:31:40: Reserv3                                       :0x0
14:31:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:40: Reserv4                                       :0x0
14:31:40: Write Speed Factor R2W_FACTOR                 :0x2
14:31:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:40: FILE_FORMAT_GRP                               :0x0
14:31:40: COPY flag                                     :0x1
14:31:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:40: File_Format                                   :0x0
14:31:40: CRC                                           :0x0
14:31:40: ####CSD Registe Values####  

14:31:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:40: [GetSCRRegisterEntry] Passed
14:31:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:40: Data_Status_After Erases          : 0
14:31:40: CPRM Security Support             : No Security
14:31:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:40: Spec. Version                     : Version 3.0X
14:31:40: Extended Security Support         : Extended_Security_Not_Supported
14:31:40: Command Support                   : COMMAND_SUPPORT
14:31:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9AB0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 556 ] 
14:31:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FB10>, <py_sfcl.CommandDataDefinition object at 0x05E0F690>) , Command count = 557 ] 
14:31:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:40: [ SetBusWidth(0x4) , Command count = 558 ] 
14:31:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 559 ] 
14:31:40: Protected Area Size 0x28000
14:31:40: Bus Width           2
14:31:40: Secure Mode         0
14:31:40: Speed  Class        4
14:31:40: Perf Move           0
14:31:40: Au Size             9
14:31:40: Erase Size          15
14:31:40: Erase Timeout       1
14:31:40: Erase offset        1
14:31:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 560 ] 
14:31:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:40: Host Frequency set to 100000 KHz
14:31:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:40: ####CSD Registe 2.0 Values####
14:31:40: CSD_STRUCTURE                                 :0x1
14:31:40: Reserv1                                       :0x0
14:31:40: Time Access 1 TAAC                            :0xe
14:31:41: Time Access 2 NSAC*100                        :0x0
14:31:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:41: Card Command Classess CCC                     :0x5b5
14:31:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:41: DSR(driver stage register)  DSR_IMP           :0x0
14:31:41: Reserv2                                       :0x0
14:31:41: Device Size C_SIZE                            :0xedc8
14:31:41: Reserv3                                       :0x0
14:31:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:41: Reserv4                                       :0x0
14:31:41: Write Speed Factor R2W_FACTOR                 :0x2
14:31:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:41: FILE_FORMAT_GRP                               :0x0
14:31:41: COPY flag                                     :0x1
14:31:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:41: File_Format                                   :0x0
14:31:41: CRC                                           :0x0
14:31:41: ####CSD Registe Values####  

14:31:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9900>, <py_sfcl.CommandDataDefinition object at 0x05DF5180>) , Command count = 561 ] 
14:31:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF52D0>, <py_sfcl.CommandDataDefinition object at 0x05E0F030>) , Command count = 562 ] 
14:31:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F330>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F5D0>, <None>, <py_sfcl.Command23 object at 0x05E0F240>) , Command count = 563 ] 
14:31:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:43: Host Frequency set to 25000 KHz
14:31:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B10>, 0x0, True) , Command count = 564 ] 
14:31:43: [GO18_globalSetVolt]### Host voltage value is set.
14:31:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5120>, 0x0, False) , Command count = 565 ] 
14:31:43: [GO18_globalSetVolt]### Host voltage value is set.
14:31:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 566 ] 
14:31:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 567 ] 
14:31:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 568 ] 
14:31:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5720>, <py_sfcl.CommandDataDefinition object at 0x05DF5210>) , Command count = 569 ] 
14:31:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05DF5750>) , Command count = 570 ] 
14:31:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:44: [ SetCardRCA(0x1, 0xD555) , Command count = 571 ] 
14:31:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:44: Host Frequency set to 25000 KHz
14:31:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:44: ####CSD Registe 2.0 Values####
14:31:44: CSD_STRUCTURE                                 :0x1
14:31:44: Reserv1                                       :0x0
14:31:44: Time Access 1 TAAC                            :0xe
14:31:44: Time Access 2 NSAC*100                        :0x0
14:31:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:44: Card Command Classess CCC                     :0x5b5
14:31:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:44: DSR(driver stage register)  DSR_IMP           :0x0
14:31:44: Reserv2                                       :0x0
14:31:44: Device Size C_SIZE                            :0xedc8
14:31:44: Reserv3                                       :0x0
14:31:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:44: Reserv4                                       :0x0
14:31:44: Write Speed Factor R2W_FACTOR                 :0x2
14:31:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:44: FILE_FORMAT_GRP                               :0x0
14:31:44: COPY flag                                     :0x1
14:31:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:44: File_Format                                   :0x0
14:31:44: CRC                                           :0x0
14:31:44: ####CSD Registe Values####  

14:31:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:44: [GetSCRRegisterEntry] Passed
14:31:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:44: Data_Status_After Erases          : 0
14:31:44: CPRM Security Support             : No Security
14:31:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:44: Spec. Version                     : Version 3.0X
14:31:44: Extended Security Support         : Extended_Security_Not_Supported
14:31:44: Command Support                   : COMMAND_SUPPORT
14:31:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5870>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 572 ] 
14:31:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5690>, <py_sfcl.CommandDataDefinition object at 0x05DF5240>) , Command count = 573 ] 
14:31:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:44: [ SetBusWidth(0x4) , Command count = 574 ] 
14:31:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 575 ] 
14:31:44: Protected Area Size 0x28000
14:31:44: Bus Width           2
14:31:44: Secure Mode         0
14:31:44: Speed  Class        4
14:31:44: Perf Move           0
14:31:44: Au Size             9
14:31:44: Erase Size          15
14:31:44: Erase Timeout       1
14:31:44: Erase offset        1
14:31:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 576 ] 
14:31:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:44: Host Frequency set to 100000 KHz
14:31:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:44: ####CSD Registe 2.0 Values####
14:31:44: CSD_STRUCTURE                                 :0x1
14:31:44: Reserv1                                       :0x0
14:31:44: Time Access 1 TAAC                            :0xe
14:31:44: Time Access 2 NSAC*100                        :0x0
14:31:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:44: Card Command Classess CCC                     :0x5b5
14:31:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:44: DSR(driver stage register)  DSR_IMP           :0x0
14:31:44: Reserv2                                       :0x0
14:31:44: Device Size C_SIZE                            :0xedc8
14:31:44: Reserv3                                       :0x0
14:31:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:44: Reserv4                                       :0x0
14:31:44: Write Speed Factor R2W_FACTOR                 :0x2
14:31:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:44: FILE_FORMAT_GRP                               :0x0
14:31:44: COPY flag                                     :0x1
14:31:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:44: File_Format                                   :0x0
14:31:44: CRC                                           :0x0
14:31:44: ####CSD Registe Values####  

14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C90>, <py_sfcl.CommandDataDefinition object at 0x05DF5510>) , Command count = 577 ] 
14:31:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF660>, <py_sfcl.CommandDataDefinition object at 0x05E0FAE0>) , Command count = 578 ] 
14:31:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F360>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F750>, <None>, <py_sfcl.Command23 object at 0x05E0F4B0>) , Command count = 579 ] 
14:31:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:47: Host Frequency set to 25000 KHz
14:31:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF57E0>, 0x0, True) , Command count = 580 ] 
14:31:47: [GO18_globalSetVolt]### Host voltage value is set.
14:31:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5DE0>, 0x0, False) , Command count = 581 ] 
14:31:47: [GO18_globalSetVolt]### Host voltage value is set.
14:31:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 582 ] 
14:31:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 583 ] 
14:31:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 584 ] 
14:31:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB10>, <py_sfcl.CommandDataDefinition object at 0x05DF5F90>) , Command count = 585 ] 
14:31:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DF5A80>) , Command count = 586 ] 
14:31:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:47: [ SetCardRCA(0x1, 0xD555) , Command count = 587 ] 
14:31:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:47: Host Frequency set to 25000 KHz
14:31:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:47: ####CSD Registe 2.0 Values####
14:31:47: CSD_STRUCTURE                                 :0x1
14:31:47: Reserv1                                       :0x0
14:31:47: Time Access 1 TAAC                            :0xe
14:31:47: Time Access 2 NSAC*100                        :0x0
14:31:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:47: Card Command Classess CCC                     :0x5b5
14:31:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:47: DSR(driver stage register)  DSR_IMP           :0x0
14:31:47: Reserv2                                       :0x0
14:31:47: Device Size C_SIZE                            :0xedc8
14:31:47: Reserv3                                       :0x0
14:31:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:47: Reserv4                                       :0x0
14:31:47: Write Speed Factor R2W_FACTOR                 :0x2
14:31:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:47: FILE_FORMAT_GRP                               :0x0
14:31:47: COPY flag                                     :0x1
14:31:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:47: File_Format                                   :0x0
14:31:47: CRC                                           :0x0
14:31:47: ####CSD Registe Values####  

14:31:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:47: [GetSCRRegisterEntry] Passed
14:31:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:47: Data_Status_After Erases          : 0
14:31:47: CPRM Security Support             : No Security
14:31:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:47: Spec. Version                     : Version 3.0X
14:31:47: Extended Security Support         : Extended_Security_Not_Supported
14:31:47: Command Support                   : COMMAND_SUPPORT
14:31:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB060>, <py_sfcl.CommandDataDefinition object at 0x05DF5F30>) , Command count = 588 ] 
14:31:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05DF5F00>) , Command count = 589 ] 
14:31:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:47: [ SetBusWidth(0x4) , Command count = 590 ] 
14:31:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 591 ] 
14:31:47: Protected Area Size 0x28000
14:31:47: Bus Width           2
14:31:47: Secure Mode         0
14:31:47: Speed  Class        4
14:31:47: Perf Move           0
14:31:47: Au Size             9
14:31:47: Erase Size          15
14:31:47: Erase Timeout       1
14:31:47: Erase offset        1
14:31:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 592 ] 
14:31:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:47: Host Frequency set to 100000 KHz
14:31:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:47: ####CSD Registe 2.0 Values####
14:31:47: CSD_STRUCTURE                                 :0x1
14:31:47: Reserv1                                       :0x0
14:31:47: Time Access 1 TAAC                            :0xe
14:31:47: Time Access 2 NSAC*100                        :0x0
14:31:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:47: Card Command Classess CCC                     :0x5b5
14:31:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:48: DSR(driver stage register)  DSR_IMP           :0x0
14:31:48: Reserv2                                       :0x0
14:31:48: Device Size C_SIZE                            :0xedc8
14:31:48: Reserv3                                       :0x0
14:31:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:48: Reserv4                                       :0x0
14:31:48: Write Speed Factor R2W_FACTOR                 :0x2
14:31:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:48: FILE_FORMAT_GRP                               :0x0
14:31:48: COPY flag                                     :0x1
14:31:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:48: File_Format                                   :0x0
14:31:48: CRC                                           :0x0
14:31:48: ####CSD Registe Values####  

14:31:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB750>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 593 ] 
14:31:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C60>, <py_sfcl.CommandDataDefinition object at 0x05E0FB40>) , Command count = 594 ] 
14:31:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBD80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F570>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F660>, <None>, <py_sfcl.Command23 object at 0x05E0F030>) , Command count = 595 ] 
14:31:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:50: Host Frequency set to 25000 KHz
14:31:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5BA0>, 0x0, True) , Command count = 596 ] 
14:31:50: [GO18_globalSetVolt]### Host voltage value is set.
14:31:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5E10>, 0x0, False) , Command count = 597 ] 
14:31:50: [GO18_globalSetVolt]### Host voltage value is set.
14:31:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 598 ] 
14:31:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 599 ] 
14:31:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 600 ] 
14:31:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57B0>, <py_sfcl.CommandDataDefinition object at 0x05DFBDB0>) , Command count = 601 ] 
14:31:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB450>, <py_sfcl.CommandDataDefinition object at 0x05DFB420>) , Command count = 602 ] 
14:31:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:50: [ SetCardRCA(0x1, 0xD555) , Command count = 603 ] 
14:31:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:51: Host Frequency set to 25000 KHz
14:31:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:51: ####CSD Registe 2.0 Values####
14:31:51: CSD_STRUCTURE                                 :0x1
14:31:51: Reserv1                                       :0x0
14:31:51: Time Access 1 TAAC                            :0xe
14:31:51: Time Access 2 NSAC*100                        :0x0
14:31:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:51: Card Command Classess CCC                     :0x5b5
14:31:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:51: DSR(driver stage register)  DSR_IMP           :0x0
14:31:51: Reserv2                                       :0x0
14:31:51: Device Size C_SIZE                            :0xedc8
14:31:51: Reserv3                                       :0x0
14:31:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:51: Reserv4                                       :0x0
14:31:51: Write Speed Factor R2W_FACTOR                 :0x2
14:31:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:51: FILE_FORMAT_GRP                               :0x0
14:31:51: COPY flag                                     :0x1
14:31:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:51: File_Format                                   :0x0
14:31:51: CRC                                           :0x0
14:31:51: ####CSD Registe Values####  

14:31:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:51: [GetSCRRegisterEntry] Passed
14:31:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:51: Data_Status_After Erases          : 0
14:31:51: CPRM Security Support             : No Security
14:31:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:51: Spec. Version                     : Version 3.0X
14:31:51: Extended Security Support         : Extended_Security_Not_Supported
14:31:51: Command Support                   : COMMAND_SUPPORT
14:31:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB150>, <py_sfcl.CommandDataDefinition object at 0x05DFB7E0>) , Command count = 604 ] 
14:31:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB600>) , Command count = 605 ] 
14:31:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:51: [ SetBusWidth(0x4) , Command count = 606 ] 
14:31:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 607 ] 
14:31:51: Protected Area Size 0x28000
14:31:51: Bus Width           2
14:31:51: Secure Mode         0
14:31:51: Speed  Class        4
14:31:51: Perf Move           0
14:31:51: Au Size             9
14:31:51: Erase Size          15
14:31:51: Erase Timeout       1
14:31:51: Erase offset        1
14:31:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 608 ] 
14:31:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:51: Host Frequency set to 100000 KHz
14:31:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:51: ####CSD Registe 2.0 Values####
14:31:51: CSD_STRUCTURE                                 :0x1
14:31:51: Reserv1                                       :0x0
14:31:51: Time Access 1 TAAC                            :0xe
14:31:51: Time Access 2 NSAC*100                        :0x0
14:31:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:51: Card Command Classess CCC                     :0x5b5
14:31:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:51: DSR(driver stage register)  DSR_IMP           :0x0
14:31:51: Reserv2                                       :0x0
14:31:51: Device Size C_SIZE                            :0xedc8
14:31:51: Reserv3                                       :0x0
14:31:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:51: Reserv4                                       :0x0
14:31:51: Write Speed Factor R2W_FACTOR                 :0x2
14:31:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:51: FILE_FORMAT_GRP                               :0x0
14:31:51: COPY flag                                     :0x1
14:31:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:51: File_Format                                   :0x0
14:31:51: CRC                                           :0x0
14:31:51: ####CSD Registe Values####  

14:31:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB240>, <py_sfcl.CommandDataDefinition object at 0x05DF5540>) , Command count = 609 ] 
14:31:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py_sfcl.CommandDataDefinition object at 0x05DF5FC0>) , Command count = 610 ] 
14:31:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F510>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F810>, <None>, <py_sfcl.Command23 object at 0x05E0FAE0>) , Command count = 611 ] 
14:31:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:54: Host Frequency set to 25000 KHz
14:31:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBC30>, 0x0, True) , Command count = 612 ] 
14:31:54: [GO18_globalSetVolt]### Host voltage value is set.
14:31:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBA20>, 0x0, False) , Command count = 613 ] 
14:31:54: [GO18_globalSetVolt]### Host voltage value is set.
14:31:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 614 ] 
14:31:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 615 ] 
14:31:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 616 ] 
14:31:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB480>, <py_sfcl.CommandDataDefinition object at 0x05DFBE40>) , Command count = 617 ] 
14:31:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB630>, <py_sfcl.CommandDataDefinition object at 0x05DFBEA0>) , Command count = 618 ] 
14:31:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:54: [ SetCardRCA(0x1, 0xD555) , Command count = 619 ] 
14:31:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:54: Host Frequency set to 25000 KHz
14:31:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:54: ####CSD Registe 2.0 Values####
14:31:54: CSD_STRUCTURE                                 :0x1
14:31:54: Reserv1                                       :0x0
14:31:54: Time Access 1 TAAC                            :0xe
14:31:54: Time Access 2 NSAC*100                        :0x0
14:31:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:54: Card Command Classess CCC                     :0x5b5
14:31:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:54: DSR(driver stage register)  DSR_IMP           :0x0
14:31:54: Reserv2                                       :0x0
14:31:54: Device Size C_SIZE                            :0xedc8
14:31:54: Reserv3                                       :0x0
14:31:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:54: Reserv4                                       :0x0
14:31:54: Write Speed Factor R2W_FACTOR                 :0x2
14:31:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:54: FILE_FORMAT_GRP                               :0x0
14:31:54: COPY flag                                     :0x1
14:31:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:54: File_Format                                   :0x0
14:31:54: CRC                                           :0x0
14:31:54: ####CSD Registe Values####  

14:31:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:54: [GetSCRRegisterEntry] Passed
14:31:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:54: Data_Status_After Erases          : 0
14:31:54: CPRM Security Support             : No Security
14:31:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:54: Spec. Version                     : Version 3.0X
14:31:54: Extended Security Support         : Extended_Security_Not_Supported
14:31:54: Command Support                   : COMMAND_SUPPORT
14:31:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF00>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 620 ] 
14:31:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA80>) , Command count = 621 ] 
14:31:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:54: [ SetBusWidth(0x4) , Command count = 622 ] 
14:31:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 623 ] 
14:31:54: Protected Area Size 0x28000
14:31:54: Bus Width           2
14:31:54: Secure Mode         0
14:31:54: Speed  Class        4
14:31:54: Perf Move           0
14:31:54: Au Size             9
14:31:54: Erase Size          15
14:31:54: Erase Timeout       1
14:31:54: Erase offset        1
14:31:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 624 ] 
14:31:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:54: Host Frequency set to 100000 KHz
14:31:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:54: ####CSD Registe 2.0 Values####
14:31:54: CSD_STRUCTURE                                 :0x1
14:31:54: Reserv1                                       :0x0
14:31:54: Time Access 1 TAAC                            :0xe
14:31:54: Time Access 2 NSAC*100                        :0x0
14:31:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:54: Card Command Classess CCC                     :0x5b5
14:31:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:54: DSR(driver stage register)  DSR_IMP           :0x0
14:31:54: Reserv2                                       :0x0
14:31:54: Device Size C_SIZE                            :0xedc8
14:31:54: Reserv3                                       :0x0
14:31:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:54: Reserv4                                       :0x0
14:31:55: Write Speed Factor R2W_FACTOR                 :0x2
14:31:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:55: FILE_FORMAT_GRP                               :0x0
14:31:55: COPY flag                                     :0x1
14:31:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:55: File_Format                                   :0x0
14:31:55: CRC                                           :0x0
14:31:55: ####CSD Registe Values####  

14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00270>, <py_sfcl.CommandDataDefinition object at 0x05DFB3C0>) , Command count = 625 ] 
14:31:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB9F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB4B0>) , Command count = 626 ] 
14:31:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB690>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBB40>, <None>, <py_sfcl.Command23 object at 0x05E0FB40>) , Command count = 627 ] 
14:31:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:57: Host Frequency set to 25000 KHz
14:31:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB1E0>, 0x0, True) , Command count = 628 ] 
14:31:57: [GO18_globalSetVolt]### Host voltage value is set.
14:31:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E003C0>, 0x0, False) , Command count = 629 ] 
14:31:57: [GO18_globalSetVolt]### Host voltage value is set.
14:31:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 630 ] 
14:31:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 631 ] 
14:31:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 632 ] 
14:31:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB780>, <py_sfcl.CommandDataDefinition object at 0x05E00450>) , Command count = 633 ] 
14:31:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB390>, <py_sfcl.CommandDataDefinition object at 0x05E00030>) , Command count = 634 ] 
14:31:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:57: [ SetCardRCA(0x1, 0xD555) , Command count = 635 ] 
14:31:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:57: Host Frequency set to 25000 KHz
14:31:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:57: ####CSD Registe 2.0 Values####
14:31:57: CSD_STRUCTURE                                 :0x1
14:31:57: Reserv1                                       :0x0
14:31:57: Time Access 1 TAAC                            :0xe
14:31:57: Time Access 2 NSAC*100                        :0x0
14:31:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:57: Card Command Classess CCC                     :0x5b5
14:31:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:57: DSR(driver stage register)  DSR_IMP           :0x0
14:31:57: Reserv2                                       :0x0
14:31:57: Device Size C_SIZE                            :0xedc8
14:31:57: Reserv3                                       :0x0
14:31:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:57: Reserv4                                       :0x0
14:31:57: Write Speed Factor R2W_FACTOR                 :0x2
14:31:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:57: FILE_FORMAT_GRP                               :0x0
14:31:57: COPY flag                                     :0x1
14:31:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:57: File_Format                                   :0x0
14:31:57: CRC                                           :0x0
14:31:57: ####CSD Registe Values####  

14:31:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:57: [GetSCRRegisterEntry] Passed
14:31:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:57: Data_Status_After Erases          : 0
14:31:57: CPRM Security Support             : No Security
14:31:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:57: Spec. Version                     : Version 3.0X
14:31:57: Extended Security Support         : Extended_Security_Not_Supported
14:31:57: Command Support                   : COMMAND_SUPPORT
14:31:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E006C0>, <py_sfcl.CommandDataDefinition object at 0x05E004E0>) , Command count = 636 ] 
14:31:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E007B0>, <py_sfcl.CommandDataDefinition object at 0x05E008D0>) , Command count = 637 ] 
14:31:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:57: [ SetBusWidth(0x4) , Command count = 638 ] 
14:31:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 639 ] 
14:31:57: Protected Area Size 0x28000
14:31:57: Bus Width           2
14:31:57: Secure Mode         0
14:31:57: Speed  Class        4
14:31:57: Perf Move           0
14:31:57: Au Size             9
14:31:57: Erase Size          15
14:31:57: Erase Timeout       1
14:31:57: Erase offset        1
14:31:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 640 ] 
14:31:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:58: Host Frequency set to 100000 KHz
14:31:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:58: ####CSD Registe 2.0 Values####
14:31:58: CSD_STRUCTURE                                 :0x1
14:31:58: Reserv1                                       :0x0
14:31:58: Time Access 1 TAAC                            :0xe
14:31:58: Time Access 2 NSAC*100                        :0x0
14:31:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:58: Card Command Classess CCC                     :0x5b5
14:31:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:58: DSR(driver stage register)  DSR_IMP           :0x0
14:31:58: Reserv2                                       :0x0
14:31:58: Device Size C_SIZE                            :0xedc8
14:31:58: Reserv3                                       :0x0
14:31:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:58: Reserv4                                       :0x0
14:31:58: Write Speed Factor R2W_FACTOR                 :0x2
14:31:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:58: FILE_FORMAT_GRP                               :0x0
14:31:58: COPY flag                                     :0x1
14:31:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:58: File_Format                                   :0x0
14:31:58: CRC                                           :0x0
14:31:58: ####CSD Registe Values####  

14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00930>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 641 ] 
14:31:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00240>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 642 ] 
14:31:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:31:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:31:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E002A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00510>, <None>, <py_sfcl.Command23 object at 0x05E00480>) , Command count = 643 ] 
14:31:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:31:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:00: Host Frequency set to 25000 KHz
14:32:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E000C0>, 0x0, True) , Command count = 644 ] 
14:32:00: [GO18_globalSetVolt]### Host voltage value is set.
14:32:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00A80>, 0x0, False) , Command count = 645 ] 
14:32:00: [GO18_globalSetVolt]### Host voltage value is set.
14:32:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 646 ] 
14:32:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 647 ] 
14:32:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 648 ] 
14:32:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB270>, <py_sfcl.CommandDataDefinition object at 0x05E00BD0>) , Command count = 649 ] 
14:32:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E005D0>) , Command count = 650 ] 
14:32:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:01: [ SetCardRCA(0x1, 0xD555) , Command count = 651 ] 
14:32:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:01: Host Frequency set to 25000 KHz
14:32:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:01: ####CSD Registe 2.0 Values####
14:32:01: CSD_STRUCTURE                                 :0x1
14:32:01: Reserv1                                       :0x0
14:32:01: Time Access 1 TAAC                            :0xe
14:32:01: Time Access 2 NSAC*100                        :0x0
14:32:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:01: Card Command Classess CCC                     :0x5b5
14:32:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:01: DSR(driver stage register)  DSR_IMP           :0x0
14:32:01: Reserv2                                       :0x0
14:32:01: Device Size C_SIZE                            :0xedc8
14:32:01: Reserv3                                       :0x0
14:32:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:01: Reserv4                                       :0x0
14:32:01: Write Speed Factor R2W_FACTOR                 :0x2
14:32:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:01: FILE_FORMAT_GRP                               :0x0
14:32:01: COPY flag                                     :0x1
14:32:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:01: File_Format                                   :0x0
14:32:01: CRC                                           :0x0
14:32:01: ####CSD Registe Values####  

14:32:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:01: [GetSCRRegisterEntry] Passed
14:32:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:01: Data_Status_After Erases          : 0
14:32:01: CPRM Security Support             : No Security
14:32:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:01: Spec. Version                     : Version 3.0X
14:32:01: Extended Security Support         : Extended_Security_Not_Supported
14:32:01: Command Support                   : COMMAND_SUPPORT
14:32:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00840>, <py_sfcl.CommandDataDefinition object at 0x05E008A0>) , Command count = 652 ] 
14:32:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B70>, <py_sfcl.CommandDataDefinition object at 0x05E003F0>) , Command count = 653 ] 
14:32:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:01: [ SetBusWidth(0x4) , Command count = 654 ] 
14:32:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 655 ] 
14:32:01: Protected Area Size 0x28000
14:32:01: Bus Width           2
14:32:01: Secure Mode         0
14:32:01: Speed  Class        4
14:32:01: Perf Move           0
14:32:01: Au Size             9
14:32:01: Erase Size          15
14:32:01: Erase Timeout       1
14:32:01: Erase offset        1
14:32:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 656 ] 
14:32:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:01: Host Frequency set to 100000 KHz
14:32:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:01: ####CSD Registe 2.0 Values####
14:32:01: CSD_STRUCTURE                                 :0x1
14:32:01: Reserv1                                       :0x0
14:32:01: Time Access 1 TAAC                            :0xe
14:32:01: Time Access 2 NSAC*100                        :0x0
14:32:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:01: Card Command Classess CCC                     :0x5b5
14:32:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:01: DSR(driver stage register)  DSR_IMP           :0x0
14:32:01: Reserv2                                       :0x0
14:32:01: Device Size C_SIZE                            :0xedc8
14:32:01: Reserv3                                       :0x0
14:32:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:01: Reserv4                                       :0x0
14:32:01: Write Speed Factor R2W_FACTOR                 :0x2
14:32:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:01: FILE_FORMAT_GRP                               :0x0
14:32:01: COPY flag                                     :0x1
14:32:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:01: File_Format                                   :0x0
14:32:01: CRC                                           :0x0
14:32:01: ####CSD Registe Values####  

14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04060>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 657 ] 
14:32:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00900>, <py_sfcl.CommandDataDefinition object at 0x05DFB210>) , Command count = 658 ] 
14:32:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F600>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F840>, <None>, <py_sfcl.Command23 object at 0x05E004B0>) , Command count = 659 ] 
14:32:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:04: Host Frequency set to 25000 KHz
14:32:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04150>, 0x0, True) , Command count = 660 ] 
14:32:04: [GO18_globalSetVolt]### Host voltage value is set.
14:32:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04180>, 0x0, False) , Command count = 661 ] 
14:32:04: [GO18_globalSetVolt]### Host voltage value is set.
14:32:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 662 ] 
14:32:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 663 ] 
14:32:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 664 ] 
14:32:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04120>, <py_sfcl.CommandDataDefinition object at 0x05E00C90>) , Command count = 665 ] 
14:32:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00720>, <py_sfcl.CommandDataDefinition object at 0x05E00CF0>) , Command count = 666 ] 
14:32:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:04: [ SetCardRCA(0x1, 0xD555) , Command count = 667 ] 
14:32:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:04: Host Frequency set to 25000 KHz
14:32:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:04: ####CSD Registe 2.0 Values####
14:32:04: CSD_STRUCTURE                                 :0x1
14:32:04: Reserv1                                       :0x0
14:32:04: Time Access 1 TAAC                            :0xe
14:32:04: Time Access 2 NSAC*100                        :0x0
14:32:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:04: Card Command Classess CCC                     :0x5b5
14:32:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:04: DSR(driver stage register)  DSR_IMP           :0x0
14:32:04: Reserv2                                       :0x0
14:32:04: Device Size C_SIZE                            :0xedc8
14:32:04: Reserv3                                       :0x0
14:32:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:04: Reserv4                                       :0x0
14:32:04: Write Speed Factor R2W_FACTOR                 :0x2
14:32:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:04: FILE_FORMAT_GRP                               :0x0
14:32:04: COPY flag                                     :0x1
14:32:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:04: File_Format                                   :0x0
14:32:04: CRC                                           :0x0
14:32:04: ####CSD Registe Values####  

14:32:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:04: [GetSCRRegisterEntry] Passed
14:32:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:04: Data_Status_After Erases          : 0
14:32:04: CPRM Security Support             : No Security
14:32:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:04: Spec. Version                     : Version 3.0X
14:32:04: Extended Security Support         : Extended_Security_Not_Supported
14:32:04: Command Support                   : COMMAND_SUPPORT
14:32:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04690>, <py_sfcl.CommandDataDefinition object at 0x05E00FC0>) , Command count = 668 ] 
14:32:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00600>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 669 ] 
14:32:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:04: [ SetBusWidth(0x4) , Command count = 670 ] 
14:32:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 671 ] 
14:32:04: Protected Area Size 0x28000
14:32:04: Bus Width           2
14:32:04: Secure Mode         0
14:32:04: Speed  Class        4
14:32:04: Perf Move           0
14:32:04: Au Size             9
14:32:04: Erase Size          15
14:32:04: Erase Timeout       1
14:32:04: Erase offset        1
14:32:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 672 ] 
14:32:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:04: Host Frequency set to 100000 KHz
14:32:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:04: ####CSD Registe 2.0 Values####
14:32:04: CSD_STRUCTURE                                 :0x1
14:32:04: Reserv1                                       :0x0
14:32:04: Time Access 1 TAAC                            :0xe
14:32:04: Time Access 2 NSAC*100                        :0x0
14:32:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:04: Card Command Classess CCC                     :0x5b5
14:32:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:04: DSR(driver stage register)  DSR_IMP           :0x0
14:32:04: Reserv2                                       :0x0
14:32:04: Device Size C_SIZE                            :0xedc8
14:32:04: Reserv3                                       :0x0
14:32:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:04: Reserv4                                       :0x0
14:32:05: Write Speed Factor R2W_FACTOR                 :0x2
14:32:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:05: FILE_FORMAT_GRP                               :0x0
14:32:05: COPY flag                                     :0x1
14:32:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:05: File_Format                                   :0x0
14:32:05: CRC                                           :0x0
14:32:05: ####CSD Registe Values####  

14:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046F0>, <py_sfcl.CommandDataDefinition object at 0x05E00C00>) , Command count = 673 ] 
14:32:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040C0>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 674 ] 
14:32:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00D80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00BA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00C60>, <None>, <py_sfcl.Command23 object at 0x05E0FD50>) , Command count = 675 ] 
14:32:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:07: Host Frequency set to 25000 KHz
14:32:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00E40>, 0x0, True) , Command count = 676 ] 
14:32:07: [GO18_globalSetVolt]### Host voltage value is set.
14:32:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04840>, 0x0, False) , Command count = 677 ] 
14:32:07: [GO18_globalSetVolt]### Host voltage value is set.
14:32:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 678 ] 
14:32:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 679 ] 
14:32:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 680 ] 
14:32:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D20>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 681 ] 
14:32:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05E04390>) , Command count = 682 ] 
14:32:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:07: [ SetCardRCA(0x1, 0xD555) , Command count = 683 ] 
14:32:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:08: Host Frequency set to 25000 KHz
14:32:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:08: ####CSD Registe 2.0 Values####
14:32:08: CSD_STRUCTURE                                 :0x1
14:32:08: Reserv1                                       :0x0
14:32:08: Time Access 1 TAAC                            :0xe
14:32:08: Time Access 2 NSAC*100                        :0x0
14:32:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:08: Card Command Classess CCC                     :0x5b5
14:32:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:08: DSR(driver stage register)  DSR_IMP           :0x0
14:32:08: Reserv2                                       :0x0
14:32:08: Device Size C_SIZE                            :0xedc8
14:32:08: Reserv3                                       :0x0
14:32:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:08: Reserv4                                       :0x0
14:32:08: Write Speed Factor R2W_FACTOR                 :0x2
14:32:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:08: FILE_FORMAT_GRP                               :0x0
14:32:08: COPY flag                                     :0x1
14:32:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:08: File_Format                                   :0x0
14:32:08: CRC                                           :0x0
14:32:08: ####CSD Registe Values####  

14:32:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:08: [GetSCRRegisterEntry] Passed
14:32:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:08: Data_Status_After Erases          : 0
14:32:08: CPRM Security Support             : No Security
14:32:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:08: Spec. Version                     : Version 3.0X
14:32:08: Extended Security Support         : Extended_Security_Not_Supported
14:32:08: Command Support                   : COMMAND_SUPPORT
14:32:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B40>, <py_sfcl.CommandDataDefinition object at 0x05E04960>) , Command count = 684 ] 
14:32:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04930>, <py_sfcl.CommandDataDefinition object at 0x05E041B0>) , Command count = 685 ] 
14:32:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:08: [ SetBusWidth(0x4) , Command count = 686 ] 
14:32:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E049F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 687 ] 
14:32:08: Protected Area Size 0x28000
14:32:08: Bus Width           2
14:32:08: Secure Mode         0
14:32:08: Speed  Class        4
14:32:08: Perf Move           0
14:32:08: Au Size             9
14:32:08: Erase Size          15
14:32:08: Erase Timeout       1
14:32:08: Erase offset        1
14:32:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 688 ] 
14:32:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:08: Host Frequency set to 100000 KHz
14:32:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:08: ####CSD Registe 2.0 Values####
14:32:08: CSD_STRUCTURE                                 :0x1
14:32:08: Reserv1                                       :0x0
14:32:08: Time Access 1 TAAC                            :0xe
14:32:08: Time Access 2 NSAC*100                        :0x0
14:32:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:08: Card Command Classess CCC                     :0x5b5
14:32:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:08: DSR(driver stage register)  DSR_IMP           :0x0
14:32:08: Reserv2                                       :0x0
14:32:08: Device Size C_SIZE                            :0xedc8
14:32:08: Reserv3                                       :0x0
14:32:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:08: Reserv4                                       :0x0
14:32:08: Write Speed Factor R2W_FACTOR                 :0x2
14:32:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:08: FILE_FORMAT_GRP                               :0x0
14:32:08: COPY flag                                     :0x1
14:32:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:08: File_Format                                   :0x0
14:32:08: CRC                                           :0x0
14:32:08: ####CSD Registe Values####  

14:32:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E049C0>) , Command count = 689 ] 
14:32:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046C0>, <py_sfcl.CommandDataDefinition object at 0x05E0FED0>) , Command count = 690 ] 
14:32:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F720>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F6C0>, <None>, <py_sfcl.Command23 object at 0x05E04810>) , Command count = 691 ] 
14:32:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:10: Host Frequency set to 25000 KHz
14:32:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04540>, 0x0, True) , Command count = 692 ] 
14:32:10: [GO18_globalSetVolt]### Host voltage value is set.
14:32:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F30>, 0x0, False) , Command count = 693 ] 
14:32:11: [GO18_globalSetVolt]### Host voltage value is set.
14:32:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 694 ] 
14:32:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 695 ] 
14:32:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 696 ] 
14:32:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A50>, <py_sfcl.CommandDataDefinition object at 0x05E04DE0>) , Command count = 697 ] 
14:32:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E044E0>, <py_sfcl.CommandDataDefinition object at 0x05E04AB0>) , Command count = 698 ] 
14:32:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:11: [ SetCardRCA(0x1, 0xD555) , Command count = 699 ] 
14:32:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:11: Host Frequency set to 25000 KHz
14:32:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:11: ####CSD Registe 2.0 Values####
14:32:11: CSD_STRUCTURE                                 :0x1
14:32:11: Reserv1                                       :0x0
14:32:11: Time Access 1 TAAC                            :0xe
14:32:11: Time Access 2 NSAC*100                        :0x0
14:32:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:11: Card Command Classess CCC                     :0x5b5
14:32:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:11: DSR(driver stage register)  DSR_IMP           :0x0
14:32:11: Reserv2                                       :0x0
14:32:11: Device Size C_SIZE                            :0xedc8
14:32:11: Reserv3                                       :0x0
14:32:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:11: Reserv4                                       :0x0
14:32:11: Write Speed Factor R2W_FACTOR                 :0x2
14:32:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:11: FILE_FORMAT_GRP                               :0x0
14:32:11: COPY flag                                     :0x1
14:32:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:11: File_Format                                   :0x0
14:32:11: CRC                                           :0x0
14:32:11: ####CSD Registe Values####  

14:32:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:11: [GetSCRRegisterEntry] Passed
14:32:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:11: Data_Status_After Erases          : 0
14:32:11: CPRM Security Support             : No Security
14:32:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:11: Spec. Version                     : Version 3.0X
14:32:11: Extended Security Support         : Extended_Security_Not_Supported
14:32:11: Command Support                   : COMMAND_SUPPORT
14:32:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07450>, <py_sfcl.CommandDataDefinition object at 0x05E04CC0>) , Command count = 700 ] 
14:32:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07330>, <py_sfcl.CommandDataDefinition object at 0x05E07270>) , Command count = 701 ] 
14:32:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:11: [ SetBusWidth(0x4) , Command count = 702 ] 
14:32:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 703 ] 
14:32:11: Protected Area Size 0x28000
14:32:11: Bus Width           2
14:32:11: Secure Mode         0
14:32:11: Speed  Class        4
14:32:11: Perf Move           0
14:32:11: Au Size             9
14:32:11: Erase Size          15
14:32:11: Erase Timeout       1
14:32:11: Erase offset        1
14:32:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 704 ] 
14:32:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:11: Host Frequency set to 100000 KHz
14:32:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:11: ####CSD Registe 2.0 Values####
14:32:11: CSD_STRUCTURE                                 :0x1
14:32:11: Reserv1                                       :0x0
14:32:11: Time Access 1 TAAC                            :0xe
14:32:11: Time Access 2 NSAC*100                        :0x0
14:32:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:11: Card Command Classess CCC                     :0x5b5
14:32:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:11: DSR(driver stage register)  DSR_IMP           :0x0
14:32:11: Reserv2                                       :0x0
14:32:11: Device Size C_SIZE                            :0xedc8
14:32:11: Reserv3                                       :0x0
14:32:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:11: Reserv4                                       :0x0
14:32:11: Write Speed Factor R2W_FACTOR                 :0x2
14:32:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:12: FILE_FORMAT_GRP                               :0x0
14:32:12: COPY flag                                     :0x1
14:32:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:12: File_Format                                   :0x0
14:32:12: CRC                                           :0x0
14:32:12: ####CSD Registe Values####  

14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E074B0>, <py_sfcl.CommandDataDefinition object at 0x05E04330>) , Command count = 705 ] 
14:32:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D80>, <py_sfcl.CommandDataDefinition object at 0x05E04600>) , Command count = 706 ] 
14:32:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E075D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04870>, <py_sfcl.PySEnhancedCmdData object at 0x05E04E40>, <None>, <py_sfcl.Command23 object at 0x05E0FE10>) , Command count = 707 ] 
14:32:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:14: Host Frequency set to 25000 KHz
14:32:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04C00>, 0x0, True) , Command count = 708 ] 
14:32:14: [GO18_globalSetVolt]### Host voltage value is set.
14:32:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07600>, 0x0, False) , Command count = 709 ] 
14:32:14: [GO18_globalSetVolt]### Host voltage value is set.
14:32:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 710 ] 
14:32:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 711 ] 
14:32:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 712 ] 
14:32:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04AE0>, <py_sfcl.CommandDataDefinition object at 0x05E07690>) , Command count = 713 ] 
14:32:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 714 ] 
14:32:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:14: [ SetCardRCA(0x1, 0xD555) , Command count = 715 ] 
14:32:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:14: Host Frequency set to 25000 KHz
14:32:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:14: ####CSD Registe 2.0 Values####
14:32:14: CSD_STRUCTURE                                 :0x1
14:32:14: Reserv1                                       :0x0
14:32:14: Time Access 1 TAAC                            :0xe
14:32:14: Time Access 2 NSAC*100                        :0x0
14:32:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:14: Card Command Classess CCC                     :0x5b5
14:32:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:14: DSR(driver stage register)  DSR_IMP           :0x0
14:32:14: Reserv2                                       :0x0
14:32:14: Device Size C_SIZE                            :0xedc8
14:32:14: Reserv3                                       :0x0
14:32:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:14: Reserv4                                       :0x0
14:32:14: Write Speed Factor R2W_FACTOR                 :0x2
14:32:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:14: FILE_FORMAT_GRP                               :0x0
14:32:14: COPY flag                                     :0x1
14:32:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:14: File_Format                                   :0x0
14:32:14: CRC                                           :0x0
14:32:14: ####CSD Registe Values####  

14:32:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:14: [GetSCRRegisterEntry] Passed
14:32:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:14: Data_Status_After Erases          : 0
14:32:14: CPRM Security Support             : No Security
14:32:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:14: Spec. Version                     : Version 3.0X
14:32:14: Extended Security Support         : Extended_Security_Not_Supported
14:32:14: Command Support                   : COMMAND_SUPPORT
14:32:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E073C0>, <py_sfcl.CommandDataDefinition object at 0x05E07420>) , Command count = 716 ] 
14:32:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07750>, <py_sfcl.CommandDataDefinition object at 0x05E076F0>) , Command count = 717 ] 
14:32:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:14: [ SetBusWidth(0x4) , Command count = 718 ] 
14:32:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E077B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 719 ] 
14:32:14: Protected Area Size 0x28000
14:32:14: Bus Width           2
14:32:14: Secure Mode         0
14:32:14: Speed  Class        4
14:32:14: Perf Move           0
14:32:14: Au Size             9
14:32:14: Erase Size          15
14:32:14: Erase Timeout       1
14:32:14: Erase offset        1
14:32:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 720 ] 
14:32:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:14: Host Frequency set to 100000 KHz
14:32:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:14: ####CSD Registe 2.0 Values####
14:32:14: CSD_STRUCTURE                                 :0x1
14:32:14: Reserv1                                       :0x0
14:32:14: Time Access 1 TAAC                            :0xe
14:32:15: Time Access 2 NSAC*100                        :0x0
14:32:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:15: Card Command Classess CCC                     :0x5b5
14:32:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:15: DSR(driver stage register)  DSR_IMP           :0x0
14:32:15: Reserv2                                       :0x0
14:32:15: Device Size C_SIZE                            :0xedc8
14:32:15: Reserv3                                       :0x0
14:32:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:15: Reserv4                                       :0x0
14:32:15: Write Speed Factor R2W_FACTOR                 :0x2
14:32:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:15: FILE_FORMAT_GRP                               :0x0
14:32:15: COPY flag                                     :0x1
14:32:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:15: File_Format                                   :0x0
14:32:15: CRC                                           :0x0
14:32:15: ####CSD Registe Values####  

14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B70>, <py_sfcl.CommandDataDefinition object at 0x05E07A50>) , Command count = 721 ] 
14:32:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07480>, <py_sfcl.CommandDataDefinition object at 0x05E04660>) , Command count = 722 ] 
14:32:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5AE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5A50>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5C00>, <None>, <py_sfcl.Command23 object at 0x05E0FF60>) , Command count = 723 ] 
14:32:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:17: Host Frequency set to 25000 KHz
14:32:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07300>, 0x0, True) , Command count = 724 ] 
14:32:17: [GO18_globalSetVolt]### Host voltage value is set.
14:32:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07CC0>, 0x0, False) , Command count = 725 ] 
14:32:17: [GO18_globalSetVolt]### Host voltage value is set.
14:32:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 726 ] 
14:32:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 727 ] 
14:32:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 728 ] 
14:32:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07810>, <py_sfcl.CommandDataDefinition object at 0x05E07E10>) , Command count = 729 ] 
14:32:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E072A0>, <py_sfcl.CommandDataDefinition object at 0x05E07840>) , Command count = 730 ] 
14:32:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:18: [ SetCardRCA(0x1, 0xD555) , Command count = 731 ] 
14:32:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:18: Host Frequency set to 25000 KHz
14:32:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:18: ####CSD Registe 2.0 Values####
14:32:18: CSD_STRUCTURE                                 :0x1
14:32:18: Reserv1                                       :0x0
14:32:18: Time Access 1 TAAC                            :0xe
14:32:18: Time Access 2 NSAC*100                        :0x0
14:32:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:18: Card Command Classess CCC                     :0x5b5
14:32:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:18: DSR(driver stage register)  DSR_IMP           :0x0
14:32:18: Reserv2                                       :0x0
14:32:18: Device Size C_SIZE                            :0xedc8
14:32:18: Reserv3                                       :0x0
14:32:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:18: Reserv4                                       :0x0
14:32:18: Write Speed Factor R2W_FACTOR                 :0x2
14:32:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:18: FILE_FORMAT_GRP                               :0x0
14:32:18: COPY flag                                     :0x1
14:32:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:18: File_Format                                   :0x0
14:32:18: CRC                                           :0x0
14:32:18: ####CSD Registe Values####  

14:32:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:18: [GetSCRRegisterEntry] Passed
14:32:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:18: Data_Status_After Erases          : 0
14:32:18: CPRM Security Support             : No Security
14:32:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:18: Spec. Version                     : Version 3.0X
14:32:18: Extended Security Support         : Extended_Security_Not_Supported
14:32:18: Command Support                   : COMMAND_SUPPORT
14:32:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07FC0>, <py_sfcl.CommandDataDefinition object at 0x05E07DE0>) , Command count = 732 ] 
14:32:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B0F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 733 ] 
14:32:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:18: [ SetBusWidth(0x4) , Command count = 734 ] 
14:32:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 735 ] 
14:32:18: Protected Area Size 0x28000
14:32:18: Bus Width           2
14:32:18: Secure Mode         0
14:32:18: Speed  Class        4
14:32:18: Perf Move           0
14:32:18: Au Size             9
14:32:18: Erase Size          15
14:32:18: Erase Timeout       1
14:32:18: Erase offset        1
14:32:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 736 ] 
14:32:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:18: Host Frequency set to 100000 KHz
14:32:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:18: ####CSD Registe 2.0 Values####
14:32:18: CSD_STRUCTURE                                 :0x1
14:32:18: Reserv1                                       :0x0
14:32:18: Time Access 1 TAAC                            :0xe
14:32:18: Time Access 2 NSAC*100                        :0x0
14:32:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:18: Card Command Classess CCC                     :0x5b5
14:32:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:18: DSR(driver stage register)  DSR_IMP           :0x0
14:32:18: Reserv2                                       :0x0
14:32:18: Device Size C_SIZE                            :0xedc8
14:32:18: Reserv3                                       :0x0
14:32:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:18: Reserv4                                       :0x0
14:32:18: Write Speed Factor R2W_FACTOR                 :0x2
14:32:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:18: FILE_FORMAT_GRP                               :0x0
14:32:18: COPY flag                                     :0x1
14:32:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:18: File_Format                                   :0x0
14:32:18: CRC                                           :0x0
14:32:18: ####CSD Registe Values####  

14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B270>, <py_sfcl.CommandDataDefinition object at 0x05E077B0>) , Command count = 737 ] 
14:32:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B40>, <py_sfcl.CommandDataDefinition object at 0x05E07DB0>) , Command count = 738 ] 
14:32:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:19: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07D80>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FF00>, <None>, <py_sfcl.Command23 object at 0x05E07C90>) , Command count = 739 ] 
14:32:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:21: Host Frequency set to 25000 KHz
14:32:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E079C0>, 0x0, True) , Command count = 740 ] 
14:32:21: [GO18_globalSetVolt]### Host voltage value is set.
14:32:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B3C0>, 0x0, False) , Command count = 741 ] 
14:32:21: [GO18_globalSetVolt]### Host voltage value is set.
14:32:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 742 ] 
14:32:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 743 ] 
14:32:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 744 ] 
14:32:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B450>) , Command count = 745 ] 
14:32:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E078A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B030>) , Command count = 746 ] 
14:32:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:21: [ SetCardRCA(0x1, 0xD555) , Command count = 747 ] 
14:32:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:21: Host Frequency set to 25000 KHz
14:32:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:21: ####CSD Registe 2.0 Values####
14:32:21: CSD_STRUCTURE                                 :0x1
14:32:21: Reserv1                                       :0x0
14:32:21: Time Access 1 TAAC                            :0xe
14:32:21: Time Access 2 NSAC*100                        :0x0
14:32:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:21: Card Command Classess CCC                     :0x5b5
14:32:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:21: DSR(driver stage register)  DSR_IMP           :0x0
14:32:21: Reserv2                                       :0x0
14:32:21: Device Size C_SIZE                            :0xedc8
14:32:21: Reserv3                                       :0x0
14:32:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:21: Reserv4                                       :0x0
14:32:21: Write Speed Factor R2W_FACTOR                 :0x2
14:32:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:21: FILE_FORMAT_GRP                               :0x0
14:32:21: COPY flag                                     :0x1
14:32:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:21: File_Format                                   :0x0
14:32:21: CRC                                           :0x0
14:32:21: ####CSD Registe Values####  

14:32:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:21: [GetSCRRegisterEntry] Passed
14:32:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:21: Data_Status_After Erases          : 0
14:32:21: CPRM Security Support             : No Security
14:32:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:21: Spec. Version                     : Version 3.0X
14:32:21: Extended Security Support         : Extended_Security_Not_Supported
14:32:21: Command Support                   : COMMAND_SUPPORT
14:32:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B180>, <py_sfcl.CommandDataDefinition object at 0x05E0B1E0>) , Command count = 748 ] 
14:32:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B8D0>) , Command count = 749 ] 
14:32:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:21: [ SetBusWidth(0x4) , Command count = 750 ] 
14:32:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 751 ] 
14:32:21: Protected Area Size 0x28000
14:32:21: Bus Width           2
14:32:21: Secure Mode         0
14:32:21: Speed  Class        4
14:32:21: Perf Move           0
14:32:21: Au Size             9
14:32:21: Erase Size          15
14:32:21: Erase Timeout       1
14:32:21: Erase offset        1
14:32:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 752 ] 
14:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:21: Host Frequency set to 100000 KHz
14:32:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:21: ####CSD Registe 2.0 Values####
14:32:21: CSD_STRUCTURE                                 :0x1
14:32:21: Reserv1                                       :0x0
14:32:21: Time Access 1 TAAC                            :0xe
14:32:21: Time Access 2 NSAC*100                        :0x0
14:32:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:21: Card Command Classess CCC                     :0x5b5
14:32:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:21: DSR(driver stage register)  DSR_IMP           :0x0
14:32:21: Reserv2                                       :0x0
14:32:21: Device Size C_SIZE                            :0xedc8
14:32:21: Reserv3                                       :0x0
14:32:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:21: Reserv4                                       :0x0
14:32:22: Write Speed Factor R2W_FACTOR                 :0x2
14:32:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:22: FILE_FORMAT_GRP                               :0x0
14:32:22: COPY flag                                     :0x1
14:32:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:22: File_Format                                   :0x0
14:32:22: CRC                                           :0x0
14:32:22: ####CSD Registe Values####  

14:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 753 ] 
14:32:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B240>, <py_sfcl.CommandDataDefinition object at 0x05E0B570>) , Command count = 754 ] 
14:32:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05144030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B510>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B4B0>, <None>, <py_sfcl.Command23 object at 0x05E0F780>) , Command count = 755 ] 
14:32:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:24: Host Frequency set to 25000 KHz
14:32:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B0C0>, 0x0, True) , Command count = 756 ] 
14:32:24: [GO18_globalSetVolt]### Host voltage value is set.
14:32:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x052177E0>, 0x0, False) , Command count = 757 ] 
14:32:24: [GO18_globalSetVolt]### Host voltage value is set.
14:32:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 758 ] 
14:32:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 759 ] 
14:32:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 760 ] 
14:32:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F60>, <py_sfcl.CommandDataDefinition object at 0x05E0BA80>) , Command count = 761 ] 
14:32:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F00>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 762 ] 
14:32:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:24: [ SetCardRCA(0x1, 0xD555) , Command count = 763 ] 
14:32:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:24: Host Frequency set to 25000 KHz
14:32:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:24: ####CSD Registe 2.0 Values####
14:32:24: CSD_STRUCTURE                                 :0x1
14:32:24: Reserv1                                       :0x0
14:32:24: Time Access 1 TAAC                            :0xe
14:32:24: Time Access 2 NSAC*100                        :0x0
14:32:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:24: Card Command Classess CCC                     :0x5b5
14:32:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:24: DSR(driver stage register)  DSR_IMP           :0x0
14:32:24: Reserv2                                       :0x0
14:32:24: Device Size C_SIZE                            :0xedc8
14:32:24: Reserv3                                       :0x0
14:32:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:24: Reserv4                                       :0x0
14:32:24: Write Speed Factor R2W_FACTOR                 :0x2
14:32:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:24: FILE_FORMAT_GRP                               :0x0
14:32:24: COPY flag                                     :0x1
14:32:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:24: File_Format                                   :0x0
14:32:24: CRC                                           :0x0
14:32:24: ####CSD Registe Values####  

14:32:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:24: [GetSCRRegisterEntry] Passed
14:32:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:24: Data_Status_After Erases          : 0
14:32:24: CPRM Security Support             : No Security
14:32:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:24: Spec. Version                     : Version 3.0X
14:32:24: Extended Security Support         : Extended_Security_Not_Supported
14:32:24: Command Support                   : COMMAND_SUPPORT
14:32:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B840>, <py_sfcl.CommandDataDefinition object at 0x05E0B8A0>) , Command count = 764 ] 
14:32:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F240>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 765 ] 
14:32:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:24: [ SetBusWidth(0x4) , Command count = 766 ] 
14:32:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 767 ] 
14:32:24: Protected Area Size 0x28000
14:32:24: Bus Width           2
14:32:24: Secure Mode         0
14:32:24: Speed  Class        4
14:32:24: Perf Move           0
14:32:24: Au Size             9
14:32:24: Erase Size          15
14:32:24: Erase Timeout       1
14:32:24: Erase offset        1
14:32:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 768 ] 
14:32:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:25: Host Frequency set to 100000 KHz
14:32:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:25: ####CSD Registe 2.0 Values####
14:32:25: CSD_STRUCTURE                                 :0x1
14:32:25: Reserv1                                       :0x0
14:32:25: Time Access 1 TAAC                            :0xe
14:32:25: Time Access 2 NSAC*100                        :0x0
14:32:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:25: Card Command Classess CCC                     :0x5b5
14:32:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:25: DSR(driver stage register)  DSR_IMP           :0x0
14:32:25: Reserv2                                       :0x0
14:32:25: Device Size C_SIZE                            :0xedc8
14:32:25: Reserv3                                       :0x0
14:32:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:25: Reserv4                                       :0x0
14:32:25: Write Speed Factor R2W_FACTOR                 :0x2
14:32:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:25: FILE_FORMAT_GRP                               :0x0
14:32:25: COPY flag                                     :0x1
14:32:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:25: File_Format                                   :0x0
14:32:25: CRC                                           :0x0
14:32:25: ####CSD Registe Values####  

14:32:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x0526DED0>) , Command count = 769 ] 
14:32:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B900>, <py_sfcl.CommandDataDefinition object at 0x05E0B690>) , Command count = 770 ] 
14:32:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FC60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B3F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B420>, <None>, <py_sfcl.Command23 object at 0x05E0B480>) , Command count = 771 ] 
14:32:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:27: Host Frequency set to 25000 KHz
14:32:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B780>, 0x0, True) , Command count = 772 ] 
14:32:27: [GO18_globalSetVolt]### Host voltage value is set.
14:32:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FEA0>, 0x0, False) , Command count = 773 ] 
14:32:27: [GO18_globalSetVolt]### Host voltage value is set.
14:32:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 774 ] 
14:32:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 775 ] 
14:32:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 776 ] 
14:32:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F120>, <py_sfcl.CommandDataDefinition object at 0x05E0BED0>) , Command count = 777 ] 
14:32:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B720>, <py_sfcl.CommandDataDefinition object at 0x05E0BB70>) , Command count = 778 ] 
14:32:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:28: [ SetCardRCA(0x1, 0xD555) , Command count = 779 ] 
14:32:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:28: Host Frequency set to 25000 KHz
14:32:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:28: ####CSD Registe 2.0 Values####
14:32:28: CSD_STRUCTURE                                 :0x1
14:32:28: Reserv1                                       :0x0
14:32:28: Time Access 1 TAAC                            :0xe
14:32:28: Time Access 2 NSAC*100                        :0x0
14:32:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:28: Card Command Classess CCC                     :0x5b5
14:32:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:28: DSR(driver stage register)  DSR_IMP           :0x0
14:32:28: Reserv2                                       :0x0
14:32:28: Device Size C_SIZE                            :0xedc8
14:32:28: Reserv3                                       :0x0
14:32:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:28: Reserv4                                       :0x0
14:32:28: Write Speed Factor R2W_FACTOR                 :0x2
14:32:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:28: FILE_FORMAT_GRP                               :0x0
14:32:28: COPY flag                                     :0x1
14:32:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:28: File_Format                                   :0x0
14:32:28: CRC                                           :0x0
14:32:28: ####CSD Registe Values####  

14:32:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:28: [GetSCRRegisterEntry] Passed
14:32:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:28: Data_Status_After Erases          : 0
14:32:28: CPRM Security Support             : No Security
14:32:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:28: Spec. Version                     : Version 3.0X
14:32:28: Extended Security Support         : Extended_Security_Not_Supported
14:32:28: Command Support                   : COMMAND_SUPPORT
14:32:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BE40>) , Command count = 780 ] 
14:32:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05E0BDE0>) , Command count = 781 ] 
14:32:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:28: [ SetBusWidth(0x4) , Command count = 782 ] 
14:32:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 783 ] 
14:32:28: Protected Area Size 0x28000
14:32:28: Bus Width           2
14:32:28: Secure Mode         0
14:32:28: Speed  Class        4
14:32:28: Perf Move           0
14:32:28: Au Size             9
14:32:28: Erase Size          15
14:32:28: Erase Timeout       1
14:32:28: Erase offset        1
14:32:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 784 ] 
14:32:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:28: Host Frequency set to 100000 KHz
14:32:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:28: ####CSD Registe 2.0 Values####
14:32:28: CSD_STRUCTURE                                 :0x1
14:32:28: Reserv1                                       :0x0
14:32:28: Time Access 1 TAAC                            :0xe
14:32:28: Time Access 2 NSAC*100                        :0x0
14:32:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:28: Card Command Classess CCC                     :0x5b5
14:32:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:28: DSR(driver stage register)  DSR_IMP           :0x0
14:32:28: Reserv2                                       :0x0
14:32:28: Device Size C_SIZE                            :0xedc8
14:32:28: Reserv3                                       :0x0
14:32:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:28: Reserv4                                       :0x0
14:32:28: Write Speed Factor R2W_FACTOR                 :0x2
14:32:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:28: FILE_FORMAT_GRP                               :0x0
14:32:28: COPY flag                                     :0x1
14:32:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:28: File_Format                                   :0x0
14:32:28: CRC                                           :0x0
14:32:28: ####CSD Registe Values####  

14:32:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E0BAB0>) , Command count = 785 ] 
14:32:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0514AE70>, <py_sfcl.CommandDataDefinition object at 0x05E0BC90>) , Command count = 786 ] 
14:32:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F090>, <None>, <py_sfcl.Command23 object at 0x05E0F120>) , Command count = 787 ] 
14:32:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:31: Host Frequency set to 25000 KHz
14:32:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F420>, 0x0, True) , Command count = 788 ] 
14:32:31: [GO18_globalSetVolt]### Host voltage value is set.
14:32:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F90>, 0x0, False) , Command count = 789 ] 
14:32:31: [GO18_globalSetVolt]### Host voltage value is set.
14:32:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 790 ] 
14:32:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 791 ] 
14:32:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 792 ] 
14:32:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B4E0>, <py_sfcl.CommandDataDefinition object at 0x05E0F2A0>) , Command count = 793 ] 
14:32:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF60>) , Command count = 794 ] 
14:32:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:31: [ SetCardRCA(0x1, 0xD555) , Command count = 795 ] 
14:32:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:31: Host Frequency set to 25000 KHz
14:32:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:31: ####CSD Registe 2.0 Values####
14:32:31: CSD_STRUCTURE                                 :0x1
14:32:31: Reserv1                                       :0x0
14:32:31: Time Access 1 TAAC                            :0xe
14:32:31: Time Access 2 NSAC*100                        :0x0
14:32:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:31: Card Command Classess CCC                     :0x5b5
14:32:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:31: DSR(driver stage register)  DSR_IMP           :0x0
14:32:31: Reserv2                                       :0x0
14:32:31: Device Size C_SIZE                            :0xedc8
14:32:31: Reserv3                                       :0x0
14:32:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:31: Reserv4                                       :0x0
14:32:31: Write Speed Factor R2W_FACTOR                 :0x2
14:32:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:31: FILE_FORMAT_GRP                               :0x0
14:32:31: COPY flag                                     :0x1
14:32:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:31: File_Format                                   :0x0
14:32:31: CRC                                           :0x0
14:32:31: ####CSD Registe Values####  

14:32:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:31: [GetSCRRegisterEntry] Passed
14:32:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:31: Data_Status_After Erases          : 0
14:32:31: CPRM Security Support             : No Security
14:32:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:31: Spec. Version                     : Version 3.0X
14:32:31: Extended Security Support         : Extended_Security_Not_Supported
14:32:31: Command Support                   : COMMAND_SUPPORT
14:32:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB10>) , Command count = 796 ] 
14:32:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FD80>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 797 ] 
14:32:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:31: [ SetBusWidth(0x4) , Command count = 798 ] 
14:32:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 799 ] 
14:32:31: Protected Area Size 0x28000
14:32:31: Bus Width           2
14:32:31: Secure Mode         0
14:32:31: Speed  Class        4
14:32:31: Perf Move           0
14:32:31: Au Size             9
14:32:31: Erase Size          15
14:32:31: Erase Timeout       1
14:32:31: Erase offset        1
14:32:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 800 ] 
14:32:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:31: Host Frequency set to 100000 KHz
14:32:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:31: ####CSD Registe 2.0 Values####
14:32:31: CSD_STRUCTURE                                 :0x1
14:32:31: Reserv1                                       :0x0
14:32:31: Time Access 1 TAAC                            :0xe
14:32:32: Time Access 2 NSAC*100                        :0x0
14:32:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:32: Card Command Classess CCC                     :0x5b5
14:32:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:32: DSR(driver stage register)  DSR_IMP           :0x0
14:32:32: Reserv2                                       :0x0
14:32:32: Device Size C_SIZE                            :0xedc8
14:32:32: Reserv3                                       :0x0
14:32:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:32: Reserv4                                       :0x0
14:32:32: Write Speed Factor R2W_FACTOR                 :0x2
14:32:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:32: FILE_FORMAT_GRP                               :0x0
14:32:32: COPY flag                                     :0x1
14:32:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:32: File_Format                                   :0x0
14:32:32: CRC                                           :0x0
14:32:32: ####CSD Registe Values####  

14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99C0>, <py_sfcl.CommandDataDefinition object at 0x05CEF030>) , Command count = 801 ] 
14:32:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0F480>) , Command count = 802 ] 
14:32:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B4E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B5A0>, <None>, <py_sfcl.Command23 object at 0x05E0F960>) , Command count = 803 ] 
14:32:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:34: Host Frequency set to 25000 KHz
14:32:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C90>, 0x0, True) , Command count = 804 ] 
14:32:34: [GO18_globalSetVolt]### Host voltage value is set.
14:32:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9C00>, 0x0, False) , Command count = 805 ] 
14:32:34: [GO18_globalSetVolt]### Host voltage value is set.
14:32:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 806 ] 
14:32:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 807 ] 
14:32:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 808 ] 
14:32:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF2D0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 809 ] 
14:32:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05E0BF90>) , Command count = 810 ] 
14:32:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:34: [ SetCardRCA(0x1, 0xD555) , Command count = 811 ] 
14:32:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:35: Host Frequency set to 25000 KHz
14:32:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:35: ####CSD Registe 2.0 Values####
14:32:35: CSD_STRUCTURE                                 :0x1
14:32:35: Reserv1                                       :0x0
14:32:35: Time Access 1 TAAC                            :0xe
14:32:35: Time Access 2 NSAC*100                        :0x0
14:32:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:35: Card Command Classess CCC                     :0x5b5
14:32:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:35: DSR(driver stage register)  DSR_IMP           :0x0
14:32:35: Reserv2                                       :0x0
14:32:35: Device Size C_SIZE                            :0xedc8
14:32:35: Reserv3                                       :0x0
14:32:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:35: Reserv4                                       :0x0
14:32:35: Write Speed Factor R2W_FACTOR                 :0x2
14:32:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:35: FILE_FORMAT_GRP                               :0x0
14:32:35: COPY flag                                     :0x1
14:32:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:35: File_Format                                   :0x0
14:32:35: CRC                                           :0x0
14:32:35: ####CSD Registe Values####  

14:32:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:35: [GetSCRRegisterEntry] Passed
14:32:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:35: Data_Status_After Erases          : 0
14:32:35: CPRM Security Support             : No Security
14:32:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:35: Spec. Version                     : Version 3.0X
14:32:35: Extended Security Support         : Extended_Security_Not_Supported
14:32:35: Command Support                   : COMMAND_SUPPORT
14:32:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF50C0>, <py_sfcl.CommandDataDefinition object at 0x05E0F060>) , Command count = 812 ] 
14:32:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F690>, <py_sfcl.CommandDataDefinition object at 0x05E0F420>) , Command count = 813 ] 
14:32:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:35: [ SetBusWidth(0x4) , Command count = 814 ] 
14:32:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 815 ] 
14:32:35: Protected Area Size 0x28000
14:32:35: Bus Width           2
14:32:35: Secure Mode         0
14:32:35: Speed  Class        4
14:32:35: Perf Move           0
14:32:35: Au Size             9
14:32:35: Erase Size          15
14:32:35: Erase Timeout       1
14:32:35: Erase offset        1
14:32:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 816 ] 
14:32:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:35: Host Frequency set to 100000 KHz
14:32:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:35: ####CSD Registe 2.0 Values####
14:32:35: CSD_STRUCTURE                                 :0x1
14:32:35: Reserv1                                       :0x0
14:32:35: Time Access 1 TAAC                            :0xe
14:32:35: Time Access 2 NSAC*100                        :0x0
14:32:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:35: Card Command Classess CCC                     :0x5b5
14:32:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:35: DSR(driver stage register)  DSR_IMP           :0x0
14:32:35: Reserv2                                       :0x0
14:32:35: Device Size C_SIZE                            :0xedc8
14:32:35: Reserv3                                       :0x0
14:32:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:35: Reserv4                                       :0x0
14:32:35: Write Speed Factor R2W_FACTOR                 :0x2
14:32:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:35: FILE_FORMAT_GRP                               :0x0
14:32:35: COPY flag                                     :0x1
14:32:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:35: File_Format                                   :0x0
14:32:35: CRC                                           :0x0
14:32:35: ####CSD Registe Values####  

14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B10>, <py_sfcl.CommandDataDefinition object at 0x05DF5570>) , Command count = 817 ] 
14:32:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F0C0>) , Command count = 818 ] 
14:32:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07060>, <py_sfcl.PySEnhancedCmdData object at 0x05E07120>, <None>, <py_sfcl.Command23 object at 0x05DE9ED0>) , Command count = 819 ] 
14:32:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:38: Host Frequency set to 25000 KHz
14:32:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF52D0>, 0x0, True) , Command count = 820 ] 
14:32:38: [GO18_globalSetVolt]### Host voltage value is set.
14:32:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5720>, 0x0, False) , Command count = 821 ] 
14:32:38: [GO18_globalSetVolt]### Host voltage value is set.
14:32:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 822 ] 
14:32:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 823 ] 
14:32:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 824 ] 
14:32:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5090>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 825 ] 
14:32:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 826 ] 
14:32:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:38: [ SetCardRCA(0x1, 0xD555) , Command count = 827 ] 
14:32:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:38: Host Frequency set to 25000 KHz
14:32:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:38: ####CSD Registe 2.0 Values####
14:32:38: CSD_STRUCTURE                                 :0x1
14:32:38: Reserv1                                       :0x0
14:32:38: Time Access 1 TAAC                            :0xe
14:32:38: Time Access 2 NSAC*100                        :0x0
14:32:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:38: Card Command Classess CCC                     :0x5b5
14:32:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:38: DSR(driver stage register)  DSR_IMP           :0x0
14:32:38: Reserv2                                       :0x0
14:32:38: Device Size C_SIZE                            :0xedc8
14:32:38: Reserv3                                       :0x0
14:32:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:38: Reserv4                                       :0x0
14:32:38: Write Speed Factor R2W_FACTOR                 :0x2
14:32:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:38: FILE_FORMAT_GRP                               :0x0
14:32:38: COPY flag                                     :0x1
14:32:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:38: File_Format                                   :0x0
14:32:38: CRC                                           :0x0
14:32:38: ####CSD Registe Values####  

14:32:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:38: [GetSCRRegisterEntry] Passed
14:32:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:38: Data_Status_After Erases          : 0
14:32:38: CPRM Security Support             : No Security
14:32:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:38: Spec. Version                     : Version 3.0X
14:32:38: Extended Security Support         : Extended_Security_Not_Supported
14:32:38: Command Support                   : COMMAND_SUPPORT
14:32:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5690>, <py_sfcl.CommandDataDefinition object at 0x05DF5240>) , Command count = 828 ] 
14:32:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C90>, <py_sfcl.CommandDataDefinition object at 0x05DF5510>) , Command count = 829 ] 
14:32:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:38: [ SetBusWidth(0x4) , Command count = 830 ] 
14:32:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 831 ] 
14:32:38: Protected Area Size 0x28000
14:32:38: Bus Width           2
14:32:38: Secure Mode         0
14:32:38: Speed  Class        4
14:32:38: Perf Move           0
14:32:38: Au Size             9
14:32:38: Erase Size          15
14:32:38: Erase Timeout       1
14:32:38: Erase offset        1
14:32:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 832 ] 
14:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:38: Host Frequency set to 100000 KHz
14:32:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:38: ####CSD Registe 2.0 Values####
14:32:38: CSD_STRUCTURE                                 :0x1
14:32:38: Reserv1                                       :0x0
14:32:38: Time Access 1 TAAC                            :0xe
14:32:38: Time Access 2 NSAC*100                        :0x0
14:32:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:38: Card Command Classess CCC                     :0x5b5
14:32:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:38: DSR(driver stage register)  DSR_IMP           :0x0
14:32:38: Reserv2                                       :0x0
14:32:38: Device Size C_SIZE                            :0xedc8
14:32:38: Reserv3                                       :0x0
14:32:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:38: Reserv4                                       :0x0
14:32:39: Write Speed Factor R2W_FACTOR                 :0x2
14:32:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:39: FILE_FORMAT_GRP                               :0x0
14:32:39: COPY flag                                     :0x1
14:32:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:39: File_Format                                   :0x0
14:32:39: CRC                                           :0x0
14:32:39: ####CSD Registe Values####  

14:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5ED0>, <py_sfcl.CommandDataDefinition object at 0x05DF57E0>) , Command count = 833 ] 
14:32:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF54B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F900>) , Command count = 834 ] 
14:32:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00F90>, <py_sfcl.PySEnhancedCmdData object at 0x05E00630>, <None>, <py_sfcl.Command23 object at 0x05DF58D0>) , Command count = 835 ] 
14:32:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:41: Host Frequency set to 25000 KHz
14:32:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF660>, 0x0, True) , Command count = 836 ] 
14:32:41: [GO18_globalSetVolt]### Host voltage value is set.
14:32:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBB10>, 0x0, False) , Command count = 837 ] 
14:32:41: [GO18_globalSetVolt]### Host voltage value is set.
14:32:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 838 ] 
14:32:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 839 ] 
14:32:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 840 ] 
14:32:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B40>, <py_sfcl.CommandDataDefinition object at 0x05DF5A80>) , Command count = 841 ] 
14:32:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF52A0>, <py_sfcl.CommandDataDefinition object at 0x05DF5930>) , Command count = 842 ] 
14:32:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:41: [ SetCardRCA(0x1, 0xD555) , Command count = 843 ] 
14:32:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:41: Host Frequency set to 25000 KHz
14:32:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:41: ####CSD Registe 2.0 Values####
14:32:41: CSD_STRUCTURE                                 :0x1
14:32:41: Reserv1                                       :0x0
14:32:41: Time Access 1 TAAC                            :0xe
14:32:41: Time Access 2 NSAC*100                        :0x0
14:32:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:41: Card Command Classess CCC                     :0x5b5
14:32:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:41: DSR(driver stage register)  DSR_IMP           :0x0
14:32:41: Reserv2                                       :0x0
14:32:41: Device Size C_SIZE                            :0xedc8
14:32:41: Reserv3                                       :0x0
14:32:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:41: Reserv4                                       :0x0
14:32:41: Write Speed Factor R2W_FACTOR                 :0x2
14:32:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:41: FILE_FORMAT_GRP                               :0x0
14:32:41: COPY flag                                     :0x1
14:32:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:41: File_Format                                   :0x0
14:32:41: CRC                                           :0x0
14:32:41: ####CSD Registe Values####  

14:32:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:41: [GetSCRRegisterEntry] Passed
14:32:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:41: Data_Status_After Erases          : 0
14:32:41: CPRM Security Support             : No Security
14:32:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:41: Spec. Version                     : Version 3.0X
14:32:41: Extended Security Support         : Extended_Security_Not_Supported
14:32:41: Command Support                   : COMMAND_SUPPORT
14:32:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB720>, <py_sfcl.CommandDataDefinition object at 0x05DF55D0>) , Command count = 844 ] 
14:32:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB750>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 845 ] 
14:32:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:42: [ SetBusWidth(0x4) , Command count = 846 ] 
14:32:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 847 ] 
14:32:42: Protected Area Size 0x28000
14:32:42: Bus Width           2
14:32:42: Secure Mode         0
14:32:42: Speed  Class        4
14:32:42: Perf Move           0
14:32:42: Au Size             9
14:32:42: Erase Size          15
14:32:42: Erase Timeout       1
14:32:42: Erase offset        1
14:32:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 848 ] 
14:32:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:42: Host Frequency set to 100000 KHz
14:32:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:42: ####CSD Registe 2.0 Values####
14:32:42: CSD_STRUCTURE                                 :0x1
14:32:42: Reserv1                                       :0x0
14:32:42: Time Access 1 TAAC                            :0xe
14:32:42: Time Access 2 NSAC*100                        :0x0
14:32:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:42: Card Command Classess CCC                     :0x5b5
14:32:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:42: DSR(driver stage register)  DSR_IMP           :0x0
14:32:42: Reserv2                                       :0x0
14:32:42: Device Size C_SIZE                            :0xedc8
14:32:42: Reserv3                                       :0x0
14:32:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:42: Reserv4                                       :0x0
14:32:42: Write Speed Factor R2W_FACTOR                 :0x2
14:32:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:42: FILE_FORMAT_GRP                               :0x0
14:32:42: COPY flag                                     :0x1
14:32:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:42: File_Format                                   :0x0
14:32:42: CRC                                           :0x0
14:32:42: ####CSD Registe Values####  

14:32:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5BA0>, <py_sfcl.CommandDataDefinition object at 0x05DFB570>) , Command count = 849 ] 
14:32:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55A0>, <py_sfcl.CommandDataDefinition object at 0x05E0F4E0>) , Command count = 850 ] 
14:32:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB5D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FD20>, <None>, <py_sfcl.Command23 object at 0x05DF5F60>) , Command count = 851 ] 
14:32:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:44: Host Frequency set to 25000 KHz
14:32:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5C60>, 0x0, True) , Command count = 852 ] 
14:32:44: [GO18_globalSetVolt]### Host voltage value is set.
14:32:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF57B0>, 0x0, False) , Command count = 853 ] 
14:32:44: [GO18_globalSetVolt]### Host voltage value is set.
14:32:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 854 ] 
14:32:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 855 ] 
14:32:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 856 ] 
14:32:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB030>, <py_sfcl.CommandDataDefinition object at 0x05DFB4E0>) , Command count = 857 ] 
14:32:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA50>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 858 ] 
14:32:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:45: [ SetCardRCA(0x1, 0xD555) , Command count = 859 ] 
14:32:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:45: Host Frequency set to 25000 KHz
14:32:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:45: ####CSD Registe 2.0 Values####
14:32:45: CSD_STRUCTURE                                 :0x1
14:32:45: Reserv1                                       :0x0
14:32:45: Time Access 1 TAAC                            :0xe
14:32:45: Time Access 2 NSAC*100                        :0x0
14:32:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:45: Card Command Classess CCC                     :0x5b5
14:32:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:45: DSR(driver stage register)  DSR_IMP           :0x0
14:32:45: Reserv2                                       :0x0
14:32:45: Device Size C_SIZE                            :0xedc8
14:32:45: Reserv3                                       :0x0
14:32:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:45: Reserv4                                       :0x0
14:32:45: Write Speed Factor R2W_FACTOR                 :0x2
14:32:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:45: FILE_FORMAT_GRP                               :0x0
14:32:45: COPY flag                                     :0x1
14:32:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:45: File_Format                                   :0x0
14:32:45: CRC                                           :0x0
14:32:45: ####CSD Registe Values####  

14:32:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:45: [GetSCRRegisterEntry] Passed
14:32:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:45: Data_Status_After Erases          : 0
14:32:45: CPRM Security Support             : No Security
14:32:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:45: Spec. Version                     : Version 3.0X
14:32:45: Extended Security Support         : Extended_Security_Not_Supported
14:32:45: Command Support                   : COMMAND_SUPPORT
14:32:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5BD0>, <py_sfcl.CommandDataDefinition object at 0x05DFB6F0>) , Command count = 860 ] 
14:32:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB70>, <py_sfcl.CommandDataDefinition object at 0x05E0F150>) , Command count = 861 ] 
14:32:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:45: [ SetBusWidth(0x4) , Command count = 862 ] 
14:32:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 863 ] 
14:32:45: Protected Area Size 0x28000
14:32:45: Bus Width           2
14:32:45: Secure Mode         0
14:32:45: Speed  Class        4
14:32:45: Perf Move           0
14:32:45: Au Size             9
14:32:45: Erase Size          15
14:32:45: Erase Timeout       1
14:32:45: Erase offset        1
14:32:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 864 ] 
14:32:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:45: Host Frequency set to 100000 KHz
14:32:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:45: ####CSD Registe 2.0 Values####
14:32:45: CSD_STRUCTURE                                 :0x1
14:32:45: Reserv1                                       :0x0
14:32:45: Time Access 1 TAAC                            :0xe
14:32:45: Time Access 2 NSAC*100                        :0x0
14:32:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:45: Card Command Classess CCC                     :0x5b5
14:32:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:45: DSR(driver stage register)  DSR_IMP           :0x0
14:32:45: Reserv2                                       :0x0
14:32:45: Device Size C_SIZE                            :0xedc8
14:32:45: Reserv3                                       :0x0
14:32:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:45: Reserv4                                       :0x0
14:32:45: Write Speed Factor R2W_FACTOR                 :0x2
14:32:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:45: FILE_FORMAT_GRP                               :0x0
14:32:45: COPY flag                                     :0x1
14:32:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:45: File_Format                                   :0x0
14:32:45: CRC                                           :0x0
14:32:45: ####CSD Registe Values####  

14:32:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 865 ] 
14:32:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB840>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 866 ] 
14:32:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEFB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05CEF7E0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB510>, <None>, <py_sfcl.Command23 object at 0x05E0F7B0>) , Command count = 867 ] 
14:32:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:48: Host Frequency set to 25000 KHz
14:32:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5FC0>, 0x0, True) , Command count = 868 ] 
14:32:48: [GO18_globalSetVolt]### Host voltage value is set.
14:32:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB480>, 0x0, False) , Command count = 869 ] 
14:32:48: [GO18_globalSetVolt]### Host voltage value is set.
14:32:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 870 ] 
14:32:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 871 ] 
14:32:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 872 ] 
14:32:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CC0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD50>) , Command count = 873 ] 
14:32:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5A0>, <py_sfcl.CommandDataDefinition object at 0x05DFBBD0>) , Command count = 874 ] 
14:32:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:48: [ SetCardRCA(0x1, 0xD555) , Command count = 875 ] 
14:32:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:48: Host Frequency set to 25000 KHz
14:32:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:48: ####CSD Registe 2.0 Values####
14:32:48: CSD_STRUCTURE                                 :0x1
14:32:48: Reserv1                                       :0x0
14:32:48: Time Access 1 TAAC                            :0xe
14:32:48: Time Access 2 NSAC*100                        :0x0
14:32:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:48: Card Command Classess CCC                     :0x5b5
14:32:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:48: DSR(driver stage register)  DSR_IMP           :0x0
14:32:48: Reserv2                                       :0x0
14:32:48: Device Size C_SIZE                            :0xedc8
14:32:48: Reserv3                                       :0x0
14:32:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:48: Reserv4                                       :0x0
14:32:48: Write Speed Factor R2W_FACTOR                 :0x2
14:32:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:48: FILE_FORMAT_GRP                               :0x0
14:32:48: COPY flag                                     :0x1
14:32:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:48: File_Format                                   :0x0
14:32:48: CRC                                           :0x0
14:32:48: ####CSD Registe Values####  

14:32:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:48: [GetSCRRegisterEntry] Passed
14:32:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:48: Data_Status_After Erases          : 0
14:32:48: CPRM Security Support             : No Security
14:32:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:48: Spec. Version                     : Version 3.0X
14:32:48: Extended Security Support         : Extended_Security_Not_Supported
14:32:48: Command Support                   : COMMAND_SUPPORT
14:32:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA80>) , Command count = 876 ] 
14:32:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00270>, <py_sfcl.CommandDataDefinition object at 0x05DFB3C0>) , Command count = 877 ] 
14:32:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:48: [ SetBusWidth(0x4) , Command count = 878 ] 
14:32:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 879 ] 
14:32:48: Protected Area Size 0x28000
14:32:48: Bus Width           2
14:32:48: Secure Mode         0
14:32:48: Speed  Class        4
14:32:48: Perf Move           0
14:32:48: Au Size             9
14:32:48: Erase Size          15
14:32:48: Erase Timeout       1
14:32:48: Erase offset        1
14:32:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 880 ] 
14:32:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:48: Host Frequency set to 100000 KHz
14:32:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:48: ####CSD Registe 2.0 Values####
14:32:48: CSD_STRUCTURE                                 :0x1
14:32:48: Reserv1                                       :0x0
14:32:48: Time Access 1 TAAC                            :0xe
14:32:48: Time Access 2 NSAC*100                        :0x0
14:32:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:48: Card Command Classess CCC                     :0x5b5
14:32:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:48: DSR(driver stage register)  DSR_IMP           :0x0
14:32:48: Reserv2                                       :0x0
14:32:48: Device Size C_SIZE                            :0xedc8
14:32:48: Reserv3                                       :0x0
14:32:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:48: Reserv4                                       :0x0
14:32:49: Write Speed Factor R2W_FACTOR                 :0x2
14:32:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:49: FILE_FORMAT_GRP                               :0x0
14:32:49: COPY flag                                     :0x1
14:32:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:49: File_Format                                   :0x0
14:32:49: CRC                                           :0x0
14:32:49: ####CSD Registe Values####  

14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E002D0>, <py_sfcl.CommandDataDefinition object at 0x05DFBCF0>) , Command count = 881 ] 
14:32:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB300>, <py_sfcl.CommandDataDefinition object at 0x05DFB540>) , Command count = 882 ] 
14:32:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E005A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F510>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F810>, <None>, <py_sfcl.Command23 object at 0x05E0F0F0>) , Command count = 883 ] 
14:32:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:51: Host Frequency set to 25000 KHz
14:32:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB9F0>, 0x0, True) , Command count = 884 ] 
14:32:51: [GO18_globalSetVolt]### Host voltage value is set.
14:32:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB780>, 0x0, False) , Command count = 885 ] 
14:32:51: [GO18_globalSetVolt]### Host voltage value is set.
14:32:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 886 ] 
14:32:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 887 ] 
14:32:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 888 ] 
14:32:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBAE0>, <py_sfcl.CommandDataDefinition object at 0x05E00030>) , Command count = 889 ] 
14:32:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC60>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 890 ] 
14:32:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:51: [ SetCardRCA(0x1, 0xD555) , Command count = 891 ] 
14:32:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:52: Host Frequency set to 25000 KHz
14:32:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:52: ####CSD Registe 2.0 Values####
14:32:52: CSD_STRUCTURE                                 :0x1
14:32:52: Reserv1                                       :0x0
14:32:52: Time Access 1 TAAC                            :0xe
14:32:52: Time Access 2 NSAC*100                        :0x0
14:32:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:52: Card Command Classess CCC                     :0x5b5
14:32:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:52: DSR(driver stage register)  DSR_IMP           :0x0
14:32:52: Reserv2                                       :0x0
14:32:52: Device Size C_SIZE                            :0xedc8
14:32:52: Reserv3                                       :0x0
14:32:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:52: Reserv4                                       :0x0
14:32:52: Write Speed Factor R2W_FACTOR                 :0x2
14:32:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:52: FILE_FORMAT_GRP                               :0x0
14:32:52: COPY flag                                     :0x1
14:32:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:52: File_Format                                   :0x0
14:32:52: CRC                                           :0x0
14:32:52: ####CSD Registe Values####  

14:32:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:52: [GetSCRRegisterEntry] Passed
14:32:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:52: Data_Status_After Erases          : 0
14:32:52: CPRM Security Support             : No Security
14:32:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:52: Spec. Version                     : Version 3.0X
14:32:52: Extended Security Support         : Extended_Security_Not_Supported
14:32:52: Command Support                   : COMMAND_SUPPORT
14:32:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E007B0>, <py_sfcl.CommandDataDefinition object at 0x05E008D0>) , Command count = 892 ] 
14:32:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00930>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 893 ] 
14:32:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:52: [ SetBusWidth(0x4) , Command count = 894 ] 
14:32:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E003C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 895 ] 
14:32:52: Protected Area Size 0x28000
14:32:52: Bus Width           2
14:32:52: Secure Mode         0
14:32:52: Speed  Class        4
14:32:52: Perf Move           0
14:32:52: Au Size             9
14:32:52: Erase Size          15
14:32:52: Erase Timeout       1
14:32:52: Erase offset        1
14:32:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 896 ] 
14:32:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:52: Host Frequency set to 100000 KHz
14:32:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:52: ####CSD Registe 2.0 Values####
14:32:52: CSD_STRUCTURE                                 :0x1
14:32:52: Reserv1                                       :0x0
14:32:52: Time Access 1 TAAC                            :0xe
14:32:52: Time Access 2 NSAC*100                        :0x0
14:32:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:52: Card Command Classess CCC                     :0x5b5
14:32:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:52: DSR(driver stage register)  DSR_IMP           :0x0
14:32:52: Reserv2                                       :0x0
14:32:52: Device Size C_SIZE                            :0xedc8
14:32:52: Reserv3                                       :0x0
14:32:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:52: Reserv4                                       :0x0
14:32:52: Write Speed Factor R2W_FACTOR                 :0x2
14:32:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:52: FILE_FORMAT_GRP                               :0x0
14:32:52: COPY flag                                     :0x1
14:32:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:52: File_Format                                   :0x0
14:32:52: CRC                                           :0x0
14:32:52: ####CSD Registe Values####  

14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00990>, <py_sfcl.CommandDataDefinition object at 0x05E000C0>) , Command count = 897 ] 
14:32:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBA0>, <py_sfcl.CommandDataDefinition object at 0x05E00390>) , Command count = 898 ] 
14:32:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00330>, <py_sfcl.PySEnhancedCmdData object at 0x05E00210>, <None>, <py_sfcl.Command23 object at 0x05E0FAE0>) , Command count = 899 ] 
14:32:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:54: Host Frequency set to 25000 KHz
14:32:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00240>, 0x0, True) , Command count = 900 ] 
14:32:54: [GO18_globalSetVolt]### Host voltage value is set.
14:32:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB270>, 0x0, False) , Command count = 901 ] 
14:32:55: [GO18_globalSetVolt]### Host voltage value is set.
14:32:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 902 ] 
14:32:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 903 ] 
14:32:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 904 ] 
14:32:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E007E0>, <py_sfcl.CommandDataDefinition object at 0x05E005D0>) , Command count = 905 ] 
14:32:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00690>, <py_sfcl.CommandDataDefinition object at 0x05E00180>) , Command count = 906 ] 
14:32:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:55: [ SetCardRCA(0x1, 0xD555) , Command count = 907 ] 
14:32:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:55: Host Frequency set to 25000 KHz
14:32:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:55: ####CSD Registe 2.0 Values####
14:32:55: CSD_STRUCTURE                                 :0x1
14:32:55: Reserv1                                       :0x0
14:32:55: Time Access 1 TAAC                            :0xe
14:32:55: Time Access 2 NSAC*100                        :0x0
14:32:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:55: Card Command Classess CCC                     :0x5b5
14:32:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:55: DSR(driver stage register)  DSR_IMP           :0x0
14:32:55: Reserv2                                       :0x0
14:32:55: Device Size C_SIZE                            :0xedc8
14:32:55: Reserv3                                       :0x0
14:32:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:55: Reserv4                                       :0x0
14:32:55: Write Speed Factor R2W_FACTOR                 :0x2
14:32:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:55: FILE_FORMAT_GRP                               :0x0
14:32:55: COPY flag                                     :0x1
14:32:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:55: File_Format                                   :0x0
14:32:55: CRC                                           :0x0
14:32:55: ####CSD Registe Values####  

14:32:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:55: [GetSCRRegisterEntry] Passed
14:32:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:55: Data_Status_After Erases          : 0
14:32:55: CPRM Security Support             : No Security
14:32:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:55: Spec. Version                     : Version 3.0X
14:32:55: Extended Security Support         : Extended_Security_Not_Supported
14:32:55: Command Support                   : COMMAND_SUPPORT
14:32:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB990>, <py_sfcl.CommandDataDefinition object at 0x05E00B70>) , Command count = 908 ] 
14:32:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04060>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 909 ] 
14:32:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:55: [ SetBusWidth(0x4) , Command count = 910 ] 
14:32:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 911 ] 
14:32:55: Protected Area Size 0x28000
14:32:55: Bus Width           2
14:32:55: Secure Mode         0
14:32:55: Speed  Class        4
14:32:55: Perf Move           0
14:32:55: Au Size             9
14:32:55: Erase Size          15
14:32:55: Erase Timeout       1
14:32:55: Erase offset        1
14:32:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 912 ] 
14:32:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:55: Host Frequency set to 100000 KHz
14:32:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:55: ####CSD Registe 2.0 Values####
14:32:55: CSD_STRUCTURE                                 :0x1
14:32:55: Reserv1                                       :0x0
14:32:55: Time Access 1 TAAC                            :0xe
14:32:55: Time Access 2 NSAC*100                        :0x0
14:32:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:55: Card Command Classess CCC                     :0x5b5
14:32:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:55: DSR(driver stage register)  DSR_IMP           :0x0
14:32:55: Reserv2                                       :0x0
14:32:55: Device Size C_SIZE                            :0xedc8
14:32:55: Reserv3                                       :0x0
14:32:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:55: Reserv4                                       :0x0
14:32:55: Write Speed Factor R2W_FACTOR                 :0x2
14:32:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:55: FILE_FORMAT_GRP                               :0x0
14:32:55: COPY flag                                     :0x1
14:32:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:55: File_Format                                   :0x0
14:32:55: CRC                                           :0x0
14:32:55: ####CSD Registe Values####  

14:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04240>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 913 ] 
14:32:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E042D0>, <py_sfcl.CommandDataDefinition object at 0x05E00510>) , Command count = 914 ] 
14:32:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E040F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00E10>, <py_sfcl.PySEnhancedCmdData object at 0x05E009F0>, <None>, <py_sfcl.Command23 object at 0x05E0FA80>) , Command count = 915 ] 
14:32:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:58: Host Frequency set to 25000 KHz
14:32:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB210>, 0x0, True) , Command count = 916 ] 
14:32:58: [GO18_globalSetVolt]### Host voltage value is set.
14:32:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04120>, 0x0, False) , Command count = 917 ] 
14:32:58: [GO18_globalSetVolt]### Host voltage value is set.
14:32:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 918 ] 
14:32:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 919 ] 
14:32:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 920 ] 
14:32:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00EA0>, <py_sfcl.CommandDataDefinition object at 0x05E00F60>) , Command count = 921 ] 
14:32:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00870>, <py_sfcl.CommandDataDefinition object at 0x05E00D50>) , Command count = 922 ] 
14:32:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:58: [ SetCardRCA(0x1, 0xD555) , Command count = 923 ] 
14:32:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:58: Host Frequency set to 25000 KHz
14:32:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:58: ####CSD Registe 2.0 Values####
14:32:58: CSD_STRUCTURE                                 :0x1
14:32:58: Reserv1                                       :0x0
14:32:58: Time Access 1 TAAC                            :0xe
14:32:58: Time Access 2 NSAC*100                        :0x0
14:32:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:58: Card Command Classess CCC                     :0x5b5
14:32:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:58: DSR(driver stage register)  DSR_IMP           :0x0
14:32:58: Reserv2                                       :0x0
14:32:58: Device Size C_SIZE                            :0xedc8
14:32:58: Reserv3                                       :0x0
14:32:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:58: Reserv4                                       :0x0
14:32:58: Write Speed Factor R2W_FACTOR                 :0x2
14:32:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:58: FILE_FORMAT_GRP                               :0x0
14:32:58: COPY flag                                     :0x1
14:32:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:58: File_Format                                   :0x0
14:32:58: CRC                                           :0x0
14:32:58: ####CSD Registe Values####  

14:32:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:58: [GetSCRRegisterEntry] Passed
14:32:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:58: Data_Status_After Erases          : 0
14:32:58: CPRM Security Support             : No Security
14:32:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:58: Spec. Version                     : Version 3.0X
14:32:58: Extended Security Support         : Extended_Security_Not_Supported
14:32:58: Command Support                   : COMMAND_SUPPORT
14:32:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00600>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 924 ] 
14:32:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00ED0>, <py_sfcl.CommandDataDefinition object at 0x05E00720>) , Command count = 925 ] 
14:32:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:58: [ SetBusWidth(0x4) , Command count = 926 ] 
14:32:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 927 ] 
14:32:58: Protected Area Size 0x28000
14:32:58: Bus Width           2
14:32:58: Secure Mode         0
14:32:58: Speed  Class        4
14:32:58: Perf Move           0
14:32:58: Au Size             9
14:32:58: Erase Size          15
14:32:58: Erase Timeout       1
14:32:58: Erase offset        1
14:32:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 928 ] 
14:32:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:58: Host Frequency set to 100000 KHz
14:32:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:58: ####CSD Registe 2.0 Values####
14:32:58: CSD_STRUCTURE                                 :0x1
14:32:58: Reserv1                                       :0x0
14:32:58: Time Access 1 TAAC                            :0xe
14:32:59: Time Access 2 NSAC*100                        :0x0
14:32:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:59: Card Command Classess CCC                     :0x5b5
14:32:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:59: DSR(driver stage register)  DSR_IMP           :0x0
14:32:59: Reserv2                                       :0x0
14:32:59: Device Size C_SIZE                            :0xedc8
14:32:59: Reserv3                                       :0x0
14:32:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:59: Reserv4                                       :0x0
14:32:59: Write Speed Factor R2W_FACTOR                 :0x2
14:32:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:59: FILE_FORMAT_GRP                               :0x0
14:32:59: COPY flag                                     :0x1
14:32:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:59: File_Format                                   :0x0
14:32:59: CRC                                           :0x0
14:32:59: ####CSD Registe Values####  

14:32:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04750>, <py_sfcl.CommandDataDefinition object at 0x05E04150>) , Command count = 929 ] 
14:32:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04210>, <py_sfcl.CommandDataDefinition object at 0x05E0FE40>) , Command count = 930 ] 
14:32:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:32:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:32:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F840>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F8A0>, <None>, <py_sfcl.Command23 object at 0x05E00A20>) , Command count = 931 ] 
14:32:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:32:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:01: Host Frequency set to 25000 KHz
14:33:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E001E0>, 0x0, True) , Command count = 932 ] 
14:33:01: [GO18_globalSetVolt]### Host voltage value is set.
14:33:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00D20>, 0x0, False) , Command count = 933 ] 
14:33:01: [GO18_globalSetVolt]### Host voltage value is set.
14:33:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 934 ] 
14:33:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 935 ] 
14:33:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 936 ] 
14:33:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045A0>, <py_sfcl.CommandDataDefinition object at 0x05E04390>) , Command count = 937 ] 
14:33:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04030>, <py_sfcl.CommandDataDefinition object at 0x05E04450>) , Command count = 938 ] 
14:33:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:01: [ SetCardRCA(0x1, 0xD555) , Command count = 939 ] 
14:33:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:02: Host Frequency set to 25000 KHz
14:33:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:02: ####CSD Registe 2.0 Values####
14:33:02: CSD_STRUCTURE                                 :0x1
14:33:02: Reserv1                                       :0x0
14:33:02: Time Access 1 TAAC                            :0xe
14:33:02: Time Access 2 NSAC*100                        :0x0
14:33:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:02: Card Command Classess CCC                     :0x5b5
14:33:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:02: DSR(driver stage register)  DSR_IMP           :0x0
14:33:02: Reserv2                                       :0x0
14:33:02: Device Size C_SIZE                            :0xedc8
14:33:02: Reserv3                                       :0x0
14:33:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:02: Reserv4                                       :0x0
14:33:02: Write Speed Factor R2W_FACTOR                 :0x2
14:33:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:02: FILE_FORMAT_GRP                               :0x0
14:33:02: COPY flag                                     :0x1
14:33:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:02: File_Format                                   :0x0
14:33:02: CRC                                           :0x0
14:33:02: ####CSD Registe Values####  

14:33:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:02: [GetSCRRegisterEntry] Passed
14:33:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:02: Data_Status_After Erases          : 0
14:33:02: CPRM Security Support             : No Security
14:33:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:02: Spec. Version                     : Version 3.0X
14:33:02: Extended Security Support         : Extended_Security_Not_Supported
14:33:02: Command Support                   : COMMAND_SUPPORT
14:33:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04930>, <py_sfcl.CommandDataDefinition object at 0x05E041B0>) , Command count = 940 ] 
14:33:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E049C0>) , Command count = 941 ] 
14:33:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:02: [ SetBusWidth(0x4) , Command count = 942 ] 
14:33:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 943 ] 
14:33:02: Protected Area Size 0x28000
14:33:02: Bus Width           2
14:33:02: Secure Mode         0
14:33:02: Speed  Class        4
14:33:02: Perf Move           0
14:33:02: Au Size             9
14:33:02: Erase Size          15
14:33:02: Erase Timeout       1
14:33:02: Erase offset        1
14:33:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 944 ] 
14:33:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:02: Host Frequency set to 100000 KHz
14:33:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:02: ####CSD Registe 2.0 Values####
14:33:02: CSD_STRUCTURE                                 :0x1
14:33:02: Reserv1                                       :0x0
14:33:02: Time Access 1 TAAC                            :0xe
14:33:02: Time Access 2 NSAC*100                        :0x0
14:33:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:02: Card Command Classess CCC                     :0x5b5
14:33:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:02: DSR(driver stage register)  DSR_IMP           :0x0
14:33:02: Reserv2                                       :0x0
14:33:02: Device Size C_SIZE                            :0xedc8
14:33:02: Reserv3                                       :0x0
14:33:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:02: Reserv4                                       :0x0
14:33:02: Write Speed Factor R2W_FACTOR                 :0x2
14:33:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:02: FILE_FORMAT_GRP                               :0x0
14:33:02: COPY flag                                     :0x1
14:33:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:02: File_Format                                   :0x0
14:33:02: CRC                                           :0x0
14:33:02: ####CSD Registe Values####  

14:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07030>, <py_sfcl.CommandDataDefinition object at 0x05E04540>) , Command count = 945 ] 
14:33:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E048D0>, <py_sfcl.CommandDataDefinition object at 0x05E043C0>) , Command count = 946 ] 
14:33:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FAB0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FD50>, <None>, <py_sfcl.Command23 object at 0x05E0FCC0>) , Command count = 947 ] 
14:33:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:05: Host Frequency set to 25000 KHz
14:33:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E046C0>, 0x0, True) , Command count = 948 ] 
14:33:05: [GO18_globalSetVolt]### Host voltage value is set.
14:33:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04A50>, 0x0, False) , Command count = 949 ] 
14:33:05: [GO18_globalSetVolt]### Host voltage value is set.
14:33:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 950 ] 
14:33:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 951 ] 
14:33:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 952 ] 
14:33:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C60>, <py_sfcl.CommandDataDefinition object at 0x05E04420>) , Command count = 953 ] 
14:33:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04630>, <py_sfcl.CommandDataDefinition object at 0x05E04B10>) , Command count = 954 ] 
14:33:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:05: [ SetCardRCA(0x1, 0xD555) , Command count = 955 ] 
14:33:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:05: Host Frequency set to 25000 KHz
14:33:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:05: ####CSD Registe 2.0 Values####
14:33:05: CSD_STRUCTURE                                 :0x1
14:33:05: Reserv1                                       :0x0
14:33:05: Time Access 1 TAAC                            :0xe
14:33:05: Time Access 2 NSAC*100                        :0x0
14:33:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:05: Card Command Classess CCC                     :0x5b5
14:33:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:05: DSR(driver stage register)  DSR_IMP           :0x0
14:33:05: Reserv2                                       :0x0
14:33:05: Device Size C_SIZE                            :0xedc8
14:33:05: Reserv3                                       :0x0
14:33:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:05: Reserv4                                       :0x0
14:33:05: Write Speed Factor R2W_FACTOR                 :0x2
14:33:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:05: FILE_FORMAT_GRP                               :0x0
14:33:05: COPY flag                                     :0x1
14:33:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:05: File_Format                                   :0x0
14:33:05: CRC                                           :0x0
14:33:05: ####CSD Registe Values####  

14:33:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:05: [GetSCRRegisterEntry] Passed
14:33:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:05: Data_Status_After Erases          : 0
14:33:05: CPRM Security Support             : No Security
14:33:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:05: Spec. Version                     : Version 3.0X
14:33:05: Extended Security Support         : Extended_Security_Not_Supported
14:33:05: Command Support                   : COMMAND_SUPPORT
14:33:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07330>, <py_sfcl.CommandDataDefinition object at 0x05E07270>) , Command count = 956 ] 
14:33:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E074B0>, <py_sfcl.CommandDataDefinition object at 0x05E04330>) , Command count = 957 ] 
14:33:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:05: [ SetBusWidth(0x4) , Command count = 958 ] 
14:33:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 959 ] 
14:33:05: Protected Area Size 0x28000
14:33:05: Bus Width           2
14:33:05: Secure Mode         0
14:33:05: Speed  Class        4
14:33:05: Perf Move           0
14:33:05: Au Size             9
14:33:05: Erase Size          15
14:33:05: Erase Timeout       1
14:33:05: Erase offset        1
14:33:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 960 ] 
14:33:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:05: Host Frequency set to 100000 KHz
14:33:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:05: ####CSD Registe 2.0 Values####
14:33:05: CSD_STRUCTURE                                 :0x1
14:33:05: Reserv1                                       :0x0
14:33:05: Time Access 1 TAAC                            :0xe
14:33:05: Time Access 2 NSAC*100                        :0x0
14:33:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:05: Card Command Classess CCC                     :0x5b5
14:33:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:05: DSR(driver stage register)  DSR_IMP           :0x0
14:33:05: Reserv2                                       :0x0
14:33:05: Device Size C_SIZE                            :0xedc8
14:33:05: Reserv3                                       :0x0
14:33:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:05: Reserv4                                       :0x0
14:33:05: Write Speed Factor R2W_FACTOR                 :0x2
14:33:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:06: FILE_FORMAT_GRP                               :0x0
14:33:06: COPY flag                                     :0x1
14:33:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:06: File_Format                                   :0x0
14:33:06: CRC                                           :0x0
14:33:06: ####CSD Registe Values####  

14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07510>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 961 ] 
14:33:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04FC0>, <py_sfcl.CommandDataDefinition object at 0x05E04EA0>) , Command count = 962 ] 
14:33:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E074E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04E10>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FCF0>, <None>, <py_sfcl.Command23 object at 0x05E0FEA0>) , Command count = 963 ] 
14:33:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:08: Host Frequency set to 25000 KHz
14:33:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04D80>, 0x0, True) , Command count = 964 ] 
14:33:08: [GO18_globalSetVolt]### Host voltage value is set.
14:33:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04AE0>, 0x0, False) , Command count = 965 ] 
14:33:08: [GO18_globalSetVolt]### Host voltage value is set.
14:33:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 966 ] 
14:33:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 967 ] 
14:33:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 968 ] 
14:33:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07360>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 969 ] 
14:33:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E070F0>, <py_sfcl.CommandDataDefinition object at 0x05E07210>) , Command count = 970 ] 
14:33:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:08: [ SetCardRCA(0x1, 0xD555) , Command count = 971 ] 
14:33:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:08: Host Frequency set to 25000 KHz
14:33:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:08: ####CSD Registe 2.0 Values####
14:33:08: CSD_STRUCTURE                                 :0x1
14:33:08: Reserv1                                       :0x0
14:33:08: Time Access 1 TAAC                            :0xe
14:33:08: Time Access 2 NSAC*100                        :0x0
14:33:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:08: Card Command Classess CCC                     :0x5b5
14:33:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:08: DSR(driver stage register)  DSR_IMP           :0x0
14:33:08: Reserv2                                       :0x0
14:33:08: Device Size C_SIZE                            :0xedc8
14:33:08: Reserv3                                       :0x0
14:33:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:08: Reserv4                                       :0x0
14:33:08: Write Speed Factor R2W_FACTOR                 :0x2
14:33:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:08: FILE_FORMAT_GRP                               :0x0
14:33:08: COPY flag                                     :0x1
14:33:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:08: File_Format                                   :0x0
14:33:08: CRC                                           :0x0
14:33:08: ####CSD Registe Values####  

14:33:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:08: [GetSCRRegisterEntry] Passed
14:33:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:08: Data_Status_After Erases          : 0
14:33:08: CPRM Security Support             : No Security
14:33:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:08: Spec. Version                     : Version 3.0X
14:33:08: Extended Security Support         : Extended_Security_Not_Supported
14:33:08: Command Support                   : COMMAND_SUPPORT
14:33:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CF0>, <py_sfcl.CommandDataDefinition object at 0x05E07750>) , Command count = 972 ] 
14:33:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07990>, <py_sfcl.CommandDataDefinition object at 0x05E07570>) , Command count = 973 ] 
14:33:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:08: [ SetBusWidth(0x4) , Command count = 974 ] 
14:33:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 975 ] 
14:33:08: Protected Area Size 0x28000
14:33:08: Bus Width           2
14:33:08: Secure Mode         0
14:33:08: Speed  Class        4
14:33:08: Perf Move           0
14:33:08: Au Size             9
14:33:08: Erase Size          15
14:33:08: Erase Timeout       1
14:33:08: Erase offset        1
14:33:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 976 ] 
14:33:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:09: Host Frequency set to 100000 KHz
14:33:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:09: ####CSD Registe 2.0 Values####
14:33:09: CSD_STRUCTURE                                 :0x1
14:33:09: Reserv1                                       :0x0
14:33:09: Time Access 1 TAAC                            :0xe
14:33:09: Time Access 2 NSAC*100                        :0x0
14:33:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:09: Card Command Classess CCC                     :0x5b5
14:33:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:09: DSR(driver stage register)  DSR_IMP           :0x0
14:33:09: Reserv2                                       :0x0
14:33:09: Device Size C_SIZE                            :0xedc8
14:33:09: Reserv3                                       :0x0
14:33:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:09: Reserv4                                       :0x0
14:33:09: Write Speed Factor R2W_FACTOR                 :0x2
14:33:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:09: FILE_FORMAT_GRP                               :0x0
14:33:09: COPY flag                                     :0x1
14:33:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:09: File_Format                                   :0x0
14:33:09: CRC                                           :0x0
14:33:09: ####CSD Registe Values####  

14:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07BD0>, <py_sfcl.CommandDataDefinition object at 0x05E07C00>) , Command count = 977 ] 
14:33:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E04E40>) , Command count = 978 ] 
14:33:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FE10>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F870>, <None>, <py_sfcl.Command23 object at 0x05E0F720>) , Command count = 979 ] 
14:33:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:11: Host Frequency set to 25000 KHz
14:33:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04660>, 0x0, True) , Command count = 980 ] 
14:33:11: [GO18_globalSetVolt]### Host voltage value is set.
14:33:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07810>, 0x0, False) , Command count = 981 ] 
14:33:11: [GO18_globalSetVolt]### Host voltage value is set.
14:33:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 982 ] 
14:33:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 983 ] 
14:33:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 984 ] 
14:33:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07A20>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 985 ] 
14:33:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E073F0>, <py_sfcl.CommandDataDefinition object at 0x05E078D0>) , Command count = 986 ] 
14:33:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:12: [ SetCardRCA(0x1, 0xD555) , Command count = 987 ] 
14:33:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:12: Host Frequency set to 25000 KHz
14:33:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:12: ####CSD Registe 2.0 Values####
14:33:12: CSD_STRUCTURE                                 :0x1
14:33:12: Reserv1                                       :0x0
14:33:12: Time Access 1 TAAC                            :0xe
14:33:12: Time Access 2 NSAC*100                        :0x0
14:33:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:12: Card Command Classess CCC                     :0x5b5
14:33:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:12: DSR(driver stage register)  DSR_IMP           :0x0
14:33:12: Reserv2                                       :0x0
14:33:12: Device Size C_SIZE                            :0xedc8
14:33:12: Reserv3                                       :0x0
14:33:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:12: Reserv4                                       :0x0
14:33:12: Write Speed Factor R2W_FACTOR                 :0x2
14:33:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:12: FILE_FORMAT_GRP                               :0x0
14:33:12: COPY flag                                     :0x1
14:33:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:12: File_Format                                   :0x0
14:33:12: CRC                                           :0x0
14:33:12: ####CSD Registe Values####  

14:33:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:12: [GetSCRRegisterEntry] Passed
14:33:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:12: Data_Status_After Erases          : 0
14:33:12: CPRM Security Support             : No Security
14:33:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:12: Spec. Version                     : Version 3.0X
14:33:12: Extended Security Support         : Extended_Security_Not_Supported
14:33:12: Command Support                   : COMMAND_SUPPORT
14:33:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B0F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 988 ] 
14:33:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B270>, <py_sfcl.CommandDataDefinition object at 0x05E077B0>) , Command count = 989 ] 
14:33:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:12: [ SetBusWidth(0x4) , Command count = 990 ] 
14:33:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 991 ] 
14:33:12: Protected Area Size 0x28000
14:33:12: Bus Width           2
14:33:12: Secure Mode         0
14:33:12: Speed  Class        4
14:33:12: Perf Move           0
14:33:12: Au Size             9
14:33:12: Erase Size          15
14:33:12: Erase Timeout       1
14:33:12: Erase offset        1
14:33:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 992 ] 
14:33:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:12: Host Frequency set to 100000 KHz
14:33:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:12: ####CSD Registe 2.0 Values####
14:33:12: CSD_STRUCTURE                                 :0x1
14:33:12: Reserv1                                       :0x0
14:33:12: Time Access 1 TAAC                            :0xe
14:33:12: Time Access 2 NSAC*100                        :0x0
14:33:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:12: Card Command Classess CCC                     :0x5b5
14:33:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:12: DSR(driver stage register)  DSR_IMP           :0x0
14:33:12: Reserv2                                       :0x0
14:33:12: Device Size C_SIZE                            :0xedc8
14:33:12: Reserv3                                       :0x0
14:33:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:12: Reserv4                                       :0x0
14:33:12: Write Speed Factor R2W_FACTOR                 :0x2
14:33:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:12: FILE_FORMAT_GRP                               :0x0
14:33:12: COPY flag                                     :0x1
14:33:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:12: File_Format                                   :0x0
14:33:12: CRC                                           :0x0
14:33:12: ####CSD Registe Values####  

14:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2D0>, <py_sfcl.CommandDataDefinition object at 0x05E07180>) , Command count = 993 ] 
14:33:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07D50>, <py_sfcl.CommandDataDefinition object at 0x05E07870>) , Command count = 994 ] 
14:33:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E072A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C60>, <None>, <py_sfcl.Command23 object at 0x05E0FE40>) , Command count = 995 ] 
14:33:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:15: Host Frequency set to 25000 KHz
14:33:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07B40>, 0x0, True) , Command count = 996 ] 
14:33:15: [GO18_globalSetVolt]### Host voltage value is set.
14:33:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07ED0>, 0x0, False) , Command count = 997 ] 
14:33:15: [GO18_globalSetVolt]### Host voltage value is set.
14:33:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 998 ] 
14:33:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 999 ] 
14:33:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1000 ] 
14:33:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F90>, <py_sfcl.CommandDataDefinition object at 0x05E0B030>) , Command count = 1001 ] 
14:33:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07AB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 1002 ] 
14:33:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1003 ] 
14:33:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:15: Host Frequency set to 25000 KHz
14:33:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:15: ####CSD Registe 2.0 Values####
14:33:15: CSD_STRUCTURE                                 :0x1
14:33:15: Reserv1                                       :0x0
14:33:15: Time Access 1 TAAC                            :0xe
14:33:15: Time Access 2 NSAC*100                        :0x0
14:33:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:15: Card Command Classess CCC                     :0x5b5
14:33:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:15: DSR(driver stage register)  DSR_IMP           :0x0
14:33:15: Reserv2                                       :0x0
14:33:15: Device Size C_SIZE                            :0xedc8
14:33:15: Reserv3                                       :0x0
14:33:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:15: Reserv4                                       :0x0
14:33:15: Write Speed Factor R2W_FACTOR                 :0x2
14:33:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:15: FILE_FORMAT_GRP                               :0x0
14:33:15: COPY flag                                     :0x1
14:33:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:15: File_Format                                   :0x0
14:33:15: CRC                                           :0x0
14:33:15: ####CSD Registe Values####  

14:33:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:15: [GetSCRRegisterEntry] Passed
14:33:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:15: Data_Status_After Erases          : 0
14:33:15: CPRM Security Support             : No Security
14:33:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:15: Spec. Version                     : Version 3.0X
14:33:15: Extended Security Support         : Extended_Security_Not_Supported
14:33:15: Command Support                   : COMMAND_SUPPORT
14:33:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B8D0>) , Command count = 1004 ] 
14:33:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 1005 ] 
14:33:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:15: [ SetBusWidth(0x4) , Command count = 1006 ] 
14:33:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1007 ] 
14:33:15: Protected Area Size 0x28000
14:33:15: Bus Width           2
14:33:15: Secure Mode         0
14:33:15: Speed  Class        4
14:33:15: Perf Move           0
14:33:15: Au Size             9
14:33:15: Erase Size          15
14:33:15: Erase Timeout       1
14:33:15: Erase offset        1
14:33:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1008 ] 
14:33:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:15: Host Frequency set to 100000 KHz
14:33:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:15: ####CSD Registe 2.0 Values####
14:33:15: CSD_STRUCTURE                                 :0x1
14:33:15: Reserv1                                       :0x0
14:33:15: Time Access 1 TAAC                            :0xe
14:33:16: Time Access 2 NSAC*100                        :0x0
14:33:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:16: Card Command Classess CCC                     :0x5b5
14:33:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:16: DSR(driver stage register)  DSR_IMP           :0x0
14:33:16: Reserv2                                       :0x0
14:33:16: Device Size C_SIZE                            :0xedc8
14:33:16: Reserv3                                       :0x0
14:33:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:16: Reserv4                                       :0x0
14:33:16: Write Speed Factor R2W_FACTOR                 :0x2
14:33:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:16: FILE_FORMAT_GRP                               :0x0
14:33:16: COPY flag                                     :0x1
14:33:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:16: File_Format                                   :0x0
14:33:16: CRC                                           :0x0
14:33:16: ####CSD Registe Values####  

14:33:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB40>, <py_sfcl.CommandDataDefinition object at 0x05E0B0C0>) , Command count = 1009 ] 
14:33:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B390>) , Command count = 1010 ] 
14:33:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B330>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B210>, <None>, <py_sfcl.Command23 object at 0x05E0F990>) , Command count = 1011 ] 
14:33:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:18: Host Frequency set to 25000 KHz
14:33:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B240>, 0x0, True) , Command count = 1012 ] 
14:33:18: [GO18_globalSetVolt]### Host voltage value is set.
14:33:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07F60>, 0x0, False) , Command count = 1013 ] 
14:33:18: [GO18_globalSetVolt]### Host voltage value is set.
14:33:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1014 ] 
14:33:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1015 ] 
14:33:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1016 ] 
14:33:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07AE0>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 1017 ] 
14:33:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07A80>, <py_sfcl.CommandDataDefinition object at 0x05E0B7E0>) , Command count = 1018 ] 
14:33:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1019 ] 
14:33:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:19: Host Frequency set to 25000 KHz
14:33:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:19: ####CSD Registe 2.0 Values####
14:33:19: CSD_STRUCTURE                                 :0x1
14:33:19: Reserv1                                       :0x0
14:33:19: Time Access 1 TAAC                            :0xe
14:33:19: Time Access 2 NSAC*100                        :0x0
14:33:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:19: Card Command Classess CCC                     :0x5b5
14:33:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:19: DSR(driver stage register)  DSR_IMP           :0x0
14:33:19: Reserv2                                       :0x0
14:33:19: Device Size C_SIZE                            :0xedc8
14:33:19: Reserv3                                       :0x0
14:33:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:19: Reserv4                                       :0x0
14:33:19: Write Speed Factor R2W_FACTOR                 :0x2
14:33:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:19: FILE_FORMAT_GRP                               :0x0
14:33:19: COPY flag                                     :0x1
14:33:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:19: File_Format                                   :0x0
14:33:19: CRC                                           :0x0
14:33:19: ####CSD Registe Values####  

14:33:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:19: [GetSCRRegisterEntry] Passed
14:33:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:19: Data_Status_After Erases          : 0
14:33:19: CPRM Security Support             : No Security
14:33:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:19: Spec. Version                     : Version 3.0X
14:33:19: Extended Security Support         : Extended_Security_Not_Supported
14:33:19: Command Support                   : COMMAND_SUPPORT
14:33:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F240>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 1020 ] 
14:33:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x0526DED0>) , Command count = 1021 ] 
14:33:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:19: [ SetBusWidth(0x4) , Command count = 1022 ] 
14:33:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1023 ] 
14:33:19: Protected Area Size 0x28000
14:33:19: Bus Width           2
14:33:19: Secure Mode         0
14:33:19: Speed  Class        4
14:33:19: Perf Move           0
14:33:19: Au Size             9
14:33:19: Erase Size          15
14:33:19: Erase Timeout       1
14:33:19: Erase offset        1
14:33:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1024 ] 
14:33:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:19: Host Frequency set to 100000 KHz
14:33:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:19: ####CSD Registe 2.0 Values####
14:33:19: CSD_STRUCTURE                                 :0x1
14:33:19: Reserv1                                       :0x0
14:33:19: Time Access 1 TAAC                            :0xe
14:33:19: Time Access 2 NSAC*100                        :0x0
14:33:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:19: Card Command Classess CCC                     :0x5b5
14:33:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:19: DSR(driver stage register)  DSR_IMP           :0x0
14:33:19: Reserv2                                       :0x0
14:33:19: Device Size C_SIZE                            :0xedc8
14:33:19: Reserv3                                       :0x0
14:33:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:19: Reserv4                                       :0x0
14:33:19: Write Speed Factor R2W_FACTOR                 :0x2
14:33:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:19: FILE_FORMAT_GRP                               :0x0
14:33:19: COPY flag                                     :0x1
14:33:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:19: File_Format                                   :0x0
14:33:19: CRC                                           :0x0
14:33:19: ####CSD Registe Values####  

14:33:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B780>) , Command count = 1025 ] 
14:33:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BA50>, <py_sfcl.CommandDataDefinition object at 0x05E0B4B0>) , Command count = 1026 ] 
14:33:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:19: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FF60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B9F0>, <None>, <py_sfcl.Command23 object at 0x05E0F7E0>) , Command count = 1027 ] 
14:33:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:22: Host Frequency set to 25000 KHz
14:33:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B900>, 0x0, True) , Command count = 1028 ] 
14:33:22: [GO18_globalSetVolt]### Host voltage value is set.
14:33:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F120>, 0x0, False) , Command count = 1029 ] 
14:33:22: [GO18_globalSetVolt]### Host voltage value is set.
14:33:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1030 ] 
14:33:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1031 ] 
14:33:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1032 ] 
14:33:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC30>, <py_sfcl.CommandDataDefinition object at 0x05E0BD20>) , Command count = 1033 ] 
14:33:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B870>, <py_sfcl.CommandDataDefinition object at 0x05E0BBD0>) , Command count = 1034 ] 
14:33:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1035 ] 
14:33:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:22: Host Frequency set to 25000 KHz
14:33:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:22: ####CSD Registe 2.0 Values####
14:33:22: CSD_STRUCTURE                                 :0x1
14:33:22: Reserv1                                       :0x0
14:33:22: Time Access 1 TAAC                            :0xe
14:33:22: Time Access 2 NSAC*100                        :0x0
14:33:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:22: Card Command Classess CCC                     :0x5b5
14:33:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:22: DSR(driver stage register)  DSR_IMP           :0x0
14:33:22: Reserv2                                       :0x0
14:33:22: Device Size C_SIZE                            :0xedc8
14:33:22: Reserv3                                       :0x0
14:33:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:22: Reserv4                                       :0x0
14:33:22: Write Speed Factor R2W_FACTOR                 :0x2
14:33:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:22: FILE_FORMAT_GRP                               :0x0
14:33:22: COPY flag                                     :0x1
14:33:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:22: File_Format                                   :0x0
14:33:22: CRC                                           :0x0
14:33:22: ####CSD Registe Values####  

14:33:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:22: [GetSCRRegisterEntry] Passed
14:33:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:22: Data_Status_After Erases          : 0
14:33:22: CPRM Security Support             : No Security
14:33:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:22: Spec. Version                     : Version 3.0X
14:33:22: Extended Security Support         : Extended_Security_Not_Supported
14:33:22: Command Support                   : COMMAND_SUPPORT
14:33:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05E0BDE0>) , Command count = 1036 ] 
14:33:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E0BAB0>) , Command count = 1037 ] 
14:33:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:22: [ SetBusWidth(0x4) , Command count = 1038 ] 
14:33:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1039 ] 
14:33:22: Protected Area Size 0x28000
14:33:22: Bus Width           2
14:33:22: Secure Mode         0
14:33:22: Speed  Class        4
14:33:22: Perf Move           0
14:33:22: Au Size             9
14:33:22: Erase Size          15
14:33:22: Erase Timeout       1
14:33:22: Erase offset        1
14:33:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1040 ] 
14:33:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:22: Host Frequency set to 100000 KHz
14:33:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:22: ####CSD Registe 2.0 Values####
14:33:22: CSD_STRUCTURE                                 :0x1
14:33:22: Reserv1                                       :0x0
14:33:22: Time Access 1 TAAC                            :0xe
14:33:22: Time Access 2 NSAC*100                        :0x0
14:33:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:22: Card Command Classess CCC                     :0x5b5
14:33:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:22: DSR(driver stage register)  DSR_IMP           :0x0
14:33:22: Reserv2                                       :0x0
14:33:22: Device Size C_SIZE                            :0xedc8
14:33:22: Reserv3                                       :0x0
14:33:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:22: Reserv4                                       :0x0
14:33:23: Write Speed Factor R2W_FACTOR                 :0x2
14:33:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:23: FILE_FORMAT_GRP                               :0x0
14:33:23: COPY flag                                     :0x1
14:33:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:23: File_Format                                   :0x0
14:33:23: CRC                                           :0x0
14:33:23: ####CSD Registe Values####  

14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF060>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 1041 ] 
14:33:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0521E030>, <py_sfcl.CommandDataDefinition object at 0x05E0B480>) , Command count = 1042 ] 
14:33:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B720>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BD50>, <None>, <py_sfcl.Command23 object at 0x05E0FE70>) , Command count = 1043 ] 
14:33:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:25: Host Frequency set to 25000 KHz
14:33:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0514AE70>, 0x0, True) , Command count = 1044 ] 
14:33:25: [GO18_globalSetVolt]### Host voltage value is set.
14:33:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527B4E0>, 0x0, False) , Command count = 1045 ] 
14:33:25: [GO18_globalSetVolt]### Host voltage value is set.
14:33:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1046 ] 
14:33:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1047 ] 
14:33:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1048 ] 
14:33:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF60>) , Command count = 1049 ] 
14:33:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0BCF0>) , Command count = 1050 ] 
14:33:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1051 ] 
14:33:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:25: Host Frequency set to 25000 KHz
14:33:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:25: ####CSD Registe 2.0 Values####
14:33:25: CSD_STRUCTURE                                 :0x1
14:33:25: Reserv1                                       :0x0
14:33:25: Time Access 1 TAAC                            :0xe
14:33:25: Time Access 2 NSAC*100                        :0x0
14:33:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:25: Card Command Classess CCC                     :0x5b5
14:33:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:25: DSR(driver stage register)  DSR_IMP           :0x0
14:33:25: Reserv2                                       :0x0
14:33:25: Device Size C_SIZE                            :0xedc8
14:33:25: Reserv3                                       :0x0
14:33:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:25: Reserv4                                       :0x0
14:33:25: Write Speed Factor R2W_FACTOR                 :0x2
14:33:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:25: FILE_FORMAT_GRP                               :0x0
14:33:25: COPY flag                                     :0x1
14:33:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:25: File_Format                                   :0x0
14:33:25: CRC                                           :0x0
14:33:25: ####CSD Registe Values####  

14:33:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:25: [GetSCRRegisterEntry] Passed
14:33:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:25: Data_Status_After Erases          : 0
14:33:25: CPRM Security Support             : No Security
14:33:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:25: Spec. Version                     : Version 3.0X
14:33:25: Extended Security Support         : Extended_Security_Not_Supported
14:33:25: Command Support                   : COMMAND_SUPPORT
14:33:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F450>, <py_sfcl.CommandDataDefinition object at 0x05E0FD80>) , Command count = 1052 ] 
14:33:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99C0>, <py_sfcl.CommandDataDefinition object at 0x05CEF030>) , Command count = 1053 ] 
14:33:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:25: [ SetBusWidth(0x4) , Command count = 1054 ] 
14:33:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1055 ] 
14:33:25: Protected Area Size 0x28000
14:33:25: Bus Width           2
14:33:25: Secure Mode         0
14:33:25: Speed  Class        4
14:33:25: Perf Move           0
14:33:25: Au Size             9
14:33:25: Erase Size          15
14:33:25: Erase Timeout       1
14:33:25: Erase offset        1
14:33:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1056 ] 
14:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:25: Host Frequency set to 100000 KHz
14:33:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:25: ####CSD Registe 2.0 Values####
14:33:25: CSD_STRUCTURE                                 :0x1
14:33:25: Reserv1                                       :0x0
14:33:25: Time Access 1 TAAC                            :0xe
14:33:26: Time Access 2 NSAC*100                        :0x0
14:33:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:26: Card Command Classess CCC                     :0x5b5
14:33:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:26: DSR(driver stage register)  DSR_IMP           :0x0
14:33:26: Reserv2                                       :0x0
14:33:26: Device Size C_SIZE                            :0xedc8
14:33:26: Reserv3                                       :0x0
14:33:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:26: Reserv4                                       :0x0
14:33:26: Write Speed Factor R2W_FACTOR                 :0x2
14:33:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:26: FILE_FORMAT_GRP                               :0x0
14:33:26: COPY flag                                     :0x1
14:33:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:26: File_Format                                   :0x0
14:33:26: CRC                                           :0x0
14:33:26: ####CSD Registe Values####  

14:33:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BDB0>, <py_sfcl.CommandDataDefinition object at 0x05281C90>) , Command count = 1057 ] 
14:33:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527BFC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F8D0>) , Command count = 1058 ] 
14:33:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F120>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FA20>, <None>, <py_sfcl.Command23 object at 0x05E0F9C0>) , Command count = 1059 ] 
14:33:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:28: Host Frequency set to 25000 KHz
14:33:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281E70>, 0x0, True) , Command count = 1060 ] 
14:33:28: [GO18_globalSetVolt]### Host voltage value is set.
14:33:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF2D0>, 0x0, False) , Command count = 1061 ] 
14:33:28: [GO18_globalSetVolt]### Host voltage value is set.
14:33:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1062 ] 
14:33:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1063 ] 
14:33:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1064 ] 
14:33:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05E0BF90>) , Command count = 1065 ] 
14:33:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281DE0>, <py_sfcl.CommandDataDefinition object at 0x05E0F5A0>) , Command count = 1066 ] 
14:33:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1067 ] 
14:33:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:29: Host Frequency set to 25000 KHz
14:33:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:29: ####CSD Registe 2.0 Values####
14:33:29: CSD_STRUCTURE                                 :0x1
14:33:29: Reserv1                                       :0x0
14:33:29: Time Access 1 TAAC                            :0xe
14:33:29: Time Access 2 NSAC*100                        :0x0
14:33:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:29: Card Command Classess CCC                     :0x5b5
14:33:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:29: DSR(driver stage register)  DSR_IMP           :0x0
14:33:29: Reserv2                                       :0x0
14:33:29: Device Size C_SIZE                            :0xedc8
14:33:29: Reserv3                                       :0x0
14:33:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:29: Reserv4                                       :0x0
14:33:29: Write Speed Factor R2W_FACTOR                 :0x2
14:33:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:29: FILE_FORMAT_GRP                               :0x0
14:33:29: COPY flag                                     :0x1
14:33:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:29: File_Format                                   :0x0
14:33:29: CRC                                           :0x0
14:33:29: ####CSD Registe Values####  

14:33:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:29: [GetSCRRegisterEntry] Passed
14:33:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:29: Data_Status_After Erases          : 0
14:33:29: CPRM Security Support             : No Security
14:33:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:29: Spec. Version                     : Version 3.0X
14:33:29: Extended Security Support         : Extended_Security_Not_Supported
14:33:29: Command Support                   : COMMAND_SUPPORT
14:33:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5150>, <py_sfcl.CommandDataDefinition object at 0x05E0F900>) , Command count = 1068 ] 
14:33:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F420>, <py_sfcl.CommandDataDefinition object at 0x05E0F480>) , Command count = 1069 ] 
14:33:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:29: [ SetBusWidth(0x4) , Command count = 1070 ] 
14:33:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1071 ] 
14:33:29: Protected Area Size 0x28000
14:33:29: Bus Width           2
14:33:29: Secure Mode         0
14:33:29: Speed  Class        4
14:33:29: Perf Move           0
14:33:29: Au Size             9
14:33:29: Erase Size          15
14:33:29: Erase Timeout       1
14:33:29: Erase offset        1
14:33:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1072 ] 
14:33:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:29: Host Frequency set to 100000 KHz
14:33:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:29: ####CSD Registe 2.0 Values####
14:33:29: CSD_STRUCTURE                                 :0x1
14:33:29: Reserv1                                       :0x0
14:33:29: Time Access 1 TAAC                            :0xe
14:33:29: Time Access 2 NSAC*100                        :0x0
14:33:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:29: Card Command Classess CCC                     :0x5b5
14:33:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:29: DSR(driver stage register)  DSR_IMP           :0x0
14:33:29: Reserv2                                       :0x0
14:33:29: Device Size C_SIZE                            :0xedc8
14:33:29: Reserv3                                       :0x0
14:33:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:29: Reserv4                                       :0x0
14:33:29: Write Speed Factor R2W_FACTOR                 :0x2
14:33:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:29: FILE_FORMAT_GRP                               :0x0
14:33:29: COPY flag                                     :0x1
14:33:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:29: File_Format                                   :0x0
14:33:29: CRC                                           :0x0
14:33:29: ####CSD Registe Values####  

14:33:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BFC0>) , Command count = 1073 ] 
14:33:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05E0FDE0>) , Command count = 1074 ] 
14:33:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F960>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FC00>, <None>, <py_sfcl.Command23 object at 0x05E0FB70>) , Command count = 1075 ] 
14:33:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:32: Host Frequency set to 25000 KHz
14:33:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE97B0>, 0x0, True) , Command count = 1076 ] 
14:33:32: [GO18_globalSetVolt]### Host voltage value is set.
14:33:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5090>, 0x0, False) , Command count = 1077 ] 
14:33:32: [GO18_globalSetVolt]### Host voltage value is set.
14:33:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1078 ] 
14:33:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1079 ] 
14:33:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1080 ] 
14:33:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5480>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 1081 ] 
14:33:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 1082 ] 
14:33:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1083 ] 
14:33:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:32: Host Frequency set to 25000 KHz
14:33:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:32: ####CSD Registe 2.0 Values####
14:33:32: CSD_STRUCTURE                                 :0x1
14:33:32: Reserv1                                       :0x0
14:33:32: Time Access 1 TAAC                            :0xe
14:33:32: Time Access 2 NSAC*100                        :0x0
14:33:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:32: Card Command Classess CCC                     :0x5b5
14:33:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:32: DSR(driver stage register)  DSR_IMP           :0x0
14:33:32: Reserv2                                       :0x0
14:33:32: Device Size C_SIZE                            :0xedc8
14:33:32: Reserv3                                       :0x0
14:33:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:32: Reserv4                                       :0x0
14:33:32: Write Speed Factor R2W_FACTOR                 :0x2
14:33:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:32: FILE_FORMAT_GRP                               :0x0
14:33:32: COPY flag                                     :0x1
14:33:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:32: File_Format                                   :0x0
14:33:32: CRC                                           :0x0
14:33:32: ####CSD Registe Values####  

14:33:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:32: [GetSCRRegisterEntry] Passed
14:33:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:32: Data_Status_After Erases          : 0
14:33:32: CPRM Security Support             : No Security
14:33:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:32: Spec. Version                     : Version 3.0X
14:33:32: Extended Security Support         : Extended_Security_Not_Supported
14:33:32: Command Support                   : COMMAND_SUPPORT
14:33:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C90>, <py_sfcl.CommandDataDefinition object at 0x05DF5510>) , Command count = 1084 ] 
14:33:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F330>, <py_sfcl.CommandDataDefinition object at 0x05E0FDE0>) , Command count = 1085 ] 
14:33:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:32: [ SetBusWidth(0x4) , Command count = 1086 ] 
14:33:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1087 ] 
14:33:32: Protected Area Size 0x28000
14:33:32: Bus Width           2
14:33:32: Secure Mode         0
14:33:32: Speed  Class        4
14:33:32: Perf Move           0
14:33:32: Au Size             9
14:33:32: Erase Size          15
14:33:32: Erase Timeout       1
14:33:32: Erase offset        1
14:33:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1088 ] 
14:33:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:32: Host Frequency set to 100000 KHz
14:33:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:32: ####CSD Registe 2.0 Values####
14:33:32: CSD_STRUCTURE                                 :0x1
14:33:32: Reserv1                                       :0x0
14:33:32: Time Access 1 TAAC                            :0xe
14:33:32: Time Access 2 NSAC*100                        :0x0
14:33:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:32: Card Command Classess CCC                     :0x5b5
14:33:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:32: DSR(driver stage register)  DSR_IMP           :0x0
14:33:32: Reserv2                                       :0x0
14:33:32: Device Size C_SIZE                            :0xedc8
14:33:32: Reserv3                                       :0x0
14:33:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:32: Reserv4                                       :0x0
14:33:33: Write Speed Factor R2W_FACTOR                 :0x2
14:33:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:33: FILE_FORMAT_GRP                               :0x0
14:33:33: COPY flag                                     :0x1
14:33:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:33: File_Format                                   :0x0
14:33:33: CRC                                           :0x0
14:33:33: ####CSD Registe Values####  

14:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DB0>, <py_sfcl.CommandDataDefinition object at 0x05DF5600>) , Command count = 1089 ] 
14:33:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05E0F330>) , Command count = 1090 ] 
14:33:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F240>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F9F0>, <None>, <py_sfcl.Command23 object at 0x05E0F270>) , Command count = 1091 ] 
14:33:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:35: Host Frequency set to 25000 KHz
14:33:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF54B0>, 0x0, True) , Command count = 1092 ] 
14:33:35: [GO18_globalSetVolt]### Host voltage value is set.
14:33:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5B40>, 0x0, False) , Command count = 1093 ] 
14:33:35: [GO18_globalSetVolt]### Host voltage value is set.
14:33:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1094 ] 
14:33:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1095 ] 
14:33:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1096 ] 
14:33:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9810>, <py_sfcl.CommandDataDefinition object at 0x05DF5C30>) , Command count = 1097 ] 
14:33:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5120>, <py_sfcl.CommandDataDefinition object at 0x05DF5F30>) , Command count = 1098 ] 
14:33:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1099 ] 
14:33:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:36: Host Frequency set to 25000 KHz
14:33:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:36: ####CSD Registe 2.0 Values####
14:33:36: CSD_STRUCTURE                                 :0x1
14:33:36: Reserv1                                       :0x0
14:33:36: Time Access 1 TAAC                            :0xe
14:33:36: Time Access 2 NSAC*100                        :0x0
14:33:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:36: Card Command Classess CCC                     :0x5b5
14:33:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:36: DSR(driver stage register)  DSR_IMP           :0x0
14:33:36: Reserv2                                       :0x0
14:33:36: Device Size C_SIZE                            :0xedc8
14:33:36: Reserv3                                       :0x0
14:33:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:36: Reserv4                                       :0x0
14:33:36: Write Speed Factor R2W_FACTOR                 :0x2
14:33:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:36: FILE_FORMAT_GRP                               :0x0
14:33:36: COPY flag                                     :0x1
14:33:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:36: File_Format                                   :0x0
14:33:36: CRC                                           :0x0
14:33:36: ####CSD Registe Values####  

14:33:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:36: [GetSCRRegisterEntry] Passed
14:33:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:36: Data_Status_After Erases          : 0
14:33:36: CPRM Security Support             : No Security
14:33:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:36: Spec. Version                     : Version 3.0X
14:33:36: Extended Security Support         : Extended_Security_Not_Supported
14:33:36: Command Support                   : COMMAND_SUPPORT
14:33:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB750>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 1100 ] 
14:33:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB570>, <py_sfcl.CommandDataDefinition object at 0x05DF5BA0>) , Command count = 1101 ] 
14:33:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:36: [ SetBusWidth(0x4) , Command count = 1102 ] 
14:33:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1103 ] 
14:33:36: Protected Area Size 0x28000
14:33:36: Bus Width           2
14:33:36: Secure Mode         0
14:33:36: Speed  Class        4
14:33:36: Perf Move           0
14:33:36: Au Size             9
14:33:36: Erase Size          15
14:33:36: Erase Timeout       1
14:33:36: Erase offset        1
14:33:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1104 ] 
14:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:36: Host Frequency set to 100000 KHz
14:33:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:36: ####CSD Registe 2.0 Values####
14:33:36: CSD_STRUCTURE                                 :0x1
14:33:36: Reserv1                                       :0x0
14:33:36: Time Access 1 TAAC                            :0xe
14:33:36: Time Access 2 NSAC*100                        :0x0
14:33:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:36: Card Command Classess CCC                     :0x5b5
14:33:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:36: DSR(driver stage register)  DSR_IMP           :0x0
14:33:36: Reserv2                                       :0x0
14:33:36: Device Size C_SIZE                            :0xedc8
14:33:36: Reserv3                                       :0x0
14:33:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:36: Reserv4                                       :0x0
14:33:36: Write Speed Factor R2W_FACTOR                 :0x2
14:33:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:36: FILE_FORMAT_GRP                               :0x0
14:33:36: COPY flag                                     :0x1
14:33:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:36: File_Format                                   :0x0
14:33:36: CRC                                           :0x0
14:33:36: ####CSD Registe Values####  

14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05DF5D50>) , Command count = 1105 ] 
14:33:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DF5720>) , Command count = 1106 ] 
14:33:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:36: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F0C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F750>, <None>, <py_sfcl.Command23 object at 0x05E0FC90>) , Command count = 1107 ] 
14:33:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:39: Host Frequency set to 25000 KHz
14:33:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF55A0>, 0x0, True) , Command count = 1108 ] 
14:33:39: [GO18_globalSetVolt]### Host voltage value is set.
14:33:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB030>, 0x0, False) , Command count = 1109 ] 
14:33:39: [GO18_globalSetVolt]### Host voltage value is set.
14:33:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1110 ] 
14:33:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1111 ] 
14:33:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1112 ] 
14:33:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBD80>, <py_sfcl.CommandDataDefinition object at 0x05DFB600>) , Command count = 1113 ] 
14:33:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DE0>, <py_sfcl.CommandDataDefinition object at 0x05DFB6F0>) , Command count = 1114 ] 
14:33:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1115 ] 
14:33:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:39: Host Frequency set to 25000 KHz
14:33:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:39: ####CSD Registe 2.0 Values####
14:33:39: CSD_STRUCTURE                                 :0x1
14:33:39: Reserv1                                       :0x0
14:33:39: Time Access 1 TAAC                            :0xe
14:33:39: Time Access 2 NSAC*100                        :0x0
14:33:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:39: Card Command Classess CCC                     :0x5b5
14:33:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:39: DSR(driver stage register)  DSR_IMP           :0x0
14:33:39: Reserv2                                       :0x0
14:33:39: Device Size C_SIZE                            :0xedc8
14:33:39: Reserv3                                       :0x0
14:33:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:39: Reserv4                                       :0x0
14:33:39: Write Speed Factor R2W_FACTOR                 :0x2
14:33:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:39: FILE_FORMAT_GRP                               :0x0
14:33:39: COPY flag                                     :0x1
14:33:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:39: File_Format                                   :0x0
14:33:39: CRC                                           :0x0
14:33:39: ####CSD Registe Values####  

14:33:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:39: [GetSCRRegisterEntry] Passed
14:33:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:39: Data_Status_After Erases          : 0
14:33:39: CPRM Security Support             : No Security
14:33:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:39: Spec. Version                     : Version 3.0X
14:33:39: Extended Security Support         : Extended_Security_Not_Supported
14:33:39: Command Support                   : COMMAND_SUPPORT
14:33:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB70>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 1116 ] 
14:33:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 1117 ] 
14:33:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:39: [ SetBusWidth(0x4) , Command count = 1118 ] 
14:33:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF57B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1119 ] 
14:33:39: Protected Area Size 0x28000
14:33:39: Bus Width           2
14:33:39: Secure Mode         0
14:33:39: Speed  Class        4
14:33:39: Perf Move           0
14:33:39: Au Size             9
14:33:39: Erase Size          15
14:33:39: Erase Timeout       1
14:33:39: Erase offset        1
14:33:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1120 ] 
14:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:39: Host Frequency set to 100000 KHz
14:33:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:39: ####CSD Registe 2.0 Values####
14:33:39: CSD_STRUCTURE                                 :0x1
14:33:39: Reserv1                                       :0x0
14:33:39: Time Access 1 TAAC                            :0xe
14:33:39: Time Access 2 NSAC*100                        :0x0
14:33:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:39: Card Command Classess CCC                     :0x5b5
14:33:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:39: DSR(driver stage register)  DSR_IMP           :0x0
14:33:39: Reserv2                                       :0x0
14:33:39: Device Size C_SIZE                            :0xedc8
14:33:39: Reserv3                                       :0x0
14:33:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:39: Reserv4                                       :0x0
14:33:40: Write Speed Factor R2W_FACTOR                 :0x2
14:33:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:40: FILE_FORMAT_GRP                               :0x0
14:33:40: COPY flag                                     :0x1
14:33:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:40: File_Format                                   :0x0
14:33:40: CRC                                           :0x0
14:33:40: ####CSD Registe Values####  

14:33:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00090>, <py_sfcl.CommandDataDefinition object at 0x05DFBED0>) , Command count = 1121 ] 
14:33:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB420>, <py_sfcl.CommandDataDefinition object at 0x05E0F4B0>) , Command count = 1122 ] 
14:33:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBF90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F030>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F150>, <None>, <py_sfcl.Command23 object at 0x05E0F360>) , Command count = 1123 ] 
14:33:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:42: Host Frequency set to 25000 KHz
14:33:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB840>, 0x0, True) , Command count = 1124 ] 
14:33:42: [GO18_globalSetVolt]### Host voltage value is set.
14:33:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5CC0>, 0x0, False) , Command count = 1125 ] 
14:33:42: [GO18_globalSetVolt]### Host voltage value is set.
14:33:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1126 ] 
14:33:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1127 ] 
14:33:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1128 ] 
14:33:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB1B0>, <py_sfcl.CommandDataDefinition object at 0x05DFB900>) , Command count = 1129 ] 
14:33:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5E10>, <py_sfcl.CommandDataDefinition object at 0x05DFB630>) , Command count = 1130 ] 
14:33:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1131 ] 
14:33:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:42: Host Frequency set to 25000 KHz
14:33:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:42: ####CSD Registe 2.0 Values####
14:33:42: CSD_STRUCTURE                                 :0x1
14:33:42: Reserv1                                       :0x0
14:33:42: Time Access 1 TAAC                            :0xe
14:33:42: Time Access 2 NSAC*100                        :0x0
14:33:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:42: Card Command Classess CCC                     :0x5b5
14:33:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:42: DSR(driver stage register)  DSR_IMP           :0x0
14:33:42: Reserv2                                       :0x0
14:33:42: Device Size C_SIZE                            :0xedc8
14:33:42: Reserv3                                       :0x0
14:33:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:42: Reserv4                                       :0x0
14:33:42: Write Speed Factor R2W_FACTOR                 :0x2
14:33:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:42: FILE_FORMAT_GRP                               :0x0
14:33:42: COPY flag                                     :0x1
14:33:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:42: File_Format                                   :0x0
14:33:42: CRC                                           :0x0
14:33:42: ####CSD Registe Values####  

14:33:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:42: [GetSCRRegisterEntry] Passed
14:33:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:42: Data_Status_After Erases          : 0
14:33:42: CPRM Security Support             : No Security
14:33:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:42: Spec. Version                     : Version 3.0X
14:33:42: Extended Security Support         : Extended_Security_Not_Supported
14:33:42: Command Support                   : COMMAND_SUPPORT
14:33:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00270>, <py_sfcl.CommandDataDefinition object at 0x05DFB3C0>) , Command count = 1132 ] 
14:33:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E002D0>, <py_sfcl.CommandDataDefinition object at 0x05DFBCF0>) , Command count = 1133 ] 
14:33:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:42: [ SetBusWidth(0x4) , Command count = 1134 ] 
14:33:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1135 ] 
14:33:42: Protected Area Size 0x28000
14:33:42: Bus Width           2
14:33:42: Secure Mode         0
14:33:42: Speed  Class        4
14:33:42: Perf Move           0
14:33:42: Au Size             9
14:33:42: Erase Size          15
14:33:42: Erase Timeout       1
14:33:42: Erase offset        1
14:33:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1136 ] 
14:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:43: Host Frequency set to 100000 KHz
14:33:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:43: ####CSD Registe 2.0 Values####
14:33:43: CSD_STRUCTURE                                 :0x1
14:33:43: Reserv1                                       :0x0
14:33:43: Time Access 1 TAAC                            :0xe
14:33:43: Time Access 2 NSAC*100                        :0x0
14:33:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:43: Card Command Classess CCC                     :0x5b5
14:33:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:43: DSR(driver stage register)  DSR_IMP           :0x0
14:33:43: Reserv2                                       :0x0
14:33:43: Device Size C_SIZE                            :0xedc8
14:33:43: Reserv3                                       :0x0
14:33:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:43: Reserv4                                       :0x0
14:33:43: Write Speed Factor R2W_FACTOR                 :0x2
14:33:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:43: FILE_FORMAT_GRP                               :0x0
14:33:43: COPY flag                                     :0x1
14:33:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:43: File_Format                                   :0x0
14:33:43: CRC                                           :0x0
14:33:43: ####CSD Registe Values####  

14:33:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00360>, <py_sfcl.CommandDataDefinition object at 0x05E00450>) , Command count = 1137 ] 
14:33:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBEA0>, <py_sfcl.CommandDataDefinition object at 0x05DFB510>) , Command count = 1138 ] 
14:33:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E006F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F7B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F3C0>, <None>, <py_sfcl.Command23 object at 0x05E0F570>) , Command count = 1139 ] 
14:33:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:45: Host Frequency set to 25000 KHz
14:33:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB300>, 0x0, True) , Command count = 1140 ] 
14:33:45: [GO18_globalSetVolt]### Host voltage value is set.
14:33:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBAE0>, 0x0, False) , Command count = 1141 ] 
14:33:45: [GO18_globalSetVolt]### Host voltage value is set.
14:33:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1142 ] 
14:33:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1143 ] 
14:33:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1144 ] 
14:33:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB690>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 1145 ] 
14:33:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA20>, <py_sfcl.CommandDataDefinition object at 0x05E00060>) , Command count = 1146 ] 
14:33:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1147 ] 
14:33:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:46: Host Frequency set to 25000 KHz
14:33:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:46: ####CSD Registe 2.0 Values####
14:33:46: CSD_STRUCTURE                                 :0x1
14:33:46: Reserv1                                       :0x0
14:33:46: Time Access 1 TAAC                            :0xe
14:33:46: Time Access 2 NSAC*100                        :0x0
14:33:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:46: Card Command Classess CCC                     :0x5b5
14:33:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:46: DSR(driver stage register)  DSR_IMP           :0x0
14:33:46: Reserv2                                       :0x0
14:33:46: Device Size C_SIZE                            :0xedc8
14:33:46: Reserv3                                       :0x0
14:33:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:46: Reserv4                                       :0x0
14:33:46: Write Speed Factor R2W_FACTOR                 :0x2
14:33:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:46: FILE_FORMAT_GRP                               :0x0
14:33:46: COPY flag                                     :0x1
14:33:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:46: File_Format                                   :0x0
14:33:46: CRC                                           :0x0
14:33:46: ####CSD Registe Values####  

14:33:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:46: [GetSCRRegisterEntry] Passed
14:33:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:46: Data_Status_After Erases          : 0
14:33:46: CPRM Security Support             : No Security
14:33:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:46: Spec. Version                     : Version 3.0X
14:33:46: Extended Security Support         : Extended_Security_Not_Supported
14:33:46: Command Support                   : COMMAND_SUPPORT
14:33:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00930>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 1148 ] 
14:33:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00810>, <py_sfcl.CommandDataDefinition object at 0x05E006C0>) , Command count = 1149 ] 
14:33:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:46: [ SetBusWidth(0x4) , Command count = 1150 ] 
14:33:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1151 ] 
14:33:46: Protected Area Size 0x28000
14:33:46: Bus Width           2
14:33:46: Secure Mode         0
14:33:46: Speed  Class        4
14:33:46: Perf Move           0
14:33:46: Au Size             9
14:33:46: Erase Size          15
14:33:46: Erase Timeout       1
14:33:46: Erase offset        1
14:33:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1152 ] 
14:33:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:46: Host Frequency set to 100000 KHz
14:33:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:46: ####CSD Registe 2.0 Values####
14:33:46: CSD_STRUCTURE                                 :0x1
14:33:46: Reserv1                                       :0x0
14:33:46: Time Access 1 TAAC                            :0xe
14:33:46: Time Access 2 NSAC*100                        :0x0
14:33:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:46: Card Command Classess CCC                     :0x5b5
14:33:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:46: DSR(driver stage register)  DSR_IMP           :0x0
14:33:46: Reserv2                                       :0x0
14:33:46: Device Size C_SIZE                            :0xedc8
14:33:46: Reserv3                                       :0x0
14:33:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:46: Reserv4                                       :0x0
14:33:46: Write Speed Factor R2W_FACTOR                 :0x2
14:33:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:46: FILE_FORMAT_GRP                               :0x0
14:33:46: COPY flag                                     :0x1
14:33:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:46: File_Format                                   :0x0
14:33:46: CRC                                           :0x0
14:33:46: ####CSD Registe Values####  

14:33:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05E00240>) , Command count = 1153 ] 
14:33:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB390>, <py_sfcl.CommandDataDefinition object at 0x05E0F810>) , Command count = 1154 ] 
14:33:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FB40>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FFC0>, <None>, <py_sfcl.Command23 object at 0x05E0F3F0>) , Command count = 1155 ] 
14:33:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:49: Host Frequency set to 25000 KHz
14:33:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBBA0>, 0x0, True) , Command count = 1156 ] 
14:33:49: [GO18_globalSetVolt]### Host voltage value is set.
14:33:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E007E0>, 0x0, False) , Command count = 1157 ] 
14:33:49: [GO18_globalSetVolt]### Host voltage value is set.
14:33:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1158 ] 
14:33:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1159 ] 
14:33:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1160 ] 
14:33:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2A0>, <py_sfcl.CommandDataDefinition object at 0x05E00A50>) , Command count = 1161 ] 
14:33:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB40>, <py_sfcl.CommandDataDefinition object at 0x05E002A0>) , Command count = 1162 ] 
14:33:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1163 ] 
14:33:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:49: Host Frequency set to 25000 KHz
14:33:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:49: ####CSD Registe 2.0 Values####
14:33:49: CSD_STRUCTURE                                 :0x1
14:33:49: Reserv1                                       :0x0
14:33:49: Time Access 1 TAAC                            :0xe
14:33:49: Time Access 2 NSAC*100                        :0x0
14:33:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:49: Card Command Classess CCC                     :0x5b5
14:33:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:49: DSR(driver stage register)  DSR_IMP           :0x0
14:33:49: Reserv2                                       :0x0
14:33:49: Device Size C_SIZE                            :0xedc8
14:33:49: Reserv3                                       :0x0
14:33:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:49: Reserv4                                       :0x0
14:33:49: Write Speed Factor R2W_FACTOR                 :0x2
14:33:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:49: FILE_FORMAT_GRP                               :0x0
14:33:49: COPY flag                                     :0x1
14:33:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:49: File_Format                                   :0x0
14:33:49: CRC                                           :0x0
14:33:49: ####CSD Registe Values####  

14:33:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:49: [GetSCRRegisterEntry] Passed
14:33:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:49: Data_Status_After Erases          : 0
14:33:49: CPRM Security Support             : No Security
14:33:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:49: Spec. Version                     : Version 3.0X
14:33:49: Extended Security Support         : Extended_Security_Not_Supported
14:33:49: Command Support                   : COMMAND_SUPPORT
14:33:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04060>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 1164 ] 
14:33:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04240>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 1165 ] 
14:33:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:49: [ SetBusWidth(0x4) , Command count = 1166 ] 
14:33:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1167 ] 
14:33:49: Protected Area Size 0x28000
14:33:49: Bus Width           2
14:33:49: Secure Mode         0
14:33:49: Speed  Class        4
14:33:49: Perf Move           0
14:33:49: Au Size             9
14:33:49: Erase Size          15
14:33:49: Erase Timeout       1
14:33:49: Erase offset        1
14:33:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1168 ] 
14:33:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:49: Host Frequency set to 100000 KHz
14:33:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:49: ####CSD Registe 2.0 Values####
14:33:49: CSD_STRUCTURE                                 :0x1
14:33:49: Reserv1                                       :0x0
14:33:49: Time Access 1 TAAC                            :0xe
14:33:50: Time Access 2 NSAC*100                        :0x0
14:33:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:50: Card Command Classess CCC                     :0x5b5
14:33:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:50: DSR(driver stage register)  DSR_IMP           :0x0
14:33:50: Reserv2                                       :0x0
14:33:50: Device Size C_SIZE                            :0xedc8
14:33:50: Reserv3                                       :0x0
14:33:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:50: Reserv4                                       :0x0
14:33:50: Write Speed Factor R2W_FACTOR                 :0x2
14:33:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:50: FILE_FORMAT_GRP                               :0x0
14:33:50: COPY flag                                     :0x1
14:33:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:50: File_Format                                   :0x0
14:33:50: CRC                                           :0x0
14:33:50: ####CSD Registe Values####  

14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE70>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 1169 ] 
14:33:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 1170 ] 
14:33:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00210>, <py_sfcl.PySEnhancedCmdData object at 0x05E00840>, <None>, <py_sfcl.Command23 object at 0x05E00F30>) , Command count = 1171 ] 
14:33:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:52: Host Frequency set to 25000 KHz
14:33:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E042D0>, 0x0, True) , Command count = 1172 ] 
14:33:52: [GO18_globalSetVolt]### Host voltage value is set.
14:33:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00EA0>, 0x0, False) , Command count = 1173 ] 
14:33:52: [GO18_globalSetVolt]### Host voltage value is set.
14:33:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1174 ] 
14:33:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1175 ] 
14:33:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1176 ] 
14:33:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04270>, <py_sfcl.CommandDataDefinition object at 0x05E00C30>) , Command count = 1177 ] 
14:33:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A80>, <py_sfcl.CommandDataDefinition object at 0x05E004B0>) , Command count = 1178 ] 
14:33:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1179 ] 
14:33:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:53: Host Frequency set to 25000 KHz
14:33:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:53: ####CSD Registe 2.0 Values####
14:33:53: CSD_STRUCTURE                                 :0x1
14:33:53: Reserv1                                       :0x0
14:33:53: Time Access 1 TAAC                            :0xe
14:33:53: Time Access 2 NSAC*100                        :0x0
14:33:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:53: Card Command Classess CCC                     :0x5b5
14:33:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:53: DSR(driver stage register)  DSR_IMP           :0x0
14:33:53: Reserv2                                       :0x0
14:33:53: Device Size C_SIZE                            :0xedc8
14:33:53: Reserv3                                       :0x0
14:33:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:53: Reserv4                                       :0x0
14:33:53: Write Speed Factor R2W_FACTOR                 :0x2
14:33:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:53: FILE_FORMAT_GRP                               :0x0
14:33:53: COPY flag                                     :0x1
14:33:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:53: File_Format                                   :0x0
14:33:53: CRC                                           :0x0
14:33:53: ####CSD Registe Values####  

14:33:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:53: [GetSCRRegisterEntry] Passed
14:33:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:53: Data_Status_After Erases          : 0
14:33:53: CPRM Security Support             : No Security
14:33:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:53: Spec. Version                     : Version 3.0X
14:33:53: Extended Security Support         : Extended_Security_Not_Supported
14:33:53: Command Support                   : COMMAND_SUPPORT
14:33:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04780>, <py_sfcl.CommandDataDefinition object at 0x05E00ED0>) , Command count = 1180 ] 
14:33:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04750>, <py_sfcl.CommandDataDefinition object at 0x05E04150>) , Command count = 1181 ] 
14:33:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:53: [ SetBusWidth(0x4) , Command count = 1182 ] 
14:33:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E040C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1183 ] 
14:33:53: Protected Area Size 0x28000
14:33:53: Bus Width           2
14:33:53: Secure Mode         0
14:33:53: Speed  Class        4
14:33:53: Perf Move           0
14:33:53: Au Size             9
14:33:53: Erase Size          15
14:33:53: Erase Timeout       1
14:33:53: Erase offset        1
14:33:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1184 ] 
14:33:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:53: Host Frequency set to 100000 KHz
14:33:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:53: ####CSD Registe 2.0 Values####
14:33:53: CSD_STRUCTURE                                 :0x1
14:33:53: Reserv1                                       :0x0
14:33:53: Time Access 1 TAAC                            :0xe
14:33:53: Time Access 2 NSAC*100                        :0x0
14:33:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:53: Card Command Classess CCC                     :0x5b5
14:33:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:53: DSR(driver stage register)  DSR_IMP           :0x0
14:33:53: Reserv2                                       :0x0
14:33:53: Device Size C_SIZE                            :0xedc8
14:33:53: Reserv3                                       :0x0
14:33:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:53: Reserv4                                       :0x0
14:33:53: Write Speed Factor R2W_FACTOR                 :0x2
14:33:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:53: FILE_FORMAT_GRP                               :0x0
14:33:53: COPY flag                                     :0x1
14:33:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:53: File_Format                                   :0x0
14:33:53: CRC                                           :0x0
14:33:53: ####CSD Registe Values####  

14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC30>) , Command count = 1185 ] 
14:33:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CF0>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 1186 ] 
14:33:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E009F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00F00>, <None>, <py_sfcl.Command23 object at 0x05E00690>) , Command count = 1187 ] 
14:33:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:56: Host Frequency set to 25000 KHz
14:33:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04210>, 0x0, True) , Command count = 1188 ] 
14:33:56: [GO18_globalSetVolt]### Host voltage value is set.
14:33:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E045A0>, 0x0, False) , Command count = 1189 ] 
14:33:56: [GO18_globalSetVolt]### Host voltage value is set.
14:33:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1190 ] 
14:33:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1191 ] 
14:33:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1192 ] 
14:33:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D80>, <py_sfcl.CommandDataDefinition object at 0x05E04C90>) , Command count = 1193 ] 
14:33:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04180>, <py_sfcl.CommandDataDefinition object at 0x05E04840>) , Command count = 1194 ] 
14:33:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1195 ] 
14:33:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:56: Host Frequency set to 25000 KHz
14:33:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:56: ####CSD Registe 2.0 Values####
14:33:56: CSD_STRUCTURE                                 :0x1
14:33:56: Reserv1                                       :0x0
14:33:56: Time Access 1 TAAC                            :0xe
14:33:56: Time Access 2 NSAC*100                        :0x0
14:33:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:56: Card Command Classess CCC                     :0x5b5
14:33:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:56: DSR(driver stage register)  DSR_IMP           :0x0
14:33:56: Reserv2                                       :0x0
14:33:56: Device Size C_SIZE                            :0xedc8
14:33:56: Reserv3                                       :0x0
14:33:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:56: Reserv4                                       :0x0
14:33:56: Write Speed Factor R2W_FACTOR                 :0x2
14:33:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:56: FILE_FORMAT_GRP                               :0x0
14:33:56: COPY flag                                     :0x1
14:33:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:56: File_Format                                   :0x0
14:33:56: CRC                                           :0x0
14:33:56: ####CSD Registe Values####  

14:33:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:56: [GetSCRRegisterEntry] Passed
14:33:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:56: Data_Status_After Erases          : 0
14:33:56: CPRM Security Support             : No Security
14:33:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:56: Spec. Version                     : Version 3.0X
14:33:56: Extended Security Support         : Extended_Security_Not_Supported
14:33:56: Command Support                   : COMMAND_SUPPORT
14:33:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E049C0>) , Command count = 1196 ] 
14:33:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04960>, <py_sfcl.CommandDataDefinition object at 0x05E04030>) , Command count = 1197 ] 
14:33:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:56: [ SetBusWidth(0x4) , Command count = 1198 ] 
14:33:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1199 ] 
14:33:56: Protected Area Size 0x28000
14:33:56: Bus Width           2
14:33:56: Secure Mode         0
14:33:56: Speed  Class        4
14:33:56: Perf Move           0
14:33:56: Au Size             9
14:33:56: Erase Size          15
14:33:56: Erase Timeout       1
14:33:56: Erase offset        1
14:33:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1200 ] 
14:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:56: Host Frequency set to 100000 KHz
14:33:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:56: ####CSD Registe 2.0 Values####
14:33:56: CSD_STRUCTURE                                 :0x1
14:33:56: Reserv1                                       :0x0
14:33:56: Time Access 1 TAAC                            :0xe
14:33:56: Time Access 2 NSAC*100                        :0x0
14:33:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:56: Card Command Classess CCC                     :0x5b5
14:33:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:56: DSR(driver stage register)  DSR_IMP           :0x0
14:33:56: Reserv2                                       :0x0
14:33:56: Device Size C_SIZE                            :0xedc8
14:33:56: Reserv3                                       :0x0
14:33:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:56: Reserv4                                       :0x0
14:33:57: Write Speed Factor R2W_FACTOR                 :0x2
14:33:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:57: FILE_FORMAT_GRP                               :0x0
14:33:57: COPY flag                                     :0x1
14:33:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:57: File_Format                                   :0x0
14:33:57: CRC                                           :0x0
14:33:57: ####CSD Registe Values####  

14:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CC0>, <py_sfcl.CommandDataDefinition object at 0x05E046C0>) , Command count = 1201 ] 
14:33:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05E0F840>) , Command count = 1202 ] 
14:33:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:33:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:33:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5AB0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5900>, <None>, <py_sfcl.Command23 object at 0x05E00870>) , Command count = 1203 ] 
14:33:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:33:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:59: Host Frequency set to 25000 KHz
14:33:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E048D0>, 0x0, True) , Command count = 1204 ] 
14:33:59: [GO18_globalSetVolt]### Host voltage value is set.
14:33:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04C60>, 0x0, False) , Command count = 1205 ] 
14:33:59: [GO18_globalSetVolt]### Host voltage value is set.
14:33:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1206 ] 
14:33:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1207 ] 
14:33:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1208 ] 
14:33:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07270>, <py_sfcl.CommandDataDefinition object at 0x05E04F00>) , Command count = 1209 ] 
14:33:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00BA0>, <py_sfcl.CommandDataDefinition object at 0x05E04810>) , Command count = 1210 ] 
14:33:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1211 ] 
14:33:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:59: Host Frequency set to 25000 KHz
14:33:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:59: ####CSD Registe 2.0 Values####
14:33:59: CSD_STRUCTURE                                 :0x1
14:33:59: Reserv1                                       :0x0
14:33:59: Time Access 1 TAAC                            :0xe
14:33:59: Time Access 2 NSAC*100                        :0x0
14:33:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:59: Card Command Classess CCC                     :0x5b5
14:33:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:59: DSR(driver stage register)  DSR_IMP           :0x0
14:33:59: Reserv2                                       :0x0
14:33:59: Device Size C_SIZE                            :0xedc8
14:33:59: Reserv3                                       :0x0
14:33:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:59: Reserv4                                       :0x0
14:33:59: Write Speed Factor R2W_FACTOR                 :0x2
14:33:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:59: FILE_FORMAT_GRP                               :0x0
14:33:59: COPY flag                                     :0x1
14:33:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:59: File_Format                                   :0x0
14:33:59: CRC                                           :0x0
14:33:59: ####CSD Registe Values####  

14:33:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:59: [GetSCRRegisterEntry] Passed
14:33:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:59: Data_Status_After Erases          : 0
14:33:59: CPRM Security Support             : No Security
14:33:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:59: Spec. Version                     : Version 3.0X
14:33:59: Extended Security Support         : Extended_Security_Not_Supported
14:33:59: Command Support                   : COMMAND_SUPPORT
14:33:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E074B0>, <py_sfcl.CommandDataDefinition object at 0x05E04330>) , Command count = 1212 ] 
14:33:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07510>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 1213 ] 
14:33:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:59: [ SetBusWidth(0x4) , Command count = 1214 ] 
14:33:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FD50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1215 ] 
14:33:59: Protected Area Size 0x28000
14:33:59: Bus Width           2
14:33:59: Secure Mode         0
14:33:59: Speed  Class        4
14:33:59: Perf Move           0
14:33:59: Au Size             9
14:33:59: Erase Size          15
14:33:59: Erase Timeout       1
14:33:59: Erase offset        1
14:33:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1216 ] 
14:33:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:59: Host Frequency set to 100000 KHz
14:33:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:59: ####CSD Registe 2.0 Values####
14:33:59: CSD_STRUCTURE                                 :0x1
14:33:59: Reserv1                                       :0x0
14:33:59: Time Access 1 TAAC                            :0xe
14:33:59: Time Access 2 NSAC*100                        :0x0
14:33:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:59: Card Command Classess CCC                     :0x5b5
14:34:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:00: DSR(driver stage register)  DSR_IMP           :0x0
14:34:00: Reserv2                                       :0x0
14:34:00: Device Size C_SIZE                            :0xedc8
14:34:00: Reserv3                                       :0x0
14:34:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:00: Reserv4                                       :0x0
14:34:00: Write Speed Factor R2W_FACTOR                 :0x2
14:34:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:00: FILE_FORMAT_GRP                               :0x0
14:34:00: COPY flag                                     :0x1
14:34:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:00: File_Format                                   :0x0
14:34:00: CRC                                           :0x0
14:34:00: ####CSD Registe Values####  

14:34:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B70>, <py_sfcl.CommandDataDefinition object at 0x05E040C0>) , Command count = 1217 ] 
14:34:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04AB0>, <py_sfcl.CommandDataDefinition object at 0x05E04ED0>) , Command count = 1218 ] 
14:34:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E076C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04600>, <py_sfcl.PySEnhancedCmdData object at 0x05E04D20>, <None>, <py_sfcl.Command23 object at 0x05E07450>) , Command count = 1219 ] 
14:34:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:02: Host Frequency set to 25000 KHz
14:34:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04FC0>, 0x0, True) , Command count = 1220 ] 
14:34:02: [GO18_globalSetVolt]### Host voltage value is set.
14:34:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07360>, 0x0, False) , Command count = 1221 ] 
14:34:02: [GO18_globalSetVolt]### Host voltage value is set.
14:34:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1222 ] 
14:34:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1223 ] 
14:34:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1224 ] 
14:34:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E075D0>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 1225 ] 
14:34:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04870>, <py_sfcl.CommandDataDefinition object at 0x05E072D0>) , Command count = 1226 ] 
14:34:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1227 ] 
14:34:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:03: Host Frequency set to 25000 KHz
14:34:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:03: ####CSD Registe 2.0 Values####
14:34:03: CSD_STRUCTURE                                 :0x1
14:34:03: Reserv1                                       :0x0
14:34:03: Time Access 1 TAAC                            :0xe
14:34:03: Time Access 2 NSAC*100                        :0x0
14:34:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:03: Card Command Classess CCC                     :0x5b5
14:34:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:03: DSR(driver stage register)  DSR_IMP           :0x0
14:34:03: Reserv2                                       :0x0
14:34:03: Device Size C_SIZE                            :0xedc8
14:34:03: Reserv3                                       :0x0
14:34:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:03: Reserv4                                       :0x0
14:34:03: Write Speed Factor R2W_FACTOR                 :0x2
14:34:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:03: FILE_FORMAT_GRP                               :0x0
14:34:03: COPY flag                                     :0x1
14:34:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:03: File_Format                                   :0x0
14:34:03: CRC                                           :0x0
14:34:03: ####CSD Registe Values####  

14:34:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:03: [GetSCRRegisterEntry] Passed
14:34:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:03: Data_Status_After Erases          : 0
14:34:03: CPRM Security Support             : No Security
14:34:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:03: Spec. Version                     : Version 3.0X
14:34:03: Extended Security Support         : Extended_Security_Not_Supported
14:34:03: Command Support                   : COMMAND_SUPPORT
14:34:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F30>, <py_sfcl.CommandDataDefinition object at 0x05E07990>) , Command count = 1228 ] 
14:34:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDB0>, <py_sfcl.CommandDataDefinition object at 0x05E07BD0>) , Command count = 1229 ] 
14:34:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:03: [ SetBusWidth(0x4) , Command count = 1230 ] 
14:34:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1231 ] 
14:34:03: Protected Area Size 0x28000
14:34:03: Bus Width           2
14:34:03: Secure Mode         0
14:34:03: Speed  Class        4
14:34:03: Perf Move           0
14:34:03: Au Size             9
14:34:03: Erase Size          15
14:34:03: Erase Timeout       1
14:34:03: Erase offset        1
14:34:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1232 ] 
14:34:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:03: Host Frequency set to 100000 KHz
14:34:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:03: ####CSD Registe 2.0 Values####
14:34:03: CSD_STRUCTURE                                 :0x1
14:34:03: Reserv1                                       :0x0
14:34:03: Time Access 1 TAAC                            :0xe
14:34:03: Time Access 2 NSAC*100                        :0x0
14:34:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:03: Card Command Classess CCC                     :0x5b5
14:34:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:03: DSR(driver stage register)  DSR_IMP           :0x0
14:34:03: Reserv2                                       :0x0
14:34:03: Device Size C_SIZE                            :0xedc8
14:34:03: Reserv3                                       :0x0
14:34:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:03: Reserv4                                       :0x0
14:34:03: Write Speed Factor R2W_FACTOR                 :0x2
14:34:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:03: FILE_FORMAT_GRP                               :0x0
14:34:03: COPY flag                                     :0x1
14:34:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:03: File_Format                                   :0x0
14:34:03: CRC                                           :0x0
14:34:03: ####CSD Registe Values####  

14:34:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 1233 ] 
14:34:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E07E10>) , Command count = 1234 ] 
14:34:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E071E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E074E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E073C0>, <None>, <py_sfcl.Command23 object at 0x05E04630>) , Command count = 1235 ] 
14:34:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:06: Host Frequency set to 25000 KHz
14:34:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F60>, 0x0, True) , Command count = 1236 ] 
14:34:06: [GO18_globalSetVolt]### Host voltage value is set.
14:34:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07A20>, 0x0, False) , Command count = 1237 ] 
14:34:06: [GO18_globalSetVolt]### Host voltage value is set.
14:34:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1238 ] 
14:34:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1239 ] 
14:34:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1240 ] 
14:34:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5AE0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 1241 ] 
14:34:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E07CC0>) , Command count = 1242 ] 
14:34:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1243 ] 
14:34:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:06: Host Frequency set to 25000 KHz
14:34:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:06: ####CSD Registe 2.0 Values####
14:34:06: CSD_STRUCTURE                                 :0x1
14:34:06: Reserv1                                       :0x0
14:34:06: Time Access 1 TAAC                            :0xe
14:34:06: Time Access 2 NSAC*100                        :0x0
14:34:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:06: Card Command Classess CCC                     :0x5b5
14:34:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:06: DSR(driver stage register)  DSR_IMP           :0x0
14:34:06: Reserv2                                       :0x0
14:34:06: Device Size C_SIZE                            :0xedc8
14:34:06: Reserv3                                       :0x0
14:34:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:06: Reserv4                                       :0x0
14:34:06: Write Speed Factor R2W_FACTOR                 :0x2
14:34:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:06: FILE_FORMAT_GRP                               :0x0
14:34:06: COPY flag                                     :0x1
14:34:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:06: File_Format                                   :0x0
14:34:06: CRC                                           :0x0
14:34:06: ####CSD Registe Values####  

14:34:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:06: [GetSCRRegisterEntry] Passed
14:34:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:06: Data_Status_After Erases          : 0
14:34:06: CPRM Security Support             : No Security
14:34:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:06: Spec. Version                     : Version 3.0X
14:34:06: Extended Security Support         : Extended_Security_Not_Supported
14:34:06: Command Support                   : COMMAND_SUPPORT
14:34:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B270>, <py_sfcl.CommandDataDefinition object at 0x05E077B0>) , Command count = 1244 ] 
14:34:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2D0>, <py_sfcl.CommandDataDefinition object at 0x05E07180>) , Command count = 1245 ] 
14:34:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:06: [ SetBusWidth(0x4) , Command count = 1246 ] 
14:34:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1247 ] 
14:34:06: Protected Area Size 0x28000
14:34:06: Bus Width           2
14:34:06: Secure Mode         0
14:34:06: Speed  Class        4
14:34:06: Perf Move           0
14:34:06: Au Size             9
14:34:06: Erase Size          15
14:34:06: Erase Timeout       1
14:34:06: Erase offset        1
14:34:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1248 ] 
14:34:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:06: Host Frequency set to 100000 KHz
14:34:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:06: ####CSD Registe 2.0 Values####
14:34:06: CSD_STRUCTURE                                 :0x1
14:34:06: Reserv1                                       :0x0
14:34:06: Time Access 1 TAAC                            :0xe
14:34:06: Time Access 2 NSAC*100                        :0x0
14:34:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:06: Card Command Classess CCC                     :0x5b5
14:34:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:06: DSR(driver stage register)  DSR_IMP           :0x0
14:34:06: Reserv2                                       :0x0
14:34:06: Device Size C_SIZE                            :0xedc8
14:34:06: Reserv3                                       :0x0
14:34:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:06: Reserv4                                       :0x0
14:34:07: Write Speed Factor R2W_FACTOR                 :0x2
14:34:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:07: FILE_FORMAT_GRP                               :0x0
14:34:07: COPY flag                                     :0x1
14:34:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:07: File_Format                                   :0x0
14:34:07: CRC                                           :0x0
14:34:07: ####CSD Registe Values####  

14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B360>, <py_sfcl.CommandDataDefinition object at 0x05E0B450>) , Command count = 1249 ] 
14:34:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07840>, <py_sfcl.CommandDataDefinition object at 0x05E07810>) , Command count = 1250 ] 
14:34:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:07: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE97E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DE9FC0>, <py_sfcl.PySEnhancedCmdData object at 0x05DE9A80>, <None>, <py_sfcl.Command23 object at 0x05E070F0>) , Command count = 1251 ] 
14:34:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:09: Host Frequency set to 25000 KHz
14:34:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B180>, 0x0, True) , Command count = 1252 ] 
14:34:09: [GO18_globalSetVolt]### Host voltage value is set.
14:34:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B030>, 0x0, False) , Command count = 1253 ] 
14:34:09: [GO18_globalSetVolt]### Host voltage value is set.
14:34:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1254 ] 
14:34:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1255 ] 
14:34:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1256 ] 
14:34:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B8D0>, <py_sfcl.CommandDataDefinition object at 0x05E0B120>) , Command count = 1257 ] 
14:34:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A50>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 1258 ] 
14:34:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1259 ] 
14:34:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:09: Host Frequency set to 25000 KHz
14:34:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:09: ####CSD Registe 2.0 Values####
14:34:09: CSD_STRUCTURE                                 :0x1
14:34:09: Reserv1                                       :0x0
14:34:09: Time Access 1 TAAC                            :0xe
14:34:09: Time Access 2 NSAC*100                        :0x0
14:34:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:09: Card Command Classess CCC                     :0x5b5
14:34:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:09: DSR(driver stage register)  DSR_IMP           :0x0
14:34:09: Reserv2                                       :0x0
14:34:09: Device Size C_SIZE                            :0xedc8
14:34:09: Reserv3                                       :0x0
14:34:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:09: Reserv4                                       :0x0
14:34:09: Write Speed Factor R2W_FACTOR                 :0x2
14:34:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:09: FILE_FORMAT_GRP                               :0x0
14:34:09: COPY flag                                     :0x1
14:34:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:09: File_Format                                   :0x0
14:34:09: CRC                                           :0x0
14:34:09: ####CSD Registe Values####  

14:34:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:09: [GetSCRRegisterEntry] Passed
14:34:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:09: Data_Status_After Erases          : 0
14:34:09: CPRM Security Support             : No Security
14:34:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:09: Spec. Version                     : Version 3.0X
14:34:09: Extended Security Support         : Extended_Security_Not_Supported
14:34:09: Command Support                   : COMMAND_SUPPORT
14:34:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 1260 ] 
14:34:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB40>, <py_sfcl.CommandDataDefinition object at 0x05E0B0C0>) , Command count = 1261 ] 
14:34:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:09: [ SetBusWidth(0x4) , Command count = 1262 ] 
14:34:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1263 ] 
14:34:09: Protected Area Size 0x28000
14:34:09: Bus Width           2
14:34:09: Secure Mode         0
14:34:09: Speed  Class        4
14:34:09: Perf Move           0
14:34:09: Au Size             9
14:34:09: Erase Size          15
14:34:09: Erase Timeout       1
14:34:09: Erase offset        1
14:34:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1264 ] 
14:34:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:10: Host Frequency set to 100000 KHz
14:34:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:10: ####CSD Registe 2.0 Values####
14:34:10: CSD_STRUCTURE                                 :0x1
14:34:10: Reserv1                                       :0x0
14:34:10: Time Access 1 TAAC                            :0xe
14:34:10: Time Access 2 NSAC*100                        :0x0
14:34:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:10: Card Command Classess CCC                     :0x5b5
14:34:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:10: DSR(driver stage register)  DSR_IMP           :0x0
14:34:10: Reserv2                                       :0x0
14:34:10: Device Size C_SIZE                            :0xedc8
14:34:10: Reserv3                                       :0x0
14:34:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:10: Reserv4                                       :0x0
14:34:10: Write Speed Factor R2W_FACTOR                 :0x2
14:34:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:10: FILE_FORMAT_GRP                               :0x0
14:34:10: COPY flag                                     :0x1
14:34:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:10: File_Format                                   :0x0
14:34:10: CRC                                           :0x0
14:34:10: ####CSD Registe Values####  

14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B240>, <py_sfcl.CommandDataDefinition object at 0x05E0BA80>) , Command count = 1265 ] 
14:34:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E078A0>, <py_sfcl.CommandDataDefinition object at 0x05E07960>) , Command count = 1266 ] 
14:34:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E072A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C60>, <None>, <py_sfcl.Command23 object at 0x05E0B6F0>) , Command count = 1267 ] 
14:34:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:12: Host Frequency set to 25000 KHz
14:34:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B390>, 0x0, True) , Command count = 1268 ] 
14:34:12: [GO18_globalSetVolt]### Host voltage value is set.
14:34:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B5D0>, 0x0, False) , Command count = 1269 ] 
14:34:12: [GO18_globalSetVolt]### Host voltage value is set.
14:34:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1270 ] 
14:34:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1271 ] 
14:34:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1272 ] 
14:34:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05144030>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 1273 ] 
14:34:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B510>, <py_sfcl.CommandDataDefinition object at 0x05E07C90>) , Command count = 1274 ] 
14:34:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1275 ] 
14:34:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:13: Host Frequency set to 25000 KHz
14:34:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:13: ####CSD Registe 2.0 Values####
14:34:13: CSD_STRUCTURE                                 :0x1
14:34:13: Reserv1                                       :0x0
14:34:13: Time Access 1 TAAC                            :0xe
14:34:13: Time Access 2 NSAC*100                        :0x0
14:34:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:13: Card Command Classess CCC                     :0x5b5
14:34:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:13: DSR(driver stage register)  DSR_IMP           :0x0
14:34:13: Reserv2                                       :0x0
14:34:13: Device Size C_SIZE                            :0xedc8
14:34:13: Reserv3                                       :0x0
14:34:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:13: Reserv4                                       :0x0
14:34:13: Write Speed Factor R2W_FACTOR                 :0x2
14:34:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:13: FILE_FORMAT_GRP                               :0x0
14:34:13: COPY flag                                     :0x1
14:34:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:13: File_Format                                   :0x0
14:34:13: CRC                                           :0x0
14:34:13: ####CSD Registe Values####  

14:34:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:13: [GetSCRRegisterEntry] Passed
14:34:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:13: Data_Status_After Erases          : 0
14:34:13: CPRM Security Support             : No Security
14:34:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:13: Spec. Version                     : Version 3.0X
14:34:13: Extended Security Support         : Extended_Security_Not_Supported
14:34:13: Command Support                   : COMMAND_SUPPORT
14:34:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x0526DED0>) , Command count = 1276 ] 
14:34:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B780>) , Command count = 1277 ] 
14:34:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:13: [ SetBusWidth(0x4) , Command count = 1278 ] 
14:34:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1279 ] 
14:34:13: Protected Area Size 0x28000
14:34:13: Bus Width           2
14:34:13: Secure Mode         0
14:34:13: Speed  Class        4
14:34:13: Perf Move           0
14:34:13: Au Size             9
14:34:13: Erase Size          15
14:34:13: Erase Timeout       1
14:34:13: Erase offset        1
14:34:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1280 ] 
14:34:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:13: Host Frequency set to 100000 KHz
14:34:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:13: ####CSD Registe 2.0 Values####
14:34:13: CSD_STRUCTURE                                 :0x1
14:34:13: Reserv1                                       :0x0
14:34:13: Time Access 1 TAAC                            :0xe
14:34:13: Time Access 2 NSAC*100                        :0x0
14:34:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:13: Card Command Classess CCC                     :0x5b5
14:34:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:13: DSR(driver stage register)  DSR_IMP           :0x0
14:34:13: Reserv2                                       :0x0
14:34:13: Device Size C_SIZE                            :0xedc8
14:34:13: Reserv3                                       :0x0
14:34:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:13: Reserv4                                       :0x0
14:34:13: Write Speed Factor R2W_FACTOR                 :0x2
14:34:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:13: FILE_FORMAT_GRP                               :0x0
14:34:13: COPY flag                                     :0x1
14:34:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:13: File_Format                                   :0x0
14:34:13: CRC                                           :0x0
14:34:13: ####CSD Registe Values####  

14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F720>, <py_sfcl.CommandDataDefinition object at 0x05E0FE40>) , Command count = 1281 ] 
14:34:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F780>, <py_sfcl.CommandDataDefinition object at 0x05E07F00>) , Command count = 1282 ] 
14:34:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07F30>, <py_sfcl.PySEnhancedCmdData object at 0x05E07F60>, <None>, <py_sfcl.Command23 object at 0x05E07870>) , Command count = 1283 ] 
14:34:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:16: Host Frequency set to 25000 KHz
14:34:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BA50>, 0x0, True) , Command count = 1284 ] 
14:34:16: [GO18_globalSetVolt]### Host voltage value is set.
14:34:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FC30>, 0x0, False) , Command count = 1285 ] 
14:34:16: [GO18_globalSetVolt]### Host voltage value is set.
14:34:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1286 ] 
14:34:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1287 ] 
14:34:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1288 ] 
14:34:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC60>, <py_sfcl.CommandDataDefinition object at 0x05E0BF00>) , Command count = 1289 ] 
14:34:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052177E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3F0>) , Command count = 1290 ] 
14:34:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1291 ] 
14:34:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:16: Host Frequency set to 25000 KHz
14:34:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:16: ####CSD Registe 2.0 Values####
14:34:16: CSD_STRUCTURE                                 :0x1
14:34:16: Reserv1                                       :0x0
14:34:16: Time Access 1 TAAC                            :0xe
14:34:16: Time Access 2 NSAC*100                        :0x0
14:34:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:16: Card Command Classess CCC                     :0x5b5
14:34:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:16: DSR(driver stage register)  DSR_IMP           :0x0
14:34:16: Reserv2                                       :0x0
14:34:16: Device Size C_SIZE                            :0xedc8
14:34:16: Reserv3                                       :0x0
14:34:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:16: Reserv4                                       :0x0
14:34:16: Write Speed Factor R2W_FACTOR                 :0x2
14:34:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:16: FILE_FORMAT_GRP                               :0x0
14:34:16: COPY flag                                     :0x1
14:34:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:16: File_Format                                   :0x0
14:34:16: CRC                                           :0x0
14:34:16: ####CSD Registe Values####  

14:34:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:16: [GetSCRRegisterEntry] Passed
14:34:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:16: Data_Status_After Erases          : 0
14:34:16: CPRM Security Support             : No Security
14:34:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:16: Spec. Version                     : Version 3.0X
14:34:16: Extended Security Support         : Extended_Security_Not_Supported
14:34:16: Command Support                   : COMMAND_SUPPORT
14:34:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E0BAB0>) , Command count = 1292 ] 
14:34:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF060>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 1293 ] 
14:34:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:16: [ SetBusWidth(0x4) , Command count = 1294 ] 
14:34:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1295 ] 
14:34:16: Protected Area Size 0x28000
14:34:16: Bus Width           2
14:34:16: Secure Mode         0
14:34:16: Speed  Class        4
14:34:16: Perf Move           0
14:34:16: Au Size             9
14:34:16: Erase Size          15
14:34:16: Erase Timeout       1
14:34:16: Erase offset        1
14:34:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1296 ] 
14:34:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:16: Host Frequency set to 100000 KHz
14:34:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:16: ####CSD Registe 2.0 Values####
14:34:16: CSD_STRUCTURE                                 :0x1
14:34:16: Reserv1                                       :0x0
14:34:16: Time Access 1 TAAC                            :0xe
14:34:16: Time Access 2 NSAC*100                        :0x0
14:34:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:16: Card Command Classess CCC                     :0x5b5
14:34:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:16: DSR(driver stage register)  DSR_IMP           :0x0
14:34:16: Reserv2                                       :0x0
14:34:16: Device Size C_SIZE                            :0xedc8
14:34:16: Reserv3                                       :0x0
14:34:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:16: Reserv4                                       :0x0
14:34:17: Write Speed Factor R2W_FACTOR                 :0x2
14:34:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:17: FILE_FORMAT_GRP                               :0x0
14:34:17: COPY flag                                     :0x1
14:34:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:17: File_Format                                   :0x0
14:34:17: CRC                                           :0x0
14:34:17: ####CSD Registe Values####  

14:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B900>) , Command count = 1297 ] 
14:34:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB70>, <py_sfcl.CommandDataDefinition object at 0x05E0BC90>) , Command count = 1298 ] 
14:34:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04570>, <py_sfcl.PySEnhancedCmdData object at 0x05E044B0>, <None>, <py_sfcl.Command23 object at 0x05E0B9F0>) , Command count = 1299 ] 
14:34:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:19: Host Frequency set to 25000 KHz
14:34:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0521E030>, 0x0, True) , Command count = 1300 ] 
14:34:19: [GO18_globalSetVolt]### Host voltage value is set.
14:34:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281CC0>, 0x0, False) , Command count = 1301 ] 
14:34:19: [GO18_globalSetVolt]### Host voltage value is set.
14:34:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1302 ] 
14:34:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1303 ] 
14:34:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1304 ] 
14:34:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F30>, <py_sfcl.CommandDataDefinition object at 0x05E0FD80>) , Command count = 1305 ] 
14:34:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FEA0>, <py_sfcl.CommandDataDefinition object at 0x05E0FED0>) , Command count = 1306 ] 
14:34:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1307 ] 
14:34:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:20: Host Frequency set to 25000 KHz
14:34:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:20: ####CSD Registe 2.0 Values####
14:34:20: CSD_STRUCTURE                                 :0x1
14:34:20: Reserv1                                       :0x0
14:34:20: Time Access 1 TAAC                            :0xe
14:34:20: Time Access 2 NSAC*100                        :0x0
14:34:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:20: Card Command Classess CCC                     :0x5b5
14:34:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:20: DSR(driver stage register)  DSR_IMP           :0x0
14:34:20: Reserv2                                       :0x0
14:34:20: Device Size C_SIZE                            :0xedc8
14:34:20: Reserv3                                       :0x0
14:34:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:20: Reserv4                                       :0x0
14:34:20: Write Speed Factor R2W_FACTOR                 :0x2
14:34:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:20: FILE_FORMAT_GRP                               :0x0
14:34:20: COPY flag                                     :0x1
14:34:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:20: File_Format                                   :0x0
14:34:20: CRC                                           :0x0
14:34:20: ####CSD Registe Values####  

14:34:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:20: [GetSCRRegisterEntry] Passed
14:34:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:20: Data_Status_After Erases          : 0
14:34:20: CPRM Security Support             : No Security
14:34:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:20: Spec. Version                     : Version 3.0X
14:34:20: Extended Security Support         : Extended_Security_Not_Supported
14:34:20: Command Support                   : COMMAND_SUPPORT
14:34:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF030>, <py_sfcl.CommandDataDefinition object at 0x05DE99C0>) , Command count = 1308 ] 
14:34:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C90>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 1309 ] 
14:34:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:20: [ SetBusWidth(0x4) , Command count = 1310 ] 
14:34:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1311 ] 
14:34:20: Protected Area Size 0x28000
14:34:20: Bus Width           2
14:34:20: Secure Mode         0
14:34:20: Speed  Class        4
14:34:20: Perf Move           0
14:34:20: Au Size             9
14:34:20: Erase Size          15
14:34:20: Erase Timeout       1
14:34:20: Erase offset        1
14:34:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1312 ] 
14:34:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:20: Host Frequency set to 100000 KHz
14:34:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:20: ####CSD Registe 2.0 Values####
14:34:20: CSD_STRUCTURE                                 :0x1
14:34:20: Reserv1                                       :0x0
14:34:20: Time Access 1 TAAC                            :0xe
14:34:20: Time Access 2 NSAC*100                        :0x0
14:34:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:20: Card Command Classess CCC                     :0x5b5
14:34:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:20: DSR(driver stage register)  DSR_IMP           :0x0
14:34:20: Reserv2                                       :0x0
14:34:20: Device Size C_SIZE                            :0xedc8
14:34:20: Reserv3                                       :0x0
14:34:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:20: Reserv4                                       :0x0
14:34:20: Write Speed Factor R2W_FACTOR                 :0x2
14:34:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:20: FILE_FORMAT_GRP                               :0x0
14:34:20: COPY flag                                     :0x1
14:34:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:20: File_Format                                   :0x0
14:34:20: CRC                                           :0x0
14:34:20: ####CSD Registe Values####  

14:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 1313 ] 
14:34:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0FF30>) , Command count = 1314 ] 
14:34:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF50C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BD50>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BBA0>, <None>, <py_sfcl.Command23 object at 0x05281FC0>) , Command count = 1315 ] 
14:34:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:22: Host Frequency set to 25000 KHz
14:34:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527BFC0>, 0x0, True) , Command count = 1316 ] 
14:34:23: [GO18_globalSetVolt]### Host voltage value is set.
14:34:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9E70>, 0x0, False) , Command count = 1317 ] 
14:34:23: [GO18_globalSetVolt]### Host voltage value is set.
14:34:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1318 ] 
14:34:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1319 ] 
14:34:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1320 ] 
14:34:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B6C0>, <py_sfcl.CommandDataDefinition object at 0x05E0FB10>) , Command count = 1321 ] 
14:34:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F90>, <py_sfcl.CommandDataDefinition object at 0x05E0B4E0>) , Command count = 1322 ] 
14:34:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1323 ] 
14:34:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:23: Host Frequency set to 25000 KHz
14:34:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:23: ####CSD Registe 2.0 Values####
14:34:23: CSD_STRUCTURE                                 :0x1
14:34:23: Reserv1                                       :0x0
14:34:23: Time Access 1 TAAC                            :0xe
14:34:23: Time Access 2 NSAC*100                        :0x0
14:34:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:23: Card Command Classess CCC                     :0x5b5
14:34:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:23: DSR(driver stage register)  DSR_IMP           :0x0
14:34:23: Reserv2                                       :0x0
14:34:23: Device Size C_SIZE                            :0xedc8
14:34:23: Reserv3                                       :0x0
14:34:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:23: Reserv4                                       :0x0
14:34:23: Write Speed Factor R2W_FACTOR                 :0x2
14:34:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:23: FILE_FORMAT_GRP                               :0x0
14:34:23: COPY flag                                     :0x1
14:34:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:23: File_Format                                   :0x0
14:34:23: CRC                                           :0x0
14:34:23: ####CSD Registe Values####  

14:34:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:23: [GetSCRRegisterEntry] Passed
14:34:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:23: Data_Status_After Erases          : 0
14:34:23: CPRM Security Support             : No Security
14:34:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:23: Spec. Version                     : Version 3.0X
14:34:23: Extended Security Support         : Extended_Security_Not_Supported
14:34:23: Command Support                   : COMMAND_SUPPORT
14:34:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B5A0>, <py_sfcl.CommandDataDefinition object at 0x05E0F420>) , Command count = 1324 ] 
14:34:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BFC0>) , Command count = 1325 ] 
14:34:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:23: [ SetBusWidth(0x4) , Command count = 1326 ] 
14:34:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1327 ] 
14:34:23: Protected Area Size 0x28000
14:34:23: Bus Width           2
14:34:23: Secure Mode         0
14:34:23: Speed  Class        4
14:34:23: Perf Move           0
14:34:23: Au Size             9
14:34:23: Erase Size          15
14:34:23: Erase Timeout       1
14:34:23: Erase offset        1
14:34:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1328 ] 
14:34:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:23: Host Frequency set to 100000 KHz
14:34:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:23: ####CSD Registe 2.0 Values####
14:34:23: CSD_STRUCTURE                                 :0x1
14:34:23: Reserv1                                       :0x0
14:34:23: Time Access 1 TAAC                            :0xe
14:34:23: Time Access 2 NSAC*100                        :0x0
14:34:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:23: Card Command Classess CCC                     :0x5b5
14:34:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:23: DSR(driver stage register)  DSR_IMP           :0x0
14:34:23: Reserv2                                       :0x0
14:34:23: Device Size C_SIZE                            :0xedc8
14:34:23: Reserv3                                       :0x0
14:34:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:23: Reserv4                                       :0x0
14:34:23: Write Speed Factor R2W_FACTOR                 :0x2
14:34:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:23: FILE_FORMAT_GRP                               :0x0
14:34:23: COPY flag                                     :0x1
14:34:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:23: File_Format                                   :0x0
14:34:23: CRC                                           :0x0
14:34:23: ####CSD Registe Values####  

14:34:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BF30>, <py_sfcl.CommandDataDefinition object at 0x05DE97B0>) , Command count = 1329 ] 
14:34:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05E0FA20>) , Command count = 1330 ] 
14:34:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF50F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F210>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F690>, <None>, <py_sfcl.Command23 object at 0x05E0BCF0>) , Command count = 1331 ] 
14:34:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:26: Host Frequency set to 25000 KHz
14:34:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0525B4B0>, 0x0, True) , Command count = 1332 ] 
14:34:26: [GO18_globalSetVolt]### Host voltage value is set.
14:34:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5480>, 0x0, False) , Command count = 1333 ] 
14:34:26: [GO18_globalSetVolt]### Host voltage value is set.
14:34:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1334 ] 
14:34:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1335 ] 
14:34:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1336 ] 
14:34:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5510>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 1337 ] 
14:34:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CF0>, <py_sfcl.CommandDataDefinition object at 0x05DF5240>) , Command count = 1338 ] 
14:34:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1339 ] 
14:34:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:26: Host Frequency set to 25000 KHz
14:34:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:26: ####CSD Registe 2.0 Values####
14:34:26: CSD_STRUCTURE                                 :0x1
14:34:26: Reserv1                                       :0x0
14:34:26: Time Access 1 TAAC                            :0xe
14:34:26: Time Access 2 NSAC*100                        :0x0
14:34:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:26: Card Command Classess CCC                     :0x5b5
14:34:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:26: DSR(driver stage register)  DSR_IMP           :0x0
14:34:26: Reserv2                                       :0x0
14:34:26: Device Size C_SIZE                            :0xedc8
14:34:26: Reserv3                                       :0x0
14:34:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:26: Reserv4                                       :0x0
14:34:26: Write Speed Factor R2W_FACTOR                 :0x2
14:34:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:26: FILE_FORMAT_GRP                               :0x0
14:34:26: COPY flag                                     :0x1
14:34:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:26: File_Format                                   :0x0
14:34:26: CRC                                           :0x0
14:34:26: ####CSD Registe Values####  

14:34:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:26: [GetSCRRegisterEntry] Passed
14:34:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:26: Data_Status_After Erases          : 0
14:34:26: CPRM Security Support             : No Security
14:34:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:26: Spec. Version                     : Version 3.0X
14:34:26: Extended Security Support         : Extended_Security_Not_Supported
14:34:26: Command Support                   : COMMAND_SUPPORT
14:34:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F90>, <py_sfcl.CommandDataDefinition object at 0x05DE9C00>) , Command count = 1340 ] 
14:34:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DB0>, <py_sfcl.CommandDataDefinition object at 0x05DF5600>) , Command count = 1341 ] 
14:34:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:26: [ SetBusWidth(0x4) , Command count = 1342 ] 
14:34:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1343 ] 
14:34:26: Protected Area Size 0x28000
14:34:26: Bus Width           2
14:34:26: Secure Mode         0
14:34:26: Speed  Class        4
14:34:26: Perf Move           0
14:34:26: Au Size             9
14:34:26: Erase Size          15
14:34:26: Erase Timeout       1
14:34:26: Erase offset        1
14:34:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1344 ] 
14:34:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:26: Host Frequency set to 100000 KHz
14:34:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:26: ####CSD Registe 2.0 Values####
14:34:26: CSD_STRUCTURE                                 :0x1
14:34:26: Reserv1                                       :0x0
14:34:26: Time Access 1 TAAC                            :0xe
14:34:26: Time Access 2 NSAC*100                        :0x0
14:34:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:26: Card Command Classess CCC                     :0x5b5
14:34:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:27: DSR(driver stage register)  DSR_IMP           :0x0
14:34:27: Reserv2                                       :0x0
14:34:27: Device Size C_SIZE                            :0xedc8
14:34:27: Reserv3                                       :0x0
14:34:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:27: Reserv4                                       :0x0
14:34:27: Write Speed Factor R2W_FACTOR                 :0x2
14:34:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:27: FILE_FORMAT_GRP                               :0x0
14:34:27: COPY flag                                     :0x1
14:34:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:27: File_Format                                   :0x0
14:34:27: CRC                                           :0x0
14:34:27: ####CSD Registe Values####  

14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05DF54B0>) , Command count = 1345 ] 
14:34:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC00>) , Command count = 1346 ] 
14:34:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FF90>, <py_sfcl.PySEnhancedCmdData object at 0x05E07CF0>, <None>, <py_sfcl.Command23 object at 0x05E0F060>) , Command count = 1347 ] 
14:34:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:29: Host Frequency set to 25000 KHz
14:34:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9A20>, 0x0, True) , Command count = 1348 ] 
14:34:29: [GO18_globalSetVolt]### Host voltage value is set.
14:34:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9810>, 0x0, False) , Command count = 1349 ] 
14:34:29: [GO18_globalSetVolt]### Host voltage value is set.
14:34:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1350 ] 
14:34:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1351 ] 
14:34:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1352 ] 
14:34:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E70>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 1353 ] 
14:34:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F90>, <py_sfcl.CommandDataDefinition object at 0x05E00630>) , Command count = 1354 ] 
14:34:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1355 ] 
14:34:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:30: Host Frequency set to 25000 KHz
14:34:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:30: ####CSD Registe 2.0 Values####
14:34:30: CSD_STRUCTURE                                 :0x1
14:34:30: Reserv1                                       :0x0
14:34:30: Time Access 1 TAAC                            :0xe
14:34:30: Time Access 2 NSAC*100                        :0x0
14:34:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:30: Card Command Classess CCC                     :0x5b5
14:34:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:30: DSR(driver stage register)  DSR_IMP           :0x0
14:34:30: Reserv2                                       :0x0
14:34:30: Device Size C_SIZE                            :0xedc8
14:34:30: Reserv3                                       :0x0
14:34:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:30: Reserv4                                       :0x0
14:34:30: Write Speed Factor R2W_FACTOR                 :0x2
14:34:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:30: FILE_FORMAT_GRP                               :0x0
14:34:30: COPY flag                                     :0x1
14:34:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:30: File_Format                                   :0x0
14:34:30: CRC                                           :0x0
14:34:30: ####CSD Registe Values####  

14:34:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:30: [GetSCRRegisterEntry] Passed
14:34:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:30: Data_Status_After Erases          : 0
14:34:30: CPRM Security Support             : No Security
14:34:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:30: Spec. Version                     : Version 3.0X
14:34:30: Extended Security Support         : Extended_Security_Not_Supported
14:34:30: Command Support                   : COMMAND_SUPPORT
14:34:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB570>, <py_sfcl.CommandDataDefinition object at 0x05DF5BA0>) , Command count = 1356 ] 
14:34:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05DF5D50>) , Command count = 1357 ] 
14:34:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:30: [ SetBusWidth(0x4) , Command count = 1358 ] 
14:34:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1359 ] 
14:34:30: Protected Area Size 0x28000
14:34:30: Bus Width           2
14:34:30: Secure Mode         0
14:34:30: Speed  Class        4
14:34:30: Perf Move           0
14:34:30: Au Size             9
14:34:30: Erase Size          15
14:34:30: Erase Timeout       1
14:34:30: Erase offset        1
14:34:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1360 ] 
14:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:30: Host Frequency set to 100000 KHz
14:34:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:30: ####CSD Registe 2.0 Values####
14:34:30: CSD_STRUCTURE                                 :0x1
14:34:30: Reserv1                                       :0x0
14:34:30: Time Access 1 TAAC                            :0xe
14:34:30: Time Access 2 NSAC*100                        :0x0
14:34:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:30: Card Command Classess CCC                     :0x5b5
14:34:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:30: DSR(driver stage register)  DSR_IMP           :0x0
14:34:30: Reserv2                                       :0x0
14:34:30: Device Size C_SIZE                            :0xedc8
14:34:30: Reserv3                                       :0x0
14:34:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:30: Reserv4                                       :0x0
14:34:30: Write Speed Factor R2W_FACTOR                 :0x2
14:34:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:30: FILE_FORMAT_GRP                               :0x0
14:34:30: COPY flag                                     :0x1
14:34:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:30: File_Format                                   :0x0
14:34:30: CRC                                           :0x0
14:34:30: ####CSD Registe Values####  

14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB450>, <py_sfcl.CommandDataDefinition object at 0x05DF5870>) , Command count = 1361 ] 
14:34:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5930>, <py_sfcl.CommandDataDefinition object at 0x05DF55A0>) , Command count = 1362 ] 
14:34:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5BD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5B40>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5F30>, <None>, <py_sfcl.Command23 object at 0x05DF52A0>) , Command count = 1363 ] 
14:34:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:33: Host Frequency set to 25000 KHz
14:34:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B70>, 0x0, True) , Command count = 1364 ] 
14:34:33: [GO18_globalSetVolt]### Host voltage value is set.
14:34:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBD80>, 0x0, False) , Command count = 1365 ] 
14:34:33: [GO18_globalSetVolt]### Host voltage value is set.
14:34:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1366 ] 
14:34:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1367 ] 
14:34:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1368 ] 
14:34:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 1369 ] 
14:34:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F60>, <py_sfcl.CommandDataDefinition object at 0x05DFBB10>) , Command count = 1370 ] 
14:34:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1371 ] 
14:34:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:33: Host Frequency set to 25000 KHz
14:34:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:33: ####CSD Registe 2.0 Values####
14:34:33: CSD_STRUCTURE                                 :0x1
14:34:33: Reserv1                                       :0x0
14:34:33: Time Access 1 TAAC                            :0xe
14:34:33: Time Access 2 NSAC*100                        :0x0
14:34:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:33: Card Command Classess CCC                     :0x5b5
14:34:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:33: DSR(driver stage register)  DSR_IMP           :0x0
14:34:33: Reserv2                                       :0x0
14:34:33: Device Size C_SIZE                            :0xedc8
14:34:33: Reserv3                                       :0x0
14:34:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:33: Reserv4                                       :0x0
14:34:33: Write Speed Factor R2W_FACTOR                 :0x2
14:34:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:33: FILE_FORMAT_GRP                               :0x0
14:34:33: COPY flag                                     :0x1
14:34:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:33: File_Format                                   :0x0
14:34:33: CRC                                           :0x0
14:34:33: ####CSD Registe Values####  

14:34:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:33: [GetSCRRegisterEntry] Passed
14:34:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:33: Data_Status_After Erases          : 0
14:34:33: CPRM Security Support             : No Security
14:34:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:33: Spec. Version                     : Version 3.0X
14:34:33: Extended Security Support         : Extended_Security_Not_Supported
14:34:33: Command Support                   : COMMAND_SUPPORT
14:34:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 1372 ] 
14:34:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00090>, <py_sfcl.CommandDataDefinition object at 0x05E0FD20>) , Command count = 1373 ] 
14:34:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:33: [ SetBusWidth(0x4) , Command count = 1374 ] 
14:34:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1375 ] 
14:34:33: Protected Area Size 0x28000
14:34:33: Bus Width           2
14:34:33: Secure Mode         0
14:34:33: Speed  Class        4
14:34:33: Perf Move           0
14:34:33: Au Size             9
14:34:33: Erase Size          15
14:34:33: Erase Timeout       1
14:34:33: Erase offset        1
14:34:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1376 ] 
14:34:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:33: Host Frequency set to 100000 KHz
14:34:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:33: ####CSD Registe 2.0 Values####
14:34:33: CSD_STRUCTURE                                 :0x1
14:34:33: Reserv1                                       :0x0
14:34:33: Time Access 1 TAAC                            :0xe
14:34:33: Time Access 2 NSAC*100                        :0x0
14:34:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:33: Card Command Classess CCC                     :0x5b5
14:34:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:33: DSR(driver stage register)  DSR_IMP           :0x0
14:34:33: Reserv2                                       :0x0
14:34:33: Device Size C_SIZE                            :0xedc8
14:34:33: Reserv3                                       :0x0
14:34:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:33: Reserv4                                       :0x0
14:34:34: Write Speed Factor R2W_FACTOR                 :0x2
14:34:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:34: FILE_FORMAT_GRP                               :0x0
14:34:34: COPY flag                                     :0x1
14:34:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:34: File_Format                                   :0x0
14:34:34: CRC                                           :0x0
14:34:34: ####CSD Registe Values####  

14:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFB840>) , Command count = 1377 ] 
14:34:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC00>, <py_sfcl.CommandDataDefinition object at 0x05DFB030>) , Command count = 1378 ] 
14:34:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E000F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBFC0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB930>, <None>, <py_sfcl.Command23 object at 0x05DF55D0>) , Command count = 1379 ] 
14:34:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:36: Host Frequency set to 25000 KHz
14:34:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB420>, 0x0, True) , Command count = 1380 ] 
14:34:36: [GO18_globalSetVolt]### Host voltage value is set.
14:34:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB1B0>, 0x0, False) , Command count = 1381 ] 
14:34:36: [GO18_globalSetVolt]### Host voltage value is set.
14:34:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1382 ] 
14:34:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1383 ] 
14:34:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1384 ] 
14:34:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DFB5A0>) , Command count = 1385 ] 
14:34:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py_sfcl.CommandDataDefinition object at 0x05DFB4B0>) , Command count = 1386 ] 
14:34:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1387 ] 
14:34:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:37: Host Frequency set to 25000 KHz
14:34:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:37: ####CSD Registe 2.0 Values####
14:34:37: CSD_STRUCTURE                                 :0x1
14:34:37: Reserv1                                       :0x0
14:34:37: Time Access 1 TAAC                            :0xe
14:34:37: Time Access 2 NSAC*100                        :0x0
14:34:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:37: Card Command Classess CCC                     :0x5b5
14:34:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:37: DSR(driver stage register)  DSR_IMP           :0x0
14:34:37: Reserv2                                       :0x0
14:34:37: Device Size C_SIZE                            :0xedc8
14:34:37: Reserv3                                       :0x0
14:34:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:37: Reserv4                                       :0x0
14:34:37: Write Speed Factor R2W_FACTOR                 :0x2
14:34:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:37: FILE_FORMAT_GRP                               :0x0
14:34:37: COPY flag                                     :0x1
14:34:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:37: File_Format                                   :0x0
14:34:37: CRC                                           :0x0
14:34:37: ####CSD Registe Values####  

14:34:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:37: [GetSCRRegisterEntry] Passed
14:34:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:37: Data_Status_After Erases          : 0
14:34:37: CPRM Security Support             : No Security
14:34:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:37: Spec. Version                     : Version 3.0X
14:34:37: Extended Security Support         : Extended_Security_Not_Supported
14:34:37: Command Support                   : COMMAND_SUPPORT
14:34:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E002D0>, <py_sfcl.CommandDataDefinition object at 0x05DFBCF0>) , Command count = 1388 ] 
14:34:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00360>, <py_sfcl.CommandDataDefinition object at 0x05E00450>) , Command count = 1389 ] 
14:34:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:37: [ SetBusWidth(0x4) , Command count = 1390 ] 
14:34:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1391 ] 
14:34:37: Protected Area Size 0x28000
14:34:37: Bus Width           2
14:34:37: Secure Mode         0
14:34:37: Speed  Class        4
14:34:37: Perf Move           0
14:34:37: Au Size             9
14:34:37: Erase Size          15
14:34:37: Erase Timeout       1
14:34:37: Erase offset        1
14:34:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1392 ] 
14:34:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:37: Host Frequency set to 100000 KHz
14:34:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:37: ####CSD Registe 2.0 Values####
14:34:37: CSD_STRUCTURE                                 :0x1
14:34:37: Reserv1                                       :0x0
14:34:37: Time Access 1 TAAC                            :0xe
14:34:37: Time Access 2 NSAC*100                        :0x0
14:34:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:37: Card Command Classess CCC                     :0x5b5
14:34:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:37: DSR(driver stage register)  DSR_IMP           :0x0
14:34:37: Reserv2                                       :0x0
14:34:37: Device Size C_SIZE                            :0xedc8
14:34:37: Reserv3                                       :0x0
14:34:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:37: Reserv4                                       :0x0
14:34:37: Write Speed Factor R2W_FACTOR                 :0x2
14:34:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:37: FILE_FORMAT_GRP                               :0x0
14:34:37: COPY flag                                     :0x1
14:34:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:37: File_Format                                   :0x0
14:34:37: CRC                                           :0x0
14:34:37: ####CSD Registe Values####  

14:34:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004E0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 1393 ] 
14:34:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBD0>, <py_sfcl.CommandDataDefinition object at 0x05DFB300>) , Command count = 1394 ] 
14:34:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBF90>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB1E0>, <None>, <py_sfcl.Command23 object at 0x05DFB7E0>) , Command count = 1395 ] 
14:34:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:39: Host Frequency set to 25000 KHz
14:34:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBEA0>, 0x0, True) , Command count = 1396 ] 
14:34:39: [GO18_globalSetVolt]### Host voltage value is set.
14:34:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB690>, 0x0, False) , Command count = 1397 ] 
14:34:39: [GO18_globalSetVolt]### Host voltage value is set.
14:34:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1398 ] 
14:34:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1399 ] 
14:34:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1400 ] 
14:34:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E005A0>, <py_sfcl.CommandDataDefinition object at 0x05E00060>) , Command count = 1401 ] 
14:34:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7E0>, <py_sfcl.CommandDataDefinition object at 0x05E0F510>) , Command count = 1402 ] 
14:34:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1403 ] 
14:34:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:40: Host Frequency set to 25000 KHz
14:34:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:40: ####CSD Registe 2.0 Values####
14:34:40: CSD_STRUCTURE                                 :0x1
14:34:40: Reserv1                                       :0x0
14:34:40: Time Access 1 TAAC                            :0xe
14:34:40: Time Access 2 NSAC*100                        :0x0
14:34:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:40: Card Command Classess CCC                     :0x5b5
14:34:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:40: DSR(driver stage register)  DSR_IMP           :0x0
14:34:40: Reserv2                                       :0x0
14:34:40: Device Size C_SIZE                            :0xedc8
14:34:40: Reserv3                                       :0x0
14:34:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:40: Reserv4                                       :0x0
14:34:40: Write Speed Factor R2W_FACTOR                 :0x2
14:34:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:40: FILE_FORMAT_GRP                               :0x0
14:34:40: COPY flag                                     :0x1
14:34:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:40: File_Format                                   :0x0
14:34:40: CRC                                           :0x0
14:34:40: ####CSD Registe Values####  

14:34:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:40: [GetSCRRegisterEntry] Passed
14:34:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:40: Data_Status_After Erases          : 0
14:34:40: CPRM Security Support             : No Security
14:34:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:40: Spec. Version                     : Version 3.0X
14:34:40: Extended Security Support         : Extended_Security_Not_Supported
14:34:40: Command Support                   : COMMAND_SUPPORT
14:34:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00810>, <py_sfcl.CommandDataDefinition object at 0x05E006C0>) , Command count = 1404 ] 
14:34:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05E0F0F0>) , Command count = 1405 ] 
14:34:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:40: [ SetBusWidth(0x4) , Command count = 1406 ] 
14:34:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1407 ] 
14:34:40: Protected Area Size 0x28000
14:34:40: Bus Width           2
14:34:40: Secure Mode         0
14:34:40: Speed  Class        4
14:34:40: Perf Move           0
14:34:40: Au Size             9
14:34:40: Erase Size          15
14:34:40: Erase Timeout       1
14:34:40: Erase offset        1
14:34:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1408 ] 
14:34:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:40: Host Frequency set to 100000 KHz
14:34:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:40: ####CSD Registe 2.0 Values####
14:34:40: CSD_STRUCTURE                                 :0x1
14:34:40: Reserv1                                       :0x0
14:34:40: Time Access 1 TAAC                            :0xe
14:34:40: Time Access 2 NSAC*100                        :0x0
14:34:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:40: Card Command Classess CCC                     :0x5b5
14:34:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:40: DSR(driver stage register)  DSR_IMP           :0x0
14:34:40: Reserv2                                       :0x0
14:34:40: Device Size C_SIZE                            :0xedc8
14:34:40: Reserv3                                       :0x0
14:34:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:40: Reserv4                                       :0x0
14:34:40: Write Speed Factor R2W_FACTOR                 :0x2
14:34:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:40: FILE_FORMAT_GRP                               :0x0
14:34:40: COPY flag                                     :0x1
14:34:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:40: File_Format                                   :0x0
14:34:40: CRC                                           :0x0
14:34:40: ####CSD Registe Values####  

14:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008A0>, <py_sfcl.CommandDataDefinition object at 0x05E00030>) , Command count = 1409 ] 
14:34:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC60>, <py_sfcl.CommandDataDefinition object at 0x05E00390>) , Command count = 1410 ] 
14:34:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E009C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E007B0>, <None>, <py_sfcl.Command23 object at 0x05DFBA80>) , Command count = 1411 ] 
14:34:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:43: Host Frequency set to 25000 KHz
14:34:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB390>, 0x0, True) , Command count = 1412 ] 
14:34:43: [GO18_globalSetVolt]### Host voltage value is set.
14:34:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB2A0>, 0x0, False) , Command count = 1413 ] 
14:34:43: [GO18_globalSetVolt]### Host voltage value is set.
14:34:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1414 ] 
14:34:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1415 ] 
14:34:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1416 ] 
14:34:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FAE0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 1417 ] 
14:34:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB780>, <py_sfcl.CommandDataDefinition object at 0x05E00900>) , Command count = 1418 ] 
14:34:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1419 ] 
14:34:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:43: Host Frequency set to 25000 KHz
14:34:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:43: ####CSD Registe 2.0 Values####
14:34:43: CSD_STRUCTURE                                 :0x1
14:34:43: Reserv1                                       :0x0
14:34:43: Time Access 1 TAAC                            :0xe
14:34:43: Time Access 2 NSAC*100                        :0x0
14:34:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:43: Card Command Classess CCC                     :0x5b5
14:34:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:43: DSR(driver stage register)  DSR_IMP           :0x0
14:34:43: Reserv2                                       :0x0
14:34:43: Device Size C_SIZE                            :0xedc8
14:34:43: Reserv3                                       :0x0
14:34:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:43: Reserv4                                       :0x0
14:34:43: Write Speed Factor R2W_FACTOR                 :0x2
14:34:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:43: FILE_FORMAT_GRP                               :0x0
14:34:43: COPY flag                                     :0x1
14:34:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:43: File_Format                                   :0x0
14:34:43: CRC                                           :0x0
14:34:43: ####CSD Registe Values####  

14:34:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:43: [GetSCRRegisterEntry] Passed
14:34:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:43: Data_Status_After Erases          : 0
14:34:43: CPRM Security Support             : No Security
14:34:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:43: Spec. Version                     : Version 3.0X
14:34:43: Extended Security Support         : Extended_Security_Not_Supported
14:34:43: Command Support                   : COMMAND_SUPPORT
14:34:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04240>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 1420 ] 
14:34:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE70>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 1421 ] 
14:34:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:43: [ SetBusWidth(0x4) , Command count = 1422 ] 
14:34:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1423 ] 
14:34:43: Protected Area Size 0x28000
14:34:43: Bus Width           2
14:34:43: Secure Mode         0
14:34:43: Speed  Class        4
14:34:43: Perf Move           0
14:34:43: Au Size             9
14:34:43: Erase Size          15
14:34:43: Erase Timeout       1
14:34:43: Erase offset        1
14:34:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1424 ] 
14:34:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:43: Host Frequency set to 100000 KHz
14:34:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:43: ####CSD Registe 2.0 Values####
14:34:43: CSD_STRUCTURE                                 :0x1
14:34:43: Reserv1                                       :0x0
14:34:43: Time Access 1 TAAC                            :0xe
14:34:44: Time Access 2 NSAC*100                        :0x0
14:34:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:44: Card Command Classess CCC                     :0x5b5
14:34:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:44: DSR(driver stage register)  DSR_IMP           :0x0
14:34:44: Reserv2                                       :0x0
14:34:44: Device Size C_SIZE                            :0xedc8
14:34:44: Reserv3                                       :0x0
14:34:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:44: Reserv4                                       :0x0
14:34:44: Write Speed Factor R2W_FACTOR                 :0x2
14:34:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:44: FILE_FORMAT_GRP                               :0x0
14:34:44: COPY flag                                     :0x1
14:34:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:44: File_Format                                   :0x0
14:34:44: CRC                                           :0x0
14:34:44: ####CSD Registe Values####  

14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045D0>, <py_sfcl.CommandDataDefinition object at 0x05E042D0>) , Command count = 1425 ] 
14:34:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00180>, <py_sfcl.CommandDataDefinition object at 0x05E00510>) , Command count = 1426 ] 
14:34:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E003C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00B70>, <None>, <py_sfcl.Command23 object at 0x05E00300>) , Command count = 1427 ] 
14:34:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:46: Host Frequency set to 25000 KHz
14:34:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB6C0>, 0x0, True) , Command count = 1428 ] 
14:34:46: [GO18_globalSetVolt]### Host voltage value is set.
14:34:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04270>, 0x0, False) , Command count = 1429 ] 
14:34:46: [GO18_globalSetVolt]### Host voltage value is set.
14:34:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1430 ] 
14:34:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1431 ] 
14:34:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1432 ] 
14:34:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F600>) , Command count = 1433 ] 
14:34:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB270>, <py_sfcl.CommandDataDefinition object at 0x05E0FA80>) , Command count = 1434 ] 
14:34:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1435 ] 
14:34:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:47: Host Frequency set to 25000 KHz
14:34:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:47: ####CSD Registe 2.0 Values####
14:34:47: CSD_STRUCTURE                                 :0x1
14:34:47: Reserv1                                       :0x0
14:34:47: Time Access 1 TAAC                            :0xe
14:34:47: Time Access 2 NSAC*100                        :0x0
14:34:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:47: Card Command Classess CCC                     :0x5b5
14:34:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:47: DSR(driver stage register)  DSR_IMP           :0x0
14:34:47: Reserv2                                       :0x0
14:34:47: Device Size C_SIZE                            :0xedc8
14:34:47: Reserv3                                       :0x0
14:34:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:47: Reserv4                                       :0x0
14:34:47: Write Speed Factor R2W_FACTOR                 :0x2
14:34:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:47: FILE_FORMAT_GRP                               :0x0
14:34:47: COPY flag                                     :0x1
14:34:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:47: File_Format                                   :0x0
14:34:47: CRC                                           :0x0
14:34:47: ####CSD Registe Values####  

14:34:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:47: [GetSCRRegisterEntry] Passed
14:34:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:47: Data_Status_After Erases          : 0
14:34:47: CPRM Security Support             : No Security
14:34:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:47: Spec. Version                     : Version 3.0X
14:34:47: Extended Security Support         : Extended_Security_Not_Supported
14:34:47: Command Support                   : COMMAND_SUPPORT
14:34:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04750>, <py_sfcl.CommandDataDefinition object at 0x05E04150>) , Command count = 1436 ] 
14:34:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC30>) , Command count = 1437 ] 
14:34:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:47: [ SetBusWidth(0x4) , Command count = 1438 ] 
14:34:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1439 ] 
14:34:47: Protected Area Size 0x28000
14:34:47: Bus Width           2
14:34:47: Secure Mode         0
14:34:47: Speed  Class        4
14:34:47: Perf Move           0
14:34:47: Au Size             9
14:34:47: Erase Size          15
14:34:47: Erase Timeout       1
14:34:47: Erase offset        1
14:34:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1440 ] 
14:34:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:47: Host Frequency set to 100000 KHz
14:34:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:47: ####CSD Registe 2.0 Values####
14:34:47: CSD_STRUCTURE                                 :0x1
14:34:47: Reserv1                                       :0x0
14:34:47: Time Access 1 TAAC                            :0xe
14:34:47: Time Access 2 NSAC*100                        :0x0
14:34:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:47: Card Command Classess CCC                     :0x5b5
14:34:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:47: DSR(driver stage register)  DSR_IMP           :0x0
14:34:47: Reserv2                                       :0x0
14:34:47: Device Size C_SIZE                            :0xedc8
14:34:47: Reserv3                                       :0x0
14:34:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:47: Reserv4                                       :0x0
14:34:47: Write Speed Factor R2W_FACTOR                 :0x2
14:34:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:47: FILE_FORMAT_GRP                               :0x0
14:34:47: COPY flag                                     :0x1
14:34:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:47: File_Format                                   :0x0
14:34:47: CRC                                           :0x0
14:34:47: ####CSD Registe Values####  

14:34:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BD0>, <py_sfcl.CommandDataDefinition object at 0x05E04210>) , Command count = 1441 ] 
14:34:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D50>, <py_sfcl.CommandDataDefinition object at 0x05E00840>) , Command count = 1442 ] 
14:34:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E047B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00FC0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00600>, <None>, <py_sfcl.Command23 object at 0x05E003F0>) , Command count = 1443 ] 
14:34:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:50: Host Frequency set to 25000 KHz
14:34:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00CF0>, 0x0, True) , Command count = 1444 ] 
14:34:50: [GO18_globalSetVolt]### Host voltage value is set.
14:34:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00D80>, 0x0, False) , Command count = 1445 ] 
14:34:50: [GO18_globalSetVolt]### Host voltage value is set.
14:34:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1446 ] 
14:34:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1447 ] 
14:34:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1448 ] 
14:34:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A20>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 1449 ] 
14:34:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A20>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 1450 ] 
14:34:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1451 ] 
14:34:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:50: Host Frequency set to 25000 KHz
14:34:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:50: ####CSD Registe 2.0 Values####
14:34:50: CSD_STRUCTURE                                 :0x1
14:34:50: Reserv1                                       :0x0
14:34:50: Time Access 1 TAAC                            :0xe
14:34:50: Time Access 2 NSAC*100                        :0x0
14:34:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:50: Card Command Classess CCC                     :0x5b5
14:34:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:50: DSR(driver stage register)  DSR_IMP           :0x0
14:34:50: Reserv2                                       :0x0
14:34:50: Device Size C_SIZE                            :0xedc8
14:34:50: Reserv3                                       :0x0
14:34:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:50: Reserv4                                       :0x0
14:34:50: Write Speed Factor R2W_FACTOR                 :0x2
14:34:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:50: FILE_FORMAT_GRP                               :0x0
14:34:50: COPY flag                                     :0x1
14:34:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:50: File_Format                                   :0x0
14:34:50: CRC                                           :0x0
14:34:50: ####CSD Registe Values####  

14:34:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:50: [GetSCRRegisterEntry] Passed
14:34:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:50: Data_Status_After Erases          : 0
14:34:50: CPRM Security Support             : No Security
14:34:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:50: Spec. Version                     : Version 3.0X
14:34:50: Extended Security Support         : Extended_Security_Not_Supported
14:34:50: Command Support                   : COMMAND_SUPPORT
14:34:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04960>, <py_sfcl.CommandDataDefinition object at 0x05E04030>) , Command count = 1452 ] 
14:34:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F8A0>) , Command count = 1453 ] 
14:34:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:50: [ SetBusWidth(0x4) , Command count = 1454 ] 
14:34:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1455 ] 
14:34:50: Protected Area Size 0x28000
14:34:50: Bus Width           2
14:34:50: Secure Mode         0
14:34:50: Speed  Class        4
14:34:50: Perf Move           0
14:34:50: Au Size             9
14:34:50: Erase Size          15
14:34:50: Erase Timeout       1
14:34:50: Erase offset        1
14:34:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1456 ] 
14:34:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:50: Host Frequency set to 100000 KHz
14:34:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:50: ####CSD Registe 2.0 Values####
14:34:50: CSD_STRUCTURE                                 :0x1
14:34:50: Reserv1                                       :0x0
14:34:50: Time Access 1 TAAC                            :0xe
14:34:50: Time Access 2 NSAC*100                        :0x0
14:34:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:50: Card Command Classess CCC                     :0x5b5
14:34:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:50: DSR(driver stage register)  DSR_IMP           :0x0
14:34:50: Reserv2                                       :0x0
14:34:50: Device Size C_SIZE                            :0xedc8
14:34:50: Reserv3                                       :0x0
14:34:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:50: Reserv4                                       :0x0
14:34:50: Write Speed Factor R2W_FACTOR                 :0x2
14:34:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:50: FILE_FORMAT_GRP                               :0x0
14:34:50: COPY flag                                     :0x1
14:34:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:50: File_Format                                   :0x0
14:34:50: CRC                                           :0x0
14:34:50: ####CSD Registe Values####  

14:34:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E048D0>, <py_sfcl.CommandDataDefinition object at 0x05E04420>) , Command count = 1457 ] 
14:34:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04450>, <py_sfcl.CommandDataDefinition object at 0x05E043C0>) , Command count = 1458 ] 
14:34:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04180>, <py_sfcl.PySEnhancedCmdData object at 0x05E041B0>, <None>, <py_sfcl.Command23 object at 0x05E00A80>) , Command count = 1459 ] 
14:34:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:53: Host Frequency set to 25000 KHz
14:34:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00DE0>, 0x0, True) , Command count = 1460 ] 
14:34:53: [GO18_globalSetVolt]### Host voltage value is set.
14:34:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F00>, 0x0, False) , Command count = 1461 ] 
14:34:53: [GO18_globalSetVolt]### Host voltage value is set.
14:34:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1462 ] 
14:34:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1463 ] 
14:34:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1464 ] 
14:34:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C00>, <py_sfcl.CommandDataDefinition object at 0x05E04330>) , Command count = 1465 ] 
14:34:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F6C0>) , Command count = 1466 ] 
14:34:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1467 ] 
14:34:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:53: Host Frequency set to 25000 KHz
14:34:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:53: ####CSD Registe 2.0 Values####
14:34:53: CSD_STRUCTURE                                 :0x1
14:34:53: Reserv1                                       :0x0
14:34:53: Time Access 1 TAAC                            :0xe
14:34:53: Time Access 2 NSAC*100                        :0x0
14:34:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:53: Card Command Classess CCC                     :0x5b5
14:34:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:53: DSR(driver stage register)  DSR_IMP           :0x0
14:34:53: Reserv2                                       :0x0
14:34:53: Device Size C_SIZE                            :0xedc8
14:34:53: Reserv3                                       :0x0
14:34:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:53: Reserv4                                       :0x0
14:34:53: Write Speed Factor R2W_FACTOR                 :0x2
14:34:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:53: FILE_FORMAT_GRP                               :0x0
14:34:53: COPY flag                                     :0x1
14:34:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:53: File_Format                                   :0x0
14:34:53: CRC                                           :0x0
14:34:53: ####CSD Registe Values####  

14:34:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:53: [GetSCRRegisterEntry] Passed
14:34:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:53: Data_Status_After Erases          : 0
14:34:53: CPRM Security Support             : No Security
14:34:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:53: Spec. Version                     : Version 3.0X
14:34:53: Extended Security Support         : Extended_Security_Not_Supported
14:34:53: Command Support                   : COMMAND_SUPPORT
14:34:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04510>, <py_sfcl.CommandDataDefinition object at 0x05E04D80>) , Command count = 1468 ] 
14:34:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B70>, <py_sfcl.CommandDataDefinition object at 0x05E040C0>) , Command count = 1469 ] 
14:34:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:54: [ SetBusWidth(0x4) , Command count = 1470 ] 
14:34:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1471 ] 
14:34:54: Protected Area Size 0x28000
14:34:54: Bus Width           2
14:34:54: Secure Mode         0
14:34:54: Speed  Class        4
14:34:54: Perf Move           0
14:34:54: Au Size             9
14:34:54: Erase Size          15
14:34:54: Erase Timeout       1
14:34:54: Erase offset        1
14:34:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1472 ] 
14:34:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:54: Host Frequency set to 100000 KHz
14:34:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:54: ####CSD Registe 2.0 Values####
14:34:54: CSD_STRUCTURE                                 :0x1
14:34:54: Reserv1                                       :0x0
14:34:54: Time Access 1 TAAC                            :0xe
14:34:54: Time Access 2 NSAC*100                        :0x0
14:34:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:54: Card Command Classess CCC                     :0x5b5
14:34:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:54: DSR(driver stage register)  DSR_IMP           :0x0
14:34:54: Reserv2                                       :0x0
14:34:54: Device Size C_SIZE                            :0xedc8
14:34:54: Reserv3                                       :0x0
14:34:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:54: Reserv4                                       :0x0
14:34:54: Write Speed Factor R2W_FACTOR                 :0x2
14:34:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:54: FILE_FORMAT_GRP                               :0x0
14:34:54: COPY flag                                     :0x1
14:34:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:54: File_Format                                   :0x0
14:34:54: CRC                                           :0x0
14:34:54: ####CSD Registe Values####  

14:34:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04FC0>, <py_sfcl.CommandDataDefinition object at 0x05E04C60>) , Command count = 1473 ] 
14:34:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9900>, <py_sfcl.CommandDataDefinition object at 0x05DF5180>) , Command count = 1474 ] 
14:34:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:54: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04B10>, <py_sfcl.PySEnhancedCmdData object at 0x05E04CC0>, <None>, <py_sfcl.Command23 object at 0x05E07330>) , Command count = 1475 ] 
14:34:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:57: Host Frequency set to 25000 KHz
14:34:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04AB0>, 0x0, True) , Command count = 1476 ] 
14:34:57: [GO18_globalSetVolt]### Host voltage value is set.
14:34:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E075D0>, 0x0, False) , Command count = 1477 ] 
14:34:57: [GO18_globalSetVolt]### Host voltage value is set.
14:34:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1478 ] 
14:34:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1479 ] 
14:34:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1480 ] 
14:34:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E10>, <py_sfcl.CommandDataDefinition object at 0x05E07C00>) , Command count = 1481 ] 
14:34:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E0FEA0>) , Command count = 1482 ] 
14:34:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1483 ] 
14:34:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:57: Host Frequency set to 25000 KHz
14:34:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:57: ####CSD Registe 2.0 Values####
14:34:57: CSD_STRUCTURE                                 :0x1
14:34:57: Reserv1                                       :0x0
14:34:57: Time Access 1 TAAC                            :0xe
14:34:57: Time Access 2 NSAC*100                        :0x0
14:34:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:57: Card Command Classess CCC                     :0x5b5
14:34:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:57: DSR(driver stage register)  DSR_IMP           :0x0
14:34:57: Reserv2                                       :0x0
14:34:57: Device Size C_SIZE                            :0xedc8
14:34:57: Reserv3                                       :0x0
14:34:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:57: Reserv4                                       :0x0
14:34:57: Write Speed Factor R2W_FACTOR                 :0x2
14:34:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:57: FILE_FORMAT_GRP                               :0x0
14:34:57: COPY flag                                     :0x1
14:34:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:57: File_Format                                   :0x0
14:34:57: CRC                                           :0x0
14:34:57: ####CSD Registe Values####  

14:34:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:57: [GetSCRRegisterEntry] Passed
14:34:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:57: Data_Status_After Erases          : 0
14:34:57: CPRM Security Support             : No Security
14:34:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:57: Spec. Version                     : Version 3.0X
14:34:57: Extended Security Support         : Extended_Security_Not_Supported
14:34:57: Command Support                   : COMMAND_SUPPORT
14:34:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F300>) , Command count = 1484 ] 
14:34:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 1485 ] 
14:34:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:57: [ SetBusWidth(0x4) , Command count = 1486 ] 
14:34:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1487 ] 
14:34:57: Protected Area Size 0x28000
14:34:57: Bus Width           2
14:34:57: Secure Mode         0
14:34:57: Speed  Class        4
14:34:57: Perf Move           0
14:34:57: Au Size             9
14:34:57: Erase Size          15
14:34:57: Erase Timeout       1
14:34:57: Erase offset        1
14:34:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1488 ] 
14:34:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:57: Host Frequency set to 100000 KHz
14:34:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:57: ####CSD Registe 2.0 Values####
14:34:57: CSD_STRUCTURE                                 :0x1
14:34:57: Reserv1                                       :0x0
14:34:57: Time Access 1 TAAC                            :0xe
14:34:57: Time Access 2 NSAC*100                        :0x0
14:34:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:57: Card Command Classess CCC                     :0x5b5
14:34:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:57: DSR(driver stage register)  DSR_IMP           :0x0
14:34:57: Reserv2                                       :0x0
14:34:57: Device Size C_SIZE                            :0xedc8
14:34:57: Reserv3                                       :0x0
14:34:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:57: Reserv4                                       :0x0
14:34:58: Write Speed Factor R2W_FACTOR                 :0x2
14:34:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:58: FILE_FORMAT_GRP                               :0x0
14:34:58: COPY flag                                     :0x1
14:34:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:58: File_Format                                   :0x0
14:34:58: CRC                                           :0x0
14:34:58: ####CSD Registe Values####  

14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 1489 ] 
14:34:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07210>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 1490 ] 
14:34:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:34:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:34:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B0F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07450>, <py_sfcl.PySEnhancedCmdData object at 0x05E070C0>, <None>, <py_sfcl.Command23 object at 0x05E07240>) , Command count = 1491 ] 
14:34:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:34:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:00: Host Frequency set to 25000 KHz
14:35:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04BA0>, 0x0, True) , Command count = 1492 ] 
14:35:00: [GO18_globalSetVolt]### Host voltage value is set.
14:35:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5AE0>, 0x0, False) , Command count = 1493 ] 
14:35:00: [GO18_globalSetVolt]### Host voltage value is set.
14:35:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1494 ] 
14:35:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1495 ] 
14:35:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1496 ] 
14:35:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FE10>, <py_sfcl.CommandDataDefinition object at 0x05E07C30>) , Command count = 1497 ] 
14:35:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04AE0>, <py_sfcl.CommandDataDefinition object at 0x05E0FF60>) , Command count = 1498 ] 
14:35:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1499 ] 
14:35:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:00: Host Frequency set to 25000 KHz
14:35:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:00: ####CSD Registe 2.0 Values####
14:35:00: CSD_STRUCTURE                                 :0x1
14:35:00: Reserv1                                       :0x0
14:35:00: Time Access 1 TAAC                            :0xe
14:35:00: Time Access 2 NSAC*100                        :0x0
14:35:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:00: Card Command Classess CCC                     :0x5b5
14:35:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:00: DSR(driver stage register)  DSR_IMP           :0x0
14:35:00: Reserv2                                       :0x0
14:35:00: Device Size C_SIZE                            :0xedc8
14:35:00: Reserv3                                       :0x0
14:35:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:00: Reserv4                                       :0x0
14:35:00: Write Speed Factor R2W_FACTOR                 :0x2
14:35:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:00: FILE_FORMAT_GRP                               :0x0
14:35:00: COPY flag                                     :0x1
14:35:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:00: File_Format                                   :0x0
14:35:00: CRC                                           :0x0
14:35:00: ####CSD Registe Values####  

14:35:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:00: [GetSCRRegisterEntry] Passed
14:35:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:00: Data_Status_After Erases          : 0
14:35:00: CPRM Security Support             : No Security
14:35:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:00: Spec. Version                     : Version 3.0X
14:35:00: Extended Security Support         : Extended_Security_Not_Supported
14:35:00: Command Support                   : COMMAND_SUPPORT
14:35:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2D0>, <py_sfcl.CommandDataDefinition object at 0x05E07540>) , Command count = 1500 ] 
14:35:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B40>, <py_sfcl.CommandDataDefinition object at 0x05E07630>) , Command count = 1501 ] 
14:35:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:00: [ SetBusWidth(0x4) , Command count = 1502 ] 
14:35:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1503 ] 
14:35:00: Protected Area Size 0x28000
14:35:00: Bus Width           2
14:35:00: Secure Mode         0
14:35:00: Speed  Class        4
14:35:00: Perf Move           0
14:35:00: Au Size             9
14:35:00: Erase Size          15
14:35:00: Erase Timeout       1
14:35:00: Erase offset        1
14:35:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1504 ] 
14:35:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:00: Host Frequency set to 100000 KHz
14:35:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:00: ####CSD Registe 2.0 Values####
14:35:00: CSD_STRUCTURE                                 :0x1
14:35:00: Reserv1                                       :0x0
14:35:00: Time Access 1 TAAC                            :0xe
14:35:00: Time Access 2 NSAC*100                        :0x0
14:35:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:00: Card Command Classess CCC                     :0x5b5
14:35:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:01: DSR(driver stage register)  DSR_IMP           :0x0
14:35:01: Reserv2                                       :0x0
14:35:01: Device Size C_SIZE                            :0xedc8
14:35:01: Reserv3                                       :0x0
14:35:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:01: Reserv4                                       :0x0
14:35:01: Write Speed Factor R2W_FACTOR                 :0x2
14:35:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:01: FILE_FORMAT_GRP                               :0x0
14:35:01: COPY flag                                     :0x1
14:35:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:01: File_Format                                   :0x0
14:35:01: CRC                                           :0x0
14:35:01: ####CSD Registe Values####  

14:35:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B150>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 1505 ] 
14:35:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B810>, <py_sfcl.CommandDataDefinition object at 0x05E07270>) , Command count = 1506 ] 
14:35:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B7B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E073C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07EA0>, <None>, <py_sfcl.Command23 object at 0x05E07BD0>) , Command count = 1507 ] 
14:35:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:03: Host Frequency set to 25000 KHz
14:35:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07840>, 0x0, True) , Command count = 1508 ] 
14:35:03: [GO18_globalSetVolt]### Host voltage value is set.
14:35:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B8D0>, 0x0, False) , Command count = 1509 ] 
14:35:03: [GO18_globalSetVolt]### Host voltage value is set.
14:35:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1510 ] 
14:35:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1511 ] 
14:35:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1512 ] 
14:35:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2A0>, <py_sfcl.CommandDataDefinition object at 0x05E0BA20>) , Command count = 1513 ] 
14:35:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F870>, <py_sfcl.CommandDataDefinition object at 0x05E0FF00>) , Command count = 1514 ] 
14:35:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1515 ] 
14:35:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:04: Host Frequency set to 25000 KHz
14:35:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:04: ####CSD Registe 2.0 Values####
14:35:04: CSD_STRUCTURE                                 :0x1
14:35:04: Reserv1                                       :0x0
14:35:04: Time Access 1 TAAC                            :0xe
14:35:04: Time Access 2 NSAC*100                        :0x0
14:35:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:04: Card Command Classess CCC                     :0x5b5
14:35:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:04: DSR(driver stage register)  DSR_IMP           :0x0
14:35:04: Reserv2                                       :0x0
14:35:04: Device Size C_SIZE                            :0xedc8
14:35:04: Reserv3                                       :0x0
14:35:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:04: Reserv4                                       :0x0
14:35:04: Write Speed Factor R2W_FACTOR                 :0x2
14:35:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:04: FILE_FORMAT_GRP                               :0x0
14:35:04: COPY flag                                     :0x1
14:35:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:04: File_Format                                   :0x0
14:35:04: CRC                                           :0x0
14:35:04: ####CSD Registe Values####  

14:35:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:04: [GetSCRRegisterEntry] Passed
14:35:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:04: Data_Status_After Erases          : 0
14:35:04: CPRM Security Support             : No Security
14:35:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:04: Spec. Version                     : Version 3.0X
14:35:04: Extended Security Support         : Extended_Security_Not_Supported
14:35:04: Command Support                   : COMMAND_SUPPORT
14:35:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB40>, <py_sfcl.CommandDataDefinition object at 0x05E0B0C0>) , Command count = 1516 ] 
14:35:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B240>, <py_sfcl.CommandDataDefinition object at 0x05E0BA80>) , Command count = 1517 ] 
14:35:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:04: [ SetBusWidth(0x4) , Command count = 1518 ] 
14:35:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1519 ] 
14:35:04: Protected Area Size 0x28000
14:35:04: Bus Width           2
14:35:04: Secure Mode         0
14:35:04: Speed  Class        4
14:35:04: Perf Move           0
14:35:04: Au Size             9
14:35:04: Erase Size          15
14:35:04: Erase Timeout       1
14:35:04: Erase offset        1
14:35:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1520 ] 
14:35:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:04: Host Frequency set to 100000 KHz
14:35:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:04: ####CSD Registe 2.0 Values####
14:35:04: CSD_STRUCTURE                                 :0x1
14:35:04: Reserv1                                       :0x0
14:35:04: Time Access 1 TAAC                            :0xe
14:35:04: Time Access 2 NSAC*100                        :0x0
14:35:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:04: Card Command Classess CCC                     :0x5b5
14:35:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:04: DSR(driver stage register)  DSR_IMP           :0x0
14:35:04: Reserv2                                       :0x0
14:35:04: Device Size C_SIZE                            :0xedc8
14:35:04: Reserv3                                       :0x0
14:35:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:04: Reserv4                                       :0x0
14:35:04: Write Speed Factor R2W_FACTOR                 :0x2
14:35:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:04: FILE_FORMAT_GRP                               :0x0
14:35:04: COPY flag                                     :0x1
14:35:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:04: File_Format                                   :0x0
14:35:04: CRC                                           :0x0
14:35:04: ####CSD Registe Values####  

14:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B8A0>, <py_sfcl.CommandDataDefinition object at 0x05E074B0>) , Command count = 1521 ] 
14:35:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B1B0>, <py_sfcl.CommandDataDefinition object at 0x05E07D50>) , Command count = 1522 ] 
14:35:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526F240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E070F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07AB0>, <None>, <py_sfcl.Command23 object at 0x05E07300>) , Command count = 1523 ] 
14:35:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:07: Host Frequency set to 25000 KHz
14:35:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B990>, 0x0, True) , Command count = 1524 ] 
14:35:07: [GO18_globalSetVolt]### Host voltage value is set.
14:35:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05144030>, 0x0, False) , Command count = 1525 ] 
14:35:07: [GO18_globalSetVolt]### Host voltage value is set.
14:35:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1526 ] 
14:35:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1527 ] 
14:35:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1528 ] 
14:35:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526DED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B960>) , Command count = 1529 ] 
14:35:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B570>, <py_sfcl.CommandDataDefinition object at 0x05E0B210>) , Command count = 1530 ] 
14:35:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1531 ] 
14:35:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:07: Host Frequency set to 25000 KHz
14:35:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:07: ####CSD Registe 2.0 Values####
14:35:07: CSD_STRUCTURE                                 :0x1
14:35:07: Reserv1                                       :0x0
14:35:07: Time Access 1 TAAC                            :0xe
14:35:07: Time Access 2 NSAC*100                        :0x0
14:35:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:07: Card Command Classess CCC                     :0x5b5
14:35:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:07: DSR(driver stage register)  DSR_IMP           :0x0
14:35:07: Reserv2                                       :0x0
14:35:07: Device Size C_SIZE                            :0xedc8
14:35:07: Reserv3                                       :0x0
14:35:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:07: Reserv4                                       :0x0
14:35:07: Write Speed Factor R2W_FACTOR                 :0x2
14:35:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:07: FILE_FORMAT_GRP                               :0x0
14:35:07: COPY flag                                     :0x1
14:35:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:07: File_Format                                   :0x0
14:35:07: CRC                                           :0x0
14:35:07: ####CSD Registe Values####  

14:35:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:07: [GetSCRRegisterEntry] Passed
14:35:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:07: Data_Status_After Erases          : 0
14:35:07: CPRM Security Support             : No Security
14:35:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:07: Spec. Version                     : Version 3.0X
14:35:07: Extended Security Support         : Extended_Security_Not_Supported
14:35:07: Command Support                   : COMMAND_SUPPORT
14:35:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B780>) , Command count = 1532 ] 
14:35:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F720>, <py_sfcl.CommandDataDefinition object at 0x05E0FE40>) , Command count = 1533 ] 
14:35:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:07: [ SetBusWidth(0x4) , Command count = 1534 ] 
14:35:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1535 ] 
14:35:07: Protected Area Size 0x28000
14:35:07: Bus Width           2
14:35:07: Secure Mode         0
14:35:07: Speed  Class        4
14:35:07: Perf Move           0
14:35:07: Au Size             9
14:35:07: Erase Size          15
14:35:07: Erase Timeout       1
14:35:07: Erase offset        1
14:35:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1536 ] 
14:35:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:07: Host Frequency set to 100000 KHz
14:35:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:07: ####CSD Registe 2.0 Values####
14:35:07: CSD_STRUCTURE                                 :0x1
14:35:07: Reserv1                                       :0x0
14:35:07: Time Access 1 TAAC                            :0xe
14:35:07: Time Access 2 NSAC*100                        :0x0
14:35:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:07: Card Command Classess CCC                     :0x5b5
14:35:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:07: DSR(driver stage register)  DSR_IMP           :0x0
14:35:07: Reserv2                                       :0x0
14:35:08: Device Size C_SIZE                            :0xedc8
14:35:08: Reserv3                                       :0x0
14:35:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:08: Reserv4                                       :0x0
14:35:08: Write Speed Factor R2W_FACTOR                 :0x2
14:35:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:08: FILE_FORMAT_GRP                               :0x0
14:35:08: COPY flag                                     :0x1
14:35:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:08: File_Format                                   :0x0
14:35:08: CRC                                           :0x0
14:35:08: ####CSD Registe Values####  

14:35:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BE40>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 1537 ] 
14:35:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7E0>, <py_sfcl.CommandDataDefinition object at 0x05E07750>) , Command count = 1538 ] 
14:35:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07C60>, <py_sfcl.PySEnhancedCmdData object at 0x05E07A80>, <None>, <py_sfcl.Command23 object at 0x05E07CC0>) , Command count = 1539 ] 
14:35:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:10: Host Frequency set to 25000 KHz
14:35:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F780>, 0x0, True) , Command count = 1540 ] 
14:35:10: [GO18_globalSetVolt]### Host voltage value is set.
14:35:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FC60>, 0x0, False) , Command count = 1541 ] 
14:35:10: [GO18_globalSetVolt]### Host voltage value is set.
14:35:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1542 ] 
14:35:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1543 ] 
14:35:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1544 ] 
14:35:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E0BE10>) , Command count = 1545 ] 
14:35:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B690>) , Command count = 1546 ] 
14:35:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1547 ] 
14:35:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:11: Host Frequency set to 25000 KHz
14:35:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:11: ####CSD Registe 2.0 Values####
14:35:11: CSD_STRUCTURE                                 :0x1
14:35:11: Reserv1                                       :0x0
14:35:11: Time Access 1 TAAC                            :0xe
14:35:11: Time Access 2 NSAC*100                        :0x0
14:35:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:11: Card Command Classess CCC                     :0x5b5
14:35:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:11: DSR(driver stage register)  DSR_IMP           :0x0
14:35:11: Reserv2                                       :0x0
14:35:11: Device Size C_SIZE                            :0xedc8
14:35:11: Reserv3                                       :0x0
14:35:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:11: Reserv4                                       :0x0
14:35:11: Write Speed Factor R2W_FACTOR                 :0x2
14:35:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:11: FILE_FORMAT_GRP                               :0x0
14:35:11: COPY flag                                     :0x1
14:35:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:11: File_Format                                   :0x0
14:35:11: CRC                                           :0x0
14:35:11: ####CSD Registe Values####  

14:35:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:11: [GetSCRRegisterEntry] Passed
14:35:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:11: Data_Status_After Erases          : 0
14:35:11: CPRM Security Support             : No Security
14:35:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:11: Spec. Version                     : Version 3.0X
14:35:11: Extended Security Support         : Extended_Security_Not_Supported
14:35:11: Command Support                   : COMMAND_SUPPORT
14:35:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF060>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 1548 ] 
14:35:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BDE0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3C0>) , Command count = 1549 ] 
14:35:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:11: [ SetBusWidth(0x4) , Command count = 1550 ] 
14:35:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1551 ] 
14:35:11: Protected Area Size 0x28000
14:35:11: Bus Width           2
14:35:11: Secure Mode         0
14:35:11: Speed  Class        4
14:35:11: Perf Move           0
14:35:11: Au Size             9
14:35:11: Erase Size          15
14:35:11: Erase Timeout       1
14:35:11: Erase offset        1
14:35:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1552 ] 
14:35:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:11: Host Frequency set to 100000 KHz
14:35:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:11: ####CSD Registe 2.0 Values####
14:35:11: CSD_STRUCTURE                                 :0x1
14:35:11: Reserv1                                       :0x0
14:35:11: Time Access 1 TAAC                            :0xe
14:35:11: Time Access 2 NSAC*100                        :0x0
14:35:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:11: Card Command Classess CCC                     :0x5b5
14:35:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:11: DSR(driver stage register)  DSR_IMP           :0x0
14:35:11: Reserv2                                       :0x0
14:35:11: Device Size C_SIZE                            :0xedc8
14:35:11: Reserv3                                       :0x0
14:35:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:11: Reserv4                                       :0x0
14:35:11: Write Speed Factor R2W_FACTOR                 :0x2
14:35:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:11: FILE_FORMAT_GRP                               :0x0
14:35:11: COPY flag                                     :0x1
14:35:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:11: File_Format                                   :0x0
14:35:11: CRC                                           :0x0
14:35:11: ####CSD Registe Values####  

14:35:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B4B0>) , Command count = 1553 ] 
14:35:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F180>, <py_sfcl.CommandDataDefinition object at 0x05E07F30>) , Command count = 1554 ] 
14:35:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07870>, <py_sfcl.PySEnhancedCmdData object at 0x05E07960>, <None>, <py_sfcl.Command23 object at 0x05E078A0>) , Command count = 1555 ] 
14:35:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:14: Host Frequency set to 25000 KHz
14:35:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FBA0>, 0x0, True) , Command count = 1556 ] 
14:35:14: [GO18_globalSetVolt]### Host voltage value is set.
14:35:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F30>, 0x0, False) , Command count = 1557 ] 
14:35:14: [GO18_globalSetVolt]### Host voltage value is set.
14:35:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1558 ] 
14:35:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1559 ] 
14:35:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1560 ] 
14:35:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F60>, <py_sfcl.CommandDataDefinition object at 0x05E0FED0>) , Command count = 1561 ] 
14:35:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F120>, <py_sfcl.CommandDataDefinition object at 0x05E0FE70>) , Command count = 1562 ] 
14:35:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1563 ] 
14:35:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:14: Host Frequency set to 25000 KHz
14:35:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:14: ####CSD Registe 2.0 Values####
14:35:14: CSD_STRUCTURE                                 :0x1
14:35:14: Reserv1                                       :0x0
14:35:14: Time Access 1 TAAC                            :0xe
14:35:14: Time Access 2 NSAC*100                        :0x0
14:35:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:14: Card Command Classess CCC                     :0x5b5
14:35:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:14: DSR(driver stage register)  DSR_IMP           :0x0
14:35:14: Reserv2                                       :0x0
14:35:14: Device Size C_SIZE                            :0xedc8
14:35:14: Reserv3                                       :0x0
14:35:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:14: Reserv4                                       :0x0
14:35:14: Write Speed Factor R2W_FACTOR                 :0x2
14:35:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:14: FILE_FORMAT_GRP                               :0x0
14:35:14: COPY flag                                     :0x1
14:35:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:14: File_Format                                   :0x0
14:35:14: CRC                                           :0x0
14:35:14: ####CSD Registe Values####  

14:35:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:14: [GetSCRRegisterEntry] Passed
14:35:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:14: Data_Status_After Erases          : 0
14:35:14: CPRM Security Support             : No Security
14:35:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:14: Spec. Version                     : Version 3.0X
14:35:14: Extended Security Support         : Extended_Security_Not_Supported
14:35:14: Command Support                   : COMMAND_SUPPORT
14:35:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C90>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 1564 ] 
14:35:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 1565 ] 
14:35:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:14: [ SetBusWidth(0x4) , Command count = 1566 ] 
14:35:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1567 ] 
14:35:14: Protected Area Size 0x28000
14:35:14: Bus Width           2
14:35:14: Secure Mode         0
14:35:14: Speed  Class        4
14:35:14: Perf Move           0
14:35:14: Au Size             9
14:35:14: Erase Size          15
14:35:14: Erase Timeout       1
14:35:14: Erase offset        1
14:35:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1568 ] 
14:35:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:14: Host Frequency set to 100000 KHz
14:35:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:14: ####CSD Registe 2.0 Values####
14:35:14: CSD_STRUCTURE                                 :0x1
14:35:14: Reserv1                                       :0x0
14:35:14: Time Access 1 TAAC                            :0xe
14:35:14: Time Access 2 NSAC*100                        :0x0
14:35:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:14: Card Command Classess CCC                     :0x5b5
14:35:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:14: DSR(driver stage register)  DSR_IMP           :0x0
14:35:14: Reserv2                                       :0x0
14:35:14: Device Size C_SIZE                            :0xedc8
14:35:14: Reserv3                                       :0x0
14:35:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:14: Reserv4                                       :0x0
14:35:14: Write Speed Factor R2W_FACTOR                 :0x2
14:35:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:14: FILE_FORMAT_GRP                               :0x0
14:35:14: COPY flag                                     :0x1
14:35:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:15: File_Format                                   :0x0
14:35:15: CRC                                           :0x0
14:35:15: ####CSD Registe Values####  

14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E044B0>, <py_sfcl.CommandDataDefinition object at 0x05E0BEA0>) , Command count = 1569 ] 
14:35:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0BF90>) , Command count = 1570 ] 
14:35:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BB10>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BC90>, <None>, <py_sfcl.Command23 object at 0x05E078D0>) , Command count = 1571 ] 
14:35:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:17: Host Frequency set to 25000 KHz
14:35:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F1E0>, 0x0, True) , Command count = 1572 ] 
14:35:17: [GO18_globalSetVolt]### Host voltage value is set.
14:35:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B6C0>, 0x0, False) , Command count = 1573 ] 
14:35:17: [GO18_globalSetVolt]### Host voltage value is set.
14:35:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1574 ] 
14:35:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1575 ] 
14:35:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1576 ] 
14:35:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9AB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B4E0>) , Command count = 1577 ] 
14:35:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B4E0>, <py_sfcl.CommandDataDefinition object at 0x05E0F120>) , Command count = 1578 ] 
14:35:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1579 ] 
14:35:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:17: Host Frequency set to 25000 KHz
14:35:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:17: ####CSD Registe 2.0 Values####
14:35:17: CSD_STRUCTURE                                 :0x1
14:35:17: Reserv1                                       :0x0
14:35:17: Time Access 1 TAAC                            :0xe
14:35:17: Time Access 2 NSAC*100                        :0x0
14:35:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:17: Card Command Classess CCC                     :0x5b5
14:35:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:17: DSR(driver stage register)  DSR_IMP           :0x0
14:35:17: Reserv2                                       :0x0
14:35:17: Device Size C_SIZE                            :0xedc8
14:35:17: Reserv3                                       :0x0
14:35:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:17: Reserv4                                       :0x0
14:35:17: Write Speed Factor R2W_FACTOR                 :0x2
14:35:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:17: FILE_FORMAT_GRP                               :0x0
14:35:17: COPY flag                                     :0x1
14:35:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:17: File_Format                                   :0x0
14:35:17: CRC                                           :0x0
14:35:17: ####CSD Registe Values####  

14:35:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:17: [GetSCRRegisterEntry] Passed
14:35:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:17: Data_Status_After Erases          : 0
14:35:17: CPRM Security Support             : No Security
14:35:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:17: Spec. Version                     : Version 3.0X
14:35:17: Extended Security Support         : Extended_Security_Not_Supported
14:35:17: Command Support                   : COMMAND_SUPPORT
14:35:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BFC0>) , Command count = 1580 ] 
14:35:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BF30>, <py_sfcl.CommandDataDefinition object at 0x05DE97B0>) , Command count = 1581 ] 
14:35:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:17: [ SetBusWidth(0x4) , Command count = 1582 ] 
14:35:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1583 ] 
14:35:17: Protected Area Size 0x28000
14:35:17: Bus Width           2
14:35:17: Secure Mode         0
14:35:17: Speed  Class        4
14:35:17: Perf Move           0
14:35:17: Au Size             9
14:35:17: Erase Size          15
14:35:17: Erase Timeout       1
14:35:17: Erase offset        1
14:35:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1584 ] 
14:35:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:18: Host Frequency set to 100000 KHz
14:35:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:18: ####CSD Registe 2.0 Values####
14:35:18: CSD_STRUCTURE                                 :0x1
14:35:18: Reserv1                                       :0x0
14:35:18: Time Access 1 TAAC                            :0xe
14:35:18: Time Access 2 NSAC*100                        :0x0
14:35:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:18: Card Command Classess CCC                     :0x5b5
14:35:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:18: DSR(driver stage register)  DSR_IMP           :0x0
14:35:18: Reserv2                                       :0x0
14:35:18: Device Size C_SIZE                            :0xedc8
14:35:18: Reserv3                                       :0x0
14:35:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:18: Reserv4                                       :0x0
14:35:18: Write Speed Factor R2W_FACTOR                 :0x2
14:35:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:18: FILE_FORMAT_GRP                               :0x0
14:35:18: COPY flag                                     :0x1
14:35:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:18: File_Format                                   :0x0
14:35:18: CRC                                           :0x0
14:35:18: ####CSD Registe Values####  

14:35:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCC0>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 1585 ] 
14:35:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281DE0>, <py_sfcl.CommandDataDefinition object at 0x05281FC0>) , Command count = 1586 ] 
14:35:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F540>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F5A0>, <None>, <py_sfcl.Command23 object at 0x05E0BBD0>) , Command count = 1587 ] 
14:35:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:20: Host Frequency set to 25000 KHz
14:35:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C30>, 0x0, True) , Command count = 1588 ] 
14:35:20: [GO18_globalSetVolt]### Host voltage value is set.
14:35:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5510>, 0x0, False) , Command count = 1589 ] 
14:35:20: [GO18_globalSetVolt]### Host voltage value is set.
14:35:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1590 ] 
14:35:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1591 ] 
14:35:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1592 ] 
14:35:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDE0>, <py_sfcl.CommandDataDefinition object at 0x05DF5750>) , Command count = 1593 ] 
14:35:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF2D0>, <py_sfcl.CommandDataDefinition object at 0x05E0F960>) , Command count = 1594 ] 
14:35:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1595 ] 
14:35:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:21: Host Frequency set to 25000 KHz
14:35:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:21: ####CSD Registe 2.0 Values####
14:35:21: CSD_STRUCTURE                                 :0x1
14:35:21: Reserv1                                       :0x0
14:35:21: Time Access 1 TAAC                            :0xe
14:35:21: Time Access 2 NSAC*100                        :0x0
14:35:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:21: Card Command Classess CCC                     :0x5b5
14:35:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:21: DSR(driver stage register)  DSR_IMP           :0x0
14:35:21: Reserv2                                       :0x0
14:35:21: Device Size C_SIZE                            :0xedc8
14:35:21: Reserv3                                       :0x0
14:35:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:21: Reserv4                                       :0x0
14:35:21: Write Speed Factor R2W_FACTOR                 :0x2
14:35:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:21: FILE_FORMAT_GRP                               :0x0
14:35:21: COPY flag                                     :0x1
14:35:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:21: File_Format                                   :0x0
14:35:21: CRC                                           :0x0
14:35:21: ####CSD Registe Values####  

14:35:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:21: [GetSCRRegisterEntry] Passed
14:35:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:21: Data_Status_After Erases          : 0
14:35:21: CPRM Security Support             : No Security
14:35:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:21: Spec. Version                     : Version 3.0X
14:35:21: Extended Security Support         : Extended_Security_Not_Supported
14:35:21: Command Support                   : COMMAND_SUPPORT
14:35:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DB0>, <py_sfcl.CommandDataDefinition object at 0x05DF5600>) , Command count = 1596 ] 
14:35:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 1597 ] 
14:35:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:21: [ SetBusWidth(0x4) , Command count = 1598 ] 
14:35:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1599 ] 
14:35:21: Protected Area Size 0x28000
14:35:21: Bus Width           2
14:35:21: Secure Mode         0
14:35:21: Speed  Class        4
14:35:21: Perf Move           0
14:35:21: Au Size             9
14:35:21: Erase Size          15
14:35:21: Erase Timeout       1
14:35:21: Erase offset        1
14:35:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1600 ] 
14:35:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:21: Host Frequency set to 100000 KHz
14:35:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:21: ####CSD Registe 2.0 Values####
14:35:21: CSD_STRUCTURE                                 :0x1
14:35:21: Reserv1                                       :0x0
14:35:21: Time Access 1 TAAC                            :0xe
14:35:21: Time Access 2 NSAC*100                        :0x0
14:35:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:21: Card Command Classess CCC                     :0x5b5
14:35:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:21: DSR(driver stage register)  DSR_IMP           :0x0
14:35:21: Reserv2                                       :0x0
14:35:21: Device Size C_SIZE                            :0xedc8
14:35:21: Reserv3                                       :0x0
14:35:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:21: Reserv4                                       :0x0
14:35:21: Write Speed Factor R2W_FACTOR                 :0x2
14:35:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:21: FILE_FORMAT_GRP                               :0x0
14:35:21: COPY flag                                     :0x1
14:35:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:21: File_Format                                   :0x0
14:35:21: CRC                                           :0x0
14:35:21: ####CSD Registe Values####  

14:35:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9CF0>, <py_sfcl.CommandDataDefinition object at 0x05DF5690>) , Command count = 1601 ] 
14:35:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05DF5F00>) , Command count = 1602 ] 
14:35:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5240>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5C90>, <None>, <py_sfcl.Command23 object at 0x05E0F480>) , Command count = 1603 ] 
14:35:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:24: Host Frequency set to 25000 KHz
14:35:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF7B0>, 0x0, True) , Command count = 1604 ] 
14:35:24: [GO18_globalSetVolt]### Host voltage value is set.
14:35:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00E70>, 0x0, False) , Command count = 1605 ] 
14:35:24: [GO18_globalSetVolt]### Host voltage value is set.
14:35:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1606 ] 
14:35:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1607 ] 
14:35:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1608 ] 
14:35:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB060>, <py_sfcl.CommandDataDefinition object at 0x05E00630>) , Command count = 1609 ] 
14:35:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F9F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F270>) , Command count = 1610 ] 
14:35:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1611 ] 
14:35:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:24: Host Frequency set to 25000 KHz
14:35:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:24: ####CSD Registe 2.0 Values####
14:35:24: CSD_STRUCTURE                                 :0x1
14:35:24: Reserv1                                       :0x0
14:35:24: Time Access 1 TAAC                            :0xe
14:35:24: Time Access 2 NSAC*100                        :0x0
14:35:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:24: Card Command Classess CCC                     :0x5b5
14:35:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:24: DSR(driver stage register)  DSR_IMP           :0x0
14:35:24: Reserv2                                       :0x0
14:35:24: Device Size C_SIZE                            :0xedc8
14:35:24: Reserv3                                       :0x0
14:35:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:24: Reserv4                                       :0x0
14:35:24: Write Speed Factor R2W_FACTOR                 :0x2
14:35:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:24: FILE_FORMAT_GRP                               :0x0
14:35:24: COPY flag                                     :0x1
14:35:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:24: File_Format                                   :0x0
14:35:24: CRC                                           :0x0
14:35:24: ####CSD Registe Values####  

14:35:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:24: [GetSCRRegisterEntry] Passed
14:35:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:24: Data_Status_After Erases          : 0
14:35:24: CPRM Security Support             : No Security
14:35:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:24: Spec. Version                     : Version 3.0X
14:35:24: Extended Security Support         : Extended_Security_Not_Supported
14:35:24: Command Support                   : COMMAND_SUPPORT
14:35:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05DF5D50>) , Command count = 1612 ] 
14:35:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D80>, <py_sfcl.CommandDataDefinition object at 0x05DF5C60>) , Command count = 1613 ] 
14:35:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:24: [ SetBusWidth(0x4) , Command count = 1614 ] 
14:35:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1615 ] 
14:35:24: Protected Area Size 0x28000
14:35:24: Bus Width           2
14:35:24: Secure Mode         0
14:35:24: Speed  Class        4
14:35:24: Perf Move           0
14:35:24: Au Size             9
14:35:24: Erase Size          15
14:35:24: Erase Timeout       1
14:35:24: Erase offset        1
14:35:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1616 ] 
14:35:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:24: Host Frequency set to 100000 KHz
14:35:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:24: ####CSD Registe 2.0 Values####
14:35:24: CSD_STRUCTURE                                 :0x1
14:35:24: Reserv1                                       :0x0
14:35:24: Time Access 1 TAAC                            :0xe
14:35:24: Time Access 2 NSAC*100                        :0x0
14:35:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:24: Card Command Classess CCC                     :0x5b5
14:35:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:24: DSR(driver stage register)  DSR_IMP           :0x0
14:35:24: Reserv2                                       :0x0
14:35:24: Device Size C_SIZE                            :0xedc8
14:35:24: Reserv3                                       :0x0
14:35:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:24: Reserv4                                       :0x0
14:35:25: Write Speed Factor R2W_FACTOR                 :0x2
14:35:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:25: FILE_FORMAT_GRP                               :0x0
14:35:25: COPY flag                                     :0x1
14:35:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:25: File_Format                                   :0x0
14:35:25: CRC                                           :0x0
14:35:25: ####CSD Registe Values####  

14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A20>, <py_sfcl.CommandDataDefinition object at 0x05DE9B70>) , Command count = 1617 ] 
14:35:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB8D0>, <py_sfcl.CommandDataDefinition object at 0x05E0F060>) , Command count = 1618 ] 
14:35:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07F00>, <py_sfcl.PySEnhancedCmdData object at 0x05E07F90>, <None>, <py_sfcl.Command23 object at 0x05DF52D0>) , Command count = 1619 ] 
14:35:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:27: Host Frequency set to 25000 KHz
14:35:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5930>, 0x0, True) , Command count = 1620 ] 
14:35:27: [GO18_globalSetVolt]### Host voltage value is set.
14:35:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB5D0>, 0x0, False) , Command count = 1621 ] 
14:35:27: [GO18_globalSetVolt]### Host voltage value is set.
14:35:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1622 ] 
14:35:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1623 ] 
14:35:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1624 ] 
14:35:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F0C0>, <py_sfcl.CommandDataDefinition object at 0x05DFBB10>) , Command count = 1625 ] 
14:35:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F4E0>, <py_sfcl.CommandDataDefinition object at 0x05DFB150>) , Command count = 1626 ] 
14:35:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1627 ] 
14:35:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:28: Host Frequency set to 25000 KHz
14:35:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:28: ####CSD Registe 2.0 Values####
14:35:28: CSD_STRUCTURE                                 :0x1
14:35:28: Reserv1                                       :0x0
14:35:28: Time Access 1 TAAC                            :0xe
14:35:28: Time Access 2 NSAC*100                        :0x0
14:35:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:28: Card Command Classess CCC                     :0x5b5
14:35:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:28: DSR(driver stage register)  DSR_IMP           :0x0
14:35:28: Reserv2                                       :0x0
14:35:28: Device Size C_SIZE                            :0xedc8
14:35:28: Reserv3                                       :0x0
14:35:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:28: Reserv4                                       :0x0
14:35:28: Write Speed Factor R2W_FACTOR                 :0x2
14:35:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:28: FILE_FORMAT_GRP                               :0x0
14:35:28: COPY flag                                     :0x1
14:35:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:28: File_Format                                   :0x0
14:35:28: CRC                                           :0x0
14:35:28: ####CSD Registe Values####  

14:35:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:28: [GetSCRRegisterEntry] Passed
14:35:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:28: Data_Status_After Erases          : 0
14:35:28: CPRM Security Support             : No Security
14:35:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:28: Spec. Version                     : Version 3.0X
14:35:28: Extended Security Support         : Extended_Security_Not_Supported
14:35:28: Command Support                   : COMMAND_SUPPORT
14:35:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00090>, <py_sfcl.CommandDataDefinition object at 0x05E0FD20>) , Command count = 1628 ] 
14:35:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFB840>) , Command count = 1629 ] 
14:35:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:28: [ SetBusWidth(0x4) , Command count = 1630 ] 
14:35:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1631 ] 
14:35:28: Protected Area Size 0x28000
14:35:28: Bus Width           2
14:35:28: Secure Mode         0
14:35:28: Speed  Class        4
14:35:28: Perf Move           0
14:35:28: Au Size             9
14:35:28: Erase Size          15
14:35:28: Erase Timeout       1
14:35:28: Erase offset        1
14:35:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1632 ] 
14:35:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:28: Host Frequency set to 100000 KHz
14:35:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:28: ####CSD Registe 2.0 Values####
14:35:28: CSD_STRUCTURE                                 :0x1
14:35:28: Reserv1                                       :0x0
14:35:28: Time Access 1 TAAC                            :0xe
14:35:28: Time Access 2 NSAC*100                        :0x0
14:35:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:28: Card Command Classess CCC                     :0x5b5
14:35:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:28: DSR(driver stage register)  DSR_IMP           :0x0
14:35:28: Reserv2                                       :0x0
14:35:28: Device Size C_SIZE                            :0xedc8
14:35:28: Reserv3                                       :0x0
14:35:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:28: Reserv4                                       :0x0
14:35:28: Write Speed Factor R2W_FACTOR                 :0x2
14:35:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:28: FILE_FORMAT_GRP                               :0x0
14:35:28: COPY flag                                     :0x1
14:35:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:28: File_Format                                   :0x0
14:35:28: CRC                                           :0x0
14:35:28: ####CSD Registe Values####  

14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBDE0>, <py_sfcl.CommandDataDefinition object at 0x05DFB420>) , Command count = 1633 ] 
14:35:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DE0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD80>) , Command count = 1634 ] 
14:35:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:28: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBA50>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBE40>, <None>, <py_sfcl.Command23 object at 0x05DFBDB0>) , Command count = 1635 ] 
14:35:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:31: Host Frequency set to 25000 KHz
14:35:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBC00>, 0x0, True) , Command count = 1636 ] 
14:35:31: [GO18_globalSetVolt]### Host voltage value is set.
14:35:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEFB10>, 0x0, False) , Command count = 1637 ] 
14:35:31: [GO18_globalSetVolt]### Host voltage value is set.
14:35:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1638 ] 
14:35:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1639 ] 
14:35:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1640 ] 
14:35:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F030>, <py_sfcl.CommandDataDefinition object at 0x05DFB9C0>) , Command count = 1641 ] 
14:35:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F750>, <py_sfcl.CommandDataDefinition object at 0x05E0F360>) , Command count = 1642 ] 
14:35:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1643 ] 
14:35:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:31: Host Frequency set to 25000 KHz
14:35:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:31: ####CSD Registe 2.0 Values####
14:35:31: CSD_STRUCTURE                                 :0x1
14:35:31: Reserv1                                       :0x0
14:35:31: Time Access 1 TAAC                            :0xe
14:35:31: Time Access 2 NSAC*100                        :0x0
14:35:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:31: Card Command Classess CCC                     :0x5b5
14:35:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:31: DSR(driver stage register)  DSR_IMP           :0x0
14:35:31: Reserv2                                       :0x0
14:35:31: Device Size C_SIZE                            :0xedc8
14:35:31: Reserv3                                       :0x0
14:35:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:31: Reserv4                                       :0x0
14:35:31: Write Speed Factor R2W_FACTOR                 :0x2
14:35:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:31: FILE_FORMAT_GRP                               :0x0
14:35:31: COPY flag                                     :0x1
14:35:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:31: File_Format                                   :0x0
14:35:31: CRC                                           :0x0
14:35:31: ####CSD Registe Values####  

14:35:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:31: [GetSCRRegisterEntry] Passed
14:35:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:31: Data_Status_After Erases          : 0
14:35:31: CPRM Security Support             : No Security
14:35:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:31: Spec. Version                     : Version 3.0X
14:35:31: Extended Security Support         : Extended_Security_Not_Supported
14:35:31: Command Support                   : COMMAND_SUPPORT
14:35:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00360>, <py_sfcl.CommandDataDefinition object at 0x05E00450>) , Command count = 1644 ] 
14:35:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004E0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 1645 ] 
14:35:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:31: [ SetBusWidth(0x4) , Command count = 1646 ] 
14:35:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1647 ] 
14:35:31: Protected Area Size 0x28000
14:35:31: Bus Width           2
14:35:31: Secure Mode         0
14:35:31: Speed  Class        4
14:35:31: Perf Move           0
14:35:31: Au Size             9
14:35:31: Erase Size          15
14:35:31: Erase Timeout       1
14:35:31: Erase offset        1
14:35:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1648 ] 
14:35:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:31: Host Frequency set to 100000 KHz
14:35:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:31: ####CSD Registe 2.0 Values####
14:35:31: CSD_STRUCTURE                                 :0x1
14:35:31: Reserv1                                       :0x0
14:35:31: Time Access 1 TAAC                            :0xe
14:35:31: Time Access 2 NSAC*100                        :0x0
14:35:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:31: Card Command Classess CCC                     :0x5b5
14:35:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:31: DSR(driver stage register)  DSR_IMP           :0x0
14:35:31: Reserv2                                       :0x0
14:35:31: Device Size C_SIZE                            :0xedc8
14:35:31: Reserv3                                       :0x0
14:35:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:31: Reserv4                                       :0x0
14:35:31: Write Speed Factor R2W_FACTOR                 :0x2
14:35:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:31: FILE_FORMAT_GRP                               :0x0
14:35:31: COPY flag                                     :0x1
14:35:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:31: File_Format                                   :0x0
14:35:32: CRC                                           :0x0
14:35:32: ####CSD Registe Values####  

14:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 1649 ] 
14:35:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5E10>, <py_sfcl.CommandDataDefinition object at 0x05DFBFC0>) , Command count = 1650 ] 
14:35:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB810>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB630>, <None>, <py_sfcl.Command23 object at 0x05DFB6F0>) , Command count = 1651 ] 
14:35:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:34: Host Frequency set to 25000 KHz
14:35:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBBD0>, 0x0, True) , Command count = 1652 ] 
14:35:34: [GO18_globalSetVolt]### Host voltage value is set.
14:35:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E005A0>, 0x0, False) , Command count = 1653 ] 
14:35:34: [GO18_globalSetVolt]### Host voltage value is set.
14:35:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1654 ] 
14:35:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1655 ] 
14:35:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1656 ] 
14:35:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E006C0>) , Command count = 1657 ] 
14:35:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F570>) , Command count = 1658 ] 
14:35:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1659 ] 
14:35:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:34: Host Frequency set to 25000 KHz
14:35:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:34: ####CSD Registe 2.0 Values####
14:35:34: CSD_STRUCTURE                                 :0x1
14:35:34: Reserv1                                       :0x0
14:35:34: Time Access 1 TAAC                            :0xe
14:35:34: Time Access 2 NSAC*100                        :0x0
14:35:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:34: Card Command Classess CCC                     :0x5b5
14:35:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:34: DSR(driver stage register)  DSR_IMP           :0x0
14:35:34: Reserv2                                       :0x0
14:35:34: Device Size C_SIZE                            :0xedc8
14:35:34: Reserv3                                       :0x0
14:35:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:34: Reserv4                                       :0x0
14:35:34: Write Speed Factor R2W_FACTOR                 :0x2
14:35:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:34: FILE_FORMAT_GRP                               :0x0
14:35:34: COPY flag                                     :0x1
14:35:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:34: File_Format                                   :0x0
14:35:34: CRC                                           :0x0
14:35:34: ####CSD Registe Values####  

14:35:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:34: [GetSCRRegisterEntry] Passed
14:35:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:34: Data_Status_After Erases          : 0
14:35:34: CPRM Security Support             : No Security
14:35:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:34: Spec. Version                     : Version 3.0X
14:35:34: Extended Security Support         : Extended_Security_Not_Supported
14:35:34: Command Support                   : COMMAND_SUPPORT
14:35:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05E0F0F0>) , Command count = 1660 ] 
14:35:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008A0>, <py_sfcl.CommandDataDefinition object at 0x05E00030>) , Command count = 1661 ] 
14:35:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:35: [ SetBusWidth(0x4) , Command count = 1662 ] 
14:35:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1663 ] 
14:35:35: Protected Area Size 0x28000
14:35:35: Bus Width           2
14:35:35: Secure Mode         0
14:35:35: Speed  Class        4
14:35:35: Perf Move           0
14:35:35: Au Size             9
14:35:35: Erase Size          15
14:35:35: Erase Timeout       1
14:35:35: Erase offset        1
14:35:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1664 ] 
14:35:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:35: Host Frequency set to 100000 KHz
14:35:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:35: ####CSD Registe 2.0 Values####
14:35:35: CSD_STRUCTURE                                 :0x1
14:35:35: Reserv1                                       :0x0
14:35:35: Time Access 1 TAAC                            :0xe
14:35:35: Time Access 2 NSAC*100                        :0x0
14:35:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:35: Card Command Classess CCC                     :0x5b5
14:35:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:35: DSR(driver stage register)  DSR_IMP           :0x0
14:35:35: Reserv2                                       :0x0
14:35:35: Device Size C_SIZE                            :0xedc8
14:35:35: Reserv3                                       :0x0
14:35:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:35: Reserv4                                       :0x0
14:35:35: Write Speed Factor R2W_FACTOR                 :0x2
14:35:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:35: FILE_FORMAT_GRP                               :0x0
14:35:35: COPY flag                                     :0x1
14:35:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:35: File_Format                                   :0x0
14:35:35: CRC                                           :0x0
14:35:35: ####CSD Registe Values####  

14:35:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 1665 ] 
14:35:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA20>, <py_sfcl.CommandDataDefinition object at 0x05E00030>) , Command count = 1666 ] 
14:35:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00120>, <py_sfcl.PySEnhancedCmdData object at 0x05E00930>, <None>, <py_sfcl.Command23 object at 0x05DFB660>) , Command count = 1667 ] 
14:35:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:37: Host Frequency set to 25000 KHz
14:35:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBC60>, 0x0, True) , Command count = 1668 ] 
14:35:37: [GO18_globalSetVolt]### Host voltage value is set.
14:35:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FAE0>, 0x0, False) , Command count = 1669 ] 
14:35:37: [GO18_globalSetVolt]### Host voltage value is set.
14:35:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1670 ] 
14:35:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1671 ] 
14:35:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1672 ] 
14:35:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FB40>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 1673 ] 
14:35:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBAE0>, <py_sfcl.CommandDataDefinition object at 0x05E007E0>) , Command count = 1674 ] 
14:35:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1675 ] 
14:35:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:38: Host Frequency set to 25000 KHz
14:35:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:38: ####CSD Registe 2.0 Values####
14:35:38: CSD_STRUCTURE                                 :0x1
14:35:38: Reserv1                                       :0x0
14:35:38: Time Access 1 TAAC                            :0xe
14:35:38: Time Access 2 NSAC*100                        :0x0
14:35:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:38: Card Command Classess CCC                     :0x5b5
14:35:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:38: DSR(driver stage register)  DSR_IMP           :0x0
14:35:38: Reserv2                                       :0x0
14:35:38: Device Size C_SIZE                            :0xedc8
14:35:38: Reserv3                                       :0x0
14:35:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:38: Reserv4                                       :0x0
14:35:38: Write Speed Factor R2W_FACTOR                 :0x2
14:35:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:38: FILE_FORMAT_GRP                               :0x0
14:35:38: COPY flag                                     :0x1
14:35:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:38: File_Format                                   :0x0
14:35:38: CRC                                           :0x0
14:35:38: ####CSD Registe Values####  

14:35:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:38: [GetSCRRegisterEntry] Passed
14:35:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:38: Data_Status_After Erases          : 0
14:35:38: CPRM Security Support             : No Security
14:35:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:38: Spec. Version                     : Version 3.0X
14:35:38: Extended Security Support         : Extended_Security_Not_Supported
14:35:38: Command Support                   : COMMAND_SUPPORT
14:35:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE70>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 1676 ] 
14:35:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045D0>, <py_sfcl.CommandDataDefinition object at 0x05E042D0>) , Command count = 1677 ] 
14:35:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:38: [ SetBusWidth(0x4) , Command count = 1678 ] 
14:35:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1679 ] 
14:35:38: Protected Area Size 0x28000
14:35:38: Bus Width           2
14:35:38: Secure Mode         0
14:35:38: Speed  Class        4
14:35:38: Perf Move           0
14:35:38: Au Size             9
14:35:38: Erase Size          15
14:35:38: Erase Timeout       1
14:35:38: Erase offset        1
14:35:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1680 ] 
14:35:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:38: Host Frequency set to 100000 KHz
14:35:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:38: ####CSD Registe 2.0 Values####
14:35:38: CSD_STRUCTURE                                 :0x1
14:35:38: Reserv1                                       :0x0
14:35:38: Time Access 1 TAAC                            :0xe
14:35:38: Time Access 2 NSAC*100                        :0x0
14:35:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:38: Card Command Classess CCC                     :0x5b5
14:35:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:38: DSR(driver stage register)  DSR_IMP           :0x0
14:35:38: Reserv2                                       :0x0
14:35:38: Device Size C_SIZE                            :0xedc8
14:35:38: Reserv3                                       :0x0
14:35:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:38: Reserv4                                       :0x0
14:35:38: Write Speed Factor R2W_FACTOR                 :0x2
14:35:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:38: FILE_FORMAT_GRP                               :0x0
14:35:38: COPY flag                                     :0x1
14:35:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:38: File_Format                                   :0x0
14:35:38: CRC                                           :0x0
14:35:38: ####CSD Registe Values####  

14:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 1681 ] 
14:35:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB40>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 1682 ] 
14:35:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E007B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00C90>, <None>, <py_sfcl.Command23 object at 0x05E00BD0>) , Command count = 1683 ] 
14:35:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:41: Host Frequency set to 25000 KHz
14:35:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00180>, 0x0, True) , Command count = 1684 ] 
14:35:41: [GO18_globalSetVolt]### Host voltage value is set.
14:35:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E040F0>, 0x0, False) , Command count = 1685 ] 
14:35:41: [GO18_globalSetVolt]### Host voltage value is set.
14:35:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1686 ] 
14:35:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1687 ] 
14:35:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1688 ] 
14:35:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04690>, <py_sfcl.CommandDataDefinition object at 0x05E04150>) , Command count = 1689 ] 
14:35:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FFC0>, <py_sfcl.CommandDataDefinition object at 0x05E00210>) , Command count = 1690 ] 
14:35:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1691 ] 
14:35:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:41: Host Frequency set to 25000 KHz
14:35:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:41: ####CSD Registe 2.0 Values####
14:35:41: CSD_STRUCTURE                                 :0x1
14:35:41: Reserv1                                       :0x0
14:35:41: Time Access 1 TAAC                            :0xe
14:35:41: Time Access 2 NSAC*100                        :0x0
14:35:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:41: Card Command Classess CCC                     :0x5b5
14:35:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:41: DSR(driver stage register)  DSR_IMP           :0x0
14:35:41: Reserv2                                       :0x0
14:35:41: Device Size C_SIZE                            :0xedc8
14:35:41: Reserv3                                       :0x0
14:35:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:41: Reserv4                                       :0x0
14:35:41: Write Speed Factor R2W_FACTOR                 :0x2
14:35:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:41: FILE_FORMAT_GRP                               :0x0
14:35:41: COPY flag                                     :0x1
14:35:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:41: File_Format                                   :0x0
14:35:41: CRC                                           :0x0
14:35:41: ####CSD Registe Values####  

14:35:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:41: [GetSCRRegisterEntry] Passed
14:35:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:41: Data_Status_After Erases          : 0
14:35:41: CPRM Security Support             : No Security
14:35:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:41: Spec. Version                     : Version 3.0X
14:35:41: Extended Security Support         : Extended_Security_Not_Supported
14:35:41: Command Support                   : COMMAND_SUPPORT
14:35:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC30>) , Command count = 1692 ] 
14:35:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BD0>, <py_sfcl.CommandDataDefinition object at 0x05E04210>) , Command count = 1693 ] 
14:35:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:41: [ SetBusWidth(0x4) , Command count = 1694 ] 
14:35:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E001E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1695 ] 
14:35:41: Protected Area Size 0x28000
14:35:41: Bus Width           2
14:35:41: Secure Mode         0
14:35:41: Speed  Class        4
14:35:41: Perf Move           0
14:35:41: Au Size             9
14:35:41: Erase Size          15
14:35:41: Erase Timeout       1
14:35:41: Erase offset        1
14:35:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1696 ] 
14:35:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:41: Host Frequency set to 100000 KHz
14:35:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:41: ####CSD Registe 2.0 Values####
14:35:41: CSD_STRUCTURE                                 :0x1
14:35:41: Reserv1                                       :0x0
14:35:41: Time Access 1 TAAC                            :0xe
14:35:42: Time Access 2 NSAC*100                        :0x0
14:35:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:42: Card Command Classess CCC                     :0x5b5
14:35:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:42: DSR(driver stage register)  DSR_IMP           :0x0
14:35:42: Reserv2                                       :0x0
14:35:42: Device Size C_SIZE                            :0xedc8
14:35:42: Reserv3                                       :0x0
14:35:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:42: Reserv4                                       :0x0
14:35:42: Write Speed Factor R2W_FACTOR                 :0x2
14:35:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:42: FILE_FORMAT_GRP                               :0x0
14:35:42: COPY flag                                     :0x1
14:35:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:42: File_Format                                   :0x0
14:35:42: CRC                                           :0x0
14:35:42: ####CSD Registe Values####  

14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C90>, <py_sfcl.CommandDataDefinition object at 0x05E00780>) , Command count = 1697 ] 
14:35:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004B0>, <py_sfcl.CommandDataDefinition object at 0x05E00B70>) , Command count = 1698 ] 
14:35:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00E40>, <py_sfcl.PySEnhancedCmdData object at 0x05E00ED0>, <None>, <py_sfcl.Command23 object at 0x05E00480>) , Command count = 1699 ] 
14:35:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:44: Host Frequency set to 25000 KHz
14:35:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00D50>, 0x0, True) , Command count = 1700 ] 
14:35:44: [GO18_globalSetVolt]### Host voltage value is set.
14:35:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04A20>, 0x0, False) , Command count = 1701 ] 
14:35:44: [GO18_globalSetVolt]### Host voltage value is set.
14:35:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1702 ] 
14:35:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1703 ] 
14:35:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1704 ] 
14:35:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E009F0>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 1705 ] 
14:35:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F630>, <py_sfcl.CommandDataDefinition object at 0x05E04B40>) , Command count = 1706 ] 
14:35:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1707 ] 
14:35:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:45: Host Frequency set to 25000 KHz
14:35:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:45: ####CSD Registe 2.0 Values####
14:35:45: CSD_STRUCTURE                                 :0x1
14:35:45: Reserv1                                       :0x0
14:35:45: Time Access 1 TAAC                            :0xe
14:35:45: Time Access 2 NSAC*100                        :0x0
14:35:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:45: Card Command Classess CCC                     :0x5b5
14:35:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:45: DSR(driver stage register)  DSR_IMP           :0x0
14:35:45: Reserv2                                       :0x0
14:35:45: Device Size C_SIZE                            :0xedc8
14:35:45: Reserv3                                       :0x0
14:35:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:45: Reserv4                                       :0x0
14:35:45: Write Speed Factor R2W_FACTOR                 :0x2
14:35:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:45: FILE_FORMAT_GRP                               :0x0
14:35:45: COPY flag                                     :0x1
14:35:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:45: File_Format                                   :0x0
14:35:45: CRC                                           :0x0
14:35:45: ####CSD Registe Values####  

14:35:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:45: [GetSCRRegisterEntry] Passed
14:35:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:45: Data_Status_After Erases          : 0
14:35:45: CPRM Security Support             : No Security
14:35:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:45: Spec. Version                     : Version 3.0X
14:35:45: Extended Security Support         : Extended_Security_Not_Supported
14:35:45: Command Support                   : COMMAND_SUPPORT
14:35:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F8A0>) , Command count = 1708 ] 
14:35:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E048D0>, <py_sfcl.CommandDataDefinition object at 0x05E04420>) , Command count = 1709 ] 
14:35:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:45: [ SetBusWidth(0x4) , Command count = 1710 ] 
14:35:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1711 ] 
14:35:45: Protected Area Size 0x28000
14:35:45: Bus Width           2
14:35:45: Secure Mode         0
14:35:45: Speed  Class        4
14:35:45: Perf Move           0
14:35:45: Au Size             9
14:35:45: Erase Size          15
14:35:45: Erase Timeout       1
14:35:45: Erase offset        1
14:35:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1712 ] 
14:35:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:45: Host Frequency set to 100000 KHz
14:35:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:45: ####CSD Registe 2.0 Values####
14:35:45: CSD_STRUCTURE                                 :0x1
14:35:45: Reserv1                                       :0x0
14:35:45: Time Access 1 TAAC                            :0xe
14:35:45: Time Access 2 NSAC*100                        :0x0
14:35:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:45: Card Command Classess CCC                     :0x5b5
14:35:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:45: DSR(driver stage register)  DSR_IMP           :0x0
14:35:45: Reserv2                                       :0x0
14:35:45: Device Size C_SIZE                            :0xedc8
14:35:45: Reserv3                                       :0x0
14:35:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:45: Reserv4                                       :0x0
14:35:45: Write Speed Factor R2W_FACTOR                 :0x2
14:35:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:45: FILE_FORMAT_GRP                               :0x0
14:35:45: COPY flag                                     :0x1
14:35:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:45: File_Format                                   :0x0
14:35:45: CRC                                           :0x0
14:35:45: ####CSD Registe Values####  

14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05E07780>) , Command count = 1713 ] 
14:35:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04840>, <py_sfcl.CommandDataDefinition object at 0x05E049F0>) , Command count = 1714 ] 
14:35:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E047B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04DE0>, <None>, <py_sfcl.Command23 object at 0x05E00DB0>) , Command count = 1715 ] 
14:35:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:48: Host Frequency set to 25000 KHz
14:35:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04450>, 0x0, True) , Command count = 1716 ] 
14:35:48: [GO18_globalSetVolt]### Host voltage value is set.
14:35:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07090>, 0x0, False) , Command count = 1717 ] 
14:35:48: [GO18_globalSetVolt]### Host voltage value is set.
14:35:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1718 ] 
14:35:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1719 ] 
14:35:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1720 ] 
14:35:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B10>, <py_sfcl.CommandDataDefinition object at 0x05E07510>) , Command count = 1721 ] 
14:35:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F00>, <py_sfcl.CommandDataDefinition object at 0x05E00870>) , Command count = 1722 ] 
14:35:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1723 ] 
14:35:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:48: Host Frequency set to 25000 KHz
14:35:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:48: ####CSD Registe 2.0 Values####
14:35:48: CSD_STRUCTURE                                 :0x1
14:35:48: Reserv1                                       :0x0
14:35:48: Time Access 1 TAAC                            :0xe
14:35:48: Time Access 2 NSAC*100                        :0x0
14:35:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:48: Card Command Classess CCC                     :0x5b5
14:35:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:48: DSR(driver stage register)  DSR_IMP           :0x0
14:35:48: Reserv2                                       :0x0
14:35:48: Device Size C_SIZE                            :0xedc8
14:35:48: Reserv3                                       :0x0
14:35:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:48: Reserv4                                       :0x0
14:35:48: Write Speed Factor R2W_FACTOR                 :0x2
14:35:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:48: FILE_FORMAT_GRP                               :0x0
14:35:48: COPY flag                                     :0x1
14:35:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:48: File_Format                                   :0x0
14:35:48: CRC                                           :0x0
14:35:48: ####CSD Registe Values####  

14:35:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:48: [GetSCRRegisterEntry] Passed
14:35:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:48: Data_Status_After Erases          : 0
14:35:48: CPRM Security Support             : No Security
14:35:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:48: Spec. Version                     : Version 3.0X
14:35:48: Extended Security Support         : Extended_Security_Not_Supported
14:35:48: Command Support                   : COMMAND_SUPPORT
14:35:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A50>, <py_sfcl.CommandDataDefinition object at 0x05E044E0>) , Command count = 1724 ] 
14:35:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2D0>, <py_sfcl.CommandDataDefinition object at 0x05E04FC0>) , Command count = 1725 ] 
14:35:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:48: [ SetBusWidth(0x4) , Command count = 1726 ] 
14:35:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1727 ] 
14:35:48: Protected Area Size 0x28000
14:35:48: Bus Width           2
14:35:48: Secure Mode         0
14:35:48: Speed  Class        4
14:35:48: Perf Move           0
14:35:48: Au Size             9
14:35:48: Erase Size          15
14:35:48: Erase Timeout       1
14:35:48: Erase offset        1
14:35:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1728 ] 
14:35:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:48: Host Frequency set to 100000 KHz
14:35:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:48: ####CSD Registe 2.0 Values####
14:35:48: CSD_STRUCTURE                                 :0x1
14:35:48: Reserv1                                       :0x0
14:35:48: Time Access 1 TAAC                            :0xe
14:35:48: Time Access 2 NSAC*100                        :0x0
14:35:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:48: Card Command Classess CCC                     :0x5b5
14:35:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:48: DSR(driver stage register)  DSR_IMP           :0x0
14:35:48: Reserv2                                       :0x0
14:35:48: Device Size C_SIZE                            :0xedc8
14:35:48: Reserv3                                       :0x0
14:35:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:48: Reserv4                                       :0x0
14:35:48: Write Speed Factor R2W_FACTOR                 :0x2
14:35:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:48: FILE_FORMAT_GRP                               :0x0
14:35:48: COPY flag                                     :0x1
14:35:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:48: File_Format                                   :0x0
14:35:48: CRC                                           :0x0
14:35:48: ####CSD Registe Values####  

14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C60>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 1729 ] 
14:35:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00BA0>, <py_sfcl.CommandDataDefinition object at 0x05E00A80>) , Command count = 1730 ] 
14:35:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07420>, <py_sfcl.PySEnhancedCmdData object at 0x05E120C0>, <None>, <py_sfcl.Command23 object at 0x05E04DB0>) , Command count = 1731 ] 
14:35:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:51: Host Frequency set to 25000 KHz
14:35:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9900>, 0x0, True) , Command count = 1732 ] 
14:35:51: [GO18_globalSetVolt]### Host voltage value is set.
14:35:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04E10>, 0x0, False) , Command count = 1733 ] 
14:35:51: [GO18_globalSetVolt]### Host voltage value is set.
14:35:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1734 ] 
14:35:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1735 ] 
14:35:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1736 ] 
14:35:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04600>, <py_sfcl.CommandDataDefinition object at 0x05E0F300>) , Command count = 1737 ] 
14:35:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5AB0>, <py_sfcl.CommandDataDefinition object at 0x05E07360>) , Command count = 1738 ] 
14:35:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1739 ] 
14:35:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:51: Host Frequency set to 25000 KHz
14:35:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:51: ####CSD Registe 2.0 Values####
14:35:51: CSD_STRUCTURE                                 :0x1
14:35:51: Reserv1                                       :0x0
14:35:51: Time Access 1 TAAC                            :0xe
14:35:51: Time Access 2 NSAC*100                        :0x0
14:35:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:51: Card Command Classess CCC                     :0x5b5
14:35:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:51: DSR(driver stage register)  DSR_IMP           :0x0
14:35:51: Reserv2                                       :0x0
14:35:51: Device Size C_SIZE                            :0xedc8
14:35:51: Reserv3                                       :0x0
14:35:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:51: Reserv4                                       :0x0
14:35:51: Write Speed Factor R2W_FACTOR                 :0x2
14:35:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:51: FILE_FORMAT_GRP                               :0x0
14:35:51: COPY flag                                     :0x1
14:35:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:51: File_Format                                   :0x0
14:35:51: CRC                                           :0x0
14:35:51: ####CSD Registe Values####  

14:35:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:51: [GetSCRRegisterEntry] Passed
14:35:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:51: Data_Status_After Erases          : 0
14:35:51: CPRM Security Support             : No Security
14:35:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:51: Spec. Version                     : Version 3.0X
14:35:51: Extended Security Support         : Extended_Security_Not_Supported
14:35:51: Command Support                   : COMMAND_SUPPORT
14:35:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 1740 ] 
14:35:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 1741 ] 
14:35:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:51: [ SetBusWidth(0x4) , Command count = 1742 ] 
14:35:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1743 ] 
14:35:51: Protected Area Size 0x28000
14:35:51: Bus Width           2
14:35:51: Secure Mode         0
14:35:51: Speed  Class        4
14:35:51: Perf Move           0
14:35:51: Au Size             9
14:35:51: Erase Size          15
14:35:51: Erase Timeout       1
14:35:51: Erase offset        1
14:35:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1744 ] 
14:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:51: Host Frequency set to 100000 KHz
14:35:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:51: ####CSD Registe 2.0 Values####
14:35:51: CSD_STRUCTURE                                 :0x1
14:35:51: Reserv1                                       :0x0
14:35:51: Time Access 1 TAAC                            :0xe
14:35:52: Time Access 2 NSAC*100                        :0x0
14:35:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:52: Card Command Classess CCC                     :0x5b5
14:35:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:52: DSR(driver stage register)  DSR_IMP           :0x0
14:35:52: Reserv2                                       :0x0
14:35:52: Device Size C_SIZE                            :0xedc8
14:35:52: Reserv3                                       :0x0
14:35:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:52: Reserv4                                       :0x0
14:35:52: Write Speed Factor R2W_FACTOR                 :0x2
14:35:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:52: FILE_FORMAT_GRP                               :0x0
14:35:52: COPY flag                                     :0x1
14:35:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:52: File_Format                                   :0x0
14:35:52: CRC                                           :0x0
14:35:52: ####CSD Registe Values####  

14:35:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 1745 ] 
14:35:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04870>, <py_sfcl.CommandDataDefinition object at 0x05E07E10>) , Command count = 1746 ] 
14:35:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07570>, <py_sfcl.PySEnhancedCmdData object at 0x05E072D0>, <None>, <py_sfcl.Command23 object at 0x05E07990>) , Command count = 1747 ] 
14:35:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:54: Host Frequency set to 25000 KHz
14:35:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07210>, 0x0, True) , Command count = 1748 ] 
14:35:54: [GO18_globalSetVolt]### Host voltage value is set.
14:35:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FE10>, 0x0, False) , Command count = 1749 ] 
14:35:54: [GO18_globalSetVolt]### Host voltage value is set.
14:35:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1750 ] 
14:35:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1751 ] 
14:35:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1752 ] 
14:35:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04630>, <py_sfcl.CommandDataDefinition object at 0x05E0FF60>) , Command count = 1753 ] 
14:35:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E40>, <py_sfcl.CommandDataDefinition object at 0x05E071E0>) , Command count = 1754 ] 
14:35:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1755 ] 
14:35:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:55: Host Frequency set to 25000 KHz
14:35:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:55: ####CSD Registe 2.0 Values####
14:35:55: CSD_STRUCTURE                                 :0x1
14:35:55: Reserv1                                       :0x0
14:35:55: Time Access 1 TAAC                            :0xe
14:35:55: Time Access 2 NSAC*100                        :0x0
14:35:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:55: Card Command Classess CCC                     :0x5b5
14:35:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:55: DSR(driver stage register)  DSR_IMP           :0x0
14:35:55: Reserv2                                       :0x0
14:35:55: Device Size C_SIZE                            :0xedc8
14:35:55: Reserv3                                       :0x0
14:35:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:55: Reserv4                                       :0x0
14:35:55: Write Speed Factor R2W_FACTOR                 :0x2
14:35:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:55: FILE_FORMAT_GRP                               :0x0
14:35:55: COPY flag                                     :0x1
14:35:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:55: File_Format                                   :0x0
14:35:55: CRC                                           :0x0
14:35:55: ####CSD Registe Values####  

14:35:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:55: [GetSCRRegisterEntry] Passed
14:35:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:55: Data_Status_After Erases          : 0
14:35:55: CPRM Security Support             : No Security
14:35:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:55: Spec. Version                     : Version 3.0X
14:35:55: Extended Security Support         : Extended_Security_Not_Supported
14:35:55: Command Support                   : COMMAND_SUPPORT
14:35:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B1E0>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 1756 ] 
14:35:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B150>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 1757 ] 
14:35:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:55: [ SetBusWidth(0x4) , Command count = 1758 ] 
14:35:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1759 ] 
14:35:55: Protected Area Size 0x28000
14:35:55: Bus Width           2
14:35:55: Secure Mode         0
14:35:55: Speed  Class        4
14:35:55: Perf Move           0
14:35:55: Au Size             9
14:35:55: Erase Size          15
14:35:55: Erase Timeout       1
14:35:55: Erase offset        1
14:35:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1760 ] 
14:35:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:55: Host Frequency set to 100000 KHz
14:35:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:55: ####CSD Registe 2.0 Values####
14:35:55: CSD_STRUCTURE                                 :0x1
14:35:55: Reserv1                                       :0x0
14:35:55: Time Access 1 TAAC                            :0xe
14:35:55: Time Access 2 NSAC*100                        :0x0
14:35:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:55: Card Command Classess CCC                     :0x5b5
14:35:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:55: DSR(driver stage register)  DSR_IMP           :0x0
14:35:55: Reserv2                                       :0x0
14:35:55: Device Size C_SIZE                            :0xedc8
14:35:55: Reserv3                                       :0x0
14:35:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:55: Reserv4                                       :0x0
14:35:55: Write Speed Factor R2W_FACTOR                 :0x2
14:35:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:55: FILE_FORMAT_GRP                               :0x0
14:35:55: COPY flag                                     :0x1
14:35:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:55: File_Format                                   :0x0
14:35:55: CRC                                           :0x0
14:35:55: ####CSD Registe Values####  

14:35:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B300>, <py_sfcl.CommandDataDefinition object at 0x05E0B120>) , Command count = 1761 ] 
14:35:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B060>, <py_sfcl.CommandDataDefinition object at 0x05E070C0>) , Command count = 1762 ] 
14:35:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0527B930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B900>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B9C0>, <None>, <py_sfcl.Command23 object at 0x05E07390>) , Command count = 1763 ] 
14:35:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:58: Host Frequency set to 25000 KHz
14:35:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B810>, 0x0, True) , Command count = 1764 ] 
14:35:58: [GO18_globalSetVolt]### Host voltage value is set.
14:35:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B2A0>, 0x0, False) , Command count = 1765 ] 
14:35:58: [GO18_globalSetVolt]### Host voltage value is set.
14:35:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1766 ] 
14:35:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1767 ] 
14:35:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1768 ] 
14:35:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B0C0>) , Command count = 1769 ] 
14:35:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9FC0>, <py_sfcl.CommandDataDefinition object at 0x05DE9A80>) , Command count = 1770 ] 
14:35:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1771 ] 
14:35:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:58: Host Frequency set to 25000 KHz
14:35:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:58: ####CSD Registe 2.0 Values####
14:35:58: CSD_STRUCTURE                                 :0x1
14:35:58: Reserv1                                       :0x0
14:35:58: Time Access 1 TAAC                            :0xe
14:35:58: Time Access 2 NSAC*100                        :0x0
14:35:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:58: Card Command Classess CCC                     :0x5b5
14:35:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:58: DSR(driver stage register)  DSR_IMP           :0x0
14:35:58: Reserv2                                       :0x0
14:35:58: Device Size C_SIZE                            :0xedc8
14:35:58: Reserv3                                       :0x0
14:35:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:58: Reserv4                                       :0x0
14:35:58: Write Speed Factor R2W_FACTOR                 :0x2
14:35:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:58: FILE_FORMAT_GRP                               :0x0
14:35:58: COPY flag                                     :0x1
14:35:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:58: File_Format                                   :0x0
14:35:58: CRC                                           :0x0
14:35:58: ####CSD Registe Values####  

14:35:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:58: [GetSCRRegisterEntry] Passed
14:35:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:58: Data_Status_After Erases          : 0
14:35:58: CPRM Security Support             : No Security
14:35:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:58: Spec. Version                     : Version 3.0X
14:35:58: Extended Security Support         : Extended_Security_Not_Supported
14:35:58: Command Support                   : COMMAND_SUPPORT
14:35:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B240>, <py_sfcl.CommandDataDefinition object at 0x05E0BA80>) , Command count = 1772 ] 
14:35:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B8A0>, <py_sfcl.CommandDataDefinition object at 0x05E074B0>) , Command count = 1773 ] 
14:35:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:58: [ SetBusWidth(0x4) , Command count = 1774 ] 
14:35:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1775 ] 
14:35:58: Protected Area Size 0x28000
14:35:58: Bus Width           2
14:35:58: Secure Mode         0
14:35:58: Speed  Class        4
14:35:58: Perf Move           0
14:35:58: Au Size             9
14:35:58: Erase Size          15
14:35:58: Erase Timeout       1
14:35:58: Erase offset        1
14:35:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1776 ] 
14:35:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:58: Host Frequency set to 100000 KHz
14:35:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:58: ####CSD Registe 2.0 Values####
14:35:58: CSD_STRUCTURE                                 :0x1
14:35:58: Reserv1                                       :0x0
14:35:58: Time Access 1 TAAC                            :0xe
14:35:58: Time Access 2 NSAC*100                        :0x0
14:35:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:58: Card Command Classess CCC                     :0x5b5
14:35:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:58: DSR(driver stage register)  DSR_IMP           :0x0
14:35:58: Reserv2                                       :0x0
14:35:58: Device Size C_SIZE                            :0xedc8
14:35:58: Reserv3                                       :0x0
14:35:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:58: Reserv4                                       :0x0
14:35:58: Write Speed Factor R2W_FACTOR                 :0x2
14:35:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:59: FILE_FORMAT_GRP                               :0x0
14:35:59: COPY flag                                     :0x1
14:35:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:59: File_Format                                   :0x0
14:35:59: CRC                                           :0x0
14:35:59: ####CSD Registe Values####  

14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C00>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 1777 ] 
14:35:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A50>, <py_sfcl.CommandDataDefinition object at 0x05E07810>) , Command count = 1778 ] 
14:35:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:35:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:35:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07BD0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07D80>, <None>, <py_sfcl.Command23 object at 0x05E0B750>) , Command count = 1779 ] 
14:35:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:35:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:01: Host Frequency set to 25000 KHz
14:36:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B1B0>, 0x0, True) , Command count = 1780 ] 
14:36:01: [GO18_globalSetVolt]### Host voltage value is set.
14:36:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526DED0>, 0x0, False) , Command count = 1781 ] 
14:36:01: [GO18_globalSetVolt]### Host voltage value is set.
14:36:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1782 ] 
14:36:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1783 ] 
14:36:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1784 ] 
14:36:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B630>, <py_sfcl.CommandDataDefinition object at 0x05E0B570>) , Command count = 1785 ] 
14:36:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B030>, <py_sfcl.CommandDataDefinition object at 0x05E0B6F0>) , Command count = 1786 ] 
14:36:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1787 ] 
14:36:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:01: Host Frequency set to 25000 KHz
14:36:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:01: ####CSD Registe 2.0 Values####
14:36:01: CSD_STRUCTURE                                 :0x1
14:36:01: Reserv1                                       :0x0
14:36:01: Time Access 1 TAAC                            :0xe
14:36:01: Time Access 2 NSAC*100                        :0x0
14:36:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:01: Card Command Classess CCC                     :0x5b5
14:36:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:01: DSR(driver stage register)  DSR_IMP           :0x0
14:36:01: Reserv2                                       :0x0
14:36:01: Device Size C_SIZE                            :0xedc8
14:36:01: Reserv3                                       :0x0
14:36:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:01: Reserv4                                       :0x0
14:36:01: Write Speed Factor R2W_FACTOR                 :0x2
14:36:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:01: FILE_FORMAT_GRP                               :0x0
14:36:01: COPY flag                                     :0x1
14:36:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:01: File_Format                                   :0x0
14:36:01: CRC                                           :0x0
14:36:01: ####CSD Registe Values####  

14:36:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:02: [GetSCRRegisterEntry] Passed
14:36:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:02: Data_Status_After Erases          : 0
14:36:02: CPRM Security Support             : No Security
14:36:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:02: Spec. Version                     : Version 3.0X
14:36:02: Extended Security Support         : Extended_Security_Not_Supported
14:36:02: Command Support                   : COMMAND_SUPPORT
14:36:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F720>, <py_sfcl.CommandDataDefinition object at 0x05E0FE40>) , Command count = 1788 ] 
14:36:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BE40>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 1789 ] 
14:36:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:02: [ SetBusWidth(0x4) , Command count = 1790 ] 
14:36:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1791 ] 
14:36:02: Protected Area Size 0x28000
14:36:02: Bus Width           2
14:36:02: Secure Mode         0
14:36:02: Speed  Class        4
14:36:02: Perf Move           0
14:36:02: Au Size             9
14:36:02: Erase Size          15
14:36:02: Erase Timeout       1
14:36:02: Erase offset        1
14:36:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1792 ] 
14:36:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:02: Host Frequency set to 100000 KHz
14:36:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:02: ####CSD Registe 2.0 Values####
14:36:02: CSD_STRUCTURE                                 :0x1
14:36:02: Reserv1                                       :0x0
14:36:02: Time Access 1 TAAC                            :0xe
14:36:02: Time Access 2 NSAC*100                        :0x0
14:36:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:02: Card Command Classess CCC                     :0x5b5
14:36:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:02: DSR(driver stage register)  DSR_IMP           :0x0
14:36:02: Reserv2                                       :0x0
14:36:02: Device Size C_SIZE                            :0xedc8
14:36:02: Reserv3                                       :0x0
14:36:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:02: Reserv4                                       :0x0
14:36:02: Write Speed Factor R2W_FACTOR                 :0x2
14:36:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:02: FILE_FORMAT_GRP                               :0x0
14:36:02: COPY flag                                     :0x1
14:36:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:02: File_Format                                   :0x0
14:36:02: CRC                                           :0x0
14:36:02: ####CSD Registe Values####  

14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B660>, <py_sfcl.CommandDataDefinition object at 0x05E0BC30>) , Command count = 1793 ] 
14:36:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B510>, <py_sfcl.CommandDataDefinition object at 0x05E079C0>) , Command count = 1794 ] 
14:36:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07300>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C90>, <None>, <py_sfcl.Command23 object at 0x05E07ED0>) , Command count = 1795 ] 
14:36:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:04: Host Frequency set to 25000 KHz
14:36:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B7E0>, 0x0, True) , Command count = 1796 ] 
14:36:04: [GO18_globalSetVolt]### Host voltage value is set.
14:36:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FF60>, 0x0, False) , Command count = 1797 ] 
14:36:04: [GO18_globalSetVolt]### Host voltage value is set.
14:36:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1798 ] 
14:36:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1799 ] 
14:36:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1800 ] 
14:36:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x05E0B690>) , Command count = 1801 ] 
14:36:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B5D0>, <py_sfcl.CommandDataDefinition object at 0x05E0B870>) , Command count = 1802 ] 
14:36:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1803 ] 
14:36:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:05: Host Frequency set to 25000 KHz
14:36:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:05: ####CSD Registe 2.0 Values####
14:36:05: CSD_STRUCTURE                                 :0x1
14:36:05: Reserv1                                       :0x0
14:36:05: Time Access 1 TAAC                            :0xe
14:36:05: Time Access 2 NSAC*100                        :0x0
14:36:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:05: Card Command Classess CCC                     :0x5b5
14:36:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:05: DSR(driver stage register)  DSR_IMP           :0x0
14:36:05: Reserv2                                       :0x0
14:36:05: Device Size C_SIZE                            :0xedc8
14:36:05: Reserv3                                       :0x0
14:36:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:05: Reserv4                                       :0x0
14:36:05: Write Speed Factor R2W_FACTOR                 :0x2
14:36:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:05: FILE_FORMAT_GRP                               :0x0
14:36:05: COPY flag                                     :0x1
14:36:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:05: File_Format                                   :0x0
14:36:05: CRC                                           :0x0
14:36:05: ####CSD Registe Values####  

14:36:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:05: [GetSCRRegisterEntry] Passed
14:36:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:05: Data_Status_After Erases          : 0
14:36:05: CPRM Security Support             : No Security
14:36:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:05: Spec. Version                     : Version 3.0X
14:36:05: Extended Security Support         : Extended_Security_Not_Supported
14:36:05: Command Support                   : COMMAND_SUPPORT
14:36:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BDE0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3C0>) , Command count = 1804 ] 
14:36:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B4B0>) , Command count = 1805 ] 
14:36:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:05: [ SetBusWidth(0x4) , Command count = 1806 ] 
14:36:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1807 ] 
14:36:05: Protected Area Size 0x28000
14:36:05: Bus Width           2
14:36:05: Secure Mode         0
14:36:05: Speed  Class        4
14:36:05: Perf Move           0
14:36:05: Au Size             9
14:36:05: Erase Size          15
14:36:05: Erase Timeout       1
14:36:05: Erase offset        1
14:36:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1808 ] 
14:36:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:05: Host Frequency set to 100000 KHz
14:36:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:05: ####CSD Registe 2.0 Values####
14:36:05: CSD_STRUCTURE                                 :0x1
14:36:05: Reserv1                                       :0x0
14:36:05: Time Access 1 TAAC                            :0xe
14:36:05: Time Access 2 NSAC*100                        :0x0
14:36:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:05: Card Command Classess CCC                     :0x5b5
14:36:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:05: DSR(driver stage register)  DSR_IMP           :0x0
14:36:05: Reserv2                                       :0x0
14:36:05: Device Size C_SIZE                            :0xedc8
14:36:05: Reserv3                                       :0x0
14:36:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:05: Reserv4                                       :0x0
14:36:06: Write Speed Factor R2W_FACTOR                 :0x2
14:36:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:06: FILE_FORMAT_GRP                               :0x0
14:36:06: COPY flag                                     :0x1
14:36:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:06: File_Format                                   :0x0
14:36:06: CRC                                           :0x0
14:36:06: ####CSD Registe Values####  

14:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F420>, <py_sfcl.CommandDataDefinition object at 0x05E0FBA0>) , Command count = 1809 ] 
14:36:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052177E0>, <py_sfcl.CommandDataDefinition object at 0x05E07270>) , Command count = 1810 ] 
14:36:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E047E0>, <py_sfcl.PySEnhancedCmdData object at 0x05CEF030>, <None>, <py_sfcl.Command23 object at 0x05E07810>) , Command count = 1811 ] 
14:36:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:08: Host Frequency set to 25000 KHz
14:36:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F180>, 0x0, True) , Command count = 1812 ] 
14:36:08: [GO18_globalSetVolt]### Host voltage value is set.
14:36:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F60>, 0x0, False) , Command count = 1813 ] 
14:36:08: [GO18_globalSetVolt]### Host voltage value is set.
14:36:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1814 ] 
14:36:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1815 ] 
14:36:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1816 ] 
14:36:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00660>, <py_sfcl.CommandDataDefinition object at 0x05E0B720>) , Command count = 1817 ] 
14:36:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC30>, <py_sfcl.CommandDataDefinition object at 0x05E04570>) , Command count = 1818 ] 
14:36:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1819 ] 
14:36:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:08: Host Frequency set to 25000 KHz
14:36:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:08: ####CSD Registe 2.0 Values####
14:36:08: CSD_STRUCTURE                                 :0x1
14:36:08: Reserv1                                       :0x0
14:36:08: Time Access 1 TAAC                            :0xe
14:36:08: Time Access 2 NSAC*100                        :0x0
14:36:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:08: Card Command Classess CCC                     :0x5b5
14:36:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:08: DSR(driver stage register)  DSR_IMP           :0x0
14:36:08: Reserv2                                       :0x0
14:36:08: Device Size C_SIZE                            :0xedc8
14:36:08: Reserv3                                       :0x0
14:36:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:08: Reserv4                                       :0x0
14:36:08: Write Speed Factor R2W_FACTOR                 :0x2
14:36:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:08: FILE_FORMAT_GRP                               :0x0
14:36:08: COPY flag                                     :0x1
14:36:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:08: File_Format                                   :0x0
14:36:08: CRC                                           :0x0
14:36:08: ####CSD Registe Values####  

14:36:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:08: [GetSCRRegisterEntry] Passed
14:36:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:08: Data_Status_After Erases          : 0
14:36:08: CPRM Security Support             : No Security
14:36:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:08: Spec. Version                     : Version 3.0X
14:36:08: Extended Security Support         : Extended_Security_Not_Supported
14:36:08: Command Support                   : COMMAND_SUPPORT
14:36:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 1820 ] 
14:36:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E044B0>, <py_sfcl.CommandDataDefinition object at 0x05E0BEA0>) , Command count = 1821 ] 
14:36:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:08: [ SetBusWidth(0x4) , Command count = 1822 ] 
14:36:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1823 ] 
14:36:08: Protected Area Size 0x28000
14:36:08: Bus Width           2
14:36:08: Secure Mode         0
14:36:08: Speed  Class        4
14:36:08: Perf Move           0
14:36:08: Au Size             9
14:36:08: Erase Size          15
14:36:08: Erase Timeout       1
14:36:08: Erase offset        1
14:36:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1824 ] 
14:36:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:09: Host Frequency set to 100000 KHz
14:36:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:09: ####CSD Registe 2.0 Values####
14:36:09: CSD_STRUCTURE                                 :0x1
14:36:09: Reserv1                                       :0x0
14:36:09: Time Access 1 TAAC                            :0xe
14:36:09: Time Access 2 NSAC*100                        :0x0
14:36:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:09: Card Command Classess CCC                     :0x5b5
14:36:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:09: DSR(driver stage register)  DSR_IMP           :0x0
14:36:09: Reserv2                                       :0x0
14:36:09: Device Size C_SIZE                            :0xedc8
14:36:09: Reserv3                                       :0x0
14:36:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:09: Reserv4                                       :0x0
14:36:09: Write Speed Factor R2W_FACTOR                 :0x2
14:36:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:09: FILE_FORMAT_GRP                               :0x0
14:36:09: COPY flag                                     :0x1
14:36:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:09: File_Format                                   :0x0
14:36:09: CRC                                           :0x0
14:36:09: ####CSD Registe Values####  

14:36:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5210>, <py_sfcl.CommandDataDefinition object at 0x0526F1E0>) , Command count = 1825 ] 
14:36:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FEA0>, <py_sfcl.CommandDataDefinition object at 0x0514AE70>) , Command count = 1826 ] 
14:36:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B5A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07870>, <py_sfcl.PySEnhancedCmdData object at 0x05E07960>, <None>, <py_sfcl.Command23 object at 0x05E07030>) , Command count = 1827 ] 
14:36:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:11: Host Frequency set to 25000 KHz
14:36:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F270>, 0x0, True) , Command count = 1828 ] 
14:36:11: [GO18_globalSetVolt]### Host voltage value is set.
14:36:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9AB0>, 0x0, False) , Command count = 1829 ] 
14:36:11: [GO18_globalSetVolt]### Host voltage value is set.
14:36:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1830 ] 
14:36:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1831 ] 
14:36:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1832 ] 
14:36:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BFC0>, <py_sfcl.CommandDataDefinition object at 0x05DF50C0>) , Command count = 1833 ] 
14:36:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD50>, <py_sfcl.CommandDataDefinition object at 0x05E0BBA0>) , Command count = 1834 ] 
14:36:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1835 ] 
14:36:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:12: Host Frequency set to 25000 KHz
14:36:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:12: ####CSD Registe 2.0 Values####
14:36:12: CSD_STRUCTURE                                 :0x1
14:36:12: Reserv1                                       :0x0
14:36:12: Time Access 1 TAAC                            :0xe
14:36:12: Time Access 2 NSAC*100                        :0x0
14:36:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:12: Card Command Classess CCC                     :0x5b5
14:36:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:12: DSR(driver stage register)  DSR_IMP           :0x0
14:36:12: Reserv2                                       :0x0
14:36:12: Device Size C_SIZE                            :0xedc8
14:36:12: Reserv3                                       :0x0
14:36:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:12: Reserv4                                       :0x0
14:36:12: Write Speed Factor R2W_FACTOR                 :0x2
14:36:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:12: FILE_FORMAT_GRP                               :0x0
14:36:12: COPY flag                                     :0x1
14:36:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:12: File_Format                                   :0x0
14:36:12: CRC                                           :0x0
14:36:12: ####CSD Registe Values####  

14:36:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:12: [GetSCRRegisterEntry] Passed
14:36:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:12: Data_Status_After Erases          : 0
14:36:12: CPRM Security Support             : No Security
14:36:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:12: Spec. Version                     : Version 3.0X
14:36:12: Extended Security Support         : Extended_Security_Not_Supported
14:36:12: Command Support                   : COMMAND_SUPPORT
14:36:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BF30>, <py_sfcl.CommandDataDefinition object at 0x05DE97B0>) , Command count = 1836 ] 
14:36:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCC0>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 1837 ] 
14:36:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:12: [ SetBusWidth(0x4) , Command count = 1838 ] 
14:36:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1839 ] 
14:36:12: Protected Area Size 0x28000
14:36:12: Bus Width           2
14:36:12: Secure Mode         0
14:36:12: Speed  Class        4
14:36:12: Perf Move           0
14:36:12: Au Size             9
14:36:12: Erase Size          15
14:36:12: Erase Timeout       1
14:36:12: Erase offset        1
14:36:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1840 ] 
14:36:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:12: Host Frequency set to 100000 KHz
14:36:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:12: ####CSD Registe 2.0 Values####
14:36:12: CSD_STRUCTURE                                 :0x1
14:36:12: Reserv1                                       :0x0
14:36:12: Time Access 1 TAAC                            :0xe
14:36:12: Time Access 2 NSAC*100                        :0x0
14:36:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:12: Card Command Classess CCC                     :0x5b5
14:36:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:12: DSR(driver stage register)  DSR_IMP           :0x0
14:36:12: Reserv2                                       :0x0
14:36:12: Device Size C_SIZE                            :0xedc8
14:36:12: Reserv3                                       :0x0
14:36:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:12: Reserv4                                       :0x0
14:36:12: Write Speed Factor R2W_FACTOR                 :0x2
14:36:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:12: FILE_FORMAT_GRP                               :0x0
14:36:12: COPY flag                                     :0x1
14:36:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:12: File_Format                                   :0x0
14:36:12: CRC                                           :0x0
14:36:12: ####CSD Registe Values####  

14:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF54E0>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 1841 ] 
14:36:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F90>, <py_sfcl.CommandDataDefinition object at 0x05E0FA20>) , Command count = 1842 ] 
14:36:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F420>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F120>, <None>, <py_sfcl.Command23 object at 0x05E078A0>) , Command count = 1843 ] 
14:36:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:15: Host Frequency set to 25000 KHz
14:36:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281DE0>, 0x0, True) , Command count = 1844 ] 
14:36:15: [GO18_globalSetVolt]### Host voltage value is set.
14:36:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FDE0>, 0x0, False) , Command count = 1845 ] 
14:36:15: [GO18_globalSetVolt]### Host voltage value is set.
14:36:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1846 ] 
14:36:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1847 ] 
14:36:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1848 ] 
14:36:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F210>, <py_sfcl.CommandDataDefinition object at 0x05DF5600>) , Command count = 1849 ] 
14:36:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05DF5480>) , Command count = 1850 ] 
14:36:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1851 ] 
14:36:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:15: Host Frequency set to 25000 KHz
14:36:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:15: ####CSD Registe 2.0 Values####
14:36:15: CSD_STRUCTURE                                 :0x1
14:36:15: Reserv1                                       :0x0
14:36:15: Time Access 1 TAAC                            :0xe
14:36:15: Time Access 2 NSAC*100                        :0x0
14:36:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:15: Card Command Classess CCC                     :0x5b5
14:36:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:15: DSR(driver stage register)  DSR_IMP           :0x0
14:36:15: Reserv2                                       :0x0
14:36:15: Device Size C_SIZE                            :0xedc8
14:36:15: Reserv3                                       :0x0
14:36:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:15: Reserv4                                       :0x0
14:36:15: Write Speed Factor R2W_FACTOR                 :0x2
14:36:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:15: FILE_FORMAT_GRP                               :0x0
14:36:15: COPY flag                                     :0x1
14:36:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:15: File_Format                                   :0x0
14:36:15: CRC                                           :0x0
14:36:15: ####CSD Registe Values####  

14:36:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:15: [GetSCRRegisterEntry] Passed
14:36:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:15: Data_Status_After Erases          : 0
14:36:15: CPRM Security Support             : No Security
14:36:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:15: Spec. Version                     : Version 3.0X
14:36:15: Extended Security Support         : Extended_Security_Not_Supported
14:36:15: Command Support                   : COMMAND_SUPPORT
14:36:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 1852 ] 
14:36:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9CF0>, <py_sfcl.CommandDataDefinition object at 0x05DF5690>) , Command count = 1853 ] 
14:36:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:15: [ SetBusWidth(0x4) , Command count = 1854 ] 
14:36:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1855 ] 
14:36:15: Protected Area Size 0x28000
14:36:15: Bus Width           2
14:36:15: Secure Mode         0
14:36:15: Speed  Class        4
14:36:15: Perf Move           0
14:36:15: Au Size             9
14:36:15: Erase Size          15
14:36:15: Erase Timeout       1
14:36:15: Erase offset        1
14:36:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1856 ] 
14:36:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:15: Host Frequency set to 100000 KHz
14:36:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:15: ####CSD Registe 2.0 Values####
14:36:15: CSD_STRUCTURE                                 :0x1
14:36:15: Reserv1                                       :0x0
14:36:15: Time Access 1 TAAC                            :0xe
14:36:15: Time Access 2 NSAC*100                        :0x0
14:36:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:15: Card Command Classess CCC                     :0x5b5
14:36:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:15: DSR(driver stage register)  DSR_IMP           :0x0
14:36:15: Reserv2                                       :0x0
14:36:15: Device Size C_SIZE                            :0xedc8
14:36:15: Reserv3                                       :0x0
14:36:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:15: Reserv4                                       :0x0
14:36:16: Write Speed Factor R2W_FACTOR                 :0x2
14:36:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:16: FILE_FORMAT_GRP                               :0x0
14:36:16: COPY flag                                     :0x1
14:36:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:16: File_Format                                   :0x0
14:36:16: CRC                                           :0x0
14:36:16: ####CSD Registe Values####  

14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF660>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 1857 ] 
14:36:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9ED0>, <py_sfcl.CommandDataDefinition object at 0x05DF5690>) , Command count = 1858 ] 
14:36:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5F90>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5A80>, <None>, <py_sfcl.Command23 object at 0x05E0FA50>) , Command count = 1859 ] 
14:36:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:18: Host Frequency set to 25000 KHz
14:36:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9DB0>, 0x0, True) , Command count = 1860 ] 
14:36:18: [GO18_globalSetVolt]### Host voltage value is set.
14:36:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB060>, 0x0, False) , Command count = 1861 ] 
14:36:18: [GO18_globalSetVolt]### Host voltage value is set.
14:36:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1862 ] 
14:36:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1863 ] 
14:36:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1864 ] 
14:36:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB720>, <py_sfcl.CommandDataDefinition object at 0x05E0F270>) , Command count = 1865 ] 
14:36:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F690>, <py_sfcl.CommandDataDefinition object at 0x05E0FF90>) , Command count = 1866 ] 
14:36:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1867 ] 
14:36:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:18: Host Frequency set to 25000 KHz
14:36:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:18: ####CSD Registe 2.0 Values####
14:36:18: CSD_STRUCTURE                                 :0x1
14:36:18: Reserv1                                       :0x0
14:36:18: Time Access 1 TAAC                            :0xe
14:36:18: Time Access 2 NSAC*100                        :0x0
14:36:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:18: Card Command Classess CCC                     :0x5b5
14:36:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:18: DSR(driver stage register)  DSR_IMP           :0x0
14:36:18: Reserv2                                       :0x0
14:36:18: Device Size C_SIZE                            :0xedc8
14:36:18: Reserv3                                       :0x0
14:36:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:18: Reserv4                                       :0x0
14:36:18: Write Speed Factor R2W_FACTOR                 :0x2
14:36:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:18: FILE_FORMAT_GRP                               :0x0
14:36:18: COPY flag                                     :0x1
14:36:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:18: File_Format                                   :0x0
14:36:18: CRC                                           :0x0
14:36:18: ####CSD Registe Values####  

14:36:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:19: [GetSCRRegisterEntry] Passed
14:36:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:19: Data_Status_After Erases          : 0
14:36:19: CPRM Security Support             : No Security
14:36:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:19: Spec. Version                     : Version 3.0X
14:36:19: Extended Security Support         : Extended_Security_Not_Supported
14:36:19: Command Support                   : COMMAND_SUPPORT
14:36:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB600>, <py_sfcl.CommandDataDefinition object at 0x05DF5D80>) , Command count = 1868 ] 
14:36:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DF5A20>) , Command count = 1869 ] 
14:36:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:19: [ SetBusWidth(0x4) , Command count = 1870 ] 
14:36:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1871 ] 
14:36:19: Protected Area Size 0x28000
14:36:19: Bus Width           2
14:36:19: Secure Mode         0
14:36:19: Speed  Class        4
14:36:19: Perf Move           0
14:36:19: Au Size             9
14:36:19: Erase Size          15
14:36:19: Erase Timeout       1
14:36:19: Erase offset        1
14:36:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1872 ] 
14:36:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:19: Host Frequency set to 100000 KHz
14:36:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:19: ####CSD Registe 2.0 Values####
14:36:19: CSD_STRUCTURE                                 :0x1
14:36:19: Reserv1                                       :0x0
14:36:19: Time Access 1 TAAC                            :0xe
14:36:19: Time Access 2 NSAC*100                        :0x0
14:36:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:19: Card Command Classess CCC                     :0x5b5
14:36:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:19: DSR(driver stage register)  DSR_IMP           :0x0
14:36:19: Reserv2                                       :0x0
14:36:19: Device Size C_SIZE                            :0xedc8
14:36:19: Reserv3                                       :0x0
14:36:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:19: Reserv4                                       :0x0
14:36:19: Write Speed Factor R2W_FACTOR                 :0x2
14:36:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:19: FILE_FORMAT_GRP                               :0x0
14:36:19: COPY flag                                     :0x1
14:36:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:19: File_Format                                   :0x0
14:36:19: CRC                                           :0x0
14:36:19: ####CSD Registe Values####  

14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB70>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 1873 ] 
14:36:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F90>, <py_sfcl.CommandDataDefinition object at 0x05DF5240>) , Command count = 1874 ] 
14:36:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:19: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FC60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB240>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBED0>, <None>, <py_sfcl.Command23 object at 0x05DF5CF0>) , Command count = 1875 ] 
14:36:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:21: Host Frequency set to 25000 KHz
14:36:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F060>, 0x0, True) , Command count = 1876 ] 
14:36:21: [GO18_globalSetVolt]### Host voltage value is set.
14:36:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F0C0>, 0x0, False) , Command count = 1877 ] 
14:36:21: [GO18_globalSetVolt]### Host voltage value is set.
14:36:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1878 ] 
14:36:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1879 ] 
14:36:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1880 ] 
14:36:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FD20>, <py_sfcl.CommandDataDefinition object at 0x05DFBF00>) , Command count = 1881 ] 
14:36:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9810>, <py_sfcl.CommandDataDefinition object at 0x05DFB870>) , Command count = 1882 ] 
14:36:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1883 ] 
14:36:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:22: Host Frequency set to 25000 KHz
14:36:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:22: ####CSD Registe 2.0 Values####
14:36:22: CSD_STRUCTURE                                 :0x1
14:36:22: Reserv1                                       :0x0
14:36:22: Time Access 1 TAAC                            :0xe
14:36:22: Time Access 2 NSAC*100                        :0x0
14:36:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:22: Card Command Classess CCC                     :0x5b5
14:36:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:22: DSR(driver stage register)  DSR_IMP           :0x0
14:36:22: Reserv2                                       :0x0
14:36:22: Device Size C_SIZE                            :0xedc8
14:36:22: Reserv3                                       :0x0
14:36:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:22: Reserv4                                       :0x0
14:36:22: Write Speed Factor R2W_FACTOR                 :0x2
14:36:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:22: FILE_FORMAT_GRP                               :0x0
14:36:22: COPY flag                                     :0x1
14:36:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:22: File_Format                                   :0x0
14:36:22: CRC                                           :0x0
14:36:22: ####CSD Registe Values####  

14:36:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:22: [GetSCRRegisterEntry] Passed
14:36:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:22: Data_Status_After Erases          : 0
14:36:22: CPRM Security Support             : No Security
14:36:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:22: Spec. Version                     : Version 3.0X
14:36:22: Extended Security Support         : Extended_Security_Not_Supported
14:36:22: Command Support                   : COMMAND_SUPPORT
14:36:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFB840>) , Command count = 1884 ] 
14:36:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBDE0>, <py_sfcl.CommandDataDefinition object at 0x05DFB420>) , Command count = 1885 ] 
14:36:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:22: [ SetBusWidth(0x4) , Command count = 1886 ] 
14:36:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1887 ] 
14:36:22: Protected Area Size 0x28000
14:36:22: Bus Width           2
14:36:22: Secure Mode         0
14:36:22: Speed  Class        4
14:36:22: Perf Move           0
14:36:22: Au Size             9
14:36:22: Erase Size          15
14:36:22: Erase Timeout       1
14:36:22: Erase offset        1
14:36:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1888 ] 
14:36:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:22: Host Frequency set to 100000 KHz
14:36:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:22: ####CSD Registe 2.0 Values####
14:36:22: CSD_STRUCTURE                                 :0x1
14:36:22: Reserv1                                       :0x0
14:36:22: Time Access 1 TAAC                            :0xe
14:36:22: Time Access 2 NSAC*100                        :0x0
14:36:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:22: Card Command Classess CCC                     :0x5b5
14:36:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:22: DSR(driver stage register)  DSR_IMP           :0x0
14:36:22: Reserv2                                       :0x0
14:36:22: Device Size C_SIZE                            :0xedc8
14:36:22: Reserv3                                       :0x0
14:36:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:22: Reserv4                                       :0x0
14:36:22: Write Speed Factor R2W_FACTOR                 :0x2
14:36:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:22: FILE_FORMAT_GRP                               :0x0
14:36:22: COPY flag                                     :0x1
14:36:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:22: File_Format                                   :0x0
14:36:22: CRC                                           :0x0
14:36:22: ####CSD Registe Values####  

14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC00>, <py_sfcl.CommandDataDefinition object at 0x05DFB5A0>) , Command count = 1889 ] 
14:36:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F60>, <py_sfcl.CommandDataDefinition object at 0x05DF52A0>) , Command count = 1890 ] 
14:36:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E002D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5BD0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF58D0>, <None>, <py_sfcl.Command23 object at 0x05DF5540>) , Command count = 1891 ] 
14:36:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:25: Host Frequency set to 25000 KHz
14:36:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5DE0>, 0x0, True) , Command count = 1892 ] 
14:36:25: [GO18_globalSetVolt]### Host voltage value is set.
14:36:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F030>, 0x0, False) , Command count = 1893 ] 
14:36:25: [GO18_globalSetVolt]### Host voltage value is set.
14:36:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1894 ] 
14:36:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1895 ] 
14:36:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1896 ] 
14:36:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05E00450>) , Command count = 1897 ] 
14:36:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B40>, <py_sfcl.CommandDataDefinition object at 0x05E0F4B0>) , Command count = 1898 ] 
14:36:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1899 ] 
14:36:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:25: Host Frequency set to 25000 KHz
14:36:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:25: ####CSD Registe 2.0 Values####
14:36:25: CSD_STRUCTURE                                 :0x1
14:36:25: Reserv1                                       :0x0
14:36:25: Time Access 1 TAAC                            :0xe
14:36:25: Time Access 2 NSAC*100                        :0x0
14:36:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:25: Card Command Classess CCC                     :0x5b5
14:36:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:25: DSR(driver stage register)  DSR_IMP           :0x0
14:36:25: Reserv2                                       :0x0
14:36:25: Device Size C_SIZE                            :0xedc8
14:36:25: Reserv3                                       :0x0
14:36:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:25: Reserv4                                       :0x0
14:36:25: Write Speed Factor R2W_FACTOR                 :0x2
14:36:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:25: FILE_FORMAT_GRP                               :0x0
14:36:25: COPY flag                                     :0x1
14:36:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:25: File_Format                                   :0x0
14:36:25: CRC                                           :0x0
14:36:25: ####CSD Registe Values####  

14:36:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:25: [GetSCRRegisterEntry] Passed
14:36:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:25: Data_Status_After Erases          : 0
14:36:25: CPRM Security Support             : No Security
14:36:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:25: Spec. Version                     : Version 3.0X
14:36:25: Extended Security Support         : Extended_Security_Not_Supported
14:36:25: Command Support                   : COMMAND_SUPPORT
14:36:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004E0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 1900 ] 
14:36:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 1901 ] 
14:36:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:25: [ SetBusWidth(0x4) , Command count = 1902 ] 
14:36:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1903 ] 
14:36:25: Protected Area Size 0x28000
14:36:25: Bus Width           2
14:36:25: Secure Mode         0
14:36:25: Speed  Class        4
14:36:25: Perf Move           0
14:36:25: Au Size             9
14:36:25: Erase Size          15
14:36:25: Erase Timeout       1
14:36:25: Erase offset        1
14:36:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1904 ] 
14:36:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:25: Host Frequency set to 100000 KHz
14:36:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:25: ####CSD Registe 2.0 Values####
14:36:25: CSD_STRUCTURE                                 :0x1
14:36:25: Reserv1                                       :0x0
14:36:25: Time Access 1 TAAC                            :0xe
14:36:26: Time Access 2 NSAC*100                        :0x0
14:36:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:26: Card Command Classess CCC                     :0x5b5
14:36:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:26: DSR(driver stage register)  DSR_IMP           :0x0
14:36:26: Reserv2                                       :0x0
14:36:26: Device Size C_SIZE                            :0xedc8
14:36:26: Reserv3                                       :0x0
14:36:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:26: Reserv4                                       :0x0
14:36:26: Write Speed Factor R2W_FACTOR                 :0x2
14:36:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:26: FILE_FORMAT_GRP                               :0x0
14:36:26: COPY flag                                     :0x1
14:36:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:26: File_Format                                   :0x0
14:36:26: CRC                                           :0x0
14:36:26: ####CSD Registe Values####  

14:36:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57B0>, <py_sfcl.CommandDataDefinition object at 0x05DFB030>) , Command count = 1905 ] 
14:36:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB4B0>, <py_sfcl.CommandDataDefinition object at 0x05DFBE40>) , Command count = 1906 ] 
14:36:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB3C0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB540>, <None>, <py_sfcl.Command23 object at 0x05DFBCF0>) , Command count = 1907 ] 
14:36:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:28: Host Frequency set to 25000 KHz
14:36:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5E10>, 0x0, True) , Command count = 1908 ] 
14:36:28: [GO18_globalSetVolt]### Host voltage value is set.
14:36:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F7B0>, 0x0, False) , Command count = 1909 ] 
14:36:28: [GO18_globalSetVolt]### Host voltage value is set.
14:36:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1910 ] 
14:36:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1911 ] 
14:36:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1912 ] 
14:36:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF90>, <py_sfcl.CommandDataDefinition object at 0x05E0F0F0>) , Command count = 1913 ] 
14:36:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB1E0>) , Command count = 1914 ] 
14:36:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1915 ] 
14:36:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:29: Host Frequency set to 25000 KHz
14:36:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:29: ####CSD Registe 2.0 Values####
14:36:29: CSD_STRUCTURE                                 :0x1
14:36:29: Reserv1                                       :0x0
14:36:29: Time Access 1 TAAC                            :0xe
14:36:29: Time Access 2 NSAC*100                        :0x0
14:36:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:29: Card Command Classess CCC                     :0x5b5
14:36:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:29: DSR(driver stage register)  DSR_IMP           :0x0
14:36:29: Reserv2                                       :0x0
14:36:29: Device Size C_SIZE                            :0xedc8
14:36:29: Reserv3                                       :0x0
14:36:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:29: Reserv4                                       :0x0
14:36:29: Write Speed Factor R2W_FACTOR                 :0x2
14:36:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:29: FILE_FORMAT_GRP                               :0x0
14:36:29: COPY flag                                     :0x1
14:36:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:29: File_Format                                   :0x0
14:36:29: CRC                                           :0x0
14:36:29: ####CSD Registe Values####  

14:36:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:29: [GetSCRRegisterEntry] Passed
14:36:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:29: Data_Status_After Erases          : 0
14:36:29: CPRM Security Support             : No Security
14:36:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:29: Spec. Version                     : Version 3.0X
14:36:29: Extended Security Support         : Extended_Security_Not_Supported
14:36:29: Command Support                   : COMMAND_SUPPORT
14:36:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB7E0>, <py_sfcl.CommandDataDefinition object at 0x05E008A0>) , Command count = 1916 ] 
14:36:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 1917 ] 
14:36:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:29: [ SetBusWidth(0x4) , Command count = 1918 ] 
14:36:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1919 ] 
14:36:29: Protected Area Size 0x28000
14:36:29: Bus Width           2
14:36:29: Secure Mode         0
14:36:29: Speed  Class        4
14:36:29: Perf Move           0
14:36:29: Au Size             9
14:36:29: Erase Size          15
14:36:29: Erase Timeout       1
14:36:29: Erase offset        1
14:36:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1920 ] 
14:36:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:29: Host Frequency set to 100000 KHz
14:36:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:29: ####CSD Registe 2.0 Values####
14:36:29: CSD_STRUCTURE                                 :0x1
14:36:29: Reserv1                                       :0x0
14:36:29: Time Access 1 TAAC                            :0xe
14:36:29: Time Access 2 NSAC*100                        :0x0
14:36:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:29: Card Command Classess CCC                     :0x5b5
14:36:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:29: DSR(driver stage register)  DSR_IMP           :0x0
14:36:29: Reserv2                                       :0x0
14:36:29: Device Size C_SIZE                            :0xedc8
14:36:29: Reserv3                                       :0x0
14:36:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:29: Reserv4                                       :0x0
14:36:29: Write Speed Factor R2W_FACTOR                 :0x2
14:36:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:29: FILE_FORMAT_GRP                               :0x0
14:36:29: COPY flag                                     :0x1
14:36:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:29: File_Format                                   :0x0
14:36:29: CRC                                           :0x0
14:36:29: ####CSD Registe Values####  

14:36:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB480>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 1921 ] 
14:36:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7E0>, <py_sfcl.CommandDataDefinition object at 0x05E00390>) , Command count = 1922 ] 
14:36:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00540>, <py_sfcl.PySEnhancedCmdData object at 0x05E005D0>, <None>, <py_sfcl.Command23 object at 0x05DFB9F0>) , Command count = 1923 ] 
14:36:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:32: Host Frequency set to 25000 KHz
14:36:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBA20>, 0x0, True) , Command count = 1924 ] 
14:36:32: [GO18_globalSetVolt]### Host voltage value is set.
14:36:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FB40>, 0x0, False) , Command count = 1925 ] 
14:36:32: [GO18_globalSetVolt]### Host voltage value is set.
14:36:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1926 ] 
14:36:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1927 ] 
14:36:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1928 ] 
14:36:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB990>, <py_sfcl.CommandDataDefinition object at 0x05E00B40>) , Command count = 1929 ] 
14:36:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F810>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 1930 ] 
14:36:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1931 ] 
14:36:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:32: Host Frequency set to 25000 KHz
14:36:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:32: ####CSD Registe 2.0 Values####
14:36:32: CSD_STRUCTURE                                 :0x1
14:36:32: Reserv1                                       :0x0
14:36:32: Time Access 1 TAAC                            :0xe
14:36:32: Time Access 2 NSAC*100                        :0x0
14:36:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:32: Card Command Classess CCC                     :0x5b5
14:36:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:32: DSR(driver stage register)  DSR_IMP           :0x0
14:36:32: Reserv2                                       :0x0
14:36:32: Device Size C_SIZE                            :0xedc8
14:36:32: Reserv3                                       :0x0
14:36:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:32: Reserv4                                       :0x0
14:36:32: Write Speed Factor R2W_FACTOR                 :0x2
14:36:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:32: FILE_FORMAT_GRP                               :0x0
14:36:32: COPY flag                                     :0x1
14:36:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:32: File_Format                                   :0x0
14:36:32: CRC                                           :0x0
14:36:32: ####CSD Registe Values####  

14:36:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:32: [GetSCRRegisterEntry] Passed
14:36:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:32: Data_Status_After Erases          : 0
14:36:32: CPRM Security Support             : No Security
14:36:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:32: Spec. Version                     : Version 3.0X
14:36:32: Extended Security Support         : Extended_Security_Not_Supported
14:36:32: Command Support                   : COMMAND_SUPPORT
14:36:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045D0>, <py_sfcl.CommandDataDefinition object at 0x05E042D0>) , Command count = 1932 ] 
14:36:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 1933 ] 
14:36:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:32: [ SetBusWidth(0x4) , Command count = 1934 ] 
14:36:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1935 ] 
14:36:32: Protected Area Size 0x28000
14:36:32: Bus Width           2
14:36:32: Secure Mode         0
14:36:32: Speed  Class        4
14:36:32: Perf Move           0
14:36:32: Au Size             9
14:36:32: Erase Size          15
14:36:32: Erase Timeout       1
14:36:32: Erase offset        1
14:36:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1936 ] 
14:36:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:32: Host Frequency set to 100000 KHz
14:36:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:32: ####CSD Registe 2.0 Values####
14:36:32: CSD_STRUCTURE                                 :0x1
14:36:32: Reserv1                                       :0x0
14:36:32: Time Access 1 TAAC                            :0xe
14:36:32: Time Access 2 NSAC*100                        :0x0
14:36:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:32: Card Command Classess CCC                     :0x5b5
14:36:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:32: DSR(driver stage register)  DSR_IMP           :0x0
14:36:32: Reserv2                                       :0x0
14:36:32: Device Size C_SIZE                            :0xedc8
14:36:32: Reserv3                                       :0x0
14:36:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:32: Reserv4                                       :0x0
14:36:33: Write Speed Factor R2W_FACTOR                 :0x2
14:36:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:33: FILE_FORMAT_GRP                               :0x0
14:36:33: COPY flag                                     :0x1
14:36:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:33: File_Format                                   :0x0
14:36:33: CRC                                           :0x0
14:36:33: ####CSD Registe Values####  

14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB210>, <py_sfcl.CommandDataDefinition object at 0x05E0F600>) , Command count = 1937 ] 
14:36:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB780>, <py_sfcl.CommandDataDefinition object at 0x05E00120>) , Command count = 1938 ] 
14:36:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E002A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00330>, <None>, <py_sfcl.Command23 object at 0x05E00810>) , Command count = 1939 ] 
14:36:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:35: Host Frequency set to 25000 KHz
14:36:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBB40>, 0x0, True) , Command count = 1940 ] 
14:36:35: [GO18_globalSetVolt]### Host voltage value is set.
14:36:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04690>, 0x0, False) , Command count = 1941 ] 
14:36:35: [GO18_globalSetVolt]### Host voltage value is set.
14:36:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1942 ] 
14:36:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1943 ] 
14:36:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1944 ] 
14:36:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC30>, <py_sfcl.CommandDataDefinition object at 0x05E04390>) , Command count = 1945 ] 
14:36:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2A0>, <py_sfcl.CommandDataDefinition object at 0x05E003C0>) , Command count = 1946 ] 
14:36:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1947 ] 
14:36:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:35: Host Frequency set to 25000 KHz
14:36:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:35: ####CSD Registe 2.0 Values####
14:36:35: CSD_STRUCTURE                                 :0x1
14:36:35: Reserv1                                       :0x0
14:36:35: Time Access 1 TAAC                            :0xe
14:36:35: Time Access 2 NSAC*100                        :0x0
14:36:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:35: Card Command Classess CCC                     :0x5b5
14:36:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:35: DSR(driver stage register)  DSR_IMP           :0x0
14:36:35: Reserv2                                       :0x0
14:36:35: Device Size C_SIZE                            :0xedc8
14:36:35: Reserv3                                       :0x0
14:36:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:35: Reserv4                                       :0x0
14:36:35: Write Speed Factor R2W_FACTOR                 :0x2
14:36:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:35: FILE_FORMAT_GRP                               :0x0
14:36:35: COPY flag                                     :0x1
14:36:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:35: File_Format                                   :0x0
14:36:35: CRC                                           :0x0
14:36:35: ####CSD Registe Values####  

14:36:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:35: [GetSCRRegisterEntry] Passed
14:36:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:35: Data_Status_After Erases          : 0
14:36:35: CPRM Security Support             : No Security
14:36:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:35: Spec. Version                     : Version 3.0X
14:36:35: Extended Security Support         : Extended_Security_Not_Supported
14:36:35: Command Support                   : COMMAND_SUPPORT
14:36:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BD0>, <py_sfcl.CommandDataDefinition object at 0x05E04210>) , Command count = 1948 ] 
14:36:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C90>, <py_sfcl.CommandDataDefinition object at 0x05E00780>) , Command count = 1949 ] 
14:36:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:35: [ SetBusWidth(0x4) , Command count = 1950 ] 
14:36:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1951 ] 
14:36:35: Protected Area Size 0x28000
14:36:35: Bus Width           2
14:36:35: Secure Mode         0
14:36:35: Speed  Class        4
14:36:35: Perf Move           0
14:36:35: Au Size             9
14:36:35: Erase Size          15
14:36:35: Erase Timeout       1
14:36:35: Erase offset        1
14:36:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1952 ] 
14:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:36: Host Frequency set to 100000 KHz
14:36:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:36: ####CSD Registe 2.0 Values####
14:36:36: CSD_STRUCTURE                                 :0x1
14:36:36: Reserv1                                       :0x0
14:36:36: Time Access 1 TAAC                            :0xe
14:36:36: Time Access 2 NSAC*100                        :0x0
14:36:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:36: Card Command Classess CCC                     :0x5b5
14:36:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:36: DSR(driver stage register)  DSR_IMP           :0x0
14:36:36: Reserv2                                       :0x0
14:36:36: Device Size C_SIZE                            :0xedc8
14:36:36: Reserv3                                       :0x0
14:36:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:36: Reserv4                                       :0x0
14:36:36: Write Speed Factor R2W_FACTOR                 :0x2
14:36:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:36: FILE_FORMAT_GRP                               :0x0
14:36:36: COPY flag                                     :0x1
14:36:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:36: File_Format                                   :0x0
14:36:36: CRC                                           :0x0
14:36:36: ####CSD Registe Values####  

14:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049C0>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 1953 ] 
14:36:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB270>, <py_sfcl.CommandDataDefinition object at 0x05E00C90>) , Command count = 1954 ] 
14:36:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:36: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E046C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00720>, <py_sfcl.PySEnhancedCmdData object at 0x05E00960>, <None>, <py_sfcl.Command23 object at 0x05E00900>) , Command count = 1955 ] 
14:36:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:38: Host Frequency set to 25000 KHz
14:36:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E004B0>, 0x0, True) , Command count = 1956 ] 
14:36:38: [GO18_globalSetVolt]### Host voltage value is set.
14:36:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E009F0>, 0x0, False) , Command count = 1957 ] 
14:36:38: [GO18_globalSetVolt]### Host voltage value is set.
14:36:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1958 ] 
14:36:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1959 ] 
14:36:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1960 ] 
14:36:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00FC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F8A0>) , Command count = 1961 ] 
14:36:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00600>, <py_sfcl.CommandDataDefinition object at 0x05E003F0>) , Command count = 1962 ] 
14:36:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1963 ] 
14:36:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:39: Host Frequency set to 25000 KHz
14:36:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:39: ####CSD Registe 2.0 Values####
14:36:39: CSD_STRUCTURE                                 :0x1
14:36:39: Reserv1                                       :0x0
14:36:39: Time Access 1 TAAC                            :0xe
14:36:39: Time Access 2 NSAC*100                        :0x0
14:36:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:39: Card Command Classess CCC                     :0x5b5
14:36:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:39: DSR(driver stage register)  DSR_IMP           :0x0
14:36:39: Reserv2                                       :0x0
14:36:39: Device Size C_SIZE                            :0xedc8
14:36:39: Reserv3                                       :0x0
14:36:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:39: Reserv4                                       :0x0
14:36:39: Write Speed Factor R2W_FACTOR                 :0x2
14:36:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:39: FILE_FORMAT_GRP                               :0x0
14:36:39: COPY flag                                     :0x1
14:36:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:39: File_Format                                   :0x0
14:36:39: CRC                                           :0x0
14:36:39: ####CSD Registe Values####  

14:36:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:39: [GetSCRRegisterEntry] Passed
14:36:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:39: Data_Status_After Erases          : 0
14:36:39: CPRM Security Support             : No Security
14:36:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:39: Spec. Version                     : Version 3.0X
14:36:39: Extended Security Support         : Extended_Security_Not_Supported
14:36:39: Command Support                   : COMMAND_SUPPORT
14:36:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E048D0>, <py_sfcl.CommandDataDefinition object at 0x05E04420>) , Command count = 1964 ] 
14:36:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05E04270>) , Command count = 1965 ] 
14:36:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:39: [ SetBusWidth(0x4) , Command count = 1966 ] 
14:36:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1967 ] 
14:36:39: Protected Area Size 0x28000
14:36:39: Bus Width           2
14:36:39: Secure Mode         0
14:36:39: Speed  Class        4
14:36:39: Perf Move           0
14:36:39: Au Size             9
14:36:39: Erase Size          15
14:36:39: Erase Timeout       1
14:36:39: Erase offset        1
14:36:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1968 ] 
14:36:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:39: Host Frequency set to 100000 KHz
14:36:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:39: ####CSD Registe 2.0 Values####
14:36:39: CSD_STRUCTURE                                 :0x1
14:36:39: Reserv1                                       :0x0
14:36:39: Time Access 1 TAAC                            :0xe
14:36:39: Time Access 2 NSAC*100                        :0x0
14:36:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:39: Card Command Classess CCC                     :0x5b5
14:36:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:39: DSR(driver stage register)  DSR_IMP           :0x0
14:36:39: Reserv2                                       :0x0
14:36:39: Device Size C_SIZE                            :0xedc8
14:36:39: Reserv3                                       :0x0
14:36:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:39: Reserv4                                       :0x0
14:36:39: Write Speed Factor R2W_FACTOR                 :0x2
14:36:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:39: FILE_FORMAT_GRP                               :0x0
14:36:39: COPY flag                                     :0x1
14:36:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:39: File_Format                                   :0x0
14:36:39: CRC                                           :0x0
14:36:39: ####CSD Registe Values####  

14:36:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04450>, <py_sfcl.CommandDataDefinition object at 0x05E04C00>) , Command count = 1969 ] 
14:36:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A20>, <py_sfcl.CommandDataDefinition object at 0x05E04300>) , Command count = 1970 ] 
14:36:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04960>, <py_sfcl.PySEnhancedCmdData object at 0x05E04030>, <None>, <py_sfcl.Command23 object at 0x05E00210>) , Command count = 1971 ] 
14:36:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:42: Host Frequency set to 25000 KHz
14:36:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04840>, 0x0, True) , Command count = 1972 ] 
14:36:42: [GO18_globalSetVolt]### Host voltage value is set.
14:36:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5B10>, 0x0, False) , Command count = 1973 ] 
14:36:42: [GO18_globalSetVolt]### Host voltage value is set.
14:36:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1974 ] 
14:36:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1975 ] 
14:36:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1976 ] 
14:36:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04930>, <py_sfcl.CommandDataDefinition object at 0x05E044E0>) , Command count = 1977 ] 
14:36:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F840>, <py_sfcl.CommandDataDefinition object at 0x05E04180>) , Command count = 1978 ] 
14:36:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1979 ] 
14:36:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:42: Host Frequency set to 25000 KHz
14:36:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:42: ####CSD Registe 2.0 Values####
14:36:42: CSD_STRUCTURE                                 :0x1
14:36:42: Reserv1                                       :0x0
14:36:42: Time Access 1 TAAC                            :0xe
14:36:42: Time Access 2 NSAC*100                        :0x0
14:36:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:42: Card Command Classess CCC                     :0x5b5
14:36:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:42: DSR(driver stage register)  DSR_IMP           :0x0
14:36:42: Reserv2                                       :0x0
14:36:42: Device Size C_SIZE                            :0xedc8
14:36:42: Reserv3                                       :0x0
14:36:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:42: Reserv4                                       :0x0
14:36:42: Write Speed Factor R2W_FACTOR                 :0x2
14:36:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:42: FILE_FORMAT_GRP                               :0x0
14:36:42: COPY flag                                     :0x1
14:36:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:42: File_Format                                   :0x0
14:36:42: CRC                                           :0x0
14:36:42: ####CSD Registe Values####  

14:36:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:42: [GetSCRRegisterEntry] Passed
14:36:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:42: Data_Status_After Erases          : 0
14:36:42: CPRM Security Support             : No Security
14:36:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:42: Spec. Version                     : Version 3.0X
14:36:42: Extended Security Support         : Extended_Security_Not_Supported
14:36:42: Command Support                   : COMMAND_SUPPORT
14:36:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2D0>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 1980 ] 
14:36:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C60>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 1981 ] 
14:36:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:42: [ SetBusWidth(0x4) , Command count = 1982 ] 
14:36:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1983 ] 
14:36:42: Protected Area Size 0x28000
14:36:42: Bus Width           2
14:36:42: Secure Mode         0
14:36:42: Speed  Class        4
14:36:42: Perf Move           0
14:36:42: Au Size             9
14:36:42: Erase Size          15
14:36:42: Erase Timeout       1
14:36:42: Erase offset        1
14:36:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1984 ] 
14:36:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:42: Host Frequency set to 100000 KHz
14:36:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:42: ####CSD Registe 2.0 Values####
14:36:42: CSD_STRUCTURE                                 :0x1
14:36:42: Reserv1                                       :0x0
14:36:42: Time Access 1 TAAC                            :0xe
14:36:43: Time Access 2 NSAC*100                        :0x0
14:36:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:43: Card Command Classess CCC                     :0x5b5
14:36:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:43: DSR(driver stage register)  DSR_IMP           :0x0
14:36:43: Reserv2                                       :0x0
14:36:43: Device Size C_SIZE                            :0xedc8
14:36:43: Reserv3                                       :0x0
14:36:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:43: Reserv4                                       :0x0
14:36:43: Write Speed Factor R2W_FACTOR                 :0x2
14:36:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:43: FILE_FORMAT_GRP                               :0x0
14:36:43: COPY flag                                     :0x1
14:36:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:43: File_Format                                   :0x0
14:36:43: CRC                                           :0x0
14:36:43: ####CSD Registe Values####  

14:36:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D20>, <py_sfcl.CommandDataDefinition object at 0x05DE9900>) , Command count = 1985 ] 
14:36:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E04330>) , Command count = 1986 ] 
14:36:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05262420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BC60>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BAE0>, <None>, <py_sfcl.Command23 object at 0x05E079C0>) , Command count = 1987 ] 
14:36:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:45: Host Frequency set to 25000 KHz
14:36:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00BA0>, 0x0, True) , Command count = 1988 ] 
14:36:45: [GO18_globalSetVolt]### Host voltage value is set.
14:36:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04600>, 0x0, False) , Command count = 1989 ] 
14:36:45: [GO18_globalSetVolt]### Host voltage value is set.
14:36:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1990 ] 
14:36:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1991 ] 
14:36:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1992 ] 
14:36:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 1993 ] 
14:36:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F00>, <py_sfcl.CommandDataDefinition object at 0x05E075D0>) , Command count = 1994 ] 
14:36:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1995 ] 
14:36:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:46: Host Frequency set to 25000 KHz
14:36:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:46: ####CSD Registe 2.0 Values####
14:36:46: CSD_STRUCTURE                                 :0x1
14:36:46: Reserv1                                       :0x0
14:36:46: Time Access 1 TAAC                            :0xe
14:36:46: Time Access 2 NSAC*100                        :0x0
14:36:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:46: Card Command Classess CCC                     :0x5b5
14:36:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:46: DSR(driver stage register)  DSR_IMP           :0x0
14:36:46: Reserv2                                       :0x0
14:36:46: Device Size C_SIZE                            :0xedc8
14:36:46: Reserv3                                       :0x0
14:36:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:46: Reserv4                                       :0x0
14:36:46: Write Speed Factor R2W_FACTOR                 :0x2
14:36:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:46: FILE_FORMAT_GRP                               :0x0
14:36:46: COPY flag                                     :0x1
14:36:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:46: File_Format                                   :0x0
14:36:46: CRC                                           :0x0
14:36:46: ####CSD Registe Values####  

14:36:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:46: [GetSCRRegisterEntry] Passed
14:36:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:46: Data_Status_After Erases          : 0
14:36:46: CPRM Security Support             : No Security
14:36:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:46: Spec. Version                     : Version 3.0X
14:36:46: Extended Security Support         : Extended_Security_Not_Supported
14:36:46: Command Support                   : COMMAND_SUPPORT
14:36:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E07510>) , Command count = 1996 ] 
14:36:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 1997 ] 
14:36:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:46: [ SetBusWidth(0x4) , Command count = 1998 ] 
14:36:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1999 ] 
14:36:46: Protected Area Size 0x28000
14:36:46: Bus Width           2
14:36:46: Secure Mode         0
14:36:46: Speed  Class        4
14:36:46: Perf Move           0
14:36:46: Au Size             9
14:36:46: Erase Size          15
14:36:46: Erase Timeout       1
14:36:46: Erase offset        1
14:36:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2000 ] 
14:36:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:46: Host Frequency set to 100000 KHz
14:36:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:46: ####CSD Registe 2.0 Values####
14:36:46: CSD_STRUCTURE                                 :0x1
14:36:46: Reserv1                                       :0x0
14:36:46: Time Access 1 TAAC                            :0xe
14:36:46: Time Access 2 NSAC*100                        :0x0
14:36:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:46: Card Command Classess CCC                     :0x5b5
14:36:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:46: DSR(driver stage register)  DSR_IMP           :0x0
14:36:46: Reserv2                                       :0x0
14:36:46: Device Size C_SIZE                            :0xedc8
14:36:46: Reserv3                                       :0x0
14:36:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:46: Reserv4                                       :0x0
14:36:46: Write Speed Factor R2W_FACTOR                 :0x2
14:36:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:46: FILE_FORMAT_GRP                               :0x0
14:36:46: COPY flag                                     :0x1
14:36:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:46: File_Format                                   :0x0
14:36:46: CRC                                           :0x0
14:36:46: ####CSD Registe Values####  

14:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 2001 ] 
14:36:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E07C30>) , Command count = 2002 ] 
14:36:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07E40>, <py_sfcl.PySEnhancedCmdData object at 0x05E07DE0>, <None>, <py_sfcl.Command23 object at 0x05E0FDB0>) , Command count = 2003 ] 
14:36:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:49: Host Frequency set to 25000 KHz
14:36:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04870>, 0x0, True) , Command count = 2004 ] 
14:36:49: [GO18_globalSetVolt]### Host voltage value is set.
14:36:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04630>, 0x0, False) , Command count = 2005 ] 
14:36:49: [GO18_globalSetVolt]### Host voltage value is set.
14:36:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2006 ] 
14:36:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2007 ] 
14:36:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2008 ] 
14:36:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B0F0>, <py_sfcl.CommandDataDefinition object at 0x05E074E0>) , Command count = 2009 ] 
14:36:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B10>, <py_sfcl.CommandDataDefinition object at 0x05E07450>) , Command count = 2010 ] 
14:36:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2011 ] 
14:36:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:49: Host Frequency set to 25000 KHz
14:36:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:49: ####CSD Registe 2.0 Values####
14:36:49: CSD_STRUCTURE                                 :0x1
14:36:49: Reserv1                                       :0x0
14:36:49: Time Access 1 TAAC                            :0xe
14:36:49: Time Access 2 NSAC*100                        :0x0
14:36:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:49: Card Command Classess CCC                     :0x5b5
14:36:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:49: DSR(driver stage register)  DSR_IMP           :0x0
14:36:49: Reserv2                                       :0x0
14:36:49: Device Size C_SIZE                            :0xedc8
14:36:49: Reserv3                                       :0x0
14:36:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:49: Reserv4                                       :0x0
14:36:49: Write Speed Factor R2W_FACTOR                 :0x2
14:36:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:49: FILE_FORMAT_GRP                               :0x0
14:36:49: COPY flag                                     :0x1
14:36:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:49: File_Format                                   :0x0
14:36:49: CRC                                           :0x0
14:36:49: ####CSD Registe Values####  

14:36:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:49: [GetSCRRegisterEntry] Passed
14:36:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:49: Data_Status_After Erases          : 0
14:36:49: CPRM Security Support             : No Security
14:36:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:49: Spec. Version                     : Version 3.0X
14:36:49: Extended Security Support         : Extended_Security_Not_Supported
14:36:49: Command Support                   : COMMAND_SUPPORT
14:36:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B150>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 2012 ] 
14:36:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B300>, <py_sfcl.CommandDataDefinition object at 0x05E0B120>) , Command count = 2013 ] 
14:36:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:49: [ SetBusWidth(0x4) , Command count = 2014 ] 
14:36:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2015 ] 
14:36:49: Protected Area Size 0x28000
14:36:49: Bus Width           2
14:36:49: Secure Mode         0
14:36:49: Speed  Class        4
14:36:49: Perf Move           0
14:36:49: Au Size             9
14:36:49: Erase Size          15
14:36:49: Erase Timeout       1
14:36:49: Erase offset        1
14:36:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2016 ] 
14:36:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:49: Host Frequency set to 100000 KHz
14:36:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:49: ####CSD Registe 2.0 Values####
14:36:49: CSD_STRUCTURE                                 :0x1
14:36:49: Reserv1                                       :0x0
14:36:49: Time Access 1 TAAC                            :0xe
14:36:49: Time Access 2 NSAC*100                        :0x0
14:36:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:49: Card Command Classess CCC                     :0x5b5
14:36:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:49: DSR(driver stage register)  DSR_IMP           :0x0
14:36:49: Reserv2                                       :0x0
14:36:49: Device Size C_SIZE                            :0xedc8
14:36:49: Reserv3                                       :0x0
14:36:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:49: Reserv4                                       :0x0
14:36:50: Write Speed Factor R2W_FACTOR                 :0x2
14:36:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:50: FILE_FORMAT_GRP                               :0x0
14:36:50: COPY flag                                     :0x1
14:36:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:50: File_Format                                   :0x0
14:36:50: CRC                                           :0x0
14:36:50: ####CSD Registe Values####  

14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B810>) , Command count = 2017 ] 
14:36:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04AE0>, <py_sfcl.CommandDataDefinition object at 0x05E07750>) , Command count = 2018 ] 
14:36:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FF00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07990>, <py_sfcl.PySEnhancedCmdData object at 0x05E076F0>, <None>, <py_sfcl.Command23 object at 0x05E07360>) , Command count = 2019 ] 
14:36:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:52: Host Frequency set to 25000 KHz
14:36:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B060>, 0x0, True) , Command count = 2020 ] 
14:36:52: [GO18_globalSetVolt]### Host voltage value is set.
14:36:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE97E0>, 0x0, False) , Command count = 2021 ] 
14:36:52: [GO18_globalSetVolt]### Host voltage value is set.
14:36:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2022 ] 
14:36:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2023 ] 
14:36:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2024 ] 
14:36:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0BA80>) , Command count = 2025 ] 
14:36:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5AE0>, <py_sfcl.CommandDataDefinition object at 0x05E073C0>) , Command count = 2026 ] 
14:36:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:52: [ SetCardRCA(0x1, 0xD555) , Command count = 2027 ] 
14:36:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:52: Host Frequency set to 25000 KHz
14:36:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:52: ####CSD Registe 2.0 Values####
14:36:52: CSD_STRUCTURE                                 :0x1
14:36:52: Reserv1                                       :0x0
14:36:52: Time Access 1 TAAC                            :0xe
14:36:52: Time Access 2 NSAC*100                        :0x0
14:36:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:52: Card Command Classess CCC                     :0x5b5
14:36:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:52: DSR(driver stage register)  DSR_IMP           :0x0
14:36:52: Reserv2                                       :0x0
14:36:52: Device Size C_SIZE                            :0xedc8
14:36:52: Reserv3                                       :0x0
14:36:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:52: Reserv4                                       :0x0
14:36:52: Write Speed Factor R2W_FACTOR                 :0x2
14:36:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:52: FILE_FORMAT_GRP                               :0x0
14:36:52: COPY flag                                     :0x1
14:36:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:52: File_Format                                   :0x0
14:36:52: CRC                                           :0x0
14:36:52: ####CSD Registe Values####  

14:36:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:52: [GetSCRRegisterEntry] Passed
14:36:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:52: Data_Status_After Erases          : 0
14:36:52: CPRM Security Support             : No Security
14:36:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:52: Spec. Version                     : Version 3.0X
14:36:52: Extended Security Support         : Extended_Security_Not_Supported
14:36:52: Command Support                   : COMMAND_SUPPORT
14:36:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B8A0>, <py_sfcl.CommandDataDefinition object at 0x05E07780>) , Command count = 2028 ] 
14:36:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C00>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 2029 ] 
14:36:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:53: [ SetBusWidth(0x4) , Command count = 2030 ] 
14:36:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2031 ] 
14:36:53: Protected Area Size 0x28000
14:36:53: Bus Width           2
14:36:53: Secure Mode         0
14:36:53: Speed  Class        4
14:36:53: Perf Move           0
14:36:53: Au Size             9
14:36:53: Erase Size          15
14:36:53: Erase Timeout       1
14:36:53: Erase offset        1
14:36:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2032 ] 
14:36:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:53: Host Frequency set to 100000 KHz
14:36:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:53: ####CSD Registe 2.0 Values####
14:36:53: CSD_STRUCTURE                                 :0x1
14:36:53: Reserv1                                       :0x0
14:36:53: Time Access 1 TAAC                            :0xe
14:36:53: Time Access 2 NSAC*100                        :0x0
14:36:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:53: Card Command Classess CCC                     :0x5b5
14:36:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:53: DSR(driver stage register)  DSR_IMP           :0x0
14:36:53: Reserv2                                       :0x0
14:36:53: Device Size C_SIZE                            :0xedc8
14:36:53: Reserv3                                       :0x0
14:36:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:53: Reserv4                                       :0x0
14:36:53: Write Speed Factor R2W_FACTOR                 :0x2
14:36:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:53: FILE_FORMAT_GRP                               :0x0
14:36:53: COPY flag                                     :0x1
14:36:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:53: File_Format                                   :0x0
14:36:53: CRC                                           :0x0
14:36:53: ####CSD Registe Values####  

14:36:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 2033 ] 
14:36:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F870>, <py_sfcl.CommandDataDefinition object at 0x05E0B9C0>) , Command count = 2034 ] 
14:36:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052819C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07390>, <py_sfcl.PySEnhancedCmdData object at 0x05E073F0>, <None>, <py_sfcl.Command23 object at 0x05E07840>) , Command count = 2035 ] 
14:36:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:55: Host Frequency set to 25000 KHz
14:36:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5A50>, 0x0, True) , Command count = 2036 ] 
14:36:56: [GO18_globalSetVolt]### Host voltage value is set.
14:36:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B630>, 0x0, False) , Command count = 2037 ] 
14:36:56: [GO18_globalSetVolt]### Host voltage value is set.
14:36:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2038 ] 
14:36:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2039 ] 
14:36:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2040 ] 
14:36:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F240>, <py_sfcl.CommandDataDefinition object at 0x05E0FE40>) , Command count = 2041 ] 
14:36:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B8D0>, <py_sfcl.CommandDataDefinition object at 0x05E0B780>) , Command count = 2042 ] 
14:36:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2043 ] 
14:36:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:56: Host Frequency set to 25000 KHz
14:36:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:56: ####CSD Registe 2.0 Values####
14:36:56: CSD_STRUCTURE                                 :0x1
14:36:56: Reserv1                                       :0x0
14:36:56: Time Access 1 TAAC                            :0xe
14:36:56: Time Access 2 NSAC*100                        :0x0
14:36:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:56: Card Command Classess CCC                     :0x5b5
14:36:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:56: DSR(driver stage register)  DSR_IMP           :0x0
14:36:56: Reserv2                                       :0x0
14:36:56: Device Size C_SIZE                            :0xedc8
14:36:56: Reserv3                                       :0x0
14:36:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:56: Reserv4                                       :0x0
14:36:56: Write Speed Factor R2W_FACTOR                 :0x2
14:36:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:56: FILE_FORMAT_GRP                               :0x0
14:36:56: COPY flag                                     :0x1
14:36:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:56: File_Format                                   :0x0
14:36:56: CRC                                           :0x0
14:36:56: ####CSD Registe Values####  

14:36:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:56: [GetSCRRegisterEntry] Passed
14:36:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:56: Data_Status_After Erases          : 0
14:36:56: CPRM Security Support             : No Security
14:36:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:56: Spec. Version                     : Version 3.0X
14:36:56: Extended Security Support         : Extended_Security_Not_Supported
14:36:56: Command Support                   : COMMAND_SUPPORT
14:36:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BE40>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 2044 ] 
14:36:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B660>, <py_sfcl.CommandDataDefinition object at 0x05E0BC30>) , Command count = 2045 ] 
14:36:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:56: [ SetBusWidth(0x4) , Command count = 2046 ] 
14:36:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2047 ] 
14:36:56: Protected Area Size 0x28000
14:36:56: Bus Width           2
14:36:56: Secure Mode         0
14:36:56: Speed  Class        4
14:36:56: Perf Move           0
14:36:56: Au Size             9
14:36:56: Erase Size          15
14:36:56: Erase Timeout       1
14:36:56: Erase offset        1
14:36:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2048 ] 
14:36:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:56: Host Frequency set to 100000 KHz
14:36:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:56: ####CSD Registe 2.0 Values####
14:36:56: CSD_STRUCTURE                                 :0x1
14:36:56: Reserv1                                       :0x0
14:36:56: Time Access 1 TAAC                            :0xe
14:36:56: Time Access 2 NSAC*100                        :0x0
14:36:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:56: Card Command Classess CCC                     :0x5b5
14:36:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:56: DSR(driver stage register)  DSR_IMP           :0x0
14:36:56: Reserv2                                       :0x0
14:36:56: Device Size C_SIZE                            :0xedc8
14:36:56: Reserv3                                       :0x0
14:36:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:56: Reserv4                                       :0x0
14:36:56: Write Speed Factor R2W_FACTOR                 :0x2
14:36:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:57: FILE_FORMAT_GRP                               :0x0
14:36:57: COPY flag                                     :0x1
14:36:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:57: File_Format                                   :0x0
14:36:57: CRC                                           :0x0
14:36:57: ####CSD Registe Values####  

14:36:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B7E0>) , Command count = 2049 ] 
14:36:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F990>, <py_sfcl.CommandDataDefinition object at 0x05E07AE0>) , Command count = 2050 ] 
14:36:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:36:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:36:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEF060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07D80>, <py_sfcl.PySEnhancedCmdData object at 0x05E07FC0>, <None>, <py_sfcl.Command23 object at 0x05E07180>) , Command count = 2051 ] 
14:36:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:36:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:59: Host Frequency set to 25000 KHz
14:36:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B510>, 0x0, True) , Command count = 2052 ] 
14:36:59: [GO18_globalSetVolt]### Host voltage value is set.
14:36:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281A50>, 0x0, False) , Command count = 2053 ] 
14:36:59: [GO18_globalSetVolt]### Host voltage value is set.
14:36:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2054 ] 
14:36:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2055 ] 
14:36:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2056 ] 
14:36:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05E0BF60>) , Command count = 2057 ] 
14:36:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05144030>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 2058 ] 
14:36:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2059 ] 
14:36:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:59: Host Frequency set to 25000 KHz
14:36:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:59: ####CSD Registe 2.0 Values####
14:36:59: CSD_STRUCTURE                                 :0x1
14:36:59: Reserv1                                       :0x0
14:36:59: Time Access 1 TAAC                            :0xe
14:36:59: Time Access 2 NSAC*100                        :0x0
14:36:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:59: Card Command Classess CCC                     :0x5b5
14:36:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:59: DSR(driver stage register)  DSR_IMP           :0x0
14:36:59: Reserv2                                       :0x0
14:36:59: Device Size C_SIZE                            :0xedc8
14:36:59: Reserv3                                       :0x0
14:36:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:59: Reserv4                                       :0x0
14:36:59: Write Speed Factor R2W_FACTOR                 :0x2
14:36:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:59: FILE_FORMAT_GRP                               :0x0
14:36:59: COPY flag                                     :0x1
14:36:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:59: File_Format                                   :0x0
14:36:59: CRC                                           :0x0
14:36:59: ####CSD Registe Values####  

14:36:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:59: [GetSCRRegisterEntry] Passed
14:36:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:59: Data_Status_After Erases          : 0
14:36:59: CPRM Security Support             : No Security
14:36:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:59: Spec. Version                     : Version 3.0X
14:36:59: Extended Security Support         : Extended_Security_Not_Supported
14:36:59: Command Support                   : COMMAND_SUPPORT
14:36:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD80>) , Command count = 2060 ] 
14:36:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B840>, <py_sfcl.CommandDataDefinition object at 0x05E07090>) , Command count = 2061 ] 
14:36:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:59: [ SetBusWidth(0x4) , Command count = 2062 ] 
14:36:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE99C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2063 ] 
14:36:59: Protected Area Size 0x28000
14:36:59: Bus Width           2
14:36:59: Secure Mode         0
14:36:59: Speed  Class        4
14:36:59: Perf Move           0
14:36:59: Au Size             9
14:36:59: Erase Size          15
14:36:59: Erase Timeout       1
14:36:59: Erase offset        1
14:36:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2064 ] 
14:36:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:59: Host Frequency set to 100000 KHz
14:36:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:59: ####CSD Registe 2.0 Values####
14:36:59: CSD_STRUCTURE                                 :0x1
14:36:59: Reserv1                                       :0x0
14:36:59: Time Access 1 TAAC                            :0xe
14:37:00: Time Access 2 NSAC*100                        :0x0
14:37:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:00: Card Command Classess CCC                     :0x5b5
14:37:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:00: DSR(driver stage register)  DSR_IMP           :0x0
14:37:00: Reserv2                                       :0x0
14:37:00: Device Size C_SIZE                            :0xedc8
14:37:00: Reserv3                                       :0x0
14:37:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:00: Reserv4                                       :0x0
14:37:00: Write Speed Factor R2W_FACTOR                 :0x2
14:37:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:00: FILE_FORMAT_GRP                               :0x0
14:37:00: COPY flag                                     :0x1
14:37:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:00: File_Format                                   :0x0
14:37:00: CRC                                           :0x0
14:37:00: ####CSD Registe Values####  

14:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BDB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 2065 ] 
14:37:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F120>, <py_sfcl.CommandDataDefinition object at 0x05E07600>) , Command count = 2066 ] 
14:37:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07ED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07CC0>, <None>, <py_sfcl.Command23 object at 0x05E07AB0>) , Command count = 2067 ] 
14:37:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:02: Host Frequency set to 25000 KHz
14:37:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x052177E0>, 0x0, True) , Command count = 2068 ] 
14:37:02: [GO18_globalSetVolt]### Host voltage value is set.
14:37:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00660>, 0x0, False) , Command count = 2069 ] 
14:37:02: [GO18_globalSetVolt]### Host voltage value is set.
14:37:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2070 ] 
14:37:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2071 ] 
14:37:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2072 ] 
14:37:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C60>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 2073 ] 
14:37:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC60>, <py_sfcl.CommandDataDefinition object at 0x05E0F7E0>) , Command count = 2074 ] 
14:37:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:03: [ SetCardRCA(0x1, 0xD555) , Command count = 2075 ] 
14:37:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:03: Host Frequency set to 25000 KHz
14:37:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:03: ####CSD Registe 2.0 Values####
14:37:03: CSD_STRUCTURE                                 :0x1
14:37:03: Reserv1                                       :0x0
14:37:03: Time Access 1 TAAC                            :0xe
14:37:03: Time Access 2 NSAC*100                        :0x0
14:37:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:03: Card Command Classess CCC                     :0x5b5
14:37:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:03: DSR(driver stage register)  DSR_IMP           :0x0
14:37:03: Reserv2                                       :0x0
14:37:03: Device Size C_SIZE                            :0xedc8
14:37:03: Reserv3                                       :0x0
14:37:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:03: Reserv4                                       :0x0
14:37:03: Write Speed Factor R2W_FACTOR                 :0x2
14:37:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:03: FILE_FORMAT_GRP                               :0x0
14:37:03: COPY flag                                     :0x1
14:37:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:03: File_Format                                   :0x0
14:37:03: CRC                                           :0x0
14:37:03: ####CSD Registe Values####  

14:37:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:03: [GetSCRRegisterEntry] Passed
14:37:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:03: Data_Status_After Erases          : 0
14:37:03: CPRM Security Support             : No Security
14:37:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:03: Spec. Version                     : Version 3.0X
14:37:03: Extended Security Support         : Extended_Security_Not_Supported
14:37:03: Command Support                   : COMMAND_SUPPORT
14:37:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E044B0>, <py_sfcl.CommandDataDefinition object at 0x05E0BEA0>) , Command count = 2076 ] 
14:37:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5210>, <py_sfcl.CommandDataDefinition object at 0x0526F1E0>) , Command count = 2077 ] 
14:37:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:03: [ SetBusWidth(0x4) , Command count = 2078 ] 
14:37:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2079 ] 
14:37:03: Protected Area Size 0x28000
14:37:03: Bus Width           2
14:37:03: Secure Mode         0
14:37:03: Speed  Class        4
14:37:03: Perf Move           0
14:37:03: Au Size             9
14:37:03: Erase Size          15
14:37:03: Erase Timeout       1
14:37:03: Erase offset        1
14:37:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2080 ] 
14:37:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:03: Host Frequency set to 100000 KHz
14:37:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:03: ####CSD Registe 2.0 Values####
14:37:03: CSD_STRUCTURE                                 :0x1
14:37:03: Reserv1                                       :0x0
14:37:03: Time Access 1 TAAC                            :0xe
14:37:03: Time Access 2 NSAC*100                        :0x0
14:37:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:03: Card Command Classess CCC                     :0x5b5
14:37:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:03: DSR(driver stage register)  DSR_IMP           :0x0
14:37:03: Reserv2                                       :0x0
14:37:03: Device Size C_SIZE                            :0xedc8
14:37:03: Reserv3                                       :0x0
14:37:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:03: Reserv4                                       :0x0
14:37:03: Write Speed Factor R2W_FACTOR                 :0x2
14:37:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:03: FILE_FORMAT_GRP                               :0x0
14:37:03: COPY flag                                     :0x1
14:37:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:03: File_Format                                   :0x0
14:37:03: CRC                                           :0x0
14:37:03: ####CSD Registe Values####  

14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0B3F0>) , Command count = 2081 ] 
14:37:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9BA0>, <py_sfcl.CommandDataDefinition object at 0x05CEF030>) , Command count = 2082 ] 
14:37:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E070C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07810>, <None>, <py_sfcl.Command23 object at 0x05E07AE0>) , Command count = 2083 ] 
14:37:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:06: Host Frequency set to 25000 KHz
14:37:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FEA0>, 0x0, True) , Command count = 2084 ] 
14:37:06: [GO18_globalSetVolt]### Host voltage value is set.
14:37:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BFC0>, 0x0, False) , Command count = 2085 ] 
14:37:06: [GO18_globalSetVolt]### Host voltage value is set.
14:37:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2086 ] 
14:37:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2087 ] 
14:37:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2088 ] 
14:37:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F8D0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF30>) , Command count = 2089 ] 
14:37:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BC90>, <py_sfcl.CommandDataDefinition object at 0x05281F30>) , Command count = 2090 ] 
14:37:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2091 ] 
14:37:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:06: Host Frequency set to 25000 KHz
14:37:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:06: ####CSD Registe 2.0 Values####
14:37:06: CSD_STRUCTURE                                 :0x1
14:37:06: Reserv1                                       :0x0
14:37:06: Time Access 1 TAAC                            :0xe
14:37:06: Time Access 2 NSAC*100                        :0x0
14:37:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:06: Card Command Classess CCC                     :0x5b5
14:37:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:06: DSR(driver stage register)  DSR_IMP           :0x0
14:37:06: Reserv2                                       :0x0
14:37:06: Device Size C_SIZE                            :0xedc8
14:37:06: Reserv3                                       :0x0
14:37:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:06: Reserv4                                       :0x0
14:37:06: Write Speed Factor R2W_FACTOR                 :0x2
14:37:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:06: FILE_FORMAT_GRP                               :0x0
14:37:06: COPY flag                                     :0x1
14:37:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:06: File_Format                                   :0x0
14:37:06: CRC                                           :0x0
14:37:06: ####CSD Registe Values####  

14:37:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:06: [GetSCRRegisterEntry] Passed
14:37:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:06: Data_Status_After Erases          : 0
14:37:06: CPRM Security Support             : No Security
14:37:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:06: Spec. Version                     : Version 3.0X
14:37:06: Extended Security Support         : Extended_Security_Not_Supported
14:37:06: Command Support                   : COMMAND_SUPPORT
14:37:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCC0>, <py_sfcl.CommandDataDefinition object at 0x05E0FF30>) , Command count = 2092 ] 
14:37:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F900>, <py_sfcl.CommandDataDefinition object at 0x05DF54E0>) , Command count = 2093 ] 
14:37:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:06: [ SetBusWidth(0x4) , Command count = 2094 ] 
14:37:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05281FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2095 ] 
14:37:06: Protected Area Size 0x28000
14:37:06: Bus Width           2
14:37:06: Secure Mode         0
14:37:06: Speed  Class        4
14:37:06: Perf Move           0
14:37:06: Au Size             9
14:37:06: Erase Size          15
14:37:06: Erase Timeout       1
14:37:06: Erase offset        1
14:37:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2096 ] 
14:37:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:06: Host Frequency set to 100000 KHz
14:37:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:06: ####CSD Registe 2.0 Values####
14:37:06: CSD_STRUCTURE                                 :0x1
14:37:06: Reserv1                                       :0x0
14:37:06: Time Access 1 TAAC                            :0xe
14:37:06: Time Access 2 NSAC*100                        :0x0
14:37:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:06: Card Command Classess CCC                     :0x5b5
14:37:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:06: DSR(driver stage register)  DSR_IMP           :0x0
14:37:06: Reserv2                                       :0x0
14:37:06: Device Size C_SIZE                            :0xedc8
14:37:06: Reserv3                                       :0x0
14:37:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:06: Reserv4                                       :0x0
14:37:07: Write Speed Factor R2W_FACTOR                 :0x2
14:37:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:07: FILE_FORMAT_GRP                               :0x0
14:37:07: COPY flag                                     :0x1
14:37:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:07: File_Format                                   :0x0
14:37:07: CRC                                           :0x0
14:37:07: ####CSD Registe Values####  

14:37:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B40>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 2097 ] 
14:37:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B4E0>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 2098 ] 
14:37:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:07: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E072A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07870>, <None>, <py_sfcl.Command23 object at 0x05E07F30>) , Command count = 2099 ] 
14:37:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:09: Host Frequency set to 25000 KHz
14:37:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F90>, 0x0, True) , Command count = 2100 ] 
14:37:09: [GO18_globalSetVolt]### Host voltage value is set.
14:37:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F210>, 0x0, False) , Command count = 2101 ] 
14:37:09: [GO18_globalSetVolt]### Host voltage value is set.
14:37:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2102 ] 
14:37:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2103 ] 
14:37:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2104 ] 
14:37:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 2105 ] 
14:37:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F5A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B6C0>) , Command count = 2106 ] 
14:37:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2107 ] 
14:37:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:09: Host Frequency set to 25000 KHz
14:37:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:09: ####CSD Registe 2.0 Values####
14:37:09: CSD_STRUCTURE                                 :0x1
14:37:09: Reserv1                                       :0x0
14:37:09: Time Access 1 TAAC                            :0xe
14:37:09: Time Access 2 NSAC*100                        :0x0
14:37:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:09: Card Command Classess CCC                     :0x5b5
14:37:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:09: DSR(driver stage register)  DSR_IMP           :0x0
14:37:09: Reserv2                                       :0x0
14:37:09: Device Size C_SIZE                            :0xedc8
14:37:09: Reserv3                                       :0x0
14:37:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:09: Reserv4                                       :0x0
14:37:09: Write Speed Factor R2W_FACTOR                 :0x2
14:37:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:09: FILE_FORMAT_GRP                               :0x0
14:37:09: COPY flag                                     :0x1
14:37:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:09: File_Format                                   :0x0
14:37:09: CRC                                           :0x0
14:37:09: ####CSD Registe Values####  

14:37:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:09: [GetSCRRegisterEntry] Passed
14:37:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:09: Data_Status_After Erases          : 0
14:37:09: CPRM Security Support             : No Security
14:37:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:09: Spec. Version                     : Version 3.0X
14:37:09: Extended Security Support         : Extended_Security_Not_Supported
14:37:09: Command Support                   : COMMAND_SUPPORT
14:37:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB10>) , Command count = 2108 ] 
14:37:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF660>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 2109 ] 
14:37:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:09: [ SetBusWidth(0x4) , Command count = 2110 ] 
14:37:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2111 ] 
14:37:09: Protected Area Size 0x28000
14:37:09: Bus Width           2
14:37:09: Secure Mode         0
14:37:09: Speed  Class        4
14:37:09: Perf Move           0
14:37:09: Au Size             9
14:37:09: Erase Size          15
14:37:09: Erase Timeout       1
14:37:09: Erase offset        1
14:37:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2112 ] 
14:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:10: Host Frequency set to 100000 KHz
14:37:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:10: ####CSD Registe 2.0 Values####
14:37:10: CSD_STRUCTURE                                 :0x1
14:37:10: Reserv1                                       :0x0
14:37:10: Time Access 1 TAAC                            :0xe
14:37:10: Time Access 2 NSAC*100                        :0x0
14:37:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:10: Card Command Classess CCC                     :0x5b5
14:37:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:10: DSR(driver stage register)  DSR_IMP           :0x0
14:37:10: Reserv2                                       :0x0
14:37:10: Device Size C_SIZE                            :0xedc8
14:37:10: Reserv3                                       :0x0
14:37:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:10: Reserv4                                       :0x0
14:37:10: Write Speed Factor R2W_FACTOR                 :0x2
14:37:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:10: FILE_FORMAT_GRP                               :0x0
14:37:10: COPY flag                                     :0x1
14:37:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:10: File_Format                                   :0x0
14:37:10: CRC                                           :0x0
14:37:10: ####CSD Registe Values####  

14:37:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F330>, <py_sfcl.CommandDataDefinition object at 0x05DE9DB0>) , Command count = 2113 ] 
14:37:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF2D0>, <py_sfcl.CommandDataDefinition object at 0x05DF5F00>) , Command count = 2114 ] 
14:37:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBF60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF54B0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5DB0>, <None>, <py_sfcl.Command23 object at 0x05E07960>) , Command count = 2115 ] 
14:37:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:12: Host Frequency set to 25000 KHz
14:37:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9ED0>, 0x0, True) , Command count = 2116 ] 
14:37:12: [GO18_globalSetVolt]### Host voltage value is set.
14:37:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB720>, 0x0, False) , Command count = 2117 ] 
14:37:12: [GO18_globalSetVolt]### Host voltage value is set.
14:37:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2118 ] 
14:37:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2119 ] 
14:37:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2120 ] 
14:37:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB750>, <py_sfcl.CommandDataDefinition object at 0x05E0FF90>) , Command count = 2121 ] 
14:37:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC00>, <py_sfcl.CommandDataDefinition object at 0x05DF55A0>) , Command count = 2122 ] 
14:37:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2123 ] 
14:37:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:13: Host Frequency set to 25000 KHz
14:37:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:13: ####CSD Registe 2.0 Values####
14:37:13: CSD_STRUCTURE                                 :0x1
14:37:13: Reserv1                                       :0x0
14:37:13: Time Access 1 TAAC                            :0xe
14:37:13: Time Access 2 NSAC*100                        :0x0
14:37:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:13: Card Command Classess CCC                     :0x5b5
14:37:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:13: DSR(driver stage register)  DSR_IMP           :0x0
14:37:13: Reserv2                                       :0x0
14:37:13: Device Size C_SIZE                            :0xedc8
14:37:13: Reserv3                                       :0x0
14:37:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:13: Reserv4                                       :0x0
14:37:13: Write Speed Factor R2W_FACTOR                 :0x2
14:37:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:13: FILE_FORMAT_GRP                               :0x0
14:37:13: COPY flag                                     :0x1
14:37:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:13: File_Format                                   :0x0
14:37:13: CRC                                           :0x0
14:37:13: ####CSD Registe Values####  

14:37:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:13: [GetSCRRegisterEntry] Passed
14:37:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:13: Data_Status_After Erases          : 0
14:37:13: CPRM Security Support             : No Security
14:37:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:13: Spec. Version                     : Version 3.0X
14:37:13: Extended Security Support         : Extended_Security_Not_Supported
14:37:13: Command Support                   : COMMAND_SUPPORT
14:37:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DF5A20>) , Command count = 2124 ] 
14:37:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D50>, <py_sfcl.CommandDataDefinition object at 0x05DF5C60>) , Command count = 2125 ] 
14:37:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:13: [ SetBusWidth(0x4) , Command count = 2126 ] 
14:37:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2127 ] 
14:37:13: Protected Area Size 0x28000
14:37:13: Bus Width           2
14:37:13: Secure Mode         0
14:37:13: Speed  Class        4
14:37:13: Perf Move           0
14:37:13: Au Size             9
14:37:13: Erase Size          15
14:37:13: Erase Timeout       1
14:37:13: Erase offset        1
14:37:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2128 ] 
14:37:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:13: Host Frequency set to 100000 KHz
14:37:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:13: ####CSD Registe 2.0 Values####
14:37:13: CSD_STRUCTURE                                 :0x1
14:37:13: Reserv1                                       :0x0
14:37:13: Time Access 1 TAAC                            :0xe
14:37:13: Time Access 2 NSAC*100                        :0x0
14:37:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:13: Card Command Classess CCC                     :0x5b5
14:37:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:13: DSR(driver stage register)  DSR_IMP           :0x0
14:37:13: Reserv2                                       :0x0
14:37:13: Device Size C_SIZE                            :0xedc8
14:37:13: Reserv3                                       :0x0
14:37:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:13: Reserv4                                       :0x0
14:37:13: Write Speed Factor R2W_FACTOR                 :0x2
14:37:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:13: FILE_FORMAT_GRP                               :0x0
14:37:13: COPY flag                                     :0x1
14:37:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:13: File_Format                                   :0x0
14:37:13: CRC                                           :0x0
14:37:13: ####CSD Registe Values####  

14:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F060>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 2129 ] 
14:37:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F9F0>, <py_sfcl.CommandDataDefinition object at 0x05DF5F90>) , Command count = 2130 ] 
14:37:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5D20>, <py_sfcl.PySEnhancedCmdData object at 0x05E078D0>, <None>, <py_sfcl.Command23 object at 0x05E07600>) , Command count = 2131 ] 
14:37:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:16: Host Frequency set to 25000 KHz
14:37:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00F90>, 0x0, True) , Command count = 2132 ] 
14:37:16: [GO18_globalSetVolt]### Host voltage value is set.
14:37:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FD20>, 0x0, False) , Command count = 2133 ] 
14:37:16: [GO18_globalSetVolt]### Host voltage value is set.
14:37:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2134 ] 
14:37:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2135 ] 
14:37:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2136 ] 
14:37:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F660>, <py_sfcl.CommandDataDefinition object at 0x05DFB870>) , Command count = 2137 ] 
14:37:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E70>, <py_sfcl.CommandDataDefinition object at 0x05DF52D0>) , Command count = 2138 ] 
14:37:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2139 ] 
14:37:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:16: Host Frequency set to 25000 KHz
14:37:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:16: ####CSD Registe 2.0 Values####
14:37:16: CSD_STRUCTURE                                 :0x1
14:37:16: Reserv1                                       :0x0
14:37:16: Time Access 1 TAAC                            :0xe
14:37:16: Time Access 2 NSAC*100                        :0x0
14:37:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:16: Card Command Classess CCC                     :0x5b5
14:37:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:16: DSR(driver stage register)  DSR_IMP           :0x0
14:37:16: Reserv2                                       :0x0
14:37:16: Device Size C_SIZE                            :0xedc8
14:37:16: Reserv3                                       :0x0
14:37:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:16: Reserv4                                       :0x0
14:37:16: Write Speed Factor R2W_FACTOR                 :0x2
14:37:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:16: FILE_FORMAT_GRP                               :0x0
14:37:16: COPY flag                                     :0x1
14:37:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:16: File_Format                                   :0x0
14:37:16: CRC                                           :0x0
14:37:16: ####CSD Registe Values####  

14:37:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:16: [GetSCRRegisterEntry] Passed
14:37:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:16: Data_Status_After Erases          : 0
14:37:16: CPRM Security Support             : No Security
14:37:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:16: Spec. Version                     : Version 3.0X
14:37:16: Extended Security Support         : Extended_Security_Not_Supported
14:37:16: Command Support                   : COMMAND_SUPPORT
14:37:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5FC0>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 2140 ] 
14:37:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 2141 ] 
14:37:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:16: [ SetBusWidth(0x4) , Command count = 2142 ] 
14:37:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2143 ] 
14:37:16: Protected Area Size 0x28000
14:37:16: Bus Width           2
14:37:16: Secure Mode         0
14:37:16: Speed  Class        4
14:37:16: Perf Move           0
14:37:16: Au Size             9
14:37:16: Erase Size          15
14:37:16: Erase Timeout       1
14:37:16: Erase offset        1
14:37:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2144 ] 
14:37:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:16: Host Frequency set to 100000 KHz
14:37:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:16: ####CSD Registe 2.0 Values####
14:37:16: CSD_STRUCTURE                                 :0x1
14:37:16: Reserv1                                       :0x0
14:37:16: Time Access 1 TAAC                            :0xe
14:37:17: Time Access 2 NSAC*100                        :0x0
14:37:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:17: Card Command Classess CCC                     :0x5b5
14:37:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:17: DSR(driver stage register)  DSR_IMP           :0x0
14:37:17: Reserv2                                       :0x0
14:37:17: Device Size C_SIZE                            :0xedc8
14:37:17: Reserv3                                       :0x0
14:37:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:17: Reserv4                                       :0x0
14:37:17: Write Speed Factor R2W_FACTOR                 :0x2
14:37:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:17: FILE_FORMAT_GRP                               :0x0
14:37:17: COPY flag                                     :0x1
14:37:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:17: File_Format                                   :0x0
14:37:17: CRC                                           :0x0
14:37:17: ####CSD Registe Values####  

14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F240>, <py_sfcl.CommandDataDefinition object at 0x05DFB8D0>) , Command count = 2145 ] 
14:37:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F4E0>, <py_sfcl.CommandDataDefinition object at 0x05DFB240>) , Command count = 2146 ] 
14:37:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB900>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBD50>, <None>, <py_sfcl.Command23 object at 0x05E07D50>) , Command count = 2147 ] 
14:37:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:19: Host Frequency set to 25000 KHz
14:37:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5F60>, 0x0, True) , Command count = 2148 ] 
14:37:19: [GO18_globalSetVolt]### Host voltage value is set.
14:37:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E000F0>, 0x0, False) , Command count = 2149 ] 
14:37:19: [GO18_globalSetVolt]### Host voltage value is set.
14:37:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2150 ] 
14:37:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2151 ] 
14:37:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2152 ] 
14:37:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00270>, <py_sfcl.CommandDataDefinition object at 0x05DFB930>) , Command count = 2153 ] 
14:37:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5D0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA50>) , Command count = 2154 ] 
14:37:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2155 ] 
14:37:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:20: Host Frequency set to 25000 KHz
14:37:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:20: ####CSD Registe 2.0 Values####
14:37:20: CSD_STRUCTURE                                 :0x1
14:37:20: Reserv1                                       :0x0
14:37:20: Time Access 1 TAAC                            :0xe
14:37:20: Time Access 2 NSAC*100                        :0x0
14:37:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:20: Card Command Classess CCC                     :0x5b5
14:37:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:20: DSR(driver stage register)  DSR_IMP           :0x0
14:37:20: Reserv2                                       :0x0
14:37:20: Device Size C_SIZE                            :0xedc8
14:37:20: Reserv3                                       :0x0
14:37:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:20: Reserv4                                       :0x0
14:37:20: Write Speed Factor R2W_FACTOR                 :0x2
14:37:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:20: FILE_FORMAT_GRP                               :0x0
14:37:20: COPY flag                                     :0x1
14:37:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:20: File_Format                                   :0x0
14:37:20: CRC                                           :0x0
14:37:20: ####CSD Registe Values####  

14:37:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:20: [GetSCRRegisterEntry] Passed
14:37:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:20: Data_Status_After Erases          : 0
14:37:20: CPRM Security Support             : No Security
14:37:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:20: Spec. Version                     : Version 3.0X
14:37:20: Extended Security Support         : Extended_Security_Not_Supported
14:37:20: Command Support                   : COMMAND_SUPPORT
14:37:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 2156 ] 
14:37:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB030>, <py_sfcl.CommandDataDefinition object at 0x05DFBDB0>) , Command count = 2157 ] 
14:37:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:20: [ SetBusWidth(0x4) , Command count = 2158 ] 
14:37:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2159 ] 
14:37:20: Protected Area Size 0x28000
14:37:20: Bus Width           2
14:37:20: Secure Mode         0
14:37:20: Speed  Class        4
14:37:20: Perf Move           0
14:37:20: Au Size             9
14:37:20: Erase Size          15
14:37:20: Erase Timeout       1
14:37:20: Erase offset        1
14:37:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2160 ] 
14:37:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:20: Host Frequency set to 100000 KHz
14:37:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:20: ####CSD Registe 2.0 Values####
14:37:20: CSD_STRUCTURE                                 :0x1
14:37:20: Reserv1                                       :0x0
14:37:20: Time Access 1 TAAC                            :0xe
14:37:20: Time Access 2 NSAC*100                        :0x0
14:37:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:20: Card Command Classess CCC                     :0x5b5
14:37:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:20: DSR(driver stage register)  DSR_IMP           :0x0
14:37:20: Reserv2                                       :0x0
14:37:20: Device Size C_SIZE                            :0xedc8
14:37:20: Reserv3                                       :0x0
14:37:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:20: Reserv4                                       :0x0
14:37:20: Write Speed Factor R2W_FACTOR                 :0x2
14:37:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:20: FILE_FORMAT_GRP                               :0x0
14:37:20: COPY flag                                     :0x1
14:37:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:20: File_Format                                   :0x0
14:37:20: CRC                                           :0x0
14:37:20: ####CSD Registe Values####  

14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBA0>, <py_sfcl.CommandDataDefinition object at 0x05DF5CF0>) , Command count = 2161 ] 
14:37:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F750>, <py_sfcl.CommandDataDefinition object at 0x05DF58D0>) , Command count = 2162 ] 
14:37:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF57B0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5B40>, <None>, <py_sfcl.Command23 object at 0x05DFB4E0>) , Command count = 2163 ] 
14:37:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:23: Host Frequency set to 25000 KHz
14:37:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB4B0>, 0x0, True) , Command count = 2164 ] 
14:37:23: [GO18_globalSetVolt]### Host voltage value is set.
14:37:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBF90>, 0x0, False) , Command count = 2165 ] 
14:37:23: [GO18_globalSetVolt]### Host voltage value is set.
14:37:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2166 ] 
14:37:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2167 ] 
14:37:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2168 ] 
14:37:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB810>, <py_sfcl.CommandDataDefinition object at 0x05DFB1E0>) , Command count = 2169 ] 
14:37:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05E005A0>) , Command count = 2170 ] 
14:37:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:23: [ SetCardRCA(0x1, 0xD555) , Command count = 2171 ] 
14:37:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:23: Host Frequency set to 25000 KHz
14:37:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:23: ####CSD Registe 2.0 Values####
14:37:23: CSD_STRUCTURE                                 :0x1
14:37:23: Reserv1                                       :0x0
14:37:23: Time Access 1 TAAC                            :0xe
14:37:23: Time Access 2 NSAC*100                        :0x0
14:37:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:23: Card Command Classess CCC                     :0x5b5
14:37:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:23: DSR(driver stage register)  DSR_IMP           :0x0
14:37:23: Reserv2                                       :0x0
14:37:23: Device Size C_SIZE                            :0xedc8
14:37:23: Reserv3                                       :0x0
14:37:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:23: Reserv4                                       :0x0
14:37:23: Write Speed Factor R2W_FACTOR                 :0x2
14:37:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:23: FILE_FORMAT_GRP                               :0x0
14:37:23: COPY flag                                     :0x1
14:37:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:23: File_Format                                   :0x0
14:37:23: CRC                                           :0x0
14:37:23: ####CSD Registe Values####  

14:37:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:23: [GetSCRRegisterEntry] Passed
14:37:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:23: Data_Status_After Erases          : 0
14:37:23: CPRM Security Support             : No Security
14:37:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:23: Spec. Version                     : Version 3.0X
14:37:23: Extended Security Support         : Extended_Security_Not_Supported
14:37:23: Command Support                   : COMMAND_SUPPORT
14:37:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 2172 ] 
14:37:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB480>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 2173 ] 
14:37:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:23: [ SetBusWidth(0x4) , Command count = 2174 ] 
14:37:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2175 ] 
14:37:23: Protected Area Size 0x28000
14:37:23: Bus Width           2
14:37:23: Secure Mode         0
14:37:23: Speed  Class        4
14:37:23: Perf Move           0
14:37:23: Au Size             9
14:37:23: Erase Size          15
14:37:23: Erase Timeout       1
14:37:23: Erase offset        1
14:37:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2176 ] 
14:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:23: Host Frequency set to 100000 KHz
14:37:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:23: ####CSD Registe 2.0 Values####
14:37:23: CSD_STRUCTURE                                 :0x1
14:37:23: Reserv1                                       :0x0
14:37:23: Time Access 1 TAAC                            :0xe
14:37:23: Time Access 2 NSAC*100                        :0x0
14:37:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:23: Card Command Classess CCC                     :0x5b5
14:37:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:23: DSR(driver stage register)  DSR_IMP           :0x0
14:37:23: Reserv2                                       :0x0
14:37:23: Device Size C_SIZE                            :0xedc8
14:37:23: Reserv3                                       :0x0
14:37:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:23: Reserv4                                       :0x0
14:37:24: Write Speed Factor R2W_FACTOR                 :0x2
14:37:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:24: FILE_FORMAT_GRP                               :0x0
14:37:24: COPY flag                                     :0x1
14:37:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:24: File_Format                                   :0x0
14:37:24: CRC                                           :0x0
14:37:24: ####CSD Registe Values####  

14:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA20>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 2177 ] 
14:37:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F7B0>) , Command count = 2178 ] 
14:37:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F750>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F570>, <None>, <py_sfcl.Command23 object at 0x05DF5720>) , Command count = 2179 ] 
14:37:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:26: Host Frequency set to 25000 KHz
14:37:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF7E0>, 0x0, True) , Command count = 2180 ] 
14:37:26: [GO18_globalSetVolt]### Host voltage value is set.
14:37:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB990>, 0x0, False) , Command count = 2181 ] 
14:37:26: [GO18_globalSetVolt]### Host voltage value is set.
14:37:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2182 ] 
14:37:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2183 ] 
14:37:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2184 ] 
14:37:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04060>, <py_sfcl.CommandDataDefinition object at 0x05E042D0>) , Command count = 2185 ] 
14:37:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB630>, <py_sfcl.CommandDataDefinition object at 0x05E00510>) , Command count = 2186 ] 
14:37:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2187 ] 
14:37:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:26: Host Frequency set to 25000 KHz
14:37:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:26: ####CSD Registe 2.0 Values####
14:37:26: CSD_STRUCTURE                                 :0x1
14:37:26: Reserv1                                       :0x0
14:37:26: Time Access 1 TAAC                            :0xe
14:37:26: Time Access 2 NSAC*100                        :0x0
14:37:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:26: Card Command Classess CCC                     :0x5b5
14:37:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:26: DSR(driver stage register)  DSR_IMP           :0x0
14:37:26: Reserv2                                       :0x0
14:37:26: Device Size C_SIZE                            :0xedc8
14:37:26: Reserv3                                       :0x0
14:37:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:26: Reserv4                                       :0x0
14:37:26: Write Speed Factor R2W_FACTOR                 :0x2
14:37:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:26: FILE_FORMAT_GRP                               :0x0
14:37:26: COPY flag                                     :0x1
14:37:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:26: File_Format                                   :0x0
14:37:26: CRC                                           :0x0
14:37:26: ####CSD Registe Values####  

14:37:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:26: [GetSCRRegisterEntry] Passed
14:37:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:26: Data_Status_After Erases          : 0
14:37:26: CPRM Security Support             : No Security
14:37:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:26: Spec. Version                     : Version 3.0X
14:37:26: Extended Security Support         : Extended_Security_Not_Supported
14:37:26: Command Support                   : COMMAND_SUPPORT
14:37:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 2188 ] 
14:37:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C30>, <py_sfcl.CommandDataDefinition object at 0x05E007E0>) , Command count = 2189 ] 
14:37:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:26: [ SetBusWidth(0x4) , Command count = 2190 ] 
14:37:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2191 ] 
14:37:26: Protected Area Size 0x28000
14:37:26: Bus Width           2
14:37:26: Secure Mode         0
14:37:26: Speed  Class        4
14:37:26: Perf Move           0
14:37:26: Au Size             9
14:37:26: Erase Size          15
14:37:26: Erase Timeout       1
14:37:26: Erase offset        1
14:37:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2192 ] 
14:37:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:27: Host Frequency set to 100000 KHz
14:37:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:27: ####CSD Registe 2.0 Values####
14:37:27: CSD_STRUCTURE                                 :0x1
14:37:27: Reserv1                                       :0x0
14:37:27: Time Access 1 TAAC                            :0xe
14:37:27: Time Access 2 NSAC*100                        :0x0
14:37:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:27: Card Command Classess CCC                     :0x5b5
14:37:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:27: DSR(driver stage register)  DSR_IMP           :0x0
14:37:27: Reserv2                                       :0x0
14:37:27: Device Size C_SIZE                            :0xedc8
14:37:27: Reserv3                                       :0x0
14:37:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:27: Reserv4                                       :0x0
14:37:27: Write Speed Factor R2W_FACTOR                 :0x2
14:37:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:27: FILE_FORMAT_GRP                               :0x0
14:37:27: COPY flag                                     :0x1
14:37:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:27: File_Format                                   :0x0
14:37:27: CRC                                           :0x0
14:37:27: ####CSD Registe Values####  

14:37:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3C0>, <py_sfcl.CommandDataDefinition object at 0x05DFBFC0>) , Command count = 2193 ] 
14:37:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBAE0>, <py_sfcl.CommandDataDefinition object at 0x05DFBB40>) , Command count = 2194 ] 
14:37:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07CF0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07F90>, <None>, <py_sfcl.Command23 object at 0x05E0F0F0>) , Command count = 2195 ] 
14:37:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:29: Host Frequency set to 25000 KHz
14:37:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB780>, 0x0, True) , Command count = 2196 ] 
14:37:29: [GO18_globalSetVolt]### Host voltage value is set.
14:37:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FC30>, 0x0, False) , Command count = 2197 ] 
14:37:29: [GO18_globalSetVolt]### Host voltage value is set.
14:37:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2198 ] 
14:37:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2199 ] 
14:37:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2200 ] 
14:37:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04780>, <py_sfcl.CommandDataDefinition object at 0x05E04210>) , Command count = 2201 ] 
14:37:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FAE0>, <py_sfcl.CommandDataDefinition object at 0x05E007B0>) , Command count = 2202 ] 
14:37:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2203 ] 
14:37:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:30: Host Frequency set to 25000 KHz
14:37:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:30: ####CSD Registe 2.0 Values####
14:37:30: CSD_STRUCTURE                                 :0x1
14:37:30: Reserv1                                       :0x0
14:37:30: Time Access 1 TAAC                            :0xe
14:37:30: Time Access 2 NSAC*100                        :0x0
14:37:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:30: Card Command Classess CCC                     :0x5b5
14:37:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:30: DSR(driver stage register)  DSR_IMP           :0x0
14:37:30: Reserv2                                       :0x0
14:37:30: Device Size C_SIZE                            :0xedc8
14:37:30: Reserv3                                       :0x0
14:37:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:30: Reserv4                                       :0x0
14:37:30: Write Speed Factor R2W_FACTOR                 :0x2
14:37:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:30: FILE_FORMAT_GRP                               :0x0
14:37:30: COPY flag                                     :0x1
14:37:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:30: File_Format                                   :0x0
14:37:30: CRC                                           :0x0
14:37:30: ####CSD Registe Values####  

14:37:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:30: [GetSCRRegisterEntry] Passed
14:37:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:30: Data_Status_After Erases          : 0
14:37:30: CPRM Security Support             : No Security
14:37:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:30: Spec. Version                     : Version 3.0X
14:37:30: Extended Security Support         : Extended_Security_Not_Supported
14:37:30: Command Support                   : COMMAND_SUPPORT
14:37:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C90>, <py_sfcl.CommandDataDefinition object at 0x05E00780>) , Command count = 2204 ] 
14:37:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049C0>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 2205 ] 
14:37:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:30: [ SetBusWidth(0x4) , Command count = 2206 ] 
14:37:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2207 ] 
14:37:30: Protected Area Size 0x28000
14:37:30: Bus Width           2
14:37:30: Secure Mode         0
14:37:30: Speed  Class        4
14:37:30: Perf Move           0
14:37:30: Au Size             9
14:37:30: Erase Size          15
14:37:30: Erase Timeout       1
14:37:30: Erase offset        1
14:37:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2208 ] 
14:37:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:30: Host Frequency set to 100000 KHz
14:37:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:30: ####CSD Registe 2.0 Values####
14:37:30: CSD_STRUCTURE                                 :0x1
14:37:30: Reserv1                                       :0x0
14:37:30: Time Access 1 TAAC                            :0xe
14:37:30: Time Access 2 NSAC*100                        :0x0
14:37:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:30: Card Command Classess CCC                     :0x5b5
14:37:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:30: DSR(driver stage register)  DSR_IMP           :0x0
14:37:30: Reserv2                                       :0x0
14:37:30: Device Size C_SIZE                            :0xedc8
14:37:30: Reserv3                                       :0x0
14:37:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:30: Reserv4                                       :0x0
14:37:31: Write Speed Factor R2W_FACTOR                 :0x2
14:37:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:31: FILE_FORMAT_GRP                               :0x0
14:37:31: COPY flag                                     :0x1
14:37:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:31: File_Format                                   :0x0
14:37:31: CRC                                           :0x0
14:37:31: ####CSD Registe Values####  

14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 2209 ] 
14:37:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FFC0>, <py_sfcl.CommandDataDefinition object at 0x05E00330>) , Command count = 2210 ] 
14:37:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00E10>, <py_sfcl.PySEnhancedCmdData object at 0x05E00CF0>, <None>, <py_sfcl.Command23 object at 0x05E00F30>) , Command count = 2211 ] 
14:37:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:33: Host Frequency set to 25000 KHz
14:37:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB270>, 0x0, True) , Command count = 2212 ] 
14:37:33: [GO18_globalSetVolt]### Host voltage value is set.
14:37:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00FC0>, 0x0, False) , Command count = 2213 ] 
14:37:33: [GO18_globalSetVolt]### Host voltage value is set.
14:37:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2214 ] 
14:37:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2215 ] 
14:37:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2216 ] 
14:37:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E40>, <py_sfcl.CommandDataDefinition object at 0x05E04420>) , Command count = 2217 ] 
14:37:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E04A20>) , Command count = 2218 ] 
14:37:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2219 ] 
14:37:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:33: Host Frequency set to 25000 KHz
14:37:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:33: ####CSD Registe 2.0 Values####
14:37:33: CSD_STRUCTURE                                 :0x1
14:37:33: Reserv1                                       :0x0
14:37:33: Time Access 1 TAAC                            :0xe
14:37:33: Time Access 2 NSAC*100                        :0x0
14:37:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:33: Card Command Classess CCC                     :0x5b5
14:37:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:33: DSR(driver stage register)  DSR_IMP           :0x0
14:37:33: Reserv2                                       :0x0
14:37:33: Device Size C_SIZE                            :0xedc8
14:37:33: Reserv3                                       :0x0
14:37:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:33: Reserv4                                       :0x0
14:37:33: Write Speed Factor R2W_FACTOR                 :0x2
14:37:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:33: FILE_FORMAT_GRP                               :0x0
14:37:33: COPY flag                                     :0x1
14:37:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:33: File_Format                                   :0x0
14:37:33: CRC                                           :0x0
14:37:33: ####CSD Registe Values####  

14:37:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:33: [GetSCRRegisterEntry] Passed
14:37:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:33: Data_Status_After Erases          : 0
14:37:33: CPRM Security Support             : No Security
14:37:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:33: Spec. Version                     : Version 3.0X
14:37:33: Extended Security Support         : Extended_Security_Not_Supported
14:37:33: Command Support                   : COMMAND_SUPPORT
14:37:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05E04270>) , Command count = 2220 ] 
14:37:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04450>, <py_sfcl.CommandDataDefinition object at 0x05E04C00>) , Command count = 2221 ] 
14:37:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:33: [ SetBusWidth(0x4) , Command count = 2222 ] 
14:37:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2223 ] 
14:37:33: Protected Area Size 0x28000
14:37:33: Bus Width           2
14:37:33: Secure Mode         0
14:37:33: Speed  Class        4
14:37:33: Perf Move           0
14:37:33: Au Size             9
14:37:33: Erase Size          15
14:37:33: Erase Timeout       1
14:37:33: Erase offset        1
14:37:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2224 ] 
14:37:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:33: Host Frequency set to 100000 KHz
14:37:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:34: ####CSD Registe 2.0 Values####
14:37:34: CSD_STRUCTURE                                 :0x1
14:37:34: Reserv1                                       :0x0
14:37:34: Time Access 1 TAAC                            :0xe
14:37:34: Time Access 2 NSAC*100                        :0x0
14:37:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:34: Card Command Classess CCC                     :0x5b5
14:37:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:34: DSR(driver stage register)  DSR_IMP           :0x0
14:37:34: Reserv2                                       :0x0
14:37:34: Device Size C_SIZE                            :0xedc8
14:37:34: Reserv3                                       :0x0
14:37:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:34: Reserv4                                       :0x0
14:37:34: Write Speed Factor R2W_FACTOR                 :0x2
14:37:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:34: FILE_FORMAT_GRP                               :0x0
14:37:34: COPY flag                                     :0x1
14:37:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:34: File_Format                                   :0x0
14:37:34: CRC                                           :0x0
14:37:34: ####CSD Registe Values####  

14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00EA0>, <py_sfcl.CommandDataDefinition object at 0x05E04840>) , Command count = 2225 ] 
14:37:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F630>, <py_sfcl.CommandDataDefinition object at 0x05E049F0>) , Command count = 2226 ] 
14:37:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04900>, <py_sfcl.PySEnhancedCmdData object at 0x05E04720>, <None>, <py_sfcl.Command23 object at 0x05E00B10>) , Command count = 2227 ] 
14:37:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:36: Host Frequency set to 25000 KHz
14:37:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00A20>, 0x0, True) , Command count = 2228 ] 
14:37:36: [GO18_globalSetVolt]### Host voltage value is set.
14:37:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04930>, 0x0, False) , Command count = 2229 ] 
14:37:36: [GO18_globalSetVolt]### Host voltage value is set.
14:37:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2230 ] 
14:37:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2231 ] 
14:37:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2232 ] 
14:37:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DB0>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 2233 ] 
14:37:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00ED0>, <py_sfcl.CommandDataDefinition object at 0x05E047B0>) , Command count = 2234 ] 
14:37:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:37: [ SetCardRCA(0x1, 0xD555) , Command count = 2235 ] 
14:37:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:37: Host Frequency set to 25000 KHz
14:37:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:37: ####CSD Registe 2.0 Values####
14:37:37: CSD_STRUCTURE                                 :0x1
14:37:37: Reserv1                                       :0x0
14:37:37: Time Access 1 TAAC                            :0xe
14:37:37: Time Access 2 NSAC*100                        :0x0
14:37:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:37: Card Command Classess CCC                     :0x5b5
14:37:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:37: DSR(driver stage register)  DSR_IMP           :0x0
14:37:37: Reserv2                                       :0x0
14:37:37: Device Size C_SIZE                            :0xedc8
14:37:37: Reserv3                                       :0x0
14:37:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:37: Reserv4                                       :0x0
14:37:37: Write Speed Factor R2W_FACTOR                 :0x2
14:37:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:37: FILE_FORMAT_GRP                               :0x0
14:37:37: COPY flag                                     :0x1
14:37:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:37: File_Format                                   :0x0
14:37:37: CRC                                           :0x0
14:37:37: ####CSD Registe Values####  

14:37:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:37: [GetSCRRegisterEntry] Passed
14:37:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:37: Data_Status_After Erases          : 0
14:37:37: CPRM Security Support             : No Security
14:37:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:37: Spec. Version                     : Version 3.0X
14:37:37: Extended Security Support         : Extended_Security_Not_Supported
14:37:37: Command Support                   : COMMAND_SUPPORT
14:37:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C60>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 2236 ] 
14:37:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04FC0>, <py_sfcl.CommandDataDefinition object at 0x05E04C60>) , Command count = 2237 ] 
14:37:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:37: [ SetBusWidth(0x4) , Command count = 2238 ] 
14:37:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2239 ] 
14:37:37: Protected Area Size 0x28000
14:37:37: Bus Width           2
14:37:37: Secure Mode         0
14:37:37: Speed  Class        4
14:37:37: Perf Move           0
14:37:37: Au Size             9
14:37:37: Erase Size          15
14:37:37: Erase Timeout       1
14:37:37: Erase offset        1
14:37:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2240 ] 
14:37:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:37: Host Frequency set to 100000 KHz
14:37:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:37: ####CSD Registe 2.0 Values####
14:37:37: CSD_STRUCTURE                                 :0x1
14:37:37: Reserv1                                       :0x0
14:37:37: Time Access 1 TAAC                            :0xe
14:37:37: Time Access 2 NSAC*100                        :0x0
14:37:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:37: Card Command Classess CCC                     :0x5b5
14:37:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:37: DSR(driver stage register)  DSR_IMP           :0x0
14:37:37: Reserv2                                       :0x0
14:37:37: Device Size C_SIZE                            :0xedc8
14:37:37: Reserv3                                       :0x0
14:37:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:37: Reserv4                                       :0x0
14:37:37: Write Speed Factor R2W_FACTOR                 :0x2
14:37:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:37: FILE_FORMAT_GRP                               :0x0
14:37:37: COPY flag                                     :0x1
14:37:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:37: File_Format                                   :0x0
14:37:37: CRC                                           :0x0
14:37:37: ####CSD Registe Values####  

14:37:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00690>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 2241 ] 
14:37:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F930>, <py_sfcl.CommandDataDefinition object at 0x05E00F00>) , Command count = 2242 ] 
14:37:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00210>, <py_sfcl.PySEnhancedCmdData object at 0x05E07B70>, <None>, <py_sfcl.Command23 object at 0x05E04B40>) , Command count = 2243 ] 
14:37:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:40: Host Frequency set to 25000 KHz
14:37:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04330>, 0x0, True) , Command count = 2244 ] 
14:37:40: [GO18_globalSetVolt]### Host voltage value is set.
14:37:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04CF0>, 0x0, False) , Command count = 2245 ] 
14:37:40: [GO18_globalSetVolt]### Host voltage value is set.
14:37:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2246 ] 
14:37:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2247 ] 
14:37:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2248 ] 
14:37:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F30>, <py_sfcl.CommandDataDefinition object at 0x05E0FEA0>) , Command count = 2249 ] 
14:37:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5180>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 2250 ] 
14:37:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2251 ] 
14:37:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:40: Host Frequency set to 25000 KHz
14:37:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:40: ####CSD Registe 2.0 Values####
14:37:40: CSD_STRUCTURE                                 :0x1
14:37:40: Reserv1                                       :0x0
14:37:40: Time Access 1 TAAC                            :0xe
14:37:40: Time Access 2 NSAC*100                        :0x0
14:37:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:40: Card Command Classess CCC                     :0x5b5
14:37:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:40: DSR(driver stage register)  DSR_IMP           :0x0
14:37:40: Reserv2                                       :0x0
14:37:40: Device Size C_SIZE                            :0xedc8
14:37:40: Reserv3                                       :0x0
14:37:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:40: Reserv4                                       :0x0
14:37:40: Write Speed Factor R2W_FACTOR                 :0x2
14:37:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:40: FILE_FORMAT_GRP                               :0x0
14:37:40: COPY flag                                     :0x1
14:37:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:40: File_Format                                   :0x0
14:37:40: CRC                                           :0x0
14:37:40: ####CSD Registe Values####  

14:37:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:40: [GetSCRRegisterEntry] Passed
14:37:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:40: Data_Status_After Erases          : 0
14:37:40: CPRM Security Support             : No Security
14:37:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:40: Spec. Version                     : Version 3.0X
14:37:40: Extended Security Support         : Extended_Security_Not_Supported
14:37:40: Command Support                   : COMMAND_SUPPORT
14:37:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 2252 ] 
14:37:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 2253 ] 
14:37:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:40: [ SetBusWidth(0x4) , Command count = 2254 ] 
14:37:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2255 ] 
14:37:40: Protected Area Size 0x28000
14:37:40: Bus Width           2
14:37:40: Secure Mode         0
14:37:40: Speed  Class        4
14:37:40: Perf Move           0
14:37:40: Au Size             9
14:37:40: Erase Size          15
14:37:40: Erase Timeout       1
14:37:40: Erase offset        1
14:37:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2256 ] 
14:37:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:40: Host Frequency set to 100000 KHz
14:37:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:40: ####CSD Registe 2.0 Values####
14:37:40: CSD_STRUCTURE                                 :0x1
14:37:40: Reserv1                                       :0x0
14:37:40: Time Access 1 TAAC                            :0xe
14:37:40: Time Access 2 NSAC*100                        :0x0
14:37:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:40: Card Command Classess CCC                     :0x5b5
14:37:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:41: DSR(driver stage register)  DSR_IMP           :0x0
14:37:41: Reserv2                                       :0x0
14:37:41: Device Size C_SIZE                            :0xedc8
14:37:41: Reserv3                                       :0x0
14:37:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:41: Reserv4                                       :0x0
14:37:41: Write Speed Factor R2W_FACTOR                 :0x2
14:37:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:41: FILE_FORMAT_GRP                               :0x0
14:37:41: COPY flag                                     :0x1
14:37:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:41: File_Format                                   :0x0
14:37:41: CRC                                           :0x0
14:37:41: ####CSD Registe Values####  

14:37:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0F300>) , Command count = 2257 ] 
14:37:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5AB0>, <py_sfcl.CommandDataDefinition object at 0x05E071B0>) , Command count = 2258 ] 
14:37:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E079C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07480>, <None>, <py_sfcl.Command23 object at 0x05E07A50>) , Command count = 2259 ] 
14:37:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:43: Host Frequency set to 25000 KHz
14:37:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FAB0>, 0x0, True) , Command count = 2260 ] 
14:37:43: [GO18_globalSetVolt]### Host voltage value is set.
14:37:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B0F0>, 0x0, False) , Command count = 2261 ] 
14:37:43: [GO18_globalSetVolt]### Host voltage value is set.
14:37:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2262 ] 
14:37:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2263 ] 
14:37:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2264 ] 
14:37:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B270>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 2265 ] 
14:37:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E10>, <py_sfcl.CommandDataDefinition object at 0x05E07570>) , Command count = 2266 ] 
14:37:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2267 ] 
14:37:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:44: Host Frequency set to 25000 KHz
14:37:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:44: ####CSD Registe 2.0 Values####
14:37:44: CSD_STRUCTURE                                 :0x1
14:37:44: Reserv1                                       :0x0
14:37:44: Time Access 1 TAAC                            :0xe
14:37:44: Time Access 2 NSAC*100                        :0x0
14:37:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:44: Card Command Classess CCC                     :0x5b5
14:37:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:44: DSR(driver stage register)  DSR_IMP           :0x0
14:37:44: Reserv2                                       :0x0
14:37:44: Device Size C_SIZE                            :0xedc8
14:37:44: Reserv3                                       :0x0
14:37:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:44: Reserv4                                       :0x0
14:37:44: Write Speed Factor R2W_FACTOR                 :0x2
14:37:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:44: FILE_FORMAT_GRP                               :0x0
14:37:44: COPY flag                                     :0x1
14:37:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:44: File_Format                                   :0x0
14:37:44: CRC                                           :0x0
14:37:44: ####CSD Registe Values####  

14:37:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:44: [GetSCRRegisterEntry] Passed
14:37:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:44: Data_Status_After Erases          : 0
14:37:44: CPRM Security Support             : No Security
14:37:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:44: Spec. Version                     : Version 3.0X
14:37:44: Extended Security Support         : Extended_Security_Not_Supported
14:37:44: Command Support                   : COMMAND_SUPPORT
14:37:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B300>, <py_sfcl.CommandDataDefinition object at 0x05E0B120>) , Command count = 2268 ] 
14:37:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B810>) , Command count = 2269 ] 
14:37:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:44: [ SetBusWidth(0x4) , Command count = 2270 ] 
14:37:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2271 ] 
14:37:44: Protected Area Size 0x28000
14:37:44: Bus Width           2
14:37:44: Secure Mode         0
14:37:44: Speed  Class        4
14:37:44: Perf Move           0
14:37:44: Au Size             9
14:37:44: Erase Size          15
14:37:44: Erase Timeout       1
14:37:44: Erase offset        1
14:37:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2272 ] 
14:37:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:44: Host Frequency set to 100000 KHz
14:37:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:44: ####CSD Registe 2.0 Values####
14:37:44: CSD_STRUCTURE                                 :0x1
14:37:44: Reserv1                                       :0x0
14:37:44: Time Access 1 TAAC                            :0xe
14:37:44: Time Access 2 NSAC*100                        :0x0
14:37:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:44: Card Command Classess CCC                     :0x5b5
14:37:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:44: DSR(driver stage register)  DSR_IMP           :0x0
14:37:44: Reserv2                                       :0x0
14:37:44: Device Size C_SIZE                            :0xedc8
14:37:44: Reserv3                                       :0x0
14:37:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:44: Reserv4                                       :0x0
14:37:44: Write Speed Factor R2W_FACTOR                 :0x2
14:37:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:44: FILE_FORMAT_GRP                               :0x0
14:37:44: COPY flag                                     :0x1
14:37:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:44: File_Format                                   :0x0
14:37:44: CRC                                           :0x0
14:37:44: ####CSD Registe Values####  

14:37:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D20>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 2273 ] 
14:37:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E40>, <py_sfcl.CommandDataDefinition object at 0x05E07B10>) , Command count = 2274 ] 
14:37:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07DE0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07630>, <None>, <py_sfcl.Command23 object at 0x05E07150>) , Command count = 2275 ] 
14:37:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:47: Host Frequency set to 25000 KHz
14:37:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04AE0>, 0x0, True) , Command count = 2276 ] 
14:37:47: [GO18_globalSetVolt]### Host voltage value is set.
14:37:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B7B0>, 0x0, False) , Command count = 2277 ] 
14:37:47: [GO18_globalSetVolt]### Host voltage value is set.
14:37:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2278 ] 
14:37:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2279 ] 
14:37:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2280 ] 
14:37:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B240>) , Command count = 2281 ] 
14:37:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FE10>, <py_sfcl.CommandDataDefinition object at 0x05E0B900>) , Command count = 2282 ] 
14:37:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:47: [ SetCardRCA(0x1, 0xD555) , Command count = 2283 ] 
14:37:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:47: Host Frequency set to 25000 KHz
14:37:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:47: ####CSD Registe 2.0 Values####
14:37:47: CSD_STRUCTURE                                 :0x1
14:37:47: Reserv1                                       :0x0
14:37:47: Time Access 1 TAAC                            :0xe
14:37:47: Time Access 2 NSAC*100                        :0x0
14:37:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:47: Card Command Classess CCC                     :0x5b5
14:37:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:47: DSR(driver stage register)  DSR_IMP           :0x0
14:37:47: Reserv2                                       :0x0
14:37:47: Device Size C_SIZE                            :0xedc8
14:37:47: Reserv3                                       :0x0
14:37:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:47: Reserv4                                       :0x0
14:37:47: Write Speed Factor R2W_FACTOR                 :0x2
14:37:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:47: FILE_FORMAT_GRP                               :0x0
14:37:47: COPY flag                                     :0x1
14:37:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:47: File_Format                                   :0x0
14:37:47: CRC                                           :0x0
14:37:47: ####CSD Registe Values####  

14:37:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:47: [GetSCRRegisterEntry] Passed
14:37:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:47: Data_Status_After Erases          : 0
14:37:47: CPRM Security Support             : No Security
14:37:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:47: Spec. Version                     : Version 3.0X
14:37:47: Extended Security Support         : Extended_Security_Not_Supported
14:37:47: Command Support                   : COMMAND_SUPPORT
14:37:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C00>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 2284 ] 
14:37:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 2285 ] 
14:37:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:47: [ SetBusWidth(0x4) , Command count = 2286 ] 
14:37:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2287 ] 
14:37:47: Protected Area Size 0x28000
14:37:47: Bus Width           2
14:37:47: Secure Mode         0
14:37:47: Speed  Class        4
14:37:47: Perf Move           0
14:37:47: Au Size             9
14:37:47: Erase Size          15
14:37:47: Erase Timeout       1
14:37:47: Erase offset        1
14:37:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2288 ] 
14:37:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:47: Host Frequency set to 100000 KHz
14:37:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:47: ####CSD Registe 2.0 Values####
14:37:47: CSD_STRUCTURE                                 :0x1
14:37:47: Reserv1                                       :0x0
14:37:47: Time Access 1 TAAC                            :0xe
14:37:47: Time Access 2 NSAC*100                        :0x0
14:37:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:47: Card Command Classess CCC                     :0x5b5
14:37:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:47: DSR(driver stage register)  DSR_IMP           :0x0
14:37:47: Reserv2                                       :0x0
14:37:47: Device Size C_SIZE                            :0xedc8
14:37:47: Reserv3                                       :0x0
14:37:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:47: Reserv4                                       :0x0
14:37:47: Write Speed Factor R2W_FACTOR                 :0x2
14:37:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:48: FILE_FORMAT_GRP                               :0x0
14:37:48: COPY flag                                     :0x1
14:37:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:48: File_Format                                   :0x0
14:37:48: CRC                                           :0x0
14:37:48: ####CSD Registe Values####  

14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD80>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 2289 ] 
14:37:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9FC0>, <py_sfcl.CommandDataDefinition object at 0x05E076C0>) , Command count = 2290 ] 
14:37:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07360>, <py_sfcl.PySEnhancedCmdData object at 0x05E07A20>, <None>, <py_sfcl.Command23 object at 0x05E07F60>) , Command count = 2291 ] 
14:37:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:50: Host Frequency set to 25000 KHz
14:37:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F870>, 0x0, True) , Command count = 2292 ] 
14:37:50: [GO18_globalSetVolt]### Host voltage value is set.
14:37:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F240>, 0x0, False) , Command count = 2293 ] 
14:37:50: [GO18_globalSetVolt]### Host voltage value is set.
14:37:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2294 ] 
14:37:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2295 ] 
14:37:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2296 ] 
14:37:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF00>) , Command count = 2297 ] 
14:37:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B750>) , Command count = 2298 ] 
14:37:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:50: [ SetCardRCA(0x1, 0xD555) , Command count = 2299 ] 
14:37:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:50: Host Frequency set to 25000 KHz
14:37:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:51: ####CSD Registe 2.0 Values####
14:37:51: CSD_STRUCTURE                                 :0x1
14:37:51: Reserv1                                       :0x0
14:37:51: Time Access 1 TAAC                            :0xe
14:37:51: Time Access 2 NSAC*100                        :0x0
14:37:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:51: Card Command Classess CCC                     :0x5b5
14:37:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:51: DSR(driver stage register)  DSR_IMP           :0x0
14:37:51: Reserv2                                       :0x0
14:37:51: Device Size C_SIZE                            :0xedc8
14:37:51: Reserv3                                       :0x0
14:37:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:51: Reserv4                                       :0x0
14:37:51: Write Speed Factor R2W_FACTOR                 :0x2
14:37:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:51: FILE_FORMAT_GRP                               :0x0
14:37:51: COPY flag                                     :0x1
14:37:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:51: File_Format                                   :0x0
14:37:51: CRC                                           :0x0
14:37:51: ####CSD Registe Values####  

14:37:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:51: [GetSCRRegisterEntry] Passed
14:37:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:51: Data_Status_After Erases          : 0
14:37:51: CPRM Security Support             : No Security
14:37:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:51: Spec. Version                     : Version 3.0X
14:37:51: Extended Security Support         : Extended_Security_Not_Supported
14:37:51: Command Support                   : COMMAND_SUPPORT
14:37:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B660>, <py_sfcl.CommandDataDefinition object at 0x05E0BC30>) , Command count = 2300 ] 
14:37:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B7E0>) , Command count = 2301 ] 
14:37:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:51: [ SetBusWidth(0x4) , Command count = 2302 ] 
14:37:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2303 ] 
14:37:51: Protected Area Size 0x28000
14:37:51: Bus Width           2
14:37:51: Secure Mode         0
14:37:51: Speed  Class        4
14:37:51: Perf Move           0
14:37:51: Au Size             9
14:37:51: Erase Size          15
14:37:51: Erase Timeout       1
14:37:51: Erase offset        1
14:37:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2304 ] 
14:37:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:51: Host Frequency set to 100000 KHz
14:37:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:51: ####CSD Registe 2.0 Values####
14:37:51: CSD_STRUCTURE                                 :0x1
14:37:51: Reserv1                                       :0x0
14:37:51: Time Access 1 TAAC                            :0xe
14:37:51: Time Access 2 NSAC*100                        :0x0
14:37:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:51: Card Command Classess CCC                     :0x5b5
14:37:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:51: DSR(driver stage register)  DSR_IMP           :0x0
14:37:51: Reserv2                                       :0x0
14:37:51: Device Size C_SIZE                            :0xedc8
14:37:51: Reserv3                                       :0x0
14:37:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:51: Reserv4                                       :0x0
14:37:51: Write Speed Factor R2W_FACTOR                 :0x2
14:37:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:51: FILE_FORMAT_GRP                               :0x0
14:37:51: COPY flag                                     :0x1
14:37:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:51: File_Format                                   :0x0
14:37:51: CRC                                           :0x0
14:37:51: ####CSD Registe Values####  

14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BAB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B510>) , Command count = 2305 ] 
14:37:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B6F0>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 2306 ] 
14:37:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E073F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07840>, <None>, <py_sfcl.Command23 object at 0x05E074B0>) , Command count = 2307 ] 
14:37:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:53: Host Frequency set to 25000 KHz
14:37:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F990>, 0x0, True) , Command count = 2308 ] 
14:37:53: [GO18_globalSetVolt]### Host voltage value is set.
14:37:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C60>, 0x0, False) , Command count = 2309 ] 
14:37:53: [GO18_globalSetVolt]### Host voltage value is set.
14:37:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2310 ] 
14:37:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2311 ] 
14:37:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2312 ] 
14:37:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E0FD80>) , Command count = 2313 ] 
14:37:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526DED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3C0>) , Command count = 2314 ] 
14:37:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2315 ] 
14:37:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:54: Host Frequency set to 25000 KHz
14:37:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:54: ####CSD Registe 2.0 Values####
14:37:54: CSD_STRUCTURE                                 :0x1
14:37:54: Reserv1                                       :0x0
14:37:54: Time Access 1 TAAC                            :0xe
14:37:54: Time Access 2 NSAC*100                        :0x0
14:37:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:54: Card Command Classess CCC                     :0x5b5
14:37:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:54: DSR(driver stage register)  DSR_IMP           :0x0
14:37:54: Reserv2                                       :0x0
14:37:54: Device Size C_SIZE                            :0xedc8
14:37:54: Reserv3                                       :0x0
14:37:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:54: Reserv4                                       :0x0
14:37:54: Write Speed Factor R2W_FACTOR                 :0x2
14:37:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:54: FILE_FORMAT_GRP                               :0x0
14:37:54: COPY flag                                     :0x1
14:37:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:54: File_Format                                   :0x0
14:37:54: CRC                                           :0x0
14:37:54: ####CSD Registe Values####  

14:37:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:54: [GetSCRRegisterEntry] Passed
14:37:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:54: Data_Status_After Erases          : 0
14:37:54: CPRM Security Support             : No Security
14:37:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:54: Spec. Version                     : Version 3.0X
14:37:54: Extended Security Support         : Extended_Security_Not_Supported
14:37:54: Command Support                   : COMMAND_SUPPORT
14:37:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B840>, <py_sfcl.CommandDataDefinition object at 0x05E0FED0>) , Command count = 2316 ] 
14:37:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BDB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 2317 ] 
14:37:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:54: [ SetBusWidth(0x4) , Command count = 2318 ] 
14:37:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2319 ] 
14:37:54: Protected Area Size 0x28000
14:37:54: Bus Width           2
14:37:54: Secure Mode         0
14:37:54: Speed  Class        4
14:37:54: Perf Move           0
14:37:54: Au Size             9
14:37:54: Erase Size          15
14:37:54: Erase Timeout       1
14:37:54: Erase offset        1
14:37:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2320 ] 
14:37:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:54: Host Frequency set to 100000 KHz
14:37:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:54: ####CSD Registe 2.0 Values####
14:37:54: CSD_STRUCTURE                                 :0x1
14:37:54: Reserv1                                       :0x0
14:37:54: Time Access 1 TAAC                            :0xe
14:37:54: Time Access 2 NSAC*100                        :0x0
14:37:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:54: Card Command Classess CCC                     :0x5b5
14:37:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:54: DSR(driver stage register)  DSR_IMP           :0x0
14:37:54: Reserv2                                       :0x0
14:37:54: Device Size C_SIZE                            :0xedc8
14:37:54: Reserv3                                       :0x0
14:37:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:54: Reserv4                                       :0x0
14:37:55: Write Speed Factor R2W_FACTOR                 :0x2
14:37:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:55: FILE_FORMAT_GRP                               :0x0
14:37:55: COPY flag                                     :0x1
14:37:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:55: File_Format                                   :0x0
14:37:55: CRC                                           :0x0
14:37:55: ####CSD Registe Values####  

14:37:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0521E030>, <py_sfcl.CommandDataDefinition object at 0x05E0B330>) , Command count = 2321 ] 
14:37:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04570>, <py_sfcl.CommandDataDefinition object at 0x05E07750>) , Command count = 2322 ] 
14:37:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEF4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07180>, <py_sfcl.PySEnhancedCmdData object at 0x05E070F0>, <None>, <py_sfcl.Command23 object at 0x05E07BA0>) , Command count = 2323 ] 
14:37:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:57: Host Frequency set to 25000 KHz
14:37:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F120>, 0x0, True) , Command count = 2324 ] 
14:37:57: [GO18_globalSetVolt]### Host voltage value is set.
14:37:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9C60>, 0x0, False) , Command count = 2325 ] 
14:37:57: [GO18_globalSetVolt]### Host voltage value is set.
14:37:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2326 ] 
14:37:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2327 ] 
14:37:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2328 ] 
14:37:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04540>, <py_sfcl.CommandDataDefinition object at 0x05E0F7E0>) , Command count = 2329 ] 
14:37:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E047E0>) , Command count = 2330 ] 
14:37:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2331 ] 
14:37:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:57: Host Frequency set to 25000 KHz
14:37:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:57: ####CSD Registe 2.0 Values####
14:37:57: CSD_STRUCTURE                                 :0x1
14:37:57: Reserv1                                       :0x0
14:37:57: Time Access 1 TAAC                            :0xe
14:37:57: Time Access 2 NSAC*100                        :0x0
14:37:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:57: Card Command Classess CCC                     :0x5b5
14:37:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:57: DSR(driver stage register)  DSR_IMP           :0x0
14:37:57: Reserv2                                       :0x0
14:37:57: Device Size C_SIZE                            :0xedc8
14:37:57: Reserv3                                       :0x0
14:37:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:57: Reserv4                                       :0x0
14:37:57: Write Speed Factor R2W_FACTOR                 :0x2
14:37:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:57: FILE_FORMAT_GRP                               :0x0
14:37:57: COPY flag                                     :0x1
14:37:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:57: File_Format                                   :0x0
14:37:57: CRC                                           :0x0
14:37:57: ####CSD Registe Values####  

14:37:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:57: [GetSCRRegisterEntry] Passed
14:37:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:57: Data_Status_After Erases          : 0
14:37:57: CPRM Security Support             : No Security
14:37:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:57: Spec. Version                     : Version 3.0X
14:37:57: Extended Security Support         : Extended_Security_Not_Supported
14:37:57: Command Support                   : COMMAND_SUPPORT
14:37:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5210>, <py_sfcl.CommandDataDefinition object at 0x0526F1E0>) , Command count = 2332 ] 
14:37:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0FE70>) , Command count = 2333 ] 
14:37:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:57: [ SetBusWidth(0x4) , Command count = 2334 ] 
14:37:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0514AE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2335 ] 
14:37:57: Protected Area Size 0x28000
14:37:57: Bus Width           2
14:37:57: Secure Mode         0
14:37:57: Speed  Class        4
14:37:57: Perf Move           0
14:37:57: Au Size             9
14:37:57: Erase Size          15
14:37:57: Erase Timeout       1
14:37:57: Erase offset        1
14:37:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2336 ] 
14:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:57: Host Frequency set to 100000 KHz
14:37:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:57: ####CSD Registe 2.0 Values####
14:37:57: CSD_STRUCTURE                                 :0x1
14:37:57: Reserv1                                       :0x0
14:37:57: Time Access 1 TAAC                            :0xe
14:37:58: Time Access 2 NSAC*100                        :0x0
14:37:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:58: Card Command Classess CCC                     :0x5b5
14:37:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:58: DSR(driver stage register)  DSR_IMP           :0x0
14:37:58: Reserv2                                       :0x0
14:37:58: Device Size C_SIZE                            :0xedc8
14:37:58: Reserv3                                       :0x0
14:37:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:58: Reserv4                                       :0x0
14:37:58: Write Speed Factor R2W_FACTOR                 :0x2
14:37:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:58: FILE_FORMAT_GRP                               :0x0
14:37:58: COPY flag                                     :0x1
14:37:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:58: File_Format                                   :0x0
14:37:58: CRC                                           :0x0
14:37:58: ####CSD Registe Values####  

14:37:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527BFC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 2337 ] 
14:37:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC30>, <py_sfcl.CommandDataDefinition object at 0x05E0BE70>) , Command count = 2338 ] 
14:37:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:37:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:37:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE97B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07ED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07CC0>, <None>, <py_sfcl.Command23 object at 0x05E07300>) , Command count = 2339 ] 
14:37:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:37:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:00: Host Frequency set to 25000 KHz
14:38:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9BA0>, 0x0, True) , Command count = 2340 ] 
14:38:00: [GO18_globalSetVolt]### Host voltage value is set.
14:38:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F8D0>, 0x0, False) , Command count = 2341 ] 
14:38:00: [GO18_globalSetVolt]### Host voltage value is set.
14:38:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2342 ] 
14:38:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2343 ] 
14:38:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2344 ] 
14:38:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF58A0>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 2345 ] 
14:38:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F60>, <py_sfcl.CommandDataDefinition object at 0x05DF5150>) , Command count = 2346 ] 
14:38:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:00: [ SetCardRCA(0x1, 0xD555) , Command count = 2347 ] 
14:38:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:01: Host Frequency set to 25000 KHz
14:38:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:01: ####CSD Registe 2.0 Values####
14:38:01: CSD_STRUCTURE                                 :0x1
14:38:01: Reserv1                                       :0x0
14:38:01: Time Access 1 TAAC                            :0xe
14:38:01: Time Access 2 NSAC*100                        :0x0
14:38:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:01: Card Command Classess CCC                     :0x5b5
14:38:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:01: DSR(driver stage register)  DSR_IMP           :0x0
14:38:01: Reserv2                                       :0x0
14:38:01: Device Size C_SIZE                            :0xedc8
14:38:01: Reserv3                                       :0x0
14:38:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:01: Reserv4                                       :0x0
14:38:01: Write Speed Factor R2W_FACTOR                 :0x2
14:38:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:01: FILE_FORMAT_GRP                               :0x0
14:38:01: COPY flag                                     :0x1
14:38:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:01: File_Format                                   :0x0
14:38:01: CRC                                           :0x0
14:38:01: ####CSD Registe Values####  

14:38:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:01: [GetSCRRegisterEntry] Passed
14:38:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:01: Data_Status_After Erases          : 0
14:38:01: CPRM Security Support             : No Security
14:38:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:01: Spec. Version                     : Version 3.0X
14:38:01: Extended Security Support         : Extended_Security_Not_Supported
14:38:01: Command Support                   : COMMAND_SUPPORT
14:38:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F900>, <py_sfcl.CommandDataDefinition object at 0x05DF54E0>) , Command count = 2348 ] 
14:38:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B40>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 2349 ] 
14:38:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:01: [ SetBusWidth(0x4) , Command count = 2350 ] 
14:38:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2351 ] 
14:38:01: Protected Area Size 0x28000
14:38:01: Bus Width           2
14:38:01: Secure Mode         0
14:38:01: Speed  Class        4
14:38:01: Perf Move           0
14:38:01: Au Size             9
14:38:01: Erase Size          15
14:38:01: Erase Timeout       1
14:38:01: Erase offset        1
14:38:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2352 ] 
14:38:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:01: Host Frequency set to 100000 KHz
14:38:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:01: ####CSD Registe 2.0 Values####
14:38:01: CSD_STRUCTURE                                 :0x1
14:38:01: Reserv1                                       :0x0
14:38:01: Time Access 1 TAAC                            :0xe
14:38:01: Time Access 2 NSAC*100                        :0x0
14:38:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:01: Card Command Classess CCC                     :0x5b5
14:38:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:01: DSR(driver stage register)  DSR_IMP           :0x0
14:38:01: Reserv2                                       :0x0
14:38:01: Device Size C_SIZE                            :0xedc8
14:38:01: Reserv3                                       :0x0
14:38:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:01: Reserv4                                       :0x0
14:38:01: Write Speed Factor R2W_FACTOR                 :0x2
14:38:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:01: FILE_FORMAT_GRP                               :0x0
14:38:01: COPY flag                                     :0x1
14:38:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:01: File_Format                                   :0x0
14:38:01: CRC                                           :0x0
14:38:01: ####CSD Registe Values####  

14:38:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05281F90>) , Command count = 2353 ] 
14:38:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD50>, <py_sfcl.CommandDataDefinition object at 0x05E0BC90>) , Command count = 2354 ] 
14:38:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07C60>, <py_sfcl.PySEnhancedCmdData object at 0x05E070C0>, <None>, <py_sfcl.Command23 object at 0x05E07AB0>) , Command count = 2355 ] 
14:38:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:04: Host Frequency set to 25000 KHz
14:38:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527B4E0>, 0x0, True) , Command count = 2356 ] 
14:38:04: [GO18_globalSetVolt]### Host voltage value is set.
14:38:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F1E0>, 0x0, False) , Command count = 2357 ] 
14:38:04: [GO18_globalSetVolt]### Host voltage value is set.
14:38:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2358 ] 
14:38:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2359 ] 
14:38:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2360 ] 
14:38:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C00>, <py_sfcl.CommandDataDefinition object at 0x05E0B6C0>) , Command count = 2361 ] 
14:38:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9AB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F120>) , Command count = 2362 ] 
14:38:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2363 ] 
14:38:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:04: Host Frequency set to 25000 KHz
14:38:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:04: ####CSD Registe 2.0 Values####
14:38:04: CSD_STRUCTURE                                 :0x1
14:38:04: Reserv1                                       :0x0
14:38:04: Time Access 1 TAAC                            :0xe
14:38:04: Time Access 2 NSAC*100                        :0x0
14:38:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:04: Card Command Classess CCC                     :0x5b5
14:38:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:04: DSR(driver stage register)  DSR_IMP           :0x0
14:38:04: Reserv2                                       :0x0
14:38:04: Device Size C_SIZE                            :0xedc8
14:38:04: Reserv3                                       :0x0
14:38:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:04: Reserv4                                       :0x0
14:38:04: Write Speed Factor R2W_FACTOR                 :0x2
14:38:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:04: FILE_FORMAT_GRP                               :0x0
14:38:04: COPY flag                                     :0x1
14:38:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:04: File_Format                                   :0x0
14:38:04: CRC                                           :0x0
14:38:04: ####CSD Registe Values####  

14:38:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:04: [GetSCRRegisterEntry] Passed
14:38:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:04: Data_Status_After Erases          : 0
14:38:04: CPRM Security Support             : No Security
14:38:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:04: Spec. Version                     : Version 3.0X
14:38:04: Extended Security Support         : Extended_Security_Not_Supported
14:38:04: Command Support                   : COMMAND_SUPPORT
14:38:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF660>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 2364 ] 
14:38:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F330>, <py_sfcl.CommandDataDefinition object at 0x05DE9DB0>) , Command count = 2365 ] 
14:38:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:04: [ SetBusWidth(0x4) , Command count = 2366 ] 
14:38:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2367 ] 
14:38:04: Protected Area Size 0x28000
14:38:04: Bus Width           2
14:38:04: Secure Mode         0
14:38:04: Speed  Class        4
14:38:04: Perf Move           0
14:38:04: Au Size             9
14:38:04: Erase Size          15
14:38:04: Erase Timeout       1
14:38:04: Erase offset        1
14:38:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2368 ] 
14:38:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:04: Host Frequency set to 100000 KHz
14:38:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:04: ####CSD Registe 2.0 Values####
14:38:04: CSD_STRUCTURE                                 :0x1
14:38:04: Reserv1                                       :0x0
14:38:04: Time Access 1 TAAC                            :0xe
14:38:04: Time Access 2 NSAC*100                        :0x0
14:38:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:04: Card Command Classess CCC                     :0x5b5
14:38:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:04: DSR(driver stage register)  DSR_IMP           :0x0
14:38:04: Reserv2                                       :0x0
14:38:04: Device Size C_SIZE                            :0xedc8
14:38:04: Reserv3                                       :0x0
14:38:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:04: Reserv4                                       :0x0
14:38:05: Write Speed Factor R2W_FACTOR                 :0x2
14:38:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:05: FILE_FORMAT_GRP                               :0x0
14:38:05: COPY flag                                     :0x1
14:38:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:05: File_Format                                   :0x0
14:38:05: CRC                                           :0x0
14:38:05: ####CSD Registe Values####  

14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05DE9ED0>) , Command count = 2369 ] 
14:38:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 2370 ] 
14:38:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07750>, <py_sfcl.PySEnhancedCmdData object at 0x05E072A0>, <None>, <py_sfcl.Command23 object at 0x05E07810>) , Command count = 2371 ] 
14:38:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:07: Host Frequency set to 25000 KHz
14:38:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF2D0>, 0x0, True) , Command count = 2372 ] 
14:38:07: [GO18_globalSetVolt]### Host voltage value is set.
14:38:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB750>, 0x0, False) , Command count = 2373 ] 
14:38:07: [GO18_globalSetVolt]### Host voltage value is set.
14:38:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2374 ] 
14:38:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2375 ] 
14:38:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2376 ] 
14:38:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB570>, <py_sfcl.CommandDataDefinition object at 0x05DF5120>) , Command count = 2377 ] 
14:38:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDE0>, <py_sfcl.CommandDataDefinition object at 0x05E0FA50>) , Command count = 2378 ] 
14:38:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2379 ] 
14:38:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:07: Host Frequency set to 25000 KHz
14:38:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:07: ####CSD Registe 2.0 Values####
14:38:07: CSD_STRUCTURE                                 :0x1
14:38:07: Reserv1                                       :0x0
14:38:07: Time Access 1 TAAC                            :0xe
14:38:07: Time Access 2 NSAC*100                        :0x0
14:38:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:07: Card Command Classess CCC                     :0x5b5
14:38:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:07: DSR(driver stage register)  DSR_IMP           :0x0
14:38:07: Reserv2                                       :0x0
14:38:07: Device Size C_SIZE                            :0xedc8
14:38:07: Reserv3                                       :0x0
14:38:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:07: Reserv4                                       :0x0
14:38:07: Write Speed Factor R2W_FACTOR                 :0x2
14:38:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:07: FILE_FORMAT_GRP                               :0x0
14:38:07: COPY flag                                     :0x1
14:38:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:07: File_Format                                   :0x0
14:38:07: CRC                                           :0x0
14:38:07: ####CSD Registe Values####  

14:38:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:07: [GetSCRRegisterEntry] Passed
14:38:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:07: Data_Status_After Erases          : 0
14:38:07: CPRM Security Support             : No Security
14:38:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:07: Spec. Version                     : Version 3.0X
14:38:07: Extended Security Support         : Extended_Security_Not_Supported
14:38:07: Command Support                   : COMMAND_SUPPORT
14:38:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB10>, <py_sfcl.CommandDataDefinition object at 0x05DF5D50>) , Command count = 2380 ] 
14:38:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F060>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 2381 ] 
14:38:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:08: [ SetBusWidth(0x4) , Command count = 2382 ] 
14:38:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2383 ] 
14:38:08: Protected Area Size 0x28000
14:38:08: Bus Width           2
14:38:08: Secure Mode         0
14:38:08: Speed  Class        4
14:38:08: Perf Move           0
14:38:08: Au Size             9
14:38:08: Erase Size          15
14:38:08: Erase Timeout       1
14:38:08: Erase offset        1
14:38:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2384 ] 
14:38:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:08: Host Frequency set to 100000 KHz
14:38:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:08: ####CSD Registe 2.0 Values####
14:38:08: CSD_STRUCTURE                                 :0x1
14:38:08: Reserv1                                       :0x0
14:38:08: Time Access 1 TAAC                            :0xe
14:38:08: Time Access 2 NSAC*100                        :0x0
14:38:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:08: Card Command Classess CCC                     :0x5b5
14:38:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:08: DSR(driver stage register)  DSR_IMP           :0x0
14:38:08: Reserv2                                       :0x0
14:38:08: Device Size C_SIZE                            :0xedc8
14:38:08: Reserv3                                       :0x0
14:38:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:08: Reserv4                                       :0x0
14:38:08: Write Speed Factor R2W_FACTOR                 :0x2
14:38:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:08: FILE_FORMAT_GRP                               :0x0
14:38:08: COPY flag                                     :0x1
14:38:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:08: File_Format                                   :0x0
14:38:08: CRC                                           :0x0
14:38:08: ####CSD Registe Values####  

14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCF0>, <py_sfcl.CommandDataDefinition object at 0x05DFBF00>) , Command count = 2385 ] 
14:38:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F690>, <py_sfcl.CommandDataDefinition object at 0x05DF5DB0>) , Command count = 2386 ] 
14:38:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5D80>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5BA0>, <None>, <py_sfcl.Command23 object at 0x05E07870>) , Command count = 2387 ] 
14:38:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:10: Host Frequency set to 25000 KHz
14:38:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F9F0>, 0x0, True) , Command count = 2388 ] 
14:38:10: [GO18_globalSetVolt]### Host voltage value is set.
14:38:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F660>, 0x0, False) , Command count = 2389 ] 
14:38:10: [GO18_globalSetVolt]### Host voltage value is set.
14:38:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2390 ] 
14:38:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2391 ] 
14:38:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2392 ] 
14:38:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC60>, <py_sfcl.CommandDataDefinition object at 0x05DF52D0>) , Command count = 2393 ] 
14:38:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB060>, <py_sfcl.CommandDataDefinition object at 0x05DFBD80>) , Command count = 2394 ] 
14:38:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2395 ] 
14:38:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:11: Host Frequency set to 25000 KHz
14:38:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:11: ####CSD Registe 2.0 Values####
14:38:11: CSD_STRUCTURE                                 :0x1
14:38:11: Reserv1                                       :0x0
14:38:11: Time Access 1 TAAC                            :0xe
14:38:11: Time Access 2 NSAC*100                        :0x0
14:38:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:11: Card Command Classess CCC                     :0x5b5
14:38:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:11: DSR(driver stage register)  DSR_IMP           :0x0
14:38:11: Reserv2                                       :0x0
14:38:11: Device Size C_SIZE                            :0xedc8
14:38:11: Reserv3                                       :0x0
14:38:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:11: Reserv4                                       :0x0
14:38:11: Write Speed Factor R2W_FACTOR                 :0x2
14:38:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:11: FILE_FORMAT_GRP                               :0x0
14:38:11: COPY flag                                     :0x1
14:38:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:11: File_Format                                   :0x0
14:38:11: CRC                                           :0x0
14:38:11: ####CSD Registe Values####  

14:38:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:11: [GetSCRRegisterEntry] Passed
14:38:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:11: Data_Status_After Erases          : 0
14:38:11: CPRM Security Support             : No Security
14:38:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:11: Spec. Version                     : Version 3.0X
14:38:11: Extended Security Support         : Extended_Security_Not_Supported
14:38:11: Command Support                   : COMMAND_SUPPORT
14:38:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 2396 ] 
14:38:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFB420>) , Command count = 2397 ] 
14:38:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:11: [ SetBusWidth(0x4) , Command count = 2398 ] 
14:38:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF52A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2399 ] 
14:38:11: Protected Area Size 0x28000
14:38:11: Bus Width           2
14:38:11: Secure Mode         0
14:38:11: Speed  Class        4
14:38:11: Perf Move           0
14:38:11: Au Size             9
14:38:11: Erase Size          15
14:38:11: Erase Timeout       1
14:38:11: Erase offset        1
14:38:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2400 ] 
14:38:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:11: Host Frequency set to 100000 KHz
14:38:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:11: ####CSD Registe 2.0 Values####
14:38:11: CSD_STRUCTURE                                 :0x1
14:38:11: Reserv1                                       :0x0
14:38:11: Time Access 1 TAAC                            :0xe
14:38:11: Time Access 2 NSAC*100                        :0x0
14:38:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:11: Card Command Classess CCC                     :0x5b5
14:38:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:11: DSR(driver stage register)  DSR_IMP           :0x0
14:38:11: Reserv2                                       :0x0
14:38:11: Device Size C_SIZE                            :0xedc8
14:38:11: Reserv3                                       :0x0
14:38:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:11: Reserv4                                       :0x0
14:38:11: Write Speed Factor R2W_FACTOR                 :0x2
14:38:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:11: FILE_FORMAT_GRP                               :0x0
14:38:11: COPY flag                                     :0x1
14:38:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:11: File_Format                                   :0x0
14:38:11: CRC                                           :0x0
14:38:11: ####CSD Registe Values####  

14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB510>, <py_sfcl.CommandDataDefinition object at 0x05E00F90>) , Command count = 2401 ] 
14:38:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9810>, <py_sfcl.CommandDataDefinition object at 0x05E078D0>) , Command count = 2402 ] 
14:38:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E004E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07900>, <py_sfcl.PySEnhancedCmdData object at 0x05E07120>, <None>, <py_sfcl.Command23 object at 0x05E07030>) , Command count = 2403 ] 
14:38:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:14: Host Frequency set to 25000 KHz
14:38:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB240>, 0x0, True) , Command count = 2404 ] 
14:38:14: [GO18_globalSetVolt]### Host voltage value is set.
14:38:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00270>, 0x0, False) , Command count = 2405 ] 
14:38:14: [GO18_globalSetVolt]### Host voltage value is set.
14:38:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2406 ] 
14:38:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2407 ] 
14:38:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2408 ] 
14:38:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E002D0>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 2409 ] 
14:38:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5BD0>, <py_sfcl.CommandDataDefinition object at 0x05E0F0C0>) , Command count = 2410 ] 
14:38:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:14: [ SetCardRCA(0x1, 0xD555) , Command count = 2411 ] 
14:38:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:14: Host Frequency set to 25000 KHz
14:38:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:14: ####CSD Registe 2.0 Values####
14:38:14: CSD_STRUCTURE                                 :0x1
14:38:14: Reserv1                                       :0x0
14:38:14: Time Access 1 TAAC                            :0xe
14:38:14: Time Access 2 NSAC*100                        :0x0
14:38:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:14: Card Command Classess CCC                     :0x5b5
14:38:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:14: DSR(driver stage register)  DSR_IMP           :0x0
14:38:14: Reserv2                                       :0x0
14:38:14: Device Size C_SIZE                            :0xedc8
14:38:14: Reserv3                                       :0x0
14:38:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:14: Reserv4                                       :0x0
14:38:14: Write Speed Factor R2W_FACTOR                 :0x2
14:38:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:14: FILE_FORMAT_GRP                               :0x0
14:38:14: COPY flag                                     :0x1
14:38:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:14: File_Format                                   :0x0
14:38:14: CRC                                           :0x0
14:38:14: ####CSD Registe Values####  

14:38:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:14: [GetSCRRegisterEntry] Passed
14:38:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:14: Data_Status_After Erases          : 0
14:38:14: CPRM Security Support             : No Security
14:38:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:14: Spec. Version                     : Version 3.0X
14:38:14: Extended Security Support         : Extended_Security_Not_Supported
14:38:14: Command Support                   : COMMAND_SUPPORT
14:38:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB030>, <py_sfcl.CommandDataDefinition object at 0x05DFBDB0>) , Command count = 2412 ] 
14:38:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBA0>, <py_sfcl.CommandDataDefinition object at 0x05DF5CF0>) , Command count = 2413 ] 
14:38:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:14: [ SetBusWidth(0x4) , Command count = 2414 ] 
14:38:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2415 ] 
14:38:14: Protected Area Size 0x28000
14:38:14: Bus Width           2
14:38:14: Secure Mode         0
14:38:14: Speed  Class        4
14:38:14: Perf Move           0
14:38:14: Au Size             9
14:38:14: Erase Size          15
14:38:14: Erase Timeout       1
14:38:14: Erase offset        1
14:38:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2416 ] 
14:38:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:14: Host Frequency set to 100000 KHz
14:38:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:14: ####CSD Registe 2.0 Values####
14:38:14: CSD_STRUCTURE                                 :0x1
14:38:14: Reserv1                                       :0x0
14:38:14: Time Access 1 TAAC                            :0xe
14:38:15: Time Access 2 NSAC*100                        :0x0
14:38:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:15: Card Command Classess CCC                     :0x5b5
14:38:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:15: DSR(driver stage register)  DSR_IMP           :0x0
14:38:15: Reserv2                                       :0x0
14:38:15: Device Size C_SIZE                            :0xedc8
14:38:15: Reserv3                                       :0x0
14:38:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:15: Reserv4                                       :0x0
14:38:15: Write Speed Factor R2W_FACTOR                 :0x2
14:38:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:15: FILE_FORMAT_GRP                               :0x0
14:38:15: COPY flag                                     :0x1
14:38:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:15: File_Format                                   :0x0
14:38:15: CRC                                           :0x0
14:38:15: ####CSD Registe Values####  

14:38:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F30>, <py_sfcl.CommandDataDefinition object at 0x05DFB4B0>) , Command count = 2417 ] 
14:38:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBEA0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD20>) , Command count = 2418 ] 
14:38:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F480>, <py_sfcl.PySEnhancedCmdData object at 0x05E07D50>, <None>, <py_sfcl.Command23 object at 0x05E078A0>) , Command count = 2419 ] 
14:38:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:17: Host Frequency set to 25000 KHz
14:38:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF58D0>, 0x0, True) , Command count = 2420 ] 
14:38:17: [GO18_globalSetVolt]### Host voltage value is set.
14:38:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB810>, 0x0, False) , Command count = 2421 ] 
14:38:17: [GO18_globalSetVolt]### Host voltage value is set.
14:38:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2422 ] 
14:38:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2423 ] 
14:38:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2424 ] 
14:38:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3C0>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 2425 ] 
14:38:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0F030>) , Command count = 2426 ] 
14:38:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:17: [ SetCardRCA(0x1, 0xD555) , Command count = 2427 ] 
14:38:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:18: Host Frequency set to 25000 KHz
14:38:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:18: ####CSD Registe 2.0 Values####
14:38:18: CSD_STRUCTURE                                 :0x1
14:38:18: Reserv1                                       :0x0
14:38:18: Time Access 1 TAAC                            :0xe
14:38:18: Time Access 2 NSAC*100                        :0x0
14:38:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:18: Card Command Classess CCC                     :0x5b5
14:38:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:18: DSR(driver stage register)  DSR_IMP           :0x0
14:38:18: Reserv2                                       :0x0
14:38:18: Device Size C_SIZE                            :0xedc8
14:38:18: Reserv3                                       :0x0
14:38:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:18: Reserv4                                       :0x0
14:38:18: Write Speed Factor R2W_FACTOR                 :0x2
14:38:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:18: FILE_FORMAT_GRP                               :0x0
14:38:18: COPY flag                                     :0x1
14:38:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:18: File_Format                                   :0x0
14:38:18: CRC                                           :0x0
14:38:18: ####CSD Registe Values####  

14:38:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:18: [GetSCRRegisterEntry] Passed
14:38:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:18: Data_Status_After Erases          : 0
14:38:18: CPRM Security Support             : No Security
14:38:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:18: Spec. Version                     : Version 3.0X
14:38:18: Extended Security Support         : Extended_Security_Not_Supported
14:38:18: Command Support                   : COMMAND_SUPPORT
14:38:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB480>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 2428 ] 
14:38:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA20>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 2429 ] 
14:38:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:18: [ SetBusWidth(0x4) , Command count = 2430 ] 
14:38:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBF90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2431 ] 
14:38:18: Protected Area Size 0x28000
14:38:18: Bus Width           2
14:38:18: Secure Mode         0
14:38:18: Speed  Class        4
14:38:18: Perf Move           0
14:38:18: Au Size             9
14:38:18: Erase Size          15
14:38:18: Erase Timeout       1
14:38:18: Erase offset        1
14:38:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2432 ] 
14:38:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:18: Host Frequency set to 100000 KHz
14:38:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:18: ####CSD Registe 2.0 Values####
14:38:18: CSD_STRUCTURE                                 :0x1
14:38:18: Reserv1                                       :0x0
14:38:18: Time Access 1 TAAC                            :0xe
14:38:18: Time Access 2 NSAC*100                        :0x0
14:38:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:18: Card Command Classess CCC                     :0x5b5
14:38:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:18: DSR(driver stage register)  DSR_IMP           :0x0
14:38:18: Reserv2                                       :0x0
14:38:18: Device Size C_SIZE                            :0xedc8
14:38:18: Reserv3                                       :0x0
14:38:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:18: Reserv4                                       :0x0
14:38:18: Write Speed Factor R2W_FACTOR                 :0x2
14:38:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:18: FILE_FORMAT_GRP                               :0x0
14:38:18: COPY flag                                     :0x1
14:38:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:18: File_Format                                   :0x0
14:38:18: CRC                                           :0x0
14:38:18: ####CSD Registe Values####  

14:38:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB1B0>, <py_sfcl.CommandDataDefinition object at 0x05CEF7E0>) , Command count = 2433 ] 
14:38:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05E000F0>) , Command count = 2434 ] 
14:38:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E045D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00060>, <py_sfcl.PySEnhancedCmdData object at 0x05E00A50>, <None>, <py_sfcl.Command23 object at 0x05E077E0>) , Command count = 2435 ] 
14:38:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:21: Host Frequency set to 25000 KHz
14:38:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5CC0>, 0x0, True) , Command count = 2436 ] 
14:38:21: [GO18_globalSetVolt]### Host voltage value is set.
14:38:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04060>, 0x0, False) , Command count = 2437 ] 
14:38:21: [GO18_globalSetVolt]### Host voltage value is set.
14:38:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2438 ] 
14:38:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2439 ] 
14:38:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2440 ] 
14:38:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04240>, <py_sfcl.CommandDataDefinition object at 0x05E00F60>) , Command count = 2441 ] 
14:38:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00030>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 2442 ] 
14:38:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2443 ] 
14:38:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:21: Host Frequency set to 25000 KHz
14:38:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:21: ####CSD Registe 2.0 Values####
14:38:21: CSD_STRUCTURE                                 :0x1
14:38:21: Reserv1                                       :0x0
14:38:21: Time Access 1 TAAC                            :0xe
14:38:21: Time Access 2 NSAC*100                        :0x0
14:38:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:21: Card Command Classess CCC                     :0x5b5
14:38:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:21: DSR(driver stage register)  DSR_IMP           :0x0
14:38:21: Reserv2                                       :0x0
14:38:21: Device Size C_SIZE                            :0xedc8
14:38:21: Reserv3                                       :0x0
14:38:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:21: Reserv4                                       :0x0
14:38:21: Write Speed Factor R2W_FACTOR                 :0x2
14:38:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:21: FILE_FORMAT_GRP                               :0x0
14:38:21: COPY flag                                     :0x1
14:38:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:21: File_Format                                   :0x0
14:38:21: CRC                                           :0x0
14:38:21: ####CSD Registe Values####  

14:38:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:21: [GetSCRRegisterEntry] Passed
14:38:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:21: Data_Status_After Erases          : 0
14:38:21: CPRM Security Support             : No Security
14:38:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:21: Spec. Version                     : Version 3.0X
14:38:21: Extended Security Support         : Extended_Security_Not_Supported
14:38:21: Command Support                   : COMMAND_SUPPORT
14:38:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB540>, <py_sfcl.CommandDataDefinition object at 0x05E00C30>) , Command count = 2444 ] 
14:38:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3C0>, <py_sfcl.CommandDataDefinition object at 0x05DFBFC0>) , Command count = 2445 ] 
14:38:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:21: [ SetBusWidth(0x4) , Command count = 2446 ] 
14:38:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2447 ] 
14:38:21: Protected Area Size 0x28000
14:38:21: Bus Width           2
14:38:21: Secure Mode         0
14:38:21: Speed  Class        4
14:38:21: Perf Move           0
14:38:21: Au Size             9
14:38:21: Erase Size          15
14:38:21: Erase Timeout       1
14:38:21: Erase offset        1
14:38:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2448 ] 
14:38:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:21: Host Frequency set to 100000 KHz
14:38:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:21: ####CSD Registe 2.0 Values####
14:38:21: CSD_STRUCTURE                                 :0x1
14:38:21: Reserv1                                       :0x0
14:38:21: Time Access 1 TAAC                            :0xe
14:38:21: Time Access 2 NSAC*100                        :0x0
14:38:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:21: Card Command Classess CCC                     :0x5b5
14:38:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:21: DSR(driver stage register)  DSR_IMP           :0x0
14:38:21: Reserv2                                       :0x0
14:38:21: Device Size C_SIZE                            :0xedc8
14:38:21: Reserv3                                       :0x0
14:38:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:21: Reserv4                                       :0x0
14:38:22: Write Speed Factor R2W_FACTOR                 :0x2
14:38:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:22: FILE_FORMAT_GRP                               :0x0
14:38:22: COPY flag                                     :0x1
14:38:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:22: File_Format                                   :0x0
14:38:22: CRC                                           :0x0
14:38:22: ####CSD Registe Values####  

14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB690>, <py_sfcl.CommandDataDefinition object at 0x05DFB780>) , Command count = 2449 ] 
14:38:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F810>, <py_sfcl.CommandDataDefinition object at 0x05DF5720>) , Command count = 2450 ] 
14:38:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B450>, <py_sfcl.PySEnhancedCmdData object at 0x05E04BD0>, <None>, <py_sfcl.Command23 object at 0x05E00240>) , Command count = 2451 ] 
14:38:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:24: Host Frequency set to 25000 KHz
14:38:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBAE0>, 0x0, True) , Command count = 2452 ] 
14:38:24: [GO18_globalSetVolt]### Host voltage value is set.
14:38:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04780>, 0x0, False) , Command count = 2453 ] 
14:38:24: [GO18_globalSetVolt]### Host voltage value is set.
14:38:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2454 ] 
14:38:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2455 ] 
14:38:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2456 ] 
14:38:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04750>, <py_sfcl.CommandDataDefinition object at 0x05E00BD0>) , Command count = 2457 ] 
14:38:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FB40>, <py_sfcl.CommandDataDefinition object at 0x05E002A0>) , Command count = 2458 ] 
14:38:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2459 ] 
14:38:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:24: Host Frequency set to 25000 KHz
14:38:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:24: ####CSD Registe 2.0 Values####
14:38:24: CSD_STRUCTURE                                 :0x1
14:38:24: Reserv1                                       :0x0
14:38:24: Time Access 1 TAAC                            :0xe
14:38:24: Time Access 2 NSAC*100                        :0x0
14:38:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:24: Card Command Classess CCC                     :0x5b5
14:38:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:24: DSR(driver stage register)  DSR_IMP           :0x0
14:38:24: Reserv2                                       :0x0
14:38:24: Device Size C_SIZE                            :0xedc8
14:38:24: Reserv3                                       :0x0
14:38:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:24: Reserv4                                       :0x0
14:38:24: Write Speed Factor R2W_FACTOR                 :0x2
14:38:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:24: FILE_FORMAT_GRP                               :0x0
14:38:24: COPY flag                                     :0x1
14:38:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:24: File_Format                                   :0x0
14:38:24: CRC                                           :0x0
14:38:24: ####CSD Registe Values####  

14:38:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:24: [GetSCRRegisterEntry] Passed
14:38:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:24: Data_Status_After Erases          : 0
14:38:24: CPRM Security Support             : No Security
14:38:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:24: Spec. Version                     : Version 3.0X
14:38:24: Extended Security Support         : Extended_Security_Not_Supported
14:38:24: Command Support                   : COMMAND_SUPPORT
14:38:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049C0>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 2460 ] 
14:38:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 2461 ] 
14:38:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:24: [ SetBusWidth(0x4) , Command count = 2462 ] 
14:38:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2463 ] 
14:38:24: Protected Area Size 0x28000
14:38:24: Bus Width           2
14:38:24: Secure Mode         0
14:38:24: Speed  Class        4
14:38:24: Perf Move           0
14:38:24: Au Size             9
14:38:24: Erase Size          15
14:38:24: Erase Timeout       1
14:38:24: Erase offset        1
14:38:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2464 ] 
14:38:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:25: Host Frequency set to 100000 KHz
14:38:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:25: ####CSD Registe 2.0 Values####
14:38:25: CSD_STRUCTURE                                 :0x1
14:38:25: Reserv1                                       :0x0
14:38:25: Time Access 1 TAAC                            :0xe
14:38:25: Time Access 2 NSAC*100                        :0x0
14:38:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:25: Card Command Classess CCC                     :0x5b5
14:38:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:25: DSR(driver stage register)  DSR_IMP           :0x0
14:38:25: Reserv2                                       :0x0
14:38:25: Device Size C_SIZE                            :0xedc8
14:38:25: Reserv3                                       :0x0
14:38:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:25: Reserv4                                       :0x0
14:38:25: Write Speed Factor R2W_FACTOR                 :0x2
14:38:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:25: FILE_FORMAT_GRP                               :0x0
14:38:25: COPY flag                                     :0x1
14:38:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:25: File_Format                                   :0x0
14:38:25: CRC                                           :0x0
14:38:25: ####CSD Registe Values####  

14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA80>, <py_sfcl.CommandDataDefinition object at 0x05E0F750>) , Command count = 2465 ] 
14:38:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2A0>, <py_sfcl.CommandDataDefinition object at 0x05E00D50>) , Command count = 2466 ] 
14:38:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E003F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E003C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07DB0>, <None>, <py_sfcl.Command23 object at 0x05E00180>) , Command count = 2467 ] 
14:38:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:27: Host Frequency set to 25000 KHz
14:38:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FFC0>, 0x0, True) , Command count = 2468 ] 
14:38:27: [GO18_globalSetVolt]### Host voltage value is set.
14:38:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00E40>, 0x0, False) , Command count = 2469 ] 
14:38:27: [GO18_globalSetVolt]### Host voltage value is set.
14:38:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2470 ] 
14:38:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2471 ] 
14:38:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2472 ] 
14:38:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00720>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 2473 ] 
14:38:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00900>, <py_sfcl.CommandDataDefinition object at 0x05E04690>) , Command count = 2474 ] 
14:38:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:28: [ SetCardRCA(0x1, 0xD555) , Command count = 2475 ] 
14:38:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:28: Host Frequency set to 25000 KHz
14:38:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:28: ####CSD Registe 2.0 Values####
14:38:28: CSD_STRUCTURE                                 :0x1
14:38:28: Reserv1                                       :0x0
14:38:28: Time Access 1 TAAC                            :0xe
14:38:28: Time Access 2 NSAC*100                        :0x0
14:38:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:28: Card Command Classess CCC                     :0x5b5
14:38:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:28: DSR(driver stage register)  DSR_IMP           :0x0
14:38:28: Reserv2                                       :0x0
14:38:28: Device Size C_SIZE                            :0xedc8
14:38:28: Reserv3                                       :0x0
14:38:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:28: Reserv4                                       :0x0
14:38:28: Write Speed Factor R2W_FACTOR                 :0x2
14:38:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:28: FILE_FORMAT_GRP                               :0x0
14:38:28: COPY flag                                     :0x1
14:38:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:28: File_Format                                   :0x0
14:38:28: CRC                                           :0x0
14:38:28: ####CSD Registe Values####  

14:38:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:28: [GetSCRRegisterEntry] Passed
14:38:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:28: Data_Status_After Erases          : 0
14:38:28: CPRM Security Support             : No Security
14:38:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:28: Spec. Version                     : Version 3.0X
14:38:28: Extended Security Support         : Extended_Security_Not_Supported
14:38:28: Command Support                   : COMMAND_SUPPORT
14:38:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045A0>, <py_sfcl.CommandDataDefinition object at 0x05E040F0>) , Command count = 2476 ] 
14:38:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00EA0>, <py_sfcl.CommandDataDefinition object at 0x05E04840>) , Command count = 2477 ] 
14:38:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:28: [ SetBusWidth(0x4) , Command count = 2478 ] 
14:38:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2479 ] 
14:38:28: Protected Area Size 0x28000
14:38:28: Bus Width           2
14:38:28: Secure Mode         0
14:38:28: Speed  Class        4
14:38:28: Perf Move           0
14:38:28: Au Size             9
14:38:28: Erase Size          15
14:38:28: Erase Timeout       1
14:38:28: Erase offset        1
14:38:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2480 ] 
14:38:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:28: Host Frequency set to 100000 KHz
14:38:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:28: ####CSD Registe 2.0 Values####
14:38:28: CSD_STRUCTURE                                 :0x1
14:38:28: Reserv1                                       :0x0
14:38:28: Time Access 1 TAAC                            :0xe
14:38:28: Time Access 2 NSAC*100                        :0x0
14:38:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:28: Card Command Classess CCC                     :0x5b5
14:38:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:28: DSR(driver stage register)  DSR_IMP           :0x0
14:38:28: Reserv2                                       :0x0
14:38:28: Device Size C_SIZE                            :0xedc8
14:38:28: Reserv3                                       :0x0
14:38:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:28: Reserv4                                       :0x0
14:38:28: Write Speed Factor R2W_FACTOR                 :0x2
14:38:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:28: FILE_FORMAT_GRP                               :0x0
14:38:28: COPY flag                                     :0x1
14:38:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:28: File_Format                                   :0x0
14:38:28: CRC                                           :0x0
14:38:28: ####CSD Registe Values####  

14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A50>, <py_sfcl.CommandDataDefinition object at 0x05E044E0>) , Command count = 2481 ] 
14:38:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00600>, <py_sfcl.CommandDataDefinition object at 0x05E00CF0>) , Command count = 2482 ] 
14:38:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E079F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E077B0>, <None>, <py_sfcl.Command23 object at 0x05E07CF0>) , Command count = 2483 ] 
14:38:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:31: Host Frequency set to 25000 KHz
14:38:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F630>, 0x0, True) , Command count = 2484 ] 
14:38:31: [GO18_globalSetVolt]### Host voltage value is set.
14:38:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00DB0>, 0x0, False) , Command count = 2485 ] 
14:38:31: [GO18_globalSetVolt]### Host voltage value is set.
14:38:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2486 ] 
14:38:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2487 ] 
14:38:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2488 ] 
14:38:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6C0>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 2489 ] 
14:38:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E009F0>, <py_sfcl.CommandDataDefinition object at 0x05E04030>) , Command count = 2490 ] 
14:38:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:31: [ SetCardRCA(0x1, 0xD555) , Command count = 2491 ] 
14:38:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:31: Host Frequency set to 25000 KHz
14:38:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:31: ####CSD Registe 2.0 Values####
14:38:31: CSD_STRUCTURE                                 :0x1
14:38:31: Reserv1                                       :0x0
14:38:31: Time Access 1 TAAC                            :0xe
14:38:31: Time Access 2 NSAC*100                        :0x0
14:38:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:31: Card Command Classess CCC                     :0x5b5
14:38:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:31: DSR(driver stage register)  DSR_IMP           :0x0
14:38:31: Reserv2                                       :0x0
14:38:31: Device Size C_SIZE                            :0xedc8
14:38:31: Reserv3                                       :0x0
14:38:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:31: Reserv4                                       :0x0
14:38:31: Write Speed Factor R2W_FACTOR                 :0x2
14:38:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:31: FILE_FORMAT_GRP                               :0x0
14:38:31: COPY flag                                     :0x1
14:38:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:31: File_Format                                   :0x0
14:38:31: CRC                                           :0x0
14:38:31: ####CSD Registe Values####  

14:38:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:31: [GetSCRRegisterEntry] Passed
14:38:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:31: Data_Status_After Erases          : 0
14:38:31: CPRM Security Support             : No Security
14:38:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:31: Spec. Version                     : Version 3.0X
14:38:31: Extended Security Support         : Extended_Security_Not_Supported
14:38:31: Command Support                   : COMMAND_SUPPORT
14:38:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DE0>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 2492 ] 
14:38:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00690>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 2493 ] 
14:38:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:31: [ SetBusWidth(0x4) , Command count = 2494 ] 
14:38:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2495 ] 
14:38:31: Protected Area Size 0x28000
14:38:31: Bus Width           2
14:38:31: Secure Mode         0
14:38:31: Speed  Class        4
14:38:31: Perf Move           0
14:38:31: Au Size             9
14:38:31: Erase Size          15
14:38:31: Erase Timeout       1
14:38:31: Erase offset        1
14:38:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2496 ] 
14:38:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:31: Host Frequency set to 100000 KHz
14:38:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:31: ####CSD Registe 2.0 Values####
14:38:31: CSD_STRUCTURE                                 :0x1
14:38:31: Reserv1                                       :0x0
14:38:31: Time Access 1 TAAC                            :0xe
14:38:32: Time Access 2 NSAC*100                        :0x0
14:38:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:32: Card Command Classess CCC                     :0x5b5
14:38:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:32: DSR(driver stage register)  DSR_IMP           :0x0
14:38:32: Reserv2                                       :0x0
14:38:32: Device Size C_SIZE                            :0xedc8
14:38:32: Reserv3                                       :0x0
14:38:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:32: Reserv4                                       :0x0
14:38:32: Write Speed Factor R2W_FACTOR                 :0x2
14:38:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:32: FILE_FORMAT_GRP                               :0x0
14:38:32: COPY flag                                     :0x1
14:38:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:32: File_Format                                   :0x0
14:38:32: CRC                                           :0x0
14:38:32: ####CSD Registe Values####  

14:38:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04AB0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 2497 ] 
14:38:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F840>, <py_sfcl.CommandDataDefinition object at 0x05E00870>) , Command count = 2498 ] 
14:38:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07C00>, <py_sfcl.PySEnhancedCmdData object at 0x05E07270>, <None>, <py_sfcl.Command23 object at 0x05E077E0>) , Command count = 2499 ] 
14:38:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:34: Host Frequency set to 25000 KHz
14:38:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F930>, 0x0, True) , Command count = 2500 ] 
14:38:34: [GO18_globalSetVolt]### Host voltage value is set.
14:38:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F30>, 0x0, False) , Command count = 2501 ] 
14:38:34: [GO18_globalSetVolt]### Host voltage value is set.
14:38:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2502 ] 
14:38:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2503 ] 
14:38:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2504 ] 
14:38:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05262420>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 2505 ] 
14:38:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B10>, <py_sfcl.CommandDataDefinition object at 0x05E0BAE0>) , Command count = 2506 ] 
14:38:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:34: [ SetCardRCA(0x1, 0xD555) , Command count = 2507 ] 
14:38:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:35: Host Frequency set to 25000 KHz
14:38:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:35: ####CSD Registe 2.0 Values####
14:38:35: CSD_STRUCTURE                                 :0x1
14:38:35: Reserv1                                       :0x0
14:38:35: Time Access 1 TAAC                            :0xe
14:38:35: Time Access 2 NSAC*100                        :0x0
14:38:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:35: Card Command Classess CCC                     :0x5b5
14:38:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:35: DSR(driver stage register)  DSR_IMP           :0x0
14:38:35: Reserv2                                       :0x0
14:38:35: Device Size C_SIZE                            :0xedc8
14:38:35: Reserv3                                       :0x0
14:38:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:35: Reserv4                                       :0x0
14:38:35: Write Speed Factor R2W_FACTOR                 :0x2
14:38:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:35: FILE_FORMAT_GRP                               :0x0
14:38:35: COPY flag                                     :0x1
14:38:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:35: File_Format                                   :0x0
14:38:35: CRC                                           :0x0
14:38:35: ####CSD Registe Values####  

14:38:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:35: [GetSCRRegisterEntry] Passed
14:38:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:35: Data_Status_After Erases          : 0
14:38:35: CPRM Security Support             : No Security
14:38:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:35: Spec. Version                     : Version 3.0X
14:38:35: Extended Security Support         : Extended_Security_Not_Supported
14:38:35: Command Support                   : COMMAND_SUPPORT
14:38:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E0FF60>) , Command count = 2508 ] 
14:38:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0F300>) , Command count = 2509 ] 
14:38:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:35: [ SetBusWidth(0x4) , Command count = 2510 ] 
14:38:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2511 ] 
14:38:35: Protected Area Size 0x28000
14:38:35: Bus Width           2
14:38:35: Secure Mode         0
14:38:35: Speed  Class        4
14:38:35: Perf Move           0
14:38:35: Au Size             9
14:38:35: Erase Size          15
14:38:35: Erase Timeout       1
14:38:35: Erase offset        1
14:38:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2512 ] 
14:38:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:35: Host Frequency set to 100000 KHz
14:38:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:35: ####CSD Registe 2.0 Values####
14:38:35: CSD_STRUCTURE                                 :0x1
14:38:35: Reserv1                                       :0x0
14:38:35: Time Access 1 TAAC                            :0xe
14:38:35: Time Access 2 NSAC*100                        :0x0
14:38:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:35: Card Command Classess CCC                     :0x5b5
14:38:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:35: DSR(driver stage register)  DSR_IMP           :0x0
14:38:35: Reserv2                                       :0x0
14:38:35: Device Size C_SIZE                            :0xedc8
14:38:35: Reserv3                                       :0x0
14:38:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:35: Reserv4                                       :0x0
14:38:35: Write Speed Factor R2W_FACTOR                 :0x2
14:38:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:35: FILE_FORMAT_GRP                               :0x0
14:38:35: COPY flag                                     :0x1
14:38:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:35: File_Format                                   :0x0
14:38:35: CRC                                           :0x0
14:38:35: ####CSD Registe Values####  

14:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0FAB0>) , Command count = 2513 ] 
14:38:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F00>, <py_sfcl.CommandDataDefinition object at 0x05E07C30>) , Command count = 2514 ] 
14:38:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E075D0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07210>, <None>, <py_sfcl.Command23 object at 0x05E07330>) , Command count = 2515 ] 
14:38:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:37: Host Frequency set to 25000 KHz
14:38:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5AB0>, 0x0, True) , Command count = 2516 ] 
14:38:38: [GO18_globalSetVolt]### Host voltage value is set.
14:38:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B270>, 0x0, False) , Command count = 2517 ] 
14:38:38: [GO18_globalSetVolt]### Host voltage value is set.
14:38:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2518 ] 
14:38:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2519 ] 
14:38:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2520 ] 
14:38:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2D0>, <py_sfcl.CommandDataDefinition object at 0x05E0B120>) , Command count = 2521 ] 
14:38:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04600>, <py_sfcl.CommandDataDefinition object at 0x05E0FDB0>) , Command count = 2522 ] 
14:38:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:38: [ SetCardRCA(0x1, 0xD555) , Command count = 2523 ] 
14:38:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:38: Host Frequency set to 25000 KHz
14:38:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:38: ####CSD Registe 2.0 Values####
14:38:38: CSD_STRUCTURE                                 :0x1
14:38:38: Reserv1                                       :0x0
14:38:38: Time Access 1 TAAC                            :0xe
14:38:38: Time Access 2 NSAC*100                        :0x0
14:38:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:38: Card Command Classess CCC                     :0x5b5
14:38:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:38: DSR(driver stage register)  DSR_IMP           :0x0
14:38:38: Reserv2                                       :0x0
14:38:38: Device Size C_SIZE                            :0xedc8
14:38:38: Reserv3                                       :0x0
14:38:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:38: Reserv4                                       :0x0
14:38:38: Write Speed Factor R2W_FACTOR                 :0x2
14:38:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:38: FILE_FORMAT_GRP                               :0x0
14:38:38: COPY flag                                     :0x1
14:38:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:38: File_Format                                   :0x0
14:38:38: CRC                                           :0x0
14:38:38: ####CSD Registe Values####  

14:38:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:38: [GetSCRRegisterEntry] Passed
14:38:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:38: Data_Status_After Erases          : 0
14:38:38: CPRM Security Support             : No Security
14:38:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:38: Spec. Version                     : Version 3.0X
14:38:38: Extended Security Support         : Extended_Security_Not_Supported
14:38:38: Command Support                   : COMMAND_SUPPORT
14:38:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B810>) , Command count = 2524 ] 
14:38:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D20>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 2525 ] 
14:38:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:38: [ SetBusWidth(0x4) , Command count = 2526 ] 
14:38:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2527 ] 
14:38:38: Protected Area Size 0x28000
14:38:38: Bus Width           2
14:38:38: Secure Mode         0
14:38:38: Speed  Class        4
14:38:38: Perf Move           0
14:38:38: Au Size             9
14:38:38: Erase Size          15
14:38:38: Erase Timeout       1
14:38:38: Erase offset        1
14:38:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2528 ] 
14:38:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:38: Host Frequency set to 100000 KHz
14:38:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:38: ####CSD Registe 2.0 Values####
14:38:38: CSD_STRUCTURE                                 :0x1
14:38:38: Reserv1                                       :0x0
14:38:38: Time Access 1 TAAC                            :0xe
14:38:38: Time Access 2 NSAC*100                        :0x0
14:38:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:38: Card Command Classess CCC                     :0x5b5
14:38:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:38: DSR(driver stage register)  DSR_IMP           :0x0
14:38:38: Reserv2                                       :0x0
14:38:38: Device Size C_SIZE                            :0xedc8
14:38:38: Reserv3                                       :0x0
14:38:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:38: Reserv4                                       :0x0
14:38:38: Write Speed Factor R2W_FACTOR                 :0x2
14:38:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:38: FILE_FORMAT_GRP                               :0x0
14:38:38: COPY flag                                     :0x1
14:38:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:38: File_Format                                   :0x0
14:38:38: CRC                                           :0x0
14:38:38: ####CSD Registe Values####  

14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CC0>, <py_sfcl.CommandDataDefinition object at 0x05E04AE0>) , Command count = 2529 ] 
14:38:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B10>, <py_sfcl.CommandDataDefinition object at 0x05E07480>) , Command count = 2530 ] 
14:38:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB8D0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBED0>, <None>, <py_sfcl.Command23 object at 0x05E07510>) , Command count = 2531 ] 
14:38:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:41: Host Frequency set to 25000 KHz
14:38:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04E40>, 0x0, True) , Command count = 2532 ] 
14:38:41: [GO18_globalSetVolt]### Host voltage value is set.
14:38:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527B930>, 0x0, False) , Command count = 2533 ] 
14:38:41: [GO18_globalSetVolt]### Host voltage value is set.
14:38:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2534 ] 
14:38:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2535 ] 
14:38:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2536 ] 
14:38:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF00>, <py_sfcl.CommandDataDefinition object at 0x0526F1B0>) , Command count = 2537 ] 
14:38:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04630>, <py_sfcl.CommandDataDefinition object at 0x05E07990>) , Command count = 2538 ] 
14:38:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:41: [ SetCardRCA(0x1, 0xD555) , Command count = 2539 ] 
14:38:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:41: Host Frequency set to 25000 KHz
14:38:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:41: ####CSD Registe 2.0 Values####
14:38:41: CSD_STRUCTURE                                 :0x1
14:38:41: Reserv1                                       :0x0
14:38:41: Time Access 1 TAAC                            :0xe
14:38:41: Time Access 2 NSAC*100                        :0x0
14:38:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:41: Card Command Classess CCC                     :0x5b5
14:38:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:41: DSR(driver stage register)  DSR_IMP           :0x0
14:38:41: Reserv2                                       :0x0
14:38:41: Device Size C_SIZE                            :0xedc8
14:38:41: Reserv3                                       :0x0
14:38:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:41: Reserv4                                       :0x0
14:38:41: Write Speed Factor R2W_FACTOR                 :0x2
14:38:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:41: FILE_FORMAT_GRP                               :0x0
14:38:41: COPY flag                                     :0x1
14:38:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:41: File_Format                                   :0x0
14:38:41: CRC                                           :0x0
14:38:41: ####CSD Registe Values####  

14:38:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:41: [GetSCRRegisterEntry] Passed
14:38:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:41: Data_Status_After Erases          : 0
14:38:41: CPRM Security Support             : No Security
14:38:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:41: Spec. Version                     : Version 3.0X
14:38:41: Extended Security Support         : Extended_Security_Not_Supported
14:38:41: Command Support                   : COMMAND_SUPPORT
14:38:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 2540 ] 
14:38:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD80>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 2541 ] 
14:38:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:41: [ SetBusWidth(0x4) , Command count = 2542 ] 
14:38:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2543 ] 
14:38:41: Protected Area Size 0x28000
14:38:41: Bus Width           2
14:38:41: Secure Mode         0
14:38:41: Speed  Class        4
14:38:41: Perf Move           0
14:38:41: Au Size             9
14:38:41: Erase Size          15
14:38:41: Erase Timeout       1
14:38:41: Erase offset        1
14:38:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2544 ] 
14:38:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:42: Host Frequency set to 100000 KHz
14:38:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:42: ####CSD Registe 2.0 Values####
14:38:42: CSD_STRUCTURE                                 :0x1
14:38:42: Reserv1                                       :0x0
14:38:42: Time Access 1 TAAC                            :0xe
14:38:42: Time Access 2 NSAC*100                        :0x0
14:38:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:42: Card Command Classess CCC                     :0x5b5
14:38:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:42: DSR(driver stage register)  DSR_IMP           :0x0
14:38:42: Reserv2                                       :0x0
14:38:42: Device Size C_SIZE                            :0xedc8
14:38:42: Reserv3                                       :0x0
14:38:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:42: Reserv4                                       :0x0
14:38:42: Write Speed Factor R2W_FACTOR                 :0x2
14:38:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:42: FILE_FORMAT_GRP                               :0x0
14:38:42: COPY flag                                     :0x1
14:38:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:42: File_Format                                   :0x0
14:38:42: CRC                                           :0x0
14:38:42: ####CSD Registe Values####  

14:38:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B030>, <py_sfcl.CommandDataDefinition object at 0x05E0F870>) , Command count = 2545 ] 
14:38:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5AE0>, <py_sfcl.CommandDataDefinition object at 0x05E07570>) , Command count = 2546 ] 
14:38:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07150>, <py_sfcl.PySEnhancedCmdData object at 0x05E073C0>, <None>, <py_sfcl.Command23 object at 0x05E0B8A0>) , Command count = 2547 ] 
14:38:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:44: Host Frequency set to 25000 KHz
14:38:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9FC0>, 0x0, True) , Command count = 2548 ] 
14:38:44: [GO18_globalSetVolt]### Host voltage value is set.
14:38:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FCF0>, 0x0, False) , Command count = 2549 ] 
14:38:44: [GO18_globalSetVolt]### Host voltage value is set.
14:38:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2550 ] 
14:38:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2551 ] 
14:38:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2552 ] 
14:38:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819C0>, <py_sfcl.CommandDataDefinition object at 0x05E0BE10>) , Command count = 2553 ] 
14:38:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B990>) , Command count = 2554 ] 
14:38:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:45: [ SetCardRCA(0x1, 0xD555) , Command count = 2555 ] 
14:38:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:45: Host Frequency set to 25000 KHz
14:38:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:45: ####CSD Registe 2.0 Values####
14:38:45: CSD_STRUCTURE                                 :0x1
14:38:45: Reserv1                                       :0x0
14:38:45: Time Access 1 TAAC                            :0xe
14:38:45: Time Access 2 NSAC*100                        :0x0
14:38:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:45: Card Command Classess CCC                     :0x5b5
14:38:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:45: DSR(driver stage register)  DSR_IMP           :0x0
14:38:45: Reserv2                                       :0x0
14:38:45: Device Size C_SIZE                            :0xedc8
14:38:45: Reserv3                                       :0x0
14:38:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:45: Reserv4                                       :0x0
14:38:45: Write Speed Factor R2W_FACTOR                 :0x2
14:38:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:45: FILE_FORMAT_GRP                               :0x0
14:38:45: COPY flag                                     :0x1
14:38:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:45: File_Format                                   :0x0
14:38:45: CRC                                           :0x0
14:38:45: ####CSD Registe Values####  

14:38:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:45: [GetSCRRegisterEntry] Passed
14:38:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:45: Data_Status_After Erases          : 0
14:38:45: CPRM Security Support             : No Security
14:38:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:45: Spec. Version                     : Version 3.0X
14:38:45: Extended Security Support         : Extended_Security_Not_Supported
14:38:45: Command Support                   : COMMAND_SUPPORT
14:38:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E0B7E0>) , Command count = 2556 ] 
14:38:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BAB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B510>) , Command count = 2557 ] 
14:38:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:45: [ SetBusWidth(0x4) , Command count = 2558 ] 
14:38:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2559 ] 
14:38:45: Protected Area Size 0x28000
14:38:45: Bus Width           2
14:38:45: Secure Mode         0
14:38:45: Speed  Class        4
14:38:45: Perf Move           0
14:38:45: Au Size             9
14:38:45: Erase Size          15
14:38:45: Erase Timeout       1
14:38:45: Erase offset        1
14:38:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2560 ] 
14:38:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:45: Host Frequency set to 100000 KHz
14:38:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:45: ####CSD Registe 2.0 Values####
14:38:45: CSD_STRUCTURE                                 :0x1
14:38:45: Reserv1                                       :0x0
14:38:45: Time Access 1 TAAC                            :0xe
14:38:45: Time Access 2 NSAC*100                        :0x0
14:38:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:45: Card Command Classess CCC                     :0x5b5
14:38:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:45: DSR(driver stage register)  DSR_IMP           :0x0
14:38:45: Reserv2                                       :0x0
14:38:45: Device Size C_SIZE                            :0xedc8
14:38:45: Reserv3                                       :0x0
14:38:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:45: Reserv4                                       :0x0
14:38:45: Write Speed Factor R2W_FACTOR                 :0x2
14:38:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:45: FILE_FORMAT_GRP                               :0x0
14:38:45: COPY flag                                     :0x1
14:38:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:45: File_Format                                   :0x0
14:38:45: CRC                                           :0x0
14:38:45: ####CSD Registe Values####  

14:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F780>, <py_sfcl.CommandDataDefinition object at 0x05E0B9C0>) , Command count = 2561 ] 
14:38:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B780>, <py_sfcl.CommandDataDefinition object at 0x05E07240>) , Command count = 2562 ] 
14:38:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052819F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07A20>, <py_sfcl.PySEnhancedCmdData object at 0x05E07F60>, <None>, <py_sfcl.Command23 object at 0x05E07540>) , Command count = 2563 ] 
14:38:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:48: Host Frequency set to 25000 KHz
14:38:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B6F0>, 0x0, True) , Command count = 2564 ] 
14:38:48: [GO18_globalSetVolt]### Host voltage value is set.
14:38:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F00>, 0x0, False) , Command count = 2565 ] 
14:38:48: [GO18_globalSetVolt]### Host voltage value is set.
14:38:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2566 ] 
14:38:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2567 ] 
14:38:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2568 ] 
14:38:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF060>, <py_sfcl.CommandDataDefinition object at 0x05E0B3C0>) , Command count = 2569 ] 
14:38:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B630>, <py_sfcl.CommandDataDefinition object at 0x05E0BC00>) , Command count = 2570 ] 
14:38:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2571 ] 
14:38:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:48: Host Frequency set to 25000 KHz
14:38:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:48: ####CSD Registe 2.0 Values####
14:38:48: CSD_STRUCTURE                                 :0x1
14:38:48: Reserv1                                       :0x0
14:38:48: Time Access 1 TAAC                            :0xe
14:38:48: Time Access 2 NSAC*100                        :0x0
14:38:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:48: Card Command Classess CCC                     :0x5b5
14:38:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:48: DSR(driver stage register)  DSR_IMP           :0x0
14:38:48: Reserv2                                       :0x0
14:38:48: Device Size C_SIZE                            :0xedc8
14:38:48: Reserv3                                       :0x0
14:38:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:48: Reserv4                                       :0x0
14:38:48: Write Speed Factor R2W_FACTOR                 :0x2
14:38:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:48: FILE_FORMAT_GRP                               :0x0
14:38:48: COPY flag                                     :0x1
14:38:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:48: File_Format                                   :0x0
14:38:48: CRC                                           :0x0
14:38:48: ####CSD Registe Values####  

14:38:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:48: [GetSCRRegisterEntry] Passed
14:38:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:48: Data_Status_After Erases          : 0
14:38:48: CPRM Security Support             : No Security
14:38:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:48: Spec. Version                     : Version 3.0X
14:38:48: Extended Security Support         : Extended_Security_Not_Supported
14:38:48: Command Support                   : COMMAND_SUPPORT
14:38:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F180>, <py_sfcl.CommandDataDefinition object at 0x05E0BDB0>) , Command count = 2572 ] 
14:38:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0521E030>, <py_sfcl.CommandDataDefinition object at 0x05E0B330>) , Command count = 2573 ] 
14:38:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:48: [ SetBusWidth(0x4) , Command count = 2574 ] 
14:38:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2575 ] 
14:38:48: Protected Area Size 0x28000
14:38:48: Bus Width           2
14:38:48: Secure Mode         0
14:38:48: Speed  Class        4
14:38:48: Perf Move           0
14:38:48: Au Size             9
14:38:48: Erase Size          15
14:38:48: Erase Timeout       1
14:38:48: Erase offset        1
14:38:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2576 ] 
14:38:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:48: Host Frequency set to 100000 KHz
14:38:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:48: ####CSD Registe 2.0 Values####
14:38:48: CSD_STRUCTURE                                 :0x1
14:38:48: Reserv1                                       :0x0
14:38:48: Time Access 1 TAAC                            :0xe
14:38:48: Time Access 2 NSAC*100                        :0x0
14:38:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:48: Card Command Classess CCC                     :0x5b5
14:38:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:48: DSR(driver stage register)  DSR_IMP           :0x0
14:38:48: Reserv2                                       :0x0
14:38:48: Device Size C_SIZE                            :0xedc8
14:38:48: Reserv3                                       :0x0
14:38:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:48: Reserv4                                       :0x0
14:38:49: Write Speed Factor R2W_FACTOR                 :0x2
14:38:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:49: FILE_FORMAT_GRP                               :0x0
14:38:49: COPY flag                                     :0x1
14:38:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:49: File_Format                                   :0x0
14:38:49: CRC                                           :0x0
14:38:49: ####CSD Registe Values####  

14:38:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B9F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F990>) , Command count = 2577 ] 
14:38:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05144030>, <py_sfcl.CommandDataDefinition object at 0x05E07EA0>) , Command count = 2578 ] 
14:38:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E044B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E074B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07B40>, <None>, <py_sfcl.Command23 object at 0x05E07BD0>) , Command count = 2579 ] 
14:38:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:51: Host Frequency set to 25000 KHz
14:38:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04570>, 0x0, True) , Command count = 2580 ] 
14:38:51: [GO18_globalSetVolt]### Host voltage value is set.
14:38:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04540>, 0x0, False) , Command count = 2581 ] 
14:38:51: [GO18_globalSetVolt]### Host voltage value is set.
14:38:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2582 ] 
14:38:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2583 ] 
14:38:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2584 ] 
14:38:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C90>, <py_sfcl.CommandDataDefinition object at 0x0526F1E0>) , Command count = 2585 ] 
14:38:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x05E0B480>) , Command count = 2586 ] 
14:38:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2587 ] 
14:38:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:52: Host Frequency set to 25000 KHz
14:38:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:52: ####CSD Registe 2.0 Values####
14:38:52: CSD_STRUCTURE                                 :0x1
14:38:52: Reserv1                                       :0x0
14:38:52: Time Access 1 TAAC                            :0xe
14:38:52: Time Access 2 NSAC*100                        :0x0
14:38:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:52: Card Command Classess CCC                     :0x5b5
14:38:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:52: DSR(driver stage register)  DSR_IMP           :0x0
14:38:52: Reserv2                                       :0x0
14:38:52: Device Size C_SIZE                            :0xedc8
14:38:52: Reserv3                                       :0x0
14:38:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:52: Reserv4                                       :0x0
14:38:52: Write Speed Factor R2W_FACTOR                 :0x2
14:38:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:52: FILE_FORMAT_GRP                               :0x0
14:38:52: COPY flag                                     :0x1
14:38:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:52: File_Format                                   :0x0
14:38:52: CRC                                           :0x0
14:38:52: ####CSD Registe Values####  

14:38:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:52: [GetSCRRegisterEntry] Passed
14:38:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:52: Data_Status_After Erases          : 0
14:38:52: CPRM Security Support             : No Security
14:38:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:52: Spec. Version                     : Version 3.0X
14:38:52: Extended Security Support         : Extended_Security_Not_Supported
14:38:52: Command Support                   : COMMAND_SUPPORT
14:38:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0FE70>) , Command count = 2588 ] 
14:38:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527BFC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 2589 ] 
14:38:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:52: [ SetBusWidth(0x4) , Command count = 2590 ] 
14:38:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05CEF030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2591 ] 
14:38:52: Protected Area Size 0x28000
14:38:52: Bus Width           2
14:38:52: Secure Mode         0
14:38:52: Speed  Class        4
14:38:52: Perf Move           0
14:38:52: Au Size             9
14:38:52: Erase Size          15
14:38:52: Erase Timeout       1
14:38:52: Erase offset        1
14:38:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2592 ] 
14:38:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:52: Host Frequency set to 100000 KHz
14:38:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:52: ####CSD Registe 2.0 Values####
14:38:52: CSD_STRUCTURE                                 :0x1
14:38:52: Reserv1                                       :0x0
14:38:52: Time Access 1 TAAC                            :0xe
14:38:52: Time Access 2 NSAC*100                        :0x0
14:38:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:52: Card Command Classess CCC                     :0x5b5
14:38:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:52: DSR(driver stage register)  DSR_IMP           :0x0
14:38:52: Reserv2                                       :0x0
14:38:52: Device Size C_SIZE                            :0xedc8
14:38:52: Reserv3                                       :0x0
14:38:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:52: Reserv4                                       :0x0
14:38:52: Write Speed Factor R2W_FACTOR                 :0x2
14:38:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:52: FILE_FORMAT_GRP                               :0x0
14:38:52: COPY flag                                     :0x1
14:38:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:52: File_Format                                   :0x0
14:38:52: CRC                                           :0x0
14:38:52: ####CSD Registe Values####  

14:38:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BF30>, <py_sfcl.CommandDataDefinition object at 0x05DE9BA0>) , Command count = 2593 ] 
14:38:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FC60>, <py_sfcl.CommandDataDefinition object at 0x05E07570>) , Command count = 2594 ] 
14:38:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FF30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E070F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07BA0>, <None>, <py_sfcl.Command23 object at 0x05E07240>) , Command count = 2595 ] 
14:38:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:55: Host Frequency set to 25000 KHz
14:38:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FC30>, 0x0, True) , Command count = 2596 ] 
14:38:55: [GO18_globalSetVolt]### Host voltage value is set.
14:38:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF58A0>, 0x0, False) , Command count = 2597 ] 
14:38:55: [GO18_globalSetVolt]### Host voltage value is set.
14:38:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2598 ] 
14:38:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2599 ] 
14:38:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2600 ] 
14:38:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A50>, <py_sfcl.CommandDataDefinition object at 0x05DF50C0>) , Command count = 2601 ] 
14:38:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00660>, <py_sfcl.CommandDataDefinition object at 0x05DF5750>) , Command count = 2602 ] 
14:38:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:55: [ SetCardRCA(0x1, 0xD555) , Command count = 2603 ] 
14:38:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:55: Host Frequency set to 25000 KHz
14:38:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:55: ####CSD Registe 2.0 Values####
14:38:55: CSD_STRUCTURE                                 :0x1
14:38:55: Reserv1                                       :0x0
14:38:55: Time Access 1 TAAC                            :0xe
14:38:55: Time Access 2 NSAC*100                        :0x0
14:38:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:55: Card Command Classess CCC                     :0x5b5
14:38:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:55: DSR(driver stage register)  DSR_IMP           :0x0
14:38:55: Reserv2                                       :0x0
14:38:55: Device Size C_SIZE                            :0xedc8
14:38:55: Reserv3                                       :0x0
14:38:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:55: Reserv4                                       :0x0
14:38:55: Write Speed Factor R2W_FACTOR                 :0x2
14:38:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:55: FILE_FORMAT_GRP                               :0x0
14:38:55: COPY flag                                     :0x1
14:38:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:55: File_Format                                   :0x0
14:38:55: CRC                                           :0x0
14:38:55: ####CSD Registe Values####  

14:38:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:55: [GetSCRRegisterEntry] Passed
14:38:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:55: Data_Status_After Erases          : 0
14:38:55: CPRM Security Support             : No Security
14:38:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:55: Spec. Version                     : Version 3.0X
14:38:55: Extended Security Support         : Extended_Security_Not_Supported
14:38:55: Command Support                   : COMMAND_SUPPORT
14:38:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B40>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 2604 ] 
14:38:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05281F90>) , Command count = 2605 ] 
14:38:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:55: [ SetBusWidth(0x4) , Command count = 2606 ] 
14:38:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2607 ] 
14:38:55: Protected Area Size 0x28000
14:38:55: Bus Width           2
14:38:55: Secure Mode         0
14:38:55: Speed  Class        4
14:38:55: Perf Move           0
14:38:55: Au Size             9
14:38:55: Erase Size          15
14:38:55: Erase Timeout       1
14:38:55: Erase offset        1
14:38:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2608 ] 
14:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:55: Host Frequency set to 100000 KHz
14:38:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:55: ####CSD Registe 2.0 Values####
14:38:55: CSD_STRUCTURE                                 :0x1
14:38:55: Reserv1                                       :0x0
14:38:55: Time Access 1 TAAC                            :0xe
14:38:55: Time Access 2 NSAC*100                        :0x0
14:38:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:55: Card Command Classess CCC                     :0x5b5
14:38:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:55: DSR(driver stage register)  DSR_IMP           :0x0
14:38:55: Reserv2                                       :0x0
14:38:55: Device Size C_SIZE                            :0xedc8
14:38:55: Reserv3                                       :0x0
14:38:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:55: Reserv4                                       :0x0
14:38:56: Write Speed Factor R2W_FACTOR                 :0x2
14:38:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:56: FILE_FORMAT_GRP                               :0x0
14:38:56: COPY flag                                     :0x1
14:38:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:56: File_Format                                   :0x0
14:38:56: CRC                                           :0x0
14:38:56: ####CSD Registe Values####  

14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 2609 ] 
14:38:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F30>, <py_sfcl.CommandDataDefinition object at 0x05E0BCC0>) , Command count = 2610 ] 
14:38:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07ED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07CC0>, <None>, <py_sfcl.Command23 object at 0x05E07E70>) , Command count = 2611 ] 
14:38:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:58: Host Frequency set to 25000 KHz
14:38:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BD50>, 0x0, True) , Command count = 2612 ] 
14:38:58: [GO18_globalSetVolt]### Host voltage value is set.
14:38:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9C00>, 0x0, False) , Command count = 2613 ] 
14:38:58: [GO18_globalSetVolt]### Host voltage value is set.
14:38:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2614 ] 
14:38:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2615 ] 
14:38:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2616 ] 
14:38:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F960>, <py_sfcl.CommandDataDefinition object at 0x05E0F120>) , Command count = 2617 ] 
14:38:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FA20>, <py_sfcl.CommandDataDefinition object at 0x05DF5510>) , Command count = 2618 ] 
14:38:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2619 ] 
14:38:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:58: Host Frequency set to 25000 KHz
14:38:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:58: ####CSD Registe 2.0 Values####
14:38:58: CSD_STRUCTURE                                 :0x1
14:38:58: Reserv1                                       :0x0
14:38:58: Time Access 1 TAAC                            :0xe
14:38:58: Time Access 2 NSAC*100                        :0x0
14:38:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:58: Card Command Classess CCC                     :0x5b5
14:38:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:58: DSR(driver stage register)  DSR_IMP           :0x0
14:38:58: Reserv2                                       :0x0
14:38:58: Device Size C_SIZE                            :0xedc8
14:38:58: Reserv3                                       :0x0
14:38:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:58: Reserv4                                       :0x0
14:38:58: Write Speed Factor R2W_FACTOR                 :0x2
14:38:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:58: FILE_FORMAT_GRP                               :0x0
14:38:58: COPY flag                                     :0x1
14:38:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:58: File_Format                                   :0x0
14:38:58: CRC                                           :0x0
14:38:58: ####CSD Registe Values####  

14:38:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:58: [GetSCRRegisterEntry] Passed
14:38:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:58: Data_Status_After Erases          : 0
14:38:58: CPRM Security Support             : No Security
14:38:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:58: Spec. Version                     : Version 3.0X
14:38:58: Extended Security Support         : Extended_Security_Not_Supported
14:38:58: Command Support                   : COMMAND_SUPPORT
14:38:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F330>) , Command count = 2620 ] 
14:38:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05DE9ED0>) , Command count = 2621 ] 
14:38:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:58: [ SetBusWidth(0x4) , Command count = 2622 ] 
14:38:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2623 ] 
14:38:58: Protected Area Size 0x28000
14:38:58: Bus Width           2
14:38:58: Secure Mode         0
14:38:58: Speed  Class        4
14:38:58: Perf Move           0
14:38:58: Au Size             9
14:38:58: Erase Size          15
14:38:58: Erase Timeout       1
14:38:58: Erase offset        1
14:38:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2624 ] 
14:38:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:59: Host Frequency set to 100000 KHz
14:38:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:59: ####CSD Registe 2.0 Values####
14:38:59: CSD_STRUCTURE                                 :0x1
14:38:59: Reserv1                                       :0x0
14:38:59: Time Access 1 TAAC                            :0xe
14:38:59: Time Access 2 NSAC*100                        :0x0
14:38:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:59: Card Command Classess CCC                     :0x5b5
14:38:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:59: DSR(driver stage register)  DSR_IMP           :0x0
14:38:59: Reserv2                                       :0x0
14:38:59: Device Size C_SIZE                            :0xedc8
14:38:59: Reserv3                                       :0x0
14:38:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:59: Reserv4                                       :0x0
14:38:59: Write Speed Factor R2W_FACTOR                 :0x2
14:38:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:59: FILE_FORMAT_GRP                               :0x0
14:38:59: COPY flag                                     :0x1
14:38:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:59: File_Format                                   :0x0
14:38:59: CRC                                           :0x0
14:38:59: ####CSD Registe Values####  

14:38:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05CEF2D0>) , Command count = 2625 ] 
14:38:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F5A0>, <py_sfcl.CommandDataDefinition object at 0x05E0BBD0>) , Command count = 2626 ] 
14:38:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:38:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:38:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9B70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07EA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C60>, <None>, <py_sfcl.Command23 object at 0x05E07300>) , Command count = 2627 ] 
14:38:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:38:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:01: Host Frequency set to 25000 KHz
14:39:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9E70>, 0x0, True) , Command count = 2628 ] 
14:39:01: [GO18_globalSetVolt]### Host voltage value is set.
14:39:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB570>, 0x0, False) , Command count = 2629 ] 
14:39:01: [GO18_globalSetVolt]### Host voltage value is set.
14:39:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2630 ] 
14:39:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2631 ] 
14:39:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2632 ] 
14:39:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05E0FA50>) , Command count = 2633 ] 
14:39:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F210>, <py_sfcl.CommandDataDefinition object at 0x05DF54B0>) , Command count = 2634 ] 
14:39:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:02: [ SetCardRCA(0x1, 0xD555) , Command count = 2635 ] 
14:39:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:02: Host Frequency set to 25000 KHz
14:39:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:02: ####CSD Registe 2.0 Values####
14:39:02: CSD_STRUCTURE                                 :0x1
14:39:02: Reserv1                                       :0x0
14:39:02: Time Access 1 TAAC                            :0xe
14:39:02: Time Access 2 NSAC*100                        :0x0
14:39:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:02: Card Command Classess CCC                     :0x5b5
14:39:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:02: DSR(driver stage register)  DSR_IMP           :0x0
14:39:02: Reserv2                                       :0x0
14:39:02: Device Size C_SIZE                            :0xedc8
14:39:02: Reserv3                                       :0x0
14:39:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:02: Reserv4                                       :0x0
14:39:02: Write Speed Factor R2W_FACTOR                 :0x2
14:39:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:02: FILE_FORMAT_GRP                               :0x0
14:39:02: COPY flag                                     :0x1
14:39:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:02: File_Format                                   :0x0
14:39:02: CRC                                           :0x0
14:39:02: ####CSD Registe Values####  

14:39:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:02: [GetSCRRegisterEntry] Passed
14:39:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:02: Data_Status_After Erases          : 0
14:39:02: CPRM Security Support             : No Security
14:39:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:02: Spec. Version                     : Version 3.0X
14:39:02: Extended Security Support         : Extended_Security_Not_Supported
14:39:02: Command Support                   : COMMAND_SUPPORT
14:39:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F060>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 2636 ] 
14:39:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCF0>, <py_sfcl.CommandDataDefinition object at 0x05DFBF00>) , Command count = 2637 ] 
14:39:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:02: [ SetBusWidth(0x4) , Command count = 2638 ] 
14:39:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2639 ] 
14:39:02: Protected Area Size 0x28000
14:39:02: Bus Width           2
14:39:02: Secure Mode         0
14:39:02: Speed  Class        4
14:39:02: Perf Move           0
14:39:02: Au Size             9
14:39:02: Erase Size          15
14:39:02: Erase Timeout       1
14:39:02: Erase offset        1
14:39:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2640 ] 
14:39:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:02: Host Frequency set to 100000 KHz
14:39:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:02: ####CSD Registe 2.0 Values####
14:39:02: CSD_STRUCTURE                                 :0x1
14:39:02: Reserv1                                       :0x0
14:39:02: Time Access 1 TAAC                            :0xe
14:39:02: Time Access 2 NSAC*100                        :0x0
14:39:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:02: Card Command Classess CCC                     :0x5b5
14:39:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:02: DSR(driver stage register)  DSR_IMP           :0x0
14:39:02: Reserv2                                       :0x0
14:39:02: Device Size C_SIZE                            :0xedc8
14:39:02: Reserv3                                       :0x0
14:39:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:02: Reserv4                                       :0x0
14:39:02: Write Speed Factor R2W_FACTOR                 :0x2
14:39:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:02: FILE_FORMAT_GRP                               :0x0
14:39:02: COPY flag                                     :0x1
14:39:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:02: File_Format                                   :0x0
14:39:02: CRC                                           :0x0
14:39:02: ####CSD Registe Values####  

14:39:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 2641 ] 
14:39:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC00>, <py_sfcl.CommandDataDefinition object at 0x05DF5C60>) , Command count = 2642 ] 
14:39:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07570>, <py_sfcl.PySEnhancedCmdData object at 0x05E07750>, <None>, <py_sfcl.Command23 object at 0x05E070C0>) , Command count = 2643 ] 
14:39:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:05: Host Frequency set to 25000 KHz
14:39:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F690>, 0x0, True) , Command count = 2644 ] 
14:39:05: [GO18_globalSetVolt]### Host voltage value is set.
14:39:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FC60>, 0x0, False) , Command count = 2645 ] 
14:39:05: [GO18_globalSetVolt]### Host voltage value is set.
14:39:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2646 ] 
14:39:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2647 ] 
14:39:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2648 ] 
14:39:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00090>, <py_sfcl.CommandDataDefinition object at 0x05DFB840>) , Command count = 2649 ] 
14:39:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D20>, <py_sfcl.CommandDataDefinition object at 0x05DFB720>) , Command count = 2650 ] 
14:39:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:05: [ SetCardRCA(0x1, 0xD555) , Command count = 2651 ] 
14:39:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:05: Host Frequency set to 25000 KHz
14:39:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:05: ####CSD Registe 2.0 Values####
14:39:05: CSD_STRUCTURE                                 :0x1
14:39:05: Reserv1                                       :0x0
14:39:05: Time Access 1 TAAC                            :0xe
14:39:05: Time Access 2 NSAC*100                        :0x0
14:39:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:05: Card Command Classess CCC                     :0x5b5
14:39:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:05: DSR(driver stage register)  DSR_IMP           :0x0
14:39:05: Reserv2                                       :0x0
14:39:05: Device Size C_SIZE                            :0xedc8
14:39:05: Reserv3                                       :0x0
14:39:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:05: Reserv4                                       :0x0
14:39:05: Write Speed Factor R2W_FACTOR                 :0x2
14:39:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:05: FILE_FORMAT_GRP                               :0x0
14:39:05: COPY flag                                     :0x1
14:39:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:05: File_Format                                   :0x0
14:39:05: CRC                                           :0x0
14:39:05: ####CSD Registe Values####  

14:39:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:05: [GetSCRRegisterEntry] Passed
14:39:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:05: Data_Status_After Erases          : 0
14:39:05: CPRM Security Support             : No Security
14:39:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:05: Spec. Version                     : Version 3.0X
14:39:05: Extended Security Support         : Extended_Security_Not_Supported
14:39:05: Command Support                   : COMMAND_SUPPORT
14:39:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00450>, <py_sfcl.CommandDataDefinition object at 0x05DFBC90>) , Command count = 2652 ] 
14:39:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F90>, <py_sfcl.CommandDataDefinition object at 0x05DFB510>) , Command count = 2653 ] 
14:39:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:05: [ SetBusWidth(0x4) , Command count = 2654 ] 
14:39:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2655 ] 
14:39:05: Protected Area Size 0x28000
14:39:05: Bus Width           2
14:39:05: Secure Mode         0
14:39:05: Speed  Class        4
14:39:05: Perf Move           0
14:39:05: Au Size             9
14:39:05: Erase Size          15
14:39:05: Erase Timeout       1
14:39:05: Erase offset        1
14:39:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2656 ] 
14:39:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:05: Host Frequency set to 100000 KHz
14:39:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:05: ####CSD Registe 2.0 Values####
14:39:05: CSD_STRUCTURE                                 :0x1
14:39:05: Reserv1                                       :0x0
14:39:05: Time Access 1 TAAC                            :0xe
14:39:05: Time Access 2 NSAC*100                        :0x0
14:39:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:05: Card Command Classess CCC                     :0x5b5
14:39:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:05: DSR(driver stage register)  DSR_IMP           :0x0
14:39:05: Reserv2                                       :0x0
14:39:05: Device Size C_SIZE                            :0xedc8
14:39:05: Reserv3                                       :0x0
14:39:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:05: Reserv4                                       :0x0
14:39:06: Write Speed Factor R2W_FACTOR                 :0x2
14:39:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:06: FILE_FORMAT_GRP                               :0x0
14:39:06: COPY flag                                     :0x1
14:39:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:06: File_Format                                   :0x0
14:39:06: CRC                                           :0x0
14:39:06: ####CSD Registe Values####  

14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F4B0>, <py_sfcl.CommandDataDefinition object at 0x05DFB240>) , Command count = 2657 ] 
14:39:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E70>, <py_sfcl.CommandDataDefinition object at 0x05DFB330>) , Command count = 2658 ] 
14:39:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E046F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FBD0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00C00>, <None>, <py_sfcl.Command23 object at 0x05DFB5A0>) , Command count = 2659 ] 
14:39:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:08: Host Frequency set to 25000 KHz
14:39:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9810>, 0x0, True) , Command count = 2660 ] 
14:39:08: [GO18_globalSetVolt]### Host voltage value is set.
14:39:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E002D0>, 0x0, False) , Command count = 2661 ] 
14:39:08: [GO18_globalSetVolt]### Host voltage value is set.
14:39:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2662 ] 
14:39:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2663 ] 
14:39:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2664 ] 
14:39:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00360>, <py_sfcl.CommandDataDefinition object at 0x05DFBDB0>) , Command count = 2665 ] 
14:39:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB900>, <py_sfcl.CommandDataDefinition object at 0x05DFBD50>) , Command count = 2666 ] 
14:39:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2667 ] 
14:39:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:09: Host Frequency set to 25000 KHz
14:39:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:09: ####CSD Registe 2.0 Values####
14:39:09: CSD_STRUCTURE                                 :0x1
14:39:09: Reserv1                                       :0x0
14:39:09: Time Access 1 TAAC                            :0xe
14:39:09: Time Access 2 NSAC*100                        :0x0
14:39:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:09: Card Command Classess CCC                     :0x5b5
14:39:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:09: DSR(driver stage register)  DSR_IMP           :0x0
14:39:09: Reserv2                                       :0x0
14:39:09: Device Size C_SIZE                            :0xedc8
14:39:09: Reserv3                                       :0x0
14:39:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:09: Reserv4                                       :0x0
14:39:09: Write Speed Factor R2W_FACTOR                 :0x2
14:39:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:09: FILE_FORMAT_GRP                               :0x0
14:39:09: COPY flag                                     :0x1
14:39:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:09: File_Format                                   :0x0
14:39:09: CRC                                           :0x0
14:39:09: ####CSD Registe Values####  

14:39:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:09: [GetSCRRegisterEntry] Passed
14:39:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:09: Data_Status_After Erases          : 0
14:39:09: CPRM Security Support             : No Security
14:39:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:09: Spec. Version                     : Version 3.0X
14:39:09: Extended Security Support         : Extended_Security_Not_Supported
14:39:09: Command Support                   : COMMAND_SUPPORT
14:39:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBA0>, <py_sfcl.CommandDataDefinition object at 0x05E006F0>) , Command count = 2668 ] 
14:39:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB4B0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 2669 ] 
14:39:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:09: [ SetBusWidth(0x4) , Command count = 2670 ] 
14:39:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E008A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2671 ] 
14:39:09: Protected Area Size 0x28000
14:39:09: Bus Width           2
14:39:09: Secure Mode         0
14:39:09: Speed  Class        4
14:39:09: Perf Move           0
14:39:09: Au Size             9
14:39:09: Erase Size          15
14:39:09: Erase Timeout       1
14:39:09: Erase offset        1
14:39:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2672 ] 
14:39:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:09: Host Frequency set to 100000 KHz
14:39:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:09: ####CSD Registe 2.0 Values####
14:39:09: CSD_STRUCTURE                                 :0x1
14:39:09: Reserv1                                       :0x0
14:39:09: Time Access 1 TAAC                            :0xe
14:39:09: Time Access 2 NSAC*100                        :0x0
14:39:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:09: Card Command Classess CCC                     :0x5b5
14:39:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:09: DSR(driver stage register)  DSR_IMP           :0x0
14:39:09: Reserv2                                       :0x0
14:39:09: Device Size C_SIZE                            :0xedc8
14:39:09: Reserv3                                       :0x0
14:39:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:09: Reserv4                                       :0x0
14:39:09: Write Speed Factor R2W_FACTOR                 :0x2
14:39:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:09: FILE_FORMAT_GRP                               :0x0
14:39:09: COPY flag                                     :0x1
14:39:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:09: File_Format                                   :0x0
14:39:09: CRC                                           :0x0
14:39:09: ####CSD Registe Values####  

14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC60>, <py_sfcl.CommandDataDefinition object at 0x05DF5F90>) , Command count = 2673 ] 
14:39:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5D0>, <py_sfcl.CommandDataDefinition object at 0x05DF5BD0>) , Command count = 2674 ] 
14:39:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB3F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07F30>, <py_sfcl.PySEnhancedCmdData object at 0x05E07900>, <None>, <py_sfcl.Command23 object at 0x05E008D0>) , Command count = 2675 ] 
14:39:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:12: Host Frequency set to 25000 KHz
14:39:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBEA0>, 0x0, True) , Command count = 2676 ] 
14:39:12: [GO18_globalSetVolt]### Host voltage value is set.
14:39:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB3C0>, 0x0, False) , Command count = 2677 ] 
14:39:12: [GO18_globalSetVolt]### Host voltage value is set.
14:39:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2678 ] 
14:39:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2679 ] 
14:39:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2680 ] 
14:39:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57B0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 2681 ] 
14:39:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05DFB4E0>) , Command count = 2682 ] 
14:39:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2683 ] 
14:39:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:12: Host Frequency set to 25000 KHz
14:39:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:12: ####CSD Registe 2.0 Values####
14:39:12: CSD_STRUCTURE                                 :0x1
14:39:12: Reserv1                                       :0x0
14:39:12: Time Access 1 TAAC                            :0xe
14:39:12: Time Access 2 NSAC*100                        :0x0
14:39:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:12: Card Command Classess CCC                     :0x5b5
14:39:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:12: DSR(driver stage register)  DSR_IMP           :0x0
14:39:12: Reserv2                                       :0x0
14:39:12: Device Size C_SIZE                            :0xedc8
14:39:12: Reserv3                                       :0x0
14:39:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:12: Reserv4                                       :0x0
14:39:12: Write Speed Factor R2W_FACTOR                 :0x2
14:39:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:12: FILE_FORMAT_GRP                               :0x0
14:39:12: COPY flag                                     :0x1
14:39:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:12: File_Format                                   :0x0
14:39:12: CRC                                           :0x0
14:39:12: ####CSD Registe Values####  

14:39:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:12: [GetSCRRegisterEntry] Passed
14:39:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:12: Data_Status_After Erases          : 0
14:39:12: CPRM Security Support             : No Security
14:39:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:12: Spec. Version                     : Version 3.0X
14:39:12: Extended Security Support         : Extended_Security_Not_Supported
14:39:12: Command Support                   : COMMAND_SUPPORT
14:39:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA20>, <py_sfcl.CommandDataDefinition object at 0x05E04090>) , Command count = 2684 ] 
14:39:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB1B0>, <py_sfcl.CommandDataDefinition object at 0x05CEF7E0>) , Command count = 2685 ] 
14:39:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:12: [ SetBusWidth(0x4) , Command count = 2686 ] 
14:39:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2687 ] 
14:39:12: Protected Area Size 0x28000
14:39:12: Bus Width           2
14:39:12: Secure Mode         0
14:39:12: Speed  Class        4
14:39:12: Perf Move           0
14:39:12: Au Size             9
14:39:12: Erase Size          15
14:39:12: Erase Timeout       1
14:39:12: Erase offset        1
14:39:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2688 ] 
14:39:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:12: Host Frequency set to 100000 KHz
14:39:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:12: ####CSD Registe 2.0 Values####
14:39:12: CSD_STRUCTURE                                 :0x1
14:39:12: Reserv1                                       :0x0
14:39:12: Time Access 1 TAAC                            :0xe
14:39:12: Time Access 2 NSAC*100                        :0x0
14:39:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:12: Card Command Classess CCC                     :0x5b5
14:39:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:12: DSR(driver stage register)  DSR_IMP           :0x0
14:39:12: Reserv2                                       :0x0
14:39:12: Device Size C_SIZE                            :0xedc8
14:39:12: Reserv3                                       :0x0
14:39:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:12: Reserv4                                       :0x0
14:39:13: Write Speed Factor R2W_FACTOR                 :0x2
14:39:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:13: FILE_FORMAT_GRP                               :0x0
14:39:13: COPY flag                                     :0x1
14:39:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:13: File_Format                                   :0x0
14:39:13: CRC                                           :0x0
14:39:13: ####CSD Registe Values####  

14:39:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB300>, <py_sfcl.CommandDataDefinition object at 0x05E042D0>) , Command count = 2689 ] 
14:39:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05E00B40>) , Command count = 2690 ] 
14:39:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBB70>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB960>, <None>, <py_sfcl.Command23 object at 0x05E006C0>) , Command count = 2691 ] 
14:39:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:15: Host Frequency set to 25000 KHz
14:39:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF55D0>, 0x0, True) , Command count = 2692 ] 
14:39:15: [GO18_globalSetVolt]### Host voltage value is set.
14:39:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04240>, 0x0, False) , Command count = 2693 ] 
14:39:15: [GO18_globalSetVolt]### Host voltage value is set.
14:39:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2694 ] 
14:39:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2695 ] 
14:39:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2696 ] 
14:39:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE70>, <py_sfcl.CommandDataDefinition object at 0x05DFB9F0>) , Command count = 2697 ] 
14:39:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F570>, <py_sfcl.CommandDataDefinition object at 0x05DF5B40>) , Command count = 2698 ] 
14:39:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2699 ] 
14:39:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:15: Host Frequency set to 25000 KHz
14:39:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:15: ####CSD Registe 2.0 Values####
14:39:15: CSD_STRUCTURE                                 :0x1
14:39:15: Reserv1                                       :0x0
14:39:15: Time Access 1 TAAC                            :0xe
14:39:15: Time Access 2 NSAC*100                        :0x0
14:39:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:15: Card Command Classess CCC                     :0x5b5
14:39:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:15: DSR(driver stage register)  DSR_IMP           :0x0
14:39:15: Reserv2                                       :0x0
14:39:15: Device Size C_SIZE                            :0xedc8
14:39:15: Reserv3                                       :0x0
14:39:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:15: Reserv4                                       :0x0
14:39:15: Write Speed Factor R2W_FACTOR                 :0x2
14:39:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:15: FILE_FORMAT_GRP                               :0x0
14:39:15: COPY flag                                     :0x1
14:39:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:15: File_Format                                   :0x0
14:39:15: CRC                                           :0x0
14:39:15: ####CSD Registe Values####  

14:39:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:16: [GetSCRRegisterEntry] Passed
14:39:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:16: Data_Status_After Erases          : 0
14:39:16: CPRM Security Support             : No Security
14:39:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:16: Spec. Version                     : Version 3.0X
14:39:16: Extended Security Support         : Extended_Security_Not_Supported
14:39:16: Command Support                   : COMMAND_SUPPORT
14:39:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3C0>, <py_sfcl.CommandDataDefinition object at 0x05DFBFC0>) , Command count = 2700 ] 
14:39:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00510>, <py_sfcl.CommandDataDefinition object at 0x05E00030>) , Command count = 2701 ] 
14:39:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:16: [ SetBusWidth(0x4) , Command count = 2702 ] 
14:39:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2703 ] 
14:39:16: Protected Area Size 0x28000
14:39:16: Bus Width           2
14:39:16: Secure Mode         0
14:39:16: Speed  Class        4
14:39:16: Perf Move           0
14:39:16: Au Size             9
14:39:16: Erase Size          15
14:39:16: Erase Timeout       1
14:39:16: Erase offset        1
14:39:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2704 ] 
14:39:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:16: Host Frequency set to 100000 KHz
14:39:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:16: ####CSD Registe 2.0 Values####
14:39:16: CSD_STRUCTURE                                 :0x1
14:39:16: Reserv1                                       :0x0
14:39:16: Time Access 1 TAAC                            :0xe
14:39:16: Time Access 2 NSAC*100                        :0x0
14:39:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:16: Card Command Classess CCC                     :0x5b5
14:39:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:16: DSR(driver stage register)  DSR_IMP           :0x0
14:39:16: Reserv2                                       :0x0
14:39:16: Device Size C_SIZE                            :0xedc8
14:39:16: Reserv3                                       :0x0
14:39:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:16: Reserv4                                       :0x0
14:39:16: Write Speed Factor R2W_FACTOR                 :0x2
14:39:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:16: FILE_FORMAT_GRP                               :0x0
14:39:16: COPY flag                                     :0x1
14:39:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:16: File_Format                                   :0x0
14:39:16: CRC                                           :0x0
14:39:16: ####CSD Registe Values####  

14:39:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBAE0>) , Command count = 2705 ] 
14:39:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB630>, <py_sfcl.CommandDataDefinition object at 0x05E00A50>) , Command count = 2706 ] 
14:39:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00570>, <py_sfcl.PySEnhancedCmdData object at 0x05E078A0>, <None>, <py_sfcl.Command23 object at 0x05DFB6C0>) , Command count = 2707 ] 
14:39:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:18: Host Frequency set to 25000 KHz
14:39:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F810>, 0x0, True) , Command count = 2708 ] 
14:39:18: [GO18_globalSetVolt]### Host voltage value is set.
14:39:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04750>, 0x0, False) , Command count = 2709 ] 
14:39:18: [GO18_globalSetVolt]### Host voltage value is set.
14:39:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2710 ] 
14:39:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2711 ] 
14:39:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2712 ] 
14:39:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 2713 ] 
14:39:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB990>, <py_sfcl.CommandDataDefinition object at 0x05E00C90>) , Command count = 2714 ] 
14:39:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:19: [ SetCardRCA(0x1, 0xD555) , Command count = 2715 ] 
14:39:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:19: Host Frequency set to 25000 KHz
14:39:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:19: ####CSD Registe 2.0 Values####
14:39:19: CSD_STRUCTURE                                 :0x1
14:39:19: Reserv1                                       :0x0
14:39:19: Time Access 1 TAAC                            :0xe
14:39:19: Time Access 2 NSAC*100                        :0x0
14:39:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:19: Card Command Classess CCC                     :0x5b5
14:39:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:19: DSR(driver stage register)  DSR_IMP           :0x0
14:39:19: Reserv2                                       :0x0
14:39:19: Device Size C_SIZE                            :0xedc8
14:39:19: Reserv3                                       :0x0
14:39:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:19: Reserv4                                       :0x0
14:39:19: Write Speed Factor R2W_FACTOR                 :0x2
14:39:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:19: FILE_FORMAT_GRP                               :0x0
14:39:19: COPY flag                                     :0x1
14:39:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:19: File_Format                                   :0x0
14:39:19: CRC                                           :0x0
14:39:19: ####CSD Registe Values####  

14:39:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:19: [GetSCRRegisterEntry] Passed
14:39:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:19: Data_Status_After Erases          : 0
14:39:19: CPRM Security Support             : No Security
14:39:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:19: Spec. Version                     : Version 3.0X
14:39:19: Extended Security Support         : Extended_Security_Not_Supported
14:39:19: Command Support                   : COMMAND_SUPPORT
14:39:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04120>, <py_sfcl.CommandDataDefinition object at 0x05E0F3F0>) , Command count = 2716 ] 
14:39:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA80>, <py_sfcl.CommandDataDefinition object at 0x05E0F750>) , Command count = 2717 ] 
14:39:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:19: [ SetBusWidth(0x4) , Command count = 2718 ] 
14:39:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2719 ] 
14:39:19: Protected Area Size 0x28000
14:39:19: Bus Width           2
14:39:19: Secure Mode         0
14:39:19: Speed  Class        4
14:39:19: Perf Move           0
14:39:19: Au Size             9
14:39:19: Erase Size          15
14:39:19: Erase Timeout       1
14:39:19: Erase offset        1
14:39:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2720 ] 
14:39:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:19: Host Frequency set to 100000 KHz
14:39:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:19: ####CSD Registe 2.0 Values####
14:39:19: CSD_STRUCTURE                                 :0x1
14:39:19: Reserv1                                       :0x0
14:39:19: Time Access 1 TAAC                            :0xe
14:39:19: Time Access 2 NSAC*100                        :0x0
14:39:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:19: Card Command Classess CCC                     :0x5b5
14:39:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:19: DSR(driver stage register)  DSR_IMP           :0x0
14:39:19: Reserv2                                       :0x0
14:39:19: Device Size C_SIZE                            :0xedc8
14:39:19: Reserv3                                       :0x0
14:39:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:19: Reserv4                                       :0x0
14:39:19: Write Speed Factor R2W_FACTOR                 :0x2
14:39:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:19: FILE_FORMAT_GRP                               :0x0
14:39:19: COPY flag                                     :0x1
14:39:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:19: File_Format                                   :0x0
14:39:19: CRC                                           :0x0
14:39:19: ####CSD Registe Values####  

14:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py_sfcl.CommandDataDefinition object at 0x05E0FFC0>) , Command count = 2721 ] 
14:39:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FAE0>, <py_sfcl.CommandDataDefinition object at 0x05E00330>) , Command count = 2722 ] 
14:39:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E004B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E007B0>, <None>, <py_sfcl.Command23 object at 0x05E07720>) , Command count = 2723 ] 
14:39:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:22: Host Frequency set to 25000 KHz
14:39:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB2A0>, 0x0, True) , Command count = 2724 ] 
14:39:22: [GO18_globalSetVolt]### Host voltage value is set.
14:39:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00720>, 0x0, False) , Command count = 2725 ] 
14:39:22: [GO18_globalSetVolt]### Host voltage value is set.
14:39:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2726 ] 
14:39:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2727 ] 
14:39:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2728 ] 
14:39:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CC0>, <py_sfcl.CommandDataDefinition object at 0x05E04690>) , Command count = 2729 ] 
14:39:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC30>, <py_sfcl.CommandDataDefinition object at 0x05E00E10>) , Command count = 2730 ] 
14:39:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2731 ] 
14:39:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:22: Host Frequency set to 25000 KHz
14:39:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:22: ####CSD Registe 2.0 Values####
14:39:22: CSD_STRUCTURE                                 :0x1
14:39:22: Reserv1                                       :0x0
14:39:22: Time Access 1 TAAC                            :0xe
14:39:22: Time Access 2 NSAC*100                        :0x0
14:39:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:22: Card Command Classess CCC                     :0x5b5
14:39:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:22: DSR(driver stage register)  DSR_IMP           :0x0
14:39:22: Reserv2                                       :0x0
14:39:22: Device Size C_SIZE                            :0xedc8
14:39:22: Reserv3                                       :0x0
14:39:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:22: Reserv4                                       :0x0
14:39:22: Write Speed Factor R2W_FACTOR                 :0x2
14:39:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:22: FILE_FORMAT_GRP                               :0x0
14:39:22: COPY flag                                     :0x1
14:39:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:22: File_Format                                   :0x0
14:39:22: CRC                                           :0x0
14:39:22: ####CSD Registe Values####  

14:39:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:22: [GetSCRRegisterEntry] Passed
14:39:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:22: Data_Status_After Erases          : 0
14:39:22: CPRM Security Support             : No Security
14:39:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:22: Spec. Version                     : Version 3.0X
14:39:22: Extended Security Support         : Extended_Security_Not_Supported
14:39:22: Command Support                   : COMMAND_SUPPORT
14:39:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00EA0>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 2732 ] 
14:39:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F30>, <py_sfcl.CommandDataDefinition object at 0x05E04A50>) , Command count = 2733 ] 
14:39:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:22: [ SetBusWidth(0x4) , Command count = 2734 ] 
14:39:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E003C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2735 ] 
14:39:22: Protected Area Size 0x28000
14:39:22: Bus Width           2
14:39:22: Secure Mode         0
14:39:22: Speed  Class        4
14:39:22: Perf Move           0
14:39:22: Au Size             9
14:39:22: Erase Size          15
14:39:22: Erase Timeout       1
14:39:22: Erase offset        1
14:39:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2736 ] 
14:39:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:22: Host Frequency set to 100000 KHz
14:39:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:22: ####CSD Registe 2.0 Values####
14:39:22: CSD_STRUCTURE                                 :0x1
14:39:22: Reserv1                                       :0x0
14:39:22: Time Access 1 TAAC                            :0xe
14:39:22: Time Access 2 NSAC*100                        :0x0
14:39:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:22: Card Command Classess CCC                     :0x5b5
14:39:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:23: DSR(driver stage register)  DSR_IMP           :0x0
14:39:23: Reserv2                                       :0x0
14:39:23: Device Size C_SIZE                            :0xedc8
14:39:23: Reserv3                                       :0x0
14:39:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:23: Reserv4                                       :0x0
14:39:23: Write Speed Factor R2W_FACTOR                 :0x2
14:39:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:23: FILE_FORMAT_GRP                               :0x0
14:39:23: COPY flag                                     :0x1
14:39:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:23: File_Format                                   :0x0
14:39:23: CRC                                           :0x0
14:39:23: ####CSD Registe Values####  

14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00840>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 2737 ] 
14:39:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A20>, <py_sfcl.CommandDataDefinition object at 0x05E049F0>) , Command count = 2738 ] 
14:39:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E043C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04270>, <None>, <py_sfcl.Command23 object at 0x05E00780>) , Command count = 2739 ] 
14:39:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:25: Host Frequency set to 25000 KHz
14:39:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00600>, 0x0, True) , Command count = 2740 ] 
14:39:25: [GO18_globalSetVolt]### Host voltage value is set.
14:39:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F6C0>, 0x0, False) , Command count = 2741 ] 
14:39:25: [GO18_globalSetVolt]### Host voltage value is set.
14:39:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2742 ] 
14:39:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2743 ] 
14:39:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2744 ] 
14:39:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04900>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 2745 ] 
14:39:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04300>, <py_sfcl.CommandDataDefinition object at 0x05E04720>) , Command count = 2746 ] 
14:39:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:25: [ SetCardRCA(0x1, 0xD555) , Command count = 2747 ] 
14:39:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:26: Host Frequency set to 25000 KHz
14:39:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:26: ####CSD Registe 2.0 Values####
14:39:26: CSD_STRUCTURE                                 :0x1
14:39:26: Reserv1                                       :0x0
14:39:26: Time Access 1 TAAC                            :0xe
14:39:26: Time Access 2 NSAC*100                        :0x0
14:39:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:26: Card Command Classess CCC                     :0x5b5
14:39:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:26: DSR(driver stage register)  DSR_IMP           :0x0
14:39:26: Reserv2                                       :0x0
14:39:26: Device Size C_SIZE                            :0xedc8
14:39:26: Reserv3                                       :0x0
14:39:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:26: Reserv4                                       :0x0
14:39:26: Write Speed Factor R2W_FACTOR                 :0x2
14:39:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:26: FILE_FORMAT_GRP                               :0x0
14:39:26: COPY flag                                     :0x1
14:39:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:26: File_Format                                   :0x0
14:39:26: CRC                                           :0x0
14:39:26: ####CSD Registe Values####  

14:39:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:26: [GetSCRRegisterEntry] Passed
14:39:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:26: Data_Status_After Erases          : 0
14:39:26: CPRM Security Support             : No Security
14:39:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:26: Spec. Version                     : Version 3.0X
14:39:26: Extended Security Support         : Extended_Security_Not_Supported
14:39:26: Command Support                   : COMMAND_SUPPORT
14:39:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00690>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 2748 ] 
14:39:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FD50>, <py_sfcl.CommandDataDefinition object at 0x05E00B10>) , Command count = 2749 ] 
14:39:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:26: [ SetBusWidth(0x4) , Command count = 2750 ] 
14:39:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2751 ] 
14:39:26: Protected Area Size 0x28000
14:39:26: Bus Width           2
14:39:26: Secure Mode         0
14:39:26: Speed  Class        4
14:39:26: Perf Move           0
14:39:26: Au Size             9
14:39:26: Erase Size          15
14:39:26: Erase Timeout       1
14:39:26: Erase offset        1
14:39:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2752 ] 
14:39:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:26: Host Frequency set to 100000 KHz
14:39:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:26: ####CSD Registe 2.0 Values####
14:39:26: CSD_STRUCTURE                                 :0x1
14:39:26: Reserv1                                       :0x0
14:39:26: Time Access 1 TAAC                            :0xe
14:39:26: Time Access 2 NSAC*100                        :0x0
14:39:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:26: Card Command Classess CCC                     :0x5b5
14:39:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:26: DSR(driver stage register)  DSR_IMP           :0x0
14:39:26: Reserv2                                       :0x0
14:39:26: Device Size C_SIZE                            :0xedc8
14:39:26: Reserv3                                       :0x0
14:39:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:26: Reserv4                                       :0x0
14:39:26: Write Speed Factor R2W_FACTOR                 :0x2
14:39:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:26: FILE_FORMAT_GRP                               :0x0
14:39:26: COPY flag                                     :0x1
14:39:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:26: File_Format                                   :0x0
14:39:26: CRC                                           :0x0
14:39:26: ####CSD Registe Values####  

14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00480>, <py_sfcl.CommandDataDefinition object at 0x05E0F930>) , Command count = 2753 ] 
14:39:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00ED0>, <py_sfcl.CommandDataDefinition object at 0x05E041B0>) , Command count = 2754 ] 
14:39:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07960>, <py_sfcl.PySEnhancedCmdData object at 0x05E079F0>, <None>, <py_sfcl.Command23 object at 0x05E07F90>) , Command count = 2755 ] 
14:39:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:29: Host Frequency set to 25000 KHz
14:39:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F840>, 0x0, True) , Command count = 2756 ] 
14:39:29: [GO18_globalSetVolt]### Host voltage value is set.
14:39:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05262420>, 0x0, False) , Command count = 2757 ] 
14:39:29: [GO18_globalSetVolt]### Host voltage value is set.
14:39:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2758 ] 
14:39:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2759 ] 
14:39:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2760 ] 
14:39:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00210>, <py_sfcl.CommandDataDefinition object at 0x05E0FF60>) , Command count = 2761 ] 
14:39:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FCC0>, <py_sfcl.CommandDataDefinition object at 0x05E04B40>) , Command count = 2762 ] 
14:39:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2763 ] 
14:39:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:29: Host Frequency set to 25000 KHz
14:39:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:29: ####CSD Registe 2.0 Values####
14:39:29: CSD_STRUCTURE                                 :0x1
14:39:29: Reserv1                                       :0x0
14:39:29: Time Access 1 TAAC                            :0xe
14:39:29: Time Access 2 NSAC*100                        :0x0
14:39:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:29: Card Command Classess CCC                     :0x5b5
14:39:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:29: DSR(driver stage register)  DSR_IMP           :0x0
14:39:29: Reserv2                                       :0x0
14:39:29: Device Size C_SIZE                            :0xedc8
14:39:29: Reserv3                                       :0x0
14:39:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:29: Reserv4                                       :0x0
14:39:29: Write Speed Factor R2W_FACTOR                 :0x2
14:39:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:29: FILE_FORMAT_GRP                               :0x0
14:39:29: COPY flag                                     :0x1
14:39:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:29: File_Format                                   :0x0
14:39:29: CRC                                           :0x0
14:39:29: ####CSD Registe Values####  

14:39:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:29: [GetSCRRegisterEntry] Passed
14:39:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:29: Data_Status_After Erases          : 0
14:39:29: CPRM Security Support             : No Security
14:39:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:29: Spec. Version                     : Version 3.0X
14:39:29: Extended Security Support         : Extended_Security_Not_Supported
14:39:29: Command Support                   : COMMAND_SUPPORT
14:39:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0F300>) , Command count = 2764 ] 
14:39:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0FAB0>) , Command count = 2765 ] 
14:39:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:29: [ SetBusWidth(0x4) , Command count = 2766 ] 
14:39:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E071B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2767 ] 
14:39:29: Protected Area Size 0x28000
14:39:29: Bus Width           2
14:39:29: Secure Mode         0
14:39:29: Speed  Class        4
14:39:29: Perf Move           0
14:39:29: Au Size             9
14:39:29: Erase Size          15
14:39:29: Erase Timeout       1
14:39:29: Erase offset        1
14:39:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2768 ] 
14:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:29: Host Frequency set to 100000 KHz
14:39:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:29: ####CSD Registe 2.0 Values####
14:39:29: CSD_STRUCTURE                                 :0x1
14:39:29: Reserv1                                       :0x0
14:39:29: Time Access 1 TAAC                            :0xe
14:39:29: Time Access 2 NSAC*100                        :0x0
14:39:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:29: Card Command Classess CCC                     :0x5b5
14:39:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:29: DSR(driver stage register)  DSR_IMP           :0x0
14:39:29: Reserv2                                       :0x0
14:39:29: Device Size C_SIZE                            :0xedc8
14:39:29: Reserv3                                       :0x0
14:39:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:29: Reserv4                                       :0x0
14:39:30: Write Speed Factor R2W_FACTOR                 :0x2
14:39:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:30: FILE_FORMAT_GRP                               :0x0
14:39:30: COPY flag                                     :0x1
14:39:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:30: File_Format                                   :0x0
14:39:30: CRC                                           :0x0
14:39:30: ####CSD Registe Values####  

14:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04810>, <py_sfcl.CommandDataDefinition object at 0x05DF5AB0>) , Command count = 2769 ] 
14:39:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5180>, <py_sfcl.CommandDataDefinition object at 0x05E07F00>) , Command count = 2770 ] 
14:39:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04C60>, <py_sfcl.PySEnhancedCmdData object at 0x05E00BA0>, <None>, <py_sfcl.Command23 object at 0x05E077B0>) , Command count = 2771 ] 
14:39:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:32: Host Frequency set to 25000 KHz
14:39:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F00>, 0x0, True) , Command count = 2772 ] 
14:39:32: [GO18_globalSetVolt]### Host voltage value is set.
14:39:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B2D0>, 0x0, False) , Command count = 2773 ] 
14:39:32: [GO18_globalSetVolt]### Host voltage value is set.
14:39:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2774 ] 
14:39:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2775 ] 
14:39:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2776 ] 
14:39:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1E0>) , Command count = 2777 ] 
14:39:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CF0>, <py_sfcl.CommandDataDefinition object at 0x05E079C0>) , Command count = 2778 ] 
14:39:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:32: [ SetCardRCA(0x1, 0xD555) , Command count = 2779 ] 
14:39:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:32: Host Frequency set to 25000 KHz
14:39:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:32: ####CSD Registe 2.0 Values####
14:39:32: CSD_STRUCTURE                                 :0x1
14:39:32: Reserv1                                       :0x0
14:39:32: Time Access 1 TAAC                            :0xe
14:39:32: Time Access 2 NSAC*100                        :0x0
14:39:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:32: Card Command Classess CCC                     :0x5b5
14:39:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:32: DSR(driver stage register)  DSR_IMP           :0x0
14:39:32: Reserv2                                       :0x0
14:39:32: Device Size C_SIZE                            :0xedc8
14:39:32: Reserv3                                       :0x0
14:39:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:32: Reserv4                                       :0x0
14:39:32: Write Speed Factor R2W_FACTOR                 :0x2
14:39:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:32: FILE_FORMAT_GRP                               :0x0
14:39:32: COPY flag                                     :0x1
14:39:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:32: File_Format                                   :0x0
14:39:32: CRC                                           :0x0
14:39:32: ####CSD Registe Values####  

14:39:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:32: [GetSCRRegisterEntry] Passed
14:39:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:32: Data_Status_After Erases          : 0
14:39:32: CPRM Security Support             : No Security
14:39:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:32: Spec. Version                     : Version 3.0X
14:39:32: Extended Security Support         : Extended_Security_Not_Supported
14:39:32: Command Support                   : COMMAND_SUPPORT
14:39:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D20>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 2780 ] 
14:39:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E07E40>) , Command count = 2781 ] 
14:39:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:32: [ SetBusWidth(0x4) , Command count = 2782 ] 
14:39:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2783 ] 
14:39:32: Protected Area Size 0x28000
14:39:32: Bus Width           2
14:39:32: Secure Mode         0
14:39:32: Speed  Class        4
14:39:32: Perf Move           0
14:39:32: Au Size             9
14:39:32: Erase Size          15
14:39:32: Erase Timeout       1
14:39:32: Erase offset        1
14:39:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2784 ] 
14:39:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:33: Host Frequency set to 100000 KHz
14:39:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:33: ####CSD Registe 2.0 Values####
14:39:33: CSD_STRUCTURE                                 :0x1
14:39:33: Reserv1                                       :0x0
14:39:33: Time Access 1 TAAC                            :0xe
14:39:33: Time Access 2 NSAC*100                        :0x0
14:39:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:33: Card Command Classess CCC                     :0x5b5
14:39:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:33: DSR(driver stage register)  DSR_IMP           :0x0
14:39:33: Reserv2                                       :0x0
14:39:33: Device Size C_SIZE                            :0xedc8
14:39:33: Reserv3                                       :0x0
14:39:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:33: Reserv4                                       :0x0
14:39:33: Write Speed Factor R2W_FACTOR                 :0x2
14:39:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:33: FILE_FORMAT_GRP                               :0x0
14:39:33: COPY flag                                     :0x1
14:39:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:33: File_Format                                   :0x0
14:39:33: CRC                                           :0x0
14:39:33: ####CSD Registe Values####  

14:39:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B240>) , Command count = 2785 ] 
14:39:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E10>, <py_sfcl.CommandDataDefinition object at 0x05E071B0>) , Command count = 2786 ] 
14:39:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:33: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07330>, <py_sfcl.PySEnhancedCmdData object at 0x05E071E0>, <None>, <py_sfcl.Command23 object at 0x05E0B300>) , Command count = 2787 ] 
14:39:33: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:35: Host Frequency set to 25000 KHz
14:39:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04B10>, 0x0, True) , Command count = 2788 ] 
14:39:35: [GO18_globalSetVolt]### Host voltage value is set.
14:39:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FF00>, 0x0, False) , Command count = 2789 ] 
14:39:36: [GO18_globalSetVolt]### Host voltage value is set.
14:39:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2790 ] 
14:39:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2791 ] 
14:39:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2792 ] 
14:39:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A80>, <py_sfcl.CommandDataDefinition object at 0x05E0B960>) , Command count = 2793 ] 
14:39:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B0F0>, <py_sfcl.CommandDataDefinition object at 0x05E07DE0>) , Command count = 2794 ] 
14:39:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:36: [ SetCardRCA(0x1, 0xD555) , Command count = 2795 ] 
14:39:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:36: Host Frequency set to 25000 KHz
14:39:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:36: ####CSD Registe 2.0 Values####
14:39:36: CSD_STRUCTURE                                 :0x1
14:39:36: Reserv1                                       :0x0
14:39:36: Time Access 1 TAAC                            :0xe
14:39:36: Time Access 2 NSAC*100                        :0x0
14:39:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:36: Card Command Classess CCC                     :0x5b5
14:39:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:36: DSR(driver stage register)  DSR_IMP           :0x0
14:39:36: Reserv2                                       :0x0
14:39:36: Device Size C_SIZE                            :0xedc8
14:39:36: Reserv3                                       :0x0
14:39:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:36: Reserv4                                       :0x0
14:39:36: Write Speed Factor R2W_FACTOR                 :0x2
14:39:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:36: FILE_FORMAT_GRP                               :0x0
14:39:36: COPY flag                                     :0x1
14:39:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:36: File_Format                                   :0x0
14:39:36: CRC                                           :0x0
14:39:36: ####CSD Registe Values####  

14:39:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:36: [GetSCRRegisterEntry] Passed
14:39:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:36: Data_Status_After Erases          : 0
14:39:36: CPRM Security Support             : No Security
14:39:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:36: Spec. Version                     : Version 3.0X
14:39:36: Extended Security Support         : Extended_Security_Not_Supported
14:39:36: Command Support                   : COMMAND_SUPPORT
14:39:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD80>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 2796 ] 
14:39:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B030>, <py_sfcl.CommandDataDefinition object at 0x05E0F870>) , Command count = 2797 ] 
14:39:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:36: [ SetBusWidth(0x4) , Command count = 2798 ] 
14:39:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2799 ] 
14:39:36: Protected Area Size 0x28000
14:39:36: Bus Width           2
14:39:36: Secure Mode         0
14:39:36: Speed  Class        4
14:39:36: Perf Move           0
14:39:36: Au Size             9
14:39:36: Erase Size          15
14:39:36: Erase Timeout       1
14:39:36: Erase offset        1
14:39:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2800 ] 
14:39:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:36: Host Frequency set to 100000 KHz
14:39:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:36: ####CSD Registe 2.0 Values####
14:39:36: CSD_STRUCTURE                                 :0x1
14:39:36: Reserv1                                       :0x0
14:39:36: Time Access 1 TAAC                            :0xe
14:39:36: Time Access 2 NSAC*100                        :0x0
14:39:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:36: Card Command Classess CCC                     :0x5b5
14:39:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:36: DSR(driver stage register)  DSR_IMP           :0x0
14:39:36: Reserv2                                       :0x0
14:39:36: Device Size C_SIZE                            :0xedc8
14:39:36: Reserv3                                       :0x0
14:39:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:36: Reserv4                                       :0x0
14:39:36: Write Speed Factor R2W_FACTOR                 :0x2
14:39:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:36: FILE_FORMAT_GRP                               :0x0
14:39:36: COPY flag                                     :0x1
14:39:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:36: File_Format                                   :0x0
14:39:36: CRC                                           :0x0
14:39:36: ####CSD Registe Values####  

14:39:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD20>, <py_sfcl.CommandDataDefinition object at 0x05E0BF00>) , Command count = 2801 ] 
14:39:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FE10>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 2802 ] 
14:39:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07510>, <py_sfcl.PySEnhancedCmdData object at 0x05E07780>, <None>, <py_sfcl.Command23 object at 0x05E072D0>) , Command count = 2803 ] 
14:39:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:39: Host Frequency set to 25000 KHz
14:39:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5AE0>, 0x0, True) , Command count = 2804 ] 
14:39:39: [GO18_globalSetVolt]### Host voltage value is set.
14:39:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x052819C0>, 0x0, False) , Command count = 2805 ] 
14:39:39: [GO18_globalSetVolt]### Host voltage value is set.
14:39:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2806 ] 
14:39:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2807 ] 
14:39:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2808 ] 
14:39:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F720>, <py_sfcl.CommandDataDefinition object at 0x05E0B2A0>) , Command count = 2809 ] 
14:39:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B930>) , Command count = 2810 ] 
14:39:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:39: [ SetCardRCA(0x1, 0xD555) , Command count = 2811 ] 
14:39:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:39: Host Frequency set to 25000 KHz
14:39:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:39: ####CSD Registe 2.0 Values####
14:39:39: CSD_STRUCTURE                                 :0x1
14:39:39: Reserv1                                       :0x0
14:39:39: Time Access 1 TAAC                            :0xe
14:39:39: Time Access 2 NSAC*100                        :0x0
14:39:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:39: Card Command Classess CCC                     :0x5b5
14:39:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:39: DSR(driver stage register)  DSR_IMP           :0x0
14:39:39: Reserv2                                       :0x0
14:39:39: Device Size C_SIZE                            :0xedc8
14:39:39: Reserv3                                       :0x0
14:39:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:39: Reserv4                                       :0x0
14:39:39: Write Speed Factor R2W_FACTOR                 :0x2
14:39:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:39: FILE_FORMAT_GRP                               :0x0
14:39:39: COPY flag                                     :0x1
14:39:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:39: File_Format                                   :0x0
14:39:39: CRC                                           :0x0
14:39:39: ####CSD Registe Values####  

14:39:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:39: [GetSCRRegisterEntry] Passed
14:39:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:39: Data_Status_After Erases          : 0
14:39:39: CPRM Security Support             : No Security
14:39:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:39: Spec. Version                     : Version 3.0X
14:39:39: Extended Security Support         : Extended_Security_Not_Supported
14:39:39: Command Support                   : COMMAND_SUPPORT
14:39:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BAB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B510>) , Command count = 2812 ] 
14:39:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F780>, <py_sfcl.CommandDataDefinition object at 0x05E0B9C0>) , Command count = 2813 ] 
14:39:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:39: [ SetBusWidth(0x4) , Command count = 2814 ] 
14:39:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2815 ] 
14:39:39: Protected Area Size 0x28000
14:39:39: Bus Width           2
14:39:39: Secure Mode         0
14:39:39: Speed  Class        4
14:39:39: Perf Move           0
14:39:39: Au Size             9
14:39:39: Erase Size          15
14:39:39: Erase Timeout       1
14:39:39: Erase offset        1
14:39:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2816 ] 
14:39:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:39: Host Frequency set to 100000 KHz
14:39:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:39: ####CSD Registe 2.0 Values####
14:39:39: CSD_STRUCTURE                                 :0x1
14:39:39: Reserv1                                       :0x0
14:39:39: Time Access 1 TAAC                            :0xe
14:39:40: Time Access 2 NSAC*100                        :0x0
14:39:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:40: Card Command Classess CCC                     :0x5b5
14:39:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:40: DSR(driver stage register)  DSR_IMP           :0x0
14:39:40: Reserv2                                       :0x0
14:39:40: Device Size C_SIZE                            :0xedc8
14:39:40: Reserv3                                       :0x0
14:39:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:40: Reserv4                                       :0x0
14:39:40: Write Speed Factor R2W_FACTOR                 :0x2
14:39:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:40: FILE_FORMAT_GRP                               :0x0
14:39:40: COPY flag                                     :0x1
14:39:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:40: File_Format                                   :0x0
14:39:40: CRC                                           :0x0
14:39:40: ####CSD Registe Values####  

14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B5D0>, <py_sfcl.CommandDataDefinition object at 0x05E0BE40>) , Command count = 2817 ] 
14:39:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B750>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 2818 ] 
14:39:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07150>, <py_sfcl.PySEnhancedCmdData object at 0x05E073C0>, <None>, <py_sfcl.Command23 object at 0x05E076F0>) , Command count = 2819 ] 
14:39:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:42: Host Frequency set to 25000 KHz
14:39:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B780>, 0x0, True) , Command count = 2820 ] 
14:39:42: [GO18_globalSetVolt]### Host voltage value is set.
14:39:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF060>, 0x0, False) , Command count = 2821 ] 
14:39:42: [GO18_globalSetVolt]### Host voltage value is set.
14:39:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2822 ] 
14:39:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2823 ] 
14:39:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2824 ] 
14:39:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B420>, <py_sfcl.CommandDataDefinition object at 0x05E0B720>) , Command count = 2825 ] 
14:39:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F240>, <py_sfcl.CommandDataDefinition object at 0x05E0BDB0>) , Command count = 2826 ] 
14:39:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:42: [ SetCardRCA(0x1, 0xD555) , Command count = 2827 ] 
14:39:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:43: Host Frequency set to 25000 KHz
14:39:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:43: ####CSD Registe 2.0 Values####
14:39:43: CSD_STRUCTURE                                 :0x1
14:39:43: Reserv1                                       :0x0
14:39:43: Time Access 1 TAAC                            :0xe
14:39:43: Time Access 2 NSAC*100                        :0x0
14:39:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:43: Card Command Classess CCC                     :0x5b5
14:39:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:43: DSR(driver stage register)  DSR_IMP           :0x0
14:39:43: Reserv2                                       :0x0
14:39:43: Device Size C_SIZE                            :0xedc8
14:39:43: Reserv3                                       :0x0
14:39:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:43: Reserv4                                       :0x0
14:39:43: Write Speed Factor R2W_FACTOR                 :0x2
14:39:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:43: FILE_FORMAT_GRP                               :0x0
14:39:43: COPY flag                                     :0x1
14:39:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:43: File_Format                                   :0x0
14:39:43: CRC                                           :0x0
14:39:43: ####CSD Registe Values####  

14:39:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:43: [GetSCRRegisterEntry] Passed
14:39:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:43: Data_Status_After Erases          : 0
14:39:43: CPRM Security Support             : No Security
14:39:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:43: Spec. Version                     : Version 3.0X
14:39:43: Extended Security Support         : Extended_Security_Not_Supported
14:39:43: Command Support                   : COMMAND_SUPPORT
14:39:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0521E030>, <py_sfcl.CommandDataDefinition object at 0x05E0B330>) , Command count = 2828 ] 
14:39:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B9F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F990>) , Command count = 2829 ] 
14:39:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:43: [ SetBusWidth(0x4) , Command count = 2830 ] 
14:39:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2831 ] 
14:39:43: Protected Area Size 0x28000
14:39:43: Bus Width           2
14:39:43: Secure Mode         0
14:39:43: Speed  Class        4
14:39:43: Perf Move           0
14:39:43: Au Size             9
14:39:43: Erase Size          15
14:39:43: Erase Timeout       1
14:39:43: Erase offset        1
14:39:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2832 ] 
14:39:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:43: Host Frequency set to 100000 KHz
14:39:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:43: ####CSD Registe 2.0 Values####
14:39:43: CSD_STRUCTURE                                 :0x1
14:39:43: Reserv1                                       :0x0
14:39:43: Time Access 1 TAAC                            :0xe
14:39:43: Time Access 2 NSAC*100                        :0x0
14:39:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:43: Card Command Classess CCC                     :0x5b5
14:39:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:43: DSR(driver stage register)  DSR_IMP           :0x0
14:39:43: Reserv2                                       :0x0
14:39:43: Device Size C_SIZE                            :0xedc8
14:39:43: Reserv3                                       :0x0
14:39:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:43: Reserv4                                       :0x0
14:39:43: Write Speed Factor R2W_FACTOR                 :0x2
14:39:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:43: FILE_FORMAT_GRP                               :0x0
14:39:43: COPY flag                                     :0x1
14:39:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:43: File_Format                                   :0x0
14:39:43: CRC                                           :0x0
14:39:43: ####CSD Registe Values####  

14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 2833 ] 
14:39:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526DED0>, <py_sfcl.CommandDataDefinition object at 0x05E07480>) , Command count = 2834 ] 
14:39:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07540>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C90>, <None>, <py_sfcl.Command23 object at 0x05E07390>) , Command count = 2835 ] 
14:39:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:46: Host Frequency set to 25000 KHz
14:39:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05144030>, 0x0, True) , Command count = 2836 ] 
14:39:46: [GO18_globalSetVolt]### Host voltage value is set.
14:39:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C90>, 0x0, False) , Command count = 2837 ] 
14:39:46: [GO18_globalSetVolt]### Host voltage value is set.
14:39:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2838 ] 
14:39:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2839 ] 
14:39:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2840 ] 
14:39:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05E0FE70>) , Command count = 2841 ] 
14:39:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05E0F7E0>) , Command count = 2842 ] 
14:39:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2843 ] 
14:39:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:46: Host Frequency set to 25000 KHz
14:39:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:46: ####CSD Registe 2.0 Values####
14:39:46: CSD_STRUCTURE                                 :0x1
14:39:46: Reserv1                                       :0x0
14:39:46: Time Access 1 TAAC                            :0xe
14:39:46: Time Access 2 NSAC*100                        :0x0
14:39:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:46: Card Command Classess CCC                     :0x5b5
14:39:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:46: DSR(driver stage register)  DSR_IMP           :0x0
14:39:46: Reserv2                                       :0x0
14:39:46: Device Size C_SIZE                            :0xedc8
14:39:46: Reserv3                                       :0x0
14:39:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:46: Reserv4                                       :0x0
14:39:46: Write Speed Factor R2W_FACTOR                 :0x2
14:39:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:46: FILE_FORMAT_GRP                               :0x0
14:39:46: COPY flag                                     :0x1
14:39:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:46: File_Format                                   :0x0
14:39:46: CRC                                           :0x0
14:39:46: ####CSD Registe Values####  

14:39:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:46: [GetSCRRegisterEntry] Passed
14:39:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:46: Data_Status_After Erases          : 0
14:39:46: CPRM Security Support             : No Security
14:39:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:46: Spec. Version                     : Version 3.0X
14:39:46: Extended Security Support         : Extended_Security_Not_Supported
14:39:46: Command Support                   : COMMAND_SUPPORT
14:39:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527BFC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 2844 ] 
14:39:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF30>) , Command count = 2845 ] 
14:39:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:46: [ SetBusWidth(0x4) , Command count = 2846 ] 
14:39:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2847 ] 
14:39:46: Protected Area Size 0x28000
14:39:46: Bus Width           2
14:39:46: Secure Mode         0
14:39:46: Speed  Class        4
14:39:46: Perf Move           0
14:39:46: Au Size             9
14:39:46: Erase Size          15
14:39:46: Erase Timeout       1
14:39:46: Erase offset        1
14:39:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2848 ] 
14:39:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:46: Host Frequency set to 100000 KHz
14:39:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:46: ####CSD Registe 2.0 Values####
14:39:46: CSD_STRUCTURE                                 :0x1
14:39:46: Reserv1                                       :0x0
14:39:46: Time Access 1 TAAC                            :0xe
14:39:46: Time Access 2 NSAC*100                        :0x0
14:39:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:46: Card Command Classess CCC                     :0x5b5
14:39:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:46: DSR(driver stage register)  DSR_IMP           :0x0
14:39:46: Reserv2                                       :0x0
14:39:46: Device Size C_SIZE                            :0xedc8
14:39:46: Reserv3                                       :0x0
14:39:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:46: Reserv4                                       :0x0
14:39:46: Write Speed Factor R2W_FACTOR                 :0x2
14:39:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:47: FILE_FORMAT_GRP                               :0x0
14:39:47: COPY flag                                     :0x1
14:39:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:47: File_Format                                   :0x0
14:39:47: CRC                                           :0x0
14:39:47: ####CSD Registe Values####  

14:39:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99C0>, <py_sfcl.CommandDataDefinition object at 0x0526FC30>) , Command count = 2849 ] 
14:39:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 2850 ] 
14:39:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07B40>, <py_sfcl.PySEnhancedCmdData object at 0x05E07BD0>, <None>, <py_sfcl.Command23 object at 0x05E073F0>) , Command count = 2851 ] 
14:39:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:49: Host Frequency set to 25000 KHz
14:39:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FC60>, 0x0, True) , Command count = 2852 ] 
14:39:49: [GO18_globalSetVolt]### Host voltage value is set.
14:39:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9A50>, 0x0, False) , Command count = 2853 ] 
14:39:49: [GO18_globalSetVolt]### Host voltage value is set.
14:39:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2854 ] 
14:39:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2855 ] 
14:39:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2856 ] 
14:39:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97B0>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 2857 ] 
14:39:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C60>, <py_sfcl.CommandDataDefinition object at 0x05E0B5A0>) , Command count = 2858 ] 
14:39:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2859 ] 
14:39:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:49: Host Frequency set to 25000 KHz
14:39:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:49: ####CSD Registe 2.0 Values####
14:39:49: CSD_STRUCTURE                                 :0x1
14:39:49: Reserv1                                       :0x0
14:39:49: Time Access 1 TAAC                            :0xe
14:39:49: Time Access 2 NSAC*100                        :0x0
14:39:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:49: Card Command Classess CCC                     :0x5b5
14:39:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:49: DSR(driver stage register)  DSR_IMP           :0x0
14:39:49: Reserv2                                       :0x0
14:39:49: Device Size C_SIZE                            :0xedc8
14:39:49: Reserv3                                       :0x0
14:39:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:49: Reserv4                                       :0x0
14:39:49: Write Speed Factor R2W_FACTOR                 :0x2
14:39:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:49: FILE_FORMAT_GRP                               :0x0
14:39:49: COPY flag                                     :0x1
14:39:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:49: File_Format                                   :0x0
14:39:49: CRC                                           :0x0
14:39:49: ####CSD Registe Values####  

14:39:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:49: [GetSCRRegisterEntry] Passed
14:39:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:49: Data_Status_After Erases          : 0
14:39:49: CPRM Security Support             : No Security
14:39:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:49: Spec. Version                     : Version 3.0X
14:39:49: Extended Security Support         : Extended_Security_Not_Supported
14:39:49: Command Support                   : COMMAND_SUPPORT
14:39:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05281F90>) , Command count = 2860 ] 
14:39:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 2861 ] 
14:39:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:49: [ SetBusWidth(0x4) , Command count = 2862 ] 
14:39:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF58A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2863 ] 
14:39:49: Protected Area Size 0x28000
14:39:49: Bus Width           2
14:39:49: Secure Mode         0
14:39:49: Speed  Class        4
14:39:49: Perf Move           0
14:39:49: Au Size             9
14:39:49: Erase Size          15
14:39:49: Erase Timeout       1
14:39:49: Erase offset        1
14:39:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2864 ] 
14:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:49: Host Frequency set to 100000 KHz
14:39:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:49: ####CSD Registe 2.0 Values####
14:39:49: CSD_STRUCTURE                                 :0x1
14:39:49: Reserv1                                       :0x0
14:39:49: Time Access 1 TAAC                            :0xe
14:39:50: Time Access 2 NSAC*100                        :0x0
14:39:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:50: Card Command Classess CCC                     :0x5b5
14:39:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:50: DSR(driver stage register)  DSR_IMP           :0x0
14:39:50: Reserv2                                       :0x0
14:39:50: Device Size C_SIZE                            :0xedc8
14:39:50: Reserv3                                       :0x0
14:39:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:50: Reserv4                                       :0x0
14:39:50: Write Speed Factor R2W_FACTOR                 :0x2
14:39:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:50: FILE_FORMAT_GRP                               :0x0
14:39:50: COPY flag                                     :0x1
14:39:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:50: File_Format                                   :0x0
14:39:50: CRC                                           :0x0
14:39:50: ####CSD Registe Values####  

14:39:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB10>, <py_sfcl.CommandDataDefinition object at 0x05E0BD50>) , Command count = 2865 ] 
14:39:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F60>, <py_sfcl.CommandDataDefinition object at 0x05E07D80>) , Command count = 2866 ] 
14:39:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07BA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07240>, <None>, <py_sfcl.Command23 object at 0x05E076C0>) , Command count = 2867 ] 
14:39:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:52: Host Frequency set to 25000 KHz
14:39:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F30>, 0x0, True) , Command count = 2868 ] 
14:39:52: [GO18_globalSetVolt]### Host voltage value is set.
14:39:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F960>, 0x0, False) , Command count = 2869 ] 
14:39:52: [GO18_globalSetVolt]### Host voltage value is set.
14:39:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2870 ] 
14:39:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2871 ] 
14:39:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2872 ] 
14:39:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05DF5480>) , Command count = 2873 ] 
14:39:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F8D0>) , Command count = 2874 ] 
14:39:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:53: [ SetCardRCA(0x1, 0xD555) , Command count = 2875 ] 
14:39:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:53: Host Frequency set to 25000 KHz
14:39:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:53: ####CSD Registe 2.0 Values####
14:39:53: CSD_STRUCTURE                                 :0x1
14:39:53: Reserv1                                       :0x0
14:39:53: Time Access 1 TAAC                            :0xe
14:39:53: Time Access 2 NSAC*100                        :0x0
14:39:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:53: Card Command Classess CCC                     :0x5b5
14:39:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:53: DSR(driver stage register)  DSR_IMP           :0x0
14:39:53: Reserv2                                       :0x0
14:39:53: Device Size C_SIZE                            :0xedc8
14:39:53: Reserv3                                       :0x0
14:39:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:53: Reserv4                                       :0x0
14:39:53: Write Speed Factor R2W_FACTOR                 :0x2
14:39:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:53: FILE_FORMAT_GRP                               :0x0
14:39:53: COPY flag                                     :0x1
14:39:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:53: File_Format                                   :0x0
14:39:53: CRC                                           :0x0
14:39:53: ####CSD Registe Values####  

14:39:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:53: [GetSCRRegisterEntry] Passed
14:39:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:53: Data_Status_After Erases          : 0
14:39:53: CPRM Security Support             : No Security
14:39:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:53: Spec. Version                     : Version 3.0X
14:39:53: Extended Security Support         : Extended_Security_Not_Supported
14:39:53: Command Support                   : COMMAND_SUPPORT
14:39:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05DE9ED0>) , Command count = 2876 ] 
14:39:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05CEF2D0>) , Command count = 2877 ] 
14:39:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:53: [ SetBusWidth(0x4) , Command count = 2878 ] 
14:39:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF50F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2879 ] 
14:39:53: Protected Area Size 0x28000
14:39:53: Bus Width           2
14:39:53: Secure Mode         0
14:39:53: Speed  Class        4
14:39:53: Perf Move           0
14:39:53: Au Size             9
14:39:53: Erase Size          15
14:39:53: Erase Timeout       1
14:39:53: Erase offset        1
14:39:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2880 ] 
14:39:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:53: Host Frequency set to 100000 KHz
14:39:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:53: ####CSD Registe 2.0 Values####
14:39:53: CSD_STRUCTURE                                 :0x1
14:39:53: Reserv1                                       :0x0
14:39:53: Time Access 1 TAAC                            :0xe
14:39:53: Time Access 2 NSAC*100                        :0x0
14:39:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:53: Card Command Classess CCC                     :0x5b5
14:39:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:53: DSR(driver stage register)  DSR_IMP           :0x0
14:39:53: Reserv2                                       :0x0
14:39:53: Device Size C_SIZE                            :0xedc8
14:39:53: Reserv3                                       :0x0
14:39:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:53: Reserv4                                       :0x0
14:39:53: Write Speed Factor R2W_FACTOR                 :0x2
14:39:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:53: FILE_FORMAT_GRP                               :0x0
14:39:53: COPY flag                                     :0x1
14:39:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:53: File_Format                                   :0x0
14:39:53: CRC                                           :0x0
14:39:53: ####CSD Registe Values####  

14:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 2881 ] 
14:39:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9AB0>, <py_sfcl.CommandDataDefinition object at 0x0514AE70>) , Command count = 2882 ] 
14:39:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07ED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07CC0>, <None>, <py_sfcl.Command23 object at 0x05E07AE0>) , Command count = 2883 ] 
14:39:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:56: Host Frequency set to 25000 KHz
14:39:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F5A0>, 0x0, True) , Command count = 2884 ] 
14:39:56: [GO18_globalSetVolt]### Host voltage value is set.
14:39:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBF60>, 0x0, False) , Command count = 2885 ] 
14:39:56: [GO18_globalSetVolt]### Host voltage value is set.
14:39:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2886 ] 
14:39:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2887 ] 
14:39:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2888 ] 
14:39:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB600>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 2889 ] 
14:39:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1E0>, <py_sfcl.CommandDataDefinition object at 0x05DF55A0>) , Command count = 2890 ] 
14:39:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2891 ] 
14:39:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:56: Host Frequency set to 25000 KHz
14:39:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:56: ####CSD Registe 2.0 Values####
14:39:56: CSD_STRUCTURE                                 :0x1
14:39:56: Reserv1                                       :0x0
14:39:56: Time Access 1 TAAC                            :0xe
14:39:56: Time Access 2 NSAC*100                        :0x0
14:39:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:56: Card Command Classess CCC                     :0x5b5
14:39:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:56: DSR(driver stage register)  DSR_IMP           :0x0
14:39:56: Reserv2                                       :0x0
14:39:56: Device Size C_SIZE                            :0xedc8
14:39:56: Reserv3                                       :0x0
14:39:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:56: Reserv4                                       :0x0
14:39:56: Write Speed Factor R2W_FACTOR                 :0x2
14:39:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:56: FILE_FORMAT_GRP                               :0x0
14:39:56: COPY flag                                     :0x1
14:39:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:56: File_Format                                   :0x0
14:39:56: CRC                                           :0x0
14:39:56: ####CSD Registe Values####  

14:39:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:56: [GetSCRRegisterEntry] Passed
14:39:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:56: Data_Status_After Erases          : 0
14:39:56: CPRM Security Support             : No Security
14:39:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:56: Spec. Version                     : Version 3.0X
14:39:56: Extended Security Support         : Extended_Security_Not_Supported
14:39:56: Command Support                   : COMMAND_SUPPORT
14:39:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCF0>, <py_sfcl.CommandDataDefinition object at 0x05DFBF00>) , Command count = 2892 ] 
14:39:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 2893 ] 
14:39:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:56: [ SetBusWidth(0x4) , Command count = 2894 ] 
14:39:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2895 ] 
14:39:56: Protected Area Size 0x28000
14:39:56: Bus Width           2
14:39:56: Secure Mode         0
14:39:56: Speed  Class        4
14:39:56: Perf Move           0
14:39:56: Au Size             9
14:39:56: Erase Size          15
14:39:56: Erase Timeout       1
14:39:56: Erase offset        1
14:39:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2896 ] 
14:39:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:56: Host Frequency set to 100000 KHz
14:39:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:56: ####CSD Registe 2.0 Values####
14:39:56: CSD_STRUCTURE                                 :0x1
14:39:56: Reserv1                                       :0x0
14:39:56: Time Access 1 TAAC                            :0xe
14:39:56: Time Access 2 NSAC*100                        :0x0
14:39:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:56: Card Command Classess CCC                     :0x5b5
14:39:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:56: DSR(driver stage register)  DSR_IMP           :0x0
14:39:56: Reserv2                                       :0x0
14:39:56: Device Size C_SIZE                            :0xedc8
14:39:56: Reserv3                                       :0x0
14:39:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:56: Reserv4                                       :0x0
14:39:56: Write Speed Factor R2W_FACTOR                 :0x2
14:39:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:56: FILE_FORMAT_GRP                               :0x0
14:39:56: COPY flag                                     :0x1
14:39:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:56: File_Format                                   :0x0
14:39:57: CRC                                           :0x0
14:39:57: ####CSD Registe Values####  

14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F420>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 2897 ] 
14:39:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDE0>, <py_sfcl.CommandDataDefinition object at 0x05DF5D50>) , Command count = 2898 ] 
14:39:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:39:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:39:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E075A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07EA0>, <None>, <py_sfcl.Command23 object at 0x05E07E70>) , Command count = 2899 ] 
14:39:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:39:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:59: Host Frequency set to 25000 KHz
14:39:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FC00>, 0x0, True) , Command count = 2900 ] 
14:39:59: [GO18_globalSetVolt]### Host voltage value is set.
14:39:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00090>, 0x0, False) , Command count = 2901 ] 
14:39:59: [GO18_globalSetVolt]### Host voltage value is set.
14:39:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2902 ] 
14:39:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2903 ] 
14:39:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2904 ] 
14:39:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D80>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 2905 ] 
14:39:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5BA0>, <py_sfcl.CommandDataDefinition object at 0x05DFB750>) , Command count = 2906 ] 
14:39:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2907 ] 
14:39:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:00: Host Frequency set to 25000 KHz
14:40:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:00: ####CSD Registe 2.0 Values####
14:40:00: CSD_STRUCTURE                                 :0x1
14:40:00: Reserv1                                       :0x0
14:40:00: Time Access 1 TAAC                            :0xe
14:40:00: Time Access 2 NSAC*100                        :0x0
14:40:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:00: Card Command Classess CCC                     :0x5b5
14:40:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:00: DSR(driver stage register)  DSR_IMP           :0x0
14:40:00: Reserv2                                       :0x0
14:40:00: Device Size C_SIZE                            :0xedc8
14:40:00: Reserv3                                       :0x0
14:40:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:00: Reserv4                                       :0x0
14:40:00: Write Speed Factor R2W_FACTOR                 :0x2
14:40:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:00: FILE_FORMAT_GRP                               :0x0
14:40:00: COPY flag                                     :0x1
14:40:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:00: File_Format                                   :0x0
14:40:00: CRC                                           :0x0
14:40:00: ####CSD Registe Values####  

14:40:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:00: [GetSCRRegisterEntry] Passed
14:40:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:00: Data_Status_After Erases          : 0
14:40:00: CPRM Security Support             : No Security
14:40:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:00: Spec. Version                     : Version 3.0X
14:40:00: Extended Security Support         : Extended_Security_Not_Supported
14:40:00: Command Support                   : COMMAND_SUPPORT
14:40:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F90>, <py_sfcl.CommandDataDefinition object at 0x05DFB510>) , Command count = 2908 ] 
14:40:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB420>, <py_sfcl.CommandDataDefinition object at 0x05DFB9C0>) , Command count = 2909 ] 
14:40:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:00: [ SetBusWidth(0x4) , Command count = 2910 ] 
14:40:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2911 ] 
14:40:00: Protected Area Size 0x28000
14:40:00: Bus Width           2
14:40:00: Secure Mode         0
14:40:00: Speed  Class        4
14:40:00: Perf Move           0
14:40:00: Au Size             9
14:40:00: Erase Size          15
14:40:00: Erase Timeout       1
14:40:00: Erase offset        1
14:40:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2912 ] 
14:40:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:00: Host Frequency set to 100000 KHz
14:40:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:00: ####CSD Registe 2.0 Values####
14:40:00: CSD_STRUCTURE                                 :0x1
14:40:00: Reserv1                                       :0x0
14:40:00: Time Access 1 TAAC                            :0xe
14:40:00: Time Access 2 NSAC*100                        :0x0
14:40:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:00: Card Command Classess CCC                     :0x5b5
14:40:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:00: DSR(driver stage register)  DSR_IMP           :0x0
14:40:00: Reserv2                                       :0x0
14:40:00: Device Size C_SIZE                            :0xedc8
14:40:00: Reserv3                                       :0x0
14:40:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:00: Reserv4                                       :0x0
14:40:00: Write Speed Factor R2W_FACTOR                 :0x2
14:40:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:00: FILE_FORMAT_GRP                               :0x0
14:40:00: COPY flag                                     :0x1
14:40:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:00: File_Format                                   :0x0
14:40:00: CRC                                           :0x0
14:40:00: ####CSD Registe Values####  

14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F360>, <py_sfcl.CommandDataDefinition object at 0x05DE9810>) , Command count = 2913 ] 
14:40:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBD80>, <py_sfcl.CommandDataDefinition object at 0x05E07750>) , Command count = 2914 ] 
14:40:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E072A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07810>, <None>, <py_sfcl.Command23 object at 0x05E07C60>) , Command count = 2915 ] 
14:40:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:02: Host Frequency set to 25000 KHz
14:40:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00E70>, 0x0, True) , Command count = 2916 ] 
14:40:02: [GO18_globalSetVolt]### Host voltage value is set.
14:40:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00360>, 0x0, False) , Command count = 2917 ] 
14:40:02: [GO18_globalSetVolt]### Host voltage value is set.
14:40:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2918 ] 
14:40:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2919 ] 
14:40:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2920 ] 
14:40:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004E0>, <py_sfcl.CommandDataDefinition object at 0x05DF5F30>) , Command count = 2921 ] 
14:40:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F660>, <py_sfcl.CommandDataDefinition object at 0x05DF5E10>) , Command count = 2922 ] 
14:40:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:03: [ SetCardRCA(0x1, 0xD555) , Command count = 2923 ] 
14:40:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:03: Host Frequency set to 25000 KHz
14:40:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:03: ####CSD Registe 2.0 Values####
14:40:03: CSD_STRUCTURE                                 :0x1
14:40:03: Reserv1                                       :0x0
14:40:03: Time Access 1 TAAC                            :0xe
14:40:03: Time Access 2 NSAC*100                        :0x0
14:40:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:03: Card Command Classess CCC                     :0x5b5
14:40:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:03: DSR(driver stage register)  DSR_IMP           :0x0
14:40:03: Reserv2                                       :0x0
14:40:03: Device Size C_SIZE                            :0xedc8
14:40:03: Reserv3                                       :0x0
14:40:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:03: Reserv4                                       :0x0
14:40:03: Write Speed Factor R2W_FACTOR                 :0x2
14:40:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:03: FILE_FORMAT_GRP                               :0x0
14:40:03: COPY flag                                     :0x1
14:40:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:03: File_Format                                   :0x0
14:40:03: CRC                                           :0x0
14:40:03: ####CSD Registe Values####  

14:40:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:03: [GetSCRRegisterEntry] Passed
14:40:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:03: Data_Status_After Erases          : 0
14:40:03: CPRM Security Support             : No Security
14:40:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:03: Spec. Version                     : Version 3.0X
14:40:03: Extended Security Support         : Extended_Security_Not_Supported
14:40:03: Command Support                   : COMMAND_SUPPORT
14:40:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC90>, <py_sfcl.CommandDataDefinition object at 0x05DF58D0>) , Command count = 2924 ] 
14:40:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F90>, <py_sfcl.CommandDataDefinition object at 0x05DF5DE0>) , Command count = 2925 ] 
14:40:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:03: [ SetBusWidth(0x4) , Command count = 2926 ] 
14:40:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2927 ] 
14:40:03: Protected Area Size 0x28000
14:40:03: Bus Width           2
14:40:03: Secure Mode         0
14:40:03: Speed  Class        4
14:40:03: Perf Move           0
14:40:03: Au Size             9
14:40:03: Erase Size          15
14:40:03: Erase Timeout       1
14:40:03: Erase offset        1
14:40:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2928 ] 
14:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:03: Host Frequency set to 100000 KHz
14:40:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:03: ####CSD Registe 2.0 Values####
14:40:03: CSD_STRUCTURE                                 :0x1
14:40:03: Reserv1                                       :0x0
14:40:03: Time Access 1 TAAC                            :0xe
14:40:03: Time Access 2 NSAC*100                        :0x0
14:40:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:03: Card Command Classess CCC                     :0x5b5
14:40:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:03: DSR(driver stage register)  DSR_IMP           :0x0
14:40:03: Reserv2                                       :0x0
14:40:03: Device Size C_SIZE                            :0xedc8
14:40:03: Reserv3                                       :0x0
14:40:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:03: Reserv4                                       :0x0
14:40:03: Write Speed Factor R2W_FACTOR                 :0x2
14:40:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:03: FILE_FORMAT_GRP                               :0x0
14:40:03: COPY flag                                     :0x1
14:40:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:03: File_Format                                   :0x0
14:40:03: CRC                                           :0x0
14:40:03: ####CSD Registe Values####  

14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E005A0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA50>) , Command count = 2929 ] 
14:40:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F0C0>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 2930 ] 
14:40:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBBD0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB150>, <None>, <py_sfcl.Command23 object at 0x05E07D80>) , Command count = 2931 ] 
14:40:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:06: Host Frequency set to 25000 KHz
14:40:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB5D0>, 0x0, True) , Command count = 2932 ] 
14:40:06: [GO18_globalSetVolt]### Host voltage value is set.
14:40:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF57B0>, 0x0, False) , Command count = 2933 ] 
14:40:06: [GO18_globalSetVolt]### Host voltage value is set.
14:40:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2934 ] 
14:40:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2935 ] 
14:40:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2936 ] 
14:40:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00390>, <py_sfcl.CommandDataDefinition object at 0x05DFB7E0>) , Command count = 2937 ] 
14:40:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00270>, <py_sfcl.CommandDataDefinition object at 0x05E0F480>) , Command count = 2938 ] 
14:40:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2939 ] 
14:40:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:06: Host Frequency set to 25000 KHz
14:40:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:06: ####CSD Registe 2.0 Values####
14:40:06: CSD_STRUCTURE                                 :0x1
14:40:06: Reserv1                                       :0x0
14:40:06: Time Access 1 TAAC                            :0xe
14:40:06: Time Access 2 NSAC*100                        :0x0
14:40:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:06: Card Command Classess CCC                     :0x5b5
14:40:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:06: DSR(driver stage register)  DSR_IMP           :0x0
14:40:06: Reserv2                                       :0x0
14:40:06: Device Size C_SIZE                            :0xedc8
14:40:06: Reserv3                                       :0x0
14:40:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:06: Reserv4                                       :0x0
14:40:06: Write Speed Factor R2W_FACTOR                 :0x2
14:40:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:06: FILE_FORMAT_GRP                               :0x0
14:40:06: COPY flag                                     :0x1
14:40:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:06: File_Format                                   :0x0
14:40:06: CRC                                           :0x0
14:40:06: ####CSD Registe Values####  

14:40:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:06: [GetSCRRegisterEntry] Passed
14:40:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:06: Data_Status_After Erases          : 0
14:40:06: CPRM Security Support             : No Security
14:40:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:06: Spec. Version                     : Version 3.0X
14:40:06: Extended Security Support         : Extended_Security_Not_Supported
14:40:06: Command Support                   : COMMAND_SUPPORT
14:40:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB1B0>, <py_sfcl.CommandDataDefinition object at 0x05CEF7E0>) , Command count = 2940 ] 
14:40:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F510>, <py_sfcl.CommandDataDefinition object at 0x05E0F150>) , Command count = 2941 ] 
14:40:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:06: [ SetBusWidth(0x4) , Command count = 2942 ] 
14:40:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E000F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2943 ] 
14:40:06: Protected Area Size 0x28000
14:40:06: Bus Width           2
14:40:06: Secure Mode         0
14:40:06: Speed  Class        4
14:40:06: Perf Move           0
14:40:06: Au Size             9
14:40:06: Erase Size          15
14:40:06: Erase Timeout       1
14:40:06: Erase offset        1
14:40:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2944 ] 
14:40:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:06: Host Frequency set to 100000 KHz
14:40:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:06: ####CSD Registe 2.0 Values####
14:40:06: CSD_STRUCTURE                                 :0x1
14:40:06: Reserv1                                       :0x0
14:40:06: Time Access 1 TAAC                            :0xe
14:40:06: Time Access 2 NSAC*100                        :0x0
14:40:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:06: Card Command Classess CCC                     :0x5b5
14:40:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:07: DSR(driver stage register)  DSR_IMP           :0x0
14:40:07: Reserv2                                       :0x0
14:40:07: Device Size C_SIZE                            :0xedc8
14:40:07: Reserv3                                       :0x0
14:40:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:07: Reserv4                                       :0x0
14:40:07: Write Speed Factor R2W_FACTOR                 :0x2
14:40:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:07: FILE_FORMAT_GRP                               :0x0
14:40:07: COPY flag                                     :0x1
14:40:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:07: File_Format                                   :0x0
14:40:07: CRC                                           :0x0
14:40:07: ####CSD Registe Values####  

14:40:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00AB0>, <py_sfcl.CommandDataDefinition object at 0x05E00C00>) , Command count = 2945 ] 
14:40:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBCF0>, <py_sfcl.CommandDataDefinition object at 0x05E07F30>) , Command count = 2946 ] 
14:40:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:07: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07120>, <py_sfcl.PySEnhancedCmdData object at 0x05E07D50>, <None>, <py_sfcl.Command23 object at 0x05E07030>) , Command count = 2947 ] 
14:40:07: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:09: Host Frequency set to 25000 KHz
14:40:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEFB10>, 0x0, True) , Command count = 2948 ] 
14:40:09: [GO18_globalSetVolt]### Host voltage value is set.
14:40:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBE70>, 0x0, False) , Command count = 2949 ] 
14:40:09: [GO18_globalSetVolt]### Host voltage value is set.
14:40:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2950 ] 
14:40:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2951 ] 
14:40:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2952 ] 
14:40:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045D0>, <py_sfcl.CommandDataDefinition object at 0x05E04390>) , Command count = 2953 ] 
14:40:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB810>, <py_sfcl.CommandDataDefinition object at 0x05DFBFC0>) , Command count = 2954 ] 
14:40:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:09: [ SetCardRCA(0x1, 0xD555) , Command count = 2955 ] 
14:40:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:10: Host Frequency set to 25000 KHz
14:40:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:10: ####CSD Registe 2.0 Values####
14:40:10: CSD_STRUCTURE                                 :0x1
14:40:10: Reserv1                                       :0x0
14:40:10: Time Access 1 TAAC                            :0xe
14:40:10: Time Access 2 NSAC*100                        :0x0
14:40:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:10: Card Command Classess CCC                     :0x5b5
14:40:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:10: DSR(driver stage register)  DSR_IMP           :0x0
14:40:10: Reserv2                                       :0x0
14:40:10: Device Size C_SIZE                            :0xedc8
14:40:10: Reserv3                                       :0x0
14:40:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:10: Reserv4                                       :0x0
14:40:10: Write Speed Factor R2W_FACTOR                 :0x2
14:40:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:10: FILE_FORMAT_GRP                               :0x0
14:40:10: COPY flag                                     :0x1
14:40:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:10: File_Format                                   :0x0
14:40:10: CRC                                           :0x0
14:40:10: ####CSD Registe Values####  

14:40:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:10: [GetSCRRegisterEntry] Passed
14:40:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:10: Data_Status_After Erases          : 0
14:40:10: CPRM Security Support             : No Security
14:40:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:10: Spec. Version                     : Version 3.0X
14:40:10: Extended Security Support         : Extended_Security_Not_Supported
14:40:10: Command Support                   : COMMAND_SUPPORT
14:40:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04210>, <py_sfcl.CommandDataDefinition object at 0x05E00510>) , Command count = 2956 ] 
14:40:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBAE0>) , Command count = 2957 ] 
14:40:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:10: [ SetBusWidth(0x4) , Command count = 2958 ] 
14:40:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2959 ] 
14:40:10: Protected Area Size 0x28000
14:40:10: Bus Width           2
14:40:10: Secure Mode         0
14:40:10: Speed  Class        4
14:40:10: Perf Move           0
14:40:10: Au Size             9
14:40:10: Erase Size          15
14:40:10: Erase Timeout       1
14:40:10: Erase offset        1
14:40:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2960 ] 
14:40:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:10: Host Frequency set to 100000 KHz
14:40:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:10: ####CSD Registe 2.0 Values####
14:40:10: CSD_STRUCTURE                                 :0x1
14:40:10: Reserv1                                       :0x0
14:40:10: Time Access 1 TAAC                            :0xe
14:40:10: Time Access 2 NSAC*100                        :0x0
14:40:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:10: Card Command Classess CCC                     :0x5b5
14:40:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:10: DSR(driver stage register)  DSR_IMP           :0x0
14:40:10: Reserv2                                       :0x0
14:40:10: Device Size C_SIZE                            :0xedc8
14:40:10: Reserv3                                       :0x0
14:40:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:10: Reserv4                                       :0x0
14:40:10: Write Speed Factor R2W_FACTOR                 :0x2
14:40:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:10: FILE_FORMAT_GRP                               :0x0
14:40:10: COPY flag                                     :0x1
14:40:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:10: File_Format                                   :0x0
14:40:10: CRC                                           :0x0
14:40:10: ####CSD Registe Values####  

14:40:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04150>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 2961 ] 
14:40:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00540>, <py_sfcl.CommandDataDefinition object at 0x05E000F0>) , Command count = 2962 ] 
14:40:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E049C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E006C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E005D0>, <None>, <py_sfcl.Command23 object at 0x05E007E0>) , Command count = 2963 ] 
14:40:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:13: Host Frequency set to 25000 KHz
14:40:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB630>, 0x0, True) , Command count = 2964 ] 
14:40:13: [GO18_globalSetVolt]### Host voltage value is set.
14:40:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F6F0>, 0x0, False) , Command count = 2965 ] 
14:40:13: [GO18_globalSetVolt]### Host voltage value is set.
14:40:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2966 ] 
14:40:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2967 ] 
14:40:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2968 ] 
14:40:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B360>, <py_sfcl.CommandDataDefinition object at 0x05E0F3F0>) , Command count = 2969 ] 
14:40:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04060>, <py_sfcl.CommandDataDefinition object at 0x05E04BD0>) , Command count = 2970 ] 
14:40:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2971 ] 
14:40:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:13: Host Frequency set to 25000 KHz
14:40:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:13: ####CSD Registe 2.0 Values####
14:40:13: CSD_STRUCTURE                                 :0x1
14:40:13: Reserv1                                       :0x0
14:40:13: Time Access 1 TAAC                            :0xe
14:40:13: Time Access 2 NSAC*100                        :0x0
14:40:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:13: Card Command Classess CCC                     :0x5b5
14:40:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:13: DSR(driver stage register)  DSR_IMP           :0x0
14:40:13: Reserv2                                       :0x0
14:40:13: Device Size C_SIZE                            :0xedc8
14:40:13: Reserv3                                       :0x0
14:40:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:13: Reserv4                                       :0x0
14:40:13: Write Speed Factor R2W_FACTOR                 :0x2
14:40:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:13: FILE_FORMAT_GRP                               :0x0
14:40:13: COPY flag                                     :0x1
14:40:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:13: File_Format                                   :0x0
14:40:13: CRC                                           :0x0
14:40:13: ####CSD Registe Values####  

14:40:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:13: [GetSCRRegisterEntry] Passed
14:40:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:13: Data_Status_After Erases          : 0
14:40:13: CPRM Security Support             : No Security
14:40:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:13: Spec. Version                     : Version 3.0X
14:40:13: Extended Security Support         : Extended_Security_Not_Supported
14:40:13: Command Support                   : COMMAND_SUPPORT
14:40:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBA80>, <py_sfcl.CommandDataDefinition object at 0x05E0F750>) , Command count = 2972 ] 
14:40:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py_sfcl.CommandDataDefinition object at 0x05E0FFC0>) , Command count = 2973 ] 
14:40:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:13: [ SetBusWidth(0x4) , Command count = 2974 ] 
14:40:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2975 ] 
14:40:13: Protected Area Size 0x28000
14:40:13: Bus Width           2
14:40:13: Secure Mode         0
14:40:13: Speed  Class        4
14:40:13: Perf Move           0
14:40:13: Au Size             9
14:40:13: Erase Size          15
14:40:13: Erase Timeout       1
14:40:13: Erase offset        1
14:40:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2976 ] 
14:40:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:13: Host Frequency set to 100000 KHz
14:40:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:13: ####CSD Registe 2.0 Values####
14:40:13: CSD_STRUCTURE                                 :0x1
14:40:13: Reserv1                                       :0x0
14:40:13: Time Access 1 TAAC                            :0xe
14:40:13: Time Access 2 NSAC*100                        :0x0
14:40:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:13: Card Command Classess CCC                     :0x5b5
14:40:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:13: DSR(driver stage register)  DSR_IMP           :0x0
14:40:13: Reserv2                                       :0x0
14:40:13: Device Size C_SIZE                            :0xedc8
14:40:13: Reserv3                                       :0x0
14:40:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:13: Reserv4                                       :0x0
14:40:14: Write Speed Factor R2W_FACTOR                 :0x2
14:40:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:14: FILE_FORMAT_GRP                               :0x0
14:40:14: COPY flag                                     :0x1
14:40:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:14: File_Format                                   :0x0
14:40:14: CRC                                           :0x0
14:40:14: ####CSD Registe Values####  

14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FA80>, <py_sfcl.CommandDataDefinition object at 0x05DFB2A0>) , Command count = 2977 ] 
14:40:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FB40>, <py_sfcl.CommandDataDefinition object at 0x05E078D0>) , Command count = 2978 ] 
14:40:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E046C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00570>, <py_sfcl.PySEnhancedCmdData object at 0x05E00810>, <None>, <py_sfcl.Command23 object at 0x05E00C30>) , Command count = 2979 ] 
14:40:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:16: Host Frequency set to 25000 KHz
14:40:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FAE0>, 0x0, True) , Command count = 2980 ] 
14:40:16: [GO18_globalSetVolt]### Host voltage value is set.
14:40:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00CC0>, 0x0, False) , Command count = 2981 ] 
14:40:16: [GO18_globalSetVolt]### Host voltage value is set.
14:40:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2982 ] 
14:40:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2983 ] 
14:40:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2984 ] 
14:40:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E003F0>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 2985 ] 
14:40:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B450>, <py_sfcl.CommandDataDefinition object at 0x05E00180>) , Command count = 2986 ] 
14:40:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2987 ] 
14:40:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:17: Host Frequency set to 25000 KHz
14:40:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:17: ####CSD Registe 2.0 Values####
14:40:17: CSD_STRUCTURE                                 :0x1
14:40:17: Reserv1                                       :0x0
14:40:17: Time Access 1 TAAC                            :0xe
14:40:17: Time Access 2 NSAC*100                        :0x0
14:40:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:17: Card Command Classess CCC                     :0x5b5
14:40:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:17: DSR(driver stage register)  DSR_IMP           :0x0
14:40:17: Reserv2                                       :0x0
14:40:17: Device Size C_SIZE                            :0xedc8
14:40:17: Reserv3                                       :0x0
14:40:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:17: Reserv4                                       :0x0
14:40:17: Write Speed Factor R2W_FACTOR                 :0x2
14:40:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:17: FILE_FORMAT_GRP                               :0x0
14:40:17: COPY flag                                     :0x1
14:40:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:17: File_Format                                   :0x0
14:40:17: CRC                                           :0x0
14:40:17: ####CSD Registe Values####  

14:40:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:17: [GetSCRRegisterEntry] Passed
14:40:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:17: Data_Status_After Erases          : 0
14:40:17: CPRM Security Support             : No Security
14:40:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:17: Spec. Version                     : Version 3.0X
14:40:17: Extended Security Support         : Extended_Security_Not_Supported
14:40:17: Command Support                   : COMMAND_SUPPORT
14:40:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F30>, <py_sfcl.CommandDataDefinition object at 0x05E04A50>) , Command count = 2988 ] 
14:40:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00840>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 2989 ] 
14:40:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:17: [ SetBusWidth(0x4) , Command count = 2990 ] 
14:40:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2991 ] 
14:40:17: Protected Area Size 0x28000
14:40:17: Bus Width           2
14:40:17: Secure Mode         0
14:40:17: Speed  Class        4
14:40:17: Perf Move           0
14:40:17: Au Size             9
14:40:17: Erase Size          15
14:40:17: Erase Timeout       1
14:40:17: Erase offset        1
14:40:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2992 ] 
14:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:17: Host Frequency set to 100000 KHz
14:40:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:17: ####CSD Registe 2.0 Values####
14:40:17: CSD_STRUCTURE                                 :0x1
14:40:17: Reserv1                                       :0x0
14:40:17: Time Access 1 TAAC                            :0xe
14:40:17: Time Access 2 NSAC*100                        :0x0
14:40:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:17: Card Command Classess CCC                     :0x5b5
14:40:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:17: DSR(driver stage register)  DSR_IMP           :0x0
14:40:17: Reserv2                                       :0x0
14:40:17: Device Size C_SIZE                            :0xedc8
14:40:17: Reserv3                                       :0x0
14:40:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:17: Reserv4                                       :0x0
14:40:17: Write Speed Factor R2W_FACTOR                 :0x2
14:40:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:17: FILE_FORMAT_GRP                               :0x0
14:40:17: COPY flag                                     :0x1
14:40:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:17: File_Format                                   :0x0
14:40:17: CRC                                           :0x0
14:40:17: ####CSD Registe Values####  

14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B70>, <py_sfcl.CommandDataDefinition object at 0x05E00600>) , Command count = 2993 ] 
14:40:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00900>, <py_sfcl.CommandDataDefinition object at 0x05E07720>) , Command count = 2994 ] 
14:40:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:17: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04750>, <py_sfcl.PySEnhancedCmdData object at 0x05E045A0>, <None>, <py_sfcl.Command23 object at 0x05E00C90>) , Command count = 2995 ] 
14:40:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:20: Host Frequency set to 25000 KHz
14:40:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04A20>, 0x0, True) , Command count = 2996 ] 
14:40:20: [GO18_globalSetVolt]### Host voltage value is set.
14:40:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04900>, 0x0, False) , Command count = 2997 ] 
14:40:20: [GO18_globalSetVolt]### Host voltage value is set.
14:40:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2998 ] 
14:40:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2999 ] 
14:40:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3000 ] 
14:40:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2D0>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 3001 ] 
14:40:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E40>, <py_sfcl.CommandDataDefinition object at 0x05E04180>) , Command count = 3002 ] 
14:40:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:20: [ SetCardRCA(0x1, 0xD555) , Command count = 3003 ] 
14:40:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:20: Host Frequency set to 25000 KHz
14:40:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:20: ####CSD Registe 2.0 Values####
14:40:20: CSD_STRUCTURE                                 :0x1
14:40:20: Reserv1                                       :0x0
14:40:20: Time Access 1 TAAC                            :0xe
14:40:20: Time Access 2 NSAC*100                        :0x0
14:40:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:20: Card Command Classess CCC                     :0x5b5
14:40:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:20: DSR(driver stage register)  DSR_IMP           :0x0
14:40:20: Reserv2                                       :0x0
14:40:20: Device Size C_SIZE                            :0xedc8
14:40:20: Reserv3                                       :0x0
14:40:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:20: Reserv4                                       :0x0
14:40:20: Write Speed Factor R2W_FACTOR                 :0x2
14:40:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:20: FILE_FORMAT_GRP                               :0x0
14:40:20: COPY flag                                     :0x1
14:40:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:20: File_Format                                   :0x0
14:40:20: CRC                                           :0x0
14:40:20: ####CSD Registe Values####  

14:40:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:20: [GetSCRRegisterEntry] Passed
14:40:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:20: Data_Status_After Erases          : 0
14:40:20: CPRM Security Support             : No Security
14:40:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:20: Spec. Version                     : Version 3.0X
14:40:20: Extended Security Support         : Extended_Security_Not_Supported
14:40:20: Command Support                   : COMMAND_SUPPORT
14:40:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B10>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 3004 ] 
14:40:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00480>, <py_sfcl.CommandDataDefinition object at 0x05E0F930>) , Command count = 3005 ] 
14:40:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:20: [ SetBusWidth(0x4) , Command count = 3006 ] 
14:40:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3007 ] 
14:40:20: Protected Area Size 0x28000
14:40:20: Bus Width           2
14:40:20: Secure Mode         0
14:40:20: Speed  Class        4
14:40:20: Perf Move           0
14:40:20: Au Size             9
14:40:20: Erase Size          15
14:40:20: Erase Timeout       1
14:40:20: Erase offset        1
14:40:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3008 ] 
14:40:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:20: Host Frequency set to 100000 KHz
14:40:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:20: ####CSD Registe 2.0 Values####
14:40:20: CSD_STRUCTURE                                 :0x1
14:40:20: Reserv1                                       :0x0
14:40:20: Time Access 1 TAAC                            :0xe
14:40:20: Time Access 2 NSAC*100                        :0x0
14:40:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:20: Card Command Classess CCC                     :0x5b5
14:40:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:20: DSR(driver stage register)  DSR_IMP           :0x0
14:40:20: Reserv2                                       :0x0
14:40:20: Device Size C_SIZE                            :0xedc8
14:40:20: Reserv3                                       :0x0
14:40:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:20: Reserv4                                       :0x0
14:40:20: Write Speed Factor R2W_FACTOR                 :0x2
14:40:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:20: FILE_FORMAT_GRP                               :0x0
14:40:20: COPY flag                                     :0x1
14:40:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:20: File_Format                                   :0x0
14:40:20: CRC                                           :0x0
14:40:20: ####CSD Registe Values####  

14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F840>, <py_sfcl.CommandDataDefinition object at 0x05E0B090>) , Command count = 3009 ] 
14:40:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E009F0>, <py_sfcl.CommandDataDefinition object at 0x05E04870>) , Command count = 3010 ] 
14:40:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04270>, <py_sfcl.PySEnhancedCmdData object at 0x05E04720>, <None>, <py_sfcl.Command23 object at 0x05E04840>) , Command count = 3011 ] 
14:40:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:23: Host Frequency set to 25000 KHz
14:40:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00ED0>, 0x0, True) , Command count = 3012 ] 
14:40:23: [GO18_globalSetVolt]### Host voltage value is set.
14:40:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00210>, 0x0, False) , Command count = 3013 ] 
14:40:23: [GO18_globalSetVolt]### Host voltage value is set.
14:40:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3014 ] 
14:40:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3015 ] 
14:40:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3016 ] 
14:40:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F300>, <py_sfcl.CommandDataDefinition object at 0x05E07B70>) , Command count = 3017 ] 
14:40:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DB0>, <py_sfcl.CommandDataDefinition object at 0x05E07C00>) , Command count = 3018 ] 
14:40:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:23: [ SetCardRCA(0x1, 0xD555) , Command count = 3019 ] 
14:40:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:23: Host Frequency set to 25000 KHz
14:40:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:23: ####CSD Registe 2.0 Values####
14:40:23: CSD_STRUCTURE                                 :0x1
14:40:23: Reserv1                                       :0x0
14:40:23: Time Access 1 TAAC                            :0xe
14:40:23: Time Access 2 NSAC*100                        :0x0
14:40:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:23: Card Command Classess CCC                     :0x5b5
14:40:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:23: DSR(driver stage register)  DSR_IMP           :0x0
14:40:23: Reserv2                                       :0x0
14:40:23: Device Size C_SIZE                            :0xedc8
14:40:23: Reserv3                                       :0x0
14:40:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:23: Reserv4                                       :0x0
14:40:23: Write Speed Factor R2W_FACTOR                 :0x2
14:40:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:23: FILE_FORMAT_GRP                               :0x0
14:40:23: COPY flag                                     :0x1
14:40:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:23: File_Format                                   :0x0
14:40:23: CRC                                           :0x0
14:40:23: ####CSD Registe Values####  

14:40:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:23: [GetSCRRegisterEntry] Passed
14:40:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:23: Data_Status_After Erases          : 0
14:40:23: CPRM Security Support             : No Security
14:40:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:23: Spec. Version                     : Version 3.0X
14:40:23: Extended Security Support         : Extended_Security_Not_Supported
14:40:23: Command Support                   : COMMAND_SUPPORT
14:40:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FAB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 3020 ] 
14:40:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E04B40>) , Command count = 3021 ] 
14:40:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:23: [ SetBusWidth(0x4) , Command count = 3022 ] 
14:40:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BA20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3023 ] 
14:40:23: Protected Area Size 0x28000
14:40:23: Bus Width           2
14:40:23: Secure Mode         0
14:40:23: Speed  Class        4
14:40:23: Perf Move           0
14:40:23: Au Size             9
14:40:23: Erase Size          15
14:40:23: Erase Timeout       1
14:40:23: Erase offset        1
14:40:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3024 ] 
14:40:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:23: Host Frequency set to 100000 KHz
14:40:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:23: ####CSD Registe 2.0 Values####
14:40:23: CSD_STRUCTURE                                 :0x1
14:40:23: Reserv1                                       :0x0
14:40:23: Time Access 1 TAAC                            :0xe
14:40:24: Time Access 2 NSAC*100                        :0x0
14:40:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:24: Card Command Classess CCC                     :0x5b5
14:40:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:24: DSR(driver stage register)  DSR_IMP           :0x0
14:40:24: Reserv2                                       :0x0
14:40:24: Device Size C_SIZE                            :0xedc8
14:40:24: Reserv3                                       :0x0
14:40:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:24: Reserv4                                       :0x0
14:40:24: Write Speed Factor R2W_FACTOR                 :0x2
14:40:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:24: FILE_FORMAT_GRP                               :0x0
14:40:24: COPY flag                                     :0x1
14:40:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:24: File_Format                                   :0x0
14:40:24: CRC                                           :0x0
14:40:24: ####CSD Registe Values####  

14:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04960>, <py_sfcl.CommandDataDefinition object at 0x05E04F00>) , Command count = 3025 ] 
14:40:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B10>, <py_sfcl.CommandDataDefinition object at 0x05E079F0>) , Command count = 3026 ] 
14:40:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E077E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E10180>, <None>, <py_sfcl.Command23 object at 0x05E04030>) , Command count = 3027 ] 
14:40:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:26: Host Frequency set to 25000 KHz
14:40:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5180>, 0x0, True) , Command count = 3028 ] 
14:40:26: [GO18_globalSetVolt]### Host voltage value is set.
14:40:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FDB0>, 0x0, False) , Command count = 3029 ] 
14:40:26: [GO18_globalSetVolt]### Host voltage value is set.
14:40:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3030 ] 
14:40:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3031 ] 
14:40:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3032 ] 
14:40:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07C30>, <py_sfcl.CommandDataDefinition object at 0x05E079C0>) , Command count = 3033 ] 
14:40:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F30>, <py_sfcl.CommandDataDefinition object at 0x05E075D0>) , Command count = 3034 ] 
14:40:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3035 ] 
14:40:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:27: Host Frequency set to 25000 KHz
14:40:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:27: ####CSD Registe 2.0 Values####
14:40:27: CSD_STRUCTURE                                 :0x1
14:40:27: Reserv1                                       :0x0
14:40:27: Time Access 1 TAAC                            :0xe
14:40:27: Time Access 2 NSAC*100                        :0x0
14:40:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:27: Card Command Classess CCC                     :0x5b5
14:40:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:27: DSR(driver stage register)  DSR_IMP           :0x0
14:40:27: Reserv2                                       :0x0
14:40:27: Device Size C_SIZE                            :0xedc8
14:40:27: Reserv3                                       :0x0
14:40:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:27: Reserv4                                       :0x0
14:40:27: Write Speed Factor R2W_FACTOR                 :0x2
14:40:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:27: FILE_FORMAT_GRP                               :0x0
14:40:27: COPY flag                                     :0x1
14:40:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:27: File_Format                                   :0x0
14:40:27: CRC                                           :0x0
14:40:27: ####CSD Registe Values####  

14:40:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:27: [GetSCRRegisterEntry] Passed
14:40:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:27: Data_Status_After Erases          : 0
14:40:27: CPRM Security Support             : No Security
14:40:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:27: Spec. Version                     : Version 3.0X
14:40:27: Extended Security Support         : Extended_Security_Not_Supported
14:40:27: Command Support                   : COMMAND_SUPPORT
14:40:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E07E40>) , Command count = 3036 ] 
14:40:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E07210>) , Command count = 3037 ] 
14:40:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:27: [ SetBusWidth(0x4) , Command count = 3038 ] 
14:40:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3039 ] 
14:40:27: Protected Area Size 0x28000
14:40:27: Bus Width           2
14:40:27: Secure Mode         0
14:40:27: Speed  Class        4
14:40:27: Perf Move           0
14:40:27: Au Size             9
14:40:27: Erase Size          15
14:40:27: Erase Timeout       1
14:40:27: Erase offset        1
14:40:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3040 ] 
14:40:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:27: Host Frequency set to 100000 KHz
14:40:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:27: ####CSD Registe 2.0 Values####
14:40:27: CSD_STRUCTURE                                 :0x1
14:40:27: Reserv1                                       :0x0
14:40:27: Time Access 1 TAAC                            :0xe
14:40:27: Time Access 2 NSAC*100                        :0x0
14:40:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:27: Card Command Classess CCC                     :0x5b5
14:40:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:27: DSR(driver stage register)  DSR_IMP           :0x0
14:40:27: Reserv2                                       :0x0
14:40:27: Device Size C_SIZE                            :0xedc8
14:40:27: Reserv3                                       :0x0
14:40:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:27: Reserv4                                       :0x0
14:40:27: Write Speed Factor R2W_FACTOR                 :0x2
14:40:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:27: FILE_FORMAT_GRP                               :0x0
14:40:27: COPY flag                                     :0x1
14:40:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:27: File_Format                                   :0x0
14:40:27: CRC                                           :0x0
14:40:27: ####CSD Registe Values####  

14:40:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E074E0>) , Command count = 3041 ] 
14:40:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04600>, <py_sfcl.CommandDataDefinition object at 0x05E0BA20>) , Command count = 3042 ] 
14:40:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:28: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B900>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B0C0>, <None>, <py_sfcl.Command23 object at 0x05E0B1E0>) , Command count = 3043 ] 
14:40:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:30: Host Frequency set to 25000 KHz
14:40:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04E10>, 0x0, True) , Command count = 3044 ] 
14:40:30: [GO18_globalSetVolt]### Host voltage value is set.
14:40:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9A80>, 0x0, False) , Command count = 3045 ] 
14:40:30: [GO18_globalSetVolt]### Host voltage value is set.
14:40:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3046 ] 
14:40:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3047 ] 
14:40:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3048 ] 
14:40:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F240>, <py_sfcl.CommandDataDefinition object at 0x05E07DE0>) , Command count = 3049 ] 
14:40:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB8D0>, <py_sfcl.CommandDataDefinition object at 0x05E0B270>) , Command count = 3050 ] 
14:40:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:30: [ SetCardRCA(0x1, 0xD555) , Command count = 3051 ] 
14:40:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:30: Host Frequency set to 25000 KHz
14:40:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:30: ####CSD Registe 2.0 Values####
14:40:30: CSD_STRUCTURE                                 :0x1
14:40:30: Reserv1                                       :0x0
14:40:30: Time Access 1 TAAC                            :0xe
14:40:30: Time Access 2 NSAC*100                        :0x0
14:40:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:30: Card Command Classess CCC                     :0x5b5
14:40:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:30: DSR(driver stage register)  DSR_IMP           :0x0
14:40:30: Reserv2                                       :0x0
14:40:30: Device Size C_SIZE                            :0xedc8
14:40:30: Reserv3                                       :0x0
14:40:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:30: Reserv4                                       :0x0
14:40:30: Write Speed Factor R2W_FACTOR                 :0x2
14:40:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:30: FILE_FORMAT_GRP                               :0x0
14:40:30: COPY flag                                     :0x1
14:40:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:30: File_Format                                   :0x0
14:40:30: CRC                                           :0x0
14:40:30: ####CSD Registe Values####  

14:40:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:30: [GetSCRRegisterEntry] Passed
14:40:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:30: Data_Status_After Erases          : 0
14:40:30: CPRM Security Support             : No Security
14:40:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:30: Spec. Version                     : Version 3.0X
14:40:30: Extended Security Support         : Extended_Security_Not_Supported
14:40:30: Command Support                   : COMMAND_SUPPORT
14:40:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F870>, <py_sfcl.CommandDataDefinition object at 0x05DFBED0>) , Command count = 3052 ] 
14:40:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B10>, <py_sfcl.CommandDataDefinition object at 0x05E0BD20>) , Command count = 3053 ] 
14:40:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:30: [ SetBusWidth(0x4) , Command count = 3054 ] 
14:40:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3055 ] 
14:40:30: Protected Area Size 0x28000
14:40:30: Bus Width           2
14:40:30: Secure Mode         0
14:40:30: Speed  Class        4
14:40:30: Perf Move           0
14:40:30: Au Size             9
14:40:30: Erase Size          15
14:40:30: Erase Timeout       1
14:40:30: Erase offset        1
14:40:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3056 ] 
14:40:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:30: Host Frequency set to 100000 KHz
14:40:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:30: ####CSD Registe 2.0 Values####
14:40:30: CSD_STRUCTURE                                 :0x1
14:40:30: Reserv1                                       :0x0
14:40:30: Time Access 1 TAAC                            :0xe
14:40:30: Time Access 2 NSAC*100                        :0x0
14:40:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:30: Card Command Classess CCC                     :0x5b5
14:40:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:30: DSR(driver stage register)  DSR_IMP           :0x0
14:40:30: Reserv2                                       :0x0
14:40:30: Device Size C_SIZE                            :0xedc8
14:40:30: Reserv3                                       :0x0
14:40:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:30: Reserv4                                       :0x0
14:40:30: Write Speed Factor R2W_FACTOR                 :0x2
14:40:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:30: FILE_FORMAT_GRP                               :0x0
14:40:30: COPY flag                                     :0x1
14:40:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:31: File_Format                                   :0x0
14:40:31: CRC                                           :0x0
14:40:31: ####CSD Registe Values####  

14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A50>, <py_sfcl.CommandDataDefinition object at 0x05DF5AE0>) , Command count = 3057 ] 
14:40:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04630>, <py_sfcl.CommandDataDefinition object at 0x05E0BE10>) , Command count = 3058 ] 
14:40:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B300>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B1B0>, <None>, <py_sfcl.Command23 object at 0x05E0BA80>) , Command count = 3059 ] 
14:40:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:33: Host Frequency set to 25000 KHz
14:40:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FE10>, 0x0, True) , Command count = 3060 ] 
14:40:33: [GO18_globalSetVolt]### Host voltage value is set.
14:40:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F720>, 0x0, False) , Command count = 3061 ] 
14:40:33: [GO18_globalSetVolt]### Host voltage value is set.
14:40:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3062 ] 
14:40:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3063 ] 
14:40:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3064 ] 
14:40:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B390>, <py_sfcl.CommandDataDefinition object at 0x05E0BF60>) , Command count = 3065 ] 
14:40:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B8A0>) , Command count = 3066 ] 
14:40:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3067 ] 
14:40:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:33: Host Frequency set to 25000 KHz
14:40:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:33: ####CSD Registe 2.0 Values####
14:40:33: CSD_STRUCTURE                                 :0x1
14:40:33: Reserv1                                       :0x0
14:40:33: Time Access 1 TAAC                            :0xe
14:40:33: Time Access 2 NSAC*100                        :0x0
14:40:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:33: Card Command Classess CCC                     :0x5b5
14:40:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:33: DSR(driver stage register)  DSR_IMP           :0x0
14:40:33: Reserv2                                       :0x0
14:40:33: Device Size C_SIZE                            :0xedc8
14:40:33: Reserv3                                       :0x0
14:40:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:33: Reserv4                                       :0x0
14:40:33: Write Speed Factor R2W_FACTOR                 :0x2
14:40:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:33: FILE_FORMAT_GRP                               :0x0
14:40:33: COPY flag                                     :0x1
14:40:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:33: File_Format                                   :0x0
14:40:33: CRC                                           :0x0
14:40:33: ####CSD Registe Values####  

14:40:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:33: [GetSCRRegisterEntry] Passed
14:40:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:33: Data_Status_After Erases          : 0
14:40:33: CPRM Security Support             : No Security
14:40:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:33: Spec. Version                     : Version 3.0X
14:40:33: Extended Security Support         : Extended_Security_Not_Supported
14:40:33: Command Support                   : COMMAND_SUPPORT
14:40:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F780>, <py_sfcl.CommandDataDefinition object at 0x05E0B9C0>) , Command count = 3068 ] 
14:40:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07420>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 3069 ] 
14:40:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:33: [ SetBusWidth(0x4) , Command count = 3070 ] 
14:40:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3071 ] 
14:40:34: Protected Area Size 0x28000
14:40:34: Bus Width           2
14:40:34: Secure Mode         0
14:40:34: Speed  Class        4
14:40:34: Perf Move           0
14:40:34: Au Size             9
14:40:34: Erase Size          15
14:40:34: Erase Timeout       1
14:40:34: Erase offset        1
14:40:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3072 ] 
14:40:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:34: Host Frequency set to 100000 KHz
14:40:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:34: ####CSD Registe 2.0 Values####
14:40:34: CSD_STRUCTURE                                 :0x1
14:40:34: Reserv1                                       :0x0
14:40:34: Time Access 1 TAAC                            :0xe
14:40:34: Time Access 2 NSAC*100                        :0x0
14:40:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:34: Card Command Classess CCC                     :0x5b5
14:40:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:34: DSR(driver stage register)  DSR_IMP           :0x0
14:40:34: Reserv2                                       :0x0
14:40:34: Device Size C_SIZE                            :0xedc8
14:40:34: Reserv3                                       :0x0
14:40:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:34: Reserv4                                       :0x0
14:40:34: Write Speed Factor R2W_FACTOR                 :0x2
14:40:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:34: FILE_FORMAT_GRP                               :0x0
14:40:34: COPY flag                                     :0x1
14:40:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:34: File_Format                                   :0x0
14:40:34: CRC                                           :0x0
14:40:34: ####CSD Registe Values####  

14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07360>, <py_sfcl.CommandDataDefinition object at 0x05E0B210>) , Command count = 3073 ] 
14:40:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3C0>) , Command count = 3074 ] 
14:40:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B8D0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B7E0>, <None>, <py_sfcl.Command23 object at 0x05E0B0F0>) , Command count = 3075 ] 
14:40:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:36: Host Frequency set to 25000 KHz
14:40:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B750>, 0x0, True) , Command count = 3076 ] 
14:40:36: [GO18_globalSetVolt]### Host voltage value is set.
14:40:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B420>, 0x0, False) , Command count = 3077 ] 
14:40:37: [GO18_globalSetVolt]### Host voltage value is set.
14:40:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3078 ] 
14:40:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3079 ] 
14:40:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3080 ] 
14:40:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E07840>) , Command count = 3081 ] 
14:40:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E07A20>) , Command count = 3082 ] 
14:40:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3083 ] 
14:40:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:37: Host Frequency set to 25000 KHz
14:40:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:37: ####CSD Registe 2.0 Values####
14:40:37: CSD_STRUCTURE                                 :0x1
14:40:37: Reserv1                                       :0x0
14:40:37: Time Access 1 TAAC                            :0xe
14:40:37: Time Access 2 NSAC*100                        :0x0
14:40:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:37: Card Command Classess CCC                     :0x5b5
14:40:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:37: DSR(driver stage register)  DSR_IMP           :0x0
14:40:37: Reserv2                                       :0x0
14:40:37: Device Size C_SIZE                            :0xedc8
14:40:37: Reserv3                                       :0x0
14:40:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:37: Reserv4                                       :0x0
14:40:37: Write Speed Factor R2W_FACTOR                 :0x2
14:40:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:37: FILE_FORMAT_GRP                               :0x0
14:40:37: COPY flag                                     :0x1
14:40:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:37: File_Format                                   :0x0
14:40:37: CRC                                           :0x0
14:40:37: ####CSD Registe Values####  

14:40:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:37: [GetSCRRegisterEntry] Passed
14:40:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:37: Data_Status_After Erases          : 0
14:40:37: CPRM Security Support             : No Security
14:40:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:37: Spec. Version                     : Version 3.0X
14:40:37: Extended Security Support         : Extended_Security_Not_Supported
14:40:37: Command Support                   : COMMAND_SUPPORT
14:40:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F990>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 3084 ] 
14:40:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E07F60>) , Command count = 3085 ] 
14:40:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:37: [ SetBusWidth(0x4) , Command count = 3086 ] 
14:40:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E047E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3087 ] 
14:40:37: Protected Area Size 0x28000
14:40:37: Bus Width           2
14:40:37: Secure Mode         0
14:40:37: Speed  Class        4
14:40:37: Perf Move           0
14:40:37: Au Size             9
14:40:37: Erase Size          15
14:40:37: Erase Timeout       1
14:40:37: Erase offset        1
14:40:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3088 ] 
14:40:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:37: Host Frequency set to 100000 KHz
14:40:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:37: ####CSD Registe 2.0 Values####
14:40:37: CSD_STRUCTURE                                 :0x1
14:40:37: Reserv1                                       :0x0
14:40:37: Time Access 1 TAAC                            :0xe
14:40:37: Time Access 2 NSAC*100                        :0x0
14:40:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:37: Card Command Classess CCC                     :0x5b5
14:40:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:37: DSR(driver stage register)  DSR_IMP           :0x0
14:40:37: Reserv2                                       :0x0
14:40:37: Device Size C_SIZE                            :0xedc8
14:40:37: Reserv3                                       :0x0
14:40:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:37: Reserv4                                       :0x0
14:40:37: Write Speed Factor R2W_FACTOR                 :0x2
14:40:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:37: FILE_FORMAT_GRP                               :0x0
14:40:37: COPY flag                                     :0x1
14:40:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:37: File_Format                                   :0x0
14:40:37: CRC                                           :0x0
14:40:37: ####CSD Registe Values####  

14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052177E0>, <py_sfcl.CommandDataDefinition object at 0x05E07330>) , Command count = 3089 ] 
14:40:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F9C0>, <py_sfcl.CommandDataDefinition object at 0x05E073C0>) , Command count = 3090 ] 
14:40:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07FC0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B840>, <None>, <py_sfcl.Command23 object at 0x05E0B7B0>) , Command count = 3091 ] 
14:40:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:40: Host Frequency set to 25000 KHz
14:40:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526DED0>, 0x0, True) , Command count = 3092 ] 
14:40:40: [GO18_globalSetVolt]### Host voltage value is set.
14:40:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF4E0>, 0x0, False) , Command count = 3093 ] 
14:40:40: [GO18_globalSetVolt]### Host voltage value is set.
14:40:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3094 ] 
14:40:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3095 ] 
14:40:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3096 ] 
14:40:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E044B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 3097 ] 
14:40:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05281CC0>) , Command count = 3098 ] 
14:40:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3099 ] 
14:40:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:40: Host Frequency set to 25000 KHz
14:40:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:40: ####CSD Registe 2.0 Values####
14:40:40: CSD_STRUCTURE                                 :0x1
14:40:40: Reserv1                                       :0x0
14:40:40: Time Access 1 TAAC                            :0xe
14:40:40: Time Access 2 NSAC*100                        :0x0
14:40:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:40: Card Command Classess CCC                     :0x5b5
14:40:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:40: DSR(driver stage register)  DSR_IMP           :0x0
14:40:40: Reserv2                                       :0x0
14:40:40: Device Size C_SIZE                            :0xedc8
14:40:40: Reserv3                                       :0x0
14:40:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:40: Reserv4                                       :0x0
14:40:40: Write Speed Factor R2W_FACTOR                 :0x2
14:40:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:40: FILE_FORMAT_GRP                               :0x0
14:40:40: COPY flag                                     :0x1
14:40:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:40: File_Format                                   :0x0
14:40:40: CRC                                           :0x0
14:40:40: ####CSD Registe Values####  

14:40:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:40: [GetSCRRegisterEntry] Passed
14:40:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:40: Data_Status_After Erases          : 0
14:40:40: CPRM Security Support             : No Security
14:40:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:40: Spec. Version                     : Version 3.0X
14:40:40: Extended Security Support         : Extended_Security_Not_Supported
14:40:40: Command Support                   : COMMAND_SUPPORT
14:40:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9BA0>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 3100 ] 
14:40:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99C0>, <py_sfcl.CommandDataDefinition object at 0x0526FC30>) , Command count = 3101 ] 
14:40:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:40: [ SetBusWidth(0x4) , Command count = 3102 ] 
14:40:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3103 ] 
14:40:40: Protected Area Size 0x28000
14:40:40: Bus Width           2
14:40:40: Secure Mode         0
14:40:40: Speed  Class        4
14:40:40: Perf Move           0
14:40:40: Au Size             9
14:40:40: Erase Size          15
14:40:40: Erase Timeout       1
14:40:40: Erase offset        1
14:40:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3104 ] 
14:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:40: Host Frequency set to 100000 KHz
14:40:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:40: ####CSD Registe 2.0 Values####
14:40:40: CSD_STRUCTURE                                 :0x1
14:40:40: Reserv1                                       :0x0
14:40:40: Time Access 1 TAAC                            :0xe
14:40:41: Time Access 2 NSAC*100                        :0x0
14:40:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:41: Card Command Classess CCC                     :0x5b5
14:40:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:41: DSR(driver stage register)  DSR_IMP           :0x0
14:40:41: Reserv2                                       :0x0
14:40:41: Device Size C_SIZE                            :0xedc8
14:40:41: Reserv3                                       :0x0
14:40:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:41: Reserv4                                       :0x0
14:40:41: Write Speed Factor R2W_FACTOR                 :0x2
14:40:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:41: FILE_FORMAT_GRP                               :0x0
14:40:41: COPY flag                                     :0x1
14:40:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:41: File_Format                                   :0x0
14:40:41: CRC                                           :0x0
14:40:41: ####CSD Registe Values####  

14:40:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FEA0>, <py_sfcl.CommandDataDefinition object at 0x0526FC60>) , Command count = 3105 ] 
14:40:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x05E07390>) , Command count = 3106 ] 
14:40:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BBA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B480>, <None>, <py_sfcl.Command23 object at 0x05E0BDB0>) , Command count = 3107 ] 
14:40:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:43: Host Frequency set to 25000 KHz
14:40:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FF60>, 0x0, True) , Command count = 3108 ] 
14:40:43: [GO18_globalSetVolt]### Host voltage value is set.
14:40:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE97B0>, 0x0, False) , Command count = 3109 ] 
14:40:43: [GO18_globalSetVolt]### Host voltage value is set.
14:40:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3110 ] 
14:40:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3111 ] 
14:40:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3112 ] 
14:40:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF30>, <py_sfcl.CommandDataDefinition object at 0x05281F90>) , Command count = 3113 ] 
14:40:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04540>, <py_sfcl.CommandDataDefinition object at 0x05E0B870>) , Command count = 3114 ] 
14:40:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3115 ] 
14:40:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:44: Host Frequency set to 25000 KHz
14:40:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:44: ####CSD Registe 2.0 Values####
14:40:44: CSD_STRUCTURE                                 :0x1
14:40:44: Reserv1                                       :0x0
14:40:44: Time Access 1 TAAC                            :0xe
14:40:44: Time Access 2 NSAC*100                        :0x0
14:40:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:44: Card Command Classess CCC                     :0x5b5
14:40:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:44: DSR(driver stage register)  DSR_IMP           :0x0
14:40:44: Reserv2                                       :0x0
14:40:44: Device Size C_SIZE                            :0xedc8
14:40:44: Reserv3                                       :0x0
14:40:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:44: Reserv4                                       :0x0
14:40:44: Write Speed Factor R2W_FACTOR                 :0x2
14:40:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:44: FILE_FORMAT_GRP                               :0x0
14:40:44: COPY flag                                     :0x1
14:40:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:44: File_Format                                   :0x0
14:40:44: CRC                                           :0x0
14:40:44: ####CSD Registe Values####  

14:40:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:44: [GetSCRRegisterEntry] Passed
14:40:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:44: Data_Status_After Erases          : 0
14:40:44: CPRM Security Support             : No Security
14:40:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:44: Spec. Version                     : Version 3.0X
14:40:44: Extended Security Support         : Extended_Security_Not_Supported
14:40:44: Command Support                   : COMMAND_SUPPORT
14:40:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 3116 ] 
14:40:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB10>, <py_sfcl.CommandDataDefinition object at 0x05E0BD50>) , Command count = 3117 ] 
14:40:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:44: [ SetBusWidth(0x4) , Command count = 3118 ] 
14:40:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05CEF660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3119 ] 
14:40:44: Protected Area Size 0x28000
14:40:44: Bus Width           2
14:40:44: Secure Mode         0
14:40:44: Speed  Class        4
14:40:44: Perf Move           0
14:40:44: Au Size             9
14:40:44: Erase Size          15
14:40:44: Erase Timeout       1
14:40:44: Erase offset        1
14:40:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3120 ] 
14:40:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:44: Host Frequency set to 100000 KHz
14:40:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:44: ####CSD Registe 2.0 Values####
14:40:44: CSD_STRUCTURE                                 :0x1
14:40:44: Reserv1                                       :0x0
14:40:44: Time Access 1 TAAC                            :0xe
14:40:44: Time Access 2 NSAC*100                        :0x0
14:40:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:44: Card Command Classess CCC                     :0x5b5
14:40:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:44: DSR(driver stage register)  DSR_IMP           :0x0
14:40:44: Reserv2                                       :0x0
14:40:44: Device Size C_SIZE                            :0xedc8
14:40:44: Reserv3                                       :0x0
14:40:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:44: Reserv4                                       :0x0
14:40:44: Write Speed Factor R2W_FACTOR                 :0x2
14:40:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:44: FILE_FORMAT_GRP                               :0x0
14:40:44: COPY flag                                     :0x1
14:40:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:44: File_Format                                   :0x0
14:40:44: CRC                                           :0x0
14:40:44: ####CSD Registe Values####  

14:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00630>, <py_sfcl.CommandDataDefinition object at 0x05E0F120>) , Command count = 3121 ] 
14:40:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00660>, <py_sfcl.CommandDataDefinition object at 0x05E073F0>) , Command count = 3122 ] 
14:40:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5150>, <py_sfcl.PySEnhancedCmdData object at 0x05DF54E0>, <None>, <py_sfcl.Command23 object at 0x05E0BC00>) , Command count = 3123 ] 
14:40:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:47: Host Frequency set to 25000 KHz
14:40:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F60>, 0x0, True) , Command count = 3124 ] 
14:40:47: [GO18_globalSetVolt]### Host voltage value is set.
14:40:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9750>, 0x0, False) , Command count = 3125 ] 
14:40:47: [GO18_globalSetVolt]### Host voltage value is set.
14:40:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3126 ] 
14:40:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3127 ] 
14:40:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3128 ] 
14:40:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9CF0>, <py_sfcl.CommandDataDefinition object at 0x05DE9ED0>) , Command count = 3129 ] 
14:40:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BC90>, <py_sfcl.CommandDataDefinition object at 0x05E0F270>) , Command count = 3130 ] 
14:40:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3131 ] 
14:40:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:47: Host Frequency set to 25000 KHz
14:40:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:47: ####CSD Registe 2.0 Values####
14:40:47: CSD_STRUCTURE                                 :0x1
14:40:47: Reserv1                                       :0x0
14:40:47: Time Access 1 TAAC                            :0xe
14:40:47: Time Access 2 NSAC*100                        :0x0
14:40:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:47: Card Command Classess CCC                     :0x5b5
14:40:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:47: DSR(driver stage register)  DSR_IMP           :0x0
14:40:47: Reserv2                                       :0x0
14:40:47: Device Size C_SIZE                            :0xedc8
14:40:47: Reserv3                                       :0x0
14:40:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:47: Reserv4                                       :0x0
14:40:47: Write Speed Factor R2W_FACTOR                 :0x2
14:40:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:47: FILE_FORMAT_GRP                               :0x0
14:40:47: COPY flag                                     :0x1
14:40:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:47: File_Format                                   :0x0
14:40:47: CRC                                           :0x0
14:40:47: ####CSD Registe Values####  

14:40:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:47: [GetSCRRegisterEntry] Passed
14:40:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:47: Data_Status_After Erases          : 0
14:40:47: CPRM Security Support             : No Security
14:40:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:47: Spec. Version                     : Version 3.0X
14:40:47: Extended Security Support         : Extended_Security_Not_Supported
14:40:47: Command Support                   : COMMAND_SUPPORT
14:40:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05CEF2D0>) , Command count = 3132 ] 
14:40:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 3133 ] 
14:40:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:47: [ SetBusWidth(0x4) , Command count = 3134 ] 
14:40:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3135 ] 
14:40:47: Protected Area Size 0x28000
14:40:47: Bus Width           2
14:40:47: Secure Mode         0
14:40:47: Speed  Class        4
14:40:47: Perf Move           0
14:40:47: Au Size             9
14:40:47: Erase Size          15
14:40:47: Erase Timeout       1
14:40:47: Erase offset        1
14:40:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3136 ] 
14:40:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:47: Host Frequency set to 100000 KHz
14:40:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:47: ####CSD Registe 2.0 Values####
14:40:47: CSD_STRUCTURE                                 :0x1
14:40:47: Reserv1                                       :0x0
14:40:47: Time Access 1 TAAC                            :0xe
14:40:47: Time Access 2 NSAC*100                        :0x0
14:40:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:47: Card Command Classess CCC                     :0x5b5
14:40:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:47: DSR(driver stage register)  DSR_IMP           :0x0
14:40:47: Reserv2                                       :0x0
14:40:47: Device Size C_SIZE                            :0xedc8
14:40:47: Reserv3                                       :0x0
14:40:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:47: Reserv4                                       :0x0
14:40:48: Write Speed Factor R2W_FACTOR                 :0x2
14:40:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:48: FILE_FORMAT_GRP                               :0x0
14:40:48: COPY flag                                     :0x1
14:40:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:48: File_Format                                   :0x0
14:40:48: CRC                                           :0x0
14:40:48: ####CSD Registe Values####  

14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BFC0>, <py_sfcl.CommandDataDefinition object at 0x05E076C0>) , Command count = 3137 ] 
14:40:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBAB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F5A0>) , Command count = 3138 ] 
14:40:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04B70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E040C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04EA0>, <None>, <py_sfcl.Command23 object at 0x05DF5750>) , Command count = 3139 ] 
14:40:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:50: Host Frequency set to 25000 KHz
14:40:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9AB0>, 0x0, True) , Command count = 3140 ] 
14:40:50: [GO18_globalSetVolt]### Host voltage value is set.
14:40:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB600>, 0x0, False) , Command count = 3141 ] 
14:40:50: [GO18_globalSetVolt]### Host voltage value is set.
14:40:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3142 ] 
14:40:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3143 ] 
14:40:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3144 ] 
14:40:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DFBF00>) , Command count = 3145 ] 
14:40:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C00>, <py_sfcl.CommandDataDefinition object at 0x05DF5690>) , Command count = 3146 ] 
14:40:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3147 ] 
14:40:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:50: Host Frequency set to 25000 KHz
14:40:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:50: ####CSD Registe 2.0 Values####
14:40:50: CSD_STRUCTURE                                 :0x1
14:40:50: Reserv1                                       :0x0
14:40:50: Time Access 1 TAAC                            :0xe
14:40:50: Time Access 2 NSAC*100                        :0x0
14:40:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:50: Card Command Classess CCC                     :0x5b5
14:40:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:50: DSR(driver stage register)  DSR_IMP           :0x0
14:40:50: Reserv2                                       :0x0
14:40:50: Device Size C_SIZE                            :0xedc8
14:40:50: Reserv3                                       :0x0
14:40:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:50: Reserv4                                       :0x0
14:40:50: Write Speed Factor R2W_FACTOR                 :0x2
14:40:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:50: FILE_FORMAT_GRP                               :0x0
14:40:50: COPY flag                                     :0x1
14:40:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:50: File_Format                                   :0x0
14:40:50: CRC                                           :0x0
14:40:50: ####CSD Registe Values####  

14:40:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:50: [GetSCRRegisterEntry] Passed
14:40:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:50: Data_Status_After Erases          : 0
14:40:50: CPRM Security Support             : No Security
14:40:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:50: Spec. Version                     : Version 3.0X
14:40:50: Extended Security Support         : Extended_Security_Not_Supported
14:40:50: Command Support                   : COMMAND_SUPPORT
14:40:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5780>, <py_sfcl.CommandDataDefinition object at 0x05DF52D0>) , Command count = 3148 ] 
14:40:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF50F0>, <py_sfcl.CommandDataDefinition object at 0x05DF5A80>) , Command count = 3149 ] 
14:40:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:50: [ SetBusWidth(0x4) , Command count = 3150 ] 
14:40:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3151 ] 
14:40:50: Protected Area Size 0x28000
14:40:50: Bus Width           2
14:40:50: Secure Mode         0
14:40:50: Speed  Class        4
14:40:50: Perf Move           0
14:40:50: Au Size             9
14:40:50: Erase Size          15
14:40:50: Erase Timeout       1
14:40:50: Erase offset        1
14:40:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3152 ] 
14:40:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:51: Host Frequency set to 100000 KHz
14:40:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:51: ####CSD Registe 2.0 Values####
14:40:51: CSD_STRUCTURE                                 :0x1
14:40:51: Reserv1                                       :0x0
14:40:51: Time Access 1 TAAC                            :0xe
14:40:51: Time Access 2 NSAC*100                        :0x0
14:40:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:51: Card Command Classess CCC                     :0x5b5
14:40:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:51: DSR(driver stage register)  DSR_IMP           :0x0
14:40:51: Reserv2                                       :0x0
14:40:51: Device Size C_SIZE                            :0xedc8
14:40:51: Reserv3                                       :0x0
14:40:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:51: Reserv4                                       :0x0
14:40:51: Write Speed Factor R2W_FACTOR                 :0x2
14:40:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:51: FILE_FORMAT_GRP                               :0x0
14:40:51: COPY flag                                     :0x1
14:40:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:51: File_Format                                   :0x0
14:40:51: CRC                                           :0x0
14:40:51: ####CSD Registe Values####  

14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F60>, <py_sfcl.CommandDataDefinition object at 0x05E07BA0>) , Command count = 3153 ] 
14:40:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07AE0>, <py_sfcl.CommandDataDefinition object at 0x05E07300>) , Command count = 3154 ] 
14:40:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F330>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FC00>, <None>, <py_sfcl.Command23 object at 0x05E0F060>) , Command count = 3155 ] 
14:40:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:53: Host Frequency set to 25000 KHz
14:40:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5D50>, 0x0, True) , Command count = 3156 ] 
14:40:53: [GO18_globalSetVolt]### Host voltage value is set.
14:40:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5D80>, 0x0, False) , Command count = 3157 ] 
14:40:53: [GO18_globalSetVolt]### Host voltage value is set.
14:40:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3158 ] 
14:40:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3159 ] 
14:40:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3160 ] 
14:40:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5FC0>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 3161 ] 
14:40:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07570>, <py_sfcl.CommandDataDefinition object at 0x05DFB570>) , Command count = 3162 ] 
14:40:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:54: [ SetCardRCA(0x1, 0xD555) , Command count = 3163 ] 
14:40:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:54: Host Frequency set to 25000 KHz
14:40:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:54: ####CSD Registe 2.0 Values####
14:40:54: CSD_STRUCTURE                                 :0x1
14:40:54: Reserv1                                       :0x0
14:40:54: Time Access 1 TAAC                            :0xe
14:40:54: Time Access 2 NSAC*100                        :0x0
14:40:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:54: Card Command Classess CCC                     :0x5b5
14:40:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:54: DSR(driver stage register)  DSR_IMP           :0x0
14:40:54: Reserv2                                       :0x0
14:40:54: Device Size C_SIZE                            :0xedc8
14:40:54: Reserv3                                       :0x0
14:40:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:54: Reserv4                                       :0x0
14:40:54: Write Speed Factor R2W_FACTOR                 :0x2
14:40:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:54: FILE_FORMAT_GRP                               :0x0
14:40:54: COPY flag                                     :0x1
14:40:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:54: File_Format                                   :0x0
14:40:54: CRC                                           :0x0
14:40:54: ####CSD Registe Values####  

14:40:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:54: [GetSCRRegisterEntry] Passed
14:40:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:54: Data_Status_After Erases          : 0
14:40:54: CPRM Security Support             : No Security
14:40:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:54: Spec. Version                     : Version 3.0X
14:40:54: Extended Security Support         : Extended_Security_Not_Supported
14:40:54: Command Support                   : COMMAND_SUPPORT
14:40:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB420>, <py_sfcl.CommandDataDefinition object at 0x05DFB9C0>) , Command count = 3164 ] 
14:40:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9810>, <py_sfcl.CommandDataDefinition object at 0x05E070C0>) , Command count = 3165 ] 
14:40:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:54: [ SetBusWidth(0x4) , Command count = 3166 ] 
14:40:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3167 ] 
14:40:54: Protected Area Size 0x28000
14:40:54: Bus Width           2
14:40:54: Secure Mode         0
14:40:54: Speed  Class        4
14:40:54: Perf Move           0
14:40:54: Au Size             9
14:40:54: Erase Size          15
14:40:54: Erase Timeout       1
14:40:54: Erase offset        1
14:40:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3168 ] 
14:40:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:54: Host Frequency set to 100000 KHz
14:40:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:54: ####CSD Registe 2.0 Values####
14:40:54: CSD_STRUCTURE                                 :0x1
14:40:54: Reserv1                                       :0x0
14:40:54: Time Access 1 TAAC                            :0xe
14:40:54: Time Access 2 NSAC*100                        :0x0
14:40:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:54: Card Command Classess CCC                     :0x5b5
14:40:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:54: DSR(driver stage register)  DSR_IMP           :0x0
14:40:54: Reserv2                                       :0x0
14:40:54: Device Size C_SIZE                            :0xedc8
14:40:54: Reserv3                                       :0x0
14:40:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:54: Reserv4                                       :0x0
14:40:54: Write Speed Factor R2W_FACTOR                 :0x2
14:40:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:54: FILE_FORMAT_GRP                               :0x0
14:40:54: COPY flag                                     :0x1
14:40:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:54: File_Format                                   :0x0
14:40:54: CRC                                           :0x0
14:40:54: ####CSD Registe Values####  

14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBDB0>, <py_sfcl.CommandDataDefinition object at 0x05E00E70>) , Command count = 3169 ] 
14:40:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D20>, <py_sfcl.CommandDataDefinition object at 0x05E07EA0>) , Command count = 3170 ] 
14:40:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E006F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07870>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FF90>, <None>, <py_sfcl.Command23 object at 0x05E0F540>) , Command count = 3171 ] 
14:40:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:57: Host Frequency set to 25000 KHz
14:40:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBD80>, 0x0, True) , Command count = 3172 ] 
14:40:57: [GO18_globalSetVolt]### Host voltage value is set.
14:40:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E004E0>, 0x0, False) , Command count = 3173 ] 
14:40:57: [GO18_globalSetVolt]### Host voltage value is set.
14:40:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3174 ] 
14:40:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3175 ] 
14:40:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3176 ] 
14:40:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB4B0>) , Command count = 3177 ] 
14:40:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E002D0>, <py_sfcl.CommandDataDefinition object at 0x05DFBC60>) , Command count = 3178 ] 
14:40:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:57: [ SetCardRCA(0x1, 0xD555) , Command count = 3179 ] 
14:40:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:57: Host Frequency set to 25000 KHz
14:40:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:57: ####CSD Registe 2.0 Values####
14:40:57: CSD_STRUCTURE                                 :0x1
14:40:57: Reserv1                                       :0x0
14:40:57: Time Access 1 TAAC                            :0xe
14:40:57: Time Access 2 NSAC*100                        :0x0
14:40:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:57: Card Command Classess CCC                     :0x5b5
14:40:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:57: DSR(driver stage register)  DSR_IMP           :0x0
14:40:57: Reserv2                                       :0x0
14:40:57: Device Size C_SIZE                            :0xedc8
14:40:57: Reserv3                                       :0x0
14:40:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:57: Reserv4                                       :0x0
14:40:57: Write Speed Factor R2W_FACTOR                 :0x2
14:40:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:57: FILE_FORMAT_GRP                               :0x0
14:40:57: COPY flag                                     :0x1
14:40:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:57: File_Format                                   :0x0
14:40:57: CRC                                           :0x0
14:40:57: ####CSD Registe Values####  

14:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:57: [GetSCRRegisterEntry] Passed
14:40:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:57: Data_Status_After Erases          : 0
14:40:57: CPRM Security Support             : No Security
14:40:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:57: Spec. Version                     : Version 3.0X
14:40:57: Extended Security Support         : Extended_Security_Not_Supported
14:40:57: Command Support                   : COMMAND_SUPPORT
14:40:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F90>, <py_sfcl.CommandDataDefinition object at 0x05DF5DE0>) , Command count = 3180 ] 
14:40:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E005A0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA50>) , Command count = 3181 ] 
14:40:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:57: [ SetBusWidth(0x4) , Command count = 3182 ] 
14:40:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3183 ] 
14:40:57: Protected Area Size 0x28000
14:40:57: Bus Width           2
14:40:57: Secure Mode         0
14:40:57: Speed  Class        4
14:40:57: Perf Move           0
14:40:57: Au Size             9
14:40:57: Erase Size          15
14:40:57: Erase Timeout       1
14:40:57: Erase offset        1
14:40:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3184 ] 
14:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:57: Host Frequency set to 100000 KHz
14:40:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:57: ####CSD Registe 2.0 Values####
14:40:57: CSD_STRUCTURE                                 :0x1
14:40:57: Reserv1                                       :0x0
14:40:57: Time Access 1 TAAC                            :0xe
14:40:57: Time Access 2 NSAC*100                        :0x0
14:40:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:57: Card Command Classess CCC                     :0x5b5
14:40:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:57: DSR(driver stage register)  DSR_IMP           :0x0
14:40:57: Reserv2                                       :0x0
14:40:57: Device Size C_SIZE                            :0xedc8
14:40:57: Reserv3                                       :0x0
14:40:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:57: Reserv4                                       :0x0
14:40:58: Write Speed Factor R2W_FACTOR                 :0x2
14:40:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:58: FILE_FORMAT_GRP                               :0x0
14:40:58: COPY flag                                     :0x1
14:40:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:58: File_Format                                   :0x0
14:40:58: CRC                                           :0x0
14:40:58: ####CSD Registe Values####  

14:40:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF52A0>, <py_sfcl.CommandDataDefinition object at 0x05DFB5D0>) , Command count = 3185 ] 
14:40:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CF0>, <py_sfcl.CommandDataDefinition object at 0x05E07810>) , Command count = 3186 ] 
14:40:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:40:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:40:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07750>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F1E0>, <None>, <py_sfcl.Command23 object at 0x05E0F690>) , Command count = 3187 ] 
14:40:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:40:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:00: Host Frequency set to 25000 KHz
14:41:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB390>, 0x0, True) , Command count = 3188 ] 
14:41:00: [GO18_globalSetVolt]### Host voltage value is set.
14:41:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00390>, 0x0, False) , Command count = 3189 ] 
14:41:00: [GO18_globalSetVolt]### Host voltage value is set.
14:41:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3190 ] 
14:41:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3191 ] 
14:41:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3192 ] 
14:41:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3F0>, <py_sfcl.CommandDataDefinition object at 0x05CEF7E0>) , Command count = 3193 ] 
14:41:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD20>) , Command count = 3194 ] 
14:41:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:00: [ SetCardRCA(0x1, 0xD555) , Command count = 3195 ] 
14:41:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:01: Host Frequency set to 25000 KHz
14:41:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:01: ####CSD Registe 2.0 Values####
14:41:01: CSD_STRUCTURE                                 :0x1
14:41:01: Reserv1                                       :0x0
14:41:01: Time Access 1 TAAC                            :0xe
14:41:01: Time Access 2 NSAC*100                        :0x0
14:41:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:01: Card Command Classess CCC                     :0x5b5
14:41:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:01: DSR(driver stage register)  DSR_IMP           :0x0
14:41:01: Reserv2                                       :0x0
14:41:01: Device Size C_SIZE                            :0xedc8
14:41:01: Reserv3                                       :0x0
14:41:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:01: Reserv4                                       :0x0
14:41:01: Write Speed Factor R2W_FACTOR                 :0x2
14:41:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:01: FILE_FORMAT_GRP                               :0x0
14:41:01: COPY flag                                     :0x1
14:41:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:01: File_Format                                   :0x0
14:41:01: CRC                                           :0x0
14:41:01: ####CSD Registe Values####  

14:41:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:01: [GetSCRRegisterEntry] Passed
14:41:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:01: Data_Status_After Erases          : 0
14:41:01: CPRM Security Support             : No Security
14:41:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:01: Spec. Version                     : Version 3.0X
14:41:01: Extended Security Support         : Extended_Security_Not_Supported
14:41:01: Command Support                   : COMMAND_SUPPORT
14:41:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F60>, <py_sfcl.CommandDataDefinition object at 0x05E0F510>) , Command count = 3196 ] 
14:41:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00AB0>, <py_sfcl.CommandDataDefinition object at 0x05E00C00>) , Command count = 3197 ] 
14:41:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:01: [ SetBusWidth(0x4) , Command count = 3198 ] 
14:41:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3199 ] 
14:41:01: Protected Area Size 0x28000
14:41:01: Bus Width           2
14:41:01: Secure Mode         0
14:41:01: Speed  Class        4
14:41:01: Perf Move           0
14:41:01: Au Size             9
14:41:01: Erase Size          15
14:41:01: Erase Timeout       1
14:41:01: Erase offset        1
14:41:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3200 ] 
14:41:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:01: Host Frequency set to 100000 KHz
14:41:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:01: ####CSD Registe 2.0 Values####
14:41:01: CSD_STRUCTURE                                 :0x1
14:41:01: Reserv1                                       :0x0
14:41:01: Time Access 1 TAAC                            :0xe
14:41:01: Time Access 2 NSAC*100                        :0x0
14:41:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:01: Card Command Classess CCC                     :0x5b5
14:41:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:01: DSR(driver stage register)  DSR_IMP           :0x0
14:41:01: Reserv2                                       :0x0
14:41:01: Device Size C_SIZE                            :0xedc8
14:41:01: Reserv3                                       :0x0
14:41:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:01: Reserv4                                       :0x0
14:41:01: Write Speed Factor R2W_FACTOR                 :0x2
14:41:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:01: FILE_FORMAT_GRP                               :0x0
14:41:01: COPY flag                                     :0x1
14:41:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:01: File_Format                                   :0x0
14:41:01: CRC                                           :0x0
14:41:01: ####CSD Registe Values####  

14:41:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE40>, <py_sfcl.CommandDataDefinition object at 0x05DFB330>) , Command count = 3201 ] 
14:41:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05DFB150>) , Command count = 3202 ] 
14:41:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5B40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FA20>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F0C0>, <None>, <py_sfcl.Command23 object at 0x05E0FC60>) , Command count = 3203 ] 
14:41:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:03: Host Frequency set to 25000 KHz
14:41:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07F30>, 0x0, True) , Command count = 3204 ] 
14:41:04: [GO18_globalSetVolt]### Host voltage value is set.
14:41:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E045D0>, 0x0, False) , Command count = 3205 ] 
14:41:04: [GO18_globalSetVolt]### Host voltage value is set.
14:41:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3206 ] 
14:41:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3207 ] 
14:41:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3208 ] 
14:41:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C90>, <py_sfcl.CommandDataDefinition object at 0x05E009C0>) , Command count = 3209 ] 
14:41:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3C0>, <py_sfcl.CommandDataDefinition object at 0x05DFBB70>) , Command count = 3210 ] 
14:41:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3211 ] 
14:41:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:04: Host Frequency set to 25000 KHz
14:41:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:04: ####CSD Registe 2.0 Values####
14:41:04: CSD_STRUCTURE                                 :0x1
14:41:04: Reserv1                                       :0x0
14:41:04: Time Access 1 TAAC                            :0xe
14:41:04: Time Access 2 NSAC*100                        :0x0
14:41:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:04: Card Command Classess CCC                     :0x5b5
14:41:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:04: DSR(driver stage register)  DSR_IMP           :0x0
14:41:04: Reserv2                                       :0x0
14:41:04: Device Size C_SIZE                            :0xedc8
14:41:04: Reserv3                                       :0x0
14:41:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:04: Reserv4                                       :0x0
14:41:04: Write Speed Factor R2W_FACTOR                 :0x2
14:41:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:04: FILE_FORMAT_GRP                               :0x0
14:41:04: COPY flag                                     :0x1
14:41:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:04: File_Format                                   :0x0
14:41:04: CRC                                           :0x0
14:41:04: ####CSD Registe Values####  

14:41:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:04: [GetSCRRegisterEntry] Passed
14:41:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:04: Data_Status_After Erases          : 0
14:41:04: CPRM Security Support             : No Security
14:41:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:04: Spec. Version                     : Version 3.0X
14:41:04: Extended Security Support         : Extended_Security_Not_Supported
14:41:04: Command Support                   : COMMAND_SUPPORT
14:41:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBAE0>) , Command count = 3212 ] 
14:41:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04150>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 3213 ] 
14:41:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:04: [ SetBusWidth(0x4) , Command count = 3214 ] 
14:41:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3215 ] 
14:41:04: Protected Area Size 0x28000
14:41:04: Bus Width           2
14:41:04: Secure Mode         0
14:41:04: Speed  Class        4
14:41:04: Perf Move           0
14:41:04: Au Size             9
14:41:04: Erase Size          15
14:41:04: Erase Timeout       1
14:41:04: Erase offset        1
14:41:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3216 ] 
14:41:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:04: Host Frequency set to 100000 KHz
14:41:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:04: ####CSD Registe 2.0 Values####
14:41:04: CSD_STRUCTURE                                 :0x1
14:41:04: Reserv1                                       :0x0
14:41:04: Time Access 1 TAAC                            :0xe
14:41:04: Time Access 2 NSAC*100                        :0x0
14:41:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:04: Card Command Classess CCC                     :0x5b5
14:41:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:04: DSR(driver stage register)  DSR_IMP           :0x0
14:41:04: Reserv2                                       :0x0
14:41:04: Device Size C_SIZE                            :0xedc8
14:41:04: Reserv3                                       :0x0
14:41:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:04: Reserv4                                       :0x0
14:41:05: Write Speed Factor R2W_FACTOR                 :0x2
14:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:05: FILE_FORMAT_GRP                               :0x0
14:41:05: COPY flag                                     :0x1
14:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:05: File_Format                                   :0x0
14:41:05: CRC                                           :0x0
14:41:05: ####CSD Registe Values####  

14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF90>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 3217 ] 
14:41:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B40>, <py_sfcl.CommandDataDefinition object at 0x05E00A50>) , Command count = 3218 ] 
14:41:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F570>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FBD0>, <None>, <py_sfcl.Command23 object at 0x05E0F480>) , Command count = 3219 ] 
14:41:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:07: Host Frequency set to 25000 KHz
14:41:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00540>, 0x0, True) , Command count = 3220 ] 
14:41:07: [GO18_globalSetVolt]### Host voltage value is set.
14:41:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B360>, 0x0, False) , Command count = 3221 ] 
14:41:07: [GO18_globalSetVolt]### Host voltage value is set.
14:41:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3222 ] 
14:41:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3223 ] 
14:41:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3224 ] 
14:41:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00240>, <py_sfcl.CommandDataDefinition object at 0x05E04C90>) , Command count = 3225 ] 
14:41:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E078A0>, <py_sfcl.CommandDataDefinition object at 0x05E04240>) , Command count = 3226 ] 
14:41:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:07: [ SetCardRCA(0x1, 0xD555) , Command count = 3227 ] 
14:41:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:07: Host Frequency set to 25000 KHz
14:41:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:07: ####CSD Registe 2.0 Values####
14:41:07: CSD_STRUCTURE                                 :0x1
14:41:07: Reserv1                                       :0x0
14:41:07: Time Access 1 TAAC                            :0xe
14:41:07: Time Access 2 NSAC*100                        :0x0
14:41:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:07: Card Command Classess CCC                     :0x5b5
14:41:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:07: DSR(driver stage register)  DSR_IMP           :0x0
14:41:07: Reserv2                                       :0x0
14:41:07: Device Size C_SIZE                            :0xedc8
14:41:07: Reserv3                                       :0x0
14:41:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:07: Reserv4                                       :0x0
14:41:07: Write Speed Factor R2W_FACTOR                 :0x2
14:41:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:07: FILE_FORMAT_GRP                               :0x0
14:41:07: COPY flag                                     :0x1
14:41:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:07: File_Format                                   :0x0
14:41:07: CRC                                           :0x0
14:41:07: ####CSD Registe Values####  

14:41:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:07: [GetSCRRegisterEntry] Passed
14:41:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:07: Data_Status_After Erases          : 0
14:41:07: CPRM Security Support             : No Security
14:41:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:07: Spec. Version                     : Version 3.0X
14:41:07: Extended Security Support         : Extended_Security_Not_Supported
14:41:07: Command Support                   : COMMAND_SUPPORT
14:41:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 3228 ] 
14:41:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2A0>, <py_sfcl.CommandDataDefinition object at 0x05E00D50>) , Command count = 3229 ] 
14:41:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:07: [ SetBusWidth(0x4) , Command count = 3230 ] 
14:41:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E006C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3231 ] 
14:41:07: Protected Area Size 0x28000
14:41:07: Bus Width           2
14:41:07: Secure Mode         0
14:41:07: Speed  Class        4
14:41:07: Perf Move           0
14:41:07: Au Size             9
14:41:07: Erase Size          15
14:41:07: Erase Timeout       1
14:41:07: Erase offset        1
14:41:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3232 ] 
14:41:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:07: Host Frequency set to 100000 KHz
14:41:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:07: ####CSD Registe 2.0 Values####
14:41:07: CSD_STRUCTURE                                 :0x1
14:41:07: Reserv1                                       :0x0
14:41:07: Time Access 1 TAAC                            :0xe
14:41:08: Time Access 2 NSAC*100                        :0x0
14:41:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:08: Card Command Classess CCC                     :0x5b5
14:41:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:08: DSR(driver stage register)  DSR_IMP           :0x0
14:41:08: Reserv2                                       :0x0
14:41:08: Device Size C_SIZE                            :0xedc8
14:41:08: Reserv3                                       :0x0
14:41:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:08: Reserv4                                       :0x0
14:41:08: Write Speed Factor R2W_FACTOR                 :0x2
14:41:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:08: FILE_FORMAT_GRP                               :0x0
14:41:08: COPY flag                                     :0x1
14:41:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:08: File_Format                                   :0x0
14:41:08: CRC                                           :0x0
14:41:08: ####CSD Registe Values####  

14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB270>, <py_sfcl.CommandDataDefinition object at 0x05E04690>) , Command count = 3233 ] 
14:41:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB990>, <py_sfcl.CommandDataDefinition object at 0x05E002A0>) , Command count = 3234 ] 
14:41:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F6F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F750>, <None>, <py_sfcl.Command23 object at 0x05E0F3C0>) , Command count = 3235 ] 
14:41:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:10: Host Frequency set to 25000 KHz
14:41:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E078D0>, 0x0, True) , Command count = 3236 ] 
14:41:10: [GO18_globalSetVolt]### Host voltage value is set.
14:41:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E003F0>, 0x0, False) , Command count = 3237 ] 
14:41:10: [GO18_globalSetVolt]### Host voltage value is set.
14:41:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3238 ] 
14:41:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3239 ] 
14:41:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3240 ] 
14:41:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05E048D0>) , Command count = 3241 ] 
14:41:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004B0>, <py_sfcl.CommandDataDefinition object at 0x05E007B0>) , Command count = 3242 ] 
14:41:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3243 ] 
14:41:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:11: Host Frequency set to 25000 KHz
14:41:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:11: ####CSD Registe 2.0 Values####
14:41:11: CSD_STRUCTURE                                 :0x1
14:41:11: Reserv1                                       :0x0
14:41:11: Time Access 1 TAAC                            :0xe
14:41:11: Time Access 2 NSAC*100                        :0x0
14:41:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:11: Card Command Classess CCC                     :0x5b5
14:41:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:11: DSR(driver stage register)  DSR_IMP           :0x0
14:41:11: Reserv2                                       :0x0
14:41:11: Device Size C_SIZE                            :0xedc8
14:41:11: Reserv3                                       :0x0
14:41:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:11: Reserv4                                       :0x0
14:41:11: Write Speed Factor R2W_FACTOR                 :0x2
14:41:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:11: FILE_FORMAT_GRP                               :0x0
14:41:11: COPY flag                                     :0x1
14:41:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:11: File_Format                                   :0x0
14:41:11: CRC                                           :0x0
14:41:11: ####CSD Registe Values####  

14:41:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:11: [GetSCRRegisterEntry] Passed
14:41:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:11: Data_Status_After Erases          : 0
14:41:11: CPRM Security Support             : No Security
14:41:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:11: Spec. Version                     : Version 3.0X
14:41:11: Extended Security Support         : Extended_Security_Not_Supported
14:41:11: Command Support                   : COMMAND_SUPPORT
14:41:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00840>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 3244 ] 
14:41:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B70>, <py_sfcl.CommandDataDefinition object at 0x05E00600>) , Command count = 3245 ] 
14:41:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:11: [ SetBusWidth(0x4) , Command count = 3246 ] 
14:41:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3247 ] 
14:41:11: Protected Area Size 0x28000
14:41:11: Bus Width           2
14:41:11: Secure Mode         0
14:41:11: Speed  Class        4
14:41:11: Perf Move           0
14:41:11: Au Size             9
14:41:11: Erase Size          15
14:41:11: Erase Timeout       1
14:41:11: Erase offset        1
14:41:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3248 ] 
14:41:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:11: Host Frequency set to 100000 KHz
14:41:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:11: ####CSD Registe 2.0 Values####
14:41:11: CSD_STRUCTURE                                 :0x1
14:41:11: Reserv1                                       :0x0
14:41:11: Time Access 1 TAAC                            :0xe
14:41:11: Time Access 2 NSAC*100                        :0x0
14:41:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:11: Card Command Classess CCC                     :0x5b5
14:41:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:11: DSR(driver stage register)  DSR_IMP           :0x0
14:41:11: Reserv2                                       :0x0
14:41:11: Device Size C_SIZE                            :0xedc8
14:41:11: Reserv3                                       :0x0
14:41:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:11: Reserv4                                       :0x0
14:41:11: Write Speed Factor R2W_FACTOR                 :0x2
14:41:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:11: FILE_FORMAT_GRP                               :0x0
14:41:11: COPY flag                                     :0x1
14:41:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:11: File_Format                                   :0x0
14:41:11: CRC                                           :0x0
14:41:11: ####CSD Registe Values####  

14:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A20>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 3249 ] 
14:41:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046C0>, <py_sfcl.CommandDataDefinition object at 0x05E040F0>) , Command count = 3250 ] 
14:41:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04780>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FC30>, <None>, <py_sfcl.Command23 object at 0x05E0F8A0>) , Command count = 3251 ] 
14:41:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:14: Host Frequency set to 25000 KHz
14:41:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00900>, 0x0, True) , Command count = 3252 ] 
14:41:14: [GO18_globalSetVolt]### Host voltage value is set.
14:41:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00960>, 0x0, False) , Command count = 3253 ] 
14:41:14: [GO18_globalSetVolt]### Host voltage value is set.
14:41:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3254 ] 
14:41:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3255 ] 
14:41:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3256 ] 
14:41:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C60>, <py_sfcl.CommandDataDefinition object at 0x05E047B0>) , Command count = 3257 ] 
14:41:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00720>, <py_sfcl.CommandDataDefinition object at 0x05E00780>) , Command count = 3258 ] 
14:41:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:14: [ SetCardRCA(0x1, 0xD555) , Command count = 3259 ] 
14:41:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:14: Host Frequency set to 25000 KHz
14:41:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:14: ####CSD Registe 2.0 Values####
14:41:14: CSD_STRUCTURE                                 :0x1
14:41:14: Reserv1                                       :0x0
14:41:14: Time Access 1 TAAC                            :0xe
14:41:14: Time Access 2 NSAC*100                        :0x0
14:41:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:14: Card Command Classess CCC                     :0x5b5
14:41:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:14: DSR(driver stage register)  DSR_IMP           :0x0
14:41:14: Reserv2                                       :0x0
14:41:14: Device Size C_SIZE                            :0xedc8
14:41:14: Reserv3                                       :0x0
14:41:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:14: Reserv4                                       :0x0
14:41:14: Write Speed Factor R2W_FACTOR                 :0x2
14:41:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:14: FILE_FORMAT_GRP                               :0x0
14:41:14: COPY flag                                     :0x1
14:41:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:14: File_Format                                   :0x0
14:41:14: CRC                                           :0x0
14:41:14: ####CSD Registe Values####  

14:41:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:14: [GetSCRRegisterEntry] Passed
14:41:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:14: Data_Status_After Erases          : 0
14:41:14: CPRM Security Support             : No Security
14:41:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:14: Spec. Version                     : Version 3.0X
14:41:14: Extended Security Support         : Extended_Security_Not_Supported
14:41:14: Command Support                   : COMMAND_SUPPORT
14:41:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00480>, <py_sfcl.CommandDataDefinition object at 0x05E07CF0>) , Command count = 3260 ] 
14:41:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B090>, <py_sfcl.CommandDataDefinition object at 0x05E043C0>) , Command count = 3261 ] 
14:41:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:14: [ SetBusWidth(0x4) , Command count = 3262 ] 
14:41:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3263 ] 
14:41:14: Protected Area Size 0x28000
14:41:14: Bus Width           2
14:41:14: Secure Mode         0
14:41:14: Speed  Class        4
14:41:14: Perf Move           0
14:41:14: Au Size             9
14:41:14: Erase Size          15
14:41:14: Erase Timeout       1
14:41:14: Erase offset        1
14:41:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3264 ] 
14:41:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:14: Host Frequency set to 100000 KHz
14:41:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:14: ####CSD Registe 2.0 Values####
14:41:14: CSD_STRUCTURE                                 :0x1
14:41:14: Reserv1                                       :0x0
14:41:14: Time Access 1 TAAC                            :0xe
14:41:14: Time Access 2 NSAC*100                        :0x0
14:41:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:14: Card Command Classess CCC                     :0x5b5
14:41:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:14: DSR(driver stage register)  DSR_IMP           :0x0
14:41:14: Reserv2                                       :0x0
14:41:14: Device Size C_SIZE                            :0xedc8
14:41:14: Reserv3                                       :0x0
14:41:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:14: Reserv4                                       :0x0
14:41:15: Write Speed Factor R2W_FACTOR                 :0x2
14:41:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:15: FILE_FORMAT_GRP                               :0x0
14:41:15: COPY flag                                     :0x1
14:41:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:15: File_Format                                   :0x0
14:41:15: CRC                                           :0x0
14:41:15: ####CSD Registe Values####  

14:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07E10>, <py_sfcl.CommandDataDefinition object at 0x05E00ED0>) , Command count = 3265 ] 
14:41:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00FC0>, <py_sfcl.CommandDataDefinition object at 0x05E045A0>) , Command count = 3266 ] 
14:41:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:15: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FF60>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F2D0>, <None>, <py_sfcl.Command23 object at 0x05E0F0F0>) , Command count = 3267 ] 
14:41:15: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:17: Host Frequency set to 25000 KHz
14:41:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E009F0>, 0x0, True) , Command count = 3268 ] 
14:41:17: [GO18_globalSetVolt]### Host voltage value is set.
14:41:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07B70>, 0x0, False) , Command count = 3269 ] 
14:41:17: [GO18_globalSetVolt]### Host voltage value is set.
14:41:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3270 ] 
14:41:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3271 ] 
14:41:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3272 ] 
14:41:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 3273 ] 
14:41:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07960>, <py_sfcl.CommandDataDefinition object at 0x05E00E40>) , Command count = 3274 ] 
14:41:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3275 ] 
14:41:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:18: Host Frequency set to 25000 KHz
14:41:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:18: ####CSD Registe 2.0 Values####
14:41:18: CSD_STRUCTURE                                 :0x1
14:41:18: Reserv1                                       :0x0
14:41:18: Time Access 1 TAAC                            :0xe
14:41:18: Time Access 2 NSAC*100                        :0x0
14:41:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:18: Card Command Classess CCC                     :0x5b5
14:41:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:18: DSR(driver stage register)  DSR_IMP           :0x0
14:41:18: Reserv2                                       :0x0
14:41:18: Device Size C_SIZE                            :0xedc8
14:41:18: Reserv3                                       :0x0
14:41:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:18: Reserv4                                       :0x0
14:41:18: Write Speed Factor R2W_FACTOR                 :0x2
14:41:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:18: FILE_FORMAT_GRP                               :0x0
14:41:18: COPY flag                                     :0x1
14:41:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:18: File_Format                                   :0x0
14:41:18: CRC                                           :0x0
14:41:18: ####CSD Registe Values####  

14:41:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:18: [GetSCRRegisterEntry] Passed
14:41:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:18: Data_Status_After Erases          : 0
14:41:18: CPRM Security Support             : No Security
14:41:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:18: Spec. Version                     : Version 3.0X
14:41:18: Extended Security Support         : Extended_Security_Not_Supported
14:41:18: Command Support                   : COMMAND_SUPPORT
14:41:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F60>, <py_sfcl.CommandDataDefinition object at 0x05E04B40>) , Command count = 3276 ] 
14:41:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04960>, <py_sfcl.CommandDataDefinition object at 0x05E04F00>) , Command count = 3277 ] 
14:41:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:18: [ SetBusWidth(0x4) , Command count = 3278 ] 
14:41:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3279 ] 
14:41:18: Protected Area Size 0x28000
14:41:18: Bus Width           2
14:41:18: Secure Mode         0
14:41:18: Speed  Class        4
14:41:18: Perf Move           0
14:41:18: Au Size             9
14:41:18: Erase Size          15
14:41:18: Erase Timeout       1
14:41:18: Erase offset        1
14:41:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3280 ] 
14:41:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:18: Host Frequency set to 100000 KHz
14:41:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:18: ####CSD Registe 2.0 Values####
14:41:18: CSD_STRUCTURE                                 :0x1
14:41:18: Reserv1                                       :0x0
14:41:18: Time Access 1 TAAC                            :0xe
14:41:18: Time Access 2 NSAC*100                        :0x0
14:41:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:18: Card Command Classess CCC                     :0x5b5
14:41:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:18: DSR(driver stage register)  DSR_IMP           :0x0
14:41:18: Reserv2                                       :0x0
14:41:18: Device Size C_SIZE                            :0xedc8
14:41:18: Reserv3                                       :0x0
14:41:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:18: Reserv4                                       :0x0
14:41:18: Write Speed Factor R2W_FACTOR                 :0x2
14:41:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:18: FILE_FORMAT_GRP                               :0x0
14:41:18: COPY flag                                     :0x1
14:41:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:18: File_Format                                   :0x0
14:41:18: CRC                                           :0x0
14:41:18: ####CSD Registe Values####  

14:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F00>, <py_sfcl.CommandDataDefinition object at 0x05E04930>) , Command count = 3281 ] 
14:41:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04720>, <py_sfcl.CommandDataDefinition object at 0x05E04840>) , Command count = 3282 ] 
14:41:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBF30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB2D0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBE10>, <None>, <py_sfcl.Command23 object at 0x05E0FEA0>) , Command count = 3283 ] 
14:41:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:21: Host Frequency set to 25000 KHz
14:41:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5B10>, 0x0, True) , Command count = 3284 ] 
14:41:21: [GO18_globalSetVolt]### Host voltage value is set.
14:41:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07C30>, 0x0, False) , Command count = 3285 ] 
14:41:21: [GO18_globalSetVolt]### Host voltage value is set.
14:41:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3286 ] 
14:41:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3287 ] 
14:41:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3288 ] 
14:41:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04FC0>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 3289 ] 
14:41:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05262420>, <py_sfcl.CommandDataDefinition object at 0x05E077B0>) , Command count = 3290 ] 
14:41:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3291 ] 
14:41:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:21: Host Frequency set to 25000 KHz
14:41:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:21: ####CSD Registe 2.0 Values####
14:41:21: CSD_STRUCTURE                                 :0x1
14:41:21: Reserv1                                       :0x0
14:41:21: Time Access 1 TAAC                            :0xe
14:41:21: Time Access 2 NSAC*100                        :0x0
14:41:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:21: Card Command Classess CCC                     :0x5b5
14:41:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:21: DSR(driver stage register)  DSR_IMP           :0x0
14:41:21: Reserv2                                       :0x0
14:41:21: Device Size C_SIZE                            :0xedc8
14:41:21: Reserv3                                       :0x0
14:41:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:21: Reserv4                                       :0x0
14:41:21: Write Speed Factor R2W_FACTOR                 :0x2
14:41:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:21: FILE_FORMAT_GRP                               :0x0
14:41:21: COPY flag                                     :0x1
14:41:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:21: File_Format                                   :0x0
14:41:21: CRC                                           :0x0
14:41:21: ####CSD Registe Values####  

14:41:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:21: [GetSCRRegisterEntry] Passed
14:41:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:21: Data_Status_After Erases          : 0
14:41:21: CPRM Security Support             : No Security
14:41:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:21: Spec. Version                     : Version 3.0X
14:41:21: Extended Security Support         : Extended_Security_Not_Supported
14:41:21: Command Support                   : COMMAND_SUPPORT
14:41:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E07210>) , Command count = 3292 ] 
14:41:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E074E0>) , Command count = 3293 ] 
14:41:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:21: [ SetBusWidth(0x4) , Command count = 3294 ] 
14:41:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3295 ] 
14:41:21: Protected Area Size 0x28000
14:41:21: Bus Width           2
14:41:21: Secure Mode         0
14:41:21: Speed  Class        4
14:41:21: Perf Move           0
14:41:21: Au Size             9
14:41:21: Erase Size          15
14:41:21: Erase Timeout       1
14:41:21: Erase offset        1
14:41:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3296 ] 
14:41:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:21: Host Frequency set to 100000 KHz
14:41:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:21: ####CSD Registe 2.0 Values####
14:41:21: CSD_STRUCTURE                                 :0x1
14:41:21: Reserv1                                       :0x0
14:41:21: Time Access 1 TAAC                            :0xe
14:41:21: Time Access 2 NSAC*100                        :0x0
14:41:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:21: Card Command Classess CCC                     :0x5b5
14:41:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:21: DSR(driver stage register)  DSR_IMP           :0x0
14:41:21: Reserv2                                       :0x0
14:41:21: Device Size C_SIZE                            :0xedc8
14:41:21: Reserv3                                       :0x0
14:41:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:21: Reserv4                                       :0x0
14:41:22: Write Speed Factor R2W_FACTOR                 :0x2
14:41:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:22: FILE_FORMAT_GRP                               :0x0
14:41:22: COPY flag                                     :0x1
14:41:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:22: File_Format                                   :0x0
14:41:22: CRC                                           :0x0
14:41:22: ####CSD Registe Values####  

14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E071B0>) , Command count = 3297 ] 
14:41:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B150>) , Command count = 3298 ] 
14:41:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FDB0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FCF0>, <None>, <py_sfcl.Command23 object at 0x05E04D20>) , Command count = 3299 ] 
14:41:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:24: Host Frequency set to 25000 KHz
14:41:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04600>, 0x0, True) , Command count = 3300 ] 
14:41:24: [GO18_globalSetVolt]### Host voltage value is set.
14:41:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07DE0>, 0x0, False) , Command count = 3301 ] 
14:41:24: [GO18_globalSetVolt]### Host voltage value is set.
14:41:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3302 ] 
14:41:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3303 ] 
14:41:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3304 ] 
14:41:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C00>, <py_sfcl.CommandDataDefinition object at 0x05E0B270>) , Command count = 3305 ] 
14:41:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C60>, <py_sfcl.CommandDataDefinition object at 0x05E071E0>) , Command count = 3306 ] 
14:41:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:24: [ SetCardRCA(0x1, 0xD555) , Command count = 3307 ] 
14:41:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:24: Host Frequency set to 25000 KHz
14:41:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:24: ####CSD Registe 2.0 Values####
14:41:24: CSD_STRUCTURE                                 :0x1
14:41:24: Reserv1                                       :0x0
14:41:24: Time Access 1 TAAC                            :0xe
14:41:24: Time Access 2 NSAC*100                        :0x0
14:41:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:24: Card Command Classess CCC                     :0x5b5
14:41:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:24: DSR(driver stage register)  DSR_IMP           :0x0
14:41:24: Reserv2                                       :0x0
14:41:24: Device Size C_SIZE                            :0xedc8
14:41:24: Reserv3                                       :0x0
14:41:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:24: Reserv4                                       :0x0
14:41:24: Write Speed Factor R2W_FACTOR                 :0x2
14:41:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:24: FILE_FORMAT_GRP                               :0x0
14:41:24: COPY flag                                     :0x1
14:41:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:24: File_Format                                   :0x0
14:41:24: CRC                                           :0x0
14:41:24: ####CSD Registe Values####  

14:41:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:24: [GetSCRRegisterEntry] Passed
14:41:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:24: Data_Status_After Erases          : 0
14:41:24: CPRM Security Support             : No Security
14:41:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:24: Spec. Version                     : Version 3.0X
14:41:24: Extended Security Support         : Extended_Security_Not_Supported
14:41:24: Command Support                   : COMMAND_SUPPORT
14:41:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B10>, <py_sfcl.CommandDataDefinition object at 0x05E07990>) , Command count = 3308 ] 
14:41:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A50>, <py_sfcl.CommandDataDefinition object at 0x05DF5AE0>) , Command count = 3309 ] 
14:41:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:24: [ SetBusWidth(0x4) , Command count = 3310 ] 
14:41:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3311 ] 
14:41:24: Protected Area Size 0x28000
14:41:24: Bus Width           2
14:41:24: Secure Mode         0
14:41:24: Speed  Class        4
14:41:24: Perf Move           0
14:41:24: Au Size             9
14:41:24: Erase Size          15
14:41:24: Erase Timeout       1
14:41:24: Erase offset        1
14:41:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3312 ] 
14:41:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:24: Host Frequency set to 100000 KHz
14:41:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:24: ####CSD Registe 2.0 Values####
14:41:24: CSD_STRUCTURE                                 :0x1
14:41:24: Reserv1                                       :0x0
14:41:24: Time Access 1 TAAC                            :0xe
14:41:25: Time Access 2 NSAC*100                        :0x0
14:41:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:25: Card Command Classess CCC                     :0x5b5
14:41:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:25: DSR(driver stage register)  DSR_IMP           :0x0
14:41:25: Reserv2                                       :0x0
14:41:25: Device Size C_SIZE                            :0xedc8
14:41:25: Reserv3                                       :0x0
14:41:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:25: Reserv4                                       :0x0
14:41:25: Write Speed Factor R2W_FACTOR                 :0x2
14:41:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:25: FILE_FORMAT_GRP                               :0x0
14:41:25: COPY flag                                     :0x1
14:41:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:25: File_Format                                   :0x0
14:41:25: CRC                                           :0x0
14:41:25: ####CSD Registe Values####  

14:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B690>, <py_sfcl.CommandDataDefinition object at 0x05E0B2A0>) , Command count = 3313 ] 
14:41:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B960>) , Command count = 3314 ] 
14:41:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:25: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0BC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FE40>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FE10>, <None>, <py_sfcl.Command23 object at 0x05E0FAB0>) , Command count = 3315 ] 
14:41:25: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:27: Host Frequency set to 25000 KHz
14:41:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04630>, 0x0, True) , Command count = 3316 ] 
14:41:27: [GO18_globalSetVolt]### Host voltage value is set.
14:41:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B390>, 0x0, False) , Command count = 3317 ] 
14:41:27: [GO18_globalSetVolt]### Host voltage value is set.
14:41:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3318 ] 
14:41:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3319 ] 
14:41:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3320 ] 
14:41:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07510>, <py_sfcl.CommandDataDefinition object at 0x05E0B6F0>) , Command count = 3321 ] 
14:41:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E072D0>, <py_sfcl.CommandDataDefinition object at 0x05E0BE40>) , Command count = 3322 ] 
14:41:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3323 ] 
14:41:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:28: Host Frequency set to 25000 KHz
14:41:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:28: ####CSD Registe 2.0 Values####
14:41:28: CSD_STRUCTURE                                 :0x1
14:41:28: Reserv1                                       :0x0
14:41:28: Time Access 1 TAAC                            :0xe
14:41:28: Time Access 2 NSAC*100                        :0x0
14:41:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:28: Card Command Classess CCC                     :0x5b5
14:41:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:28: DSR(driver stage register)  DSR_IMP           :0x0
14:41:28: Reserv2                                       :0x0
14:41:28: Device Size C_SIZE                            :0xedc8
14:41:28: Reserv3                                       :0x0
14:41:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:28: Reserv4                                       :0x0
14:41:28: Write Speed Factor R2W_FACTOR                 :0x2
14:41:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:28: FILE_FORMAT_GRP                               :0x0
14:41:28: COPY flag                                     :0x1
14:41:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:28: File_Format                                   :0x0
14:41:28: CRC                                           :0x0
14:41:28: ####CSD Registe Values####  

14:41:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:28: [GetSCRRegisterEntry] Passed
14:41:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:28: Data_Status_After Erases          : 0
14:41:28: CPRM Security Support             : No Security
14:41:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:28: Spec. Version                     : Version 3.0X
14:41:28: Extended Security Support         : Extended_Security_Not_Supported
14:41:28: Command Support                   : COMMAND_SUPPORT
14:41:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07420>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 3324 ] 
14:41:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07360>, <py_sfcl.CommandDataDefinition object at 0x05E0B210>) , Command count = 3325 ] 
14:41:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:28: [ SetBusWidth(0x4) , Command count = 3326 ] 
14:41:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3327 ] 
14:41:28: Protected Area Size 0x28000
14:41:28: Bus Width           2
14:41:28: Secure Mode         0
14:41:28: Speed  Class        4
14:41:28: Perf Move           0
14:41:28: Au Size             9
14:41:28: Erase Size          15
14:41:28: Erase Timeout       1
14:41:28: Erase offset        1
14:41:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3328 ] 
14:41:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:28: Host Frequency set to 100000 KHz
14:41:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:28: ####CSD Registe 2.0 Values####
14:41:28: CSD_STRUCTURE                                 :0x1
14:41:28: Reserv1                                       :0x0
14:41:28: Time Access 1 TAAC                            :0xe
14:41:28: Time Access 2 NSAC*100                        :0x0
14:41:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:28: Card Command Classess CCC                     :0x5b5
14:41:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:28: DSR(driver stage register)  DSR_IMP           :0x0
14:41:28: Reserv2                                       :0x0
14:41:28: Device Size C_SIZE                            :0xedc8
14:41:28: Reserv3                                       :0x0
14:41:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:28: Reserv4                                       :0x0
14:41:28: Write Speed Factor R2W_FACTOR                 :0x2
14:41:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:28: FILE_FORMAT_GRP                               :0x0
14:41:28: COPY flag                                     :0x1
14:41:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:28: File_Format                                   :0x0
14:41:28: CRC                                           :0x0
14:41:28: ####CSD Registe Values####  

14:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F120>, <py_sfcl.CommandDataDefinition object at 0x05E0B750>) , Command count = 3329 ] 
14:41:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB40>, <py_sfcl.CommandDataDefinition object at 0x05E0B510>) , Command count = 3330 ] 
14:41:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0521E030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F720>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F2A0>, <None>, <py_sfcl.Command23 object at 0x05E0F870>) , Command count = 3331 ] 
14:41:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:31: Host Frequency set to 25000 KHz
14:41:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE97E0>, 0x0, True) , Command count = 3332 ] 
14:41:31: [GO18_globalSetVolt]### Host voltage value is set.
14:41:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x052819F0>, 0x0, False) , Command count = 3333 ] 
14:41:31: [GO18_globalSetVolt]### Host voltage value is set.
14:41:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3334 ] 
14:41:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3335 ] 
14:41:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3336 ] 
14:41:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B600>, <py_sfcl.CommandDataDefinition object at 0x05E0B330>) , Command count = 3337 ] 
14:41:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819C0>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 3338 ] 
14:41:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:31: [ SetCardRCA(0x1, 0xD555) , Command count = 3339 ] 
14:41:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:31: Host Frequency set to 25000 KHz
14:41:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:31: ####CSD Registe 2.0 Values####
14:41:31: CSD_STRUCTURE                                 :0x1
14:41:31: Reserv1                                       :0x0
14:41:31: Time Access 1 TAAC                            :0xe
14:41:31: Time Access 2 NSAC*100                        :0x0
14:41:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:31: Card Command Classess CCC                     :0x5b5
14:41:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:31: DSR(driver stage register)  DSR_IMP           :0x0
14:41:31: Reserv2                                       :0x0
14:41:31: Device Size C_SIZE                            :0xedc8
14:41:31: Reserv3                                       :0x0
14:41:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:31: Reserv4                                       :0x0
14:41:31: Write Speed Factor R2W_FACTOR                 :0x2
14:41:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:31: FILE_FORMAT_GRP                               :0x0
14:41:31: COPY flag                                     :0x1
14:41:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:31: File_Format                                   :0x0
14:41:31: CRC                                           :0x0
14:41:31: ####CSD Registe Values####  

14:41:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:31: [GetSCRRegisterEntry] Passed
14:41:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:31: Data_Status_After Erases          : 0
14:41:31: CPRM Security Support             : No Security
14:41:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:31: Spec. Version                     : Version 3.0X
14:41:31: Extended Security Support         : Extended_Security_Not_Supported
14:41:31: Command Support                   : COMMAND_SUPPORT
14:41:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E07F60>) , Command count = 3340 ] 
14:41:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052177E0>, <py_sfcl.CommandDataDefinition object at 0x05E07330>) , Command count = 3341 ] 
14:41:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:31: [ SetBusWidth(0x4) , Command count = 3342 ] 
14:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3343 ] 
14:41:31: Protected Area Size 0x28000
14:41:31: Bus Width           2
14:41:31: Secure Mode         0
14:41:31: Speed  Class        4
14:41:31: Perf Move           0
14:41:31: Au Size             9
14:41:31: Erase Size          15
14:41:31: Erase Timeout       1
14:41:31: Erase offset        1
14:41:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3344 ] 
14:41:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:31: Host Frequency set to 100000 KHz
14:41:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:31: ####CSD Registe 2.0 Values####
14:41:31: CSD_STRUCTURE                                 :0x1
14:41:31: Reserv1                                       :0x0
14:41:31: Time Access 1 TAAC                            :0xe
14:41:31: Time Access 2 NSAC*100                        :0x0
14:41:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:31: Card Command Classess CCC                     :0x5b5
14:41:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:31: DSR(driver stage register)  DSR_IMP           :0x0
14:41:31: Reserv2                                       :0x0
14:41:31: Device Size C_SIZE                            :0xedc8
14:41:31: Reserv3                                       :0x0
14:41:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:31: Reserv4                                       :0x0
14:41:32: Write Speed Factor R2W_FACTOR                 :0x2
14:41:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:32: FILE_FORMAT_GRP                               :0x0
14:41:32: COPY flag                                     :0x1
14:41:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:32: File_Format                                   :0x0
14:41:32: CRC                                           :0x0
14:41:32: ####CSD Registe Values####  

14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B3F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 3345 ] 
14:41:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F240>, <py_sfcl.CommandDataDefinition object at 0x05E0FE70>) , Command count = 3346 ] 
14:41:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0527BFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F180>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FED0>, <None>, <py_sfcl.Command23 object at 0x05E0FF00>) , Command count = 3347 ] 
14:41:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:34: Host Frequency set to 25000 KHz
14:41:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E073C0>, 0x0, True) , Command count = 3348 ] 
14:41:34: [GO18_globalSetVolt]### Host voltage value is set.
14:41:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E044B0>, 0x0, False) , Command count = 3349 ] 
14:41:34: [GO18_globalSetVolt]### Host voltage value is set.
14:41:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3350 ] 
14:41:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3351 ] 
14:41:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3352 ] 
14:41:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281CC0>, <py_sfcl.CommandDataDefinition object at 0x05DE9BA0>) , Command count = 3353 ] 
14:41:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF060>, <py_sfcl.CommandDataDefinition object at 0x05E07540>) , Command count = 3354 ] 
14:41:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3355 ] 
14:41:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:34: Host Frequency set to 25000 KHz
14:41:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:34: ####CSD Registe 2.0 Values####
14:41:34: CSD_STRUCTURE                                 :0x1
14:41:34: Reserv1                                       :0x0
14:41:34: Time Access 1 TAAC                            :0xe
14:41:34: Time Access 2 NSAC*100                        :0x0
14:41:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:34: Card Command Classess CCC                     :0x5b5
14:41:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:34: DSR(driver stage register)  DSR_IMP           :0x0
14:41:34: Reserv2                                       :0x0
14:41:34: Device Size C_SIZE                            :0xedc8
14:41:34: Reserv3                                       :0x0
14:41:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:34: Reserv4                                       :0x0
14:41:34: Write Speed Factor R2W_FACTOR                 :0x2
14:41:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:34: FILE_FORMAT_GRP                               :0x0
14:41:34: COPY flag                                     :0x1
14:41:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:34: File_Format                                   :0x0
14:41:34: CRC                                           :0x0
14:41:34: ####CSD Registe Values####  

14:41:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:34: [GetSCRRegisterEntry] Passed
14:41:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:34: Data_Status_After Erases          : 0
14:41:34: CPRM Security Support             : No Security
14:41:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:34: Spec. Version                     : Version 3.0X
14:41:34: Extended Security Support         : Extended_Security_Not_Supported
14:41:34: Command Support                   : COMMAND_SUPPORT
14:41:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99C0>, <py_sfcl.CommandDataDefinition object at 0x0526FC30>) , Command count = 3356 ] 
14:41:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FEA0>, <py_sfcl.CommandDataDefinition object at 0x0526FC60>) , Command count = 3357 ] 
14:41:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:34: [ SetBusWidth(0x4) , Command count = 3358 ] 
14:41:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3359 ] 
14:41:34: Protected Area Size 0x28000
14:41:34: Bus Width           2
14:41:34: Secure Mode         0
14:41:34: Speed  Class        4
14:41:34: Perf Move           0
14:41:34: Au Size             9
14:41:34: Erase Size          15
14:41:34: Erase Timeout       1
14:41:34: Erase offset        1
14:41:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3360 ] 
14:41:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:35: Host Frequency set to 100000 KHz
14:41:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:35: ####CSD Registe 2.0 Values####
14:41:35: CSD_STRUCTURE                                 :0x1
14:41:35: Reserv1                                       :0x0
14:41:35: Time Access 1 TAAC                            :0xe
14:41:35: Time Access 2 NSAC*100                        :0x0
14:41:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:35: Card Command Classess CCC                     :0x5b5
14:41:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:35: DSR(driver stage register)  DSR_IMP           :0x0
14:41:35: Reserv2                                       :0x0
14:41:35: Device Size C_SIZE                            :0xedc8
14:41:35: Reserv3                                       :0x0
14:41:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:35: Reserv4                                       :0x0
14:41:35: Write Speed Factor R2W_FACTOR                 :0x2
14:41:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:35: FILE_FORMAT_GRP                               :0x0
14:41:35: COPY flag                                     :0x1
14:41:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:35: File_Format                                   :0x0
14:41:35: CRC                                           :0x0
14:41:35: ####CSD Registe Values####  

14:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B4E0>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 3361 ] 
14:41:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B840>, <py_sfcl.CommandDataDefinition object at 0x05E0B7B0>) , Command count = 3362 ] 
14:41:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0525B4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F7E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FE70>, <None>, <py_sfcl.Command23 object at 0x05E0F990>) , Command count = 3363 ] 
14:41:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:37: Host Frequency set to 25000 KHz
14:41:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281A50>, 0x0, True) , Command count = 3364 ] 
14:41:37: [GO18_globalSetVolt]### Host voltage value is set.
14:41:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F90>, 0x0, False) , Command count = 3365 ] 
14:41:37: [GO18_globalSetVolt]### Host voltage value is set.
14:41:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3366 ] 
14:41:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3367 ] 
14:41:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3368 ] 
14:41:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E070F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B870>) , Command count = 3369 ] 
14:41:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C90>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 3370 ] 
14:41:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3371 ] 
14:41:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:38: Host Frequency set to 25000 KHz
14:41:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:38: ####CSD Registe 2.0 Values####
14:41:38: CSD_STRUCTURE                                 :0x1
14:41:38: Reserv1                                       :0x0
14:41:38: Time Access 1 TAAC                            :0xe
14:41:38: Time Access 2 NSAC*100                        :0x0
14:41:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:38: Card Command Classess CCC                     :0x5b5
14:41:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:38: DSR(driver stage register)  DSR_IMP           :0x0
14:41:38: Reserv2                                       :0x0
14:41:38: Device Size C_SIZE                            :0xedc8
14:41:38: Reserv3                                       :0x0
14:41:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:38: Reserv4                                       :0x0
14:41:38: Write Speed Factor R2W_FACTOR                 :0x2
14:41:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:38: FILE_FORMAT_GRP                               :0x0
14:41:38: COPY flag                                     :0x1
14:41:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:38: File_Format                                   :0x0
14:41:38: CRC                                           :0x0
14:41:38: ####CSD Registe Values####  

14:41:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:38: [GetSCRRegisterEntry] Passed
14:41:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:38: Data_Status_After Erases          : 0
14:41:38: CPRM Security Support             : No Security
14:41:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:38: Spec. Version                     : Version 3.0X
14:41:38: Extended Security Support         : Extended_Security_Not_Supported
14:41:38: Command Support                   : COMMAND_SUPPORT
14:41:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BB10>, <py_sfcl.CommandDataDefinition object at 0x05E0BD50>) , Command count = 3372 ] 
14:41:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00630>, <py_sfcl.CommandDataDefinition object at 0x05E07090>) , Command count = 3373 ] 
14:41:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:38: [ SetBusWidth(0x4) , Command count = 3374 ] 
14:41:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3375 ] 
14:41:38: Protected Area Size 0x28000
14:41:38: Bus Width           2
14:41:38: Secure Mode         0
14:41:38: Speed  Class        4
14:41:38: Perf Move           0
14:41:38: Au Size             9
14:41:38: Erase Size          15
14:41:38: Erase Timeout       1
14:41:38: Erase offset        1
14:41:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3376 ] 
14:41:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:38: Host Frequency set to 100000 KHz
14:41:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:38: ####CSD Registe 2.0 Values####
14:41:38: CSD_STRUCTURE                                 :0x1
14:41:38: Reserv1                                       :0x0
14:41:38: Time Access 1 TAAC                            :0xe
14:41:38: Time Access 2 NSAC*100                        :0x0
14:41:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:38: Card Command Classess CCC                     :0x5b5
14:41:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:38: DSR(driver stage register)  DSR_IMP           :0x0
14:41:38: Reserv2                                       :0x0
14:41:38: Device Size C_SIZE                            :0xedc8
14:41:38: Reserv3                                       :0x0
14:41:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:38: Reserv4                                       :0x0
14:41:38: Write Speed Factor R2W_FACTOR                 :0x2
14:41:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:38: FILE_FORMAT_GRP                               :0x0
14:41:38: COPY flag                                     :0x1
14:41:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:38: File_Format                                   :0x0
14:41:38: CRC                                           :0x0
14:41:38: ####CSD Registe Values####  

14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF030>, <py_sfcl.CommandDataDefinition object at 0x05281F60>) , Command count = 3377 ] 
14:41:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C60>, <py_sfcl.CommandDataDefinition object at 0x05DF5480>) , Command count = 3378 ] 
14:41:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5600>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FB70>, <None>, <py_sfcl.Command23 object at 0x05E0F9C0>) , Command count = 3379 ] 
14:41:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:41: Host Frequency set to 25000 KHz
14:41:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00660>, 0x0, True) , Command count = 3380 ] 
14:41:41: [GO18_globalSetVolt]### Host voltage value is set.
14:41:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9CF0>, 0x0, False) , Command count = 3381 ] 
14:41:41: [GO18_globalSetVolt]### Host voltage value is set.
14:41:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3382 ] 
14:41:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3383 ] 
14:41:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3384 ] 
14:41:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C30>, <py_sfcl.CommandDataDefinition object at 0x05CEF2D0>) , Command count = 3385 ] 
14:41:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A50>, <py_sfcl.CommandDataDefinition object at 0x05E07240>) , Command count = 3386 ] 
14:41:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:41: [ SetCardRCA(0x1, 0xD555) , Command count = 3387 ] 
14:41:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:41: Host Frequency set to 25000 KHz
14:41:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:41: ####CSD Registe 2.0 Values####
14:41:41: CSD_STRUCTURE                                 :0x1
14:41:41: Reserv1                                       :0x0
14:41:41: Time Access 1 TAAC                            :0xe
14:41:41: Time Access 2 NSAC*100                        :0x0
14:41:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:41: Card Command Classess CCC                     :0x5b5
14:41:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:41: DSR(driver stage register)  DSR_IMP           :0x0
14:41:41: Reserv2                                       :0x0
14:41:41: Device Size C_SIZE                            :0xedc8
14:41:41: Reserv3                                       :0x0
14:41:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:41: Reserv4                                       :0x0
14:41:41: Write Speed Factor R2W_FACTOR                 :0x2
14:41:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:41: FILE_FORMAT_GRP                               :0x0
14:41:41: COPY flag                                     :0x1
14:41:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:41: File_Format                                   :0x0
14:41:41: CRC                                           :0x0
14:41:41: ####CSD Registe Values####  

14:41:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:41: [GetSCRRegisterEntry] Passed
14:41:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:41: Data_Status_After Erases          : 0
14:41:41: CPRM Security Support             : No Security
14:41:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:41: Spec. Version                     : Version 3.0X
14:41:41: Extended Security Support         : Extended_Security_Not_Supported
14:41:41: Command Support                   : COMMAND_SUPPORT
14:41:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05DF58A0>) , Command count = 3388 ] 
14:41:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BF90>, <py_sfcl.CommandDataDefinition object at 0x05E0F270>) , Command count = 3389 ] 
14:41:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:41: [ SetBusWidth(0x4) , Command count = 3390 ] 
14:41:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0514AE70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3391 ] 
14:41:41: Protected Area Size 0x28000
14:41:41: Bus Width           2
14:41:41: Secure Mode         0
14:41:41: Speed  Class        4
14:41:41: Perf Move           0
14:41:41: Au Size             9
14:41:41: Erase Size          15
14:41:41: Erase Timeout       1
14:41:41: Erase offset        1
14:41:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3392 ] 
14:41:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:41: Host Frequency set to 100000 KHz
14:41:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:41: ####CSD Registe 2.0 Values####
14:41:41: CSD_STRUCTURE                                 :0x1
14:41:41: Reserv1                                       :0x0
14:41:41: Time Access 1 TAAC                            :0xe
14:41:41: Time Access 2 NSAC*100                        :0x0
14:41:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:41: Card Command Classess CCC                     :0x5b5
14:41:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:41: DSR(driver stage register)  DSR_IMP           :0x0
14:41:41: Reserv2                                       :0x0
14:41:41: Device Size C_SIZE                            :0xedc8
14:41:41: Reserv3                                       :0x0
14:41:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:41: Reserv4                                       :0x0
14:41:42: Write Speed Factor R2W_FACTOR                 :0x2
14:41:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:42: FILE_FORMAT_GRP                               :0x0
14:41:42: COPY flag                                     :0x1
14:41:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:42: File_Format                                   :0x0
14:41:42: CRC                                           :0x0
14:41:42: ####CSD Registe Values####  

14:41:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 3393 ] 
14:41:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCC0>, <py_sfcl.CommandDataDefinition object at 0x05E0BC00>) , Command count = 3394 ] 
14:41:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:42: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0BCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F960>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F9F0>, <None>, <py_sfcl.Command23 object at 0x05E0FF30>) , Command count = 3395 ] 
14:41:42: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:44: Host Frequency set to 25000 KHz
14:41:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBAB0>, 0x0, True) , Command count = 3396 ] 
14:41:44: [GO18_globalSetVolt]### Host voltage value is set.
14:41:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B70>, 0x0, False) , Command count = 3397 ] 
14:41:44: [GO18_globalSetVolt]### Host voltage value is set.
14:41:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3398 ] 
14:41:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3399 ] 
14:41:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3400 ] 
14:41:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB10>, <py_sfcl.CommandDataDefinition object at 0x05DF52D0>) , Command count = 3401 ] 
14:41:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BBD0>, <py_sfcl.CommandDataDefinition object at 0x05E07ED0>) , Command count = 3402 ] 
14:41:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:44: [ SetCardRCA(0x1, 0xD555) , Command count = 3403 ] 
14:41:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:44: Host Frequency set to 25000 KHz
14:41:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:44: ####CSD Registe 2.0 Values####
14:41:44: CSD_STRUCTURE                                 :0x1
14:41:44: Reserv1                                       :0x0
14:41:44: Time Access 1 TAAC                            :0xe
14:41:44: Time Access 2 NSAC*100                        :0x0
14:41:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:44: Card Command Classess CCC                     :0x5b5
14:41:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:44: DSR(driver stage register)  DSR_IMP           :0x0
14:41:44: Reserv2                                       :0x0
14:41:44: Device Size C_SIZE                            :0xedc8
14:41:44: Reserv3                                       :0x0
14:41:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:44: Reserv4                                       :0x0
14:41:44: Write Speed Factor R2W_FACTOR                 :0x2
14:41:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:44: FILE_FORMAT_GRP                               :0x0
14:41:44: COPY flag                                     :0x1
14:41:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:44: File_Format                                   :0x0
14:41:44: CRC                                           :0x0
14:41:44: ####CSD Registe Values####  

14:41:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:44: [GetSCRRegisterEntry] Passed
14:41:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:44: Data_Status_After Erases          : 0
14:41:44: CPRM Security Support             : No Security
14:41:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:44: Spec. Version                     : Version 3.0X
14:41:44: Extended Security Support         : Extended_Security_Not_Supported
14:41:44: Command Support                   : COMMAND_SUPPORT
14:41:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CC0>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 3404 ] 
14:41:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0F210>) , Command count = 3405 ] 
14:41:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:45: [ SetBusWidth(0x4) , Command count = 3406 ] 
14:41:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3407 ] 
14:41:45: Protected Area Size 0x28000
14:41:45: Bus Width           2
14:41:45: Secure Mode         0
14:41:45: Speed  Class        4
14:41:45: Perf Move           0
14:41:45: Au Size             9
14:41:45: Erase Size          15
14:41:45: Erase Timeout       1
14:41:45: Erase offset        1
14:41:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3408 ] 
14:41:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:45: Host Frequency set to 100000 KHz
14:41:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:45: ####CSD Registe 2.0 Values####
14:41:45: CSD_STRUCTURE                                 :0x1
14:41:45: Reserv1                                       :0x0
14:41:45: Time Access 1 TAAC                            :0xe
14:41:45: Time Access 2 NSAC*100                        :0x0
14:41:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:45: Card Command Classess CCC                     :0x5b5
14:41:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:45: DSR(driver stage register)  DSR_IMP           :0x0
14:41:45: Reserv2                                       :0x0
14:41:45: Device Size C_SIZE                            :0xedc8
14:41:45: Reserv3                                       :0x0
14:41:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:45: Reserv4                                       :0x0
14:41:45: Write Speed Factor R2W_FACTOR                 :0x2
14:41:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:45: FILE_FORMAT_GRP                               :0x0
14:41:45: COPY flag                                     :0x1
14:41:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:45: File_Format                                   :0x0
14:41:45: CRC                                           :0x0
14:41:45: ####CSD Registe Values####  

14:41:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 3409 ] 
14:41:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F5A0>, <py_sfcl.CommandDataDefinition object at 0x05DF5F00>) , Command count = 3410 ] 
14:41:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00F90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5750>, <py_sfcl.PySEnhancedCmdData object at 0x05DF55A0>, <None>, <py_sfcl.Command23 object at 0x05DF54B0>) , Command count = 3411 ] 
14:41:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:47: Host Frequency set to 25000 KHz
14:41:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07AE0>, 0x0, True) , Command count = 3412 ] 
14:41:47: [GO18_globalSetVolt]### Host voltage value is set.
14:41:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5FC0>, 0x0, False) , Command count = 3413 ] 
14:41:47: [GO18_globalSetVolt]### Host voltage value is set.
14:41:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3414 ] 
14:41:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3415 ] 
14:41:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3416 ] 
14:41:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py_sfcl.CommandDataDefinition object at 0x05E001B0>) , Command count = 3417 ] 
14:41:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C60>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 3418 ] 
14:41:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:48: [ SetCardRCA(0x1, 0xD555) , Command count = 3419 ] 
14:41:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:48: Host Frequency set to 25000 KHz
14:41:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:48: ####CSD Registe 2.0 Values####
14:41:48: CSD_STRUCTURE                                 :0x1
14:41:48: Reserv1                                       :0x0
14:41:48: Time Access 1 TAAC                            :0xe
14:41:48: Time Access 2 NSAC*100                        :0x0
14:41:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:48: Card Command Classess CCC                     :0x5b5
14:41:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:48: DSR(driver stage register)  DSR_IMP           :0x0
14:41:48: Reserv2                                       :0x0
14:41:48: Device Size C_SIZE                            :0xedc8
14:41:48: Reserv3                                       :0x0
14:41:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:48: Reserv4                                       :0x0
14:41:48: Write Speed Factor R2W_FACTOR                 :0x2
14:41:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:48: FILE_FORMAT_GRP                               :0x0
14:41:48: COPY flag                                     :0x1
14:41:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:48: File_Format                                   :0x0
14:41:48: CRC                                           :0x0
14:41:48: ####CSD Registe Values####  

14:41:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:48: [GetSCRRegisterEntry] Passed
14:41:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:48: Data_Status_After Erases          : 0
14:41:48: CPRM Security Support             : No Security
14:41:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:48: Spec. Version                     : Version 3.0X
14:41:48: Extended Security Support         : Extended_Security_Not_Supported
14:41:48: Command Support                   : COMMAND_SUPPORT
14:41:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9810>, <py_sfcl.CommandDataDefinition object at 0x05DF5540>) , Command count = 3420 ] 
14:41:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E70>, <py_sfcl.CommandDataDefinition object at 0x05E07E70>) , Command count = 3421 ] 
14:41:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:48: [ SetBusWidth(0x4) , Command count = 3422 ] 
14:41:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3423 ] 
14:41:48: Protected Area Size 0x28000
14:41:48: Bus Width           2
14:41:48: Secure Mode         0
14:41:48: Speed  Class        4
14:41:48: Perf Move           0
14:41:48: Au Size             9
14:41:48: Erase Size          15
14:41:48: Erase Timeout       1
14:41:48: Erase offset        1
14:41:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3424 ] 
14:41:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:48: Host Frequency set to 100000 KHz
14:41:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:48: ####CSD Registe 2.0 Values####
14:41:48: CSD_STRUCTURE                                 :0x1
14:41:48: Reserv1                                       :0x0
14:41:48: Time Access 1 TAAC                            :0xe
14:41:48: Time Access 2 NSAC*100                        :0x0
14:41:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:48: Card Command Classess CCC                     :0x5b5
14:41:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:48: DSR(driver stage register)  DSR_IMP           :0x0
14:41:48: Reserv2                                       :0x0
14:41:48: Device Size C_SIZE                            :0xedc8
14:41:48: Reserv3                                       :0x0
14:41:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:48: Reserv4                                       :0x0
14:41:48: Write Speed Factor R2W_FACTOR                 :0x2
14:41:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:48: FILE_FORMAT_GRP                               :0x0
14:41:48: COPY flag                                     :0x1
14:41:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:48: File_Format                                   :0x0
14:41:48: CRC                                           :0x0
14:41:48: ####CSD Registe Values####  

14:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDE0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD50>) , Command count = 3425 ] 
14:41:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5BA0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD80>) , Command count = 3426 ] 
14:41:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:49: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF58D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBBA0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB750>, <None>, <py_sfcl.Command23 object at 0x05DF5930>) , Command count = 3427 ] 
14:41:49: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:51: Host Frequency set to 25000 KHz
14:41:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5D20>, 0x0, True) , Command count = 3428 ] 
14:41:51: [GO18_globalSetVolt]### Host voltage value is set.
14:41:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E046F0>, 0x0, False) , Command count = 3429 ] 
14:41:51: [GO18_globalSetVolt]### Host voltage value is set.
14:41:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3430 ] 
14:41:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3431 ] 
14:41:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3432 ] 
14:41:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5DE0>, <py_sfcl.CommandDataDefinition object at 0x05DFB030>) , Command count = 3433 ] 
14:41:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00090>, <py_sfcl.CommandDataDefinition object at 0x05E072A0>) , Command count = 3434 ] 
14:41:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:51: [ SetCardRCA(0x1, 0xD555) , Command count = 3435 ] 
14:41:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:51: Host Frequency set to 25000 KHz
14:41:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:51: ####CSD Registe 2.0 Values####
14:41:51: CSD_STRUCTURE                                 :0x1
14:41:51: Reserv1                                       :0x0
14:41:51: Time Access 1 TAAC                            :0xe
14:41:51: Time Access 2 NSAC*100                        :0x0
14:41:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:51: Card Command Classess CCC                     :0x5b5
14:41:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:51: DSR(driver stage register)  DSR_IMP           :0x0
14:41:51: Reserv2                                       :0x0
14:41:51: Device Size C_SIZE                            :0xedc8
14:41:51: Reserv3                                       :0x0
14:41:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:51: Reserv4                                       :0x0
14:41:51: Write Speed Factor R2W_FACTOR                 :0x2
14:41:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:51: FILE_FORMAT_GRP                               :0x0
14:41:51: COPY flag                                     :0x1
14:41:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:51: File_Format                                   :0x0
14:41:51: CRC                                           :0x0
14:41:51: ####CSD Registe Values####  

14:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:51: [GetSCRRegisterEntry] Passed
14:41:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:51: Data_Status_After Erases          : 0
14:41:51: CPRM Security Support             : No Security
14:41:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:51: Spec. Version                     : Version 3.0X
14:41:51: Extended Security Support         : Extended_Security_Not_Supported
14:41:51: Command Support                   : COMMAND_SUPPORT
14:41:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E005A0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA50>) , Command count = 3436 ] 
14:41:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF52A0>, <py_sfcl.CommandDataDefinition object at 0x05E07C60>) , Command count = 3437 ] 
14:41:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:51: [ SetBusWidth(0x4) , Command count = 3438 ] 
14:41:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3439 ] 
14:41:51: Protected Area Size 0x28000
14:41:51: Bus Width           2
14:41:51: Secure Mode         0
14:41:51: Speed  Class        4
14:41:51: Perf Move           0
14:41:51: Au Size             9
14:41:51: Erase Size          15
14:41:51: Erase Timeout       1
14:41:51: Erase offset        1
14:41:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3440 ] 
14:41:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:51: Host Frequency set to 100000 KHz
14:41:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:51: ####CSD Registe 2.0 Values####
14:41:51: CSD_STRUCTURE                                 :0x1
14:41:51: Reserv1                                       :0x0
14:41:51: Time Access 1 TAAC                            :0xe
14:41:52: Time Access 2 NSAC*100                        :0x0
14:41:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:52: Card Command Classess CCC                     :0x5b5
14:41:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:52: DSR(driver stage register)  DSR_IMP           :0x0
14:41:52: Reserv2                                       :0x0
14:41:52: Device Size C_SIZE                            :0xedc8
14:41:52: Reserv3                                       :0x0
14:41:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:52: Reserv4                                       :0x0
14:41:52: Write Speed Factor R2W_FACTOR                 :0x2
14:41:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:52: FILE_FORMAT_GRP                               :0x0
14:41:52: COPY flag                                     :0x1
14:41:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:52: File_Format                                   :0x0
14:41:52: CRC                                           :0x0
14:41:52: ####CSD Registe Values####  

14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 3441 ] 
14:41:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5E10>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 3442 ] 
14:41:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:52: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBA20>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBEA0>, <None>, <py_sfcl.Command23 object at 0x05DFB570>) , Command count = 3443 ] 
14:41:52: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:54: Host Frequency set to 25000 KHz
14:41:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5CF0>, 0x0, True) , Command count = 3444 ] 
14:41:54: [GO18_globalSetVolt]### Host voltage value is set.
14:41:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB3F0>, 0x0, False) , Command count = 3445 ] 
14:41:54: [GO18_globalSetVolt]### Host voltage value is set.
14:41:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3446 ] 
14:41:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3447 ] 
14:41:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3448 ] 
14:41:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB480>, <py_sfcl.CommandDataDefinition object at 0x05E0F510>) , Command count = 3449 ] 
14:41:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBD0>, <py_sfcl.CommandDataDefinition object at 0x05E00360>) , Command count = 3450 ] 
14:41:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:54: [ SetCardRCA(0x1, 0xD555) , Command count = 3451 ] 
14:41:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:55: Host Frequency set to 25000 KHz
14:41:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:55: ####CSD Registe 2.0 Values####
14:41:55: CSD_STRUCTURE                                 :0x1
14:41:55: Reserv1                                       :0x0
14:41:55: Time Access 1 TAAC                            :0xe
14:41:55: Time Access 2 NSAC*100                        :0x0
14:41:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:55: Card Command Classess CCC                     :0x5b5
14:41:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:55: DSR(driver stage register)  DSR_IMP           :0x0
14:41:55: Reserv2                                       :0x0
14:41:55: Device Size C_SIZE                            :0xedc8
14:41:55: Reserv3                                       :0x0
14:41:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:55: Reserv4                                       :0x0
14:41:55: Write Speed Factor R2W_FACTOR                 :0x2
14:41:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:55: FILE_FORMAT_GRP                               :0x0
14:41:55: COPY flag                                     :0x1
14:41:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:55: File_Format                                   :0x0
14:41:55: CRC                                           :0x0
14:41:55: ####CSD Registe Values####  

14:41:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:55: [GetSCRRegisterEntry] Passed
14:41:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:55: Data_Status_After Erases          : 0
14:41:55: CPRM Security Support             : No Security
14:41:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:55: Spec. Version                     : Version 3.0X
14:41:55: Extended Security Support         : Extended_Security_Not_Supported
14:41:55: Command Support                   : COMMAND_SUPPORT
14:41:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB9F0>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 3452 ] 
14:41:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE40>, <py_sfcl.CommandDataDefinition object at 0x05DFB330>) , Command count = 3453 ] 
14:41:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:55: [ SetBusWidth(0x4) , Command count = 3454 ] 
14:41:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3455 ] 
14:41:55: Protected Area Size 0x28000
14:41:55: Bus Width           2
14:41:55: Secure Mode         0
14:41:55: Speed  Class        4
14:41:55: Perf Move           0
14:41:55: Au Size             9
14:41:55: Erase Size          15
14:41:55: Erase Timeout       1
14:41:55: Erase offset        1
14:41:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3456 ] 
14:41:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:55: Host Frequency set to 100000 KHz
14:41:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:55: ####CSD Registe 2.0 Values####
14:41:55: CSD_STRUCTURE                                 :0x1
14:41:55: Reserv1                                       :0x0
14:41:55: Time Access 1 TAAC                            :0xe
14:41:55: Time Access 2 NSAC*100                        :0x0
14:41:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:55: Card Command Classess CCC                     :0x5b5
14:41:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:55: DSR(driver stage register)  DSR_IMP           :0x0
14:41:55: Reserv2                                       :0x0
14:41:55: Device Size C_SIZE                            :0xedc8
14:41:55: Reserv3                                       :0x0
14:41:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:55: Reserv4                                       :0x0
14:41:55: Write Speed Factor R2W_FACTOR                 :0x2
14:41:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:55: FILE_FORMAT_GRP                               :0x0
14:41:55: COPY flag                                     :0x1
14:41:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:55: File_Format                                   :0x0
14:41:55: CRC                                           :0x0
14:41:55: ####CSD Registe Values####  

14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04390>, <py_sfcl.CommandDataDefinition object at 0x05E0F330>) , Command count = 3457 ] 
14:41:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBFC0>, <py_sfcl.CommandDataDefinition object at 0x05E004E0>) , Command count = 3458 ] 
14:41:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E008D0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5CC0>, <None>, <py_sfcl.Command23 object at 0x05DFB900>) , Command count = 3459 ] 
14:41:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:58: Host Frequency set to 25000 KHz
14:41:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB180>, 0x0, True) , Command count = 3460 ] 
14:41:58: [GO18_globalSetVolt]### Host voltage value is set.
14:41:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5C90>, 0x0, False) , Command count = 3461 ] 
14:41:58: [GO18_globalSetVolt]### Host voltage value is set.
14:41:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3462 ] 
14:41:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3463 ] 
14:41:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3464 ] 
14:41:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB540>, <py_sfcl.CommandDataDefinition object at 0x05DFBB70>) , Command count = 3465 ] 
14:41:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57B0>, <py_sfcl.CommandDataDefinition object at 0x05E07D50>) , Command count = 3466 ] 
14:41:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3467 ] 
14:41:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:58: Host Frequency set to 25000 KHz
14:41:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:58: ####CSD Registe 2.0 Values####
14:41:58: CSD_STRUCTURE                                 :0x1
14:41:58: Reserv1                                       :0x0
14:41:58: Time Access 1 TAAC                            :0xe
14:41:58: Time Access 2 NSAC*100                        :0x0
14:41:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:58: Card Command Classess CCC                     :0x5b5
14:41:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:58: DSR(driver stage register)  DSR_IMP           :0x0
14:41:58: Reserv2                                       :0x0
14:41:58: Device Size C_SIZE                            :0xedc8
14:41:58: Reserv3                                       :0x0
14:41:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:58: Reserv4                                       :0x0
14:41:58: Write Speed Factor R2W_FACTOR                 :0x2
14:41:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:58: FILE_FORMAT_GRP                               :0x0
14:41:58: COPY flag                                     :0x1
14:41:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:58: File_Format                                   :0x0
14:41:58: CRC                                           :0x0
14:41:58: ####CSD Registe Values####  

14:41:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:58: [GetSCRRegisterEntry] Passed
14:41:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:58: Data_Status_After Erases          : 0
14:41:58: CPRM Security Support             : No Security
14:41:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:58: Spec. Version                     : Version 3.0X
14:41:58: Extended Security Support         : Extended_Security_Not_Supported
14:41:58: Command Support                   : COMMAND_SUPPORT
14:41:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04150>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 3468 ] 
14:41:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF90>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 3469 ] 
14:41:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:58: [ SetBusWidth(0x4) , Command count = 3470 ] 
14:41:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FA20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3471 ] 
14:41:58: Protected Area Size 0x28000
14:41:58: Bus Width           2
14:41:58: Secure Mode         0
14:41:58: Speed  Class        4
14:41:58: Perf Move           0
14:41:58: Au Size             9
14:41:58: Erase Size          15
14:41:58: Erase Timeout       1
14:41:58: Erase offset        1
14:41:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3472 ] 
14:41:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:58: Host Frequency set to 100000 KHz
14:41:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:58: ####CSD Registe 2.0 Values####
14:41:58: CSD_STRUCTURE                                 :0x1
14:41:58: Reserv1                                       :0x0
14:41:58: Time Access 1 TAAC                            :0xe
14:41:58: Time Access 2 NSAC*100                        :0x0
14:41:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:58: Card Command Classess CCC                     :0x5b5
14:41:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:58: DSR(driver stage register)  DSR_IMP           :0x0
14:41:58: Reserv2                                       :0x0
14:41:58: Device Size C_SIZE                            :0xedc8
14:41:58: Reserv3                                       :0x0
14:41:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:58: Reserv4                                       :0x0
14:41:59: Write Speed Factor R2W_FACTOR                 :0x2
14:41:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:59: FILE_FORMAT_GRP                               :0x0
14:41:59: COPY flag                                     :0x1
14:41:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:59: File_Format                                   :0x0
14:41:59: CRC                                           :0x0
14:41:59: ####CSD Registe Values####  

14:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC60>) , Command count = 3473 ] 
14:41:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB810>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 3474 ] 
14:41:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:59: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:41:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:41:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E000F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00BD0>, <None>, <py_sfcl.Command23 object at 0x05DF5E10>) , Command count = 3475 ] 
14:41:59: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:41:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:01: Host Frequency set to 25000 KHz
14:42:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00B40>, 0x0, True) , Command count = 3476 ] 
14:42:01: [GO18_globalSetVolt]### Host voltage value is set.
14:42:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00240>, 0x0, False) , Command count = 3477 ] 
14:42:01: [GO18_globalSetVolt]### Host voltage value is set.
14:42:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3478 ] 
14:42:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3479 ] 
14:42:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3480 ] 
14:42:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FA80>, <py_sfcl.CommandDataDefinition object at 0x05E0FFC0>) , Command count = 3481 ] 
14:42:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE70>, <py_sfcl.CommandDataDefinition object at 0x05E005D0>) , Command count = 3482 ] 
14:42:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:01: [ SetCardRCA(0x1, 0xD555) , Command count = 3483 ] 
14:42:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:01: Host Frequency set to 25000 KHz
14:42:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:01: ####CSD Registe 2.0 Values####
14:42:01: CSD_STRUCTURE                                 :0x1
14:42:01: Reserv1                                       :0x0
14:42:01: Time Access 1 TAAC                            :0xe
14:42:01: Time Access 2 NSAC*100                        :0x0
14:42:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:01: Card Command Classess CCC                     :0x5b5
14:42:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:01: DSR(driver stage register)  DSR_IMP           :0x0
14:42:01: Reserv2                                       :0x0
14:42:01: Device Size C_SIZE                            :0xedc8
14:42:01: Reserv3                                       :0x0
14:42:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:01: Reserv4                                       :0x0
14:42:01: Write Speed Factor R2W_FACTOR                 :0x2
14:42:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:01: FILE_FORMAT_GRP                               :0x0
14:42:01: COPY flag                                     :0x1
14:42:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:01: File_Format                                   :0x0
14:42:01: CRC                                           :0x0
14:42:01: ####CSD Registe Values####  

14:42:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:01: [GetSCRRegisterEntry] Passed
14:42:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:01: Data_Status_After Erases          : 0
14:42:01: CPRM Security Support             : No Security
14:42:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:01: Spec. Version                     : Version 3.0X
14:42:01: Extended Security Support         : Extended_Security_Not_Supported
14:42:01: Command Support                   : COMMAND_SUPPORT
14:42:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2A0>, <py_sfcl.CommandDataDefinition object at 0x05E00D50>) , Command count = 3484 ] 
14:42:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB270>, <py_sfcl.CommandDataDefinition object at 0x05E0FAE0>) , Command count = 3485 ] 
14:42:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:01: [ SetBusWidth(0x4) , Command count = 3486 ] 
14:42:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3487 ] 
14:42:01: Protected Area Size 0x28000
14:42:01: Bus Width           2
14:42:01: Secure Mode         0
14:42:01: Speed  Class        4
14:42:01: Perf Move           0
14:42:01: Au Size             9
14:42:01: Erase Size          15
14:42:01: Erase Timeout       1
14:42:01: Erase offset        1
14:42:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3488 ] 
14:42:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:01: Host Frequency set to 100000 KHz
14:42:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:01: ####CSD Registe 2.0 Values####
14:42:01: CSD_STRUCTURE                                 :0x1
14:42:01: Reserv1                                       :0x0
14:42:01: Time Access 1 TAAC                            :0xe
14:42:01: Time Access 2 NSAC*100                        :0x0
14:42:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:01: Card Command Classess CCC                     :0x5b5
14:42:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:02: DSR(driver stage register)  DSR_IMP           :0x0
14:42:02: Reserv2                                       :0x0
14:42:02: Device Size C_SIZE                            :0xedc8
14:42:02: Reserv3                                       :0x0
14:42:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:02: Reserv4                                       :0x0
14:42:02: Write Speed Factor R2W_FACTOR                 :0x2
14:42:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:02: FILE_FORMAT_GRP                               :0x0
14:42:02: COPY flag                                     :0x1
14:42:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:02: File_Format                                   :0x0
14:42:02: CRC                                           :0x0
14:42:02: ####CSD Registe Values####  

14:42:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB40>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 3489 ] 
14:42:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00180>, <py_sfcl.CommandDataDefinition object at 0x05E0F7B0>) , Command count = 3490 ] 
14:42:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04120>, <py_sfcl.PySEnhancedCmdData object at 0x05E04BD0>, <None>, <py_sfcl.Command23 object at 0x05E00270>) , Command count = 3491 ] 
14:42:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:04: Host Frequency set to 25000 KHz
14:42:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB990>, 0x0, True) , Command count = 3492 ] 
14:42:04: [GO18_globalSetVolt]### Host voltage value is set.
14:42:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00DE0>, 0x0, False) , Command count = 3493 ] 
14:42:04: [GO18_globalSetVolt]### Host voltage value is set.
14:42:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3494 ] 
14:42:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3495 ] 
14:42:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3496 ] 
14:42:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00570>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 3497 ] 
14:42:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00330>, <py_sfcl.CommandDataDefinition object at 0x05E00C30>) , Command count = 3498 ] 
14:42:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:05: [ SetCardRCA(0x1, 0xD555) , Command count = 3499 ] 
14:42:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:05: Host Frequency set to 25000 KHz
14:42:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:05: ####CSD Registe 2.0 Values####
14:42:05: CSD_STRUCTURE                                 :0x1
14:42:05: Reserv1                                       :0x0
14:42:05: Time Access 1 TAAC                            :0xe
14:42:05: Time Access 2 NSAC*100                        :0x0
14:42:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:05: Card Command Classess CCC                     :0x5b5
14:42:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:05: DSR(driver stage register)  DSR_IMP           :0x0
14:42:05: Reserv2                                       :0x0
14:42:05: Device Size C_SIZE                            :0xedc8
14:42:05: Reserv3                                       :0x0
14:42:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:05: Reserv4                                       :0x0
14:42:05: Write Speed Factor R2W_FACTOR                 :0x2
14:42:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:05: FILE_FORMAT_GRP                               :0x0
14:42:05: COPY flag                                     :0x1
14:42:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:05: File_Format                                   :0x0
14:42:05: CRC                                           :0x0
14:42:05: ####CSD Registe Values####  

14:42:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:05: [GetSCRRegisterEntry] Passed
14:42:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:05: Data_Status_After Erases          : 0
14:42:05: CPRM Security Support             : No Security
14:42:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:05: Spec. Version                     : Version 3.0X
14:42:05: Extended Security Support         : Extended_Security_Not_Supported
14:42:05: Command Support                   : COMMAND_SUPPORT
14:42:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B70>, <py_sfcl.CommandDataDefinition object at 0x05E00600>) , Command count = 3500 ] 
14:42:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A20>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 3501 ] 
14:42:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:05: [ SetBusWidth(0x4) , Command count = 3502 ] 
14:42:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3503 ] 
14:42:05: Protected Area Size 0x28000
14:42:05: Bus Width           2
14:42:05: Secure Mode         0
14:42:05: Speed  Class        4
14:42:05: Perf Move           0
14:42:05: Au Size             9
14:42:05: Erase Size          15
14:42:05: Erase Timeout       1
14:42:05: Erase offset        1
14:42:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3504 ] 
14:42:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:05: Host Frequency set to 100000 KHz
14:42:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:05: ####CSD Registe 2.0 Values####
14:42:05: CSD_STRUCTURE                                 :0x1
14:42:05: Reserv1                                       :0x0
14:42:05: Time Access 1 TAAC                            :0xe
14:42:05: Time Access 2 NSAC*100                        :0x0
14:42:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:05: Card Command Classess CCC                     :0x5b5
14:42:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:05: DSR(driver stage register)  DSR_IMP           :0x0
14:42:05: Reserv2                                       :0x0
14:42:05: Device Size C_SIZE                            :0xedc8
14:42:05: Reserv3                                       :0x0
14:42:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:05: Reserv4                                       :0x0
14:42:05: Write Speed Factor R2W_FACTOR                 :0x2
14:42:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:05: FILE_FORMAT_GRP                               :0x0
14:42:05: COPY flag                                     :0x1
14:42:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:05: File_Format                                   :0x0
14:42:05: CRC                                           :0x0
14:42:05: ####CSD Registe Values####  

14:42:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00900>, <py_sfcl.CommandDataDefinition object at 0x05E0F750>) , Command count = 3505 ] 
14:42:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B450>, <py_sfcl.CommandDataDefinition object at 0x05E04510>) , Command count = 3506 ] 
14:42:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04300>, <py_sfcl.PySEnhancedCmdData object at 0x05E049F0>, <None>, <py_sfcl.Command23 object at 0x05E04240>) , Command count = 3507 ] 
14:42:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:08: Host Frequency set to 25000 KHz
14:42:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E046C0>, 0x0, True) , Command count = 3508 ] 
14:42:08: [GO18_globalSetVolt]### Host voltage value is set.
14:42:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00C60>, 0x0, False) , Command count = 3509 ] 
14:42:08: [GO18_globalSetVolt]### Host voltage value is set.
14:42:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3510 ] 
14:42:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3511 ] 
14:42:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3512 ] 
14:42:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A80>, <py_sfcl.CommandDataDefinition object at 0x05E00480>) , Command count = 3513 ] 
14:42:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F930>) , Command count = 3514 ] 
14:42:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:08: [ SetCardRCA(0x1, 0xD555) , Command count = 3515 ] 
14:42:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:08: Host Frequency set to 25000 KHz
14:42:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:08: ####CSD Registe 2.0 Values####
14:42:08: CSD_STRUCTURE                                 :0x1
14:42:08: Reserv1                                       :0x0
14:42:08: Time Access 1 TAAC                            :0xe
14:42:08: Time Access 2 NSAC*100                        :0x0
14:42:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:08: Card Command Classess CCC                     :0x5b5
14:42:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:08: DSR(driver stage register)  DSR_IMP           :0x0
14:42:08: Reserv2                                       :0x0
14:42:08: Device Size C_SIZE                            :0xedc8
14:42:08: Reserv3                                       :0x0
14:42:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:08: Reserv4                                       :0x0
14:42:08: Write Speed Factor R2W_FACTOR                 :0x2
14:42:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:08: FILE_FORMAT_GRP                               :0x0
14:42:08: COPY flag                                     :0x1
14:42:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:08: File_Format                                   :0x0
14:42:08: CRC                                           :0x0
14:42:08: ####CSD Registe Values####  

14:42:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:08: [GetSCRRegisterEntry] Passed
14:42:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:08: Data_Status_After Erases          : 0
14:42:08: CPRM Security Support             : No Security
14:42:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:08: Spec. Version                     : Version 3.0X
14:42:08: Extended Security Support         : Extended_Security_Not_Supported
14:42:08: Command Support                   : COMMAND_SUPPORT
14:42:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B090>, <py_sfcl.CommandDataDefinition object at 0x05E043C0>) , Command count = 3516 ] 
14:42:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07E10>, <py_sfcl.CommandDataDefinition object at 0x05E00ED0>) , Command count = 3517 ] 
14:42:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:08: [ SetBusWidth(0x4) , Command count = 3518 ] 
14:42:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3519 ] 
14:42:08: Protected Area Size 0x28000
14:42:08: Bus Width           2
14:42:08: Secure Mode         0
14:42:08: Speed  Class        4
14:42:08: Perf Move           0
14:42:08: Au Size             9
14:42:08: Erase Size          15
14:42:08: Erase Timeout       1
14:42:08: Erase offset        1
14:42:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3520 ] 
14:42:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:08: Host Frequency set to 100000 KHz
14:42:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:08: ####CSD Registe 2.0 Values####
14:42:08: CSD_STRUCTURE                                 :0x1
14:42:08: Reserv1                                       :0x0
14:42:08: Time Access 1 TAAC                            :0xe
14:42:08: Time Access 2 NSAC*100                        :0x0
14:42:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:08: Card Command Classess CCC                     :0x5b5
14:42:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:09: DSR(driver stage register)  DSR_IMP           :0x0
14:42:09: Reserv2                                       :0x0
14:42:09: Device Size C_SIZE                            :0xedc8
14:42:09: Reserv3                                       :0x0
14:42:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:09: Reserv4                                       :0x0
14:42:09: Write Speed Factor R2W_FACTOR                 :0x2
14:42:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:09: FILE_FORMAT_GRP                               :0x0
14:42:09: COPY flag                                     :0x1
14:42:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:09: File_Format                                   :0x0
14:42:09: CRC                                           :0x0
14:42:09: ####CSD Registe Values####  

14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E003C0>, <py_sfcl.CommandDataDefinition object at 0x05E009F0>) , Command count = 3521 ] 
14:42:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F630>, <py_sfcl.CommandDataDefinition object at 0x05E04ED0>) , Command count = 3522 ] 
14:42:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:09: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04780>, <py_sfcl.PySEnhancedCmdData object at 0x05E04510>, <None>, <py_sfcl.Command23 object at 0x05E04060>) , Command count = 3523 ] 
14:42:09: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:11: Host Frequency set to 25000 KHz
14:42:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E045A0>, 0x0, True) , Command count = 3524 ] 
14:42:11: [GO18_globalSetVolt]### Host voltage value is set.
14:42:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04BA0>, 0x0, False) , Command count = 3525 ] 
14:42:11: [GO18_globalSetVolt]### Host voltage value is set.
14:42:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3526 ] 
14:42:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3527 ] 
14:42:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3528 ] 
14:42:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E04B40>) , Command count = 3529 ] 
14:42:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04270>, <py_sfcl.CommandDataDefinition object at 0x05E00C90>) , Command count = 3530 ] 
14:42:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3531 ] 
14:42:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:12: Host Frequency set to 25000 KHz
14:42:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:12: ####CSD Registe 2.0 Values####
14:42:12: CSD_STRUCTURE                                 :0x1
14:42:12: Reserv1                                       :0x0
14:42:12: Time Access 1 TAAC                            :0xe
14:42:12: Time Access 2 NSAC*100                        :0x0
14:42:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:12: Card Command Classess CCC                     :0x5b5
14:42:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:12: DSR(driver stage register)  DSR_IMP           :0x0
14:42:12: Reserv2                                       :0x0
14:42:12: Device Size C_SIZE                            :0xedc8
14:42:12: Reserv3                                       :0x0
14:42:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:12: Reserv4                                       :0x0
14:42:12: Write Speed Factor R2W_FACTOR                 :0x2
14:42:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:12: FILE_FORMAT_GRP                               :0x0
14:42:12: COPY flag                                     :0x1
14:42:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:12: File_Format                                   :0x0
14:42:12: CRC                                           :0x0
14:42:12: ####CSD Registe Values####  

14:42:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:12: [GetSCRRegisterEntry] Passed
14:42:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:12: Data_Status_After Erases          : 0
14:42:12: CPRM Security Support             : No Security
14:42:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:12: Spec. Version                     : Version 3.0X
14:42:12: Extended Security Support         : Extended_Security_Not_Supported
14:42:12: Command Support                   : COMMAND_SUPPORT
14:42:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04960>, <py_sfcl.CommandDataDefinition object at 0x05E04F00>) , Command count = 3532 ] 
14:42:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00FC0>, <py_sfcl.CommandDataDefinition object at 0x05E00E40>) , Command count = 3533 ] 
14:42:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:12: [ SetBusWidth(0x4) , Command count = 3534 ] 
14:42:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E079F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3535 ] 
14:42:12: Protected Area Size 0x28000
14:42:12: Bus Width           2
14:42:12: Secure Mode         0
14:42:12: Speed  Class        4
14:42:12: Perf Move           0
14:42:12: Au Size             9
14:42:12: Erase Size          15
14:42:12: Erase Timeout       1
14:42:12: Erase offset        1
14:42:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3536 ] 
14:42:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:12: Host Frequency set to 100000 KHz
14:42:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:12: ####CSD Registe 2.0 Values####
14:42:12: CSD_STRUCTURE                                 :0x1
14:42:12: Reserv1                                       :0x0
14:42:12: Time Access 1 TAAC                            :0xe
14:42:12: Time Access 2 NSAC*100                        :0x0
14:42:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:12: Card Command Classess CCC                     :0x5b5
14:42:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:12: DSR(driver stage register)  DSR_IMP           :0x0
14:42:12: Reserv2                                       :0x0
14:42:12: Device Size C_SIZE                            :0xedc8
14:42:12: Reserv3                                       :0x0
14:42:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:12: Reserv4                                       :0x0
14:42:12: Write Speed Factor R2W_FACTOR                 :0x2
14:42:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:12: FILE_FORMAT_GRP                               :0x0
14:42:12: COPY flag                                     :0x1
14:42:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:12: File_Format                                   :0x0
14:42:12: CRC                                           :0x0
14:42:12: ####CSD Registe Values####  

14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F00>, <py_sfcl.CommandDataDefinition object at 0x05E07450>) , Command count = 3537 ] 
14:42:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07C00>, <py_sfcl.CommandDataDefinition object at 0x05E0F2D0>) , Command count = 3538 ] 
14:42:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:12: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E075D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F6C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E101E0>, <None>, <py_sfcl.Command23 object at 0x05E04180>) , Command count = 3539 ] 
14:42:12: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:15: Host Frequency set to 25000 KHz
14:42:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04720>, 0x0, True) , Command count = 3540 ] 
14:42:15: [GO18_globalSetVolt]### Host voltage value is set.
14:42:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04FC0>, 0x0, False) , Command count = 3541 ] 
14:42:15: [GO18_globalSetVolt]### Host voltage value is set.
14:42:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3542 ] 
14:42:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3543 ] 
14:42:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3544 ] 
14:42:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B2D0>, <py_sfcl.CommandDataDefinition object at 0x05E077E0>) , Command count = 3545 ] 
14:42:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00210>, <py_sfcl.CommandDataDefinition object at 0x05E0B240>) , Command count = 3546 ] 
14:42:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3547 ] 
14:42:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:15: Host Frequency set to 25000 KHz
14:42:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:15: ####CSD Registe 2.0 Values####
14:42:15: CSD_STRUCTURE                                 :0x1
14:42:15: Reserv1                                       :0x0
14:42:15: Time Access 1 TAAC                            :0xe
14:42:15: Time Access 2 NSAC*100                        :0x0
14:42:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:15: Card Command Classess CCC                     :0x5b5
14:42:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:15: DSR(driver stage register)  DSR_IMP           :0x0
14:42:15: Reserv2                                       :0x0
14:42:15: Device Size C_SIZE                            :0xedc8
14:42:15: Reserv3                                       :0x0
14:42:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:15: Reserv4                                       :0x0
14:42:15: Write Speed Factor R2W_FACTOR                 :0x2
14:42:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:15: FILE_FORMAT_GRP                               :0x0
14:42:15: COPY flag                                     :0x1
14:42:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:15: File_Format                                   :0x0
14:42:15: CRC                                           :0x0
14:42:15: ####CSD Registe Values####  

14:42:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:15: [GetSCRRegisterEntry] Passed
14:42:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:15: Data_Status_After Erases          : 0
14:42:15: CPRM Security Support             : No Security
14:42:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:15: Spec. Version                     : Version 3.0X
14:42:15: Extended Security Support         : Extended_Security_Not_Supported
14:42:15: Command Support                   : COMMAND_SUPPORT
14:42:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B810>) , Command count = 3548 ] 
14:42:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 3549 ] 
14:42:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:15: [ SetBusWidth(0x4) , Command count = 3550 ] 
14:42:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3551 ] 
14:42:15: Protected Area Size 0x28000
14:42:15: Bus Width           2
14:42:15: Secure Mode         0
14:42:15: Speed  Class        4
14:42:15: Perf Move           0
14:42:15: Au Size             9
14:42:15: Erase Size          15
14:42:15: Erase Timeout       1
14:42:15: Erase offset        1
14:42:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3552 ] 
14:42:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:15: Host Frequency set to 100000 KHz
14:42:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:15: ####CSD Registe 2.0 Values####
14:42:15: CSD_STRUCTURE                                 :0x1
14:42:15: Reserv1                                       :0x0
14:42:15: Time Access 1 TAAC                            :0xe
14:42:15: Time Access 2 NSAC*100                        :0x0
14:42:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:15: Card Command Classess CCC                     :0x5b5
14:42:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:15: DSR(driver stage register)  DSR_IMP           :0x0
14:42:15: Reserv2                                       :0x0
14:42:15: Device Size C_SIZE                            :0xedc8
14:42:15: Reserv3                                       :0x0
14:42:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:15: Reserv4                                       :0x0
14:42:16: Write Speed Factor R2W_FACTOR                 :0x2
14:42:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:16: FILE_FORMAT_GRP                               :0x0
14:42:16: COPY flag                                     :0x1
14:42:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:16: File_Format                                   :0x0
14:42:16: CRC                                           :0x0
14:42:16: ####CSD Registe Values####  

14:42:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E40>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 3553 ] 
14:42:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F30>, <py_sfcl.CommandDataDefinition object at 0x05E079F0>) , Command count = 3554 ] 
14:42:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07C30>, <py_sfcl.PySEnhancedCmdData object at 0x05E07600>, <None>, <py_sfcl.Command23 object at 0x05E07E40>) , Command count = 3555 ] 
14:42:16: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:18: Host Frequency set to 25000 KHz
14:42:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04CF0>, 0x0, True) , Command count = 3556 ] 
14:42:18: [GO18_globalSetVolt]### Host voltage value is set.
14:42:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5C00>, 0x0, False) , Command count = 3557 ] 
14:42:18: [GO18_globalSetVolt]### Host voltage value is set.
14:42:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3558 ] 
14:42:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3559 ] 
14:42:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3560 ] 
14:42:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07990>, <py_sfcl.CommandDataDefinition object at 0x05E071E0>) , Command count = 3561 ] 
14:42:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04030>, <py_sfcl.CommandDataDefinition object at 0x05E0B900>) , Command count = 3562 ] 
14:42:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:18: [ SetCardRCA(0x1, 0xD555) , Command count = 3563 ] 
14:42:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:18: Host Frequency set to 25000 KHz
14:42:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:18: ####CSD Registe 2.0 Values####
14:42:18: CSD_STRUCTURE                                 :0x1
14:42:18: Reserv1                                       :0x0
14:42:18: Time Access 1 TAAC                            :0xe
14:42:18: Time Access 2 NSAC*100                        :0x0
14:42:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:18: Card Command Classess CCC                     :0x5b5
14:42:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:18: DSR(driver stage register)  DSR_IMP           :0x0
14:42:18: Reserv2                                       :0x0
14:42:18: Device Size C_SIZE                            :0xedc8
14:42:18: Reserv3                                       :0x0
14:42:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:18: Reserv4                                       :0x0
14:42:18: Write Speed Factor R2W_FACTOR                 :0x2
14:42:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:18: FILE_FORMAT_GRP                               :0x0
14:42:18: COPY flag                                     :0x1
14:42:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:18: File_Format                                   :0x0
14:42:18: CRC                                           :0x0
14:42:18: ####CSD Registe Values####  

14:42:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:18: [GetSCRRegisterEntry] Passed
14:42:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:18: Data_Status_After Erases          : 0
14:42:18: CPRM Security Support             : No Security
14:42:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:18: Spec. Version                     : Version 3.0X
14:42:18: Extended Security Support         : Extended_Security_Not_Supported
14:42:18: Command Support                   : COMMAND_SUPPORT
14:42:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A50>, <py_sfcl.CommandDataDefinition object at 0x05DF5AE0>) , Command count = 3564 ] 
14:42:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B690>, <py_sfcl.CommandDataDefinition object at 0x05E0B2A0>) , Command count = 3565 ] 
14:42:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:18: [ SetBusWidth(0x4) , Command count = 3566 ] 
14:42:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3567 ] 
14:42:18: Protected Area Size 0x28000
14:42:18: Bus Width           2
14:42:18: Secure Mode         0
14:42:18: Speed  Class        4
14:42:18: Perf Move           0
14:42:18: Au Size             9
14:42:18: Erase Size          15
14:42:18: Erase Timeout       1
14:42:18: Erase offset        1
14:42:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3568 ] 
14:42:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:18: Host Frequency set to 100000 KHz
14:42:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:18: ####CSD Registe 2.0 Values####
14:42:18: CSD_STRUCTURE                                 :0x1
14:42:18: Reserv1                                       :0x0
14:42:18: Time Access 1 TAAC                            :0xe
14:42:19: Time Access 2 NSAC*100                        :0x0
14:42:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:19: Card Command Classess CCC                     :0x5b5
14:42:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:19: DSR(driver stage register)  DSR_IMP           :0x0
14:42:19: Reserv2                                       :0x0
14:42:19: Device Size C_SIZE                            :0xedc8
14:42:19: Reserv3                                       :0x0
14:42:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:19: Reserv4                                       :0x0
14:42:19: Write Speed Factor R2W_FACTOR                 :0x2
14:42:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:19: FILE_FORMAT_GRP                               :0x0
14:42:19: COPY flag                                     :0x1
14:42:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:19: File_Format                                   :0x0
14:42:19: CRC                                           :0x0
14:42:19: ####CSD Registe Values####  

14:42:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9FC0>, <py_sfcl.CommandDataDefinition object at 0x05E04630>) , Command count = 3569 ] 
14:42:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB8D0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF60>) , Command count = 3570 ] 
14:42:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:19: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B8A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BE10>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B030>, <None>, <py_sfcl.Command23 object at 0x05E077B0>) , Command count = 3571 ] 
14:42:19: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:21: Host Frequency set to 25000 KHz
14:42:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B1E0>, 0x0, True) , Command count = 3572 ] 
14:42:21: [GO18_globalSetVolt]### Host voltage value is set.
14:42:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07510>, 0x0, False) , Command count = 3573 ] 
14:42:21: [GO18_globalSetVolt]### Host voltage value is set.
14:42:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3574 ] 
14:42:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3575 ] 
14:42:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3576 ] 
14:42:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B300>, <py_sfcl.CommandDataDefinition object at 0x05E0B4B0>) , Command count = 3577 ] 
14:42:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A80>, <py_sfcl.CommandDataDefinition object at 0x05E0BA80>) , Command count = 3578 ] 
14:42:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3579 ] 
14:42:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:22: Host Frequency set to 25000 KHz
14:42:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:22: ####CSD Registe 2.0 Values####
14:42:22: CSD_STRUCTURE                                 :0x1
14:42:22: Reserv1                                       :0x0
14:42:22: Time Access 1 TAAC                            :0xe
14:42:22: Time Access 2 NSAC*100                        :0x0
14:42:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:22: Card Command Classess CCC                     :0x5b5
14:42:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:22: DSR(driver stage register)  DSR_IMP           :0x0
14:42:22: Reserv2                                       :0x0
14:42:22: Device Size C_SIZE                            :0xedc8
14:42:22: Reserv3                                       :0x0
14:42:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:22: Reserv4                                       :0x0
14:42:22: Write Speed Factor R2W_FACTOR                 :0x2
14:42:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:22: FILE_FORMAT_GRP                               :0x0
14:42:22: COPY flag                                     :0x1
14:42:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:22: File_Format                                   :0x0
14:42:22: CRC                                           :0x0
14:42:22: ####CSD Registe Values####  

14:42:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:22: [GetSCRRegisterEntry] Passed
14:42:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:22: Data_Status_After Erases          : 0
14:42:22: CPRM Security Support             : No Security
14:42:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:22: Spec. Version                     : Version 3.0X
14:42:22: Extended Security Support         : Extended_Security_Not_Supported
14:42:22: Command Support                   : COMMAND_SUPPORT
14:42:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07360>, <py_sfcl.CommandDataDefinition object at 0x05E0B210>) , Command count = 3580 ] 
14:42:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F120>, <py_sfcl.CommandDataDefinition object at 0x05E0F450>) , Command count = 3581 ] 
14:42:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:22: [ SetBusWidth(0x4) , Command count = 3582 ] 
14:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3583 ] 
14:42:22: Protected Area Size 0x28000
14:42:22: Bus Width           2
14:42:22: Secure Mode         0
14:42:22: Speed  Class        4
14:42:22: Perf Move           0
14:42:22: Au Size             9
14:42:22: Erase Size          15
14:42:22: Erase Timeout       1
14:42:22: Erase offset        1
14:42:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3584 ] 
14:42:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:22: Host Frequency set to 100000 KHz
14:42:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:22: ####CSD Registe 2.0 Values####
14:42:22: CSD_STRUCTURE                                 :0x1
14:42:22: Reserv1                                       :0x0
14:42:22: Time Access 1 TAAC                            :0xe
14:42:22: Time Access 2 NSAC*100                        :0x0
14:42:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:22: Card Command Classess CCC                     :0x5b5
14:42:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:22: DSR(driver stage register)  DSR_IMP           :0x0
14:42:22: Reserv2                                       :0x0
14:42:22: Device Size C_SIZE                            :0xedc8
14:42:22: Reserv3                                       :0x0
14:42:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:22: Reserv4                                       :0x0
14:42:22: Write Speed Factor R2W_FACTOR                 :0x2
14:42:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:22: FILE_FORMAT_GRP                               :0x0
14:42:22: COPY flag                                     :0x1
14:42:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:22: File_Format                                   :0x0
14:42:22: CRC                                           :0x0
14:42:22: ####CSD Registe Values####  

14:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05E07840>) , Command count = 3585 ] 
14:42:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B930>, <py_sfcl.CommandDataDefinition object at 0x05E0B390>) , Command count = 3586 ] 
14:42:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:22: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BC30>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B780>, <None>, <py_sfcl.Command23 object at 0x05E0BD20>) , Command count = 3587 ] 
14:42:22: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:25: Host Frequency set to 25000 KHz
14:42:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BB40>, 0x0, True) , Command count = 3588 ] 
14:42:25: [GO18_globalSetVolt]### Host voltage value is set.
14:42:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B600>, 0x0, False) , Command count = 3589 ] 
14:42:25: [GO18_globalSetVolt]### Host voltage value is set.
14:42:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3590 ] 
14:42:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3591 ] 
14:42:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3592 ] 
14:42:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E076F0>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 3593 ] 
14:42:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BA50>, <py_sfcl.CommandDataDefinition object at 0x05E0B0F0>) , Command count = 3594 ] 
14:42:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:25: [ SetCardRCA(0x1, 0xD555) , Command count = 3595 ] 
14:42:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:25: Host Frequency set to 25000 KHz
14:42:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:25: ####CSD Registe 2.0 Values####
14:42:25: CSD_STRUCTURE                                 :0x1
14:42:25: Reserv1                                       :0x0
14:42:25: Time Access 1 TAAC                            :0xe
14:42:25: Time Access 2 NSAC*100                        :0x0
14:42:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:25: Card Command Classess CCC                     :0x5b5
14:42:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:25: DSR(driver stage register)  DSR_IMP           :0x0
14:42:25: Reserv2                                       :0x0
14:42:25: Device Size C_SIZE                            :0xedc8
14:42:25: Reserv3                                       :0x0
14:42:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:25: Reserv4                                       :0x0
14:42:25: Write Speed Factor R2W_FACTOR                 :0x2
14:42:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:25: FILE_FORMAT_GRP                               :0x0
14:42:25: COPY flag                                     :0x1
14:42:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:25: File_Format                                   :0x0
14:42:25: CRC                                           :0x0
14:42:25: ####CSD Registe Values####  

14:42:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:25: [GetSCRRegisterEntry] Passed
14:42:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:25: Data_Status_After Erases          : 0
14:42:25: CPRM Security Support             : No Security
14:42:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:25: Spec. Version                     : Version 3.0X
14:42:25: Extended Security Support         : Extended_Security_Not_Supported
14:42:25: Command Support                   : COMMAND_SUPPORT
14:42:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052177E0>, <py_sfcl.CommandDataDefinition object at 0x05E07330>) , Command count = 3596 ] 
14:42:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3F0>) , Command count = 3597 ] 
14:42:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:25: [ SetBusWidth(0x4) , Command count = 3598 ] 
14:42:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05281C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3599 ] 
14:42:25: Protected Area Size 0x28000
14:42:25: Bus Width           2
14:42:25: Secure Mode         0
14:42:25: Speed  Class        4
14:42:25: Perf Move           0
14:42:25: Au Size             9
14:42:25: Erase Size          15
14:42:25: Erase Timeout       1
14:42:25: Erase offset        1
14:42:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3600 ] 
14:42:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:25: Host Frequency set to 100000 KHz
14:42:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:25: ####CSD Registe 2.0 Values####
14:42:25: CSD_STRUCTURE                                 :0x1
14:42:25: Reserv1                                       :0x0
14:42:25: Time Access 1 TAAC                            :0xe
14:42:25: Time Access 2 NSAC*100                        :0x0
14:42:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:25: Card Command Classess CCC                     :0x5b5
14:42:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:25: DSR(driver stage register)  DSR_IMP           :0x0
14:42:25: Reserv2                                       :0x0
14:42:25: Device Size C_SIZE                            :0xedc8
14:42:25: Reserv3                                       :0x0
14:42:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:25: Reserv4                                       :0x0
14:42:25: Write Speed Factor R2W_FACTOR                 :0x2
14:42:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:26: FILE_FORMAT_GRP                               :0x0
14:42:26: COPY flag                                     :0x1
14:42:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:26: File_Format                                   :0x0
14:42:26: CRC                                           :0x0
14:42:26: ####CSD Registe Values####  

14:42:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04570>, <py_sfcl.CommandDataDefinition object at 0x05E0FAB0>) , Command count = 3601 ] 
14:42:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD80>) , Command count = 3602 ] 
14:42:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:26: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E074B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B4E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B8D0>, <None>, <py_sfcl.Command23 object at 0x05E0B9C0>) , Command count = 3603 ] 
14:42:26: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:28: Host Frequency set to 25000 KHz
14:42:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F240>, 0x0, True) , Command count = 3604 ] 
14:42:28: [GO18_globalSetVolt]### Host voltage value is set.
14:42:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281CC0>, 0x0, False) , Command count = 3605 ] 
14:42:28: [GO18_globalSetVolt]### Host voltage value is set.
14:42:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3606 ] 
14:42:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3607 ] 
14:42:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3608 ] 
14:42:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x0526FC30>) , Command count = 3609 ] 
14:42:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B420>, <py_sfcl.CommandDataDefinition object at 0x05E0BB70>) , Command count = 3610 ] 
14:42:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3611 ] 
14:42:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:28: Host Frequency set to 25000 KHz
14:42:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:28: ####CSD Registe 2.0 Values####
14:42:28: CSD_STRUCTURE                                 :0x1
14:42:28: Reserv1                                       :0x0
14:42:28: Time Access 1 TAAC                            :0xe
14:42:28: Time Access 2 NSAC*100                        :0x0
14:42:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:28: Card Command Classess CCC                     :0x5b5
14:42:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:28: DSR(driver stage register)  DSR_IMP           :0x0
14:42:28: Reserv2                                       :0x0
14:42:28: Device Size C_SIZE                            :0xedc8
14:42:28: Reserv3                                       :0x0
14:42:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:28: Reserv4                                       :0x0
14:42:28: Write Speed Factor R2W_FACTOR                 :0x2
14:42:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:28: FILE_FORMAT_GRP                               :0x0
14:42:28: COPY flag                                     :0x1
14:42:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:28: File_Format                                   :0x0
14:42:28: CRC                                           :0x0
14:42:28: ####CSD Registe Values####  

14:42:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:28: [GetSCRRegisterEntry] Passed
14:42:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:28: Data_Status_After Erases          : 0
14:42:28: CPRM Security Support             : No Security
14:42:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:28: Spec. Version                     : Version 3.0X
14:42:28: Extended Security Support         : Extended_Security_Not_Supported
14:42:28: Command Support                   : COMMAND_SUPPORT
14:42:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FEA0>, <py_sfcl.CommandDataDefinition object at 0x0526FC60>) , Command count = 3612 ] 
14:42:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B4E0>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 3613 ] 
14:42:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:28: [ SetBusWidth(0x4) , Command count = 3614 ] 
14:42:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3615 ] 
14:42:28: Protected Area Size 0x28000
14:42:28: Bus Width           2
14:42:28: Secure Mode         0
14:42:28: Speed  Class        4
14:42:28: Perf Move           0
14:42:28: Au Size             9
14:42:28: Erase Size          15
14:42:28: Erase Timeout       1
14:42:28: Erase offset        1
14:42:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3616 ] 
14:42:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:29: Host Frequency set to 100000 KHz
14:42:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:29: ####CSD Registe 2.0 Values####
14:42:29: CSD_STRUCTURE                                 :0x1
14:42:29: Reserv1                                       :0x0
14:42:29: Time Access 1 TAAC                            :0xe
14:42:29: Time Access 2 NSAC*100                        :0x0
14:42:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:29: Card Command Classess CCC                     :0x5b5
14:42:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:29: DSR(driver stage register)  DSR_IMP           :0x0
14:42:29: Reserv2                                       :0x0
14:42:29: Device Size C_SIZE                            :0xedc8
14:42:29: Reserv3                                       :0x0
14:42:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:29: Reserv4                                       :0x0
14:42:29: Write Speed Factor R2W_FACTOR                 :0x2
14:42:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:29: FILE_FORMAT_GRP                               :0x0
14:42:29: COPY flag                                     :0x1
14:42:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:29: File_Format                                   :0x0
14:42:29: CRC                                           :0x0
14:42:29: ####CSD Registe Values####  

14:42:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B5A0>, <py_sfcl.CommandDataDefinition object at 0x05DF50C0>) , Command count = 3617 ] 
14:42:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E0F090>) , Command count = 3618 ] 
14:42:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:29: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07390>, <py_sfcl.PySEnhancedCmdData object at 0x05E07540>, <None>, <py_sfcl.Command23 object at 0x05E0B9F0>) , Command count = 3619 ] 
14:42:29: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:31: Host Frequency set to 25000 KHz
14:42:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B840>, 0x0, True) , Command count = 3620 ] 
14:42:31: [GO18_globalSetVolt]### Host voltage value is set.
14:42:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E070F0>, 0x0, False) , Command count = 3621 ] 
14:42:31: [GO18_globalSetVolt]### Host voltage value is set.
14:42:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3622 ] 
14:42:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3623 ] 
14:42:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3624 ] 
14:42:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B40>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 3625 ] 
14:42:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B480>) , Command count = 3626 ] 
14:42:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:32: [ SetCardRCA(0x1, 0xD555) , Command count = 3627 ] 
14:42:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:32: Host Frequency set to 25000 KHz
14:42:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:32: ####CSD Registe 2.0 Values####
14:42:32: CSD_STRUCTURE                                 :0x1
14:42:32: Reserv1                                       :0x0
14:42:32: Time Access 1 TAAC                            :0xe
14:42:32: Time Access 2 NSAC*100                        :0x0
14:42:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:32: Card Command Classess CCC                     :0x5b5
14:42:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:32: DSR(driver stage register)  DSR_IMP           :0x0
14:42:32: Reserv2                                       :0x0
14:42:32: Device Size C_SIZE                            :0xedc8
14:42:32: Reserv3                                       :0x0
14:42:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:32: Reserv4                                       :0x0
14:42:32: Write Speed Factor R2W_FACTOR                 :0x2
14:42:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:32: FILE_FORMAT_GRP                               :0x0
14:42:32: COPY flag                                     :0x1
14:42:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:32: File_Format                                   :0x0
14:42:32: CRC                                           :0x0
14:42:32: ####CSD Registe Values####  

14:42:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:32: [GetSCRRegisterEntry] Passed
14:42:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:32: Data_Status_After Erases          : 0
14:42:32: CPRM Security Support             : No Security
14:42:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:32: Spec. Version                     : Version 3.0X
14:42:32: Extended Security Support         : Extended_Security_Not_Supported
14:42:32: Command Support                   : COMMAND_SUPPORT
14:42:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00630>, <py_sfcl.CommandDataDefinition object at 0x05E07090>) , Command count = 3628 ] 
14:42:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF030>, <py_sfcl.CommandDataDefinition object at 0x05281F60>) , Command count = 3629 ] 
14:42:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:32: [ SetBusWidth(0x4) , Command count = 3630 ] 
14:42:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E073F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3631 ] 
14:42:32: Protected Area Size 0x28000
14:42:32: Bus Width           2
14:42:32: Secure Mode         0
14:42:32: Speed  Class        4
14:42:32: Perf Move           0
14:42:32: Au Size             9
14:42:32: Erase Size          15
14:42:32: Erase Timeout       1
14:42:32: Erase offset        1
14:42:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3632 ] 
14:42:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:32: Host Frequency set to 100000 KHz
14:42:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:32: ####CSD Registe 2.0 Values####
14:42:32: CSD_STRUCTURE                                 :0x1
14:42:32: Reserv1                                       :0x0
14:42:32: Time Access 1 TAAC                            :0xe
14:42:32: Time Access 2 NSAC*100                        :0x0
14:42:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:32: Card Command Classess CCC                     :0x5b5
14:42:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:32: DSR(driver stage register)  DSR_IMP           :0x0
14:42:32: Reserv2                                       :0x0
14:42:32: Device Size C_SIZE                            :0xedc8
14:42:32: Reserv3                                       :0x0
14:42:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:32: Reserv4                                       :0x0
14:42:32: Write Speed Factor R2W_FACTOR                 :0x2
14:42:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:32: FILE_FORMAT_GRP                               :0x0
14:42:32: COPY flag                                     :0x1
14:42:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:32: File_Format                                   :0x0
14:42:32: CRC                                           :0x0
14:42:32: ####CSD Registe Values####  

14:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 3633 ] 
14:42:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04540>, <py_sfcl.CommandDataDefinition object at 0x05E0F990>) , Command count = 3634 ] 
14:42:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:32: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEF7B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BE70>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BD50>, <None>, <py_sfcl.Command23 object at 0x05E07C90>) , Command count = 3635 ] 
14:42:32: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:35: Host Frequency set to 25000 KHz
14:42:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9C60>, 0x0, True) , Command count = 3636 ] 
14:42:35: [GO18_globalSetVolt]### Host voltage value is set.
14:42:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5C30>, 0x0, False) , Command count = 3637 ] 
14:42:35: [GO18_globalSetVolt]### Host voltage value is set.
14:42:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3638 ] 
14:42:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3639 ] 
14:42:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3640 ] 
14:42:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9DB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F8D0>) , Command count = 3641 ] 
14:42:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5150>) , Command count = 3642 ] 
14:42:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:35: [ SetCardRCA(0x1, 0xD555) , Command count = 3643 ] 
14:42:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:35: Host Frequency set to 25000 KHz
14:42:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:35: ####CSD Registe 2.0 Values####
14:42:35: CSD_STRUCTURE                                 :0x1
14:42:35: Reserv1                                       :0x0
14:42:35: Time Access 1 TAAC                            :0xe
14:42:35: Time Access 2 NSAC*100                        :0x0
14:42:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:35: Card Command Classess CCC                     :0x5b5
14:42:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:35: DSR(driver stage register)  DSR_IMP           :0x0
14:42:35: Reserv2                                       :0x0
14:42:35: Device Size C_SIZE                            :0xedc8
14:42:35: Reserv3                                       :0x0
14:42:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:35: Reserv4                                       :0x0
14:42:35: Write Speed Factor R2W_FACTOR                 :0x2
14:42:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:35: FILE_FORMAT_GRP                               :0x0
14:42:35: COPY flag                                     :0x1
14:42:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:35: File_Format                                   :0x0
14:42:35: CRC                                           :0x0
14:42:35: ####CSD Registe Values####  

14:42:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:35: [GetSCRRegisterEntry] Passed
14:42:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:35: Data_Status_After Erases          : 0
14:42:35: CPRM Security Support             : No Security
14:42:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:35: Spec. Version                     : Version 3.0X
14:42:35: Extended Security Support         : Extended_Security_Not_Supported
14:42:35: Command Support                   : COMMAND_SUPPORT
14:42:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF54E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF90>) , Command count = 3644 ] 
14:42:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 3645 ] 
14:42:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:35: [ SetBusWidth(0x4) , Command count = 3646 ] 
14:42:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3647 ] 
14:42:35: Protected Area Size 0x28000
14:42:35: Bus Width           2
14:42:35: Secure Mode         0
14:42:35: Speed  Class        4
14:42:35: Perf Move           0
14:42:35: Au Size             9
14:42:35: Erase Size          15
14:42:35: Erase Timeout       1
14:42:35: Erase offset        1
14:42:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3648 ] 
14:42:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:35: Host Frequency set to 100000 KHz
14:42:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:35: ####CSD Registe 2.0 Values####
14:42:35: CSD_STRUCTURE                                 :0x1
14:42:35: Reserv1                                       :0x0
14:42:35: Time Access 1 TAAC                            :0xe
14:42:35: Time Access 2 NSAC*100                        :0x0
14:42:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:35: Card Command Classess CCC                     :0x5b5
14:42:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:35: DSR(driver stage register)  DSR_IMP           :0x0
14:42:35: Reserv2                                       :0x0
14:42:35: Device Size C_SIZE                            :0xedc8
14:42:35: Reserv3                                       :0x0
14:42:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:35: Reserv4                                       :0x0
14:42:36: Write Speed Factor R2W_FACTOR                 :0x2
14:42:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:36: FILE_FORMAT_GRP                               :0x0
14:42:36: COPY flag                                     :0x1
14:42:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:36: File_Format                                   :0x0
14:42:36: CRC                                           :0x0
14:42:36: ####CSD Registe Values####  

14:42:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 3649 ] 
14:42:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5120>, <py_sfcl.CommandDataDefinition object at 0x05E0F9C0>) , Command count = 3650 ] 
14:42:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:36: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05281FC0>, <py_sfcl.PySEnhancedCmdData object at 0x05281C90>, <None>, <py_sfcl.Command23 object at 0x05E0B6C0>) , Command count = 3651 ] 
14:42:36: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:38: Host Frequency set to 25000 KHz
14:42:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BCC0>, 0x0, True) , Command count = 3652 ] 
14:42:38: [GO18_globalSetVolt]### Host voltage value is set.
14:42:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBB10>, 0x0, False) , Command count = 3653 ] 
14:42:38: [GO18_globalSetVolt]### Host voltage value is set.
14:42:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3654 ] 
14:42:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3655 ] 
14:42:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3656 ] 
14:42:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B70>, <py_sfcl.CommandDataDefinition object at 0x05E07ED0>) , Command count = 3657 ] 
14:42:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05E040C0>) , Command count = 3658 ] 
14:42:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3659 ] 
14:42:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:38: Host Frequency set to 25000 KHz
14:42:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:38: ####CSD Registe 2.0 Values####
14:42:38: CSD_STRUCTURE                                 :0x1
14:42:38: Reserv1                                       :0x0
14:42:38: Time Access 1 TAAC                            :0xe
14:42:38: Time Access 2 NSAC*100                        :0x0
14:42:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:38: Card Command Classess CCC                     :0x5b5
14:42:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:38: DSR(driver stage register)  DSR_IMP           :0x0
14:42:38: Reserv2                                       :0x0
14:42:38: Device Size C_SIZE                            :0xedc8
14:42:38: Reserv3                                       :0x0
14:42:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:38: Reserv4                                       :0x0
14:42:38: Write Speed Factor R2W_FACTOR                 :0x2
14:42:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:38: FILE_FORMAT_GRP                               :0x0
14:42:38: COPY flag                                     :0x1
14:42:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:38: File_Format                                   :0x0
14:42:38: CRC                                           :0x0
14:42:38: ####CSD Registe Values####  

14:42:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:38: [GetSCRRegisterEntry] Passed
14:42:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:38: Data_Status_After Erases          : 0
14:42:38: CPRM Security Support             : No Security
14:42:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:38: Spec. Version                     : Version 3.0X
14:42:38: Extended Security Support         : Extended_Security_Not_Supported
14:42:38: Command Support                   : COMMAND_SUPPORT
14:42:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07BA0>, <py_sfcl.CommandDataDefinition object at 0x05E04EA0>) , Command count = 3660 ] 
14:42:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBC90>, <py_sfcl.CommandDataDefinition object at 0x05DFBDE0>) , Command count = 3661 ] 
14:42:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:38: [ SetBusWidth(0x4) , Command count = 3662 ] 
14:42:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3663 ] 
14:42:38: Protected Area Size 0x28000
14:42:38: Bus Width           2
14:42:38: Secure Mode         0
14:42:38: Speed  Class        4
14:42:38: Perf Move           0
14:42:38: Au Size             9
14:42:38: Erase Size          15
14:42:38: Erase Timeout       1
14:42:38: Erase offset        1
14:42:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3664 ] 
14:42:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:39: Host Frequency set to 100000 KHz
14:42:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:39: ####CSD Registe 2.0 Values####
14:42:39: CSD_STRUCTURE                                 :0x1
14:42:39: Reserv1                                       :0x0
14:42:39: Time Access 1 TAAC                            :0xe
14:42:39: Time Access 2 NSAC*100                        :0x0
14:42:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:39: Card Command Classess CCC                     :0x5b5
14:42:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:39: DSR(driver stage register)  DSR_IMP           :0x0
14:42:39: Reserv2                                       :0x0
14:42:39: Device Size C_SIZE                            :0xedc8
14:42:39: Reserv3                                       :0x0
14:42:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:39: Reserv4                                       :0x0
14:42:39: Write Speed Factor R2W_FACTOR                 :0x2
14:42:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:39: FILE_FORMAT_GRP                               :0x0
14:42:39: COPY flag                                     :0x1
14:42:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:39: File_Format                                   :0x0
14:42:39: CRC                                           :0x0
14:42:39: ####CSD Registe Values####  

14:42:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB510>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 3665 ] 
14:42:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04480>, <py_sfcl.CommandDataDefinition object at 0x05E042A0>) , Command count = 3666 ] 
14:42:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:39: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F360>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FF30>, <None>, <py_sfcl.Command23 object at 0x05281F30>) , Command count = 3667 ] 
14:42:39: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:41: Host Frequency set to 25000 KHz
14:42:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F5A0>, 0x0, True) , Command count = 3668 ] 
14:42:41: [GO18_globalSetVolt]### Host voltage value is set.
14:42:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E001B0>, 0x0, False) , Command count = 3669 ] 
14:42:42: [GO18_globalSetVolt]### Host voltage value is set.
14:42:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3670 ] 
14:42:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3671 ] 
14:42:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3672 ] 
14:42:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00450>, <py_sfcl.CommandDataDefinition object at 0x05DFBDB0>) , Command count = 3673 ] 
14:42:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC00>, <py_sfcl.CommandDataDefinition object at 0x05E0F060>) , Command count = 3674 ] 
14:42:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:42: [ SetCardRCA(0x1, 0xD555) , Command count = 3675 ] 
14:42:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:42: Host Frequency set to 25000 KHz
14:42:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:42: ####CSD Registe 2.0 Values####
14:42:42: CSD_STRUCTURE                                 :0x1
14:42:42: Reserv1                                       :0x0
14:42:42: Time Access 1 TAAC                            :0xe
14:42:42: Time Access 2 NSAC*100                        :0x0
14:42:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:42: Card Command Classess CCC                     :0x5b5
14:42:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:42: DSR(driver stage register)  DSR_IMP           :0x0
14:42:42: Reserv2                                       :0x0
14:42:42: Device Size C_SIZE                            :0xedc8
14:42:42: Reserv3                                       :0x0
14:42:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:42: Reserv4                                       :0x0
14:42:42: Write Speed Factor R2W_FACTOR                 :0x2
14:42:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:42: FILE_FORMAT_GRP                               :0x0
14:42:42: COPY flag                                     :0x1
14:42:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:42: File_Format                                   :0x0
14:42:42: CRC                                           :0x0
14:42:42: ####CSD Registe Values####  

14:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:42: [GetSCRRegisterEntry] Passed
14:42:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:42: Data_Status_After Erases          : 0
14:42:42: CPRM Security Support             : No Security
14:42:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:42: Spec. Version                     : Version 3.0X
14:42:42: Extended Security Support         : Extended_Security_Not_Supported
14:42:42: Command Support                   : COMMAND_SUPPORT
14:42:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00E70>, <py_sfcl.CommandDataDefinition object at 0x05E07E70>) , Command count = 3676 ] 
14:42:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDE0>, <py_sfcl.CommandDataDefinition object at 0x05DFBD50>) , Command count = 3677 ] 
14:42:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:42: [ SetBusWidth(0x4) , Command count = 3678 ] 
14:42:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3679 ] 
14:42:42: Protected Area Size 0x28000
14:42:42: Bus Width           2
14:42:42: Secure Mode         0
14:42:42: Speed  Class        4
14:42:42: Perf Move           0
14:42:42: Au Size             9
14:42:42: Erase Size          15
14:42:42: Erase Timeout       1
14:42:42: Erase offset        1
14:42:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3680 ] 
14:42:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:42: Host Frequency set to 100000 KHz
14:42:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:42: ####CSD Registe 2.0 Values####
14:42:42: CSD_STRUCTURE                                 :0x1
14:42:42: Reserv1                                       :0x0
14:42:42: Time Access 1 TAAC                            :0xe
14:42:42: Time Access 2 NSAC*100                        :0x0
14:42:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:42: Card Command Classess CCC                     :0x5b5
14:42:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:42: DSR(driver stage register)  DSR_IMP           :0x0
14:42:42: Reserv2                                       :0x0
14:42:42: Device Size C_SIZE                            :0xedc8
14:42:42: Reserv3                                       :0x0
14:42:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:42: Reserv4                                       :0x0
14:42:43: Write Speed Factor R2W_FACTOR                 :0x2
14:42:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:43: FILE_FORMAT_GRP                               :0x0
14:42:43: COPY flag                                     :0x1
14:42:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:43: File_Format                                   :0x0
14:42:43: CRC                                           :0x0
14:42:43: ####CSD Registe Values####  

14:42:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB4B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 3681 ] 
14:42:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07570>, <py_sfcl.CommandDataDefinition object at 0x05DF5D20>) , Command count = 3682 ] 
14:42:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:43: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5F90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF55A0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF54B0>, <None>, <py_sfcl.Command23 object at 0x05DF5A20>) , Command count = 3683 ] 
14:42:43: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:45: Host Frequency set to 25000 KHz
14:42:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBD80>, 0x0, True) , Command count = 3684 ] 
14:42:45: [GO18_globalSetVolt]### Host voltage value is set.
14:42:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB030>, 0x0, False) , Command count = 3685 ] 
14:42:45: [GO18_globalSetVolt]### Host voltage value is set.
14:42:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3686 ] 
14:42:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3687 ] 
14:42:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3688 ] 
14:42:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E006F0>, <py_sfcl.CommandDataDefinition object at 0x05E072A0>) , Command count = 3689 ] 
14:42:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF90>, <py_sfcl.CommandDataDefinition object at 0x05DFBD20>) , Command count = 3690 ] 
14:42:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:45: [ SetCardRCA(0x1, 0xD555) , Command count = 3691 ] 
14:42:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:45: Host Frequency set to 25000 KHz
14:42:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:45: ####CSD Registe 2.0 Values####
14:42:45: CSD_STRUCTURE                                 :0x1
14:42:45: Reserv1                                       :0x0
14:42:45: Time Access 1 TAAC                            :0xe
14:42:45: Time Access 2 NSAC*100                        :0x0
14:42:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:45: Card Command Classess CCC                     :0x5b5
14:42:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:45: DSR(driver stage register)  DSR_IMP           :0x0
14:42:45: Reserv2                                       :0x0
14:42:45: Device Size C_SIZE                            :0xedc8
14:42:45: Reserv3                                       :0x0
14:42:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:45: Reserv4                                       :0x0
14:42:45: Write Speed Factor R2W_FACTOR                 :0x2
14:42:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:45: FILE_FORMAT_GRP                               :0x0
14:42:45: COPY flag                                     :0x1
14:42:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:45: File_Format                                   :0x0
14:42:45: CRC                                           :0x0
14:42:45: ####CSD Registe Values####  

14:42:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:45: [GetSCRRegisterEntry] Passed
14:42:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:45: Data_Status_After Erases          : 0
14:42:45: CPRM Security Support             : No Security
14:42:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:45: Spec. Version                     : Version 3.0X
14:42:45: Extended Security Support         : Extended_Security_Not_Supported
14:42:45: Command Support                   : COMMAND_SUPPORT
14:42:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07C60>, <py_sfcl.CommandDataDefinition object at 0x05DFB4E0>) , Command count = 3692 ] 
14:42:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 3693 ] 
14:42:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:45: [ SetBusWidth(0x4) , Command count = 3694 ] 
14:42:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3695 ] 
14:42:45: Protected Area Size 0x28000
14:42:45: Bus Width           2
14:42:45: Secure Mode         0
14:42:45: Speed  Class        4
14:42:45: Perf Move           0
14:42:45: Au Size             9
14:42:45: Erase Size          15
14:42:45: Erase Timeout       1
14:42:45: Erase offset        1
14:42:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3696 ] 
14:42:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:45: Host Frequency set to 100000 KHz
14:42:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:45: ####CSD Registe 2.0 Values####
14:42:45: CSD_STRUCTURE                                 :0x1
14:42:45: Reserv1                                       :0x0
14:42:45: Time Access 1 TAAC                            :0xe
14:42:46: Time Access 2 NSAC*100                        :0x0
14:42:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:46: Card Command Classess CCC                     :0x5b5
14:42:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:46: DSR(driver stage register)  DSR_IMP           :0x0
14:42:46: Reserv2                                       :0x0
14:42:46: Device Size C_SIZE                            :0xedc8
14:42:46: Reserv3                                       :0x0
14:42:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:46: Reserv4                                       :0x0
14:42:46: Write Speed Factor R2W_FACTOR                 :0x2
14:42:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:46: FILE_FORMAT_GRP                               :0x0
14:42:46: COPY flag                                     :0x1
14:42:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:46: File_Format                                   :0x0
14:42:46: CRC                                           :0x0
14:42:46: ####CSD Registe Values####  

14:42:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F030>, <py_sfcl.CommandDataDefinition object at 0x05DFB930>) , Command count = 3697 ] 
14:42:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F150>, <py_sfcl.CommandDataDefinition object at 0x05DF5A80>) , Command count = 3698 ] 
14:42:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:46: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF58D0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5930>, <None>, <py_sfcl.Command23 object at 0x05DF5F00>) , Command count = 3699 ] 
14:42:46: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:48: Host Frequency set to 25000 KHz
14:42:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB390>, 0x0, True) , Command count = 3700 ] 
14:42:48: [GO18_globalSetVolt]### Host voltage value is set.
14:42:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB480>, 0x0, False) , Command count = 3701 ] 
14:42:48: [GO18_globalSetVolt]### Host voltage value is set.
14:42:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3702 ] 
14:42:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3703 ] 
14:42:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3704 ] 
14:42:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04090>, <py_sfcl.CommandDataDefinition object at 0x05E07D80>) , Command count = 3705 ] 
14:42:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0F690>) , Command count = 3706 ] 
14:42:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:49: [ SetCardRCA(0x1, 0xD555) , Command count = 3707 ] 
14:42:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:49: Host Frequency set to 25000 KHz
14:42:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:49: ####CSD Registe 2.0 Values####
14:42:49: CSD_STRUCTURE                                 :0x1
14:42:49: Reserv1                                       :0x0
14:42:49: Time Access 1 TAAC                            :0xe
14:42:49: Time Access 2 NSAC*100                        :0x0
14:42:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:49: Card Command Classess CCC                     :0x5b5
14:42:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:49: DSR(driver stage register)  DSR_IMP           :0x0
14:42:49: Reserv2                                       :0x0
14:42:49: Device Size C_SIZE                            :0xedc8
14:42:49: Reserv3                                       :0x0
14:42:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:49: Reserv4                                       :0x0
14:42:49: Write Speed Factor R2W_FACTOR                 :0x2
14:42:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:49: FILE_FORMAT_GRP                               :0x0
14:42:49: COPY flag                                     :0x1
14:42:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:49: File_Format                                   :0x0
14:42:49: CRC                                           :0x0
14:42:49: ####CSD Registe Values####  

14:42:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:49: [GetSCRRegisterEntry] Passed
14:42:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:49: Data_Status_After Erases          : 0
14:42:49: CPRM Security Support             : No Security
14:42:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:49: Spec. Version                     : Version 3.0X
14:42:49: Extended Security Support         : Extended_Security_Not_Supported
14:42:49: Command Support                   : COMMAND_SUPPORT
14:42:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE40>, <py_sfcl.CommandDataDefinition object at 0x05DFB330>) , Command count = 3708 ] 
14:42:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04390>, <py_sfcl.CommandDataDefinition object at 0x05E0F330>) , Command count = 3709 ] 
14:42:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:49: [ SetBusWidth(0x4) , Command count = 3710 ] 
14:42:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3711 ] 
14:42:49: Protected Area Size 0x28000
14:42:49: Bus Width           2
14:42:49: Secure Mode         0
14:42:49: Speed  Class        4
14:42:49: Perf Move           0
14:42:49: Au Size             9
14:42:49: Erase Size          15
14:42:49: Erase Timeout       1
14:42:49: Erase offset        1
14:42:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3712 ] 
14:42:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:49: Host Frequency set to 100000 KHz
14:42:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:49: ####CSD Registe 2.0 Values####
14:42:49: CSD_STRUCTURE                                 :0x1
14:42:49: Reserv1                                       :0x0
14:42:49: Time Access 1 TAAC                            :0xe
14:42:49: Time Access 2 NSAC*100                        :0x0
14:42:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:49: Card Command Classess CCC                     :0x5b5
14:42:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:49: DSR(driver stage register)  DSR_IMP           :0x0
14:42:49: Reserv2                                       :0x0
14:42:49: Device Size C_SIZE                            :0xedc8
14:42:49: Reserv3                                       :0x0
14:42:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:49: Reserv4                                       :0x0
14:42:49: Write Speed Factor R2W_FACTOR                 :0x2
14:42:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:49: FILE_FORMAT_GRP                               :0x0
14:42:49: COPY flag                                     :0x1
14:42:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:49: File_Format                                   :0x0
14:42:49: CRC                                           :0x0
14:42:49: ####CSD Registe Values####  

14:42:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05DFBEA0>) , Command count = 3713 ] 
14:42:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FD20>, <py_sfcl.CommandDataDefinition object at 0x05E00510>) , Command count = 3714 ] 
14:42:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:50: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E002D0>, <py_sfcl.PySEnhancedCmdData object at 0x05E008A0>, <None>, <py_sfcl.Command23 object at 0x05DF5D20>) , Command count = 3715 ] 
14:42:50: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:52: Host Frequency set to 25000 KHz
14:42:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBFC0>, 0x0, True) , Command count = 3716 ] 
14:42:52: [GO18_globalSetVolt]### Host voltage value is set.
14:42:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E004E0>, 0x0, False) , Command count = 3717 ] 
14:42:52: [GO18_globalSetVolt]### Host voltage value is set.
14:42:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3718 ] 
14:42:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3719 ] 
14:42:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3720 ] 
14:42:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00030>, <py_sfcl.CommandDataDefinition object at 0x05DFB960>) , Command count = 3721 ] 
14:42:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F0C0>, <py_sfcl.CommandDataDefinition object at 0x05DFBCF0>) , Command count = 3722 ] 
14:42:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:52: [ SetCardRCA(0x1, 0xD555) , Command count = 3723 ] 
14:42:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:52: Host Frequency set to 25000 KHz
14:42:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:52: ####CSD Registe 2.0 Values####
14:42:52: CSD_STRUCTURE                                 :0x1
14:42:52: Reserv1                                       :0x0
14:42:52: Time Access 1 TAAC                            :0xe
14:42:52: Time Access 2 NSAC*100                        :0x0
14:42:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:52: Card Command Classess CCC                     :0x5b5
14:42:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:52: DSR(driver stage register)  DSR_IMP           :0x0
14:42:52: Reserv2                                       :0x0
14:42:52: Device Size C_SIZE                            :0xedc8
14:42:52: Reserv3                                       :0x0
14:42:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:52: Reserv4                                       :0x0
14:42:52: Write Speed Factor R2W_FACTOR                 :0x2
14:42:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:52: FILE_FORMAT_GRP                               :0x0
14:42:52: COPY flag                                     :0x1
14:42:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:52: File_Format                                   :0x0
14:42:52: CRC                                           :0x0
14:42:52: ####CSD Registe Values####  

14:42:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:52: [GetSCRRegisterEntry] Passed
14:42:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:52: Data_Status_After Erases          : 0
14:42:52: CPRM Security Support             : No Security
14:42:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:52: Spec. Version                     : Version 3.0X
14:42:52: Extended Security Support         : Extended_Security_Not_Supported
14:42:52: Command Support                   : COMMAND_SUPPORT
14:42:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF90>, <py_sfcl.CommandDataDefinition object at 0x05E04E70>) , Command count = 3724 ] 
14:42:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC60>) , Command count = 3725 ] 
14:42:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:52: [ SetBusWidth(0x4) , Command count = 3726 ] 
14:42:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3727 ] 
14:42:52: Protected Area Size 0x28000
14:42:52: Bus Width           2
14:42:52: Secure Mode         0
14:42:52: Speed  Class        4
14:42:52: Perf Move           0
14:42:52: Au Size             9
14:42:52: Erase Size          15
14:42:52: Erase Timeout       1
14:42:52: Erase offset        1
14:42:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3728 ] 
14:42:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:52: Host Frequency set to 100000 KHz
14:42:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:52: ####CSD Registe 2.0 Values####
14:42:52: CSD_STRUCTURE                                 :0x1
14:42:52: Reserv1                                       :0x0
14:42:52: Time Access 1 TAAC                            :0xe
14:42:52: Time Access 2 NSAC*100                        :0x0
14:42:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:52: Card Command Classess CCC                     :0x5b5
14:42:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:52: DSR(driver stage register)  DSR_IMP           :0x0
14:42:52: Reserv2                                       :0x0
14:42:52: Device Size C_SIZE                            :0xedc8
14:42:52: Reserv3                                       :0x0
14:42:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:52: Reserv4                                       :0x0
14:42:52: Write Speed Factor R2W_FACTOR                 :0x2
14:42:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:53: FILE_FORMAT_GRP                               :0x0
14:42:53: COPY flag                                     :0x1
14:42:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:53: File_Format                                   :0x0
14:42:53: CRC                                           :0x0
14:42:53: ####CSD Registe Values####  

14:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F810>, <py_sfcl.CommandDataDefinition object at 0x05E04C90>) , Command count = 3729 ] 
14:42:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3C0>, <py_sfcl.CommandDataDefinition object at 0x05E00060>) , Command count = 3730 ] 
14:42:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:53: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5C90>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5CC0>, <None>, <py_sfcl.Command23 object at 0x05DF5240>) , Command count = 3731 ] 
14:42:53: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:55: Host Frequency set to 25000 KHz
14:42:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB810>, 0x0, True) , Command count = 3732 ] 
14:42:55: [GO18_globalSetVolt]### Host voltage value is set.
14:42:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FA80>, 0x0, False) , Command count = 3733 ] 
14:42:55: [GO18_globalSetVolt]### Host voltage value is set.
14:42:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3734 ] 
14:42:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3735 ] 
14:42:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3736 ] 
14:42:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F570>, <py_sfcl.CommandDataDefinition object at 0x05E005D0>) , Command count = 3737 ] 
14:42:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FBD0>, <py_sfcl.CommandDataDefinition object at 0x05E0F480>) , Command count = 3738 ] 
14:42:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3739 ] 
14:42:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:56: Host Frequency set to 25000 KHz
14:42:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:56: ####CSD Registe 2.0 Values####
14:42:56: CSD_STRUCTURE                                 :0x1
14:42:56: Reserv1                                       :0x0
14:42:56: Time Access 1 TAAC                            :0xe
14:42:56: Time Access 2 NSAC*100                        :0x0
14:42:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:56: Card Command Classess CCC                     :0x5b5
14:42:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:56: DSR(driver stage register)  DSR_IMP           :0x0
14:42:56: Reserv2                                       :0x0
14:42:56: Device Size C_SIZE                            :0xedc8
14:42:56: Reserv3                                       :0x0
14:42:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:56: Reserv4                                       :0x0
14:42:56: Write Speed Factor R2W_FACTOR                 :0x2
14:42:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:56: FILE_FORMAT_GRP                               :0x0
14:42:56: COPY flag                                     :0x1
14:42:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:56: File_Format                                   :0x0
14:42:56: CRC                                           :0x0
14:42:56: ####CSD Registe Values####  

14:42:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:56: [GetSCRRegisterEntry] Passed
14:42:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:56: Data_Status_After Erases          : 0
14:42:56: CPRM Security Support             : No Security
14:42:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:56: Spec. Version                     : Version 3.0X
14:42:56: Extended Security Support         : Extended_Security_Not_Supported
14:42:56: Command Support                   : COMMAND_SUPPORT
14:42:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB270>, <py_sfcl.CommandDataDefinition object at 0x05E0FAE0>) , Command count = 3740 ] 
14:42:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB40>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 3741 ] 
14:42:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:56: [ SetBusWidth(0x4) , Command count = 3742 ] 
14:42:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E002A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3743 ] 
14:42:56: Protected Area Size 0x28000
14:42:56: Bus Width           2
14:42:56: Secure Mode         0
14:42:56: Speed  Class        4
14:42:56: Perf Move           0
14:42:56: Au Size             9
14:42:56: Erase Size          15
14:42:56: Erase Timeout       1
14:42:56: Erase offset        1
14:42:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3744 ] 
14:42:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:56: Host Frequency set to 100000 KHz
14:42:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:56: ####CSD Registe 2.0 Values####
14:42:56: CSD_STRUCTURE                                 :0x1
14:42:56: Reserv1                                       :0x0
14:42:56: Time Access 1 TAAC                            :0xe
14:42:56: Time Access 2 NSAC*100                        :0x0
14:42:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:56: Card Command Classess CCC                     :0x5b5
14:42:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:56: DSR(driver stage register)  DSR_IMP           :0x0
14:42:56: Reserv2                                       :0x0
14:42:56: Device Size C_SIZE                            :0xedc8
14:42:56: Reserv3                                       :0x0
14:42:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:56: Reserv4                                       :0x0
14:42:56: Write Speed Factor R2W_FACTOR                 :0x2
14:42:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:56: FILE_FORMAT_GRP                               :0x0
14:42:56: COPY flag                                     :0x1
14:42:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:56: File_Format                                   :0x0
14:42:56: CRC                                           :0x0
14:42:56: ####CSD Registe Values####  

14:42:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A50>, <py_sfcl.CommandDataDefinition object at 0x05E00BD0>) , Command count = 3745 ] 
14:42:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E078A0>, <py_sfcl.CommandDataDefinition object at 0x05E04420>) , Command count = 3746 ] 
14:42:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:56: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:42:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:42:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E049C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04990>, <None>, <py_sfcl.Command23 object at 0x05DF5B40>) , Command count = 3747 ] 
14:42:56: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:42:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:58: Host Frequency set to 25000 KHz
14:42:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F7B0>, 0x0, True) , Command count = 3748 ] 
14:42:58: [GO18_globalSetVolt]### Host voltage value is set.
14:42:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00570>, 0x0, False) , Command count = 3749 ] 
14:42:59: [GO18_globalSetVolt]### Host voltage value is set.
14:42:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3750 ] 
14:42:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3751 ] 
14:42:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3752 ] 
14:42:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00EA0>, <py_sfcl.CommandDataDefinition object at 0x05E00600>) , Command count = 3753 ] 
14:42:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B360>, <py_sfcl.CommandDataDefinition object at 0x05E0F6F0>) , Command count = 3754 ] 
14:42:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:59: [ SetCardRCA(0x1, 0xD555) , Command count = 3755 ] 
14:42:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:59: Host Frequency set to 25000 KHz
14:42:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:59: ####CSD Registe 2.0 Values####
14:42:59: CSD_STRUCTURE                                 :0x1
14:42:59: Reserv1                                       :0x0
14:42:59: Time Access 1 TAAC                            :0xe
14:42:59: Time Access 2 NSAC*100                        :0x0
14:42:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:59: Card Command Classess CCC                     :0x5b5
14:42:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:59: DSR(driver stage register)  DSR_IMP           :0x0
14:42:59: Reserv2                                       :0x0
14:42:59: Device Size C_SIZE                            :0xedc8
14:42:59: Reserv3                                       :0x0
14:42:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:59: Reserv4                                       :0x0
14:42:59: Write Speed Factor R2W_FACTOR                 :0x2
14:42:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:59: FILE_FORMAT_GRP                               :0x0
14:42:59: COPY flag                                     :0x1
14:42:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:59: File_Format                                   :0x0
14:42:59: CRC                                           :0x0
14:42:59: ####CSD Registe Values####  

14:42:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:59: [GetSCRRegisterEntry] Passed
14:42:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:59: Data_Status_After Erases          : 0
14:42:59: CPRM Security Support             : No Security
14:42:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:59: Spec. Version                     : Version 3.0X
14:42:59: Extended Security Support         : Extended_Security_Not_Supported
14:42:59: Command Support                   : COMMAND_SUPPORT
14:42:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3C0>, <py_sfcl.CommandDataDefinition object at 0x05E0FB40>) , Command count = 3756 ] 
14:42:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F750>, <py_sfcl.CommandDataDefinition object at 0x05E04AB0>) , Command count = 3757 ] 
14:42:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:59: [ SetBusWidth(0x4) , Command count = 3758 ] 
14:42:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3759 ] 
14:42:59: Protected Area Size 0x28000
14:42:59: Bus Width           2
14:42:59: Secure Mode         0
14:42:59: Speed  Class        4
14:42:59: Perf Move           0
14:42:59: Au Size             9
14:42:59: Erase Size          15
14:42:59: Erase Timeout       1
14:42:59: Erase offset        1
14:42:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3760 ] 
14:42:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:59: Host Frequency set to 100000 KHz
14:42:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:59: ####CSD Registe 2.0 Values####
14:42:59: CSD_STRUCTURE                                 :0x1
14:42:59: Reserv1                                       :0x0
14:42:59: Time Access 1 TAAC                            :0xe
14:42:59: Time Access 2 NSAC*100                        :0x0
14:42:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:59: Card Command Classess CCC                     :0x5b5
14:42:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:59: DSR(driver stage register)  DSR_IMP           :0x0
14:42:59: Reserv2                                       :0x0
14:42:59: Device Size C_SIZE                            :0xedc8
14:42:59: Reserv3                                       :0x0
14:42:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:59: Reserv4                                       :0x0
14:42:59: Write Speed Factor R2W_FACTOR                 :0x2
14:42:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:59: FILE_FORMAT_GRP                               :0x0
14:42:59: COPY flag                                     :0x1
14:42:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:59: File_Format                                   :0x0
14:42:59: CRC                                           :0x0
14:42:59: ####CSD Registe Values####  

14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E046C0>) , Command count = 3761 ] 
14:42:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004B0>, <py_sfcl.CommandDataDefinition object at 0x05E00DE0>) , Command count = 3762 ] 
14:43:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:00: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07CF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00270>, <py_sfcl.PySEnhancedCmdData object at 0x05E007B0>, <None>, <py_sfcl.Command23 object at 0x05E00840>) , Command count = 3763 ] 
14:43:00: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:02: Host Frequency set to 25000 KHz
14:43:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B450>, 0x0, True) , Command count = 3764 ] 
14:43:02: [GO18_globalSetVolt]### Host voltage value is set.
14:43:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00A80>, 0x0, False) , Command count = 3765 ] 
14:43:02: [GO18_globalSetVolt]### Host voltage value is set.
14:43:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3766 ] 
14:43:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3767 ] 
14:43:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3768 ] 
14:43:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B090>, <py_sfcl.CommandDataDefinition object at 0x05E04DE0>) , Command count = 3769 ] 
14:43:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC30>, <py_sfcl.CommandDataDefinition object at 0x05E003F0>) , Command count = 3770 ] 
14:43:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:02: [ SetCardRCA(0x1, 0xD555) , Command count = 3771 ] 
14:43:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:02: Host Frequency set to 25000 KHz
14:43:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:02: ####CSD Registe 2.0 Values####
14:43:02: CSD_STRUCTURE                                 :0x1
14:43:02: Reserv1                                       :0x0
14:43:02: Time Access 1 TAAC                            :0xe
14:43:02: Time Access 2 NSAC*100                        :0x0
14:43:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:02: Card Command Classess CCC                     :0x5b5
14:43:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:02: DSR(driver stage register)  DSR_IMP           :0x0
14:43:02: Reserv2                                       :0x0
14:43:02: Device Size C_SIZE                            :0xedc8
14:43:02: Reserv3                                       :0x0
14:43:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:02: Reserv4                                       :0x0
14:43:02: Write Speed Factor R2W_FACTOR                 :0x2
14:43:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:02: FILE_FORMAT_GRP                               :0x0
14:43:02: COPY flag                                     :0x1
14:43:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:02: File_Format                                   :0x0
14:43:02: CRC                                           :0x0
14:43:02: ####CSD Registe Values####  

14:43:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:02: [GetSCRRegisterEntry] Passed
14:43:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:02: Data_Status_After Erases          : 0
14:43:02: CPRM Security Support             : No Security
14:43:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:02: Spec. Version                     : Version 3.0X
14:43:02: Extended Security Support         : Extended_Security_Not_Supported
14:43:02: Command Support                   : COMMAND_SUPPORT
14:43:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07E10>, <py_sfcl.CommandDataDefinition object at 0x05E0F8A0>) , Command count = 3772 ] 
14:43:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04870>, <py_sfcl.CommandDataDefinition object at 0x05E003C0>) , Command count = 3773 ] 
14:43:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:02: [ SetBusWidth(0x4) , Command count = 3774 ] 
14:43:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E049F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3775 ] 
14:43:02: Protected Area Size 0x28000
14:43:02: Bus Width           2
14:43:02: Secure Mode         0
14:43:02: Speed  Class        4
14:43:02: Perf Move           0
14:43:02: Au Size             9
14:43:02: Erase Size          15
14:43:02: Erase Timeout       1
14:43:02: Erase offset        1
14:43:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3776 ] 
14:43:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:02: Host Frequency set to 100000 KHz
14:43:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:02: ####CSD Registe 2.0 Values####
14:43:02: CSD_STRUCTURE                                 :0x1
14:43:02: Reserv1                                       :0x0
14:43:02: Time Access 1 TAAC                            :0xe
14:43:03: Time Access 2 NSAC*100                        :0x0
14:43:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:03: Card Command Classess CCC                     :0x5b5
14:43:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:03: DSR(driver stage register)  DSR_IMP           :0x0
14:43:03: Reserv2                                       :0x0
14:43:03: Device Size C_SIZE                            :0xedc8
14:43:03: Reserv3                                       :0x0
14:43:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:03: Reserv4                                       :0x0
14:43:03: Write Speed Factor R2W_FACTOR                 :0x2
14:43:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:03: FILE_FORMAT_GRP                               :0x0
14:43:03: COPY flag                                     :0x1
14:43:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:03: File_Format                                   :0x0
14:43:03: CRC                                           :0x0
14:43:03: ####CSD Registe Values####  

14:43:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BD0>, <py_sfcl.CommandDataDefinition object at 0x05E045A0>) , Command count = 3777 ] 
14:43:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B120>, <py_sfcl.CommandDataDefinition object at 0x05E00DB0>) , Command count = 3778 ] 
14:43:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:03: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00B10>, <py_sfcl.PySEnhancedCmdData object at 0x05E00C30>, <None>, <py_sfcl.Command23 object at 0x05E00330>) , Command count = 3779 ] 
14:43:03: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:05: Host Frequency set to 25000 KHz
14:43:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F630>, 0x0, True) , Command count = 3780 ] 
14:43:05: [GO18_globalSetVolt]### Host voltage value is set.
14:43:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04660>, 0x0, False) , Command count = 3781 ] 
14:43:05: [GO18_globalSetVolt]### Host voltage value is set.
14:43:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3782 ] 
14:43:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3783 ] 
14:43:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3784 ] 
14:43:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F00>, <py_sfcl.CommandDataDefinition object at 0x05E04900>) , Command count = 3785 ] 
14:43:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF60>, <py_sfcl.CommandDataDefinition object at 0x05E00960>) , Command count = 3786 ] 
14:43:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:05: [ SetCardRCA(0x1, 0xD555) , Command count = 3787 ] 
14:43:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:06: Host Frequency set to 25000 KHz
14:43:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:06: ####CSD Registe 2.0 Values####
14:43:06: CSD_STRUCTURE                                 :0x1
14:43:06: Reserv1                                       :0x0
14:43:06: Time Access 1 TAAC                            :0xe
14:43:06: Time Access 2 NSAC*100                        :0x0
14:43:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:06: Card Command Classess CCC                     :0x5b5
14:43:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:06: DSR(driver stage register)  DSR_IMP           :0x0
14:43:06: Reserv2                                       :0x0
14:43:06: Device Size C_SIZE                            :0xedc8
14:43:06: Reserv3                                       :0x0
14:43:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:06: Reserv4                                       :0x0
14:43:06: Write Speed Factor R2W_FACTOR                 :0x2
14:43:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:06: FILE_FORMAT_GRP                               :0x0
14:43:06: COPY flag                                     :0x1
14:43:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:06: File_Format                                   :0x0
14:43:06: CRC                                           :0x0
14:43:06: ####CSD Registe Values####  

14:43:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:06: [GetSCRRegisterEntry] Passed
14:43:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:06: Data_Status_After Erases          : 0
14:43:06: CPRM Security Support             : No Security
14:43:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:06: Spec. Version                     : Version 3.0X
14:43:06: Extended Security Support         : Extended_Security_Not_Supported
14:43:06: Command Support                   : COMMAND_SUPPORT
14:43:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E079C0>, <py_sfcl.CommandDataDefinition object at 0x05E00FC0>) , Command count = 3788 ] 
14:43:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07450>, <py_sfcl.CommandDataDefinition object at 0x05E0F0F0>) , Command count = 3789 ] 
14:43:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:06: [ SetBusWidth(0x4) , Command count = 3790 ] 
14:43:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3791 ] 
14:43:06: Protected Area Size 0x28000
14:43:06: Bus Width           2
14:43:06: Secure Mode         0
14:43:06: Speed  Class        4
14:43:06: Perf Move           0
14:43:06: Au Size             9
14:43:06: Erase Size          15
14:43:06: Erase Timeout       1
14:43:06: Erase offset        1
14:43:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3792 ] 
14:43:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:06: Host Frequency set to 100000 KHz
14:43:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:06: ####CSD Registe 2.0 Values####
14:43:06: CSD_STRUCTURE                                 :0x1
14:43:06: Reserv1                                       :0x0
14:43:06: Time Access 1 TAAC                            :0xe
14:43:06: Time Access 2 NSAC*100                        :0x0
14:43:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:06: Card Command Classess CCC                     :0x5b5
14:43:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:06: DSR(driver stage register)  DSR_IMP           :0x0
14:43:06: Reserv2                                       :0x0
14:43:06: Device Size C_SIZE                            :0xedc8
14:43:06: Reserv3                                       :0x0
14:43:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:06: Reserv4                                       :0x0
14:43:06: Write Speed Factor R2W_FACTOR                 :0x2
14:43:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:06: FILE_FORMAT_GRP                               :0x0
14:43:06: COPY flag                                     :0x1
14:43:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:06: File_Format                                   :0x0
14:43:06: CRC                                           :0x0
14:43:06: ####CSD Registe Values####  

14:43:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049F0>, <py_sfcl.CommandDataDefinition object at 0x05E04720>) , Command count = 3793 ] 
14:43:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BC60>, <py_sfcl.CommandDataDefinition object at 0x05E04060>) , Command count = 3794 ] 
14:43:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:06: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00C90>, <py_sfcl.PySEnhancedCmdData object at 0x05E00810>, <None>, <py_sfcl.Command23 object at 0x05E00CC0>) , Command count = 3795 ] 
14:43:06: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:08: Host Frequency set to 25000 KHz
14:43:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F2D0>, 0x0, True) , Command count = 3796 ] 
14:43:08: [GO18_globalSetVolt]### Host voltage value is set.
14:43:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B2D0>, 0x0, False) , Command count = 3797 ] 
14:43:08: [GO18_globalSetVolt]### Host voltage value is set.
14:43:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3798 ] 
14:43:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3799 ] 
14:43:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3800 ] 
14:43:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF30>, <py_sfcl.CommandDataDefinition object at 0x05E0B810>) , Command count = 3801 ] 
14:43:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE10>, <py_sfcl.CommandDataDefinition object at 0x05E0FEA0>) , Command count = 3802 ] 
14:43:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:09: [ SetCardRCA(0x1, 0xD555) , Command count = 3803 ] 
14:43:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:09: Host Frequency set to 25000 KHz
14:43:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:09: ####CSD Registe 2.0 Values####
14:43:09: CSD_STRUCTURE                                 :0x1
14:43:09: Reserv1                                       :0x0
14:43:09: Time Access 1 TAAC                            :0xe
14:43:09: Time Access 2 NSAC*100                        :0x0
14:43:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:09: Card Command Classess CCC                     :0x5b5
14:43:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:09: DSR(driver stage register)  DSR_IMP           :0x0
14:43:09: Reserv2                                       :0x0
14:43:09: Device Size C_SIZE                            :0xedc8
14:43:09: Reserv3                                       :0x0
14:43:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:09: Reserv4                                       :0x0
14:43:09: Write Speed Factor R2W_FACTOR                 :0x2
14:43:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:09: FILE_FORMAT_GRP                               :0x0
14:43:09: COPY flag                                     :0x1
14:43:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:09: File_Format                                   :0x0
14:43:09: CRC                                           :0x0
14:43:09: ####CSD Registe Values####  

14:43:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:09: [GetSCRRegisterEntry] Passed
14:43:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:09: Data_Status_After Erases          : 0
14:43:09: CPRM Security Support             : No Security
14:43:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:09: Spec. Version                     : Version 3.0X
14:43:09: Extended Security Support         : Extended_Security_Not_Supported
14:43:09: Command Support                   : COMMAND_SUPPORT
14:43:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E0B060>) , Command count = 3804 ] 
14:43:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E40>, <py_sfcl.CommandDataDefinition object at 0x05E0B540>) , Command count = 3805 ] 
14:43:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:09: [ SetBusWidth(0x4) , Command count = 3806 ] 
14:43:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3807 ] 
14:43:09: Protected Area Size 0x28000
14:43:09: Bus Width           2
14:43:09: Secure Mode         0
14:43:09: Speed  Class        4
14:43:09: Perf Move           0
14:43:09: Au Size             9
14:43:09: Erase Size          15
14:43:09: Erase Timeout       1
14:43:09: Erase offset        1
14:43:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3808 ] 
14:43:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:09: Host Frequency set to 100000 KHz
14:43:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:09: ####CSD Registe 2.0 Values####
14:43:09: CSD_STRUCTURE                                 :0x1
14:43:09: Reserv1                                       :0x0
14:43:09: Time Access 1 TAAC                            :0xe
14:43:09: Time Access 2 NSAC*100                        :0x0
14:43:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:09: Card Command Classess CCC                     :0x5b5
14:43:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:09: DSR(driver stage register)  DSR_IMP           :0x0
14:43:09: Reserv2                                       :0x0
14:43:09: Device Size C_SIZE                            :0xedc8
14:43:09: Reserv3                                       :0x0
14:43:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:09: Reserv4                                       :0x0
14:43:09: Write Speed Factor R2W_FACTOR                 :0x2
14:43:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:09: FILE_FORMAT_GRP                               :0x0
14:43:09: COPY flag                                     :0x1
14:43:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:09: File_Format                                   :0x0
14:43:09: CRC                                           :0x0
14:43:09: ####CSD Registe Values####  

14:43:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B10>, <py_sfcl.CommandDataDefinition object at 0x05E0B270>) , Command count = 3809 ] 
14:43:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05262420>, <py_sfcl.CommandDataDefinition object at 0x05E075D0>) , Command count = 3810 ] 
14:43:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:10: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07B10>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5B10>, <None>, <py_sfcl.Command23 object at 0x05DF5900>) , Command count = 3811 ] 
14:43:10: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:12: Host Frequency set to 25000 KHz
14:43:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F30>, 0x0, True) , Command count = 3812 ] 
14:43:12: [GO18_globalSetVolt]### Host voltage value is set.
14:43:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07990>, 0x0, False) , Command count = 3813 ] 
14:43:12: [GO18_globalSetVolt]### Host voltage value is set.
14:43:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3814 ] 
14:43:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3815 ] 
14:43:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3816 ] 
14:43:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07630>, <py_sfcl.CommandDataDefinition object at 0x05DF5AE0>) , Command count = 3817 ] 
14:43:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDB0>, <py_sfcl.CommandDataDefinition object at 0x05E0FCF0>) , Command count = 3818 ] 
14:43:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3819 ] 
14:43:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:12: Host Frequency set to 25000 KHz
14:43:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:12: ####CSD Registe 2.0 Values####
14:43:12: CSD_STRUCTURE                                 :0x1
14:43:12: Reserv1                                       :0x0
14:43:12: Time Access 1 TAAC                            :0xe
14:43:12: Time Access 2 NSAC*100                        :0x0
14:43:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:12: Card Command Classess CCC                     :0x5b5
14:43:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:12: DSR(driver stage register)  DSR_IMP           :0x0
14:43:12: Reserv2                                       :0x0
14:43:12: Device Size C_SIZE                            :0xedc8
14:43:12: Reserv3                                       :0x0
14:43:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:12: Reserv4                                       :0x0
14:43:12: Write Speed Factor R2W_FACTOR                 :0x2
14:43:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:12: FILE_FORMAT_GRP                               :0x0
14:43:12: COPY flag                                     :0x1
14:43:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:12: File_Format                                   :0x0
14:43:12: CRC                                           :0x0
14:43:12: ####CSD Registe Values####  

14:43:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:12: [GetSCRRegisterEntry] Passed
14:43:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:12: Data_Status_After Erases          : 0
14:43:12: CPRM Security Support             : No Security
14:43:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:12: Spec. Version                     : Version 3.0X
14:43:12: Extended Security Support         : Extended_Security_Not_Supported
14:43:12: Command Support                   : COMMAND_SUPPORT
14:43:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F240>, <py_sfcl.CommandDataDefinition object at 0x05E0B690>) , Command count = 3820 ] 
14:43:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9FC0>, <py_sfcl.CommandDataDefinition object at 0x05E04630>) , Command count = 3821 ] 
14:43:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:12: [ SetBusWidth(0x4) , Command count = 3822 ] 
14:43:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3823 ] 
14:43:12: Protected Area Size 0x28000
14:43:12: Bus Width           2
14:43:12: Secure Mode         0
14:43:12: Speed  Class        4
14:43:12: Perf Move           0
14:43:12: Au Size             9
14:43:12: Erase Size          15
14:43:12: Erase Timeout       1
14:43:12: Erase offset        1
14:43:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3824 ] 
14:43:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:12: Host Frequency set to 100000 KHz
14:43:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:13: ####CSD Registe 2.0 Values####
14:43:13: CSD_STRUCTURE                                 :0x1
14:43:13: Reserv1                                       :0x0
14:43:13: Time Access 1 TAAC                            :0xe
14:43:13: Time Access 2 NSAC*100                        :0x0
14:43:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:13: Card Command Classess CCC                     :0x5b5
14:43:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:13: DSR(driver stage register)  DSR_IMP           :0x0
14:43:13: Reserv2                                       :0x0
14:43:13: Device Size C_SIZE                            :0xedc8
14:43:13: Reserv3                                       :0x0
14:43:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:13: Reserv4                                       :0x0
14:43:13: Write Speed Factor R2W_FACTOR                 :0x2
14:43:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:13: FILE_FORMAT_GRP                               :0x0
14:43:13: COPY flag                                     :0x1
14:43:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:13: File_Format                                   :0x0
14:43:13: CRC                                           :0x0
14:43:13: ####CSD Registe Values####  

14:43:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1E0>) , Command count = 3825 ] 
14:43:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C60>, <py_sfcl.CommandDataDefinition object at 0x05E0B150>) , Command count = 3826 ] 
14:43:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:13: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BF00>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B0C0>, <None>, <py_sfcl.Command23 object at 0x05DF5180>) , Command count = 3827 ] 
14:43:13: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:15: Host Frequency set to 25000 KHz
14:43:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB8D0>, 0x0, True) , Command count = 3828 ] 
14:43:15: [GO18_globalSetVolt]### Host voltage value is set.
14:43:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B300>, 0x0, False) , Command count = 3829 ] 
14:43:15: [GO18_globalSetVolt]### Host voltage value is set.
14:43:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3830 ] 
14:43:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3831 ] 
14:43:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3832 ] 
14:43:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FE40>, <py_sfcl.CommandDataDefinition object at 0x05E0B750>) , Command count = 3833 ] 
14:43:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07DE0>, <py_sfcl.CommandDataDefinition object at 0x05E0F780>) , Command count = 3834 ] 
14:43:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:16: [ SetCardRCA(0x1, 0xD555) , Command count = 3835 ] 
14:43:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:16: Host Frequency set to 25000 KHz
14:43:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:16: ####CSD Registe 2.0 Values####
14:43:16: CSD_STRUCTURE                                 :0x1
14:43:16: Reserv1                                       :0x0
14:43:16: Time Access 1 TAAC                            :0xe
14:43:16: Time Access 2 NSAC*100                        :0x0
14:43:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:16: Card Command Classess CCC                     :0x5b5
14:43:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:16: DSR(driver stage register)  DSR_IMP           :0x0
14:43:16: Reserv2                                       :0x0
14:43:16: Device Size C_SIZE                            :0xedc8
14:43:16: Reserv3                                       :0x0
14:43:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:16: Reserv4                                       :0x0
14:43:16: Write Speed Factor R2W_FACTOR                 :0x2
14:43:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:16: FILE_FORMAT_GRP                               :0x0
14:43:16: COPY flag                                     :0x1
14:43:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:16: File_Format                                   :0x0
14:43:16: CRC                                           :0x0
14:43:16: ####CSD Registe Values####  

14:43:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:16: [GetSCRRegisterEntry] Passed
14:43:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:16: Data_Status_After Erases          : 0
14:43:16: CPRM Security Support             : No Security
14:43:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:16: Spec. Version                     : Version 3.0X
14:43:16: Extended Security Support         : Extended_Security_Not_Supported
14:43:16: Command Support                   : COMMAND_SUPPORT
14:43:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F120>, <py_sfcl.CommandDataDefinition object at 0x05E0F450>) , Command count = 3836 ] 
14:43:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05E07840>) , Command count = 3837 ] 
14:43:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:16: [ SetBusWidth(0x4) , Command count = 3838 ] 
14:43:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3839 ] 
14:43:16: Protected Area Size 0x28000
14:43:16: Bus Width           2
14:43:16: Secure Mode         0
14:43:16: Speed  Class        4
14:43:16: Perf Move           0
14:43:16: Au Size             9
14:43:16: Erase Size          15
14:43:16: Erase Timeout       1
14:43:16: Erase offset        1
14:43:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3840 ] 
14:43:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:16: Host Frequency set to 100000 KHz
14:43:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:16: ####CSD Registe 2.0 Values####
14:43:16: CSD_STRUCTURE                                 :0x1
14:43:16: Reserv1                                       :0x0
14:43:16: Time Access 1 TAAC                            :0xe
14:43:16: Time Access 2 NSAC*100                        :0x0
14:43:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:16: Card Command Classess CCC                     :0x5b5
14:43:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:16: DSR(driver stage register)  DSR_IMP           :0x0
14:43:16: Reserv2                                       :0x0
14:43:16: Device Size C_SIZE                            :0xedc8
14:43:16: Reserv3                                       :0x0
14:43:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:16: Reserv4                                       :0x0
14:43:16: Write Speed Factor R2W_FACTOR                 :0x2
14:43:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:16: FILE_FORMAT_GRP                               :0x0
14:43:16: COPY flag                                     :0x1
14:43:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:16: File_Format                                   :0x0
14:43:16: CRC                                           :0x0
14:43:16: ####CSD Registe Values####  

14:43:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB40>) , Command count = 3841 ] 
14:43:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E072D0>, <py_sfcl.CommandDataDefinition object at 0x05E0BE10>) , Command count = 3842 ] 
14:43:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:16: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526F270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BAB0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B720>, <None>, <py_sfcl.Command23 object at 0x05E0B570>) , Command count = 3843 ] 
14:43:17: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:19: Host Frequency set to 25000 KHz
14:43:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527B930>, 0x0, True) , Command count = 3844 ] 
14:43:19: [GO18_globalSetVolt]### Host voltage value is set.
14:43:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B390>, 0x0, False) , Command count = 3845 ] 
14:43:19: [GO18_globalSetVolt]### Host voltage value is set.
14:43:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3846 ] 
14:43:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3847 ] 
14:43:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3848 ] 
14:43:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0521E030>, <py_sfcl.CommandDataDefinition object at 0x05E0B0F0>) , Command count = 3849 ] 
14:43:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FE10>, <py_sfcl.CommandDataDefinition object at 0x05E0F720>) , Command count = 3850 ] 
14:43:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3851 ] 
14:43:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:19: Host Frequency set to 25000 KHz
14:43:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:19: ####CSD Registe 2.0 Values####
14:43:19: CSD_STRUCTURE                                 :0x1
14:43:19: Reserv1                                       :0x0
14:43:19: Time Access 1 TAAC                            :0xe
14:43:19: Time Access 2 NSAC*100                        :0x0
14:43:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:19: Card Command Classess CCC                     :0x5b5
14:43:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:19: DSR(driver stage register)  DSR_IMP           :0x0
14:43:19: Reserv2                                       :0x0
14:43:19: Device Size C_SIZE                            :0xedc8
14:43:19: Reserv3                                       :0x0
14:43:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:19: Reserv4                                       :0x0
14:43:19: Write Speed Factor R2W_FACTOR                 :0x2
14:43:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:19: FILE_FORMAT_GRP                               :0x0
14:43:19: COPY flag                                     :0x1
14:43:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:19: File_Format                                   :0x0
14:43:19: CRC                                           :0x0
14:43:19: ####CSD Registe Values####  

14:43:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:19: [GetSCRRegisterEntry] Passed
14:43:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:19: Data_Status_After Erases          : 0
14:43:19: CPRM Security Support             : No Security
14:43:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:19: Spec. Version                     : Version 3.0X
14:43:19: Extended Security Support         : Extended_Security_Not_Supported
14:43:19: Command Support                   : COMMAND_SUPPORT
14:43:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F2A0>) , Command count = 3852 ] 
14:43:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04570>, <py_sfcl.CommandDataDefinition object at 0x05E0FAB0>) , Command count = 3853 ] 
14:43:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:19: [ SetBusWidth(0x4) , Command count = 3854 ] 
14:43:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3855 ] 
14:43:19: Protected Area Size 0x28000
14:43:19: Bus Width           2
14:43:19: Secure Mode         0
14:43:19: Speed  Class        4
14:43:19: Perf Move           0
14:43:19: Au Size             9
14:43:19: Erase Size          15
14:43:19: Erase Timeout       1
14:43:19: Erase offset        1
14:43:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3856 ] 
14:43:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:19: Host Frequency set to 100000 KHz
14:43:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:19: ####CSD Registe 2.0 Values####
14:43:19: CSD_STRUCTURE                                 :0x1
14:43:19: Reserv1                                       :0x0
14:43:19: Time Access 1 TAAC                            :0xe
14:43:19: Time Access 2 NSAC*100                        :0x0
14:43:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:19: Card Command Classess CCC                     :0x5b5
14:43:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:20: DSR(driver stage register)  DSR_IMP           :0x0
14:43:20: Reserv2                                       :0x0
14:43:20: Device Size C_SIZE                            :0xedc8
14:43:20: Reserv3                                       :0x0
14:43:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:20: Reserv4                                       :0x0
14:43:20: Write Speed Factor R2W_FACTOR                 :0x2
14:43:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:20: FILE_FORMAT_GRP                               :0x0
14:43:20: COPY flag                                     :0x1
14:43:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:20: File_Format                                   :0x0
14:43:20: CRC                                           :0x0
14:43:20: ####CSD Registe Values####  

14:43:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BF30>, <py_sfcl.CommandDataDefinition object at 0x05E0B510>) , Command count = 3857 ] 
14:43:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819C0>, <py_sfcl.CommandDataDefinition object at 0x05E07C30>) , Command count = 3858 ] 
14:43:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:20: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE99C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07A20>, <py_sfcl.PySEnhancedCmdData object at 0x05E07330>, <None>, <py_sfcl.Command23 object at 0x05E0BE40>) , Command count = 3859 ] 
14:43:20: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:22: Host Frequency set to 25000 KHz
14:43:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FCF0>, 0x0, True) , Command count = 3860 ] 
14:43:22: [GO18_globalSetVolt]### Host voltage value is set.
14:43:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281E70>, 0x0, False) , Command count = 3861 ] 
14:43:22: [GO18_globalSetVolt]### Host voltage value is set.
14:43:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3862 ] 
14:43:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3863 ] 
14:43:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3864 ] 
14:43:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527BFC0>, <py_sfcl.CommandDataDefinition object at 0x0526FC60>) , Command count = 3865 ] 
14:43:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FED0>) , Command count = 3866 ] 
14:43:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:23: [ SetCardRCA(0x1, 0xD555) , Command count = 3867 ] 
14:43:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:23: Host Frequency set to 25000 KHz
14:43:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:23: ####CSD Registe 2.0 Values####
14:43:23: CSD_STRUCTURE                                 :0x1
14:43:23: Reserv1                                       :0x0
14:43:23: Time Access 1 TAAC                            :0xe
14:43:23: Time Access 2 NSAC*100                        :0x0
14:43:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:23: Card Command Classess CCC                     :0x5b5
14:43:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:23: DSR(driver stage register)  DSR_IMP           :0x0
14:43:23: Reserv2                                       :0x0
14:43:23: Device Size C_SIZE                            :0xedc8
14:43:23: Reserv3                                       :0x0
14:43:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:23: Reserv4                                       :0x0
14:43:23: Write Speed Factor R2W_FACTOR                 :0x2
14:43:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:23: FILE_FORMAT_GRP                               :0x0
14:43:23: COPY flag                                     :0x1
14:43:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:23: File_Format                                   :0x0
14:43:23: CRC                                           :0x0
14:43:23: ####CSD Registe Values####  

14:43:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:23: [GetSCRRegisterEntry] Passed
14:43:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:23: Data_Status_After Erases          : 0
14:43:23: CPRM Security Support             : No Security
14:43:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:23: Spec. Version                     : Version 3.0X
14:43:23: Extended Security Support         : Extended_Security_Not_Supported
14:43:23: Command Support                   : COMMAND_SUPPORT
14:43:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527B4E0>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 3868 ] 
14:43:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF50C0>, <py_sfcl.CommandDataDefinition object at 0x05E073C0>) , Command count = 3869 ] 
14:43:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:23: [ SetBusWidth(0x4) , Command count = 3870 ] 
14:43:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05144030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3871 ] 
14:43:23: Protected Area Size 0x28000
14:43:23: Bus Width           2
14:43:23: Secure Mode         0
14:43:23: Speed  Class        4
14:43:23: Perf Move           0
14:43:23: Au Size             9
14:43:23: Erase Size          15
14:43:23: Erase Timeout       1
14:43:23: Erase offset        1
14:43:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3872 ] 
14:43:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:23: Host Frequency set to 100000 KHz
14:43:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:23: ####CSD Registe 2.0 Values####
14:43:23: CSD_STRUCTURE                                 :0x1
14:43:23: Reserv1                                       :0x0
14:43:23: Time Access 1 TAAC                            :0xe
14:43:23: Time Access 2 NSAC*100                        :0x0
14:43:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:23: Card Command Classess CCC                     :0x5b5
14:43:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:23: DSR(driver stage register)  DSR_IMP           :0x0
14:43:23: Reserv2                                       :0x0
14:43:23: Device Size C_SIZE                            :0xedc8
14:43:23: Reserv3                                       :0x0
14:43:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:23: Reserv4                                       :0x0
14:43:23: Write Speed Factor R2W_FACTOR                 :0x2
14:43:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:23: FILE_FORMAT_GRP                               :0x0
14:43:23: COPY flag                                     :0x1
14:43:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:23: File_Format                                   :0x0
14:43:23: CRC                                           :0x0
14:43:23: ####CSD Registe Values####  

14:43:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 3873 ] 
14:43:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B70>, <py_sfcl.CommandDataDefinition object at 0x05E0B4E0>) , Command count = 3874 ] 
14:43:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:23: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B7E0>, <None>, <py_sfcl.Command23 object at 0x05E07780>) , Command count = 3875 ] 
14:43:23: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:26: Host Frequency set to 25000 KHz
14:43:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F00>, 0x0, True) , Command count = 3876 ] 
14:43:26: [GO18_globalSetVolt]### Host voltage value is set.
14:43:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B40>, 0x0, False) , Command count = 3877 ] 
14:43:26: [GO18_globalSetVolt]### Host voltage value is set.
14:43:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3878 ] 
14:43:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3879 ] 
14:43:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3880 ] 
14:43:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5510>) , Command count = 3881 ] 
14:43:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E044B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F7E0>) , Command count = 3882 ] 
14:43:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3883 ] 
14:43:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:26: Host Frequency set to 25000 KHz
14:43:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:26: ####CSD Registe 2.0 Values####
14:43:26: CSD_STRUCTURE                                 :0x1
14:43:26: Reserv1                                       :0x0
14:43:26: Time Access 1 TAAC                            :0xe
14:43:26: Time Access 2 NSAC*100                        :0x0
14:43:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:26: Card Command Classess CCC                     :0x5b5
14:43:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:26: DSR(driver stage register)  DSR_IMP           :0x0
14:43:26: Reserv2                                       :0x0
14:43:26: Device Size C_SIZE                            :0xedc8
14:43:26: Reserv3                                       :0x0
14:43:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:26: Reserv4                                       :0x0
14:43:26: Write Speed Factor R2W_FACTOR                 :0x2
14:43:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:26: FILE_FORMAT_GRP                               :0x0
14:43:26: COPY flag                                     :0x1
14:43:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:26: File_Format                                   :0x0
14:43:26: CRC                                           :0x0
14:43:26: ####CSD Registe Values####  

14:43:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:26: [GetSCRRegisterEntry] Passed
14:43:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:26: Data_Status_After Erases          : 0
14:43:26: CPRM Security Support             : No Security
14:43:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:26: Spec. Version                     : Version 3.0X
14:43:26: Extended Security Support         : Extended_Security_Not_Supported
14:43:26: Command Support                   : COMMAND_SUPPORT
14:43:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF030>, <py_sfcl.CommandDataDefinition object at 0x05281F60>) , Command count = 3884 ] 
14:43:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 3885 ] 
14:43:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:26: [ SetBusWidth(0x4) , Command count = 3886 ] 
14:43:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3887 ] 
14:43:26: Protected Area Size 0x28000
14:43:26: Bus Width           2
14:43:26: Secure Mode         0
14:43:26: Speed  Class        4
14:43:26: Perf Move           0
14:43:26: Au Size             9
14:43:26: Erase Size          15
14:43:26: Erase Timeout       1
14:43:26: Erase offset        1
14:43:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3888 ] 
14:43:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:26: Host Frequency set to 100000 KHz
14:43:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:26: ####CSD Registe 2.0 Values####
14:43:26: CSD_STRUCTURE                                 :0x1
14:43:26: Reserv1                                       :0x0
14:43:26: Time Access 1 TAAC                            :0xe
14:43:26: Time Access 2 NSAC*100                        :0x0
14:43:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:26: Card Command Classess CCC                     :0x5b5
14:43:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:26: DSR(driver stage register)  DSR_IMP           :0x0
14:43:26: Reserv2                                       :0x0
14:43:26: Device Size C_SIZE                            :0xedc8
14:43:26: Reserv3                                       :0x0
14:43:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:26: Reserv4                                       :0x0
14:43:27: Write Speed Factor R2W_FACTOR                 :0x2
14:43:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:27: FILE_FORMAT_GRP                               :0x0
14:43:27: COPY flag                                     :0x1
14:43:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:27: File_Format                                   :0x0
14:43:27: CRC                                           :0x0
14:43:27: ####CSD Registe Values####  

14:43:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BC90>, <py_sfcl.CommandDataDefinition object at 0x05DE9C60>) , Command count = 3889 ] 
14:43:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07240>, <py_sfcl.CommandDataDefinition object at 0x05E070F0>) , Command count = 3890 ] 
14:43:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:27: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF58A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07540>, <py_sfcl.PySEnhancedCmdData object at 0x05E07090>, <None>, <py_sfcl.Command23 object at 0x05E0B420>) , Command count = 3891 ] 
14:43:27: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:29: Host Frequency set to 25000 KHz
14:43:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04540>, 0x0, True) , Command count = 3892 ] 
14:43:29: [GO18_globalSetVolt]### Host voltage value is set.
14:43:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9DB0>, 0x0, False) , Command count = 3893 ] 
14:43:29: [GO18_globalSetVolt]### Host voltage value is set.
14:43:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3894 ] 
14:43:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3895 ] 
14:43:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3896 ] 
14:43:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05DF54E0>) , Command count = 3897 ] 
14:43:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5600>, <py_sfcl.CommandDataDefinition object at 0x05E0FB70>) , Command count = 3898 ] 
14:43:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3899 ] 
14:43:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:30: Host Frequency set to 25000 KHz
14:43:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:30: ####CSD Registe 2.0 Values####
14:43:30: CSD_STRUCTURE                                 :0x1
14:43:30: Reserv1                                       :0x0
14:43:30: Time Access 1 TAAC                            :0xe
14:43:30: Time Access 2 NSAC*100                        :0x0
14:43:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:30: Card Command Classess CCC                     :0x5b5
14:43:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:30: DSR(driver stage register)  DSR_IMP           :0x0
14:43:30: Reserv2                                       :0x0
14:43:30: Device Size C_SIZE                            :0xedc8
14:43:30: Reserv3                                       :0x0
14:43:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:30: Reserv4                                       :0x0
14:43:30: Write Speed Factor R2W_FACTOR                 :0x2
14:43:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:30: FILE_FORMAT_GRP                               :0x0
14:43:30: COPY flag                                     :0x1
14:43:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:30: File_Format                                   :0x0
14:43:30: CRC                                           :0x0
14:43:30: ####CSD Registe Values####  

14:43:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:30: [GetSCRRegisterEntry] Passed
14:43:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:30: Data_Status_After Erases          : 0
14:43:30: CPRM Security Support             : No Security
14:43:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:30: Spec. Version                     : Version 3.0X
14:43:30: Extended Security Support         : Extended_Security_Not_Supported
14:43:30: Command Support                   : COMMAND_SUPPORT
14:43:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 3900 ] 
14:43:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 3901 ] 
14:43:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:30: [ SetBusWidth(0x4) , Command count = 3902 ] 
14:43:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3903 ] 
14:43:30: Protected Area Size 0x28000
14:43:30: Bus Width           2
14:43:30: Secure Mode         0
14:43:30: Speed  Class        4
14:43:30: Perf Move           0
14:43:30: Au Size             9
14:43:30: Erase Size          15
14:43:30: Erase Timeout       1
14:43:30: Erase offset        1
14:43:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3904 ] 
14:43:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:30: Host Frequency set to 100000 KHz
14:43:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:30: ####CSD Registe 2.0 Values####
14:43:30: CSD_STRUCTURE                                 :0x1
14:43:30: Reserv1                                       :0x0
14:43:30: Time Access 1 TAAC                            :0xe
14:43:30: Time Access 2 NSAC*100                        :0x0
14:43:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:30: Card Command Classess CCC                     :0x5b5
14:43:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:30: DSR(driver stage register)  DSR_IMP           :0x0
14:43:30: Reserv2                                       :0x0
14:43:30: Device Size C_SIZE                            :0xedc8
14:43:30: Reserv3                                       :0x0
14:43:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:30: Reserv4                                       :0x0
14:43:30: Write Speed Factor R2W_FACTOR                 :0x2
14:43:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:30: FILE_FORMAT_GRP                               :0x0
14:43:30: COPY flag                                     :0x1
14:43:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:30: File_Format                                   :0x0
14:43:30: CRC                                           :0x0
14:43:30: ####CSD Registe Values####  

14:43:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF660>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 3905 ] 
14:43:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BD50>) , Command count = 3906 ] 
14:43:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:30: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E070F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07AB0>, <None>, <py_sfcl.Command23 object at 0x05E07BD0>) , Command count = 3907 ] 
14:43:30: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:32: Host Frequency set to 25000 KHz
14:43:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F9C0>, 0x0, True) , Command count = 3908 ] 
14:43:32: [GO18_globalSetVolt]### Host voltage value is set.
14:43:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04B70>, 0x0, False) , Command count = 3909 ] 
14:43:33: [GO18_globalSetVolt]### Host voltage value is set.
14:43:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3910 ] 
14:43:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3911 ] 
14:43:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3912 ] 
14:43:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BCF0>, <py_sfcl.CommandDataDefinition object at 0x05E07BA0>) , Command count = 3913 ] 
14:43:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0F960>) , Command count = 3914 ] 
14:43:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3915 ] 
14:43:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:33: Host Frequency set to 25000 KHz
14:43:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:33: ####CSD Registe 2.0 Values####
14:43:33: CSD_STRUCTURE                                 :0x1
14:43:33: Reserv1                                       :0x0
14:43:33: Time Access 1 TAAC                            :0xe
14:43:33: Time Access 2 NSAC*100                        :0x0
14:43:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:33: Card Command Classess CCC                     :0x5b5
14:43:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:33: DSR(driver stage register)  DSR_IMP           :0x0
14:43:33: Reserv2                                       :0x0
14:43:33: Device Size C_SIZE                            :0xedc8
14:43:33: Reserv3                                       :0x0
14:43:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:33: Reserv4                                       :0x0
14:43:33: Write Speed Factor R2W_FACTOR                 :0x2
14:43:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:33: FILE_FORMAT_GRP                               :0x0
14:43:33: COPY flag                                     :0x1
14:43:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:33: File_Format                                   :0x0
14:43:33: CRC                                           :0x0
14:43:33: ####CSD Registe Values####  

14:43:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:33: [GetSCRRegisterEntry] Passed
14:43:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:33: Data_Status_After Erases          : 0
14:43:33: CPRM Security Support             : No Security
14:43:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:33: Spec. Version                     : Version 3.0X
14:43:33: Extended Security Support         : Extended_Security_Not_Supported
14:43:33: Command Support                   : COMMAND_SUPPORT
14:43:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D50>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 3916 ] 
14:43:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB510>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 3917 ] 
14:43:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:33: [ SetBusWidth(0x4) , Command count = 3918 ] 
14:43:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3919 ] 
14:43:33: Protected Area Size 0x28000
14:43:33: Bus Width           2
14:43:33: Secure Mode         0
14:43:33: Speed  Class        4
14:43:33: Perf Move           0
14:43:33: Au Size             9
14:43:33: Erase Size          15
14:43:33: Erase Timeout       1
14:43:33: Erase offset        1
14:43:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3920 ] 
14:43:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:33: Host Frequency set to 100000 KHz
14:43:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:33: ####CSD Registe 2.0 Values####
14:43:33: CSD_STRUCTURE                                 :0x1
14:43:33: Reserv1                                       :0x0
14:43:33: Time Access 1 TAAC                            :0xe
14:43:33: Time Access 2 NSAC*100                        :0x0
14:43:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:33: Card Command Classess CCC                     :0x5b5
14:43:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:33: DSR(driver stage register)  DSR_IMP           :0x0
14:43:33: Reserv2                                       :0x0
14:43:33: Device Size C_SIZE                            :0xedc8
14:43:33: Reserv3                                       :0x0
14:43:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:33: Reserv4                                       :0x0
14:43:34: Write Speed Factor R2W_FACTOR                 :0x2
14:43:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:34: FILE_FORMAT_GRP                               :0x0
14:43:34: COPY flag                                     :0x1
14:43:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:34: File_Format                                   :0x0
14:43:34: CRC                                           :0x0
14:43:34: ####CSD Registe Values####  

14:43:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB840>, <py_sfcl.CommandDataDefinition object at 0x05E0BC00>) , Command count = 3921 ] 
14:43:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BBD0>, <py_sfcl.CommandDataDefinition object at 0x05DF52D0>) , Command count = 3922 ] 
14:43:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:34: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5690>, <py_sfcl.PySEnhancedCmdData object at 0x05E100F0>, <None>, <py_sfcl.Command23 object at 0x05E07FC0>) , Command count = 3923 ] 
14:43:34: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:36: Host Frequency set to 25000 KHz
14:43:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04480>, 0x0, True) , Command count = 3924 ] 
14:43:36: [GO18_globalSetVolt]### Host voltage value is set.
14:43:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00450>, 0x0, False) , Command count = 3925 ] 
14:43:36: [GO18_globalSetVolt]### Host voltage value is set.
14:43:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3926 ] 
14:43:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3927 ] 
14:43:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3928 ] 
14:43:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F90>, <py_sfcl.CommandDataDefinition object at 0x05DFB600>) , Command count = 3929 ] 
14:43:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B70>, <py_sfcl.CommandDataDefinition object at 0x05DF5FC0>) , Command count = 3930 ] 
14:43:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:36: [ SetCardRCA(0x1, 0xD555) , Command count = 3931 ] 
14:43:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:36: Host Frequency set to 25000 KHz
14:43:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:36: ####CSD Registe 2.0 Values####
14:43:36: CSD_STRUCTURE                                 :0x1
14:43:36: Reserv1                                       :0x0
14:43:36: Time Access 1 TAAC                            :0xe
14:43:36: Time Access 2 NSAC*100                        :0x0
14:43:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:36: Card Command Classess CCC                     :0x5b5
14:43:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:36: DSR(driver stage register)  DSR_IMP           :0x0
14:43:36: Reserv2                                       :0x0
14:43:36: Device Size C_SIZE                            :0xedc8
14:43:36: Reserv3                                       :0x0
14:43:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:36: Reserv4                                       :0x0
14:43:36: Write Speed Factor R2W_FACTOR                 :0x2
14:43:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:36: FILE_FORMAT_GRP                               :0x0
14:43:36: COPY flag                                     :0x1
14:43:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:36: File_Format                                   :0x0
14:43:36: CRC                                           :0x0
14:43:36: ####CSD Registe Values####  

14:43:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:36: [GetSCRRegisterEntry] Passed
14:43:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:36: Data_Status_After Erases          : 0
14:43:36: CPRM Security Support             : No Security
14:43:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:36: Spec. Version                     : Version 3.0X
14:43:36: Extended Security Support         : Extended_Security_Not_Supported
14:43:36: Command Support                   : COMMAND_SUPPORT
14:43:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBD50>, <py_sfcl.CommandDataDefinition object at 0x05DF5DB0>) , Command count = 3932 ] 
14:43:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB4B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 3933 ] 
14:43:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:36: [ SetBusWidth(0x4) , Command count = 3934 ] 
14:43:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3935 ] 
14:43:36: Protected Area Size 0x28000
14:43:36: Bus Width           2
14:43:36: Secure Mode         0
14:43:36: Speed  Class        4
14:43:36: Perf Move           0
14:43:36: Au Size             9
14:43:36: Erase Size          15
14:43:36: Erase Timeout       1
14:43:36: Erase offset        1
14:43:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3936 ] 
14:43:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:36: Host Frequency set to 100000 KHz
14:43:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:36: ####CSD Registe 2.0 Values####
14:43:36: CSD_STRUCTURE                                 :0x1
14:43:36: Reserv1                                       :0x0
14:43:36: Time Access 1 TAAC                            :0xe
14:43:37: Time Access 2 NSAC*100                        :0x0
14:43:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:37: Card Command Classess CCC                     :0x5b5
14:43:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:37: DSR(driver stage register)  DSR_IMP           :0x0
14:43:37: Reserv2                                       :0x0
14:43:37: Device Size C_SIZE                            :0xedc8
14:43:37: Reserv3                                       :0x0
14:43:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:37: Reserv4                                       :0x0
14:43:37: Write Speed Factor R2W_FACTOR                 :0x2
14:43:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:37: FILE_FORMAT_GRP                               :0x0
14:43:37: COPY flag                                     :0x1
14:43:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:37: File_Format                                   :0x0
14:43:37: CRC                                           :0x0
14:43:37: ####CSD Registe Values####  

14:43:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05DFBC60>) , Command count = 3937 ] 
14:43:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E075A0>, <py_sfcl.CommandDataDefinition object at 0x05E0F5A0>) , Command count = 3938 ] 
14:43:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:37: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E005A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FF30>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F060>, <None>, <py_sfcl.Command23 object at 0x0514AE70>) , Command count = 3939 ] 
14:43:37: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:39: Host Frequency set to 25000 KHz
14:43:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07570>, 0x0, True) , Command count = 3940 ] 
14:43:39: [GO18_globalSetVolt]### Host voltage value is set.
14:43:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E006F0>, 0x0, False) , Command count = 3941 ] 
14:43:39: [GO18_globalSetVolt]### Host voltage value is set.
14:43:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3942 ] 
14:43:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3943 ] 
14:43:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3944 ] 
14:43:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBA0>, <py_sfcl.CommandDataDefinition object at 0x05DFB7E0>) , Command count = 3945 ] 
14:43:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07EA0>, <py_sfcl.CommandDataDefinition object at 0x05DFB750>) , Command count = 3946 ] 
14:43:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:39: [ SetCardRCA(0x1, 0xD555) , Command count = 3947 ] 
14:43:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:40: Host Frequency set to 25000 KHz
14:43:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:40: ####CSD Registe 2.0 Values####
14:43:40: CSD_STRUCTURE                                 :0x1
14:43:40: Reserv1                                       :0x0
14:43:40: Time Access 1 TAAC                            :0xe
14:43:40: Time Access 2 NSAC*100                        :0x0
14:43:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:40: Card Command Classess CCC                     :0x5b5
14:43:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:40: DSR(driver stage register)  DSR_IMP           :0x0
14:43:40: Reserv2                                       :0x0
14:43:40: Device Size C_SIZE                            :0xedc8
14:43:40: Reserv3                                       :0x0
14:43:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:40: Reserv4                                       :0x0
14:43:40: Write Speed Factor R2W_FACTOR                 :0x2
14:43:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:40: FILE_FORMAT_GRP                               :0x0
14:43:40: COPY flag                                     :0x1
14:43:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:40: File_Format                                   :0x0
14:43:40: CRC                                           :0x0
14:43:40: ####CSD Registe Values####  

14:43:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:40: [GetSCRRegisterEntry] Passed
14:43:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:40: Data_Status_After Erases          : 0
14:43:40: CPRM Security Support             : No Security
14:43:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:40: Spec. Version                     : Version 3.0X
14:43:40: Extended Security Support         : Extended_Security_Not_Supported
14:43:40: Command Support                   : COMMAND_SUPPORT
14:43:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 3948 ] 
14:43:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F030>, <py_sfcl.CommandDataDefinition object at 0x05DFB930>) , Command count = 3949 ] 
14:43:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:40: [ SetBusWidth(0x4) , Command count = 3950 ] 
14:43:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3951 ] 
14:43:40: Protected Area Size 0x28000
14:43:40: Bus Width           2
14:43:40: Secure Mode         0
14:43:40: Speed  Class        4
14:43:40: Perf Move           0
14:43:40: Au Size             9
14:43:40: Erase Size          15
14:43:40: Erase Timeout       1
14:43:40: Erase offset        1
14:43:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3952 ] 
14:43:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:40: Host Frequency set to 100000 KHz
14:43:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:40: ####CSD Registe 2.0 Values####
14:43:40: CSD_STRUCTURE                                 :0x1
14:43:40: Reserv1                                       :0x0
14:43:40: Time Access 1 TAAC                            :0xe
14:43:40: Time Access 2 NSAC*100                        :0x0
14:43:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:40: Card Command Classess CCC                     :0x5b5
14:43:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:40: DSR(driver stage register)  DSR_IMP           :0x0
14:43:40: Reserv2                                       :0x0
14:43:40: Device Size C_SIZE                            :0xedc8
14:43:40: Reserv3                                       :0x0
14:43:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:40: Reserv4                                       :0x0
14:43:40: Write Speed Factor R2W_FACTOR                 :0x2
14:43:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:40: FILE_FORMAT_GRP                               :0x0
14:43:40: COPY flag                                     :0x1
14:43:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:40: File_Format                                   :0x0
14:43:40: CRC                                           :0x0
14:43:40: ####CSD Registe Values####  

14:43:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DFB390>) , Command count = 3953 ] 
14:43:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00090>, <py_sfcl.CommandDataDefinition object at 0x05DF54B0>) , Command count = 3954 ] 
14:43:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:40: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5BA0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5D80>, <None>, <py_sfcl.Command23 object at 0x05E0FC00>) , Command count = 3955 ] 
14:43:40: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:43: Host Frequency set to 25000 KHz
14:43:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F150>, 0x0, True) , Command count = 3956 ] 
14:43:43: [GO18_globalSetVolt]### Host voltage value is set.
14:43:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04090>, 0x0, False) , Command count = 3957 ] 
14:43:43: [GO18_globalSetVolt]### Host voltage value is set.
14:43:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3958 ] 
14:43:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3959 ] 
14:43:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3960 ] 
14:43:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB1B0>, <py_sfcl.CommandDataDefinition object at 0x05DFB330>) , Command count = 3961 ] 
14:43:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046F0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA20>) , Command count = 3962 ] 
14:43:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3963 ] 
14:43:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:43: Host Frequency set to 25000 KHz
14:43:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:43: ####CSD Registe 2.0 Values####
14:43:43: CSD_STRUCTURE                                 :0x1
14:43:43: Reserv1                                       :0x0
14:43:43: Time Access 1 TAAC                            :0xe
14:43:43: Time Access 2 NSAC*100                        :0x0
14:43:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:43: Card Command Classess CCC                     :0x5b5
14:43:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:43: DSR(driver stage register)  DSR_IMP           :0x0
14:43:43: Reserv2                                       :0x0
14:43:43: Device Size C_SIZE                            :0xedc8
14:43:43: Reserv3                                       :0x0
14:43:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:43: Reserv4                                       :0x0
14:43:43: Write Speed Factor R2W_FACTOR                 :0x2
14:43:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:43: FILE_FORMAT_GRP                               :0x0
14:43:43: COPY flag                                     :0x1
14:43:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:43: File_Format                                   :0x0
14:43:43: CRC                                           :0x0
14:43:43: ####CSD Registe Values####  

14:43:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:43: [GetSCRRegisterEntry] Passed
14:43:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:43: Data_Status_After Erases          : 0
14:43:43: CPRM Security Support             : No Security
14:43:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:43: Spec. Version                     : Version 3.0X
14:43:43: Extended Security Support         : Extended_Security_Not_Supported
14:43:43: Command Support                   : COMMAND_SUPPORT
14:43:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04390>, <py_sfcl.CommandDataDefinition object at 0x05E0F330>) , Command count = 3964 ] 
14:43:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB180>, <py_sfcl.CommandDataDefinition object at 0x05DFBEA0>) , Command count = 3965 ] 
14:43:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:43: [ SetBusWidth(0x4) , Command count = 3966 ] 
14:43:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3967 ] 
14:43:43: Protected Area Size 0x28000
14:43:43: Bus Width           2
14:43:43: Secure Mode         0
14:43:43: Speed  Class        4
14:43:43: Perf Move           0
14:43:43: Au Size             9
14:43:43: Erase Size          15
14:43:43: Erase Timeout       1
14:43:43: Erase offset        1
14:43:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3968 ] 
14:43:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:43: Host Frequency set to 100000 KHz
14:43:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:43: ####CSD Registe 2.0 Values####
14:43:43: CSD_STRUCTURE                                 :0x1
14:43:43: Reserv1                                       :0x0
14:43:43: Time Access 1 TAAC                            :0xe
14:43:43: Time Access 2 NSAC*100                        :0x0
14:43:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:43: Card Command Classess CCC                     :0x5b5
14:43:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:43: DSR(driver stage register)  DSR_IMP           :0x0
14:43:43: Reserv2                                       :0x0
14:43:43: Device Size C_SIZE                            :0xedc8
14:43:43: Reserv3                                       :0x0
14:43:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:43: Reserv4                                       :0x0
14:43:44: Write Speed Factor R2W_FACTOR                 :0x2
14:43:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:44: FILE_FORMAT_GRP                               :0x0
14:43:44: COPY flag                                     :0x1
14:43:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:44: File_Format                                   :0x0
14:43:44: CRC                                           :0x0
14:43:44: ####CSD Registe Values####  

14:43:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB70>, <py_sfcl.CommandDataDefinition object at 0x05DFB540>) , Command count = 3969 ] 
14:43:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07030>, <py_sfcl.CommandDataDefinition object at 0x05DF5F00>) , Command count = 3970 ] 
14:43:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:44: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00F60>, <py_sfcl.PySEnhancedCmdData object at 0x05E00390>, <None>, <py_sfcl.Command23 object at 0x05DF52A0>) , Command count = 3971 ] 
14:43:44: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:46: Host Frequency set to 25000 KHz
14:43:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FD20>, 0x0, True) , Command count = 3972 ] 
14:43:46: [GO18_globalSetVolt]### Host voltage value is set.
14:43:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00030>, 0x0, False) , Command count = 3973 ] 
14:43:46: [GO18_globalSetVolt]### Host voltage value is set.
14:43:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3974 ] 
14:43:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3975 ] 
14:43:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3976 ] 
14:43:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04210>, <py_sfcl.CommandDataDefinition object at 0x05E00300>) , Command count = 3977 ] 
14:43:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB3F0>) , Command count = 3978 ] 
14:43:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:46: [ SetCardRCA(0x1, 0xD555) , Command count = 3979 ] 
14:43:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:46: Host Frequency set to 25000 KHz
14:43:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:46: ####CSD Registe 2.0 Values####
14:43:46: CSD_STRUCTURE                                 :0x1
14:43:46: Reserv1                                       :0x0
14:43:46: Time Access 1 TAAC                            :0xe
14:43:46: Time Access 2 NSAC*100                        :0x0
14:43:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:46: Card Command Classess CCC                     :0x5b5
14:43:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:46: DSR(driver stage register)  DSR_IMP           :0x0
14:43:46: Reserv2                                       :0x0
14:43:46: Device Size C_SIZE                            :0xedc8
14:43:46: Reserv3                                       :0x0
14:43:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:46: Reserv4                                       :0x0
14:43:46: Write Speed Factor R2W_FACTOR                 :0x2
14:43:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:46: FILE_FORMAT_GRP                               :0x0
14:43:46: COPY flag                                     :0x1
14:43:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:46: File_Format                                   :0x0
14:43:46: CRC                                           :0x0
14:43:46: ####CSD Registe Values####  

14:43:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:46: [GetSCRRegisterEntry] Passed
14:43:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:46: Data_Status_After Erases          : 0
14:43:46: CPRM Security Support             : No Security
14:43:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:46: Spec. Version                     : Version 3.0X
14:43:46: Extended Security Support         : Extended_Security_Not_Supported
14:43:46: Command Support                   : COMMAND_SUPPORT
14:43:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F3F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC60>) , Command count = 3980 ] 
14:43:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F810>, <py_sfcl.CommandDataDefinition object at 0x05E04C90>) , Command count = 3981 ] 
14:43:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:46: [ SetBusWidth(0x4) , Command count = 3982 ] 
14:43:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3983 ] 
14:43:46: Protected Area Size 0x28000
14:43:46: Bus Width           2
14:43:46: Secure Mode         0
14:43:46: Speed  Class        4
14:43:46: Perf Move           0
14:43:46: Au Size             9
14:43:46: Erase Size          15
14:43:46: Erase Timeout       1
14:43:46: Erase offset        1
14:43:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3984 ] 
14:43:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:46: Host Frequency set to 100000 KHz
14:43:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:47: ####CSD Registe 2.0 Values####
14:43:47: CSD_STRUCTURE                                 :0x1
14:43:47: Reserv1                                       :0x0
14:43:47: Time Access 1 TAAC                            :0xe
14:43:47: Time Access 2 NSAC*100                        :0x0
14:43:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:47: Card Command Classess CCC                     :0x5b5
14:43:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:47: DSR(driver stage register)  DSR_IMP           :0x0
14:43:47: Reserv2                                       :0x0
14:43:47: Device Size C_SIZE                            :0xedc8
14:43:47: Reserv3                                       :0x0
14:43:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:47: Reserv4                                       :0x0
14:43:47: Write Speed Factor R2W_FACTOR                 :0x2
14:43:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:47: FILE_FORMAT_GRP                               :0x0
14:43:47: COPY flag                                     :0x1
14:43:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:47: File_Format                                   :0x0
14:43:47: CRC                                           :0x0
14:43:47: ####CSD Registe Values####  

14:43:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57B0>, <py_sfcl.CommandDataDefinition object at 0x05DFB630>) , Command count = 3985 ] 
14:43:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00990>, <py_sfcl.CommandDataDefinition object at 0x05E000C0>) , Command count = 3986 ] 
14:43:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:47: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB630>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB6F0>, <None>, <py_sfcl.Command23 object at 0x05E00360>) , Command count = 3987 ] 
14:43:47: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:49: Host Frequency set to 25000 KHz
14:43:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00060>, 0x0, True) , Command count = 3988 ] 
14:43:49: [GO18_globalSetVolt]### Host voltage value is set.
14:43:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F570>, 0x0, False) , Command count = 3989 ] 
14:43:49: [GO18_globalSetVolt]### Host voltage value is set.
14:43:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3990 ] 
14:43:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3991 ] 
14:43:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3992 ] 
14:43:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F480>, <py_sfcl.CommandDataDefinition object at 0x05E0FA20>) , Command count = 3993 ] 
14:43:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05E0FBD0>) , Command count = 3994 ] 
14:43:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3995 ] 
14:43:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:50: Host Frequency set to 25000 KHz
14:43:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:50: ####CSD Registe 2.0 Values####
14:43:50: CSD_STRUCTURE                                 :0x1
14:43:50: Reserv1                                       :0x0
14:43:50: Time Access 1 TAAC                            :0xe
14:43:50: Time Access 2 NSAC*100                        :0x0
14:43:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:50: Card Command Classess CCC                     :0x5b5
14:43:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:50: DSR(driver stage register)  DSR_IMP           :0x0
14:43:50: Reserv2                                       :0x0
14:43:50: Device Size C_SIZE                            :0xedc8
14:43:50: Reserv3                                       :0x0
14:43:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:50: Reserv4                                       :0x0
14:43:50: Write Speed Factor R2W_FACTOR                 :0x2
14:43:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:50: FILE_FORMAT_GRP                               :0x0
14:43:50: COPY flag                                     :0x1
14:43:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:50: File_Format                                   :0x0
14:43:50: CRC                                           :0x0
14:43:50: ####CSD Registe Values####  

14:43:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:50: [GetSCRRegisterEntry] Passed
14:43:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:50: Data_Status_After Erases          : 0
14:43:50: CPRM Security Support             : No Security
14:43:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:50: Spec. Version                     : Version 3.0X
14:43:50: Extended Security Support         : Extended_Security_Not_Supported
14:43:50: Command Support                   : COMMAND_SUPPORT
14:43:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A20>, <py_sfcl.CommandDataDefinition object at 0x05E048D0>) , Command count = 3996 ] 
14:43:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A50>, <py_sfcl.CommandDataDefinition object at 0x05E00BD0>) , Command count = 3997 ] 
14:43:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:50: [ SetBusWidth(0x4) , Command count = 3998 ] 
14:43:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3999 ] 
14:43:50: Protected Area Size 0x28000
14:43:50: Bus Width           2
14:43:50: Secure Mode         0
14:43:50: Speed  Class        4
14:43:50: Perf Move           0
14:43:50: Au Size             9
14:43:50: Erase Size          15
14:43:50: Erase Timeout       1
14:43:50: Erase offset        1
14:43:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4000 ] 
14:43:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:50: Host Frequency set to 100000 KHz
14:43:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:50: ####CSD Registe 2.0 Values####
14:43:50: CSD_STRUCTURE                                 :0x1
14:43:50: Reserv1                                       :0x0
14:43:50: Time Access 1 TAAC                            :0xe
14:43:50: Time Access 2 NSAC*100                        :0x0
14:43:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:50: Card Command Classess CCC                     :0x5b5
14:43:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:50: DSR(driver stage register)  DSR_IMP           :0x0
14:43:50: Reserv2                                       :0x0
14:43:50: Device Size C_SIZE                            :0xedc8
14:43:50: Reserv3                                       :0x0
14:43:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:50: Reserv4                                       :0x0
14:43:50: Write Speed Factor R2W_FACTOR                 :0x2
14:43:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:50: FILE_FORMAT_GRP                               :0x0
14:43:50: COPY flag                                     :0x1
14:43:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:50: File_Format                                   :0x0
14:43:51: CRC                                           :0x0
14:43:51: ####CSD Registe Values####  

14:43:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07120>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 4001 ] 
14:43:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py_sfcl.CommandDataDefinition object at 0x05DF5720>) , Command count = 4002 ] 
14:43:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E044E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBCF0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB660>, <None>, <py_sfcl.Command23 object at 0x05DFB810>) , Command count = 4003 ] 
14:43:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:53: Host Frequency set to 25000 KHz
14:43:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E078A0>, 0x0, True) , Command count = 4004 ] 
14:43:53: [GO18_globalSetVolt]### Host voltage value is set.
14:43:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00EA0>, 0x0, False) , Command count = 4005 ] 
14:43:53: [GO18_globalSetVolt]### Host voltage value is set.
14:43:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4006 ] 
14:43:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4007 ] 
14:43:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4008 ] 
14:43:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FB40>, <py_sfcl.CommandDataDefinition object at 0x05E04120>) , Command count = 4009 ] 
14:43:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A50>, <py_sfcl.CommandDataDefinition object at 0x05E00240>) , Command count = 4010 ] 
14:43:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:53: [ SetCardRCA(0x1, 0xD555) , Command count = 4011 ] 
14:43:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:53: Host Frequency set to 25000 KHz
14:43:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:53: ####CSD Registe 2.0 Values####
14:43:53: CSD_STRUCTURE                                 :0x1
14:43:53: Reserv1                                       :0x0
14:43:53: Time Access 1 TAAC                            :0xe
14:43:53: Time Access 2 NSAC*100                        :0x0
14:43:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:53: Card Command Classess CCC                     :0x5b5
14:43:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:53: DSR(driver stage register)  DSR_IMP           :0x0
14:43:53: Reserv2                                       :0x0
14:43:53: Device Size C_SIZE                            :0xedc8
14:43:53: Reserv3                                       :0x0
14:43:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:53: Reserv4                                       :0x0
14:43:53: Write Speed Factor R2W_FACTOR                 :0x2
14:43:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:53: FILE_FORMAT_GRP                               :0x0
14:43:53: COPY flag                                     :0x1
14:43:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:53: File_Format                                   :0x0
14:43:53: CRC                                           :0x0
14:43:53: ####CSD Registe Values####  

14:43:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:53: [GetSCRRegisterEntry] Passed
14:43:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:53: Data_Status_After Erases          : 0
14:43:53: CPRM Security Support             : No Security
14:43:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:53: Spec. Version                     : Version 3.0X
14:43:53: Extended Security Support         : Extended_Security_Not_Supported
14:43:53: Command Support                   : COMMAND_SUPPORT
14:43:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F750>, <py_sfcl.CommandDataDefinition object at 0x05E04AB0>) , Command count = 4012 ] 
14:43:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046C0>, <py_sfcl.CommandDataDefinition object at 0x05E00F30>) , Command count = 4013 ] 
14:43:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:53: [ SetBusWidth(0x4) , Command count = 4014 ] 
14:43:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4015 ] 
14:43:53: Protected Area Size 0x28000
14:43:53: Bus Width           2
14:43:53: Secure Mode         0
14:43:53: Speed  Class        4
14:43:53: Perf Move           0
14:43:53: Au Size             9
14:43:53: Erase Size          15
14:43:53: Erase Timeout       1
14:43:53: Erase offset        1
14:43:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4016 ] 
14:43:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:53: Host Frequency set to 100000 KHz
14:43:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:53: ####CSD Registe 2.0 Values####
14:43:53: CSD_STRUCTURE                                 :0x1
14:43:53: Reserv1                                       :0x0
14:43:54: Time Access 1 TAAC                            :0xe
14:43:54: Time Access 2 NSAC*100                        :0x0
14:43:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:54: Card Command Classess CCC                     :0x5b5
14:43:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:54: DSR(driver stage register)  DSR_IMP           :0x0
14:43:54: Reserv2                                       :0x0
14:43:54: Device Size C_SIZE                            :0xedc8
14:43:54: Reserv3                                       :0x0
14:43:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:54: Reserv4                                       :0x0
14:43:54: Write Speed Factor R2W_FACTOR                 :0x2
14:43:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:54: FILE_FORMAT_GRP                               :0x0
14:43:54: COPY flag                                     :0x1
14:43:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:54: File_Format                                   :0x0
14:43:54: CRC                                           :0x0
14:43:54: ####CSD Registe Values####  

14:43:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E041B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5A80>) , Command count = 4017 ] 
14:43:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F930>, <py_sfcl.CommandDataDefinition object at 0x05E00480>) , Command count = 4018 ] 
14:43:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:54: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00780>, <py_sfcl.PySEnhancedCmdData object at 0x05E00B70>, <None>, <py_sfcl.Command23 object at 0x05DFBA80>) , Command count = 4019 ] 
14:43:54: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:56: Host Frequency set to 25000 KHz
14:43:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E043C0>, 0x0, True) , Command count = 4020 ] 
14:43:56: [GO18_globalSetVolt]### Host voltage value is set.
14:43:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B090>, 0x0, False) , Command count = 4021 ] 
14:43:56: [GO18_globalSetVolt]### Host voltage value is set.
14:43:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4022 ] 
14:43:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4023 ] 
14:43:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4024 ] 
14:43:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04300>, <py_sfcl.CommandDataDefinition object at 0x05E0F8A0>) , Command count = 4025 ] 
14:43:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E04240>) , Command count = 4026 ] 
14:43:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:56: [ SetCardRCA(0x1, 0xD555) , Command count = 4027 ] 
14:43:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:57: Host Frequency set to 25000 KHz
14:43:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:57: ####CSD Registe 2.0 Values####
14:43:57: CSD_STRUCTURE                                 :0x1
14:43:57: Reserv1                                       :0x0
14:43:57: Time Access 1 TAAC                            :0xe
14:43:57: Time Access 2 NSAC*100                        :0x0
14:43:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:57: Card Command Classess CCC                     :0x5b5
14:43:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:57: DSR(driver stage register)  DSR_IMP           :0x0
14:43:57: Reserv2                                       :0x0
14:43:57: Device Size C_SIZE                            :0xedc8
14:43:57: Reserv3                                       :0x0
14:43:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:57: Reserv4                                       :0x0
14:43:57: Write Speed Factor R2W_FACTOR                 :0x2
14:43:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:57: FILE_FORMAT_GRP                               :0x0
14:43:57: COPY flag                                     :0x1
14:43:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:57: File_Format                                   :0x0
14:43:57: CRC                                           :0x0
14:43:57: ####CSD Registe Values####  

14:43:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:57: [GetSCRRegisterEntry] Passed
14:43:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:57: Data_Status_After Erases          : 0
14:43:57: CPRM Security Support             : No Security
14:43:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:57: Spec. Version                     : Version 3.0X
14:43:57: Extended Security Support         : Extended_Security_Not_Supported
14:43:57: Command Support                   : COMMAND_SUPPORT
14:43:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04870>, <py_sfcl.CommandDataDefinition object at 0x05E047B0>) , Command count = 4028 ] 
14:43:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BD0>, <py_sfcl.CommandDataDefinition object at 0x05E045A0>) , Command count = 4029 ] 
14:43:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:57: [ SetBusWidth(0x4) , Command count = 4030 ] 
14:43:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4031 ] 
14:43:57: Protected Area Size 0x28000
14:43:57: Bus Width           2
14:43:57: Secure Mode         0
14:43:57: Speed  Class        4
14:43:57: Perf Move           0
14:43:57: Au Size             9
14:43:57: Erase Size          15
14:43:57: Erase Timeout       1
14:43:57: Erase offset        1
14:43:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4032 ] 
14:43:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:57: Host Frequency set to 100000 KHz
14:43:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:57: ####CSD Registe 2.0 Values####
14:43:57: CSD_STRUCTURE                                 :0x1
14:43:57: Reserv1                                       :0x0
14:43:57: Time Access 1 TAAC                            :0xe
14:43:57: Time Access 2 NSAC*100                        :0x0
14:43:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:57: Card Command Classess CCC                     :0x5b5
14:43:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:57: DSR(driver stage register)  DSR_IMP           :0x0
14:43:57: Reserv2                                       :0x0
14:43:57: Device Size C_SIZE                            :0xedc8
14:43:57: Reserv3                                       :0x0
14:43:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:57: Reserv4                                       :0x0
14:43:57: Write Speed Factor R2W_FACTOR                 :0x2
14:43:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:57: FILE_FORMAT_GRP                               :0x0
14:43:57: COPY flag                                     :0x1
14:43:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:57: File_Format                                   :0x0
14:43:57: CRC                                           :0x0
14:43:57: ####CSD Registe Values####  

14:43:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F90>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 4033 ] 
14:43:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04750>, <py_sfcl.CommandDataDefinition object at 0x05E007B0>) , Command count = 4034 ] 
14:43:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:57: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:43:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:43:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E006C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00ED0>, <None>, <py_sfcl.Command23 object at 0x05E00E10>) , Command count = 4035 ] 
14:43:57: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:43:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:00: Host Frequency set to 25000 KHz
14:44:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B120>, 0x0, True) , Command count = 4036 ] 
14:44:00: [GO18_globalSetVolt]### Host voltage value is set.
14:44:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04F00>, 0x0, False) , Command count = 4037 ] 
14:44:00: [GO18_globalSetVolt]### Host voltage value is set.
14:44:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4038 ] 
14:44:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4039 ] 
14:44:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4040 ] 
14:44:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04330>, <py_sfcl.CommandDataDefinition object at 0x05E00F00>) , Command count = 4041 ] 
14:44:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BAE0>, <py_sfcl.CommandDataDefinition object at 0x05E04780>) , Command count = 4042 ] 
14:44:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:00: [ SetCardRCA(0x1, 0xD555) , Command count = 4043 ] 
14:44:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:00: Host Frequency set to 25000 KHz
14:44:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:00: ####CSD Registe 2.0 Values####
14:44:00: CSD_STRUCTURE                                 :0x1
14:44:00: Reserv1                                       :0x0
14:44:00: Time Access 1 TAAC                            :0xe
14:44:00: Time Access 2 NSAC*100                        :0x0
14:44:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:00: Card Command Classess CCC                     :0x5b5
14:44:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:00: DSR(driver stage register)  DSR_IMP           :0x0
14:44:00: Reserv2                                       :0x0
14:44:00: Device Size C_SIZE                            :0xedc8
14:44:00: Reserv3                                       :0x0
14:44:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:00: Reserv4                                       :0x0
14:44:00: Write Speed Factor R2W_FACTOR                 :0x2
14:44:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:00: FILE_FORMAT_GRP                               :0x0
14:44:00: COPY flag                                     :0x1
14:44:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:00: File_Format                                   :0x0
14:44:00: CRC                                           :0x0
14:44:00: ####CSD Registe Values####  

14:44:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:00: [GetSCRRegisterEntry] Passed
14:44:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:00: Data_Status_After Erases          : 0
14:44:00: CPRM Security Support             : No Security
14:44:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:00: Spec. Version                     : Version 3.0X
14:44:00: Extended Security Support         : Extended_Security_Not_Supported
14:44:00: Command Support                   : COMMAND_SUPPORT
14:44:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07450>, <py_sfcl.CommandDataDefinition object at 0x05E0F0F0>) , Command count = 4044 ] 
14:44:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049F0>, <py_sfcl.CommandDataDefinition object at 0x05E04720>) , Command count = 4045 ] 
14:44:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:00: [ SetBusWidth(0x4) , Command count = 4046 ] 
14:44:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4047 ] 
14:44:00: Protected Area Size 0x28000
14:44:00: Bus Width           2
14:44:00: Secure Mode         0
14:44:00: Speed  Class        4
14:44:00: Perf Move           0
14:44:00: Au Size             9
14:44:00: Erase Size          15
14:44:00: Erase Timeout       1
14:44:00: Erase offset        1
14:44:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4048 ] 
14:44:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:00: Host Frequency set to 100000 KHz
14:44:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:00: ####CSD Registe 2.0 Values####
14:44:00: CSD_STRUCTURE                                 :0x1
14:44:00: Reserv1                                       :0x0
14:44:00: Time Access 1 TAAC                            :0xe
14:44:00: Time Access 2 NSAC*100                        :0x0
14:44:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:00: Card Command Classess CCC                     :0x5b5
14:44:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:00: DSR(driver stage register)  DSR_IMP           :0x0
14:44:00: Reserv2                                       :0x0
14:44:00: Device Size C_SIZE                            :0xedc8
14:44:00: Reserv3                                       :0x0
14:44:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:00: Reserv4                                       :0x0
14:44:00: Write Speed Factor R2W_FACTOR                 :0x2
14:44:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:00: FILE_FORMAT_GRP                               :0x0
14:44:00: COPY flag                                     :0x1
14:44:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:01: File_Format                                   :0x0
14:44:01: CRC                                           :0x0
14:44:01: ####CSD Registe Values####  

14:44:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07960>, <py_sfcl.CommandDataDefinition object at 0x05E077E0>) , Command count = 4049 ] 
14:44:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04270>, <py_sfcl.CommandDataDefinition object at 0x05E00B10>) , Command count = 4050 ] 
14:44:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:01: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526F1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00330>, <py_sfcl.PySEnhancedCmdData object at 0x05E00E40>, <None>, <py_sfcl.Command23 object at 0x05E00DE0>) , Command count = 4051 ] 
14:44:01: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:03: Host Frequency set to 25000 KHz
14:44:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04060>, 0x0, True) , Command count = 4052 ] 
14:44:03: [GO18_globalSetVolt]### Host voltage value is set.
14:44:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E071B0>, 0x0, False) , Command count = 4053 ] 
14:44:03: [GO18_globalSetVolt]### Host voltage value is set.
14:44:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4054 ] 
14:44:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4055 ] 
14:44:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4056 ] 
14:44:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B70>, <py_sfcl.CommandDataDefinition object at 0x05E0F6C0>) , Command count = 4057 ] 
14:44:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BA0>, <py_sfcl.CommandDataDefinition object at 0x05E04180>) , Command count = 4058 ] 
14:44:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:03: [ SetCardRCA(0x1, 0xD555) , Command count = 4059 ] 
14:44:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:03: Host Frequency set to 25000 KHz
14:44:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:03: ####CSD Registe 2.0 Values####
14:44:03: CSD_STRUCTURE                                 :0x1
14:44:03: Reserv1                                       :0x0
14:44:03: Time Access 1 TAAC                            :0xe
14:44:03: Time Access 2 NSAC*100                        :0x0
14:44:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:03: Card Command Classess CCC                     :0x5b5
14:44:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:03: DSR(driver stage register)  DSR_IMP           :0x0
14:44:03: Reserv2                                       :0x0
14:44:03: Device Size C_SIZE                            :0xedc8
14:44:03: Reserv3                                       :0x0
14:44:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:03: Reserv4                                       :0x0
14:44:03: Write Speed Factor R2W_FACTOR                 :0x2
14:44:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:03: FILE_FORMAT_GRP                               :0x0
14:44:03: COPY flag                                     :0x1
14:44:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:03: File_Format                                   :0x0
14:44:03: CRC                                           :0x0
14:44:03: ####CSD Registe Values####  

14:44:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:03: [GetSCRRegisterEntry] Passed
14:44:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:03: Data_Status_After Erases          : 0
14:44:03: CPRM Security Support             : No Security
14:44:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:03: Spec. Version                     : Version 3.0X
14:44:03: Extended Security Support         : Extended_Security_Not_Supported
14:44:03: Command Support                   : COMMAND_SUPPORT
14:44:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E40>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 4060 ] 
14:44:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B240>, <py_sfcl.CommandDataDefinition object at 0x05DFBE10>) , Command count = 4061 ] 
14:44:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:03: [ SetBusWidth(0x4) , Command count = 4062 ] 
14:44:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4063 ] 
14:44:03: Protected Area Size 0x28000
14:44:03: Bus Width           2
14:44:03: Secure Mode         0
14:44:03: Speed  Class        4
14:44:03: Perf Move           0
14:44:03: Au Size             9
14:44:03: Erase Size          15
14:44:03: Erase Timeout       1
14:44:03: Erase offset        1
14:44:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4064 ] 
14:44:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:04: Host Frequency set to 100000 KHz
14:44:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:04: ####CSD Registe 2.0 Values####
14:44:04: CSD_STRUCTURE                                 :0x1
14:44:04: Reserv1                                       :0x0
14:44:04: Time Access 1 TAAC                            :0xe
14:44:04: Time Access 2 NSAC*100                        :0x0
14:44:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:04: Card Command Classess CCC                     :0x5b5
14:44:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:04: DSR(driver stage register)  DSR_IMP           :0x0
14:44:04: Reserv2                                       :0x0
14:44:04: Device Size C_SIZE                            :0xedc8
14:44:04: Reserv3                                       :0x0
14:44:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:04: Reserv4                                       :0x0
14:44:04: Write Speed Factor R2W_FACTOR                 :0x2
14:44:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:04: FILE_FORMAT_GRP                               :0x0
14:44:04: COPY flag                                     :0x1
14:44:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:04: File_Format                                   :0x0
14:44:04: CRC                                           :0x0
14:44:04: ####CSD Registe Values####  

14:44:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E10>, <py_sfcl.CommandDataDefinition object at 0x05E07C00>) , Command count = 4065 ] 
14:44:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00210>, <py_sfcl.CommandDataDefinition object at 0x05E00CC0>) , Command count = 4066 ] 
14:44:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:04: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBE10>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB990>, <None>, <py_sfcl.Command23 object at 0x05E00CF0>) , Command count = 4067 ] 
14:44:04: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:06: Host Frequency set to 25000 KHz
14:44:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05262420>, 0x0, True) , Command count = 4068 ] 
14:44:06: [GO18_globalSetVolt]### Host voltage value is set.
14:44:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07630>, 0x0, False) , Command count = 4069 ] 
14:44:06: [GO18_globalSetVolt]### Host voltage value is set.
14:44:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4070 ] 
14:44:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4071 ] 
14:44:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4072 ] 
14:44:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBED0>, <py_sfcl.CommandDataDefinition object at 0x05E0FCF0>) , Command count = 4073 ] 
14:44:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E07E40>) , Command count = 4074 ] 
14:44:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:07: [ SetCardRCA(0x1, 0xD555) , Command count = 4075 ] 
14:44:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:07: Host Frequency set to 25000 KHz
14:44:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:07: ####CSD Registe 2.0 Values####
14:44:07: CSD_STRUCTURE                                 :0x1
14:44:07: Reserv1                                       :0x0
14:44:07: Time Access 1 TAAC                            :0xe
14:44:07: Time Access 2 NSAC*100                        :0x0
14:44:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:07: Card Command Classess CCC                     :0x5b5
14:44:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:07: DSR(driver stage register)  DSR_IMP           :0x0
14:44:07: Reserv2                                       :0x0
14:44:07: Device Size C_SIZE                            :0xedc8
14:44:07: Reserv3                                       :0x0
14:44:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:07: Reserv4                                       :0x0
14:44:07: Write Speed Factor R2W_FACTOR                 :0x2
14:44:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:07: FILE_FORMAT_GRP                               :0x0
14:44:07: COPY flag                                     :0x1
14:44:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:07: File_Format                                   :0x0
14:44:07: CRC                                           :0x0
14:44:07: ####CSD Registe Values####  

14:44:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:07: [GetSCRRegisterEntry] Passed
14:44:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:07: Data_Status_After Erases          : 0
14:44:07: CPRM Security Support             : No Security
14:44:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:07: Spec. Version                     : Version 3.0X
14:44:07: Extended Security Support         : Extended_Security_Not_Supported
14:44:07: Command Support                   : COMMAND_SUPPORT
14:44:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9FC0>, <py_sfcl.CommandDataDefinition object at 0x05E04630>) , Command count = 4076 ] 
14:44:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1E0>) , Command count = 4077 ] 
14:44:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:07: [ SetBusWidth(0x4) , Command count = 4078 ] 
14:44:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4079 ] 
14:44:07: Protected Area Size 0x28000
14:44:07: Bus Width           2
14:44:07: Secure Mode         0
14:44:07: Speed  Class        4
14:44:07: Perf Move           0
14:44:07: Au Size             9
14:44:07: Erase Size          15
14:44:07: Erase Timeout       1
14:44:07: Erase offset        1
14:44:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4080 ] 
14:44:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:07: Host Frequency set to 100000 KHz
14:44:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:07: ####CSD Registe 2.0 Values####
14:44:07: CSD_STRUCTURE                                 :0x1
14:44:07: Reserv1                                       :0x0
14:44:07: Time Access 1 TAAC                            :0xe
14:44:07: Time Access 2 NSAC*100                        :0x0
14:44:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:07: Card Command Classess CCC                     :0x5b5
14:44:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:07: DSR(driver stage register)  DSR_IMP           :0x0
14:44:07: Reserv2                                       :0x0
14:44:07: Device Size C_SIZE                            :0xedc8
14:44:07: Reserv3                                       :0x0
14:44:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:07: Reserv4                                       :0x0
14:44:07: Write Speed Factor R2W_FACTOR                 :0x2
14:44:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:07: FILE_FORMAT_GRP                               :0x0
14:44:07: COPY flag                                     :0x1
14:44:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:07: File_Format                                   :0x0
14:44:07: CRC                                           :0x0
14:44:07: ####CSD Registe Values####  

14:44:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 4081 ] 
14:44:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04030>, <py_sfcl.CommandDataDefinition object at 0x05E0B4B0>) , Command count = 4082 ] 
14:44:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B660>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BD80>, <None>, <py_sfcl.Command23 object at 0x05DFB3C0>) , Command count = 4083 ] 
14:44:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:10: Host Frequency set to 25000 KHz
14:44:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04C60>, 0x0, True) , Command count = 4084 ] 
14:44:10: [GO18_globalSetVolt]### Host voltage value is set.
14:44:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FE40>, 0x0, False) , Command count = 4085 ] 
14:44:10: [GO18_globalSetVolt]### Host voltage value is set.
14:44:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4086 ] 
14:44:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4087 ] 
14:44:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4088 ] 
14:44:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E077B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F450>) , Command count = 4089 ] 
14:44:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C00>, <py_sfcl.CommandDataDefinition object at 0x05E0B8A0>) , Command count = 4090 ] 
14:44:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:10: [ SetCardRCA(0x1, 0xD555) , Command count = 4091 ] 
14:44:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:10: Host Frequency set to 25000 KHz
14:44:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:10: ####CSD Registe 2.0 Values####
14:44:10: CSD_STRUCTURE                                 :0x1
14:44:10: Reserv1                                       :0x0
14:44:10: Time Access 1 TAAC                            :0xe
14:44:10: Time Access 2 NSAC*100                        :0x0
14:44:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:10: Card Command Classess CCC                     :0x5b5
14:44:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:10: DSR(driver stage register)  DSR_IMP           :0x0
14:44:10: Reserv2                                       :0x0
14:44:10: Device Size C_SIZE                            :0xedc8
14:44:10: Reserv3                                       :0x0
14:44:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:10: Reserv4                                       :0x0
14:44:10: Write Speed Factor R2W_FACTOR                 :0x2
14:44:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:10: FILE_FORMAT_GRP                               :0x0
14:44:10: COPY flag                                     :0x1
14:44:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:10: File_Format                                   :0x0
14:44:10: CRC                                           :0x0
14:44:10: ####CSD Registe Values####  

14:44:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:10: [GetSCRRegisterEntry] Passed
14:44:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:10: Data_Status_After Erases          : 0
14:44:10: CPRM Security Support             : No Security
14:44:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:10: Spec. Version                     : Version 3.0X
14:44:10: Extended Security Support         : Extended_Security_Not_Supported
14:44:10: Command Support                   : COMMAND_SUPPORT
14:44:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97E0>, <py_sfcl.CommandDataDefinition object at 0x05E07840>) , Command count = 4092 ] 
14:44:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB40>) , Command count = 4093 ] 
14:44:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:10: [ SetBusWidth(0x4) , Command count = 4094 ] 
14:44:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4095 ] 
14:44:10: Protected Area Size 0x28000
14:44:10: Bus Width           2
14:44:10: Secure Mode         0
14:44:10: Speed  Class        4
14:44:10: Perf Move           0
14:44:10: Au Size             9
14:44:10: Erase Size          15
14:44:10: Erase Timeout       1
14:44:10: Erase offset        1
14:44:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4096 ] 
14:44:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:10: Host Frequency set to 100000 KHz
14:44:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:10: ####CSD Registe 2.0 Values####
14:44:10: CSD_STRUCTURE                                 :0x1
14:44:10: Reserv1                                       :0x0
14:44:10: Time Access 1 TAAC                            :0xe
14:44:10: Time Access 2 NSAC*100                        :0x0
14:44:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:10: Card Command Classess CCC                     :0x5b5
14:44:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:10: DSR(driver stage register)  DSR_IMP           :0x0
14:44:10: Reserv2                                       :0x0
14:44:10: Device Size C_SIZE                            :0xedc8
14:44:10: Reserv3                                       :0x0
14:44:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:10: Reserv4                                       :0x0
14:44:11: Write Speed Factor R2W_FACTOR                 :0x2
14:44:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:11: FILE_FORMAT_GRP                               :0x0
14:44:11: COPY flag                                     :0x1
14:44:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:11: File_Format                                   :0x0
14:44:11: CRC                                           :0x0
14:44:11: ####CSD Registe Values####  

14:44:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B10>, <py_sfcl.CommandDataDefinition object at 0x05E076F0>) , Command count = 4097 ] 
14:44:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A80>, <py_sfcl.CommandDataDefinition object at 0x05E0BF00>) , Command count = 4098 ] 
14:44:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:11: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052177E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BA80>, <None>, <py_sfcl.Command23 object at 0x05E0B2A0>) , Command count = 4099 ] 
14:44:11: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:13: Host Frequency set to 25000 KHz
14:44:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BE10>, 0x0, True) , Command count = 4100 ] 
14:44:13: [GO18_globalSetVolt]### Host voltage value is set.
14:44:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0521E030>, 0x0, False) , Command count = 4101 ] 
14:44:13: [GO18_globalSetVolt]### Host voltage value is set.
14:44:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4102 ] 
14:44:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4103 ] 
14:44:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4104 ] 
14:44:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F870>, <py_sfcl.CommandDataDefinition object at 0x05E0F1B0>) , Command count = 4105 ] 
14:44:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B780>, <py_sfcl.CommandDataDefinition object at 0x05E0BD20>) , Command count = 4106 ] 
14:44:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:13: [ SetCardRCA(0x1, 0xD555) , Command count = 4107 ] 
14:44:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:13: Host Frequency set to 25000 KHz
14:44:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:13: ####CSD Registe 2.0 Values####
14:44:13: CSD_STRUCTURE                                 :0x1
14:44:13: Reserv1                                       :0x0
14:44:13: Time Access 1 TAAC                            :0xe
14:44:13: Time Access 2 NSAC*100                        :0x0
14:44:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:13: Card Command Classess CCC                     :0x5b5
14:44:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:13: DSR(driver stage register)  DSR_IMP           :0x0
14:44:13: Reserv2                                       :0x0
14:44:13: Device Size C_SIZE                            :0xedc8
14:44:13: Reserv3                                       :0x0
14:44:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:13: Reserv4                                       :0x0
14:44:13: Write Speed Factor R2W_FACTOR                 :0x2
14:44:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:13: FILE_FORMAT_GRP                               :0x0
14:44:13: COPY flag                                     :0x1
14:44:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:13: File_Format                                   :0x0
14:44:13: CRC                                           :0x0
14:44:13: ####CSD Registe Values####  

14:44:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:13: [GetSCRRegisterEntry] Passed
14:44:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:13: Data_Status_After Erases          : 0
14:44:13: CPRM Security Support             : No Security
14:44:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:13: Spec. Version                     : Version 3.0X
14:44:13: Extended Security Support         : Extended_Security_Not_Supported
14:44:13: Command Support                   : COMMAND_SUPPORT
14:44:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04570>, <py_sfcl.CommandDataDefinition object at 0x05E0FAB0>) , Command count = 4108 ] 
14:44:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07510>, <py_sfcl.CommandDataDefinition object at 0x05E0BF30>) , Command count = 4109 ] 
14:44:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:14: [ SetBusWidth(0x4) , Command count = 4110 ] 
14:44:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4111 ] 
14:44:14: Protected Area Size 0x28000
14:44:14: Bus Width           2
14:44:14: Secure Mode         0
14:44:14: Speed  Class        4
14:44:14: Perf Move           0
14:44:14: Au Size             9
14:44:14: Erase Size          15
14:44:14: Erase Timeout       1
14:44:14: Erase offset        1
14:44:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4112 ] 
14:44:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:14: Host Frequency set to 100000 KHz
14:44:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:14: ####CSD Registe 2.0 Values####
14:44:14: CSD_STRUCTURE                                 :0x1
14:44:14: Reserv1                                       :0x0
14:44:14: Time Access 1 TAAC                            :0xe
14:44:14: Time Access 2 NSAC*100                        :0x0
14:44:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:14: Card Command Classess CCC                     :0x5b5
14:44:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:14: DSR(driver stage register)  DSR_IMP           :0x0
14:44:14: Reserv2                                       :0x0
14:44:14: Device Size C_SIZE                            :0xedc8
14:44:14: Reserv3                                       :0x0
14:44:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:14: Reserv4                                       :0x0
14:44:14: Write Speed Factor R2W_FACTOR                 :0x2
14:44:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:14: FILE_FORMAT_GRP                               :0x0
14:44:14: COPY flag                                     :0x1
14:44:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:14: File_Format                                   :0x0
14:44:14: CRC                                           :0x0
14:44:14: ####CSD Registe Values####  

14:44:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07180>, <py_sfcl.CommandDataDefinition object at 0x0526FCF0>) , Command count = 4113 ] 
14:44:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BA50>, <py_sfcl.CommandDataDefinition object at 0x05E0BAB0>) , Command count = 4114 ] 
14:44:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:14: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FEA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B570>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B3F0>, <None>, <py_sfcl.Command23 object at 0x05E0B930>) , Command count = 4115 ] 
14:44:14: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:16: Host Frequency set to 25000 KHz
14:44:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x052819C0>, 0x0, True) , Command count = 4116 ] 
14:44:16: [GO18_globalSetVolt]### Host voltage value is set.
14:44:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0527BFC0>, 0x0, False) , Command count = 4117 ] 
14:44:16: [GO18_globalSetVolt]### Host voltage value is set.
14:44:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4118 ] 
14:44:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4119 ] 
14:44:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4120 ] 
14:44:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E074B0>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 4121 ] 
14:44:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5210>, <py_sfcl.CommandDataDefinition object at 0x05E0B7B0>) , Command count = 4122 ] 
14:44:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:17: [ SetCardRCA(0x1, 0xD555) , Command count = 4123 ] 
14:44:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:17: Host Frequency set to 25000 KHz
14:44:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:17: ####CSD Registe 2.0 Values####
14:44:17: CSD_STRUCTURE                                 :0x1
14:44:17: Reserv1                                       :0x0
14:44:17: Time Access 1 TAAC                            :0xe
14:44:17: Time Access 2 NSAC*100                        :0x0
14:44:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:17: Card Command Classess CCC                     :0x5b5
14:44:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:17: DSR(driver stage register)  DSR_IMP           :0x0
14:44:17: Reserv2                                       :0x0
14:44:17: Device Size C_SIZE                            :0xedc8
14:44:17: Reserv3                                       :0x0
14:44:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:17: Reserv4                                       :0x0
14:44:17: Write Speed Factor R2W_FACTOR                 :0x2
14:44:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:17: FILE_FORMAT_GRP                               :0x0
14:44:17: COPY flag                                     :0x1
14:44:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:17: File_Format                                   :0x0
14:44:17: CRC                                           :0x0
14:44:17: ####CSD Registe Values####  

14:44:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:17: [GetSCRRegisterEntry] Passed
14:44:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:17: Data_Status_After Erases          : 0
14:44:17: CPRM Security Support             : No Security
14:44:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:17: Spec. Version                     : Version 3.0X
14:44:17: Extended Security Support         : Extended_Security_Not_Supported
14:44:17: Command Support                   : COMMAND_SUPPORT
14:44:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF50C0>, <py_sfcl.CommandDataDefinition object at 0x05E073C0>) , Command count = 4124 ] 
14:44:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 4125 ] 
14:44:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:17: [ SetBusWidth(0x4) , Command count = 4126 ] 
14:44:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4127 ] 
14:44:17: Protected Area Size 0x28000
14:44:17: Bus Width           2
14:44:17: Secure Mode         0
14:44:17: Speed  Class        4
14:44:17: Perf Move           0
14:44:17: Au Size             9
14:44:17: Erase Size          15
14:44:17: Erase Timeout       1
14:44:17: Erase offset        1
14:44:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4128 ] 
14:44:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:17: Host Frequency set to 100000 KHz
14:44:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:17: ####CSD Registe 2.0 Values####
14:44:17: CSD_STRUCTURE                                 :0x1
14:44:17: Reserv1                                       :0x0
14:44:17: Time Access 1 TAAC                            :0xe
14:44:17: Time Access 2 NSAC*100                        :0x0
14:44:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:17: Card Command Classess CCC                     :0x5b5
14:44:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:17: DSR(driver stage register)  DSR_IMP           :0x0
14:44:17: Reserv2                                       :0x0
14:44:17: Device Size C_SIZE                            :0xedc8
14:44:17: Reserv3                                       :0x0
14:44:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:17: Reserv4                                       :0x0
14:44:17: Write Speed Factor R2W_FACTOR                 :0x2
14:44:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:17: FILE_FORMAT_GRP                               :0x0
14:44:17: COPY flag                                     :0x1
14:44:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:17: File_Format                                   :0x0
14:44:17: CRC                                           :0x0
14:44:17: ####CSD Registe Values####  

14:44:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 4129 ] 
14:44:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF060>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 4130 ] 
14:44:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:18: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BE40>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B5A0>, <None>, <py_sfcl.Command23 object at 0x05E0B1B0>) , Command count = 4131 ] 
14:44:18: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:20: Host Frequency set to 25000 KHz
14:44:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5B70>, 0x0, True) , Command count = 4132 ] 
14:44:20: [GO18_globalSetVolt]### Host voltage value is set.
14:44:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0525B4B0>, 0x0, False) , Command count = 4133 ] 
14:44:20: [GO18_globalSetVolt]### Host voltage value is set.
14:44:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4134 ] 
14:44:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4135 ] 
14:44:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4136 ] 
14:44:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05281F60>) , Command count = 4137 ] 
14:44:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0FE70>) , Command count = 4138 ] 
14:44:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:20: [ SetCardRCA(0x1, 0xD555) , Command count = 4139 ] 
14:44:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:20: Host Frequency set to 25000 KHz
14:44:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:20: ####CSD Registe 2.0 Values####
14:44:20: CSD_STRUCTURE                                 :0x1
14:44:20: Reserv1                                       :0x0
14:44:20: Time Access 1 TAAC                            :0xe
14:44:20: Time Access 2 NSAC*100                        :0x0
14:44:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:20: Card Command Classess CCC                     :0x5b5
14:44:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:20: DSR(driver stage register)  DSR_IMP           :0x0
14:44:20: Reserv2                                       :0x0
14:44:20: Device Size C_SIZE                            :0xedc8
14:44:20: Reserv3                                       :0x0
14:44:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:20: Reserv4                                       :0x0
14:44:20: Write Speed Factor R2W_FACTOR                 :0x2
14:44:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:20: FILE_FORMAT_GRP                               :0x0
14:44:20: COPY flag                                     :0x1
14:44:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:20: File_Format                                   :0x0
14:44:20: CRC                                           :0x0
14:44:20: ####CSD Registe Values####  

14:44:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:20: [GetSCRRegisterEntry] Passed
14:44:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:20: Data_Status_After Erases          : 0
14:44:20: CPRM Security Support             : No Security
14:44:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:20: Spec. Version                     : Version 3.0X
14:44:20: Extended Security Support         : Extended_Security_Not_Supported
14:44:20: Command Support                   : COMMAND_SUPPORT
14:44:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0F180>) , Command count = 4140 ] 
14:44:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C60>, <py_sfcl.CommandDataDefinition object at 0x05E07390>) , Command count = 4141 ] 
14:44:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:20: [ SetBusWidth(0x4) , Command count = 4142 ] 
14:44:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4143 ] 
14:44:20: Protected Area Size 0x28000
14:44:20: Bus Width           2
14:44:20: Secure Mode         0
14:44:20: Speed  Class        4
14:44:20: Perf Move           0
14:44:20: Au Size             9
14:44:20: Erase Size          15
14:44:20: Erase Timeout       1
14:44:20: Erase offset        1
14:44:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4144 ] 
14:44:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:20: Host Frequency set to 100000 KHz
14:44:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:20: ####CSD Registe 2.0 Values####
14:44:20: CSD_STRUCTURE                                 :0x1
14:44:20: Reserv1                                       :0x0
14:44:20: Time Access 1 TAAC                            :0xe
14:44:21: Time Access 2 NSAC*100                        :0x0
14:44:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:21: Card Command Classess CCC                     :0x5b5
14:44:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:21: DSR(driver stage register)  DSR_IMP           :0x0
14:44:21: Reserv2                                       :0x0
14:44:21: Device Size C_SIZE                            :0xedc8
14:44:21: Reserv3                                       :0x0
14:44:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:21: Reserv4                                       :0x0
14:44:21: Write Speed Factor R2W_FACTOR                 :0x2
14:44:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:21: FILE_FORMAT_GRP                               :0x0
14:44:21: COPY flag                                     :0x1
14:44:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:21: File_Format                                   :0x0
14:44:21: CRC                                           :0x0
14:44:21: ####CSD Registe Values####  

14:44:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F090>, <py_sfcl.CommandDataDefinition object at 0x05E0F8D0>) , Command count = 4145 ] 
14:44:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 4146 ] 
14:44:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:21: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B7E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B600>, <None>, <py_sfcl.Command23 object at 0x05E0BDE0>) , Command count = 4147 ] 
14:44:21: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:23: Host Frequency set to 25000 KHz
14:44:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5150>, 0x0, True) , Command count = 4148 ] 
14:44:23: [GO18_globalSetVolt]### Host voltage value is set.
14:44:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9A20>, 0x0, False) , Command count = 4149 ] 
14:44:23: [GO18_globalSetVolt]### Host voltage value is set.
14:44:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4150 ] 
14:44:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4151 ] 
14:44:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4152 ] 
14:44:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 4153 ] 
14:44:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05E0BE70>) , Command count = 4154 ] 
14:44:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:23: [ SetCardRCA(0x1, 0xD555) , Command count = 4155 ] 
14:44:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:24: Host Frequency set to 25000 KHz
14:44:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:24: ####CSD Registe 2.0 Values####
14:44:24: CSD_STRUCTURE                                 :0x1
14:44:24: Reserv1                                       :0x0
14:44:24: Time Access 1 TAAC                            :0xe
14:44:24: Time Access 2 NSAC*100                        :0x0
14:44:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:24: Card Command Classess CCC                     :0x5b5
14:44:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:24: DSR(driver stage register)  DSR_IMP           :0x0
14:44:24: Reserv2                                       :0x0
14:44:24: Device Size C_SIZE                            :0xedc8
14:44:24: Reserv3                                       :0x0
14:44:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:24: Reserv4                                       :0x0
14:44:24: Write Speed Factor R2W_FACTOR                 :0x2
14:44:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:24: FILE_FORMAT_GRP                               :0x0
14:44:24: COPY flag                                     :0x1
14:44:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:24: File_Format                                   :0x0
14:44:24: CRC                                           :0x0
14:44:24: ####CSD Registe Values####  

14:44:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:24: [GetSCRRegisterEntry] Passed
14:44:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:24: Data_Status_After Erases          : 0
14:44:24: CPRM Security Support             : No Security
14:44:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:24: Spec. Version                     : Version 3.0X
14:44:24: Extended Security Support         : Extended_Security_Not_Supported
14:44:24: Command Support                   : COMMAND_SUPPORT
14:44:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 4156 ] 
14:44:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF660>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 4157 ] 
14:44:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:24: [ SetBusWidth(0x4) , Command count = 4158 ] 
14:44:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4159 ] 
14:44:24: Protected Area Size 0x28000
14:44:24: Bus Width           2
14:44:24: Secure Mode         0
14:44:24: Speed  Class        4
14:44:24: Perf Move           0
14:44:24: Au Size             9
14:44:24: Erase Size          15
14:44:24: Erase Timeout       1
14:44:24: Erase offset        1
14:44:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4160 ] 
14:44:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:24: Host Frequency set to 100000 KHz
14:44:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:24: ####CSD Registe 2.0 Values####
14:44:24: CSD_STRUCTURE                                 :0x1
14:44:24: Reserv1                                       :0x0
14:44:24: Time Access 1 TAAC                            :0xe
14:44:24: Time Access 2 NSAC*100                        :0x0
14:44:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:24: Card Command Classess CCC                     :0x5b5
14:44:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:24: DSR(driver stage register)  DSR_IMP           :0x0
14:44:24: Reserv2                                       :0x0
14:44:24: Device Size C_SIZE                            :0xedc8
14:44:24: Reserv3                                       :0x0
14:44:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:24: Reserv4                                       :0x0
14:44:24: Write Speed Factor R2W_FACTOR                 :0x2
14:44:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:24: FILE_FORMAT_GRP                               :0x0
14:44:24: COPY flag                                     :0x1
14:44:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:24: File_Format                                   :0x0
14:44:24: CRC                                           :0x0
14:44:24: ####CSD Registe Values####  

14:44:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9AB0>, <py_sfcl.CommandDataDefinition object at 0x05E0F9C0>) , Command count = 4161 ] 
14:44:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE97B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5120>) , Command count = 4162 ] 
14:44:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:24: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5480>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5600>, <None>, <py_sfcl.Command23 object at 0x05E0B480>) , Command count = 4163 ] 
14:44:24: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:26: Host Frequency set to 25000 KHz
14:44:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9A50>, 0x0, True) , Command count = 4164 ] 
14:44:26: [GO18_globalSetVolt]### Host voltage value is set.
14:44:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BCF0>, 0x0, False) , Command count = 4165 ] 
14:44:27: [GO18_globalSetVolt]### Host voltage value is set.
14:44:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4166 ] 
14:44:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4167 ] 
14:44:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4168 ] 
14:44:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F420>, <py_sfcl.CommandDataDefinition object at 0x05DF50F0>) , Command count = 4169 ] 
14:44:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05281C90>) , Command count = 4170 ] 
14:44:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:27: [ SetCardRCA(0x1, 0xD555) , Command count = 4171 ] 
14:44:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:27: Host Frequency set to 25000 KHz
14:44:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:27: ####CSD Registe 2.0 Values####
14:44:27: CSD_STRUCTURE                                 :0x1
14:44:27: Reserv1                                       :0x0
14:44:27: Time Access 1 TAAC                            :0xe
14:44:27: Time Access 2 NSAC*100                        :0x0
14:44:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:27: Card Command Classess CCC                     :0x5b5
14:44:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:27: DSR(driver stage register)  DSR_IMP           :0x0
14:44:27: Reserv2                                       :0x0
14:44:27: Device Size C_SIZE                            :0xedc8
14:44:27: Reserv3                                       :0x0
14:44:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:27: Reserv4                                       :0x0
14:44:27: Write Speed Factor R2W_FACTOR                 :0x2
14:44:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:27: FILE_FORMAT_GRP                               :0x0
14:44:27: COPY flag                                     :0x1
14:44:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:27: File_Format                                   :0x0
14:44:27: CRC                                           :0x0
14:44:27: ####CSD Registe Values####  

14:44:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:27: [GetSCRRegisterEntry] Passed
14:44:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:27: Data_Status_After Erases          : 0
14:44:27: CPRM Security Support             : No Security
14:44:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:27: Spec. Version                     : Version 3.0X
14:44:27: Extended Security Support         : Extended_Security_Not_Supported
14:44:27: Command Support                   : COMMAND_SUPPORT
14:44:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB510>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 4172 ] 
14:44:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB840>, <py_sfcl.CommandDataDefinition object at 0x05E0BC00>) , Command count = 4173 ] 
14:44:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:27: [ SetBusWidth(0x4) , Command count = 4174 ] 
14:44:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4175 ] 
14:44:27: Protected Area Size 0x28000
14:44:27: Bus Width           2
14:44:27: Secure Mode         0
14:44:27: Speed  Class        4
14:44:27: Perf Move           0
14:44:27: Au Size             9
14:44:27: Erase Size          15
14:44:27: Erase Timeout       1
14:44:27: Erase offset        1
14:44:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4176 ] 
14:44:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:27: Host Frequency set to 100000 KHz
14:44:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:27: ####CSD Registe 2.0 Values####
14:44:27: CSD_STRUCTURE                                 :0x1
14:44:27: Reserv1                                       :0x0
14:44:27: Time Access 1 TAAC                            :0xe
14:44:27: Time Access 2 NSAC*100                        :0x0
14:44:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:27: Card Command Classess CCC                     :0x5b5
14:44:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:27: DSR(driver stage register)  DSR_IMP           :0x0
14:44:27: Reserv2                                       :0x0
14:44:27: Device Size C_SIZE                            :0xedc8
14:44:27: Reserv3                                       :0x0
14:44:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:27: Reserv4                                       :0x0
14:44:27: Write Speed Factor R2W_FACTOR                 :0x2
14:44:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:27: FILE_FORMAT_GRP                               :0x0
14:44:27: COPY flag                                     :0x1
14:44:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:27: File_Format                                   :0x0
14:44:27: CRC                                           :0x0
14:44:27: ####CSD Registe Values####  

14:44:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5540>, <py_sfcl.CommandDataDefinition object at 0x05DFBDB0>) , Command count = 4177 ] 
14:44:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05E04B70>) , Command count = 4178 ] 
14:44:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:28: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5570>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F390>, <None>, <py_sfcl.Command23 object at 0x05E00660>) , Command count = 4179 ] 
14:44:28: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:30: Host Frequency set to 25000 KHz
14:44:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BBD0>, 0x0, True) , Command count = 4180 ] 
14:44:30: [GO18_globalSetVolt]### Host voltage value is set.
14:44:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00F90>, 0x0, False) , Command count = 4181 ] 
14:44:30: [GO18_globalSetVolt]### Host voltage value is set.
14:44:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4182 ] 
14:44:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4183 ] 
14:44:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4184 ] 
14:44:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C00>, <py_sfcl.CommandDataDefinition object at 0x05DF5750>) , Command count = 4185 ] 
14:44:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB10>, <py_sfcl.CommandDataDefinition object at 0x05281F30>) , Command count = 4186 ] 
14:44:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4187 ] 
14:44:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:30: Host Frequency set to 25000 KHz
14:44:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:30: ####CSD Registe 2.0 Values####
14:44:30: CSD_STRUCTURE                                 :0x1
14:44:30: Reserv1                                       :0x0
14:44:30: Time Access 1 TAAC                            :0xe
14:44:30: Time Access 2 NSAC*100                        :0x0
14:44:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:30: Card Command Classess CCC                     :0x5b5
14:44:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:30: DSR(driver stage register)  DSR_IMP           :0x0
14:44:30: Reserv2                                       :0x0
14:44:30: Device Size C_SIZE                            :0xedc8
14:44:30: Reserv3                                       :0x0
14:44:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:30: Reserv4                                       :0x0
14:44:30: Write Speed Factor R2W_FACTOR                 :0x2
14:44:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:30: FILE_FORMAT_GRP                               :0x0
14:44:30: COPY flag                                     :0x1
14:44:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:30: File_Format                                   :0x0
14:44:30: CRC                                           :0x0
14:44:30: ####CSD Registe Values####  

14:44:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:30: [GetSCRRegisterEntry] Passed
14:44:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:30: Data_Status_After Erases          : 0
14:44:30: CPRM Security Support             : No Security
14:44:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:30: Spec. Version                     : Version 3.0X
14:44:30: Extended Security Support         : Extended_Security_Not_Supported
14:44:30: Command Support                   : COMMAND_SUPPORT
14:44:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB4B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 4188 ] 
14:44:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF60>, <py_sfcl.CommandDataDefinition object at 0x05DFBC60>) , Command count = 4189 ] 
14:44:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:30: [ SetBusWidth(0x4) , Command count = 4190 ] 
14:44:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4191 ] 
14:44:30: Protected Area Size 0x28000
14:44:30: Bus Width           2
14:44:30: Secure Mode         0
14:44:30: Speed  Class        4
14:44:30: Perf Move           0
14:44:30: Au Size             9
14:44:30: Erase Size          15
14:44:30: Erase Timeout       1
14:44:30: Erase offset        1
14:44:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4192 ] 
14:44:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:31: Host Frequency set to 100000 KHz
14:44:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:31: ####CSD Registe 2.0 Values####
14:44:31: CSD_STRUCTURE                                 :0x1
14:44:31: Reserv1                                       :0x0
14:44:31: Time Access 1 TAAC                            :0xe
14:44:31: Time Access 2 NSAC*100                        :0x0
14:44:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:31: Card Command Classess CCC                     :0x5b5
14:44:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:31: DSR(driver stage register)  DSR_IMP           :0x0
14:44:31: Reserv2                                       :0x0
14:44:31: Device Size C_SIZE                            :0xedc8
14:44:31: Reserv3                                       :0x0
14:44:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:31: Reserv4                                       :0x0
14:44:31: Write Speed Factor R2W_FACTOR                 :0x2
14:44:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:31: FILE_FORMAT_GRP                               :0x0
14:44:31: COPY flag                                     :0x1
14:44:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:31: File_Format                                   :0x0
14:44:31: CRC                                           :0x0
14:44:31: ####CSD Registe Values####  

14:44:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5D0>, <py_sfcl.CommandDataDefinition object at 0x05E07570>) , Command count = 4193 ] 
14:44:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB720>, <py_sfcl.CommandDataDefinition object at 0x05E07FC0>) , Command count = 4194 ] 
14:44:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:31: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07AE0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04B70>, <None>, <py_sfcl.Command23 object at 0x05E00E70>) , Command count = 4195 ] 
14:44:31: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:33: Host Frequency set to 25000 KHz
14:44:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E075A0>, 0x0, True) , Command count = 4196 ] 
14:44:33: [GO18_globalSetVolt]### Host voltage value is set.
14:44:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBBA0>, 0x0, False) , Command count = 4197 ] 
14:44:33: [GO18_globalSetVolt]### Host voltage value is set.
14:44:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4198 ] 
14:44:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4199 ] 
14:44:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4200 ] 
14:44:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC90>, <py_sfcl.CommandDataDefinition object at 0x05DF5F90>) , Command count = 4201 ] 
14:44:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E001B0>, <py_sfcl.CommandDataDefinition object at 0x05DF55A0>) , Command count = 4202 ] 
14:44:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:34: [ SetCardRCA(0x1, 0xD555) , Command count = 4203 ] 
14:44:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:34: Host Frequency set to 25000 KHz
14:44:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:34: ####CSD Registe 2.0 Values####
14:44:34: CSD_STRUCTURE                                 :0x1
14:44:34: Reserv1                                       :0x0
14:44:34: Time Access 1 TAAC                            :0xe
14:44:34: Time Access 2 NSAC*100                        :0x0
14:44:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:34: Card Command Classess CCC                     :0x5b5
14:44:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:34: DSR(driver stage register)  DSR_IMP           :0x0
14:44:34: Reserv2                                       :0x0
14:44:34: Device Size C_SIZE                            :0xedc8
14:44:34: Reserv3                                       :0x0
14:44:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:34: Reserv4                                       :0x0
14:44:34: Write Speed Factor R2W_FACTOR                 :0x2
14:44:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:34: FILE_FORMAT_GRP                               :0x0
14:44:34: COPY flag                                     :0x1
14:44:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:34: File_Format                                   :0x0
14:44:34: CRC                                           :0x0
14:44:34: ####CSD Registe Values####  

14:44:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:34: [GetSCRRegisterEntry] Passed
14:44:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:34: Data_Status_After Erases          : 0
14:44:34: CPRM Security Support             : No Security
14:44:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:34: Spec. Version                     : Version 3.0X
14:44:34: Extended Security Support         : Extended_Security_Not_Supported
14:44:34: Command Support                   : COMMAND_SUPPORT
14:44:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F030>, <py_sfcl.CommandDataDefinition object at 0x05E0F510>) , Command count = 4204 ] 
14:44:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05DF5A20>) , Command count = 4205 ] 
14:44:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:34: [ SetBusWidth(0x4) , Command count = 4206 ] 
14:44:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4207 ] 
14:44:34: Protected Area Size 0x28000
14:44:34: Bus Width           2
14:44:34: Secure Mode         0
14:44:34: Speed  Class        4
14:44:34: Perf Move           0
14:44:34: Au Size             9
14:44:34: Erase Size          15
14:44:34: Erase Timeout       1
14:44:34: Erase offset        1
14:44:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4208 ] 
14:44:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:34: Host Frequency set to 100000 KHz
14:44:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:34: ####CSD Registe 2.0 Values####
14:44:34: CSD_STRUCTURE                                 :0x1
14:44:34: Reserv1                                       :0x0
14:44:34: Time Access 1 TAAC                            :0xe
14:44:34: Time Access 2 NSAC*100                        :0x0
14:44:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:34: Card Command Classess CCC                     :0x5b5
14:44:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:34: DSR(driver stage register)  DSR_IMP           :0x0
14:44:34: Reserv2                                       :0x0
14:44:34: Device Size C_SIZE                            :0xedc8
14:44:34: Reserv3                                       :0x0
14:44:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:34: Reserv4                                       :0x0
14:44:34: Write Speed Factor R2W_FACTOR                 :0x2
14:44:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:34: FILE_FORMAT_GRP                               :0x0
14:44:34: COPY flag                                     :0x1
14:44:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:34: File_Format                                   :0x0
14:44:34: CRC                                           :0x0
14:44:34: ####CSD Registe Values####  

14:44:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F30>, <py_sfcl.CommandDataDefinition object at 0x05E0F150>) , Command count = 4209 ] 
14:44:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF90>, <py_sfcl.CommandDataDefinition object at 0x05DF5A20>) , Command count = 4210 ] 
14:44:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:35: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBE40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBA50>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB1E0>, <None>, <py_sfcl.Command23 object at 0x05E040C0>) , Command count = 4211 ] 
14:44:35: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:37: Host Frequency set to 25000 KHz
14:44:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF54B0>, 0x0, True) , Command count = 4212 ] 
14:44:37: [GO18_globalSetVolt]### Host voltage value is set.
14:44:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB1B0>, 0x0, False) , Command count = 4213 ] 
14:44:37: [GO18_globalSetVolt]### Host voltage value is set.
14:44:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4214 ] 
14:44:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4215 ] 
14:44:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4216 ] 
14:44:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07900>, <py_sfcl.CommandDataDefinition object at 0x05E009C0>) , Command count = 4217 ] 
14:44:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF58D0>, <py_sfcl.CommandDataDefinition object at 0x05E046F0>) , Command count = 4218 ] 
14:44:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:37: [ SetCardRCA(0x1, 0xD555) , Command count = 4219 ] 
14:44:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:37: Host Frequency set to 25000 KHz
14:44:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:37: ####CSD Registe 2.0 Values####
14:44:37: CSD_STRUCTURE                                 :0x1
14:44:37: Reserv1                                       :0x0
14:44:37: Time Access 1 TAAC                            :0xe
14:44:37: Time Access 2 NSAC*100                        :0x0
14:44:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:37: Card Command Classess CCC                     :0x5b5
14:44:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:37: DSR(driver stage register)  DSR_IMP           :0x0
14:44:37: Reserv2                                       :0x0
14:44:37: Device Size C_SIZE                            :0xedc8
14:44:37: Reserv3                                       :0x0
14:44:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:37: Reserv4                                       :0x0
14:44:37: Write Speed Factor R2W_FACTOR                 :0x2
14:44:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:37: FILE_FORMAT_GRP                               :0x0
14:44:37: COPY flag                                     :0x1
14:44:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:37: File_Format                                   :0x0
14:44:37: CRC                                           :0x0
14:44:37: ####CSD Registe Values####  

14:44:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:37: [GetSCRRegisterEntry] Passed
14:44:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:37: Data_Status_After Erases          : 0
14:44:37: CPRM Security Support             : No Security
14:44:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:37: Spec. Version                     : Version 3.0X
14:44:37: Extended Security Support         : Extended_Security_Not_Supported
14:44:37: Command Support                   : COMMAND_SUPPORT
14:44:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5930>, <py_sfcl.CommandDataDefinition object at 0x05DFB180>) , Command count = 4220 ] 
14:44:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05DFBB70>) , Command count = 4221 ] 
14:44:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:37: [ SetBusWidth(0x4) , Command count = 4222 ] 
14:44:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5D80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4223 ] 
14:44:37: Protected Area Size 0x28000
14:44:37: Bus Width           2
14:44:37: Secure Mode         0
14:44:37: Speed  Class        4
14:44:37: Perf Move           0
14:44:37: Au Size             9
14:44:37: Erase Size          15
14:44:37: Erase Timeout       1
14:44:37: Erase offset        1
14:44:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4224 ] 
14:44:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:37: Host Frequency set to 100000 KHz
14:44:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:37: ####CSD Registe 2.0 Values####
14:44:37: CSD_STRUCTURE                                 :0x1
14:44:37: Reserv1                                       :0x0
14:44:37: Time Access 1 TAAC                            :0xe
14:44:37: Time Access 2 NSAC*100                        :0x0
14:44:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:37: Card Command Classess CCC                     :0x5b5
14:44:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:37: DSR(driver stage register)  DSR_IMP           :0x0
14:44:37: Reserv2                                       :0x0
14:44:37: Device Size C_SIZE                            :0xedc8
14:44:37: Reserv3                                       :0x0
14:44:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:37: Reserv4                                       :0x0
14:44:38: Write Speed Factor R2W_FACTOR                 :0x2
14:44:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:38: FILE_FORMAT_GRP                               :0x0
14:44:38: COPY flag                                     :0x1
14:44:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:38: File_Format                                   :0x0
14:44:38: CRC                                           :0x0
14:44:38: ####CSD Registe Values####  

14:44:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07870>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 4225 ] 
14:44:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F1E0>, <py_sfcl.CommandDataDefinition object at 0x05DFBB70>) , Command count = 4226 ] 
14:44:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:38: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB9F0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBA20>, <None>, <py_sfcl.Command23 object at 0x05DFBD20>) , Command count = 4227 ] 
14:44:38: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:40: Host Frequency set to 25000 KHz
14:44:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07030>, 0x0, True) , Command count = 4228 ] 
14:44:40: [GO18_globalSetVolt]### Host voltage value is set.
14:44:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04210>, 0x0, False) , Command count = 4229 ] 
14:44:40: [GO18_globalSetVolt]### Host voltage value is set.
14:44:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4230 ] 
14:44:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4231 ] 
14:44:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4232 ] 
14:44:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC60>, <py_sfcl.CommandDataDefinition object at 0x05E0F660>) , Command count = 4233 ] 
14:44:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E002D0>, <py_sfcl.CommandDataDefinition object at 0x05E008A0>) , Command count = 4234 ] 
14:44:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:40: [ SetCardRCA(0x1, 0xD555) , Command count = 4235 ] 
14:44:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:40: Host Frequency set to 25000 KHz
14:44:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:40: ####CSD Registe 2.0 Values####
14:44:40: CSD_STRUCTURE                                 :0x1
14:44:40: Reserv1                                       :0x0
14:44:40: Time Access 1 TAAC                            :0xe
14:44:40: Time Access 2 NSAC*100                        :0x0
14:44:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:40: Card Command Classess CCC                     :0x5b5
14:44:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:40: DSR(driver stage register)  DSR_IMP           :0x0
14:44:40: Reserv2                                       :0x0
14:44:40: Device Size C_SIZE                            :0xedc8
14:44:40: Reserv3                                       :0x0
14:44:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:40: Reserv4                                       :0x0
14:44:40: Write Speed Factor R2W_FACTOR                 :0x2
14:44:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:40: FILE_FORMAT_GRP                               :0x0
14:44:40: COPY flag                                     :0x1
14:44:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:40: File_Format                                   :0x0
14:44:40: CRC                                           :0x0
14:44:40: ####CSD Registe Values####  

14:44:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:40: [GetSCRRegisterEntry] Passed
14:44:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:40: Data_Status_After Erases          : 0
14:44:40: CPRM Security Support             : No Security
14:44:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:40: Spec. Version                     : Version 3.0X
14:44:40: Extended Security Support         : Extended_Security_Not_Supported
14:44:40: Command Support                   : COMMAND_SUPPORT
14:44:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05E07690>) , Command count = 4236 ] 
14:44:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF57B0>, <py_sfcl.CommandDataDefinition object at 0x05E00750>) , Command count = 4237 ] 
14:44:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:40: [ SetBusWidth(0x4) , Command count = 4238 ] 
14:44:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E007E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4239 ] 
14:44:40: Protected Area Size 0x28000
14:44:40: Bus Width           2
14:44:40: Secure Mode         0
14:44:40: Speed  Class        4
14:44:40: Perf Move           0
14:44:40: Au Size             9
14:44:40: Erase Size          15
14:44:40: Erase Timeout       1
14:44:40: Erase offset        1
14:44:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4240 ] 
14:44:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:41: Host Frequency set to 100000 KHz
14:44:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:41: ####CSD Registe 2.0 Values####
14:44:41: CSD_STRUCTURE                                 :0x1
14:44:41: Reserv1                                       :0x0
14:44:41: Time Access 1 TAAC                            :0xe
14:44:41: Time Access 2 NSAC*100                        :0x0
14:44:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:41: Card Command Classess CCC                     :0x5b5
14:44:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:41: DSR(driver stage register)  DSR_IMP           :0x0
14:44:41: Reserv2                                       :0x0
14:44:41: Device Size C_SIZE                            :0xedc8
14:44:41: Reserv3                                       :0x0
14:44:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:41: Reserv4                                       :0x0
14:44:41: Write Speed Factor R2W_FACTOR                 :0x2
14:44:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:41: FILE_FORMAT_GRP                               :0x0
14:44:41: COPY flag                                     :0x1
14:44:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:41: File_Format                                   :0x0
14:44:41: CRC                                           :0x0
14:44:41: ####CSD Registe Values####  

14:44:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07750>, <py_sfcl.CommandDataDefinition object at 0x05E005D0>) , Command count = 4241 ] 
14:44:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F0C0>, <py_sfcl.CommandDataDefinition object at 0x05DF5D80>) , Command count = 4242 ] 
14:44:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:41: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E045D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB480>, <py_sfcl.PySEnhancedCmdData object at 0x05E101B0>, <None>, <py_sfcl.Command23 object at 0x05DFB570>) , Command count = 4243 ] 
14:44:41: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:43: Host Frequency set to 25000 KHz
14:44:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00990>, 0x0, True) , Command count = 4244 ] 
14:44:43: [GO18_globalSetVolt]### Host voltage value is set.
14:44:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB900>, 0x0, False) , Command count = 4245 ] 
14:44:43: [GO18_globalSetVolt]### Host voltage value is set.
14:44:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4246 ] 
14:44:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4247 ] 
14:44:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4248 ] 
14:44:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C90>, <py_sfcl.CommandDataDefinition object at 0x05E00A20>) , Command count = 4249 ] 
14:44:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E004E0>, <py_sfcl.CommandDataDefinition object at 0x05DF5CC0>) , Command count = 4250 ] 
14:44:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4251 ] 
14:44:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:44: Host Frequency set to 25000 KHz
14:44:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:44: ####CSD Registe 2.0 Values####
14:44:44: CSD_STRUCTURE                                 :0x1
14:44:44: Reserv1                                       :0x0
14:44:44: Time Access 1 TAAC                            :0xe
14:44:44: Time Access 2 NSAC*100                        :0x0
14:44:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:44: Card Command Classess CCC                     :0x5b5
14:44:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:44: DSR(driver stage register)  DSR_IMP           :0x0
14:44:44: Reserv2                                       :0x0
14:44:44: Device Size C_SIZE                            :0xedc8
14:44:44: Reserv3                                       :0x0
14:44:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:44: Reserv4                                       :0x0
14:44:44: Write Speed Factor R2W_FACTOR                 :0x2
14:44:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:44: FILE_FORMAT_GRP                               :0x0
14:44:44: COPY flag                                     :0x1
14:44:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:44: File_Format                                   :0x0
14:44:44: CRC                                           :0x0
14:44:44: ####CSD Registe Values####  

14:44:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:44: [GetSCRRegisterEntry] Passed
14:44:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:44: Data_Status_After Erases          : 0
14:44:44: CPRM Security Support             : No Security
14:44:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:44: Spec. Version                     : Version 3.0X
14:44:44: Extended Security Support         : Extended_Security_Not_Supported
14:44:44: Command Support                   : COMMAND_SUPPORT
14:44:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00A50>, <py_sfcl.CommandDataDefinition object at 0x05E00BD0>) , Command count = 4252 ] 
14:44:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07120>, <py_sfcl.CommandDataDefinition object at 0x05E00540>) , Command count = 4253 ] 
14:44:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:44: [ SetBusWidth(0x4) , Command count = 4254 ] 
14:44:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB2A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4255 ] 
14:44:44: Protected Area Size 0x28000
14:44:44: Bus Width           2
14:44:44: Secure Mode         0
14:44:44: Speed  Class        4
14:44:44: Perf Move           0
14:44:44: Au Size             9
14:44:44: Erase Size          15
14:44:44: Erase Timeout       1
14:44:44: Erase offset        1
14:44:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4256 ] 
14:44:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:44: Host Frequency set to 100000 KHz
14:44:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:44: ####CSD Registe 2.0 Values####
14:44:44: CSD_STRUCTURE                                 :0x1
14:44:44: Reserv1                                       :0x0
14:44:44: Time Access 1 TAAC                            :0xe
14:44:44: Time Access 2 NSAC*100                        :0x0
14:44:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:44: Card Command Classess CCC                     :0x5b5
14:44:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:44: DSR(driver stage register)  DSR_IMP           :0x0
14:44:44: Reserv2                                       :0x0
14:44:44: Device Size C_SIZE                            :0xedc8
14:44:44: Reserv3                                       :0x0
14:44:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:44: Reserv4                                       :0x0
14:44:44: Write Speed Factor R2W_FACTOR                 :0x2
14:44:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:44: FILE_FORMAT_GRP                               :0x0
14:44:44: COPY flag                                     :0x1
14:44:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:44: File_Format                                   :0x0
14:44:44: CRC                                           :0x0
14:44:44: ####CSD Registe Values####  

14:44:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E078D0>, <py_sfcl.CommandDataDefinition object at 0x05E007E0>) , Command count = 4257 ] 
14:44:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB270>) , Command count = 4258 ] 
14:44:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:45: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F3C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F570>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FAE0>, <None>, <py_sfcl.Command23 object at 0x05E0FA20>) , Command count = 4259 ] 
14:44:45: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:47: Host Frequency set to 25000 KHz
14:44:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5240>, 0x0, True) , Command count = 4260 ] 
14:44:47: [GO18_globalSetVolt]### Host voltage value is set.
14:44:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FB40>, 0x0, False) , Command count = 4261 ] 
14:44:47: [GO18_globalSetVolt]### Host voltage value is set.
14:44:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4262 ] 
14:44:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4263 ] 
14:44:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4264 ] 
14:44:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07DB0>, <py_sfcl.CommandDataDefinition object at 0x05E001E0>) , Command count = 4265 ] 
14:44:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FA80>, <py_sfcl.CommandDataDefinition object at 0x05DF5B40>) , Command count = 4266 ] 
14:44:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:47: [ SetCardRCA(0x1, 0xD555) , Command count = 4267 ] 
14:44:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:47: Host Frequency set to 25000 KHz
14:44:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:47: ####CSD Registe 2.0 Values####
14:44:47: CSD_STRUCTURE                                 :0x1
14:44:47: Reserv1                                       :0x0
14:44:47: Time Access 1 TAAC                            :0xe
14:44:47: Time Access 2 NSAC*100                        :0x0
14:44:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:47: Card Command Classess CCC                     :0x5b5
14:44:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:47: DSR(driver stage register)  DSR_IMP           :0x0
14:44:47: Reserv2                                       :0x0
14:44:47: Device Size C_SIZE                            :0xedc8
14:44:47: Reserv3                                       :0x0
14:44:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:47: Reserv4                                       :0x0
14:44:47: Write Speed Factor R2W_FACTOR                 :0x2
14:44:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:47: FILE_FORMAT_GRP                               :0x0
14:44:47: COPY flag                                     :0x1
14:44:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:47: File_Format                                   :0x0
14:44:47: CRC                                           :0x0
14:44:47: ####CSD Registe Values####  

14:44:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:47: [GetSCRRegisterEntry] Passed
14:44:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:47: Data_Status_After Erases          : 0
14:44:47: CPRM Security Support             : No Security
14:44:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:47: Spec. Version                     : Version 3.0X
14:44:47: Extended Security Support         : Extended_Security_Not_Supported
14:44:47: Command Support                   : COMMAND_SUPPORT
14:44:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F30>, <py_sfcl.CommandDataDefinition object at 0x05E00180>) , Command count = 4268 ] 
14:44:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A80>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 4269 ] 
14:44:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:47: [ SetBusWidth(0x4) , Command count = 4270 ] 
14:44:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E004B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4271 ] 
14:44:47: Protected Area Size 0x28000
14:44:47: Bus Width           2
14:44:47: Secure Mode         0
14:44:47: Speed  Class        4
14:44:47: Perf Move           0
14:44:47: Au Size             9
14:44:47: Erase Size          15
14:44:47: Erase Timeout       1
14:44:47: Erase offset        1
14:44:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4272 ] 
14:44:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:47: Host Frequency set to 100000 KHz
14:44:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:47: ####CSD Registe 2.0 Values####
14:44:47: CSD_STRUCTURE                                 :0x1
14:44:47: Reserv1                                       :0x0
14:44:47: Time Access 1 TAAC                            :0xe
14:44:47: Time Access 2 NSAC*100                        :0x0
14:44:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:47: Card Command Classess CCC                     :0x5b5
14:44:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:47: DSR(driver stage register)  DSR_IMP           :0x0
14:44:47: Reserv2                                       :0x0
14:44:47: Device Size C_SIZE                            :0xedc8
14:44:47: Reserv3                                       :0x0
14:44:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:47: Reserv4                                       :0x0
14:44:48: Write Speed Factor R2W_FACTOR                 :0x2
14:44:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:48: FILE_FORMAT_GRP                               :0x0
14:44:48: COPY flag                                     :0x1
14:44:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:48: File_Format                                   :0x0
14:44:48: CRC                                           :0x0
14:44:48: ####CSD Registe Values####  

14:44:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00690>, <py_sfcl.CommandDataDefinition object at 0x05DFB6C0>) , Command count = 4273 ] 
14:44:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B360>, <py_sfcl.CommandDataDefinition object at 0x05E04DE0>) , Command count = 4274 ] 
14:44:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:48: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E044E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04A20>, <None>, <py_sfcl.Command23 object at 0x05E0FBD0>) , Command count = 4275 ] 
14:44:48: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:50: Host Frequency set to 25000 KHz
14:44:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F930>, 0x0, True) , Command count = 4276 ] 
14:44:50: [GO18_globalSetVolt]### Host voltage value is set.
14:44:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04300>, 0x0, False) , Command count = 4277 ] 
14:44:50: [GO18_globalSetVolt]### Host voltage value is set.
14:44:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4278 ] 
14:44:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4279 ] 
14:44:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4280 ] 
14:44:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CF0>, <py_sfcl.CommandDataDefinition object at 0x05E047B0>) , Command count = 4281 ] 
14:44:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049C0>, <py_sfcl.CommandDataDefinition object at 0x05E00270>) , Command count = 4282 ] 
14:44:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:50: [ SetCardRCA(0x1, 0xD555) , Command count = 4283 ] 
14:44:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:50: Host Frequency set to 25000 KHz
14:44:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:50: ####CSD Registe 2.0 Values####
14:44:50: CSD_STRUCTURE                                 :0x1
14:44:50: Reserv1                                       :0x0
14:44:50: Time Access 1 TAAC                            :0xe
14:44:50: Time Access 2 NSAC*100                        :0x0
14:44:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:50: Card Command Classess CCC                     :0x5b5
14:44:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:50: DSR(driver stage register)  DSR_IMP           :0x0
14:44:50: Reserv2                                       :0x0
14:44:50: Device Size C_SIZE                            :0xedc8
14:44:50: Reserv3                                       :0x0
14:44:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:50: Reserv4                                       :0x0
14:44:50: Write Speed Factor R2W_FACTOR                 :0x2
14:44:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:50: FILE_FORMAT_GRP                               :0x0
14:44:50: COPY flag                                     :0x1
14:44:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:50: File_Format                                   :0x0
14:44:50: CRC                                           :0x0
14:44:50: ####CSD Registe Values####  

14:44:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:50: [GetSCRRegisterEntry] Passed
14:44:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:50: Data_Status_After Erases          : 0
14:44:50: CPRM Security Support             : No Security
14:44:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:50: Spec. Version                     : Version 3.0X
14:44:50: Extended Security Support         : Extended_Security_Not_Supported
14:44:50: Command Support                   : COMMAND_SUPPORT
14:44:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04BD0>, <py_sfcl.CommandDataDefinition object at 0x05E045A0>) , Command count = 4284 ] 
14:44:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F90>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 4285 ] 
14:44:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:51: [ SetBusWidth(0x4) , Command count = 4286 ] 
14:44:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4287 ] 
14:44:51: Protected Area Size 0x28000
14:44:51: Bus Width           2
14:44:51: Secure Mode         0
14:44:51: Speed  Class        4
14:44:51: Perf Move           0
14:44:51: Au Size             9
14:44:51: Erase Size          15
14:44:51: Erase Timeout       1
14:44:51: Erase offset        1
14:44:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4288 ] 
14:44:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:51: Host Frequency set to 100000 KHz
14:44:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:51: ####CSD Registe 2.0 Values####
14:44:51: CSD_STRUCTURE                                 :0x1
14:44:51: Reserv1                                       :0x0
14:44:51: Time Access 1 TAAC                            :0xe
14:44:51: Time Access 2 NSAC*100                        :0x0
14:44:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:51: Card Command Classess CCC                     :0x5b5
14:44:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:51: DSR(driver stage register)  DSR_IMP           :0x0
14:44:51: Reserv2                                       :0x0
14:44:51: Device Size C_SIZE                            :0xedc8
14:44:51: Reserv3                                       :0x0
14:44:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:51: Reserv4                                       :0x0
14:44:51: Write Speed Factor R2W_FACTOR                 :0x2
14:44:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:51: FILE_FORMAT_GRP                               :0x0
14:44:51: COPY flag                                     :0x1
14:44:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:51: File_Format                                   :0x0
14:44:51: CRC                                           :0x0
14:44:51: ####CSD Registe Values####  

14:44:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07720>, <py_sfcl.CommandDataDefinition object at 0x05E04900>) , Command count = 4289 ] 
14:44:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC30>, <py_sfcl.CommandDataDefinition object at 0x05E00DB0>) , Command count = 4290 ] 
14:44:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:51: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E079C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00B70>, <py_sfcl.PySEnhancedCmdData object at 0x05E009F0>, <None>, <py_sfcl.Command23 object at 0x05E04A50>) , Command count = 4291 ] 
14:44:51: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:54: Host Frequency set to 25000 KHz
14:44:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04750>, 0x0, True) , Command count = 4292 ] 
14:44:54: [GO18_globalSetVolt]### Host voltage value is set.
14:44:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04330>, 0x0, False) , Command count = 4293 ] 
14:44:54: [GO18_globalSetVolt]### Host voltage value is set.
14:44:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4294 ] 
14:44:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4295 ] 
14:44:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4296 ] 
14:44:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F0F0>, <py_sfcl.CommandDataDefinition object at 0x05E04F60>) , Command count = 4297 ] 
14:44:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04ED0>, <py_sfcl.CommandDataDefinition object at 0x05DF5E10>) , Command count = 4298 ] 
14:44:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:54: [ SetCardRCA(0x1, 0xD555) , Command count = 4299 ] 
14:44:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:54: Host Frequency set to 25000 KHz
14:44:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:54: ####CSD Registe 2.0 Values####
14:44:54: CSD_STRUCTURE                                 :0x1
14:44:54: Reserv1                                       :0x0
14:44:54: Time Access 1 TAAC                            :0xe
14:44:54: Time Access 2 NSAC*100                        :0x0
14:44:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:54: Card Command Classess CCC                     :0x5b5
14:44:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:54: DSR(driver stage register)  DSR_IMP           :0x0
14:44:54: Reserv2                                       :0x0
14:44:54: Device Size C_SIZE                            :0xedc8
14:44:54: Reserv3                                       :0x0
14:44:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:54: Reserv4                                       :0x0
14:44:54: Write Speed Factor R2W_FACTOR                 :0x2
14:44:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:54: FILE_FORMAT_GRP                               :0x0
14:44:54: COPY flag                                     :0x1
14:44:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:54: File_Format                                   :0x0
14:44:54: CRC                                           :0x0
14:44:54: ####CSD Registe Values####  

14:44:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:54: [GetSCRRegisterEntry] Passed
14:44:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:54: Data_Status_After Erases          : 0
14:44:54: CPRM Security Support             : No Security
14:44:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:54: Spec. Version                     : Version 3.0X
14:44:54: Extended Security Support         : Extended_Security_Not_Supported
14:44:54: Command Support                   : COMMAND_SUPPORT
14:44:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E049F0>, <py_sfcl.CommandDataDefinition object at 0x05E04720>) , Command count = 4300 ] 
14:44:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07960>, <py_sfcl.CommandDataDefinition object at 0x05E077E0>) , Command count = 4301 ] 
14:44:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:54: [ SetBusWidth(0x4) , Command count = 4302 ] 
14:44:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4303 ] 
14:44:54: Protected Area Size 0x28000
14:44:54: Bus Width           2
14:44:54: Secure Mode         0
14:44:54: Speed  Class        4
14:44:54: Perf Move           0
14:44:54: Au Size             9
14:44:54: Erase Size          15
14:44:54: Erase Timeout       1
14:44:54: Erase offset        1
14:44:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4304 ] 
14:44:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:54: Host Frequency set to 100000 KHz
14:44:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:54: ####CSD Registe 2.0 Values####
14:44:54: CSD_STRUCTURE                                 :0x1
14:44:54: Reserv1                                       :0x0
14:44:54: Time Access 1 TAAC                            :0xe
14:44:54: Time Access 2 NSAC*100                        :0x0
14:44:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:54: Card Command Classess CCC                     :0x5b5
14:44:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:54: DSR(driver stage register)  DSR_IMP           :0x0
14:44:54: Reserv2                                       :0x0
14:44:54: Device Size C_SIZE                            :0xedc8
14:44:54: Reserv3                                       :0x0
14:44:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:54: Reserv4                                       :0x0
14:44:55: Write Speed Factor R2W_FACTOR                 :0x2
14:44:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:55: FILE_FORMAT_GRP                               :0x0
14:44:55: COPY flag                                     :0x1
14:44:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:55: File_Format                                   :0x0
14:44:55: CRC                                           :0x0
14:44:55: ####CSD Registe Values####  

14:44:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07210>, <py_sfcl.CommandDataDefinition object at 0x05E0B120>) , Command count = 4305 ] 
14:44:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF60>, <py_sfcl.CommandDataDefinition object at 0x05E00ED0>) , Command count = 4306 ] 
14:44:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:55: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00720>, <py_sfcl.PySEnhancedCmdData object at 0x05E00870>, <None>, <py_sfcl.Command23 object at 0x05E003C0>) , Command count = 4307 ] 
14:44:55: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:57: Host Frequency set to 25000 KHz
14:44:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04270>, 0x0, True) , Command count = 4308 ] 
14:44:57: [GO18_globalSetVolt]### Host voltage value is set.
14:44:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07B70>, 0x0, False) , Command count = 4309 ] 
14:44:57: [GO18_globalSetVolt]### Host voltage value is set.
14:44:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4310 ] 
14:44:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4311 ] 
14:44:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4312 ] 
14:44:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 4313 ] 
14:44:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E00C90>) , Command count = 4314 ] 
14:44:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:57: [ SetCardRCA(0x1, 0xD555) , Command count = 4315 ] 
14:44:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:57: Host Frequency set to 25000 KHz
14:44:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:57: ####CSD Registe 2.0 Values####
14:44:57: CSD_STRUCTURE                                 :0x1
14:44:57: Reserv1                                       :0x0
14:44:57: Time Access 1 TAAC                            :0xe
14:44:57: Time Access 2 NSAC*100                        :0x0
14:44:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:57: Card Command Classess CCC                     :0x5b5
14:44:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:57: DSR(driver stage register)  DSR_IMP           :0x0
14:44:57: Reserv2                                       :0x0
14:44:57: Device Size C_SIZE                            :0xedc8
14:44:57: Reserv3                                       :0x0
14:44:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:57: Reserv4                                       :0x0
14:44:57: Write Speed Factor R2W_FACTOR                 :0x2
14:44:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:57: FILE_FORMAT_GRP                               :0x0
14:44:57: COPY flag                                     :0x1
14:44:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:57: File_Format                                   :0x0
14:44:57: CRC                                           :0x0
14:44:57: ####CSD Registe Values####  

14:44:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:57: [GetSCRRegisterEntry] Passed
14:44:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:57: Data_Status_After Erases          : 0
14:44:57: CPRM Security Support             : No Security
14:44:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:57: Spec. Version                     : Version 3.0X
14:44:57: Extended Security Support         : Extended_Security_Not_Supported
14:44:57: Command Support                   : COMMAND_SUPPORT
14:44:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B240>, <py_sfcl.CommandDataDefinition object at 0x05E071E0>) , Command count = 4316 ] 
14:44:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E10>, <py_sfcl.CommandDataDefinition object at 0x05E07C00>) , Command count = 4317 ] 
14:44:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:57: [ SetBusWidth(0x4) , Command count = 4318 ] 
14:44:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E075D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4319 ] 
14:44:57: Protected Area Size 0x28000
14:44:57: Bus Width           2
14:44:57: Secure Mode         0
14:44:57: Speed  Class        4
14:44:57: Perf Move           0
14:44:57: Au Size             9
14:44:57: Erase Size          15
14:44:57: Erase Timeout       1
14:44:57: Erase offset        1
14:44:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4320 ] 
14:44:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:57: Host Frequency set to 100000 KHz
14:44:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:57: ####CSD Registe 2.0 Values####
14:44:57: CSD_STRUCTURE                                 :0x1
14:44:57: Reserv1                                       :0x0
14:44:57: Time Access 1 TAAC                            :0xe
14:44:58: Time Access 2 NSAC*100                        :0x0
14:44:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:58: Card Command Classess CCC                     :0x5b5
14:44:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:58: DSR(driver stage register)  DSR_IMP           :0x0
14:44:58: Reserv2                                       :0x0
14:44:58: Device Size C_SIZE                            :0xedc8
14:44:58: Reserv3                                       :0x0
14:44:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:58: Reserv4                                       :0x0
14:44:58: Write Speed Factor R2W_FACTOR                 :0x2
14:44:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:58: FILE_FORMAT_GRP                               :0x0
14:44:58: COPY flag                                     :0x1
14:44:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:58: File_Format                                   :0x0
14:44:58: CRC                                           :0x0
14:44:58: ####CSD Registe Values####  

14:44:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04600>, <py_sfcl.CommandDataDefinition object at 0x05DF5AE0>) , Command count = 4321 ] 
14:44:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DE0>, <py_sfcl.CommandDataDefinition object at 0x05DFBA80>) , Command count = 4322 ] 
14:44:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:58: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:44:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:44:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526F420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07A80>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FBA0>, <None>, <py_sfcl.Command23 object at 0x05E00960>) , Command count = 4323 ] 
14:44:58: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:44:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:00: Host Frequency set to 25000 KHz
14:45:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00210>, 0x0, True) , Command count = 4324 ] 
14:45:00: [GO18_globalSetVolt]### Host voltage value is set.
14:45:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBED0>, 0x0, False) , Command count = 4325 ] 
14:45:00: [GO18_globalSetVolt]### Host voltage value is set.
14:45:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4326 ] 
14:45:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4327 ] 
14:45:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4328 ] 
14:45:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9F30>, <py_sfcl.CommandDataDefinition object at 0x05E04630>) , Command count = 4329 ] 
14:45:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E079F0>, <py_sfcl.CommandDataDefinition object at 0x05DF5B10>) , Command count = 4330 ] 
14:45:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:01: [ SetCardRCA(0x1, 0xD555) , Command count = 4331 ] 
14:45:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:01: Host Frequency set to 25000 KHz
14:45:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:01: ####CSD Registe 2.0 Values####
14:45:01: CSD_STRUCTURE                                 :0x1
14:45:01: Reserv1                                       :0x0
14:45:01: Time Access 1 TAAC                            :0xe
14:45:01: Time Access 2 NSAC*100                        :0x0
14:45:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:01: Card Command Classess CCC                     :0x5b5
14:45:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:01: DSR(driver stage register)  DSR_IMP           :0x0
14:45:01: Reserv2                                       :0x0
14:45:01: Device Size C_SIZE                            :0xedc8
14:45:01: Reserv3                                       :0x0
14:45:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:01: Reserv4                                       :0x0
14:45:01: Write Speed Factor R2W_FACTOR                 :0x2
14:45:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:01: FILE_FORMAT_GRP                               :0x0
14:45:01: COPY flag                                     :0x1
14:45:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:01: File_Format                                   :0x0
14:45:01: CRC                                           :0x0
14:45:01: ####CSD Registe Values####  

14:45:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:01: [GetSCRRegisterEntry] Passed
14:45:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:01: Data_Status_After Erases          : 0
14:45:01: CPRM Security Support             : No Security
14:45:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:01: Spec. Version                     : Version 3.0X
14:45:01: Extended Security Support         : Extended_Security_Not_Supported
14:45:01: Command Support                   : COMMAND_SUPPORT
14:45:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0B1E0>) , Command count = 4332 ] 
14:45:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 4333 ] 
14:45:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:01: [ SetBusWidth(0x4) , Command count = 4334 ] 
14:45:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4335 ] 
14:45:01: Protected Area Size 0x28000
14:45:01: Bus Width           2
14:45:01: Secure Mode         0
14:45:01: Speed  Class        4
14:45:01: Perf Move           0
14:45:01: Au Size             9
14:45:01: Erase Size          15
14:45:01: Erase Timeout       1
14:45:01: Erase offset        1
14:45:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4336 ] 
14:45:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:01: Host Frequency set to 100000 KHz
14:45:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:01: ####CSD Registe 2.0 Values####
14:45:01: CSD_STRUCTURE                                 :0x1
14:45:01: Reserv1                                       :0x0
14:45:01: Time Access 1 TAAC                            :0xe
14:45:01: Time Access 2 NSAC*100                        :0x0
14:45:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:01: Card Command Classess CCC                     :0x5b5
14:45:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:01: DSR(driver stage register)  DSR_IMP           :0x0
14:45:01: Reserv2                                       :0x0
14:45:01: Device Size C_SIZE                            :0xedc8
14:45:01: Reserv3                                       :0x0
14:45:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:01: Reserv4                                       :0x0
14:45:01: Write Speed Factor R2W_FACTOR                 :0x2
14:45:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:01: FILE_FORMAT_GRP                               :0x0
14:45:01: COPY flag                                     :0x1
14:45:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:01: File_Format                                   :0x0
14:45:01: CRC                                           :0x0
14:45:01: ####CSD Registe Values####  

14:45:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2D0>, <py_sfcl.CommandDataDefinition object at 0x05E00CF0>) , Command count = 4337 ] 
14:45:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B750>, <py_sfcl.CommandDataDefinition object at 0x05E0B150>) , Command count = 4338 ] 
14:45:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:02: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:45:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526F120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B690>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B6F0>, <None>, <py_sfcl.Command23 object at 0x05E0F240>) , Command count = 4339 ] 
14:45:02: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:04: Host Frequency set to 25000 KHz
14:45:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04030>, 0x0, True) , Command count = 4340 ] 
14:45:04: [GO18_globalSetVolt]### Host voltage value is set.
14:45:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E077B0>, 0x0, False) , Command count = 4341 ] 
14:45:04: [GO18_globalSetVolt]### Host voltage value is set.
14:45:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4342 ] 
14:45:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4343 ] 
14:45:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4344 ] 
14:45:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07420>, <py_sfcl.CommandDataDefinition object at 0x05E07840>) , Command count = 4345 ] 
14:45:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07990>, <py_sfcl.CommandDataDefinition object at 0x05E0B300>) , Command count = 4346 ] 
14:45:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:04: [ SetCardRCA(0x1, 0xD555) , Command count = 4347 ] 
14:45:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:04: Host Frequency set to 25000 KHz
14:45:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:04: ####CSD Registe 2.0 Values####
14:45:04: CSD_STRUCTURE                                 :0x1
14:45:04: Reserv1                                       :0x0
14:45:04: Time Access 1 TAAC                            :0xe
14:45:04: Time Access 2 NSAC*100                        :0x0
14:45:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:04: Card Command Classess CCC                     :0x5b5
14:45:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:04: DSR(driver stage register)  DSR_IMP           :0x0
14:45:04: Reserv2                                       :0x0
14:45:04: Device Size C_SIZE                            :0xedc8
14:45:04: Reserv3                                       :0x0
14:45:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:04: Reserv4                                       :0x0
14:45:04: Write Speed Factor R2W_FACTOR                 :0x2
14:45:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:04: FILE_FORMAT_GRP                               :0x0
14:45:04: COPY flag                                     :0x1
14:45:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:04: File_Format                                   :0x0
14:45:04: CRC                                           :0x0
14:45:04: ####CSD Registe Values####  

14:45:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:04: [GetSCRRegisterEntry] Passed
14:45:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:04: Data_Status_After Erases          : 0
14:45:04: CPRM Security Support             : No Security
14:45:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:04: Spec. Version                     : Version 3.0X
14:45:04: Extended Security Support         : Extended_Security_Not_Supported
14:45:04: Command Support                   : COMMAND_SUPPORT
14:45:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB40>) , Command count = 4348 ] 
14:45:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B10>, <py_sfcl.CommandDataDefinition object at 0x05E076F0>) , Command count = 4349 ] 
14:45:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:04: [ SetBusWidth(0x4) , Command count = 4350 ] 
14:45:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4351 ] 
14:45:04: Protected Area Size 0x28000
14:45:04: Bus Width           2
14:45:04: Secure Mode         0
14:45:04: Speed  Class        4
14:45:04: Perf Move           0
14:45:04: Au Size             9
14:45:04: Erase Size          15
14:45:04: Erase Timeout       1
14:45:04: Erase offset        1
14:45:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4352 ] 
14:45:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:04: Host Frequency set to 100000 KHz
14:45:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:04: ####CSD Registe 2.0 Values####
14:45:04: CSD_STRUCTURE                                 :0x1
14:45:04: Reserv1                                       :0x0
14:45:04: Time Access 1 TAAC                            :0xe
14:45:04: Time Access 2 NSAC*100                        :0x0
14:45:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:04: Card Command Classess CCC                     :0x5b5
14:45:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:04: DSR(driver stage register)  DSR_IMP           :0x0
14:45:04: Reserv2                                       :0x0
14:45:04: Device Size C_SIZE                            :0xedc8
14:45:04: Reserv3                                       :0x0
14:45:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:04: Reserv4                                       :0x0
14:45:05: Write Speed Factor R2W_FACTOR                 :0x2
14:45:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:05: FILE_FORMAT_GRP                               :0x0
14:45:05: COPY flag                                     :0x1
14:45:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:05: File_Format                                   :0x0
14:45:05: CRC                                           :0x0
14:45:05: ####CSD Registe Values####  

14:45:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D20>, <py_sfcl.CommandDataDefinition object at 0x05E072D0>) , Command count = 4353 ] 
14:45:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07DE0>, <py_sfcl.CommandDataDefinition object at 0x05E0BD80>) , Command count = 4354 ] 
14:45:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:05: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:45:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F720>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FF60>, <None>, <py_sfcl.Command23 object at 0x05E0FDB0>) , Command count = 4355 ] 
14:45:05: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:07: Host Frequency set to 25000 KHz
14:45:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9A80>, 0x0, True) , Command count = 4356 ] 
14:45:07: [GO18_globalSetVolt]### Host voltage value is set.
14:45:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0BC30>, 0x0, False) , Command count = 4357 ] 
14:45:07: [GO18_globalSetVolt]### Host voltage value is set.
14:45:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4358 ] 
14:45:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4359 ] 
14:45:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4360 ] 
14:45:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0BD20>) , Command count = 4361 ] 
14:45:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F60>, <py_sfcl.CommandDataDefinition object at 0x05E0B390>) , Command count = 4362 ] 
14:45:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:07: [ SetCardRCA(0x1, 0xD555) , Command count = 4363 ] 
14:45:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:08: Host Frequency set to 25000 KHz
14:45:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:08: ####CSD Registe 2.0 Values####
14:45:08: CSD_STRUCTURE                                 :0x1
14:45:08: Reserv1                                       :0x0
14:45:08: Time Access 1 TAAC                            :0xe
14:45:08: Time Access 2 NSAC*100                        :0x0
14:45:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:08: Card Command Classess CCC                     :0x5b5
14:45:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:08: DSR(driver stage register)  DSR_IMP           :0x0
14:45:08: Reserv2                                       :0x0
14:45:08: Device Size C_SIZE                            :0xedc8
14:45:08: Reserv3                                       :0x0
14:45:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:08: Reserv4                                       :0x0
14:45:08: Write Speed Factor R2W_FACTOR                 :0x2
14:45:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:08: FILE_FORMAT_GRP                               :0x0
14:45:08: COPY flag                                     :0x1
14:45:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:08: File_Format                                   :0x0
14:45:08: CRC                                           :0x0
14:45:08: ####CSD Registe Values####  

14:45:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:08: [GetSCRRegisterEntry] Passed
14:45:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:08: Data_Status_After Erases          : 0
14:45:08: CPRM Security Support             : No Security
14:45:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:08: Spec. Version                     : Version 3.0X
14:45:08: Extended Security Support         : Extended_Security_Not_Supported
14:45:08: Command Support                   : COMMAND_SUPPORT
14:45:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07510>, <py_sfcl.CommandDataDefinition object at 0x0526FC30>) , Command count = 4364 ] 
14:45:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07180>, <py_sfcl.CommandDataDefinition object at 0x0526FCF0>) , Command count = 4365 ] 
14:45:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:08: [ SetBusWidth(0x4) , Command count = 4366 ] 
14:45:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4367 ] 
14:45:08: Protected Area Size 0x28000
14:45:08: Bus Width           2
14:45:08: Secure Mode         0
14:45:08: Speed  Class        4
14:45:08: Perf Move           0
14:45:08: Au Size             9
14:45:08: Erase Size          15
14:45:08: Erase Timeout       1
14:45:08: Erase offset        1
14:45:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4368 ] 
14:45:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:08: Host Frequency set to 100000 KHz
14:45:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:08: ####CSD Registe 2.0 Values####
14:45:08: CSD_STRUCTURE                                 :0x1
14:45:08: Reserv1                                       :0x0
14:45:08: Time Access 1 TAAC                            :0xe
14:45:08: Time Access 2 NSAC*100                        :0x0
14:45:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:08: Card Command Classess CCC                     :0x5b5
14:45:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:08: DSR(driver stage register)  DSR_IMP           :0x0
14:45:08: Reserv2                                       :0x0
14:45:08: Device Size C_SIZE                            :0xedc8
14:45:08: Reserv3                                       :0x0
14:45:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:08: Reserv4                                       :0x0
14:45:08: Write Speed Factor R2W_FACTOR                 :0x2
14:45:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:08: FILE_FORMAT_GRP                               :0x0
14:45:08: COPY flag                                     :0x1
14:45:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:08: File_Format                                   :0x0
14:45:08: CRC                                           :0x0
14:45:08: ####CSD Registe Values####  

14:45:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281A50>, <py_sfcl.CommandDataDefinition object at 0x0526FC60>) , Command count = 4369 ] 
14:45:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BA80>, <py_sfcl.CommandDataDefinition object at 0x05E0B2A0>) , Command count = 4370 ] 
14:45:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:08: STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap[INFO] ### EXIT_LOOP Count 2
14:45:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0527B4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FE10>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FCF0>, <None>, <py_sfcl.Command23 object at 0x05E0FE40>) , Command count = 4371 ] 
14:45:08: STPTRNSABRTST33_DVT_ST_CMD0_2_11_Busy_1ms_50ms_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:11: Failed Running script <module 'STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST34_DVT_ST_CMD0_2_12_Busy_1ms_50ms_Overlap.pyc'> with error  
14:45:11: ########################################
14:45:11: ########################################
14:45:11: Stated Running script STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump 
14:45:11: ########################################
14:45:11: ###### Running STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump Test ###### 

14:45:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:13: Host Frequency set to 25000 KHz
14:45:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5990>, 0x0, True) , Command count = 4372 ] 
14:45:13: [GO18_globalSetVolt]### Host voltage value is set.
14:45:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E074B0>, 0x0, False) , Command count = 4373 ] 
14:45:13: [GO18_globalSetVolt]### Host voltage value is set.
14:45:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4374 ] 
14:45:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4375 ] 
14:45:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4376 ] 
14:45:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE99C0>, <py_sfcl.CommandDataDefinition object at 0x05E073C0>) , Command count = 4377 ] 
14:45:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07A20>, <py_sfcl.CommandDataDefinition object at 0x05E0B7B0>) , Command count = 4378 ] 
14:45:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:13: [ SetCardRCA(0x1, 0xD555) , Command count = 4379 ] 
14:45:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:13: Host Frequency set to 25000 KHz
14:45:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:13: ####CSD Registe 2.0 Values####
14:45:13: CSD_STRUCTURE                                 :0x1
14:45:13: Reserv1                                       :0x0
14:45:13: Time Access 1 TAAC                            :0xe
14:45:13: Time Access 2 NSAC*100                        :0x0
14:45:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:13: Card Command Classess CCC                     :0x5b5
14:45:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:13: DSR(driver stage register)  DSR_IMP           :0x0
14:45:13: Reserv2                                       :0x0
14:45:13: Device Size C_SIZE                            :0xedc8
14:45:13: Reserv3                                       :0x0
14:45:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:13: Reserv4                                       :0x0
14:45:13: Write Speed Factor R2W_FACTOR                 :0x2
14:45:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:13: FILE_FORMAT_GRP                               :0x0
14:45:13: COPY flag                                     :0x1
14:45:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:13: File_Format                                   :0x0
14:45:13: CRC                                           :0x0
14:45:13: ####CSD Registe Values####  

14:45:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:13: [GetSCRRegisterEntry] Passed
14:45:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:13: Data_Status_After Erases          : 0
14:45:13: CPRM Security Support             : No Security
14:45:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:13: Spec. Version                     : Version 3.0X
14:45:13: Extended Security Support         : Extended_Security_Not_Supported
14:45:13: Command Support                   : COMMAND_SUPPORT
14:45:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047E0>, <py_sfcl.CommandDataDefinition object at 0x05E07330>) , Command count = 4380 ] 
14:45:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FF60>, <py_sfcl.CommandDataDefinition object at 0x05E07150>) , Command count = 4381 ] 
14:45:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:13: [ SetBusWidth(0x4) , Command count = 4382 ] 
14:45:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4383 ] 
14:45:13: Protected Area Size 0x28000
14:45:13: Bus Width           2
14:45:13: Secure Mode         0
14:45:13: Speed  Class        4
14:45:13: Perf Move           0
14:45:13: Au Size             9
14:45:13: Erase Size          15
14:45:13: Erase Timeout       1
14:45:13: Erase offset        1
14:45:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4384 ] 
14:45:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:13: Host Frequency set to 100000 KHz
14:45:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:13: ####CSD Registe 2.0 Values####
14:45:13: CSD_STRUCTURE                                 :0x1
14:45:13: Reserv1                                       :0x0
14:45:13: Time Access 1 TAAC                            :0xe
14:45:13: Time Access 2 NSAC*100                        :0x0
14:45:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:13: Card Command Classess CCC                     :0x5b5
14:45:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:13: DSR(driver stage register)  DSR_IMP           :0x0
14:45:13: Reserv2                                       :0x0
14:45:13: Device Size C_SIZE                            :0xedc8
14:45:13: Reserv3                                       :0x0
14:45:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:13: Reserv4                                       :0x0
14:45:14: Write Speed Factor R2W_FACTOR                 :0x2
14:45:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:14: FILE_FORMAT_GRP                               :0x0
14:45:14: COPY flag                                     :0x1
14:45:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:14: File_Format                                   :0x0
14:45:14: CRC                                           :0x0
14:45:14: ####CSD Registe Values####  

14:45:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 4385 ] 
14:45:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3F0>) , Command count = 4386 ] 
14:45:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with One's Pattern
14:45:17: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4387 ] 
14:45:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with One's Pattern 

14:45:17: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Outer loop Count 1024
14:45:17: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 29
14:45:17: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E076C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05CEF060>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BFC0>, <None>, <py_sfcl.Command23 object at 0x05E0BAB0>) , Command count = 4388 ] 
14:45:17: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:17: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05281F60>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B870>, <None>, <py_sfcl.Command23 object at 0x05E0BB70>) , Command count = 4389 ] 
14:45:17: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:19: Host Frequency set to 25000 KHz
14:45:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F900>, 0x0, True) , Command count = 4390 ] 
14:45:19: [GO18_globalSetVolt]### Host voltage value is set.
14:45:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281CC0>, 0x0, False) , Command count = 4391 ] 
14:45:19: [GO18_globalSetVolt]### Host voltage value is set.
14:45:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4392 ] 
14:45:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4393 ] 
14:45:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4394 ] 
14:45:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E07780>) , Command count = 4395 ] 
14:45:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C60>, <py_sfcl.CommandDataDefinition object at 0x05E07390>) , Command count = 4396 ] 
14:45:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:19: [ SetCardRCA(0x1, 0xD555) , Command count = 4397 ] 
14:45:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:19: Host Frequency set to 25000 KHz
14:45:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:19: ####CSD Registe 2.0 Values####
14:45:19: CSD_STRUCTURE                                 :0x1
14:45:19: Reserv1                                       :0x0
14:45:19: Time Access 1 TAAC                            :0xe
14:45:19: Time Access 2 NSAC*100                        :0x0
14:45:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:19: Card Command Classess CCC                     :0x5b5
14:45:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:19: DSR(driver stage register)  DSR_IMP           :0x0
14:45:19: Reserv2                                       :0x0
14:45:19: Device Size C_SIZE                            :0xedc8
14:45:19: Reserv3                                       :0x0
14:45:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:19: Reserv4                                       :0x0
14:45:19: Write Speed Factor R2W_FACTOR                 :0x2
14:45:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:19: FILE_FORMAT_GRP                               :0x0
14:45:19: COPY flag                                     :0x1
14:45:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:19: File_Format                                   :0x0
14:45:19: CRC                                           :0x0
14:45:19: ####CSD Registe Values####  

14:45:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:19: [GetSCRRegisterEntry] Passed
14:45:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:19: Data_Status_After Erases          : 0
14:45:19: CPRM Security Support             : No Security
14:45:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:19: Spec. Version                     : Version 3.0X
14:45:19: Extended Security Support         : Extended_Security_Not_Supported
14:45:19: Command Support                   : COMMAND_SUPPORT
14:45:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00630>, <py_sfcl.CommandDataDefinition object at 0x05E0BE40>) , Command count = 4398 ] 
14:45:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525B4B0>, <py_sfcl.CommandDataDefinition object at 0x05E0BF90>) , Command count = 4399 ] 
14:45:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:19: [ SetBusWidth(0x4) , Command count = 4400 ] 
14:45:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF54E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4401 ] 
14:45:19: Protected Area Size 0x28000
14:45:19: Bus Width           2
14:45:19: Secure Mode         0
14:45:19: Speed  Class        4
14:45:19: Perf Move           0
14:45:19: Au Size             9
14:45:19: Erase Size          15
14:45:19: Erase Timeout       1
14:45:19: Erase offset        1
14:45:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4402 ] 
14:45:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:19: Host Frequency set to 100000 KHz
14:45:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:19: ####CSD Registe 2.0 Values####
14:45:19: CSD_STRUCTURE                                 :0x1
14:45:19: Reserv1                                       :0x0
14:45:19: Time Access 1 TAAC                            :0xe
14:45:19: Time Access 2 NSAC*100                        :0x0
14:45:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:19: Card Command Classess CCC                     :0x5b5
14:45:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:19: DSR(driver stage register)  DSR_IMP           :0x0
14:45:19: Reserv2                                       :0x0
14:45:19: Device Size C_SIZE                            :0xedc8
14:45:19: Reserv3                                       :0x0
14:45:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:19: Reserv4                                       :0x0
14:45:19: Write Speed Factor R2W_FACTOR                 :0x2
14:45:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:19: FILE_FORMAT_GRP                               :0x0
14:45:19: COPY flag                                     :0x1
14:45:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:19: File_Format                                   :0x0
14:45:19: CRC                                           :0x0
14:45:19: ####CSD Registe Values####  

14:45:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F90>, <py_sfcl.CommandDataDefinition object at 0x05E044B0>) , Command count = 4403 ] 
14:45:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 4404 ] 
14:45:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEF7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBC30>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BBA0>, <None>, <py_sfcl.Command23 object at 0x05E0FD80>) , Command count = 4405 ] 
14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x7 to EndLba:0x8 with Increment Pattern
14:45:20: [ WrLbaNoData(0x7, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4406 ] 
14:45:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x7 to EndLba:0x8 with Increment Pattern 

14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 28
14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB870>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BE70>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BCC0>, <None>, <py_sfcl.Command23 object at 0x05E0F090>) , Command count = 4407 ] 
14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9E70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBAB0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C90>, <None>, <py_sfcl.Command23 object at 0x05E0F180>) , Command count = 4408 ] 
14:45:20: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:22: Host Frequency set to 25000 KHz
14:45:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07540>, 0x0, True) , Command count = 4409 ] 
14:45:22: [GO18_globalSetVolt]### Host voltage value is set.
14:45:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B40>, 0x0, False) , Command count = 4410 ] 
14:45:22: [GO18_globalSetVolt]### Host voltage value is set.
14:45:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4411 ] 
14:45:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4412 ] 
14:45:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4413 ] 
14:45:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B600>) , Command count = 4414 ] 
14:45:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BD50>, <py_sfcl.CommandDataDefinition object at 0x05DE9A20>) , Command count = 4415 ] 
14:45:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:22: [ SetCardRCA(0x1, 0xD555) , Command count = 4416 ] 
14:45:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:22: Host Frequency set to 25000 KHz
14:45:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:22: ####CSD Registe 2.0 Values####
14:45:22: CSD_STRUCTURE                                 :0x1
14:45:22: Reserv1                                       :0x0
14:45:22: Time Access 1 TAAC                            :0xe
14:45:22: Time Access 2 NSAC*100                        :0x0
14:45:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:22: Card Command Classess CCC                     :0x5b5
14:45:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:22: DSR(driver stage register)  DSR_IMP           :0x0
14:45:22: Reserv2                                       :0x0
14:45:22: Device Size C_SIZE                            :0xedc8
14:45:22: Reserv3                                       :0x0
14:45:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:22: Reserv4                                       :0x0
14:45:22: Write Speed Factor R2W_FACTOR                 :0x2
14:45:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:22: FILE_FORMAT_GRP                               :0x0
14:45:22: COPY flag                                     :0x1
14:45:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:22: File_Format                                   :0x0
14:45:22: CRC                                           :0x0
14:45:22: ####CSD Registe Values####  

14:45:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:22: [GetSCRRegisterEntry] Passed
14:45:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:22: Data_Status_After Erases          : 0
14:45:22: CPRM Security Support             : No Security
14:45:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:22: Spec. Version                     : Version 3.0X
14:45:22: Extended Security Support         : Extended_Security_Not_Supported
14:45:22: Command Support                   : COMMAND_SUPPORT
14:45:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F270>, <py_sfcl.CommandDataDefinition object at 0x05E0F9C0>) , Command count = 4417 ] 
14:45:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FB70>, <py_sfcl.CommandDataDefinition object at 0x05E07BA0>) , Command count = 4418 ] 
14:45:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:22: [ SetBusWidth(0x4) , Command count = 4419 ] 
14:45:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DF5120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4420 ] 
14:45:22: Protected Area Size 0x28000
14:45:22: Bus Width           2
14:45:22: Secure Mode         0
14:45:22: Speed  Class        4
14:45:22: Perf Move           0
14:45:22: Au Size             9
14:45:22: Erase Size          15
14:45:22: Erase Timeout       1
14:45:22: Erase offset        1
14:45:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4421 ] 
14:45:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:22: Host Frequency set to 100000 KHz
14:45:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:22: ####CSD Registe 2.0 Values####
14:45:22: CSD_STRUCTURE                                 :0x1
14:45:22: Reserv1                                       :0x0
14:45:22: Time Access 1 TAAC                            :0xe
14:45:22: Time Access 2 NSAC*100                        :0x0
14:45:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:22: Card Command Classess CCC                     :0x5b5
14:45:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:22: DSR(driver stage register)  DSR_IMP           :0x0
14:45:22: Reserv2                                       :0x0
14:45:22: Device Size C_SIZE                            :0xedc8
14:45:22: Reserv3                                       :0x0
14:45:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:22: Reserv4                                       :0x0
14:45:22: Write Speed Factor R2W_FACTOR                 :0x2
14:45:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:22: FILE_FORMAT_GRP                               :0x0
14:45:22: COPY flag                                     :0x1
14:45:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:22: File_Format                                   :0x0
14:45:22: CRC                                           :0x0
14:45:22: ####CSD Registe Values####  

14:45:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB9C0>, <py_sfcl.CommandDataDefinition object at 0x05DF54E0>) , Command count = 4422 ] 
14:45:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05281C90>) , Command count = 4423 ] 
14:45:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBC00>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5C30>, <None>, <py_sfcl.Command23 object at 0x05E0F1B0>) , Command count = 4424 ] 
14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2007 to EndLba:0x2008 with Increment Pattern
14:45:22: [ WrLbaNoData(0x2007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4425 ] 
14:45:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2007 to EndLba:0x2008 with Increment Pattern 

14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 27
14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9DB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07BD0>, <py_sfcl.PySEnhancedCmdData object at 0x05E109C0>, <None>, <py_sfcl.Command23 object at 0x05E07BA0>) , Command count = 4426 ] 
14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10060>, <py_sfcl.PySEnhancedCmdData object at 0x05E10270>, <None>, <py_sfcl.Command23 object at 0x05E10CF0>) , Command count = 4427 ] 
14:45:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:24: Host Frequency set to 25000 KHz
14:45:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB840>, 0x0, True) , Command count = 4428 ] 
14:45:24: [GO18_globalSetVolt]### Host voltage value is set.
14:45:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04480>, 0x0, False) , Command count = 4429 ] 
14:45:24: [GO18_globalSetVolt]### Host voltage value is set.
14:45:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4430 ] 
14:45:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4431 ] 
14:45:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4432 ] 
14:45:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E070C0>, <py_sfcl.CommandDataDefinition object at 0x05DF5600>) , Command count = 4433 ] 
14:45:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9CF0>, <py_sfcl.CommandDataDefinition object at 0x05E0BBD0>) , Command count = 4434 ] 
14:45:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:25: [ SetCardRCA(0x1, 0xD555) , Command count = 4435 ] 
14:45:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:25: Host Frequency set to 25000 KHz
14:45:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:25: ####CSD Registe 2.0 Values####
14:45:25: CSD_STRUCTURE                                 :0x1
14:45:25: Reserv1                                       :0x0
14:45:25: Time Access 1 TAAC                            :0xe
14:45:25: Time Access 2 NSAC*100                        :0x0
14:45:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:25: Card Command Classess CCC                     :0x5b5
14:45:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:25: DSR(driver stage register)  DSR_IMP           :0x0
14:45:25: Reserv2                                       :0x0
14:45:25: Device Size C_SIZE                            :0xedc8
14:45:25: Reserv3                                       :0x0
14:45:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:25: Reserv4                                       :0x0
14:45:25: Write Speed Factor R2W_FACTOR                 :0x2
14:45:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:25: FILE_FORMAT_GRP                               :0x0
14:45:25: COPY flag                                     :0x1
14:45:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:25: File_Format                                   :0x0
14:45:25: CRC                                           :0x0
14:45:25: ####CSD Registe Values####  

14:45:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:25: [GetSCRRegisterEntry] Passed
14:45:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:25: Data_Status_After Erases          : 0
14:45:25: CPRM Security Support             : No Security
14:45:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:25: Spec. Version                     : Version 3.0X
14:45:25: Extended Security Support         : Extended_Security_Not_Supported
14:45:25: Command Support                   : COMMAND_SUPPORT
14:45:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05DF5FC0>) , Command count = 4436 ] 
14:45:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9C00>, <py_sfcl.CommandDataDefinition object at 0x05DF5750>) , Command count = 4437 ] 
14:45:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:25: [ SetBusWidth(0x4) , Command count = 4438 ] 
14:45:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05281F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4439 ] 
14:45:25: Protected Area Size 0x28000
14:45:25: Bus Width           2
14:45:25: Secure Mode         0
14:45:25: Speed  Class        4
14:45:25: Perf Move           0
14:45:25: Au Size             9
14:45:25: Erase Size          15
14:45:25: Erase Timeout       1
14:45:25: Erase offset        1
14:45:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4440 ] 
14:45:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:25: Host Frequency set to 100000 KHz
14:45:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:25: ####CSD Registe 2.0 Values####
14:45:25: CSD_STRUCTURE                                 :0x1
14:45:25: Reserv1                                       :0x0
14:45:25: Time Access 1 TAAC                            :0xe
14:45:25: Time Access 2 NSAC*100                        :0x0
14:45:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:25: Card Command Classess CCC                     :0x5b5
14:45:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:25: DSR(driver stage register)  DSR_IMP           :0x0
14:45:25: Reserv2                                       :0x0
14:45:25: Device Size C_SIZE                            :0xedc8
14:45:25: Reserv3                                       :0x0
14:45:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:25: Reserv4                                       :0x0
14:45:25: Write Speed Factor R2W_FACTOR                 :0x2
14:45:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:25: FILE_FORMAT_GRP                               :0x0
14:45:25: COPY flag                                     :0x1
14:45:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:25: File_Format                                   :0x0
14:45:25: CRC                                           :0x0
14:45:25: ####CSD Registe Values####  

14:45:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9810>, <py_sfcl.CommandDataDefinition object at 0x05DF5780>) , Command count = 4441 ] 
14:45:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5690>, <py_sfcl.CommandDataDefinition object at 0x05E070F0>) , Command count = 4442 ] 
14:45:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07090>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B480>, <py_sfcl.PySEnhancedCmdData object at 0x05E04360>, <None>, <py_sfcl.Command23 object at 0x05E105A0>) , Command count = 4443 ] 
14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x4007 to EndLba:0x4008 with Increment Pattern
14:45:25: [ WrLbaNoData(0x4007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4444 ] 
14:45:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x4007 to EndLba:0x4008 with Increment Pattern 

14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 26
14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB5D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07570>, <py_sfcl.PySEnhancedCmdData object at 0x05E07E70>, <None>, <py_sfcl.Command23 object at 0x05E072A0>) , Command count = 4445 ] 
14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9B10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5570>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F390>, <None>, <py_sfcl.Command23 object at 0x05E07CC0>) , Command count = 4446 ] 
14:45:25: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:27: Host Frequency set to 25000 KHz
14:45:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00F90>, 0x0, True) , Command count = 4447 ] 
14:45:27: [GO18_globalSetVolt]### Host voltage value is set.
14:45:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E075A0>, 0x0, False) , Command count = 4448 ] 
14:45:27: [GO18_globalSetVolt]### Host voltage value is set.
14:45:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4449 ] 
14:45:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4450 ] 
14:45:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4451 ] 
14:45:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07FC0>, <py_sfcl.CommandDataDefinition object at 0x05DF5CF0>) , Command count = 4452 ] 
14:45:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC90>, <py_sfcl.CommandDataDefinition object at 0x05DF5F90>) , Command count = 4453 ] 
14:45:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:27: [ SetCardRCA(0x1, 0xD555) , Command count = 4454 ] 
14:45:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:28: Host Frequency set to 25000 KHz
14:45:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:28: ####CSD Registe 2.0 Values####
14:45:28: CSD_STRUCTURE                                 :0x1
14:45:28: Reserv1                                       :0x0
14:45:28: Time Access 1 TAAC                            :0xe
14:45:28: Time Access 2 NSAC*100                        :0x0
14:45:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:28: Card Command Classess CCC                     :0x5b5
14:45:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:28: DSR(driver stage register)  DSR_IMP           :0x0
14:45:28: Reserv2                                       :0x0
14:45:28: Device Size C_SIZE                            :0xedc8
14:45:28: Reserv3                                       :0x0
14:45:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:28: Reserv4                                       :0x0
14:45:28: Write Speed Factor R2W_FACTOR                 :0x2
14:45:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:28: FILE_FORMAT_GRP                               :0x0
14:45:28: COPY flag                                     :0x1
14:45:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:28: File_Format                                   :0x0
14:45:28: CRC                                           :0x0
14:45:28: ####CSD Registe Values####  

14:45:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:28: [GetSCRRegisterEntry] Passed
14:45:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:28: Data_Status_After Erases          : 0
14:45:28: CPRM Security Support             : No Security
14:45:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:28: Spec. Version                     : Version 3.0X
14:45:28: Extended Security Support         : Extended_Security_Not_Supported
14:45:28: Command Support                   : COMMAND_SUPPORT
14:45:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E001B0>, <py_sfcl.CommandDataDefinition object at 0x05DF55A0>) , Command count = 4455 ] 
14:45:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F030>, <py_sfcl.CommandDataDefinition object at 0x05E0F510>) , Command count = 4456 ] 
14:45:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:28: [ SetBusWidth(0x4) , Command count = 4457 ] 
14:45:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4458 ] 
14:45:28: Protected Area Size 0x28000
14:45:28: Bus Width           2
14:45:28: Secure Mode         0
14:45:28: Speed  Class        4
14:45:28: Perf Move           0
14:45:28: Au Size             9
14:45:28: Erase Size          15
14:45:28: Erase Timeout       1
14:45:28: Erase offset        1
14:45:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4459 ] 
14:45:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:28: Host Frequency set to 100000 KHz
14:45:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:28: ####CSD Registe 2.0 Values####
14:45:28: CSD_STRUCTURE                                 :0x1
14:45:28: Reserv1                                       :0x0
14:45:28: Time Access 1 TAAC                            :0xe
14:45:28: Time Access 2 NSAC*100                        :0x0
14:45:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:28: Card Command Classess CCC                     :0x5b5
14:45:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:28: DSR(driver stage register)  DSR_IMP           :0x0
14:45:28: Reserv2                                       :0x0
14:45:28: Device Size C_SIZE                            :0xedc8
14:45:28: Reserv3                                       :0x0
14:45:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:28: Reserv4                                       :0x0
14:45:28: Write Speed Factor R2W_FACTOR                 :0x2
14:45:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:28: FILE_FORMAT_GRP                               :0x0
14:45:28: COPY flag                                     :0x1
14:45:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:28: File_Format                                   :0x0
14:45:28: CRC                                           :0x0
14:45:28: ####CSD Registe Values####  

14:45:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEFB10>, <py_sfcl.CommandDataDefinition object at 0x05E0F060>) , Command count = 4460 ] 
14:45:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F150>, <py_sfcl.CommandDataDefinition object at 0x05DF5F30>) , Command count = 4461 ] 
14:45:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04B70>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00E70>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB4E0>, <None>, <py_sfcl.Command23 object at 0x05E00660>) , Command count = 4462 ] 
14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x6007 to EndLba:0x6008 with Increment Pattern
14:45:28: [ WrLbaNoData(0x6007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4463 ] 
14:45:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x6007 to EndLba:0x6008 with Increment Pattern 

14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 25
14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF54B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB330>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F690>, <None>, <py_sfcl.Command23 object at 0x05E07C60>) , Command count = 4464 ] 
14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10510>, <py_sfcl.PySEnhancedCmdData object at 0x05E10D80>, <None>, <py_sfcl.Command23 object at 0x05E07AB0>) , Command count = 4465 ] 
14:45:28: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:30: Host Frequency set to 25000 KHz
14:45:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07EA0>, 0x0, True) , Command count = 4466 ] 
14:45:30: [GO18_globalSetVolt]### Host voltage value is set.
14:45:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F330>, 0x0, False) , Command count = 4467 ] 
14:45:30: [GO18_globalSetVolt]### Host voltage value is set.
14:45:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4468 ] 
14:45:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4469 ] 
14:45:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4470 ] 
14:45:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF58D0>, <py_sfcl.CommandDataDefinition object at 0x05E046F0>) , Command count = 4471 ] 
14:45:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5930>, <py_sfcl.CommandDataDefinition object at 0x05DFB180>) , Command count = 4472 ] 
14:45:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4473 ] 
14:45:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:30: Host Frequency set to 25000 KHz
14:45:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:30: ####CSD Registe 2.0 Values####
14:45:30: CSD_STRUCTURE                                 :0x1
14:45:30: Reserv1                                       :0x0
14:45:30: Time Access 1 TAAC                            :0xe
14:45:30: Time Access 2 NSAC*100                        :0x0
14:45:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:30: Card Command Classess CCC                     :0x5b5
14:45:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:30: DSR(driver stage register)  DSR_IMP           :0x0
14:45:30: Reserv2                                       :0x0
14:45:30: Device Size C_SIZE                            :0xedc8
14:45:30: Reserv3                                       :0x0
14:45:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:30: Reserv4                                       :0x0
14:45:30: Write Speed Factor R2W_FACTOR                 :0x2
14:45:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:30: FILE_FORMAT_GRP                               :0x0
14:45:30: COPY flag                                     :0x1
14:45:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:30: File_Format                                   :0x0
14:45:30: CRC                                           :0x0
14:45:30: ####CSD Registe Values####  

14:45:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:30: [GetSCRRegisterEntry] Passed
14:45:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:30: Data_Status_After Erases          : 0
14:45:30: CPRM Security Support             : No Security
14:45:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:30: Spec. Version                     : Version 3.0X
14:45:30: Extended Security Support         : Extended_Security_Not_Supported
14:45:30: Command Support                   : COMMAND_SUPPORT
14:45:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E006F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB5A0>) , Command count = 4474 ] 
14:45:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07D80>, <py_sfcl.CommandDataDefinition object at 0x05E0FC00>) , Command count = 4475 ] 
14:45:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:30: [ SetBusWidth(0x4) , Command count = 4476 ] 
14:45:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4477 ] 
14:45:30: Protected Area Size 0x28000
14:45:30: Bus Width           2
14:45:30: Secure Mode         0
14:45:30: Speed  Class        4
14:45:30: Perf Move           0
14:45:30: Au Size             9
14:45:30: Erase Size          15
14:45:30: Erase Timeout       1
14:45:30: Erase offset        1
14:45:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4478 ] 
14:45:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:30: Host Frequency set to 100000 KHz
14:45:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:30: ####CSD Registe 2.0 Values####
14:45:30: CSD_STRUCTURE                                 :0x1
14:45:30: Reserv1                                       :0x0
14:45:30: Time Access 1 TAAC                            :0xe
14:45:30: Time Access 2 NSAC*100                        :0x0
14:45:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:30: Card Command Classess CCC                     :0x5b5
14:45:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:30: DSR(driver stage register)  DSR_IMP           :0x0
14:45:30: Reserv2                                       :0x0
14:45:30: Device Size C_SIZE                            :0xedc8
14:45:30: Reserv3                                       :0x0
14:45:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:30: Reserv4                                       :0x0
14:45:30: Write Speed Factor R2W_FACTOR                 :0x2
14:45:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:30: FILE_FORMAT_GRP                               :0x0
14:45:30: COPY flag                                     :0x1
14:45:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:30: File_Format                                   :0x0
14:45:30: CRC                                           :0x0
14:45:30: ####CSD Registe Values####  

14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F00>, <py_sfcl.CommandDataDefinition object at 0x05DFB1B0>) , Command count = 4479 ] 
14:45:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07030>, <py_sfcl.CommandDataDefinition object at 0x05E040C0>) , Command count = 4480 ] 
14:45:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBF90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00300>, <py_sfcl.PySEnhancedCmdData object at 0x05E00510>, <None>, <py_sfcl.Command23 object at 0x05E0FC00>) , Command count = 4481 ] 
14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x8007 to EndLba:0x8008 with Increment Pattern
14:45:30: [ WrLbaNoData(0x8007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4482 ] 
14:45:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x8007 to EndLba:0x8008 with Increment Pattern 

14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 24
14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5DE0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10D80>, <py_sfcl.PySEnhancedCmdData object at 0x05E10180>, <None>, <py_sfcl.Command23 object at 0x05E00C00>) , Command count = 4483 ] 
14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBB70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F1E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F3F0>, <None>, <py_sfcl.Command23 object at 0x05E10FC0>) , Command count = 4484 ] 
14:45:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:33: Host Frequency set to 25000 KHz
14:45:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0FC60>, 0x0, True) , Command count = 4485 ] 
14:45:33: [GO18_globalSetVolt]### Host voltage value is set.
14:45:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5D20>, 0x0, False) , Command count = 4486 ] 
14:45:33: [GO18_globalSetVolt]### Host voltage value is set.
14:45:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4487 ] 
14:45:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4488 ] 
14:45:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4489 ] 
14:45:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04090>, <py_sfcl.CommandDataDefinition object at 0x05E00F60>) , Command count = 4490 ] 
14:45:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FD20>, <py_sfcl.CommandDataDefinition object at 0x05E008D0>) , Command count = 4491 ] 
14:45:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:33: [ SetCardRCA(0x1, 0xD555) , Command count = 4492 ] 
14:45:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:33: Host Frequency set to 25000 KHz
14:45:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:33: ####CSD Registe 2.0 Values####
14:45:33: CSD_STRUCTURE                                 :0x1
14:45:33: Reserv1                                       :0x0
14:45:33: Time Access 1 TAAC                            :0xe
14:45:33: Time Access 2 NSAC*100                        :0x0
14:45:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:33: Card Command Classess CCC                     :0x5b5
14:45:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:33: DSR(driver stage register)  DSR_IMP           :0x0
14:45:33: Reserv2                                       :0x0
14:45:33: Device Size C_SIZE                            :0xedc8
14:45:33: Reserv3                                       :0x0
14:45:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:33: Reserv4                                       :0x0
14:45:33: Write Speed Factor R2W_FACTOR                 :0x2
14:45:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:33: FILE_FORMAT_GRP                               :0x0
14:45:33: COPY flag                                     :0x1
14:45:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:33: File_Format                                   :0x0
14:45:33: CRC                                           :0x0
14:45:33: ####CSD Registe Values####  

14:45:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:33: [GetSCRRegisterEntry] Passed
14:45:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:33: Data_Status_After Erases          : 0
14:45:33: CPRM Security Support             : No Security
14:45:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:33: Spec. Version                     : Version 3.0X
14:45:33: Extended Security Support         : Extended_Security_Not_Supported
14:45:33: Command Support                   : COMMAND_SUPPORT
14:45:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07750>, <py_sfcl.CommandDataDefinition object at 0x05DF52A0>) , Command count = 4493 ] 
14:45:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E70>, <py_sfcl.CommandDataDefinition object at 0x05DFB9F0>) , Command count = 4494 ] 
14:45:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:33: [ SetBusWidth(0x4) , Command count = 4495 ] 
14:45:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFBD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4496 ] 
14:45:33: Protected Area Size 0x28000
14:45:33: Bus Width           2
14:45:33: Secure Mode         0
14:45:33: Speed  Class        4
14:45:33: Perf Move           0
14:45:33: Au Size             9
14:45:33: Erase Size          15
14:45:33: Erase Timeout       1
14:45:33: Erase offset        1
14:45:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4497 ] 
14:45:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:33: Host Frequency set to 100000 KHz
14:45:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:33: ####CSD Registe 2.0 Values####
14:45:33: CSD_STRUCTURE                                 :0x1
14:45:33: Reserv1                                       :0x0
14:45:33: Time Access 1 TAAC                            :0xe
14:45:33: Time Access 2 NSAC*100                        :0x0
14:45:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:33: Card Command Classess CCC                     :0x5b5
14:45:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:33: DSR(driver stage register)  DSR_IMP           :0x0
14:45:33: Reserv2                                       :0x0
14:45:33: Device Size C_SIZE                            :0xedc8
14:45:33: Reserv3                                       :0x0
14:45:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:33: Reserv4                                       :0x0
14:45:33: Write Speed Factor R2W_FACTOR                 :0x2
14:45:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:33: FILE_FORMAT_GRP                               :0x0
14:45:33: COPY flag                                     :0x1
14:45:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:33: File_Format                                   :0x0
14:45:33: CRC                                           :0x0
14:45:33: ####CSD Registe Values####  

14:45:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3F0>, <py_sfcl.CommandDataDefinition object at 0x05DFB150>) , Command count = 4498 ] 
14:45:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB40>, <py_sfcl.CommandDataDefinition object at 0x05E00750>) , Command count = 4499 ] 
14:45:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04690>, <py_sfcl.PySEnhancedCmdData object at 0x05E048D0>, <None>, <py_sfcl.Command23 object at 0x05E10F90>) , Command count = 4500 ] 
14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA007 to EndLba:0xA008 with Increment Pattern
14:45:33: [ WrLbaNoData(0xA007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4501 ] 
14:45:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA007 to EndLba:0xA008 with Increment Pattern 

14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 23
14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F4E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F0C0>, <None>, <py_sfcl.Command23 object at 0x05E002D0>) , Command count = 4502 ] 
14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E004E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00D80>, <None>, <py_sfcl.Command23 object at 0x05E10030>) , Command count = 4503 ] 
14:45:33: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:35: Host Frequency set to 25000 KHz
14:45:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00A50>, 0x0, True) , Command count = 4504 ] 
14:45:35: [GO18_globalSetVolt]### Host voltage value is set.
14:45:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00360>, 0x0, False) , Command count = 4505 ] 
14:45:35: [GO18_globalSetVolt]### Host voltage value is set.
14:45:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4506 ] 
14:45:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4507 ] 
14:45:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4508 ] 
14:45:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E078D0>) , Command count = 4509 ] 
14:45:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E045D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB480>) , Command count = 4510 ] 
14:45:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:36: [ SetCardRCA(0x1, 0xD555) , Command count = 4511 ] 
14:45:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:36: Host Frequency set to 25000 KHz
14:45:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:36: ####CSD Registe 2.0 Values####
14:45:36: CSD_STRUCTURE                                 :0x1
14:45:36: Reserv1                                       :0x0
14:45:36: Time Access 1 TAAC                            :0xe
14:45:36: Time Access 2 NSAC*100                        :0x0
14:45:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:36: Card Command Classess CCC                     :0x5b5
14:45:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:36: DSR(driver stage register)  DSR_IMP           :0x0
14:45:36: Reserv2                                       :0x0
14:45:36: Device Size C_SIZE                            :0xedc8
14:45:36: Reserv3                                       :0x0
14:45:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:36: Reserv4                                       :0x0
14:45:36: Write Speed Factor R2W_FACTOR                 :0x2
14:45:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:36: FILE_FORMAT_GRP                               :0x0
14:45:36: COPY flag                                     :0x1
14:45:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:36: File_Format                                   :0x0
14:45:36: CRC                                           :0x0
14:45:36: ####CSD Registe Values####  

14:45:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:36: [GetSCRRegisterEntry] Passed
14:45:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:36: Data_Status_After Erases          : 0
14:45:36: CPRM Security Support             : No Security
14:45:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:36: Spec. Version                     : Version 3.0X
14:45:36: Extended Security Support         : Extended_Security_Not_Supported
14:45:36: Command Support                   : COMMAND_SUPPORT
14:45:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py_sfcl.CommandDataDefinition object at 0x05DF5720>) , Command count = 4512 ] 
14:45:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D50>, <py_sfcl.CommandDataDefinition object at 0x05E007E0>) , Command count = 4513 ] 
14:45:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:36: [ SetBusWidth(0x4) , Command count = 4514 ] 
14:45:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4515 ] 
14:45:36: Protected Area Size 0x28000
14:45:36: Bus Width           2
14:45:36: Secure Mode         0
14:45:36: Speed  Class        4
14:45:36: Perf Move           0
14:45:36: Au Size             9
14:45:36: Erase Size          15
14:45:36: Erase Timeout       1
14:45:36: Erase offset        1
14:45:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4516 ] 
14:45:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:36: Host Frequency set to 100000 KHz
14:45:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:36: ####CSD Registe 2.0 Values####
14:45:36: CSD_STRUCTURE                                 :0x1
14:45:36: Reserv1                                       :0x0
14:45:36: Time Access 1 TAAC                            :0xe
14:45:36: Time Access 2 NSAC*100                        :0x0
14:45:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:36: Card Command Classess CCC                     :0x5b5
14:45:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:36: DSR(driver stage register)  DSR_IMP           :0x0
14:45:36: Reserv2                                       :0x0
14:45:36: Device Size C_SIZE                            :0xedc8
14:45:36: Reserv3                                       :0x0
14:45:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:36: Reserv4                                       :0x0
14:45:36: Write Speed Factor R2W_FACTOR                 :0x2
14:45:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:36: FILE_FORMAT_GRP                               :0x0
14:45:36: COPY flag                                     :0x1
14:45:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:36: File_Format                                   :0x0
14:45:36: CRC                                           :0x0
14:45:36: ####CSD Registe Values####  

14:45:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07DB0>, <py_sfcl.CommandDataDefinition object at 0x05E04AB0>) , Command count = 4517 ] 
14:45:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F7B0>, <py_sfcl.CommandDataDefinition object at 0x05E007E0>) , Command count = 4518 ] 
14:45:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0FA80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5B40>, <py_sfcl.PySEnhancedCmdData object at 0x05E046C0>, <None>, <py_sfcl.Command23 object at 0x05E10B40>) , Command count = 4519 ] 
14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xC007 to EndLba:0xC008 with Increment Pattern
14:45:36: [ WrLbaNoData(0xC007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4520 ] 
14:45:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xC007 to EndLba:0xC008 with Increment Pattern 

14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 22
14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBCF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00180>, <py_sfcl.PySEnhancedCmdData object at 0x05E041B0>, <None>, <py_sfcl.Command23 object at 0x05E002A0>) , Command count = 4521 ] 
14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB810>, <py_sfcl.PySEnhancedCmdData object at 0x05E10420>, <None>, <py_sfcl.Command23 object at 0x05E101B0>) , Command count = 4522 ] 
14:45:36: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:38: Host Frequency set to 25000 KHz
14:45:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E078A0>, 0x0, True) , Command count = 4523 ] 
14:45:38: [GO18_globalSetVolt]### Host voltage value is set.
14:45:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5A80>, 0x0, False) , Command count = 4524 ] 
14:45:38: [GO18_globalSetVolt]### Host voltage value is set.
14:45:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4525 ] 
14:45:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4526 ] 
14:45:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4527 ] 
14:45:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F930>, <py_sfcl.CommandDataDefinition object at 0x05E0F8A0>) , Command count = 4528 ] 
14:45:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FD50>, <py_sfcl.CommandDataDefinition object at 0x05E0FA20>) , Command count = 4529 ] 
14:45:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:38: [ SetCardRCA(0x1, 0xD555) , Command count = 4530 ] 
14:45:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:38: Host Frequency set to 25000 KHz
14:45:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:38: ####CSD Registe 2.0 Values####
14:45:38: CSD_STRUCTURE                                 :0x1
14:45:38: Reserv1                                       :0x0
14:45:38: Time Access 1 TAAC                            :0xe
14:45:38: Time Access 2 NSAC*100                        :0x0
14:45:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:38: Card Command Classess CCC                     :0x5b5
14:45:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:38: DSR(driver stage register)  DSR_IMP           :0x0
14:45:38: Reserv2                                       :0x0
14:45:38: Device Size C_SIZE                            :0xedc8
14:45:38: Reserv3                                       :0x0
14:45:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:38: Reserv4                                       :0x0
14:45:38: Write Speed Factor R2W_FACTOR                 :0x2
14:45:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:38: FILE_FORMAT_GRP                               :0x0
14:45:38: COPY flag                                     :0x1
14:45:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:38: File_Format                                   :0x0
14:45:38: CRC                                           :0x0
14:45:38: ####CSD Registe Values####  

14:45:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:38: [GetSCRRegisterEntry] Passed
14:45:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:38: Data_Status_After Erases          : 0
14:45:38: CPRM Security Support             : No Security
14:45:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:38: Spec. Version                     : Version 3.0X
14:45:38: Extended Security Support         : Extended_Security_Not_Supported
14:45:38: Command Support                   : COMMAND_SUPPORT
14:45:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E04870>) , Command count = 4531 ] 
14:45:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B360>, <py_sfcl.CommandDataDefinition object at 0x05E00C60>) , Command count = 4532 ] 
14:45:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:39: [ SetBusWidth(0x4) , Command count = 4533 ] 
14:45:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4534 ] 
14:45:39: Protected Area Size 0x28000
14:45:39: Bus Width           2
14:45:39: Secure Mode         0
14:45:39: Speed  Class        4
14:45:39: Perf Move           0
14:45:39: Au Size             9
14:45:39: Erase Size          15
14:45:39: Erase Timeout       1
14:45:39: Erase offset        1
14:45:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4535 ] 
14:45:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:39: Host Frequency set to 100000 KHz
14:45:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:39: ####CSD Registe 2.0 Values####
14:45:39: CSD_STRUCTURE                                 :0x1
14:45:39: Reserv1                                       :0x0
14:45:39: Time Access 1 TAAC                            :0xe
14:45:39: Time Access 2 NSAC*100                        :0x0
14:45:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:39: Card Command Classess CCC                     :0x5b5
14:45:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:39: DSR(driver stage register)  DSR_IMP           :0x0
14:45:39: Reserv2                                       :0x0
14:45:39: Device Size C_SIZE                            :0xedc8
14:45:39: Reserv3                                       :0x0
14:45:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:39: Reserv4                                       :0x0
14:45:39: Write Speed Factor R2W_FACTOR                 :0x2
14:45:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:39: FILE_FORMAT_GRP                               :0x0
14:45:39: COPY flag                                     :0x1
14:45:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:39: File_Format                                   :0x0
14:45:39: CRC                                           :0x0
14:45:39: ####CSD Registe Values####  

14:45:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00840>, <py_sfcl.CommandDataDefinition object at 0x05E00270>) , Command count = 4536 ] 
14:45:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F840>, <py_sfcl.CommandDataDefinition object at 0x05E045A0>) , Command count = 4537 ] 
14:45:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBBD0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00EA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04B40>, <None>, <py_sfcl.Command23 object at 0x05E04420>) , Command count = 4538 ] 
14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xE007 to EndLba:0xE008 with Increment Pattern
14:45:39: [ WrLbaNoData(0xE007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4539 ] 
14:45:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xE007 to EndLba:0xE008 with Increment Pattern 

14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 21
14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07F90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04990>, <py_sfcl.PySEnhancedCmdData object at 0x05E004B0>, <None>, <py_sfcl.Command23 object at 0x05E04120>) , Command count = 4540 ] 
14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04900>, <py_sfcl.PySEnhancedCmdData object at 0x05E00780>, <None>, <py_sfcl.Command23 object at 0x05E10C60>) , Command count = 4541 ] 
14:45:39: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:41: Host Frequency set to 25000 KHz
14:45:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07E10>, 0x0, True) , Command count = 4542 ] 
14:45:41: [GO18_globalSetVolt]### Host voltage value is set.
14:45:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04300>, 0x0, False) , Command count = 4543 ] 
14:45:41: [GO18_globalSetVolt]### Host voltage value is set.
14:45:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4544 ] 
14:45:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4545 ] 
14:45:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4546 ] 
14:45:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07450>, <py_sfcl.CommandDataDefinition object at 0x05E0FBD0>) , Command count = 4547 ] 
14:45:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FC30>, <py_sfcl.CommandDataDefinition object at 0x05E04780>) , Command count = 4548 ] 
14:45:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:41: [ SetCardRCA(0x1, 0xD555) , Command count = 4549 ] 
14:45:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:41: Host Frequency set to 25000 KHz
14:45:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:41: ####CSD Registe 2.0 Values####
14:45:41: CSD_STRUCTURE                                 :0x1
14:45:41: Reserv1                                       :0x0
14:45:41: Time Access 1 TAAC                            :0xe
14:45:41: Time Access 2 NSAC*100                        :0x0
14:45:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:41: Card Command Classess CCC                     :0x5b5
14:45:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:41: DSR(driver stage register)  DSR_IMP           :0x0
14:45:41: Reserv2                                       :0x0
14:45:41: Device Size C_SIZE                            :0xedc8
14:45:41: Reserv3                                       :0x0
14:45:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:41: Reserv4                                       :0x0
14:45:41: Write Speed Factor R2W_FACTOR                 :0x2
14:45:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:41: FILE_FORMAT_GRP                               :0x0
14:45:41: COPY flag                                     :0x1
14:45:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:41: File_Format                                   :0x0
14:45:41: CRC                                           :0x0
14:45:41: ####CSD Registe Values####  

14:45:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:41: [GetSCRRegisterEntry] Passed
14:45:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:41: Data_Status_After Erases          : 0
14:45:41: CPRM Security Support             : No Security
14:45:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:41: Spec. Version                     : Version 3.0X
14:45:41: Extended Security Support         : Extended_Security_Not_Supported
14:45:41: Command Support                   : COMMAND_SUPPORT
14:45:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F630>, <py_sfcl.CommandDataDefinition object at 0x05E04F60>) , Command count = 4550 ] 
14:45:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04ED0>, <py_sfcl.CommandDataDefinition object at 0x05DF5E10>) , Command count = 4551 ] 
14:45:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:41: [ SetBusWidth(0x4) , Command count = 4552 ] 
14:45:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E04720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4553 ] 
14:45:41: Protected Area Size 0x28000
14:45:41: Bus Width           2
14:45:41: Secure Mode         0
14:45:41: Speed  Class        4
14:45:41: Perf Move           0
14:45:41: Au Size             9
14:45:41: Erase Size          15
14:45:41: Erase Timeout       1
14:45:41: Erase offset        1
14:45:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4554 ] 
14:45:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:41: Host Frequency set to 100000 KHz
14:45:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:41: ####CSD Registe 2.0 Values####
14:45:41: CSD_STRUCTURE                                 :0x1
14:45:41: Reserv1                                       :0x0
14:45:41: Time Access 1 TAAC                            :0xe
14:45:41: Time Access 2 NSAC*100                        :0x0
14:45:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:41: Card Command Classess CCC                     :0x5b5
14:45:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:41: DSR(driver stage register)  DSR_IMP           :0x0
14:45:41: Reserv2                                       :0x0
14:45:41: Device Size C_SIZE                            :0xedc8
14:45:41: Reserv3                                       :0x0
14:45:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:41: Reserv4                                       :0x0
14:45:41: Write Speed Factor R2W_FACTOR                 :0x2
14:45:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:41: FILE_FORMAT_GRP                               :0x0
14:45:41: COPY flag                                     :0x1
14:45:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:41: File_Format                                   :0x0
14:45:41: CRC                                           :0x0
14:45:41: ####CSD Registe Values####  

14:45:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04060>, <py_sfcl.CommandDataDefinition object at 0x05E00240>) , Command count = 4555 ] 
14:45:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07960>, <py_sfcl.CommandDataDefinition object at 0x05E077E0>) , Command count = 4556 ] 
14:45:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07210>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B120>, <py_sfcl.PySEnhancedCmdData object at 0x05E00E10>, <None>, <py_sfcl.Command23 object at 0x05E003F0>) , Command count = 4557 ] 
14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x10007 to EndLba:0x10008 with Increment Pattern
14:45:41: [ WrLbaNoData(0x10007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4558 ] 
14:45:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x10007 to EndLba:0x10008 with Increment Pattern 

14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 20
14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04A50>, <py_sfcl.PySEnhancedCmdData object at 0x05E00B10>, <None>, <py_sfcl.Command23 object at 0x05E00F00>) , Command count = 4559 ] 
14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B060>, <py_sfcl.PySEnhancedCmdData object at 0x05E00FC0>, <None>, <py_sfcl.Command23 object at 0x05E00B70>) , Command count = 4560 ] 
14:45:41: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:44: Host Frequency set to 25000 KHz
14:45:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04CF0>, 0x0, True) , Command count = 4561 ] 
14:45:44: [GO18_globalSetVolt]### Host voltage value is set.
14:45:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04180>, 0x0, False) , Command count = 4562 ] 
14:45:44: [GO18_globalSetVolt]### Host voltage value is set.
14:45:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4563 ] 
14:45:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4564 ] 
14:45:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4565 ] 
14:45:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2D0>, <py_sfcl.CommandDataDefinition object at 0x05E07930>) , Command count = 4566 ] 
14:45:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04660>, <py_sfcl.CommandDataDefinition object at 0x05E00C90>) , Command count = 4567 ] 
14:45:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4568 ] 
14:45:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:44: Host Frequency set to 25000 KHz
14:45:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:44: ####CSD Registe 2.0 Values####
14:45:44: CSD_STRUCTURE                                 :0x1
14:45:44: Reserv1                                       :0x0
14:45:44: Time Access 1 TAAC                            :0xe
14:45:44: Time Access 2 NSAC*100                        :0x0
14:45:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:44: Card Command Classess CCC                     :0x5b5
14:45:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:44: DSR(driver stage register)  DSR_IMP           :0x0
14:45:44: Reserv2                                       :0x0
14:45:44: Device Size C_SIZE                            :0xedc8
14:45:44: Reserv3                                       :0x0
14:45:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:44: Reserv4                                       :0x0
14:45:44: Write Speed Factor R2W_FACTOR                 :0x2
14:45:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:44: FILE_FORMAT_GRP                               :0x0
14:45:44: COPY flag                                     :0x1
14:45:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:44: File_Format                                   :0x0
14:45:44: CRC                                           :0x0
14:45:44: ####CSD Registe Values####  

14:45:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:44: [GetSCRRegisterEntry] Passed
14:45:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:44: Data_Status_After Erases          : 0
14:45:44: CPRM Security Support             : No Security
14:45:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:44: Spec. Version                     : Version 3.0X
14:45:44: Extended Security Support         : Extended_Security_Not_Supported
14:45:44: Command Support                   : COMMAND_SUPPORT
14:45:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5BD0>) , Command count = 4569 ] 
14:45:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04F00>, <py_sfcl.CommandDataDefinition object at 0x05E00330>) , Command count = 4570 ] 
14:45:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:44: [ SetBusWidth(0x4) , Command count = 4571 ] 
14:45:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4572 ] 
14:45:44: Protected Area Size 0x28000
14:45:44: Bus Width           2
14:45:44: Secure Mode         0
14:45:44: Speed  Class        4
14:45:44: Perf Move           0
14:45:44: Au Size             9
14:45:44: Erase Size          15
14:45:44: Erase Timeout       1
14:45:44: Erase offset        1
14:45:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4573 ] 
14:45:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:44: Host Frequency set to 100000 KHz
14:45:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:44: ####CSD Registe 2.0 Values####
14:45:44: CSD_STRUCTURE                                 :0x1
14:45:44: Reserv1                                       :0x0
14:45:44: Time Access 1 TAAC                            :0xe
14:45:44: Time Access 2 NSAC*100                        :0x0
14:45:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:44: Card Command Classess CCC                     :0x5b5
14:45:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:44: DSR(driver stage register)  DSR_IMP           :0x0
14:45:44: Reserv2                                       :0x0
14:45:44: Device Size C_SIZE                            :0xedc8
14:45:44: Reserv3                                       :0x0
14:45:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:44: Reserv4                                       :0x0
14:45:44: Write Speed Factor R2W_FACTOR                 :0x2
14:45:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:44: FILE_FORMAT_GRP                               :0x0
14:45:44: COPY flag                                     :0x1
14:45:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:44: File_Format                                   :0x0
14:45:44: CRC                                           :0x0
14:45:44: ####CSD Registe Values####  

14:45:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04A80>, <py_sfcl.CommandDataDefinition object at 0x05E00720>) , Command count = 4574 ] 
14:45:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B70>, <py_sfcl.CommandDataDefinition object at 0x05E00CC0>) , Command count = 4575 ] 
14:45:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00210>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FEA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BA20>, <None>, <py_sfcl.Command23 object at 0x05E10960>) , Command count = 4576 ] 
14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x12007 to EndLba:0x12008 with Increment Pattern
14:45:44: [ WrLbaNoData(0x12007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4577 ] 
14:45:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x12007 to EndLba:0x12008 with Increment Pattern 

14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 19
14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04BA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10ED0>, <py_sfcl.PySEnhancedCmdData object at 0x05E104B0>, <None>, <py_sfcl.Command23 object at 0x05E0BAE0>) , Command count = 4578 ] 
14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10B70>, <py_sfcl.PySEnhancedCmdData object at 0x05E10240>, <None>, <py_sfcl.Command23 object at 0x05E10C90>) , Command count = 4579 ] 
14:45:44: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:46: Host Frequency set to 25000 KHz
14:45:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00DE0>, 0x0, True) , Command count = 4580 ] 
14:45:46: [GO18_globalSetVolt]### Host voltage value is set.
14:45:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9F30>, 0x0, False) , Command count = 4581 ] 
14:45:46: [GO18_globalSetVolt]### Host voltage value is set.
14:45:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4582 ] 
14:45:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4583 ] 
14:45:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4584 ] 
14:45:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A50>, <py_sfcl.CommandDataDefinition object at 0x05E0BF60>) , Command count = 4585 ] 
14:45:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB990>, <py_sfcl.CommandDataDefinition object at 0x05E071B0>) , Command count = 4586 ] 
14:45:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:47: [ SetCardRCA(0x1, 0xD555) , Command count = 4587 ] 
14:45:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:47: Host Frequency set to 25000 KHz
14:45:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:47: ####CSD Registe 2.0 Values####
14:45:47: CSD_STRUCTURE                                 :0x1
14:45:47: Reserv1                                       :0x0
14:45:47: Time Access 1 TAAC                            :0xe
14:45:47: Time Access 2 NSAC*100                        :0x0
14:45:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:47: Card Command Classess CCC                     :0x5b5
14:45:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:47: DSR(driver stage register)  DSR_IMP           :0x0
14:45:47: Reserv2                                       :0x0
14:45:47: Device Size C_SIZE                            :0xedc8
14:45:47: Reserv3                                       :0x0
14:45:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:47: Reserv4                                       :0x0
14:45:47: Write Speed Factor R2W_FACTOR                 :0x2
14:45:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:47: FILE_FORMAT_GRP                               :0x0
14:45:47: COPY flag                                     :0x1
14:45:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:47: File_Format                                   :0x0
14:45:47: CRC                                           :0x0
14:45:47: ####CSD Registe Values####  

14:45:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:47: [GetSCRRegisterEntry] Passed
14:45:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:47: Data_Status_After Erases          : 0
14:45:47: CPRM Security Support             : No Security
14:45:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:47: Spec. Version                     : Version 3.0X
14:45:47: Extended Security Support         : Extended_Security_Not_Supported
14:45:47: Command Support                   : COMMAND_SUPPORT
14:45:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 4588 ] 
14:45:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB2D0>, <py_sfcl.CommandDataDefinition object at 0x05E00CF0>) , Command count = 4589 ] 
14:45:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:47: [ SetBusWidth(0x4) , Command count = 4590 ] 
14:45:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4591 ] 
14:45:47: Protected Area Size 0x28000
14:45:47: Bus Width           2
14:45:47: Secure Mode         0
14:45:47: Speed  Class        4
14:45:47: Perf Move           0
14:45:47: Au Size             9
14:45:47: Erase Size          15
14:45:47: Erase Timeout       1
14:45:47: Erase offset        1
14:45:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4592 ] 
14:45:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:47: Host Frequency set to 100000 KHz
14:45:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:47: ####CSD Registe 2.0 Values####
14:45:47: CSD_STRUCTURE                                 :0x1
14:45:47: Reserv1                                       :0x0
14:45:47: Time Access 1 TAAC                            :0xe
14:45:47: Time Access 2 NSAC*100                        :0x0
14:45:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:47: Card Command Classess CCC                     :0x5b5
14:45:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:47: DSR(driver stage register)  DSR_IMP           :0x0
14:45:47: Reserv2                                       :0x0
14:45:47: Device Size C_SIZE                            :0xedc8
14:45:47: Reserv3                                       :0x0
14:45:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:47: Reserv4                                       :0x0
14:45:47: Write Speed Factor R2W_FACTOR                 :0x2
14:45:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:47: FILE_FORMAT_GRP                               :0x0
14:45:47: COPY flag                                     :0x1
14:45:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:47: File_Format                                   :0x0
14:45:47: CRC                                           :0x0
14:45:47: ####CSD Registe Values####  

14:45:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07C00>, <py_sfcl.CommandDataDefinition object at 0x05E07A80>) , Command count = 4593 ] 
14:45:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E04FC0>) , Command count = 4594 ] 
14:45:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE97E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04030>, <py_sfcl.PySEnhancedCmdData object at 0x05E04E10>, <None>, <py_sfcl.Command23 object at 0x05E04F30>) , Command count = 4595 ] 
14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x14007 to EndLba:0x14008 with Increment Pattern
14:45:47: [ WrLbaNoData(0x14007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4596 ] 
14:45:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x14007 to EndLba:0x14008 with Increment Pattern 

14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 18
14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07840>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B8A0>, <None>, <py_sfcl.Command23 object at 0x05E04C60>) , Command count = 4597 ] 
14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB8D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10900>, <py_sfcl.PySEnhancedCmdData object at 0x05E107B0>, <None>, <py_sfcl.Command23 object at 0x05E0B150>) , Command count = 4598 ] 
14:45:47: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:49: Host Frequency set to 25000 KHz
14:45:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07990>, 0x0, True) , Command count = 4599 ] 
14:45:49: [GO18_globalSetVolt]### Host voltage value is set.
14:45:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526F1E0>, 0x0, False) , Command count = 4600 ] 
14:45:49: [GO18_globalSetVolt]### Host voltage value is set.
14:45:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4601 ] 
14:45:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4602 ] 
14:45:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4603 ] 
14:45:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07B10>, <py_sfcl.CommandDataDefinition object at 0x05E076F0>) , Command count = 4604 ] 
14:45:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04D20>, <py_sfcl.CommandDataDefinition object at 0x05E072D0>) , Command count = 4605 ] 
14:45:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:49: [ SetCardRCA(0x1, 0xD555) , Command count = 4606 ] 
14:45:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:49: Host Frequency set to 25000 KHz
14:45:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:49: ####CSD Registe 2.0 Values####
14:45:49: CSD_STRUCTURE                                 :0x1
14:45:49: Reserv1                                       :0x0
14:45:49: Time Access 1 TAAC                            :0xe
14:45:49: Time Access 2 NSAC*100                        :0x0
14:45:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:49: Card Command Classess CCC                     :0x5b5
14:45:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:49: DSR(driver stage register)  DSR_IMP           :0x0
14:45:49: Reserv2                                       :0x0
14:45:49: Device Size C_SIZE                            :0xedc8
14:45:49: Reserv3                                       :0x0
14:45:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:49: Reserv4                                       :0x0
14:45:49: Write Speed Factor R2W_FACTOR                 :0x2
14:45:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:49: FILE_FORMAT_GRP                               :0x0
14:45:49: COPY flag                                     :0x1
14:45:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:49: File_Format                                   :0x0
14:45:49: CRC                                           :0x0
14:45:49: ####CSD Registe Values####  

14:45:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:49: [GetSCRRegisterEntry] Passed
14:45:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:49: Data_Status_After Erases          : 0
14:45:49: CPRM Security Support             : No Security
14:45:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:49: Spec. Version                     : Version 3.0X
14:45:49: Extended Security Support         : Extended_Security_Not_Supported
14:45:49: Command Support                   : COMMAND_SUPPORT
14:45:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E077B0>, <py_sfcl.CommandDataDefinition object at 0x05E0F240>) , Command count = 4607 ] 
14:45:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A80>, <py_sfcl.CommandDataDefinition object at 0x05E0F870>) , Command count = 4608 ] 
14:45:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:49: [ SetBusWidth(0x4) , Command count = 4609 ] 
14:45:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4610 ] 
14:45:49: Protected Area Size 0x28000
14:45:49: Bus Width           2
14:45:49: Secure Mode         0
14:45:49: Speed  Class        4
14:45:49: Perf Move           0
14:45:49: Au Size             9
14:45:49: Erase Size          15
14:45:49: Erase Timeout       1
14:45:49: Erase offset        1
14:45:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4611 ] 
14:45:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:50: Host Frequency set to 100000 KHz
14:45:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:50: ####CSD Registe 2.0 Values####
14:45:50: CSD_STRUCTURE                                 :0x1
14:45:50: Reserv1                                       :0x0
14:45:50: Time Access 1 TAAC                            :0xe
14:45:50: Time Access 2 NSAC*100                        :0x0
14:45:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:50: Card Command Classess CCC                     :0x5b5
14:45:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:50: DSR(driver stage register)  DSR_IMP           :0x0
14:45:50: Reserv2                                       :0x0
14:45:50: Device Size C_SIZE                            :0xedc8
14:45:50: Reserv3                                       :0x0
14:45:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:50: Reserv4                                       :0x0
14:45:50: Write Speed Factor R2W_FACTOR                 :0x2
14:45:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:50: FILE_FORMAT_GRP                               :0x0
14:45:50: COPY flag                                     :0x1
14:45:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:50: File_Format                                   :0x0
14:45:50: CRC                                           :0x0
14:45:50: ####CSD Registe Values####  

14:45:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07DE0>, <py_sfcl.CommandDataDefinition object at 0x05E0BD80>) , Command count = 4612 ] 
14:45:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0BD20>) , Command count = 4613 ] 
14:45:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0527B930>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B4B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B990>, <None>, <py_sfcl.Command23 object at 0x05E0B660>) , Command count = 4614 ] 
14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x16007 to EndLba:0x16008 with Increment Pattern
14:45:50: [ WrLbaNoData(0x16007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4615 ] 
14:45:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x16007 to EndLba:0x16008 with Increment Pattern 

14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 17
14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07510>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0526FC30>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B720>, <None>, <py_sfcl.Command23 object at 0x05E0B0C0>) , Command count = 4616 ] 
14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052177E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E106C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E10A80>, <None>, <py_sfcl.Command23 object at 0x05E0B390>) , Command count = 4617 ] 
14:45:50: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:52: Host Frequency set to 25000 KHz
14:45:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB3C0>, 0x0, True) , Command count = 4618 ] 
14:45:52: [GO18_globalSetVolt]### Host voltage value is set.
14:45:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBE10>, 0x0, False) , Command count = 4619 ] 
14:45:52: [GO18_globalSetVolt]### Host voltage value is set.
14:45:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4620 ] 
14:45:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4621 ] 
14:45:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4622 ] 
14:45:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F2A0>, <py_sfcl.CommandDataDefinition object at 0x05E0F720>) , Command count = 4623 ] 
14:45:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5990>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 4624 ] 
14:45:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:52: [ SetCardRCA(0x1, 0xD555) , Command count = 4625 ] 
14:45:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:52: Host Frequency set to 25000 KHz
14:45:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:52: ####CSD Registe 2.0 Values####
14:45:52: CSD_STRUCTURE                                 :0x1
14:45:52: Reserv1                                       :0x0
14:45:52: Time Access 1 TAAC                            :0xe
14:45:52: Time Access 2 NSAC*100                        :0x0
14:45:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:52: Card Command Classess CCC                     :0x5b5
14:45:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:52: DSR(driver stage register)  DSR_IMP           :0x0
14:45:52: Reserv2                                       :0x0
14:45:52: Device Size C_SIZE                            :0xedc8
14:45:52: Reserv3                                       :0x0
14:45:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:52: Reserv4                                       :0x0
14:45:52: Write Speed Factor R2W_FACTOR                 :0x2
14:45:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:52: FILE_FORMAT_GRP                               :0x0
14:45:52: COPY flag                                     :0x1
14:45:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:52: File_Format                                   :0x0
14:45:52: CRC                                           :0x0
14:45:52: ####CSD Registe Values####  

14:45:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:52: [GetSCRRegisterEntry] Passed
14:45:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:52: Data_Status_After Erases          : 0
14:45:52: CPRM Security Support             : No Security
14:45:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:52: Spec. Version                     : Version 3.0X
14:45:52: Extended Security Support         : Extended_Security_Not_Supported
14:45:52: Command Support                   : COMMAND_SUPPORT
14:45:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B780>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 4626 ] 
14:45:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF50C0>, <py_sfcl.CommandDataDefinition object at 0x05E0B630>) , Command count = 4627 ] 
14:45:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:52: [ SetBusWidth(0x4) , Command count = 4628 ] 
14:45:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0B840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4629 ] 
14:45:52: Protected Area Size 0x28000
14:45:52: Bus Width           2
14:45:52: Secure Mode         0
14:45:52: Speed  Class        4
14:45:52: Perf Move           0
14:45:52: Au Size             9
14:45:52: Erase Size          15
14:45:52: Erase Timeout       1
14:45:52: Erase offset        1
14:45:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4630 ] 
14:45:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:52: Host Frequency set to 100000 KHz
14:45:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:52: ####CSD Registe 2.0 Values####
14:45:52: CSD_STRUCTURE                                 :0x1
14:45:52: Reserv1                                       :0x0
14:45:52: Time Access 1 TAAC                            :0xe
14:45:52: Time Access 2 NSAC*100                        :0x0
14:45:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:52: Card Command Classess CCC                     :0x5b5
14:45:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:52: DSR(driver stage register)  DSR_IMP           :0x0
14:45:52: Reserv2                                       :0x0
14:45:52: Device Size C_SIZE                            :0xedc8
14:45:52: Reserv3                                       :0x0
14:45:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:52: Reserv4                                       :0x0
14:45:52: Write Speed Factor R2W_FACTOR                 :0x2
14:45:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:52: FILE_FORMAT_GRP                               :0x0
14:45:52: COPY flag                                     :0x1
14:45:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:52: File_Format                                   :0x0
14:45:52: CRC                                           :0x0
14:45:52: ####CSD Registe Values####  

14:45:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526DED0>, <py_sfcl.CommandDataDefinition object at 0x05E0B7B0>) , Command count = 4631 ] 
14:45:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB10>) , Command count = 4632 ] 
14:45:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FEA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07330>, <py_sfcl.PySEnhancedCmdData object at 0x05E07A20>, <None>, <py_sfcl.Command23 object at 0x05E07630>) , Command count = 4633 ] 
14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x18007 to EndLba:0x18008 with Increment Pattern
14:45:52: [ WrLbaNoData(0x18007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4634 ] 
14:45:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x18007 to EndLba:0x18008 with Increment Pattern 

14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 16
14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052819C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B570>, <py_sfcl.PySEnhancedCmdData object at 0x05E10840>, <None>, <py_sfcl.Command23 object at 0x05E073C0>) , Command count = 4635 ] 
14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526FF60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07150>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5510>, <None>, <py_sfcl.Command23 object at 0x05E10870>) , Command count = 4636 ] 
14:45:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:54: Host Frequency set to 25000 KHz
14:45:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C60>, 0x0, True) , Command count = 4637 ] 
14:45:54: [GO18_globalSetVolt]### Host voltage value is set.
14:45:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B930>, 0x0, False) , Command count = 4638 ] 
14:45:55: [GO18_globalSetVolt]### Host voltage value is set.
14:45:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4639 ] 
14:45:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4640 ] 
14:45:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4641 ] 
14:45:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF2D0>, <py_sfcl.CommandDataDefinition object at 0x05CEF060>) , Command count = 4642 ] 
14:45:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9ED0>, <py_sfcl.CommandDataDefinition object at 0x05E0BFC0>) , Command count = 4643 ] 
14:45:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4644 ] 
14:45:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:55: Host Frequency set to 25000 KHz
14:45:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:55: ####CSD Registe 2.0 Values####
14:45:55: CSD_STRUCTURE                                 :0x1
14:45:55: Reserv1                                       :0x0
14:45:55: Time Access 1 TAAC                            :0xe
14:45:55: Time Access 2 NSAC*100                        :0x0
14:45:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:55: Card Command Classess CCC                     :0x5b5
14:45:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:55: DSR(driver stage register)  DSR_IMP           :0x0
14:45:55: Reserv2                                       :0x0
14:45:55: Device Size C_SIZE                            :0xedc8
14:45:55: Reserv3                                       :0x0
14:45:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:55: Reserv4                                       :0x0
14:45:55: Write Speed Factor R2W_FACTOR                 :0x2
14:45:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:55: FILE_FORMAT_GRP                               :0x0
14:45:55: COPY flag                                     :0x1
14:45:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:55: File_Format                                   :0x0
14:45:55: CRC                                           :0x0
14:45:55: ####CSD Registe Values####  

14:45:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:55: [GetSCRRegisterEntry] Passed
14:45:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:55: Data_Status_After Erases          : 0
14:45:55: CPRM Security Support             : No Security
14:45:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:55: Spec. Version                     : Version 3.0X
14:45:55: Extended Security Support         : Extended_Security_Not_Supported
14:45:55: Command Support                   : COMMAND_SUPPORT
14:45:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0F6C0>) , Command count = 4645 ] 
14:45:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052819F0>, <py_sfcl.CommandDataDefinition object at 0x05E0B3F0>) , Command count = 4646 ] 
14:45:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:55: [ SetBusWidth(0x4) , Command count = 4647 ] 
14:45:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4648 ] 
14:45:55: Protected Area Size 0x28000
14:45:55: Bus Width           2
14:45:55: Secure Mode         0
14:45:55: Speed  Class        4
14:45:55: Perf Move           0
14:45:55: Au Size             9
14:45:55: Erase Size          15
14:45:55: Erase Timeout       1
14:45:55: Erase offset        1
14:45:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4649 ] 
14:45:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:55: Host Frequency set to 100000 KHz
14:45:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:55: ####CSD Registe 2.0 Values####
14:45:55: CSD_STRUCTURE                                 :0x1
14:45:55: Reserv1                                       :0x0
14:45:55: Time Access 1 TAAC                            :0xe
14:45:55: Time Access 2 NSAC*100                        :0x0
14:45:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:55: Card Command Classess CCC                     :0x5b5
14:45:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:55: DSR(driver stage register)  DSR_IMP           :0x0
14:45:55: Reserv2                                       :0x0
14:45:55: Device Size C_SIZE                            :0xedc8
14:45:55: Reserv3                                       :0x0
14:45:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:55: Reserv4                                       :0x0
14:45:55: Write Speed Factor R2W_FACTOR                 :0x2
14:45:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:55: FILE_FORMAT_GRP                               :0x0
14:45:55: COPY flag                                     :0x1
14:45:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:55: File_Format                                   :0x0
14:45:55: CRC                                           :0x0
14:45:55: ####CSD Registe Values####  

14:45:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00630>, <py_sfcl.CommandDataDefinition object at 0x05E07390>) , Command count = 4650 ] 
14:45:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5150>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 4651 ] 
14:45:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0527BFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BDB0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B5A0>, <None>, <py_sfcl.Command23 object at 0x05E0FE40>) , Command count = 4652 ] 
14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1A007 to EndLba:0x1A008 with Increment Pattern
14:45:55: [ WrLbaNoData(0x1A007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4653 ] 
14:45:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1A007 to EndLba:0x1A008 with Increment Pattern 

14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 15
14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0525B4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BF90>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FED0>, <None>, <py_sfcl.Command23 object at 0x05E0FB10>) , Command count = 4654 ] 
14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281F90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E044B0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBF00>, <None>, <py_sfcl.Command23 object at 0x05E10870>) , Command count = 4655 ] 
14:45:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:57: Host Frequency set to 25000 KHz
14:45:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281C30>, 0x0, True) , Command count = 4656 ] 
14:45:57: [GO18_globalSetVolt]### Host voltage value is set.
14:45:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEF030>, 0x0, False) , Command count = 4657 ] 
14:45:57: [GO18_globalSetVolt]### Host voltage value is set.
14:45:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4658 ] 
14:45:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4659 ] 
14:45:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4660 ] 
14:45:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07540>, <py_sfcl.CommandDataDefinition object at 0x05DFBC30>) , Command count = 4661 ] 
14:45:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04540>, <py_sfcl.CommandDataDefinition object at 0x05E0BCC0>) , Command count = 4662 ] 
14:45:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:57: [ SetCardRCA(0x1, 0xD555) , Command count = 4663 ] 
14:45:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:58: Host Frequency set to 25000 KHz
14:45:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:58: ####CSD Registe 2.0 Values####
14:45:58: CSD_STRUCTURE                                 :0x1
14:45:58: Reserv1                                       :0x0
14:45:58: Time Access 1 TAAC                            :0xe
14:45:58: Time Access 2 NSAC*100                        :0x0
14:45:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:58: Card Command Classess CCC                     :0x5b5
14:45:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:58: DSR(driver stage register)  DSR_IMP           :0x0
14:45:58: Reserv2                                       :0x0
14:45:58: Device Size C_SIZE                            :0xedc8
14:45:58: Reserv3                                       :0x0
14:45:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:58: Reserv4                                       :0x0
14:45:58: Write Speed Factor R2W_FACTOR                 :0x2
14:45:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:58: FILE_FORMAT_GRP                               :0x0
14:45:58: COPY flag                                     :0x1
14:45:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:58: File_Format                                   :0x0
14:45:58: CRC                                           :0x0
14:45:58: ####CSD Registe Values####  

14:45:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:58: [GetSCRRegisterEntry] Passed
14:45:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:58: Data_Status_After Erases          : 0
14:45:58: CPRM Security Support             : No Security
14:45:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:58: Spec. Version                     : Version 3.0X
14:45:58: Extended Security Support         : Extended_Security_Not_Supported
14:45:58: Command Support                   : COMMAND_SUPPORT
14:45:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF58A0>, <py_sfcl.CommandDataDefinition object at 0x05E0BBA0>) , Command count = 4664 ] 
14:45:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF4E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BDE0>) , Command count = 4665 ] 
14:45:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:58: [ SetBusWidth(0x4) , Command count = 4666 ] 
14:45:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DE9A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4667 ] 
14:45:58: Protected Area Size 0x28000
14:45:58: Bus Width           2
14:45:58: Secure Mode         0
14:45:58: Speed  Class        4
14:45:58: Perf Move           0
14:45:58: Au Size             9
14:45:58: Erase Size          15
14:45:58: Erase Timeout       1
14:45:58: Erase offset        1
14:45:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4668 ] 
14:45:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:58: Host Frequency set to 100000 KHz
14:45:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:58: ####CSD Registe 2.0 Values####
14:45:58: CSD_STRUCTURE                                 :0x1
14:45:58: Reserv1                                       :0x0
14:45:58: Time Access 1 TAAC                            :0xe
14:45:58: Time Access 2 NSAC*100                        :0x0
14:45:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:58: Card Command Classess CCC                     :0x5b5
14:45:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:58: DSR(driver stage register)  DSR_IMP           :0x0
14:45:58: Reserv2                                       :0x0
14:45:58: Device Size C_SIZE                            :0xedc8
14:45:58: Reserv3                                       :0x0
14:45:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:58: Reserv4                                       :0x0
14:45:58: Write Speed Factor R2W_FACTOR                 :0x2
14:45:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:58: FILE_FORMAT_GRP                               :0x0
14:45:58: COPY flag                                     :0x1
14:45:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:58: File_Format                                   :0x0
14:45:58: CRC                                           :0x0
14:45:58: ####CSD Registe Values####  

14:45:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9A20>, <py_sfcl.CommandDataDefinition object at 0x05E07B40>) , Command count = 4669 ] 
14:45:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E073F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F960>) , Command count = 4670 ] 
14:45:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBC90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBDE0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5F60>, <None>, <py_sfcl.Command23 object at 0x05E0F9F0>) , Command count = 4671 ] 
14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1C007 to EndLba:0x1C008 with Increment Pattern
14:45:59: [ WrLbaNoData(0x1C007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4672 ] 
14:45:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1C007 to EndLba:0x1C008 with Increment Pattern 

14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 14
14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF50F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5D50>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FB70>, <None>, <py_sfcl.Command23 object at 0x05E07240>) , Command count = 4673 ] 
14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:45:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF54E0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B6C0>, <None>, <py_sfcl.Command23 object at 0x05E0FD80>) , Command count = 4674 ] 
14:45:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:45:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:01: Host Frequency set to 25000 KHz
14:46:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9E70>, 0x0, True) , Command count = 4675 ] 
14:46:01: [GO18_globalSetVolt]### Host voltage value is set.
14:46:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x05144030>, 0x0, False) , Command count = 4676 ] 
14:46:01: [GO18_globalSetVolt]### Host voltage value is set.
14:46:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4677 ] 
14:46:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4678 ] 
14:46:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4679 ] 
14:46:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BC00>, <py_sfcl.CommandDataDefinition object at 0x05DFB840>) , Command count = 4680 ] 
14:46:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F210>, <py_sfcl.CommandDataDefinition object at 0x05DFB510>) , Command count = 4681 ] 
14:46:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:01: [ SetCardRCA(0x1, 0xD555) , Command count = 4682 ] 
14:46:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:02: Host Frequency set to 25000 KHz
14:46:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:02: ####CSD Registe 2.0 Values####
14:46:02: CSD_STRUCTURE                                 :0x1
14:46:02: Reserv1                                       :0x0
14:46:02: Time Access 1 TAAC                            :0xe
14:46:02: Time Access 2 NSAC*100                        :0x0
14:46:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:02: Card Command Classess CCC                     :0x5b5
14:46:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:02: DSR(driver stage register)  DSR_IMP           :0x0
14:46:02: Reserv2                                       :0x0
14:46:02: Device Size C_SIZE                            :0xedc8
14:46:02: Reserv3                                       :0x0
14:46:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:02: Reserv4                                       :0x0
14:46:02: Write Speed Factor R2W_FACTOR                 :0x2
14:46:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:02: FILE_FORMAT_GRP                               :0x0
14:46:02: COPY flag                                     :0x1
14:46:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:02: File_Format                                   :0x0
14:46:02: CRC                                           :0x0
14:46:02: ####CSD Registe Values####  

14:46:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:02: [GetSCRRegisterEntry] Passed
14:46:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:02: Data_Status_After Erases          : 0
14:46:02: CPRM Security Support             : No Security
14:46:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:02: Spec. Version                     : Version 3.0X
14:46:02: Extended Security Support         : Extended_Security_Not_Supported
14:46:02: Command Support                   : COMMAND_SUPPORT
14:46:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB600>, <py_sfcl.CommandDataDefinition object at 0x05E07BD0>) , Command count = 4683 ] 
14:46:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281FC0>, <py_sfcl.CommandDataDefinition object at 0x05281C90>) , Command count = 4684 ] 
14:46:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:02: [ SetBusWidth(0x4) , Command count = 4685 ] 
14:46:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BCF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4686 ] 
14:46:02: Protected Area Size 0x28000
14:46:02: Bus Width           2
14:46:02: Secure Mode         0
14:46:02: Speed  Class        4
14:46:02: Perf Move           0
14:46:02: Au Size             9
14:46:02: Erase Size          15
14:46:02: Erase Timeout       1
14:46:02: Erase offset        1
14:46:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4687 ] 
14:46:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:02: Host Frequency set to 100000 KHz
14:46:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:02: ####CSD Registe 2.0 Values####
14:46:02: CSD_STRUCTURE                                 :0x1
14:46:02: Reserv1                                       :0x0
14:46:02: Time Access 1 TAAC                            :0xe
14:46:02: Time Access 2 NSAC*100                        :0x0
14:46:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:02: Card Command Classess CCC                     :0x5b5
14:46:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:02: DSR(driver stage register)  DSR_IMP           :0x0
14:46:02: Reserv2                                       :0x0
14:46:02: Device Size C_SIZE                            :0xedc8
14:46:02: Reserv3                                       :0x0
14:46:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:02: Reserv4                                       :0x0
14:46:02: Write Speed Factor R2W_FACTOR                 :0x2
14:46:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:02: FILE_FORMAT_GRP                               :0x0
14:46:02: COPY flag                                     :0x1
14:46:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:02: File_Format                                   :0x0
14:46:02: CRC                                           :0x0
14:46:02: ####CSD Registe Values####  

14:46:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py_sfcl.CommandDataDefinition object at 0x05E0FDE0>) , Command count = 4688 ] 
14:46:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBD80>, <py_sfcl.CommandDataDefinition object at 0x05DF5DB0>) , Command count = 4689 ] 
14:46:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:02: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04C90>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBFC0>, <None>, <py_sfcl.Command23 object at 0x05E0F8D0>) , Command count = 4690 ] 
14:46:02: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x1E007 to EndLba:0x1E008 with Increment Pattern
14:46:02: [ WrLbaNoData(0x1E007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4691 ] 
14:46:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x1E007 to EndLba:0x1E008 with Increment Pattern 

14:46:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 13
14:46:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5750>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F420>, <None>, <py_sfcl.Command23 object at 0x05DE97B0>) , Command count = 4692 ] 
14:46:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5780>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F360>, <None>, <py_sfcl.Command23 object at 0x05E0BBD0>) , Command count = 4693 ] 
14:46:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:05: Host Frequency set to 25000 KHz
14:46:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0F990>, 0x0, True) , Command count = 4694 ] 
14:46:05: [GO18_globalSetVolt]### Host voltage value is set.
14:46:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBC60>, 0x0, False) , Command count = 4695 ] 
14:46:05: [GO18_globalSetVolt]### Host voltage value is set.
14:46:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4696 ] 
14:46:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4697 ] 
14:46:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4698 ] 
14:46:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00F90>, <py_sfcl.CommandDataDefinition object at 0x05DFB7E0>) , Command count = 4699 ] 
14:46:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04360>, <py_sfcl.CommandDataDefinition object at 0x05E04480>) , Command count = 4700 ] 
14:46:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:05: [ SetCardRCA(0x1, 0xD555) , Command count = 4701 ] 
14:46:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:06: Host Frequency set to 25000 KHz
14:46:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:06: ####CSD Registe 2.0 Values####
14:46:06: CSD_STRUCTURE                                 :0x1
14:46:06: Reserv1                                       :0x0
14:46:06: Time Access 1 TAAC                            :0xe
14:46:06: Time Access 2 NSAC*100                        :0x0
14:46:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:06: Card Command Classess CCC                     :0x5b5
14:46:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:06: DSR(driver stage register)  DSR_IMP           :0x0
14:46:06: Reserv2                                       :0x0
14:46:06: Device Size C_SIZE                            :0xedc8
14:46:06: Reserv3                                       :0x0
14:46:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:06: Reserv4                                       :0x0
14:46:06: Write Speed Factor R2W_FACTOR                 :0x2
14:46:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:06: FILE_FORMAT_GRP                               :0x0
14:46:06: COPY flag                                     :0x1
14:46:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:06: File_Format                                   :0x0
14:46:06: CRC                                           :0x0
14:46:06: ####CSD Registe Values####  

14:46:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:06: [GetSCRRegisterEntry] Passed
14:46:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:06: Data_Status_After Erases          : 0
14:46:06: CPRM Security Support             : No Security
14:46:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:06: Spec. Version                     : Version 3.0X
14:46:06: Extended Security Support         : Extended_Security_Not_Supported
14:46:06: Command Support                   : COMMAND_SUPPORT
14:46:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05E07570>) , Command count = 4702 ] 
14:46:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5690>, <py_sfcl.CommandDataDefinition object at 0x05DFB720>) , Command count = 4703 ] 
14:46:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:06: [ SetBusWidth(0x4) , Command count = 4704 ] 
14:46:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4705 ] 
14:46:06: Protected Area Size 0x28000
14:46:06: Bus Width           2
14:46:06: Secure Mode         0
14:46:06: Speed  Class        4
14:46:06: Perf Move           0
14:46:06: Au Size             9
14:46:06: Erase Size          15
14:46:06: Erase Timeout       1
14:46:06: Erase offset        1
14:46:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4706 ] 
14:46:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:06: Host Frequency set to 100000 KHz
14:46:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:06: ####CSD Registe 2.0 Values####
14:46:06: CSD_STRUCTURE                                 :0x1
14:46:06: Reserv1                                       :0x0
14:46:06: Time Access 1 TAAC                            :0xe
14:46:06: Time Access 2 NSAC*100                        :0x0
14:46:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:06: Card Command Classess CCC                     :0x5b5
14:46:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:06: DSR(driver stage register)  DSR_IMP           :0x0
14:46:06: Reserv2                                       :0x0
14:46:06: Device Size C_SIZE                            :0xedc8
14:46:06: Reserv3                                       :0x0
14:46:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:06: Reserv4                                       :0x0
14:46:06: Write Speed Factor R2W_FACTOR                 :0x2
14:46:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:06: FILE_FORMAT_GRP                               :0x0
14:46:06: COPY flag                                     :0x1
14:46:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:06: File_Format                                   :0x0
14:46:06: CRC                                           :0x0
14:46:06: ####CSD Registe Values####  

14:46:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E001B0>, <py_sfcl.CommandDataDefinition object at 0x05E0FC90>) , Command count = 4707 ] 
14:46:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E005A0>, <py_sfcl.CommandDataDefinition object at 0x05DFB720>) , Command count = 4708 ] 
14:46:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:06: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBB10>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB930>, <py_sfcl.PySEnhancedCmdData object at 0x05E072A0>, <None>, <py_sfcl.Command23 object at 0x05E07ED0>) , Command count = 4709 ] 
14:46:06: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x20007 to EndLba:0x20008 with Increment Pattern
14:46:06: [ WrLbaNoData(0x20007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4710 ] 
14:46:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x20007 to EndLba:0x20008 with Increment Pattern 

14:46:06: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 12
14:46:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F030>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F510>, <py_sfcl.PySEnhancedCmdData object at 0x0514AE70>, <None>, <py_sfcl.Command23 object at 0x05E07090>) , Command count = 4711 ] 
14:46:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEFB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F060>, <py_sfcl.PySEnhancedCmdData object at 0x05E07F30>, <None>, <py_sfcl.Command23 object at 0x05E10DB0>) , Command count = 4712 ] 
14:46:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:09: Host Frequency set to 25000 KHz
14:46:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9B10>, 0x0, True) , Command count = 4713 ] 
14:46:09: [GO18_globalSetVolt]### Host voltage value is set.
14:46:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBF60>, 0x0, False) , Command count = 4714 ] 
14:46:09: [GO18_globalSetVolt]### Host voltage value is set.
14:46:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4715 ] 
14:46:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4716 ] 
14:46:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4717 ] 
14:46:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB4E0>, <py_sfcl.CommandDataDefinition object at 0x05DFB330>) , Command count = 4718 ] 
14:46:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A20>, <py_sfcl.CommandDataDefinition object at 0x05E00660>) , Command count = 4719 ] 
14:46:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:09: [ SetCardRCA(0x1, 0xD555) , Command count = 4720 ] 
14:46:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:09: Host Frequency set to 25000 KHz
14:46:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:09: ####CSD Registe 2.0 Values####
14:46:09: CSD_STRUCTURE                                 :0x1
14:46:09: Reserv1                                       :0x0
14:46:09: Time Access 1 TAAC                            :0xe
14:46:09: Time Access 2 NSAC*100                        :0x0
14:46:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:09: Card Command Classess CCC                     :0x5b5
14:46:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:09: DSR(driver stage register)  DSR_IMP           :0x0
14:46:09: Reserv2                                       :0x0
14:46:09: Device Size C_SIZE                            :0xedc8
14:46:09: Reserv3                                       :0x0
14:46:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:09: Reserv4                                       :0x0
14:46:09: Write Speed Factor R2W_FACTOR                 :0x2
14:46:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:09: FILE_FORMAT_GRP                               :0x0
14:46:09: COPY flag                                     :0x1
14:46:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:09: File_Format                                   :0x0
14:46:09: CRC                                           :0x0
14:46:09: ####CSD Registe Values####  

14:46:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:09: [GetSCRRegisterEntry] Passed
14:46:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:09: Data_Status_After Erases          : 0
14:46:09: CPRM Security Support             : No Security
14:46:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:09: Spec. Version                     : Version 3.0X
14:46:09: Extended Security Support         : Extended_Security_Not_Supported
14:46:09: Command Support                   : COMMAND_SUPPORT
14:46:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04390>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 4721 ] 
14:46:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5F30>, <py_sfcl.CommandDataDefinition object at 0x05DFBEA0>) , Command count = 4722 ] 
14:46:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:10: [ SetBusWidth(0x4) , Command count = 4723 ] 
14:46:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E046F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4724 ] 
14:46:10: Protected Area Size 0x28000
14:46:10: Bus Width           2
14:46:10: Secure Mode         0
14:46:10: Speed  Class        4
14:46:10: Perf Move           0
14:46:10: Au Size             9
14:46:10: Erase Size          15
14:46:10: Erase Timeout       1
14:46:10: Erase offset        1
14:46:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4725 ] 
14:46:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:10: Host Frequency set to 100000 KHz
14:46:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:10: ####CSD Registe 2.0 Values####
14:46:10: CSD_STRUCTURE                                 :0x1
14:46:10: Reserv1                                       :0x0
14:46:10: Time Access 1 TAAC                            :0xe
14:46:10: Time Access 2 NSAC*100                        :0x0
14:46:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:10: Card Command Classess CCC                     :0x5b5
14:46:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:10: DSR(driver stage register)  DSR_IMP           :0x0
14:46:10: Reserv2                                       :0x0
14:46:10: Device Size C_SIZE                            :0xedc8
14:46:10: Reserv3                                       :0x0
14:46:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:10: Reserv4                                       :0x0
14:46:10: Write Speed Factor R2W_FACTOR                 :0x2
14:46:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:10: FILE_FORMAT_GRP                               :0x0
14:46:10: COPY flag                                     :0x1
14:46:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:10: File_Format                                   :0x0
14:46:10: CRC                                           :0x0
14:46:10: ####CSD Registe Values####  

14:46:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E006F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F150>) , Command count = 4726 ] 
14:46:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB750>) , Command count = 4727 ] 
14:46:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:10: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00450>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00AB0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB030>, <None>, <py_sfcl.Command23 object at 0x05E07AE0>) , Command count = 4728 ] 
14:46:10: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x22007 to EndLba:0x22008 with Increment Pattern
14:46:10: [ WrLbaNoData(0x22007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4729 ] 
14:46:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x22007 to EndLba:0x22008 with Increment Pattern 

14:46:10: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 11
14:46:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07D80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBA50>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB1E0>, <None>, <py_sfcl.Command23 object at 0x05E07CC0>) , Command count = 4730 ] 
14:46:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB1B0>, <py_sfcl.PySEnhancedCmdData object at 0x05CEF7E0>, <None>, <py_sfcl.Command23 object at 0x05E105D0>) , Command count = 4731 ] 
14:46:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:13: Host Frequency set to 25000 KHz
14:46:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00090>, 0x0, True) , Command count = 4732 ] 
14:46:13: [GO18_globalSetVolt]### Host voltage value is set.
14:46:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBBA0>, 0x0, False) , Command count = 4733 ] 
14:46:13: [GO18_globalSetVolt]### Host voltage value is set.
14:46:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4734 ] 
14:46:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4735 ] 
14:46:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4736 ] 
14:46:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00B40>, <py_sfcl.CommandDataDefinition object at 0x05E00510>) , Command count = 4737 ] 
14:46:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07810>, <py_sfcl.CommandDataDefinition object at 0x05E0FC60>) , Command count = 4738 ] 
14:46:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:13: [ SetCardRCA(0x1, 0xD555) , Command count = 4739 ] 
14:46:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:13: Host Frequency set to 25000 KHz
14:46:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:13: ####CSD Registe 2.0 Values####
14:46:13: CSD_STRUCTURE                                 :0x1
14:46:13: Reserv1                                       :0x0
14:46:13: Time Access 1 TAAC                            :0xe
14:46:13: Time Access 2 NSAC*100                        :0x0
14:46:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:13: Card Command Classess CCC                     :0x5b5
14:46:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:13: DSR(driver stage register)  DSR_IMP           :0x0
14:46:13: Reserv2                                       :0x0
14:46:13: Device Size C_SIZE                            :0xedc8
14:46:13: Reserv3                                       :0x0
14:46:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:13: Reserv4                                       :0x0
14:46:13: Write Speed Factor R2W_FACTOR                 :0x2
14:46:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:13: FILE_FORMAT_GRP                               :0x0
14:46:13: COPY flag                                     :0x1
14:46:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:13: File_Format                                   :0x0
14:46:13: CRC                                           :0x0
14:46:13: ####CSD Registe Values####  

14:46:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:13: [GetSCRRegisterEntry] Passed
14:46:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:13: Data_Status_After Erases          : 0
14:46:13: CPRM Security Support             : No Security
14:46:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:13: Spec. Version                     : Version 3.0X
14:46:13: Extended Security Support         : Extended_Security_Not_Supported
14:46:13: Command Support                   : COMMAND_SUPPORT
14:46:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04150>, <py_sfcl.CommandDataDefinition object at 0x05E0F660>) , Command count = 4740 ] 
14:46:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07030>, <py_sfcl.CommandDataDefinition object at 0x05E040C0>) , Command count = 4741 ] 
14:46:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:13: [ SetBusWidth(0x4) , Command count = 4742 ] 
14:46:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4743 ] 
14:46:13: Protected Area Size 0x28000
14:46:13: Bus Width           2
14:46:13: Secure Mode         0
14:46:13: Speed  Class        4
14:46:13: Perf Move           0
14:46:14: Au Size             9
14:46:14: Erase Size          15
14:46:14: Erase Timeout       1
14:46:14: Erase offset        1
14:46:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4744 ] 
14:46:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:14: Host Frequency set to 100000 KHz
14:46:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:14: ####CSD Registe 2.0 Values####
14:46:14: CSD_STRUCTURE                                 :0x1
14:46:14: Reserv1                                       :0x0
14:46:14: Time Access 1 TAAC                            :0xe
14:46:14: Time Access 2 NSAC*100                        :0x0
14:46:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:14: Card Command Classess CCC                     :0x5b5
14:46:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:14: DSR(driver stage register)  DSR_IMP           :0x0
14:46:14: Reserv2                                       :0x0
14:46:14: Device Size C_SIZE                            :0xedc8
14:46:14: Reserv3                                       :0x0
14:46:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:14: Reserv4                                       :0x0
14:46:14: Write Speed Factor R2W_FACTOR                 :0x2
14:46:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:14: FILE_FORMAT_GRP                               :0x0
14:46:14: COPY flag                                     :0x1
14:46:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:14: File_Format                                   :0x0
14:46:14: CRC                                           :0x0
14:46:14: ####CSD Registe Values####  

14:46:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07750>, <py_sfcl.CommandDataDefinition object at 0x05DF52A0>) , Command count = 4745 ] 
14:46:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04210>, <py_sfcl.CommandDataDefinition object at 0x05E008D0>) , Command count = 4746 ] 
14:46:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:14: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07870>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00990>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FD20>, <None>, <py_sfcl.Command23 object at 0x05E10570>) , Command count = 4747 ] 
14:46:14: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x24007 to EndLba:0x24008 with Increment Pattern
14:46:14: [ WrLbaNoData(0x24007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4748 ] 
14:46:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x24007 to EndLba:0x24008 with Increment Pattern 

14:46:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 10
14:46:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04E70>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB9F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E000C0>, <None>, <py_sfcl.Command23 object at 0x05E0FF90>) , Command count = 4749 ] 
14:46:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB3F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB150>, <py_sfcl.PySEnhancedCmdData object at 0x05E00390>, <None>, <py_sfcl.Command23 object at 0x05E101E0>) , Command count = 4750 ] 
14:46:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:17: Host Frequency set to 25000 KHz
14:46:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBB70>, 0x0, True) , Command count = 4751 ] 
14:46:17: [GO18_globalSetVolt]### Host voltage value is set.
14:46:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00A20>, 0x0, False) , Command count = 4752 ] 
14:46:17: [GO18_globalSetVolt]### Host voltage value is set.
14:46:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4753 ] 
14:46:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4754 ] 
14:46:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4755 ] 
14:46:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBE70>, <py_sfcl.CommandDataDefinition object at 0x05E00A50>) , Command count = 4756 ] 
14:46:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00030>, <py_sfcl.CommandDataDefinition object at 0x05E0F0C0>) , Command count = 4757 ] 
14:46:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:17: [ SetCardRCA(0x1, 0xD555) , Command count = 4758 ] 
14:46:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:17: Host Frequency set to 25000 KHz
14:46:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:17: ####CSD Registe 2.0 Values####
14:46:17: CSD_STRUCTURE                                 :0x1
14:46:17: Reserv1                                       :0x0
14:46:17: Time Access 1 TAAC                            :0xe
14:46:17: Time Access 2 NSAC*100                        :0x0
14:46:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:17: Card Command Classess CCC                     :0x5b5
14:46:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:17: DSR(driver stage register)  DSR_IMP           :0x0
14:46:17: Reserv2                                       :0x0
14:46:17: Device Size C_SIZE                            :0xedc8
14:46:17: Reserv3                                       :0x0
14:46:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:17: Reserv4                                       :0x0
14:46:17: Write Speed Factor R2W_FACTOR                 :0x2
14:46:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:17: FILE_FORMAT_GRP                               :0x0
14:46:17: COPY flag                                     :0x1
14:46:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:17: File_Format                                   :0x0
14:46:17: CRC                                           :0x0
14:46:17: ####CSD Registe Values####  

14:46:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:17: [GetSCRRegisterEntry] Passed
14:46:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:17: Data_Status_After Erases          : 0
14:46:17: CPRM Security Support             : No Security
14:46:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:17: Spec. Version                     : Version 3.0X
14:46:17: Extended Security Support         : Extended_Security_Not_Supported
14:46:17: Command Support                   : COMMAND_SUPPORT
14:46:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB630>, <py_sfcl.CommandDataDefinition object at 0x05E04210>) , Command count = 4759 ] 
14:46:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB40>, <py_sfcl.CommandDataDefinition object at 0x05E07120>) , Command count = 4760 ] 
14:46:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:17: [ SetBusWidth(0x4) , Command count = 4761 ] 
14:46:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4762 ] 
14:46:17: Protected Area Size 0x28000
14:46:17: Bus Width           2
14:46:17: Secure Mode         0
14:46:17: Speed  Class        4
14:46:17: Perf Move           0
14:46:17: Au Size             9
14:46:17: Erase Size          15
14:46:17: Erase Timeout       1
14:46:17: Erase offset        1
14:46:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4763 ] 
14:46:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:18: Host Frequency set to 100000 KHz
14:46:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:18: ####CSD Registe 2.0 Values####
14:46:18: CSD_STRUCTURE                                 :0x1
14:46:18: Reserv1                                       :0x0
14:46:18: Time Access 1 TAAC                            :0xe
14:46:18: Time Access 2 NSAC*100                        :0x0
14:46:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:18: Card Command Classess CCC                     :0x5b5
14:46:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:18: DSR(driver stage register)  DSR_IMP           :0x0
14:46:18: Reserv2                                       :0x0
14:46:18: Device Size C_SIZE                            :0xedc8
14:46:18: Reserv3                                       :0x0
14:46:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:18: Reserv4                                       :0x0
14:46:18: Write Speed Factor R2W_FACTOR                 :0x2
14:46:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:18: FILE_FORMAT_GRP                               :0x0
14:46:18: COPY flag                                     :0x1
14:46:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:18: File_Format                                   :0x0
14:46:18: CRC                                           :0x0
14:46:18: ####CSD Registe Values####  

14:46:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py_sfcl.CommandDataDefinition object at 0x05DF5720>) , Command count = 4764 ] 
14:46:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05E00900>) , Command count = 4765 ] 
14:46:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:18: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F480>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E045D0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04690>, <None>, <py_sfcl.Command23 object at 0x05E10180>) , Command count = 4766 ] 
14:46:18: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x26007 to EndLba:0x26008 with Increment Pattern
14:46:18: [ WrLbaNoData(0x26007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4767 ] 
14:46:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x26007 to EndLba:0x26008 with Increment Pattern 

14:46:19: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 9
14:46:19: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB6F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB270>, <py_sfcl.PySEnhancedCmdData object at 0x05E00D50>, <None>, <py_sfcl.Command23 object at 0x05E10780>) , Command count = 4768 ] 
14:46:19: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:19: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04AB0>, <py_sfcl.PySEnhancedCmdData object at 0x05E001E0>, <None>, <py_sfcl.Command23 object at 0x05E10150>) , Command count = 4769 ] 
14:46:19: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:21: Host Frequency set to 25000 KHz
14:46:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5CC0>, 0x0, True) , Command count = 4770 ] 
14:46:21: [GO18_globalSetVolt]### Host voltage value is set.
14:46:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5C90>, 0x0, False) , Command count = 4771 ] 
14:46:21: [GO18_globalSetVolt]### Host voltage value is set.
14:46:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4772 ] 
14:46:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4773 ] 
14:46:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4774 ] 
14:46:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E078A0>, <py_sfcl.CommandDataDefinition object at 0x05E00570>) , Command count = 4775 ] 
14:46:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00690>, <py_sfcl.CommandDataDefinition object at 0x05E002A0>) , Command count = 4776 ] 
14:46:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:21: [ SetCardRCA(0x1, 0xD555) , Command count = 4777 ] 
14:46:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:21: Host Frequency set to 25000 KHz
14:46:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:21: ####CSD Registe 2.0 Values####
14:46:21: CSD_STRUCTURE                                 :0x1
14:46:21: Reserv1                                       :0x0
14:46:21: Time Access 1 TAAC                            :0xe
14:46:21: Time Access 2 NSAC*100                        :0x0
14:46:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:21: Card Command Classess CCC                     :0x5b5
14:46:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:21: DSR(driver stage register)  DSR_IMP           :0x0
14:46:21: Reserv2                                       :0x0
14:46:21: Device Size C_SIZE                            :0xedc8
14:46:21: Reserv3                                       :0x0
14:46:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:21: Reserv4                                       :0x0
14:46:21: Write Speed Factor R2W_FACTOR                 :0x2
14:46:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:21: FILE_FORMAT_GRP                               :0x0
14:46:21: COPY flag                                     :0x1
14:46:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:21: File_Format                                   :0x0
14:46:21: CRC                                           :0x0
14:46:21: ####CSD Registe Values####  

14:46:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:21: [GetSCRRegisterEntry] Passed
14:46:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:21: Data_Status_After Erases          : 0
14:46:21: CPRM Security Support             : No Security
14:46:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:21: Spec. Version                     : Version 3.0X
14:46:21: Extended Security Support         : Extended_Security_Not_Supported
14:46:21: Command Support                   : COMMAND_SUPPORT
14:46:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00480>, <py_sfcl.CommandDataDefinition object at 0x05E046C0>) , Command count = 4778 ] 
14:46:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E007E0>, <py_sfcl.CommandDataDefinition object at 0x05E0F7B0>) , Command count = 4779 ] 
14:46:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:21: [ SetBusWidth(0x4) , Command count = 4780 ] 
14:46:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4781 ] 
14:46:21: Protected Area Size 0x28000
14:46:21: Bus Width           2
14:46:21: Secure Mode         0
14:46:21: Speed  Class        4
14:46:21: Perf Move           0
14:46:21: Au Size             9
14:46:21: Erase Size          15
14:46:21: Erase Timeout       1
14:46:21: Erase offset        1
14:46:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4782 ] 
14:46:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:22: Host Frequency set to 100000 KHz
14:46:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:22: ####CSD Registe 2.0 Values####
14:46:22: CSD_STRUCTURE                                 :0x1
14:46:22: Reserv1                                       :0x0
14:46:22: Time Access 1 TAAC                            :0xe
14:46:22: Time Access 2 NSAC*100                        :0x0
14:46:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:22: Card Command Classess CCC                     :0x5b5
14:46:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:22: DSR(driver stage register)  DSR_IMP           :0x0
14:46:22: Reserv2                                       :0x0
14:46:22: Device Size C_SIZE                            :0xedc8
14:46:22: Reserv3                                       :0x0
14:46:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:22: Reserv4                                       :0x0
14:46:22: Write Speed Factor R2W_FACTOR                 :0x2
14:46:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:22: FILE_FORMAT_GRP                               :0x0
14:46:22: COPY flag                                     :0x1
14:46:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:22: File_Format                                   :0x0
14:46:22: CRC                                           :0x0
14:46:22: ####CSD Registe Values####  

14:46:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB6C0>, <py_sfcl.CommandDataDefinition object at 0x05E0FD50>) , Command count = 4783 ] 
14:46:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CF0>, <py_sfcl.CommandDataDefinition object at 0x05E04870>) , Command count = 4784 ] 
14:46:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F750>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E047B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E04240>, <None>, <py_sfcl.Command23 object at 0x05E10F90>) , Command count = 4785 ] 
14:46:22: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x28007 to EndLba:0x28008 with Increment Pattern
14:46:22: [ WrLbaNoData(0x28007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4786 ] 
14:46:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x28007 to EndLba:0x28008 with Increment Pattern 

14:46:23: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 8
14:46:23: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00C60>, <py_sfcl.PySEnhancedCmdData object at 0x05E04BD0>, <None>, <py_sfcl.Command23 object at 0x05E10090>) , Command count = 4787 ] 
14:46:23: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:23: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00270>, <py_sfcl.PySEnhancedCmdData object at 0x05E049C0>, <None>, <py_sfcl.Command23 object at 0x05E10210>) , Command count = 4788 ] 
14:46:23: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:25: Host Frequency set to 25000 KHz
14:46:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB660>, 0x0, True) , Command count = 4789 ] 
14:46:25: [GO18_globalSetVolt]### Host voltage value is set.
14:46:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E00F30>, 0x0, False) , Command count = 4790 ] 
14:46:25: [GO18_globalSetVolt]### Host voltage value is set.
14:46:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4791 ] 
14:46:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4792 ] 
14:46:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4793 ] 
14:46:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07E10>, <py_sfcl.CommandDataDefinition object at 0x05E004B0>) , Command count = 4794 ] 
14:46:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04750>, <py_sfcl.CommandDataDefinition object at 0x05E04A20>) , Command count = 4795 ] 
14:46:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:25: [ SetCardRCA(0x1, 0xD555) , Command count = 4796 ] 
14:46:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:25: Host Frequency set to 25000 KHz
14:46:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:25: ####CSD Registe 2.0 Values####
14:46:25: CSD_STRUCTURE                                 :0x1
14:46:25: Reserv1                                       :0x0
14:46:25: Time Access 1 TAAC                            :0xe
14:46:25: Time Access 2 NSAC*100                        :0x0
14:46:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:25: Card Command Classess CCC                     :0x5b5
14:46:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:25: DSR(driver stage register)  DSR_IMP           :0x0
14:46:25: Reserv2                                       :0x0
14:46:25: Device Size C_SIZE                            :0xedc8
14:46:25: Reserv3                                       :0x0
14:46:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:25: Reserv4                                       :0x0
14:46:25: Write Speed Factor R2W_FACTOR                 :0x2
14:46:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:25: FILE_FORMAT_GRP                               :0x0
14:46:25: COPY flag                                     :0x1
14:46:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:25: File_Format                                   :0x0
14:46:25: CRC                                           :0x0
14:46:25: ####CSD Registe Values####  

14:46:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:25: [GetSCRRegisterEntry] Passed
14:46:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:25: Data_Status_After Erases          : 0
14:46:25: CPRM Security Support             : No Security
14:46:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:25: Spec. Version                     : Version 3.0X
14:46:25: Extended Security Support         : Extended_Security_Not_Supported
14:46:25: Command Support                   : COMMAND_SUPPORT
14:46:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 4797 ] 
14:46:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F840>, <py_sfcl.CommandDataDefinition object at 0x05E007B0>) , Command count = 4798 ] 
14:46:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:25: [ SetBusWidth(0x4) , Command count = 4799 ] 
14:46:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4800 ] 
14:46:25: Protected Area Size 0x28000
14:46:25: Bus Width           2
14:46:25: Secure Mode         0
14:46:25: Speed  Class        4
14:46:25: Perf Move           0
14:46:25: Au Size             9
14:46:25: Erase Size          15
14:46:25: Erase Timeout       1
14:46:25: Erase offset        1
14:46:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4801 ] 
14:46:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:26: Host Frequency set to 100000 KHz
14:46:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:26: ####CSD Registe 2.0 Values####
14:46:26: CSD_STRUCTURE                                 :0x1
14:46:26: Reserv1                                       :0x0
14:46:26: Time Access 1 TAAC                            :0xe
14:46:26: Time Access 2 NSAC*100                        :0x0
14:46:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:26: Card Command Classess CCC                     :0x5b5
14:46:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:26: DSR(driver stage register)  DSR_IMP           :0x0
14:46:26: Reserv2                                       :0x0
14:46:26: Device Size C_SIZE                            :0xedc8
14:46:26: Reserv3                                       :0x0
14:46:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:26: Reserv4                                       :0x0
14:46:26: Write Speed Factor R2W_FACTOR                 :0x2
14:46:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:26: FILE_FORMAT_GRP                               :0x0
14:46:26: COPY flag                                     :0x1
14:46:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:26: File_Format                                   :0x0
14:46:26: CRC                                           :0x0
14:46:26: ####CSD Registe Values####  

14:46:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F630>, <py_sfcl.CommandDataDefinition object at 0x05E0FC30>) , Command count = 4802 ] 
14:46:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00DB0>, <py_sfcl.CommandDataDefinition object at 0x05E049F0>) , Command count = 4803 ] 
14:46:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:26: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B450>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00C30>, <py_sfcl.PySEnhancedCmdData object at 0x05E04780>, <None>, <py_sfcl.Command23 object at 0x05E04420>) , Command count = 4804 ] 
14:46:26: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2A007 to EndLba:0x2A008 with Increment Pattern
14:46:26: [ WrLbaNoData(0x2A007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4805 ] 
14:46:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2A007 to EndLba:0x2A008 with Increment Pattern 

14:46:26: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 7
14:46:27: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04ED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF5E10>, <py_sfcl.PySEnhancedCmdData object at 0x05E006C0>, <None>, <py_sfcl.Command23 object at 0x05E04B40>) , Command count = 4806 ] 
14:46:27: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:27: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B810>, <py_sfcl.PySEnhancedCmdData object at 0x05E00240>, <None>, <py_sfcl.Command23 object at 0x05E10D20>) , Command count = 4807 ] 
14:46:27: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:29: Host Frequency set to 25000 KHz
14:46:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07720>, 0x0, True) , Command count = 4808 ] 
14:46:29: [GO18_globalSetVolt]### Host voltage value is set.
14:46:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB2A0>, 0x0, False) , Command count = 4809 ] 
14:46:29: [GO18_globalSetVolt]### Host voltage value is set.
14:46:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4810 ] 
14:46:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4811 ] 
14:46:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4812 ] 
14:46:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CF0>, <py_sfcl.CommandDataDefinition object at 0x05E04A50>) , Command count = 4813 ] 
14:46:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04E40>, <py_sfcl.CommandDataDefinition object at 0x05E00B10>) , Command count = 4814 ] 
14:46:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:29: [ SetCardRCA(0x1, 0xD555) , Command count = 4815 ] 
14:46:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:29: Host Frequency set to 25000 KHz
14:46:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:29: ####CSD Registe 2.0 Values####
14:46:29: CSD_STRUCTURE                                 :0x1
14:46:29: Reserv1                                       :0x0
14:46:29: Time Access 1 TAAC                            :0xe
14:46:29: Time Access 2 NSAC*100                        :0x0
14:46:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:29: Card Command Classess CCC                     :0x5b5
14:46:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:29: DSR(driver stage register)  DSR_IMP           :0x0
14:46:29: Reserv2                                       :0x0
14:46:29: Device Size C_SIZE                            :0xedc8
14:46:29: Reserv3                                       :0x0
14:46:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:29: Reserv4                                       :0x0
14:46:29: Write Speed Factor R2W_FACTOR                 :0x2
14:46:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:29: FILE_FORMAT_GRP                               :0x0
14:46:29: COPY flag                                     :0x1
14:46:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:29: File_Format                                   :0x0
14:46:29: CRC                                           :0x0
14:46:29: ####CSD Registe Values####  

14:46:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:29: [GetSCRRegisterEntry] Passed
14:46:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:29: Data_Status_After Erases          : 0
14:46:29: CPRM Security Support             : No Security
14:46:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:29: Spec. Version                     : Version 3.0X
14:46:29: Extended Security Support         : Extended_Security_Not_Supported
14:46:29: Command Support                   : COMMAND_SUPPORT
14:46:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04DB0>, <py_sfcl.CommandDataDefinition object at 0x05E00E10>) , Command count = 4816 ] 
14:46:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07960>, <py_sfcl.CommandDataDefinition object at 0x05E077E0>) , Command count = 4817 ] 
14:46:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:29: [ SetBusWidth(0x4) , Command count = 4818 ] 
14:46:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4819 ] 
14:46:29: Protected Area Size 0x28000
14:46:29: Bus Width           2
14:46:29: Secure Mode         0
14:46:29: Speed  Class        4
14:46:29: Perf Move           0
14:46:29: Au Size             9
14:46:29: Erase Size          15
14:46:29: Erase Timeout       1
14:46:29: Erase offset        1
14:46:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4820 ] 
14:46:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:30: Host Frequency set to 100000 KHz
14:46:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:30: ####CSD Registe 2.0 Values####
14:46:30: CSD_STRUCTURE                                 :0x1
14:46:30: Reserv1                                       :0x0
14:46:30: Time Access 1 TAAC                            :0xe
14:46:30: Time Access 2 NSAC*100                        :0x0
14:46:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:30: Card Command Classess CCC                     :0x5b5
14:46:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:30: DSR(driver stage register)  DSR_IMP           :0x0
14:46:30: Reserv2                                       :0x0
14:46:30: Device Size C_SIZE                            :0xedc8
14:46:30: Reserv3                                       :0x0
14:46:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:30: Reserv4                                       :0x0
14:46:30: Write Speed Factor R2W_FACTOR                 :0x2
14:46:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:30: FILE_FORMAT_GRP                               :0x0
14:46:30: COPY flag                                     :0x1
14:46:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:30: File_Format                                   :0x0
14:46:30: CRC                                           :0x0
14:46:30: ####CSD Registe Values####  

14:46:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F1B0>, <py_sfcl.CommandDataDefinition object at 0x05DF5BD0>) , Command count = 4821 ] 
14:46:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05262420>, <py_sfcl.CommandDataDefinition object at 0x05E0B180>) , Command count = 4822 ] 
14:46:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00E40>, <py_sfcl.PySEnhancedCmdData object at 0x05E00C90>, <None>, <py_sfcl.Command23 object at 0x05E10BD0>) , Command count = 4823 ] 
14:46:30: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2C007 to EndLba:0x2C008 with Increment Pattern
14:46:30: [ WrLbaNoData(0x2C007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4824 ] 
14:46:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2C007 to EndLba:0x2C008 with Increment Pattern 

14:46:31: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 6
14:46:31: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04F00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00330>, <py_sfcl.PySEnhancedCmdData object at 0x05E00870>, <None>, <py_sfcl.Command23 object at 0x05E009F0>) , Command count = 4825 ] 
14:46:31: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:31: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E04A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00720>, <py_sfcl.PySEnhancedCmdData object at 0x05E003C0>, <None>, <py_sfcl.Command23 object at 0x05E10420>) , Command count = 4826 ] 
14:46:31: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:33: Host Frequency set to 25000 KHz
14:46:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04270>, 0x0, True) , Command count = 4827 ] 
14:46:33: [GO18_globalSetVolt]### Host voltage value is set.
14:46:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E079C0>, 0x0, False) , Command count = 4828 ] 
14:46:33: [GO18_globalSetVolt]### Host voltage value is set.
14:46:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4829 ] 
14:46:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4830 ] 
14:46:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4831 ] 
14:46:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04630>, <py_sfcl.CommandDataDefinition object at 0x05DFBA80>) , Command count = 4832 ] 
14:46:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B960>, <py_sfcl.CommandDataDefinition object at 0x05E0BA20>) , Command count = 4833 ] 
14:46:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:33: [ SetCardRCA(0x1, 0xD555) , Command count = 4834 ] 
14:46:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:33: Host Frequency set to 25000 KHz
14:46:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:33: ####CSD Registe 2.0 Values####
14:46:33: CSD_STRUCTURE                                 :0x1
14:46:33: Reserv1                                       :0x0
14:46:33: Time Access 1 TAAC                            :0xe
14:46:33: Time Access 2 NSAC*100                        :0x0
14:46:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:33: Card Command Classess CCC                     :0x5b5
14:46:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:33: DSR(driver stage register)  DSR_IMP           :0x0
14:46:33: Reserv2                                       :0x0
14:46:33: Device Size C_SIZE                            :0xedc8
14:46:33: Reserv3                                       :0x0
14:46:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:33: Reserv4                                       :0x0
14:46:33: Write Speed Factor R2W_FACTOR                 :0x2
14:46:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:33: FILE_FORMAT_GRP                               :0x0
14:46:33: COPY flag                                     :0x1
14:46:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:33: File_Format                                   :0x0
14:46:33: CRC                                           :0x0
14:46:33: ####CSD Registe Values####  

14:46:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:33: [GetSCRRegisterEntry] Passed
14:46:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:33: Data_Status_After Erases          : 0
14:46:33: CPRM Security Support             : No Security
14:46:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:33: Spec. Version                     : Version 3.0X
14:46:33: Extended Security Support         : Extended_Security_Not_Supported
14:46:33: Command Support                   : COMMAND_SUPPORT
14:46:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00BA0>, <py_sfcl.CommandDataDefinition object at 0x05E00210>) , Command count = 4835 ] 
14:46:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0B2D0>) , Command count = 4836 ] 
14:46:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:33: [ SetBusWidth(0x4) , Command count = 4837 ] 
14:46:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E07E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4838 ] 
14:46:33: Protected Area Size 0x28000
14:46:33: Bus Width           2
14:46:33: Secure Mode         0
14:46:33: Speed  Class        4
14:46:33: Perf Move           0
14:46:33: Au Size             9
14:46:33: Erase Size          15
14:46:33: Erase Timeout       1
14:46:33: Erase offset        1
14:46:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4839 ] 
14:46:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:33: Host Frequency set to 100000 KHz
14:46:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:33: ####CSD Registe 2.0 Values####
14:46:33: CSD_STRUCTURE                                 :0x1
14:46:33: Reserv1                                       :0x0
14:46:33: Time Access 1 TAAC                            :0xe
14:46:33: Time Access 2 NSAC*100                        :0x0
14:46:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:33: Card Command Classess CCC                     :0x5b5
14:46:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:34: DSR(driver stage register)  DSR_IMP           :0x0
14:46:34: Reserv2                                       :0x0
14:46:34: Device Size C_SIZE                            :0xedc8
14:46:34: Reserv3                                       :0x0
14:46:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:34: Reserv4                                       :0x0
14:46:34: Write Speed Factor R2W_FACTOR                 :0x2
14:46:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:34: FILE_FORMAT_GRP                               :0x0
14:46:34: COPY flag                                     :0x1
14:46:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:34: File_Format                                   :0x0
14:46:34: CRC                                           :0x0
14:46:34: ####CSD Registe Values####  

14:46:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5900>, <py_sfcl.CommandDataDefinition object at 0x05E0B5D0>) , Command count = 4840 ] 
14:46:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F420>, <py_sfcl.CommandDataDefinition object at 0x05E0BC60>) , Command count = 4841 ] 
14:46:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:34: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FBA0>, <py_sfcl.PySEnhancedCmdData object at 0x05E071B0>, <None>, <py_sfcl.Command23 object at 0x05E10E40>) , Command count = 4842 ] 
14:46:34: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x2E007 to EndLba:0x2E008 with Increment Pattern
14:46:34: [ WrLbaNoData(0x2E007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4843 ] 
14:46:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x2E007 to EndLba:0x2E008 with Increment Pattern 

14:46:34: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 5
14:46:34: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB2D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E00CF0>, <py_sfcl.PySEnhancedCmdData object at 0x05E079F0>, <None>, <py_sfcl.Command23 object at 0x05E10960>) , Command count = 4844 ] 
14:46:35: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:35: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07A80>, <py_sfcl.PySEnhancedCmdData object at 0x05E04720>, <None>, <py_sfcl.Command23 object at 0x05E10ED0>) , Command count = 4845 ] 
14:46:35: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:37: Host Frequency set to 25000 KHz
14:46:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9FC0>, 0x0, True) , Command count = 4846 ] 
14:46:37: [GO18_globalSetVolt]### Host voltage value is set.
14:46:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E04840>, 0x0, False) , Command count = 4847 ] 
14:46:37: [GO18_globalSetVolt]### Host voltage value is set.
14:46:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4848 ] 
14:46:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4849 ] 
14:46:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4850 ] 
14:46:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07990>, <py_sfcl.CommandDataDefinition object at 0x05E04E10>) , Command count = 4851 ] 
14:46:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07360>, <py_sfcl.CommandDataDefinition object at 0x05E04030>) , Command count = 4852 ] 
14:46:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:37: [ SetCardRCA(0x1, 0xD555) , Command count = 4853 ] 
14:46:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:37: Host Frequency set to 25000 KHz
14:46:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:37: ####CSD Registe 2.0 Values####
14:46:37: CSD_STRUCTURE                                 :0x1
14:46:37: Reserv1                                       :0x0
14:46:37: Time Access 1 TAAC                            :0xe
14:46:37: Time Access 2 NSAC*100                        :0x0
14:46:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:37: Card Command Classess CCC                     :0x5b5
14:46:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:37: DSR(driver stage register)  DSR_IMP           :0x0
14:46:37: Reserv2                                       :0x0
14:46:37: Device Size C_SIZE                            :0xedc8
14:46:37: Reserv3                                       :0x0
14:46:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:37: Reserv4                                       :0x0
14:46:37: Write Speed Factor R2W_FACTOR                 :0x2
14:46:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:37: FILE_FORMAT_GRP                               :0x0
14:46:37: COPY flag                                     :0x1
14:46:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:37: File_Format                                   :0x0
14:46:37: CRC                                           :0x0
14:46:37: ####CSD Registe Values####  

14:46:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:37: [GetSCRRegisterEntry] Passed
14:46:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:37: Data_Status_After Erases          : 0
14:46:37: CPRM Security Support             : No Security
14:46:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:37: Spec. Version                     : Version 3.0X
14:46:37: Extended Security Support         : Extended_Security_Not_Supported
14:46:37: Command Support                   : COMMAND_SUPPORT
14:46:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E075D0>, <py_sfcl.CommandDataDefinition object at 0x05E0BC60>) , Command count = 4854 ] 
14:46:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07600>, <py_sfcl.CommandDataDefinition object at 0x05E04FC0>) , Command count = 4855 ] 
14:46:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:37: [ SetBusWidth(0x4) , Command count = 4856 ] 
14:46:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E076F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4857 ] 
14:46:37: Protected Area Size 0x28000
14:46:37: Bus Width           2
14:46:37: Secure Mode         0
14:46:37: Speed  Class        4
14:46:37: Perf Move           0
14:46:37: Au Size             9
14:46:37: Erase Size          15
14:46:37: Erase Timeout       1
14:46:37: Erase offset        1
14:46:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4858 ] 
14:46:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:37: Host Frequency set to 100000 KHz
14:46:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:37: ####CSD Registe 2.0 Values####
14:46:37: CSD_STRUCTURE                                 :0x1
14:46:37: Reserv1                                       :0x0
14:46:37: Time Access 1 TAAC                            :0xe
14:46:37: Time Access 2 NSAC*100                        :0x0
14:46:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:37: Card Command Classess CCC                     :0x5b5
14:46:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:38: DSR(driver stage register)  DSR_IMP           :0x0
14:46:38: Reserv2                                       :0x0
14:46:38: Device Size C_SIZE                            :0xedc8
14:46:38: Reserv3                                       :0x0
14:46:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:38: Reserv4                                       :0x0
14:46:38: Write Speed Factor R2W_FACTOR                 :0x2
14:46:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:38: FILE_FORMAT_GRP                               :0x0
14:46:38: COPY flag                                     :0x1
14:46:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:38: File_Format                                   :0x0
14:46:38: CRC                                           :0x0
14:46:38: ####CSD Registe Values####  

14:46:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E077B0>, <py_sfcl.CommandDataDefinition object at 0x05E07E40>) , Command count = 4859 ] 
14:46:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9BA0>, <py_sfcl.CommandDataDefinition object at 0x05E0F240>) , Command count = 4860 ] 
14:46:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBED0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B6F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BF00>, <None>, <py_sfcl.Command23 object at 0x05E0B8A0>) , Command count = 4861 ] 
14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x30007 to EndLba:0x30008 with Increment Pattern
14:46:38: [ WrLbaNoData(0x30007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4862 ] 
14:46:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x30007 to EndLba:0x30008 with Increment Pattern 

14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 4
14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9A80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F870>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BEA0>, <None>, <py_sfcl.Command23 object at 0x05E0B300>) , Command count = 4863 ] 
14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BD80>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B510>, <None>, <py_sfcl.Command23 object at 0x05E107E0>) , Command count = 4864 ] 
14:46:38: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:41: Host Frequency set to 25000 KHz
14:46:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB8D0>, 0x0, True) , Command count = 4865 ] 
14:46:41: [GO18_globalSetVolt]### Host voltage value is set.
14:46:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E0B750>, 0x0, False) , Command count = 4866 ] 
14:46:41: [GO18_globalSetVolt]### Host voltage value is set.
14:46:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4867 ] 
14:46:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4868 ] 
14:46:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4869 ] 
14:46:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB3C0>, <py_sfcl.CommandDataDefinition object at 0x0526FC30>) , Command count = 4870 ] 
14:46:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526FCF0>, <py_sfcl.CommandDataDefinition object at 0x05E0B0C0>) , Command count = 4871 ] 
14:46:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:41: [ SetCardRCA(0x1, 0xD555) , Command count = 4872 ] 
14:46:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:41: Host Frequency set to 25000 KHz
14:46:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:41: ####CSD Registe 2.0 Values####
14:46:41: CSD_STRUCTURE                                 :0x1
14:46:41: Reserv1                                       :0x0
14:46:41: Time Access 1 TAAC                            :0xe
14:46:41: Time Access 2 NSAC*100                        :0x0
14:46:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:41: Card Command Classess CCC                     :0x5b5
14:46:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:41: DSR(driver stage register)  DSR_IMP           :0x0
14:46:41: Reserv2                                       :0x0
14:46:41: Device Size C_SIZE                            :0xedc8
14:46:41: Reserv3                                       :0x0
14:46:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:41: Reserv4                                       :0x0
14:46:41: Write Speed Factor R2W_FACTOR                 :0x2
14:46:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:41: FILE_FORMAT_GRP                               :0x0
14:46:41: COPY flag                                     :0x1
14:46:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:41: File_Format                                   :0x0
14:46:41: CRC                                           :0x0
14:46:41: ####CSD Registe Values####  

14:46:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:41: [GetSCRRegisterEntry] Passed
14:46:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:41: Data_Status_After Erases          : 0
14:46:41: CPRM Security Support             : No Security
14:46:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:41: Spec. Version                     : Version 3.0X
14:46:41: Extended Security Support         : Extended_Security_Not_Supported
14:46:41: Command Support                   : COMMAND_SUPPORT
14:46:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FDB0>, <py_sfcl.CommandDataDefinition object at 0x05E0B990>) , Command count = 4873 ] 
14:46:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0526F270>, <py_sfcl.CommandDataDefinition object at 0x05E0FF60>) , Command count = 4874 ] 
14:46:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:41: [ SetBusWidth(0x4) , Command count = 4875 ] 
14:46:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4876 ] 
14:46:41: Protected Area Size 0x28000
14:46:41: Bus Width           2
14:46:41: Secure Mode         0
14:46:41: Speed  Class        4
14:46:41: Perf Move           0
14:46:41: Au Size             9
14:46:41: Erase Size          15
14:46:41: Erase Timeout       1
14:46:41: Erase offset        1
14:46:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4877 ] 
14:46:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:41: Host Frequency set to 100000 KHz
14:46:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:41: ####CSD Registe 2.0 Values####
14:46:41: CSD_STRUCTURE                                 :0x1
14:46:41: Reserv1                                       :0x0
14:46:41: Time Access 1 TAAC                            :0xe
14:46:41: Time Access 2 NSAC*100                        :0x0
14:46:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:41: Card Command Classess CCC                     :0x5b5
14:46:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:42: DSR(driver stage register)  DSR_IMP           :0x0
14:46:42: Reserv2                                       :0x0
14:46:42: Device Size C_SIZE                            :0xedc8
14:46:42: Reserv3                                       :0x0
14:46:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:42: Reserv4                                       :0x0
14:46:42: Write Speed Factor R2W_FACTOR                 :0x2
14:46:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:42: FILE_FORMAT_GRP                               :0x0
14:46:42: COPY flag                                     :0x1
14:46:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:42: File_Format                                   :0x0
14:46:42: CRC                                           :0x0
14:46:42: ####CSD Registe Values####  

14:46:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5990>, <py_sfcl.CommandDataDefinition object at 0x05281DE0>) , Command count = 4878 ] 
14:46:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0BA80>, <py_sfcl.CommandDataDefinition object at 0x05E0BA50>) , Command count = 4879 ] 
14:46:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5C00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B2A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B330>, <None>, <py_sfcl.Command23 object at 0x05E0BF30>) , Command count = 4880 ] 
14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x32007 to EndLba:0x32008 with Increment Pattern
14:46:42: [ WrLbaNoData(0x32007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4881 ] 
14:46:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x32007 to EndLba:0x32008 with Increment Pattern 

14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 3
14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF50C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B630>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B690>, <None>, <py_sfcl.Command23 object at 0x05E0B660>) , Command count = 4882 ] 
14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0526DED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B7B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B8D0>, <None>, <py_sfcl.Command23 object at 0x05E10AE0>) , Command count = 4883 ] 
14:46:42: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:45: Host Frequency set to 25000 KHz
14:46:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x052177E0>, 0x0, True) , Command count = 4884 ] 
14:46:45: [GO18_globalSetVolt]### Host voltage value is set.
14:46:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07F60>, 0x0, False) , Command count = 4885 ] 
14:46:45: [GO18_globalSetVolt]### Host voltage value is set.
14:46:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4886 ] 
14:46:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4887 ] 
14:46:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4888 ] 
14:46:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C60>, <py_sfcl.CommandDataDefinition object at 0x05DF5B70>) , Command count = 4889 ] 
14:46:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FA50>, <py_sfcl.CommandDataDefinition object at 0x05E07A20>) , Command count = 4890 ] 
14:46:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:45: [ SetCardRCA(0x1, 0xD555) , Command count = 4891 ] 
14:46:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:45: Host Frequency set to 25000 KHz
14:46:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:45: ####CSD Registe 2.0 Values####
14:46:45: CSD_STRUCTURE                                 :0x1
14:46:45: Reserv1                                       :0x0
14:46:45: Time Access 1 TAAC                            :0xe
14:46:45: Time Access 2 NSAC*100                        :0x0
14:46:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:45: Card Command Classess CCC                     :0x5b5
14:46:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:45: DSR(driver stage register)  DSR_IMP           :0x0
14:46:45: Reserv2                                       :0x0
14:46:45: Device Size C_SIZE                            :0xedc8
14:46:45: Reserv3                                       :0x0
14:46:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:45: Reserv4                                       :0x0
14:46:45: Write Speed Factor R2W_FACTOR                 :0x2
14:46:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:45: FILE_FORMAT_GRP                               :0x0
14:46:45: COPY flag                                     :0x1
14:46:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:45: File_Format                                   :0x0
14:46:45: CRC                                           :0x0
14:46:45: ####CSD Registe Values####  

14:46:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:45: [GetSCRRegisterEntry] Passed
14:46:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:45: Data_Status_After Erases          : 0
14:46:45: CPRM Security Support             : No Security
14:46:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:45: Spec. Version                     : Version 3.0X
14:46:45: Extended Security Support         : Extended_Security_Not_Supported
14:46:45: Command Support                   : COMMAND_SUPPORT
14:46:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E074B0>, <py_sfcl.CommandDataDefinition object at 0x05E07330>) , Command count = 4892 ] 
14:46:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E047E0>, <py_sfcl.CommandDataDefinition object at 0x05E0BB10>) , Command count = 4893 ] 
14:46:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:45: [ SetBusWidth(0x4) , Command count = 4894 ] 
14:46:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05CEF060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4895 ] 
14:46:45: Protected Area Size 0x28000
14:46:45: Bus Width           2
14:46:45: Secure Mode         0
14:46:45: Speed  Class        4
14:46:45: Perf Move           0
14:46:45: Au Size             9
14:46:45: Erase Size          15
14:46:45: Erase Timeout       1
14:46:45: Erase offset        1
14:46:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4896 ] 
14:46:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:45: Host Frequency set to 100000 KHz
14:46:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:45: ####CSD Registe 2.0 Values####
14:46:45: CSD_STRUCTURE                                 :0x1
14:46:45: Reserv1                                       :0x0
14:46:45: Time Access 1 TAAC                            :0xe
14:46:45: Time Access 2 NSAC*100                        :0x0
14:46:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:45: Card Command Classess CCC                     :0x5b5
14:46:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:45: DSR(driver stage register)  DSR_IMP           :0x0
14:46:45: Reserv2                                       :0x0
14:46:45: Device Size C_SIZE                            :0xedc8
14:46:45: Reserv3                                       :0x0
14:46:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:45: Reserv4                                       :0x0
14:46:45: Write Speed Factor R2W_FACTOR                 :0x2
14:46:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:45: FILE_FORMAT_GRP                               :0x0
14:46:45: COPY flag                                     :0x1
14:46:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:45: File_Format                                   :0x0
14:46:45: CRC                                           :0x0
14:46:45: ####CSD Registe Values####  

14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281E70>, <py_sfcl.CommandDataDefinition object at 0x05E0BFC0>) , Command count = 4897 ] 
14:46:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281F00>, <py_sfcl.CommandDataDefinition object at 0x05E0F120>) , Command count = 4898 ] 
14:46:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:45: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE99C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07480>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FF00>, <None>, <py_sfcl.Command23 object at 0x05E100C0>) , Command count = 4899 ] 
14:46:45: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x34007 to EndLba:0x34008 with Increment Pattern
14:46:45: [ WrLbaNoData(0x34007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4900 ] 
14:46:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x34007 to EndLba:0x34008 with Increment Pattern 

14:46:45: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 2
14:46:45: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052819F0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B3F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BE40>, <None>, <py_sfcl.Command23 object at 0x05E10810>) , Command count = 4901 ] 
14:46:45: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:45: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E00630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07390>, <py_sfcl.PySEnhancedCmdData object at 0x05E0B840>, <None>, <py_sfcl.Command23 object at 0x05E10480>) , Command count = 4902 ] 
14:46:46: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:48: Host Frequency set to 25000 KHz
14:46:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0526FF60>, 0x0, True) , Command count = 4903 ] 
14:46:48: [GO18_globalSetVolt]### Host voltage value is set.
14:46:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0521E030>, 0x0, False) , Command count = 4904 ] 
14:46:48: [GO18_globalSetVolt]### Host voltage value is set.
14:46:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4905 ] 
14:46:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4906 ] 
14:46:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4907 ] 
14:46:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281C30>, <py_sfcl.CommandDataDefinition object at 0x05E0B870>) , Command count = 4908 ] 
14:46:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05CEF7B0>, <py_sfcl.CommandDataDefinition object at 0x05E0B930>) , Command count = 4909 ] 
14:46:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:48: [ SetCardRCA(0x1, 0xD555) , Command count = 4910 ] 
14:46:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:48: Host Frequency set to 25000 KHz
14:46:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:48: ####CSD Registe 2.0 Values####
14:46:48: CSD_STRUCTURE                                 :0x1
14:46:48: Reserv1                                       :0x0
14:46:48: Time Access 1 TAAC                            :0xe
14:46:48: Time Access 2 NSAC*100                        :0x0
14:46:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:48: Card Command Classess CCC                     :0x5b5
14:46:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:48: DSR(driver stage register)  DSR_IMP           :0x0
14:46:48: Reserv2                                       :0x0
14:46:48: Device Size C_SIZE                            :0xedc8
14:46:48: Reserv3                                       :0x0
14:46:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:48: Reserv4                                       :0x0
14:46:48: Write Speed Factor R2W_FACTOR                 :0x2
14:46:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:48: FILE_FORMAT_GRP                               :0x0
14:46:48: COPY flag                                     :0x1
14:46:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:48: File_Format                                   :0x0
14:46:48: CRC                                           :0x0
14:46:48: ####CSD Registe Values####  

14:46:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:48: [GetSCRRegisterEntry] Passed
14:46:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:48: Data_Status_After Erases          : 0
14:46:48: CPRM Security Support             : No Security
14:46:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:48: Spec. Version                     : Version 3.0X
14:46:48: Extended Security Support         : Extended_Security_Not_Supported
14:46:48: Command Support                   : COMMAND_SUPPORT
14:46:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05281CC0>, <py_sfcl.CommandDataDefinition object at 0x05E0F120>) , Command count = 4911 ] 
14:46:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5150>, <py_sfcl.CommandDataDefinition object at 0x05E0B1B0>) , Command count = 4912 ] 
14:46:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:48: [ SetBusWidth(0x4) , Command count = 4913 ] 
14:46:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0BC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4914 ] 
14:46:48: Protected Area Size 0x28000
14:46:48: Bus Width           2
14:46:48: Secure Mode         0
14:46:48: Speed  Class        4
14:46:48: Perf Move           0
14:46:48: Au Size             9
14:46:48: Erase Size          15
14:46:48: Erase Timeout       1
14:46:48: Erase offset        1
14:46:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4915 ] 
14:46:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:48: Host Frequency set to 100000 KHz
14:46:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:48: ####CSD Registe 2.0 Values####
14:46:48: CSD_STRUCTURE                                 :0x1
14:46:48: Reserv1                                       :0x0
14:46:48: Time Access 1 TAAC                            :0xe
14:46:48: Time Access 2 NSAC*100                        :0x0
14:46:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:48: Card Command Classess CCC                     :0x5b5
14:46:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:48: DSR(driver stage register)  DSR_IMP           :0x0
14:46:48: Reserv2                                       :0x0
14:46:48: Device Size C_SIZE                            :0xedc8
14:46:48: Reserv3                                       :0x0
14:46:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:48: Reserv4                                       :0x0
14:46:48: Write Speed Factor R2W_FACTOR                 :0x2
14:46:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:48: FILE_FORMAT_GRP                               :0x0
14:46:48: COPY flag                                     :0x1
14:46:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:48: File_Format                                   :0x0
14:46:48: CRC                                           :0x0
14:46:48: ####CSD Registe Values####  

14:46:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF58A0>, <py_sfcl.CommandDataDefinition object at 0x05E04540>) , Command count = 4916 ] 
14:46:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0B7E0>, <py_sfcl.CommandDataDefinition object at 0x05E0B9F0>) , Command count = 4917 ] 
14:46:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9AB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0B9C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BB70>, <None>, <py_sfcl.Command23 object at 0x05E0FE40>) , Command count = 4918 ] 
14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x36007 to EndLba:0x36008 with Increment Pattern
14:46:48: [ WrLbaNoData(0x36007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4919 ] 
14:46:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x36007 to EndLba:0x36008 with Increment Pattern 

14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 1
14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05CEF4E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0BDE0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07780>, <None>, <py_sfcl.Command23 object at 0x05E0FB10>) , Command count = 4920 ] 
14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DE9A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07B40>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F270>, <None>, <py_sfcl.Command23 object at 0x05E10480>) , Command count = 4921 ] 
14:46:48: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:51: Host Frequency set to 25000 KHz
14:46:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F90>, 0x0, True) , Command count = 4922 ] 
14:46:51: [GO18_globalSetVolt]### Host voltage value is set.
14:46:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07C30>, 0x0, False) , Command count = 4923 ] 
14:46:51: [GO18_globalSetVolt]### Host voltage value is set.
14:46:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4924 ] 
14:46:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4925 ] 
14:46:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4926 ] 
14:46:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9E70>, <py_sfcl.CommandDataDefinition object at 0x05DF5D50>) , Command count = 4927 ] 
14:46:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5C30>, <py_sfcl.CommandDataDefinition object at 0x05DFBAB0>) , Command count = 4928 ] 
14:46:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:51: [ SetCardRCA(0x1, 0xD555) , Command count = 4929 ] 
14:46:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:51: Host Frequency set to 25000 KHz
14:46:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:51: ####CSD Registe 2.0 Values####
14:46:51: CSD_STRUCTURE                                 :0x1
14:46:51: Reserv1                                       :0x0
14:46:51: Time Access 1 TAAC                            :0xe
14:46:51: Time Access 2 NSAC*100                        :0x0
14:46:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:51: Card Command Classess CCC                     :0x5b5
14:46:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:51: DSR(driver stage register)  DSR_IMP           :0x0
14:46:51: Reserv2                                       :0x0
14:46:51: Device Size C_SIZE                            :0xedc8
14:46:51: Reserv3                                       :0x0
14:46:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:51: Reserv4                                       :0x0
14:46:51: Write Speed Factor R2W_FACTOR                 :0x2
14:46:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:51: FILE_FORMAT_GRP                               :0x0
14:46:51: COPY flag                                     :0x1
14:46:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:51: File_Format                                   :0x0
14:46:51: CRC                                           :0x0
14:46:51: ####CSD Registe Values####  

14:46:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:51: [GetSCRRegisterEntry] Passed
14:46:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:51: Data_Status_After Erases          : 0
14:46:51: CPRM Security Support             : No Security
14:46:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:51: Spec. Version                     : Version 3.0X
14:46:51: Extended Security Support         : Extended_Security_Not_Supported
14:46:51: Command Support                   : COMMAND_SUPPORT
14:46:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B40>, <py_sfcl.CommandDataDefinition object at 0x05DFBC90>) , Command count = 4930 ] 
14:46:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB870>, <py_sfcl.CommandDataDefinition object at 0x05DFBC00>) , Command count = 4931 ] 
14:46:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:51: [ SetBusWidth(0x4) , Command count = 4932 ] 
14:46:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4933 ] 
14:46:51: Protected Area Size 0x28000
14:46:51: Bus Width           2
14:46:51: Secure Mode         0
14:46:51: Speed  Class        4
14:46:51: Perf Move           0
14:46:51: Au Size             9
14:46:51: Erase Size          15
14:46:51: Erase Timeout       1
14:46:51: Erase offset        1
14:46:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4934 ] 
14:46:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:51: Host Frequency set to 100000 KHz
14:46:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:51: ####CSD Registe 2.0 Values####
14:46:51: CSD_STRUCTURE                                 :0x1
14:46:51: Reserv1                                       :0x0
14:46:51: Time Access 1 TAAC                            :0xe
14:46:51: Time Access 2 NSAC*100                        :0x0
14:46:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:51: Card Command Classess CCC                     :0x5b5
14:46:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:51: DSR(driver stage register)  DSR_IMP           :0x0
14:46:51: Reserv2                                       :0x0
14:46:51: Device Size C_SIZE                            :0xedc8
14:46:51: Reserv3                                       :0x0
14:46:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:51: Reserv4                                       :0x0
14:46:51: Write Speed Factor R2W_FACTOR                 :0x2
14:46:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:52: FILE_FORMAT_GRP                               :0x0
14:46:52: COPY flag                                     :0x1
14:46:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:52: File_Format                                   :0x0
14:46:52: CRC                                           :0x0
14:46:52: ####CSD Registe Values####  

14:46:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5480>, <py_sfcl.CommandDataDefinition object at 0x05DFB600>) , Command count = 4935 ] 
14:46:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5600>, <py_sfcl.CommandDataDefinition object at 0x05E07BD0>) , Command count = 4936 ] 
14:46:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0B600>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E070C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0F090>, <None>, <py_sfcl.Command23 object at 0x05E0FB70>) , Command count = 4937 ] 
14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x38007 to EndLba:0x38008 with Increment Pattern
14:46:52: [ WrLbaNoData(0x38007, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4938 ] 
14:46:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x38007 to EndLba:0x38008 with Increment Pattern 

14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Outer loop Count 1023
14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 29
14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05281FC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05281C90>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5FC0>, <None>, <py_sfcl.Command23 object at 0x05E0F210>) , Command count = 4939 ] 
14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E106C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E109F0>, <py_sfcl.PySEnhancedCmdData object at 0x05E10870>, <None>, <py_sfcl.Command23 object at 0x05E0F9C0>) , Command count = 4940 ] 
14:46:52: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:54: Host Frequency set to 25000 KHz
14:46:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB9C0>, 0x0, True) , Command count = 4941 ] 
14:46:54: [GO18_globalSetVolt]### Host voltage value is set.
14:46:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF54E0>, 0x0, False) , Command count = 4942 ] 
14:46:54: [GO18_globalSetVolt]### Host voltage value is set.
14:46:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4943 ] 
14:46:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4944 ] 
14:46:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4945 ] 
14:46:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5750>, <py_sfcl.CommandDataDefinition object at 0x05DE9C00>) , Command count = 4946 ] 
14:46:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F420>, <py_sfcl.CommandDataDefinition object at 0x05E0F810>) , Command count = 4947 ] 
14:46:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:54: [ SetCardRCA(0x1, 0xD555) , Command count = 4948 ] 
14:46:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:54: Host Frequency set to 25000 KHz
14:46:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:54: ####CSD Registe 2.0 Values####
14:46:54: CSD_STRUCTURE                                 :0x1
14:46:54: Reserv1                                       :0x0
14:46:54: Time Access 1 TAAC                            :0xe
14:46:54: Time Access 2 NSAC*100                        :0x0
14:46:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:54: Card Command Classess CCC                     :0x5b5
14:46:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:54: DSR(driver stage register)  DSR_IMP           :0x0
14:46:54: Reserv2                                       :0x0
14:46:54: Device Size C_SIZE                            :0xedc8
14:46:54: Reserv3                                       :0x0
14:46:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:54: Reserv4                                       :0x0
14:46:54: Write Speed Factor R2W_FACTOR                 :0x2
14:46:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:54: FILE_FORMAT_GRP                               :0x0
14:46:54: COPY flag                                     :0x1
14:46:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:54: File_Format                                   :0x0
14:46:54: CRC                                           :0x0
14:46:54: ####CSD Registe Values####  

14:46:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:54: [GetSCRRegisterEntry] Passed
14:46:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:54: Data_Status_After Erases          : 0
14:46:54: CPRM Security Support             : No Security
14:46:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:54: Spec. Version                     : Version 3.0X
14:46:54: Extended Security Support         : Extended_Security_Not_Supported
14:46:54: Command Support                   : COMMAND_SUPPORT
14:46:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F5A0>, <py_sfcl.CommandDataDefinition object at 0x05E07BD0>) , Command count = 4949 ] 
14:46:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBD80>, <py_sfcl.CommandDataDefinition object at 0x05DF5DB0>) , Command count = 4950 ] 
14:46:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:54: [ SetBusWidth(0x4) , Command count = 4951 ] 
14:46:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4952 ] 
14:46:54: Protected Area Size 0x28000
14:46:54: Bus Width           2
14:46:54: Secure Mode         0
14:46:54: Speed  Class        4
14:46:54: Perf Move           0
14:46:54: Au Size             9
14:46:54: Erase Size          15
14:46:54: Erase Timeout       1
14:46:54: Erase offset        1
14:46:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4953 ] 
14:46:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:54: Host Frequency set to 100000 KHz
14:46:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:54: ####CSD Registe 2.0 Values####
14:46:54: CSD_STRUCTURE                                 :0x1
14:46:55: Reserv1                                       :0x0
14:46:55: Time Access 1 TAAC                            :0xe
14:46:55: Time Access 2 NSAC*100                        :0x0
14:46:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:55: Card Command Classess CCC                     :0x5b5
14:46:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:55: DSR(driver stage register)  DSR_IMP           :0x0
14:46:55: Reserv2                                       :0x0
14:46:55: Device Size C_SIZE                            :0xedc8
14:46:55: Reserv3                                       :0x0
14:46:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:55: Reserv4                                       :0x0
14:46:55: Write Speed Factor R2W_FACTOR                 :0x2
14:46:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:55: FILE_FORMAT_GRP                               :0x0
14:46:55: COPY flag                                     :0x1
14:46:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:55: File_Format                                   :0x0
14:46:55: CRC                                           :0x0
14:46:55: ####CSD Registe Values####  

14:46:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F540>, <py_sfcl.CommandDataDefinition object at 0x05E04480>) , Command count = 4954 ] 
14:46:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CF0>, <py_sfcl.CommandDataDefinition object at 0x05E070F0>) , Command count = 4955 ] 
14:46:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBD50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07FC0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0BC90>, <None>, <py_sfcl.Command23 object at 0x05E0B4E0>) , Command count = 4956 ] 
14:46:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xF to EndLba:0x10 with Increment Pattern
14:46:55: [ WrLbaNoData(0xF, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4957 ] 
14:46:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xF to EndLba:0x10 with Increment Pattern 

14:46:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 28
14:46:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5690>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF55A0>, <py_sfcl.PySEnhancedCmdData object at 0x05DF5F90>, <None>, <py_sfcl.Command23 object at 0x05E0B480>) , Command count = 4958 ] 
14:46:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:55: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E001B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FC90>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB390>, <None>, <py_sfcl.Command23 object at 0x05E10C30>) , Command count = 4959 ] 
14:46:56: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:46:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:58: Host Frequency set to 25000 KHz
14:46:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DE9810>, 0x0, True) , Command count = 4960 ] 
14:46:58: [GO18_globalSetVolt]### Host voltage value is set.
14:46:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5120>, 0x0, False) , Command count = 4961 ] 
14:46:58: [GO18_globalSetVolt]### Host voltage value is set.
14:46:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4962 ] 
14:46:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4963 ] 
14:46:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4964 ] 
14:46:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9B10>, <py_sfcl.CommandDataDefinition object at 0x05DFBC60>) , Command count = 4965 ] 
14:46:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B70>, <py_sfcl.CommandDataDefinition object at 0x05E0F510>) , Command count = 4966 ] 
14:46:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:58: [ SetCardRCA(0x1, 0xD555) , Command count = 4967 ] 
14:46:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:58: Host Frequency set to 25000 KHz
14:46:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:58: ####CSD Registe 2.0 Values####
14:46:58: CSD_STRUCTURE                                 :0x1
14:46:58: Reserv1                                       :0x0
14:46:58: Time Access 1 TAAC                            :0xe
14:46:58: Time Access 2 NSAC*100                        :0x0
14:46:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:58: Card Command Classess CCC                     :0x5b5
14:46:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:58: DSR(driver stage register)  DSR_IMP           :0x0
14:46:58: Reserv2                                       :0x0
14:46:58: Device Size C_SIZE                            :0xedc8
14:46:58: Reserv3                                       :0x0
14:46:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:58: Reserv4                                       :0x0
14:46:58: Write Speed Factor R2W_FACTOR                 :0x2
14:46:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:58: FILE_FORMAT_GRP                               :0x0
14:46:58: COPY flag                                     :0x1
14:46:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:58: File_Format                                   :0x0
14:46:58: CRC                                           :0x0
14:46:58: ####CSD Registe Values####  

14:46:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:58: [GetSCRRegisterEntry] Passed
14:46:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:58: Data_Status_After Erases          : 0
14:46:58: CPRM Security Support             : No Security
14:46:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:58: Spec. Version                     : Version 3.0X
14:46:58: Extended Security Support         : Extended_Security_Not_Supported
14:46:58: Command Support                   : COMMAND_SUPPORT
14:46:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB5D0>, <py_sfcl.CommandDataDefinition object at 0x05E070F0>) , Command count = 4968 ] 
14:46:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB720>, <py_sfcl.CommandDataDefinition object at 0x05E005A0>) , Command count = 4969 ] 
14:46:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:58: [ SetBusWidth(0x4) , Command count = 4970 ] 
14:46:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05DFB330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4971 ] 
14:46:58: Protected Area Size 0x28000
14:46:58: Bus Width           2
14:46:58: Secure Mode         0
14:46:58: Speed  Class        4
14:46:58: Perf Move           0
14:46:58: Au Size             9
14:46:58: Erase Size          15
14:46:58: Erase Timeout       1
14:46:58: Erase offset        1
14:46:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4972 ] 
14:46:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:58: Host Frequency set to 100000 KHz
14:46:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:58: ####CSD Registe 2.0 Values####
14:46:58: CSD_STRUCTURE                                 :0x1
14:46:58: Reserv1                                       :0x0
14:46:58: Time Access 1 TAAC                            :0xe
14:46:58: Time Access 2 NSAC*100                        :0x0
14:46:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:58: Card Command Classess CCC                     :0x5b5
14:46:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:58: DSR(driver stage register)  DSR_IMP           :0x0
14:46:58: Reserv2                                       :0x0
14:46:58: Device Size C_SIZE                            :0xedc8
14:46:58: Reserv3                                       :0x0
14:46:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:59: Reserv4                                       :0x0
14:46:59: Write Speed Factor R2W_FACTOR                 :0x2
14:46:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:59: FILE_FORMAT_GRP                               :0x0
14:46:59: COPY flag                                     :0x1
14:46:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:59: File_Format                                   :0x0
14:46:59: CRC                                           :0x0
14:46:59: ####CSD Registe Values####  

14:46:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04390>, <py_sfcl.CommandDataDefinition object at 0x05DF5A20>) , Command count = 4973 ] 
14:46:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF58D0>, <py_sfcl.CommandDataDefinition object at 0x05E075A0>) , Command count = 4974 ] 
14:46:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB540>, <py_sfcl.PySEnhancedCmdData object at 0x05E07C60>, <None>, <py_sfcl.Command23 object at 0x05E07ED0>) , Command count = 4975 ] 
14:46:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x200F to EndLba:0x2010 with Increment Pattern
14:46:59: [ WrLbaNoData(0x200F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4976 ] 
14:46:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x200F to EndLba:0x2010 with Increment Pattern 

14:46:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 27
14:46:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5F30>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFBEA0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB5A0>, <None>, <py_sfcl.Command23 object at 0x05E072A0>) , Command count = 4977 ] 
14:46:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:59: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:46:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E006F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F150>, <py_sfcl.PySEnhancedCmdData object at 0x05DFB180>, <None>, <py_sfcl.Command23 object at 0x05E10A80>) , Command count = 4978 ] 
14:47:00: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:47:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:02: Host Frequency set to 25000 KHz
14:47:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05CEFB10>, 0x0, True) , Command count = 4979 ] 
14:47:02: [GO18_globalSetVolt]### Host voltage value is set.
14:47:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB4B0>, 0x0, False) , Command count = 4980 ] 
14:47:02: [GO18_globalSetVolt]### Host voltage value is set.
14:47:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4981 ] 
14:47:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4982 ] 
14:47:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4983 ] 
14:47:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0FF30>, <py_sfcl.CommandDataDefinition object at 0x05DFB1E0>) , Command count = 4984 ] 
14:47:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBF90>, <py_sfcl.CommandDataDefinition object at 0x05E00AB0>) , Command count = 4985 ] 
14:47:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:02: [ SetCardRCA(0x1, 0xD555) , Command count = 4986 ] 
14:47:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:02: Host Frequency set to 25000 KHz
14:47:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:02: ####CSD Registe 2.0 Values####
14:47:02: CSD_STRUCTURE                                 :0x1
14:47:02: Reserv1                                       :0x0
14:47:02: Time Access 1 TAAC                            :0xe
14:47:02: Time Access 2 NSAC*100                        :0x0
14:47:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:02: Card Command Classess CCC                     :0x5b5
14:47:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:02: DSR(driver stage register)  DSR_IMP           :0x0
14:47:02: Reserv2                                       :0x0
14:47:02: Device Size C_SIZE                            :0xedc8
14:47:02: Reserv3                                       :0x0
14:47:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:02: Reserv4                                       :0x0
14:47:02: Write Speed Factor R2W_FACTOR                 :0x2
14:47:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:02: FILE_FORMAT_GRP                               :0x0
14:47:02: COPY flag                                     :0x1
14:47:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:02: File_Format                                   :0x0
14:47:02: CRC                                           :0x0
14:47:02: ####CSD Registe Values####  

14:47:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:02: [GetSCRRegisterEntry] Passed
14:47:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:02: Data_Status_After Erases          : 0
14:47:02: CPRM Security Support             : No Security
14:47:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:02: Spec. Version                     : Version 3.0X
14:47:02: Extended Security Support         : Extended_Security_Not_Supported
14:47:02: Command Support                   : COMMAND_SUPPORT
14:47:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00C00>, <py_sfcl.CommandDataDefinition object at 0x05E07AB0>) , Command count = 4987 ] 
14:47:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF55D0>, <py_sfcl.CommandDataDefinition object at 0x05DFB750>) , Command count = 4988 ] 
14:47:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:02: [ SetBusWidth(0x4) , Command count = 4989 ] 
14:47:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0F330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4990 ] 
14:47:02: Protected Area Size 0x28000
14:47:02: Bus Width           2
14:47:02: Secure Mode         0
14:47:02: Speed  Class        4
14:47:02: Perf Move           0
14:47:02: Au Size             9
14:47:02: Erase Size          15
14:47:02: Erase Timeout       1
14:47:02: Erase offset        1
14:47:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4991 ] 
14:47:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:02: Host Frequency set to 100000 KHz
14:47:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:02: ####CSD Registe 2.0 Values####
14:47:02: CSD_STRUCTURE                                 :0x1
14:47:02: Reserv1                                       :0x0
14:47:02: Time Access 1 TAAC                            :0xe
14:47:02: Time Access 2 NSAC*100                        :0x0
14:47:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:02: Card Command Classess CCC                     :0x5b5
14:47:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:02: DSR(driver stage register)  DSR_IMP           :0x0
14:47:02: Reserv2                                       :0x0
14:47:02: Device Size C_SIZE                            :0xedc8
14:47:02: Reserv3                                       :0x0
14:47:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:03: Reserv4                                       :0x0
14:47:03: Write Speed Factor R2W_FACTOR                 :0x2
14:47:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:03: FILE_FORMAT_GRP                               :0x0
14:47:03: COPY flag                                     :0x1
14:47:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:03: File_Format                                   :0x0
14:47:03: CRC                                           :0x0
14:47:03: ####CSD Registe Values####  

14:47:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04150>, <py_sfcl.CommandDataDefinition object at 0x05E008A0>) , Command count = 4992 ] 
14:47:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04090>, <py_sfcl.CommandDataDefinition object at 0x05E0FC60>) , Command count = 4993 ] 
14:47:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF5BA0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E009C0>, <py_sfcl.PySEnhancedCmdData object at 0x05E07810>, <None>, <py_sfcl.Command23 object at 0x05E07AE0>) , Command count = 4994 ] 
14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x400F to EndLba:0x4010 with Increment Pattern
14:47:03: [ WrLbaNoData(0x400F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 4995 ] 
14:47:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x400F to EndLba:0x4010 with Increment Pattern 

14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 26
14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07030>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E040C0>, <py_sfcl.PySEnhancedCmdData object at 0x05DFBA20>, <None>, <py_sfcl.Command23 object at 0x05E07CC0>) , Command count = 4996 ] 
14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:47:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E07750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DF52A0>, <py_sfcl.PySEnhancedCmdData object at 0x05E005D0>, <None>, <py_sfcl.Command23 object at 0x05E10CF0>) , Command count = 4997 ] 
14:47:03: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:47:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:06: Host Frequency set to 25000 KHz
14:47:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DF5F00>, 0x0, True) , Command count = 4998 ] 
14:47:06: [GO18_globalSetVolt]### Host voltage value is set.
14:47:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x05281F30>, 0x0, False) , Command count = 4999 ] 
14:47:06: [GO18_globalSetVolt]### Host voltage value is set.
14:47:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5000 ] 
14:47:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5001 ] 
14:47:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5002 ] 
14:47:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBB70>, <py_sfcl.CommandDataDefinition object at 0x05DFB9F0>) , Command count = 5003 ] 
14:47:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D80>, <py_sfcl.CommandDataDefinition object at 0x05E0F3F0>) , Command count = 5004 ] 
14:47:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:06: [ SetCardRCA(0x1, 0xD555) , Command count = 5005 ] 
14:47:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:06: Host Frequency set to 25000 KHz
14:47:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:06: ####CSD Registe 2.0 Values####
14:47:06: CSD_STRUCTURE                                 :0x1
14:47:06: Reserv1                                       :0x0
14:47:06: Time Access 1 TAAC                            :0xe
14:47:06: Time Access 2 NSAC*100                        :0x0
14:47:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:06: Card Command Classess CCC                     :0x5b5
14:47:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:06: DSR(driver stage register)  DSR_IMP           :0x0
14:47:06: Reserv2                                       :0x0
14:47:06: Device Size C_SIZE                            :0xedc8
14:47:06: Reserv3                                       :0x0
14:47:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:06: Reserv4                                       :0x0
14:47:06: Write Speed Factor R2W_FACTOR                 :0x2
14:47:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:06: FILE_FORMAT_GRP                               :0x0
14:47:06: COPY flag                                     :0x1
14:47:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:06: File_Format                                   :0x0
14:47:06: CRC                                           :0x0
14:47:06: ####CSD Registe Values####  

14:47:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:06: [GetSCRRegisterEntry] Passed
14:47:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:06: Data_Status_After Erases          : 0
14:47:06: CPRM Security Support             : No Security
14:47:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:06: Spec. Version                     : Version 3.0X
14:47:06: Extended Security Support         : Extended_Security_Not_Supported
14:47:06: Command Support                   : COMMAND_SUPPORT
14:47:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5D20>, <py_sfcl.CommandDataDefinition object at 0x05E0FF90>) , Command count = 5006 ] 
14:47:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E008D0>, <py_sfcl.CommandDataDefinition object at 0x05E00BD0>) , Command count = 5007 ] 
14:47:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:06: [ SetBusWidth(0x4) , Command count = 5008 ] 
14:47:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E0FFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5009 ] 
14:47:06: Protected Area Size 0x28000
14:47:06: Bus Width           2
14:47:06: Secure Mode         0
14:47:06: Speed  Class        4
14:47:06: Perf Move           0
14:47:06: Au Size             9
14:47:06: Erase Size          15
14:47:06: Erase Timeout       1
14:47:06: Erase offset        1
14:47:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5010 ] 
14:47:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:06: Host Frequency set to 100000 KHz
14:47:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:06: ####CSD Registe 2.0 Values####
14:47:06: CSD_STRUCTURE                                 :0x1
14:47:06: Reserv1                                       :0x0
14:47:06: Time Access 1 TAAC                            :0xe
14:47:06: Time Access 2 NSAC*100                        :0x0
14:47:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:06: Card Command Classess CCC                     :0x5b5
14:47:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:06: DSR(driver stage register)  DSR_IMP           :0x0
14:47:06: Reserv2                                       :0x0
14:47:06: Device Size C_SIZE                            :0xedc8
14:47:06: Reserv3                                       :0x0
14:47:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:07: Reserv4                                       :0x0
14:47:07: Write Speed Factor R2W_FACTOR                 :0x2
14:47:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:07: FILE_FORMAT_GRP                               :0x0
14:47:07: COPY flag                                     :0x1
14:47:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:07: File_Format                                   :0x0
14:47:07: CRC                                           :0x0
14:47:07: ####CSD Registe Values####  

14:47:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB630>, <py_sfcl.CommandDataDefinition object at 0x05E00750>) , Command count = 5011 ] 
14:47:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F6F0>, <py_sfcl.CommandDataDefinition object at 0x05E0F0C0>) , Command count = 5012 ] 
14:47:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DF57B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05DFB570>, <py_sfcl.PySEnhancedCmdData object at 0x05E048D0>, <None>, <py_sfcl.Command23 object at 0x05E103F0>) , Command count = 5013 ] 
14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x600F to EndLba:0x6010 with Increment Pattern
14:47:07: [ WrLbaNoData(0x600F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 5014 ] 
14:47:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x600F to EndLba:0x6010 with Increment Pattern 

14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 25
14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFBB40>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E07120>, <py_sfcl.PySEnhancedCmdData object at 0x05E00600>, <None>, <py_sfcl.Command23 object at 0x05E07870>) , Command count = 5015 ] 
14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E10570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E10750>, <py_sfcl.PySEnhancedCmdData object at 0x05E105D0>, <None>, <py_sfcl.Command23 object at 0x05E10DB0>) , Command count = 5016 ] 
14:47:07: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:47:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:09: Host Frequency set to 25000 KHz
14:47:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB3F0>, 0x0, True) , Command count = 5017 ] 
14:47:09: [GO18_globalSetVolt]### Host voltage value is set.
14:47:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFBE40>, 0x0, False) , Command count = 5018 ] 
14:47:10: [GO18_globalSetVolt]### Host voltage value is set.
14:47:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5019 ] 
14:47:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5020 ] 
14:47:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5021 ] 
14:47:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5CC0>, <py_sfcl.CommandDataDefinition object at 0x05E00D80>) , Command count = 5022 ] 
14:47:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5B40>, <py_sfcl.CommandDataDefinition object at 0x05E00D50>) , Command count = 5023 ] 
14:47:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:10: [ SetCardRCA(0x1, 0xD555) , Command count = 5024 ] 
14:47:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:10: Host Frequency set to 25000 KHz
14:47:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:10: ####CSD Registe 2.0 Values####
14:47:10: CSD_STRUCTURE                                 :0x1
14:47:10: Reserv1                                       :0x0
14:47:10: Time Access 1 TAAC                            :0xe
14:47:10: Time Access 2 NSAC*100                        :0x0
14:47:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:10: Card Command Classess CCC                     :0x5b5
14:47:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:10: DSR(driver stage register)  DSR_IMP           :0x0
14:47:10: Reserv2                                       :0x0
14:47:10: Device Size C_SIZE                            :0xedc8
14:47:10: Reserv3                                       :0x0
14:47:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:10: Reserv4                                       :0x0
14:47:10: Write Speed Factor R2W_FACTOR                 :0x2
14:47:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:10: FILE_FORMAT_GRP                               :0x0
14:47:10: COPY flag                                     :0x1
14:47:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:10: File_Format                                   :0x0
14:47:10: CRC                                           :0x0
14:47:10: ####CSD Registe Values####  

14:47:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:10: [GetSCRRegisterEntry] Passed
14:47:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:10: Data_Status_After Erases          : 0
14:47:10: CPRM Security Support             : No Security
14:47:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:10: Spec. Version                     : Version 3.0X
14:47:10: Extended Security Support         : Extended_Security_Not_Supported
14:47:10: Command Support                   : COMMAND_SUPPORT
14:47:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00360>, <py_sfcl.CommandDataDefinition object at 0x05E04690>) , Command count = 5025 ] 
14:47:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E000F0>, <py_sfcl.CommandDataDefinition object at 0x05E00900>) , Command count = 5026 ] 
14:47:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:10: [ SetBusWidth(0x4) , Command count = 5027 ] 
14:47:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5028 ] 
14:47:10: Protected Area Size 0x28000
14:47:10: Bus Width           2
14:47:10: Secure Mode         0
14:47:10: Speed  Class        4
14:47:10: Perf Move           0
14:47:10: Au Size             9
14:47:10: Erase Size          15
14:47:10: Erase Timeout       1
14:47:10: Erase offset        1
14:47:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5029 ] 
14:47:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:10: Host Frequency set to 100000 KHz
14:47:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:10: ####CSD Registe 2.0 Values####
14:47:10: CSD_STRUCTURE                                 :0x1
14:47:10: Reserv1                                       :0x0
14:47:10: Time Access 1 TAAC                            :0xe
14:47:10: Time Access 2 NSAC*100                        :0x0
14:47:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:10: Card Command Classess CCC                     :0x5b5
14:47:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:10: DSR(driver stage register)  DSR_IMP           :0x0
14:47:10: Reserv2                                       :0x0
14:47:10: Device Size C_SIZE                            :0xedc8
14:47:10: Reserv3                                       :0x0
14:47:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:10: Reserv4                                       :0x0
14:47:10: Write Speed Factor R2W_FACTOR                 :0x2
14:47:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:11: FILE_FORMAT_GRP                               :0x0
14:47:11: COPY flag                                     :0x1
14:47:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:11: File_Format                                   :0x0
14:47:11: CRC                                           :0x0
14:47:11: ####CSD Registe Values####  

14:47:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E046C0>, <py_sfcl.CommandDataDefinition object at 0x05E00480>) , Command count = 5030 ] 
14:47:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F930>, <py_sfcl.CommandDataDefinition object at 0x05E0FAE0>) , Command count = 5031 ] 
14:47:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E078D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FB40>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FA80>, <None>, <py_sfcl.Command23 object at 0x05E10EA0>) , Command count = 5032 ] 
14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x800F to EndLba:0x8010 with Increment Pattern
14:47:11: [ WrLbaNoData(0x800F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 5033 ] 
14:47:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x800F to EndLba:0x8010 with Increment Pattern 

14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 24
14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E007E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0F7B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E0FA20>, <None>, <py_sfcl.Command23 object at 0x05E10F30>) , Command count = 5034 ] 
14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:47:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FD50>, <py_sfcl.PySEnhancedCmdData object at 0x05E04DE0>, <None>, <py_sfcl.Command23 object at 0x05E10780>) , Command count = 5035 ] 
14:47:11: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:47:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:13: Host Frequency set to 25000 KHz
14:47:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05E07DB0>, 0x0, True) , Command count = 5036 ] 
14:47:13: [GO18_globalSetVolt]### Host voltage value is set.
14:47:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05DFB960>, 0x0, False) , Command count = 5037 ] 
14:47:13: [GO18_globalSetVolt]### Host voltage value is set.
14:47:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5038 ] 
14:47:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5039 ] 
14:47:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5040 ] 
14:47:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py_sfcl.CommandDataDefinition object at 0x05DFB810>) , Command count = 5041 ] 
14:47:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBD0>, <py_sfcl.CommandDataDefinition object at 0x05E043C0>) , Command count = 5042 ] 
14:47:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:14: [ SetCardRCA(0x1, 0xD555) , Command count = 5043 ] 
14:47:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:14: Host Frequency set to 25000 KHz
14:47:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:14: ####CSD Registe 2.0 Values####
14:47:14: CSD_STRUCTURE                                 :0x1
14:47:14: Reserv1                                       :0x0
14:47:14: Time Access 1 TAAC                            :0xe
14:47:14: Time Access 2 NSAC*100                        :0x0
14:47:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:14: Card Command Classess CCC                     :0x5b5
14:47:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:14: DSR(driver stage register)  DSR_IMP           :0x0
14:47:14: Reserv2                                       :0x0
14:47:14: Device Size C_SIZE                            :0xedc8
14:47:14: Reserv3                                       :0x0
14:47:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:14: Reserv4                                       :0x0
14:47:14: Write Speed Factor R2W_FACTOR                 :0x2
14:47:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:14: FILE_FORMAT_GRP                               :0x0
14:47:14: COPY flag                                     :0x1
14:47:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:14: File_Format                                   :0x0
14:47:14: CRC                                           :0x0
14:47:14: ####CSD Registe Values####  

14:47:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:14: [GetSCRRegisterEntry] Passed
14:47:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:14: Data_Status_After Erases          : 0
14:47:14: CPRM Security Support             : No Security
14:47:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:14: Spec. Version                     : Version 3.0X
14:47:14: Extended Security Support         : Extended_Security_Not_Supported
14:47:14: Command Support                   : COMMAND_SUPPORT
14:47:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A80>, <py_sfcl.CommandDataDefinition object at 0x05E04BD0>) , Command count = 5044 ] 
14:47:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CF0>, <py_sfcl.CommandDataDefinition object at 0x05E00EA0>) , Command count = 5045 ] 
14:47:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:14: [ SetBusWidth(0x4) , Command count = 5046 ] 
14:47:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E004B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5047 ] 
14:47:14: Protected Area Size 0x28000
14:47:14: Bus Width           2
14:47:14: Secure Mode         0
14:47:14: Speed  Class        4
14:47:14: Perf Move           0
14:47:14: Au Size             9
14:47:14: Erase Size          15
14:47:14: Erase Timeout       1
14:47:14: Erase offset        1
14:47:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5048 ] 
14:47:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:14: Host Frequency set to 100000 KHz
14:47:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:14: ####CSD Registe 2.0 Values####
14:47:14: CSD_STRUCTURE                                 :0x1
14:47:14: Reserv1                                       :0x0
14:47:14: Time Access 1 TAAC                            :0xe
14:47:14: Time Access 2 NSAC*100                        :0x0
14:47:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:14: Card Command Classess CCC                     :0x5b5
14:47:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:14: DSR(driver stage register)  DSR_IMP           :0x0
14:47:14: Reserv2                                       :0x0
14:47:14: Device Size C_SIZE                            :0xedc8
14:47:14: Reserv3                                       :0x0
14:47:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:14: Reserv4                                       :0x0
14:47:14: Write Speed Factor R2W_FACTOR                 :0x2
14:47:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:14: FILE_FORMAT_GRP                               :0x0
14:47:14: COPY flag                                     :0x1
14:47:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:14: File_Format                                   :0x0
14:47:14: CRC                                           :0x0
14:47:14: ####CSD Registe Values####  

14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py_sfcl.CommandDataDefinition object at 0x05E04990>) , Command count = 5049 ] 
14:47:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07450>, <py_sfcl.CommandDataDefinition object at 0x05E04750>) , Command count = 5050 ] 
14:47:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F3C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E04510>, <py_sfcl.PySEnhancedCmdData object at 0x05E04120>, <None>, <py_sfcl.Command23 object at 0x05E10180>) , Command count = 5051 ] 
14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0xA00F to EndLba:0xA010 with Increment Pattern
14:47:15: [ WrLbaNoData(0xA00F, 0x1, <0x400/0x200, Arb>, py_sfcl.Pattern.INCREMENTAL, True, False, False, False, 0x0, False, 0x0) , Command count = 5052 ] 
14:47:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0xA00F to EndLba:0xA010 with Increment Pattern 

14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Inner loop Count 23
14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F840>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E007B0>, <py_sfcl.PySEnhancedCmdData object at 0x05E00A80>, <None>, <py_sfcl.Command23 object at 0x05E10F00>) , Command count = 5053 ] 
14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission called
14:47:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x05E0FC30>, <py_sfcl.PySEnhancedCmdData object at 0x05E04F60>, <None>, <py_sfcl.Command23 object at 0x05E10090>) , Command count = 5054 ] 
14:47:15: STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump[INFO] ### Multiple Write Stop Transmission Completed

14:47:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:15: Failed Running script <module 'STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST37_DVT_ST_CMD0_2_15_During_Data_Jump.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:15: ########################################
14:47:15: ########################################
14:47:15: Stated Running script STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap 
14:47:15: ########################################
14:47:16: ###### Running STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap Test ###### 

14:47:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:16: Failed Running script <module 'STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST38_DVT_ST_CMD0_2_16_During_Data_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:16: ########################################
14:47:16: ########################################
14:47:16: Stated Running script STPTRNSABRTST11_DVT_R1b_3_4_CMD0_During_Busy_CMD12 
14:47:16: ########################################
14:47:16: ###### Running STPTRNSABRTST11_DVT_R1b_3_4_CMD0_During_Busy_CMD12 Test 
14:47:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:16: Failed Running script <module 'STPTRNSABRTST11_DVT_R1b_3_4_CMD0_During_Busy_CMD12' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST11_DVT_R1b_3_4_CMD0_During_Busy_CMD12.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:16: ########################################
14:47:16: 


14:47:16: ########################################
14:47:16: The Script <class 'STPTRNSABRTST06_6_Call_All_CMD0.call_All_CMD0'> had 5 error on running 
14:47:16: ########################################

2016-11-21 14:47:16: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST06_6_Call_All_CMD0.py", line 107, in RunTestProcedure
     self.call_All_CMD0Obj.Run(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST06_6_Call_All_CMD0.py", line 80, in Run
     raise TestError.TestFailedError("The Script %s had %d error on running "%(self.__class__,ScriptsStatus))



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'STPTRNSABRTST<NUM>_<NUM>_Call_All_CMD<NUM>.call_All_CMD<NUM>'> had <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST06_6_Call_All_CMD0.call_All_CMD0'> had 5 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   5035 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E007E0>, py_     1073.178       170.3   read=  0, write=  0                 0       
   5036 SetVolt(<py_sfcl.SDVoltage object at 0x05DFBE40>, 0, T)                    1075.458        17.9   read=  0, write=  0                 0       
   5037 SetVolt(<py_sfcl.SDVoltage object at 0x05E07DB0>, 0, F)                    1075.476        28.2   read=  0, write=  0                 0       
   5038 CardSetTimeOut(1F4, FA, 64)                                                1075.505         1.7   read=  0, write=  0                 0       
   5039 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,     1075.508       209.3   read=  0, write=  0                 C1FF8000
   5040 SwitchVolt_CMD11(T, 0, 5)                                                  1075.718         8.4   read=  0, write=  0                 0       
   5041 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F930>, <py     1075.727         4.0   read=  0, write=  0                 0       
   5042 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB660>, <py     1075.731         3.5   read=  0, write=  0                 0       
   5043 SetCardRCA(1, D555)                                                        1075.734         1.4   read=  0, write=  0                 'Obj'   
   5044 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFBBD0>, <py     1075.913         3.2   read=  0, write=  0                 0       
   5045 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5A80>, <py     1075.916         6.0   read=  0, write=  0                 0       
   5046 SetBusWidth(4)                                                             1075.922         3.5   read=  0, write=  0                 0       
   5047 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x05E00060>, <200/20     1075.926         7.3   read=  0, write=  0                 0       
   5048 CardSwitchCmd(T, [2,F,F,1,F,F], <40/200, 0>, 40)                           1075.934         6.9   read=  0, write=  0                 0       
   5049 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07CF0>, <py     1076.519         3.2   read=  0, write=  0                 0       
   5050 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E040F0>, <py     1076.522       261.6   read=  0, write=  0                 0       
   5051 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05DFB6C0>, py_     1076.784        10.3   read=  0, write=  0                 0       
   5052 WrLbaNoData(A00F, 1, <400/200, Arb>, py_sfcl.Pattern.INCREMENTAL, T, F     1076.795       209.0   read=  0, write=  0                 0       
   5053 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F3C0>, py_     1077.004         9.0   read=  0, write=  0                 0       
   5054 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05E0F840>, py_     1077.013       234.3   read=  0, write=  0                 0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:17:57


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    250 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA 2705.894818   NA                                  0       
     98 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA 2652.295716   NA                                  0       
     65 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE,           NA 2642.624762   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E0F4B0>, <py           NA  386.103456   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E07F00>, <py           NA  370.312505   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04810>, <py           NA  354.798651   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB690>, <py           NA  354.725604   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04CC0>, <py           NA  354.610599   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04450>, <py           NA  326.489099   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E00D20>, <py           NA  323.680692   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5540>, <py           NA  323.633905   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5240>, <py           NA  321.595214   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04600>, <py           NA  307.995991   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04C30>, <py           NA  307.929283   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB450>, <py           NA  307.876761   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB210>, <py           NA  307.873139   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DFB300>, <py           NA  307.842048   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05E04B10>, <py           NA  307.832993   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DF5ED0>, <py           NA  307.748777   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05DE9750>, <py           NA  305.686843   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 5053


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:17:57.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST06_6_Call_All_CMD0.call_All_CMD0'> had 5 error on running(azkaban)



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

