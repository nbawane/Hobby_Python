16:10:09: Sata Disconnector Board found in COM1.
16:10:13: *****************************************************

16:10:13: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

16:10:13: *                                                   *

16:10:13: *  Compatibility with this version is not verified! *

16:10:13: *****************************************************

16:10:15: [ DeviceSetupCompletion() , Command count = 7 ] 
16:10:15: Testname Mapping: ScriptName=[RTHHCCallAll02_CallAllReset_1_UHS_I] -> TestId=[RTHHCCallAll02]
16:10:15: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
16:10:15: [ GetPhysicalChipsInfo() , Command count = 9 ] 
16:10:15: [ GetFileSize(0xEA) , Command count = 10 ] 
16:10:15: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
16:10:15: [ GetFileSize(0x16) , Command count = 12 ] 
16:10:15: [ GetCardStatus() , Command count = 13 ] 
16:10:15: [ GetFileSize(0x18) , Command count = 14 ] 
16:10:15: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
16:10:15: [ GetFileSize(0x15) , Command count = 16 ] 
16:10:15: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
16:10:16: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
16:10:16: [ GetFileSize(0xE) , Command count = 18 ] 
16:10:16: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
16:10:16: [ GetFileSize(0x1E) , Command count = 20 ] 
16:10:16: [ GetCardStatus() , Command count = 21 ] 
16:10:16: [ GetFileSize(0x21) , Command count = 22 ] 
16:10:16: [ GetCardStatus() , Command count = 23 ] 
16:10:16: [ GetFileSize(0x33) , Command count = 24 ] 
16:10:16: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
16:10:16: [ GetFileSize(0x1F) , Command count = 26 ] 
16:10:16: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
16:10:16: [ GetFileSize(0x2A) , Command count = 28 ] 
16:10:16: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
16:10:16: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
16:10:16: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
16:10:16: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
16:10:16: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
16:10:16: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
16:10:16: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
16:10:16: [ GetFileSize(0x33) , Command count = 36 ] 
16:10:16: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
16:10:16: [ GetFileSize(0x33) , Command count = 38 ] 
16:10:16: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
16:10:16: [ GetIpVersionInfo() , Command count = 40 ] 
16:10:16: [ GetPhysicalChipsInfo() , Command count = 41 ] 
16:10:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06482660>, <0x200/0x200, Arb>) , Command count = 42 ] 
16:10:16: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=RTHHCCallAll02 --dbconnection=none --adapter=SD05771_ASVU --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05771_ASVU): (Slot#:0)
Adapter serial number      :  SD05771_ASVU
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 16:10:16
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05771_ASVU
   --extcmdset                                      : FBCC
   --sdtestid                                       : RTHHCCallAll02
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 54082992874
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: RTHHCCallAll02_CallAllReset_1_UHS_I >>>>>>>>>>>>>>>



16:10:17: MaxLba of the card: 0x3B72400 
16:10:21: [RTHHCCallAll02_CallAllReset_1_UHS_I.py]###### Test to run callAllReset_2
16:10:21: [RTHHCCallAll02_CallAllReset_1_UHS_I]### TEST SCRIPT IS STARTED.
16:10:21: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py] ##########
16:10:21: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI007_1_1_1_1 ##########
16:10:27: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
16:10:27: [GO7_globalPreTestingSettings]### Default Initialization Start
16:10:27: [DVTCommonLib]###  SwitchHostVoltageRegion called
16:10:27: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
16:10:27: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

16:10:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
16:10:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
16:10:30: [ CardInit() , Command count = 47 ] 
16:10:30: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165762
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

16:10:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:30: ####CSD Registe 2.0 Values####
16:10:30: CSD_STRUCTURE                                 :0x1
16:10:30: Reserv1                                       :0x0
16:10:30: Time Access 1 TAAC                            :0xe
16:10:30: Time Access 2 NSAC*100                        :0x0
16:10:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:30: Card Command Classess CCC                     :0x5b5
16:10:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:30: DSR(driver stage register)  DSR_IMP           :0x0
16:10:30: Reserv2                                       :0x0
16:10:30: Device Size C_SIZE                            :0xedc8
16:10:30: Reserv3                                       :0x0
16:10:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:30: Reserv4                                       :0x0
16:10:30: Write Speed Factor R2W_FACTOR                 :0x2
16:10:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:30: FILE_FORMAT_GRP                               :0x0
16:10:30: COPY flag                                     :0x1
16:10:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:30: File_Format                                   :0x0
16:10:30: CRC                                           :0x0
16:10:30: ####CSD Registe Values####  

16:10:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:30: ProductSerialNumber = 0x23482900
16:10:30: CardMaximumLBA      = 0x3b72400
16:10:30: CardCapacity        = 32G
16:10:30: Is card secure      = 0
16:10:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:30: [GO7_globalPreTestingSettings]### Default Initialization Completed 


16:10:30: [GO4_globalInitCard]### Switch to Specify Card Type
16:10:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:32: Host Frequency set to 25000 KHz
16:10:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:32: [GO18_globalSetVolt]### Set Host Voltage value.
16:10:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:10:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06603900>, 0x0, True) , Command count = 49 ] 
16:10:32: [GO18_globalSetVolt]### Host voltage value is set.
16:10:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:10:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06603BA0>, 0x0, False) , Command count = 50 ] 
16:10:32: [GO18_globalSetVolt]### Host voltage value is set.
16:10:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
16:10:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
16:10:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:10:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
16:10:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:10:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603F30>, <py_sfcl.CommandDataDefinition object at 0x06603960>) , Command count = 54 ] 
16:10:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066037B0>, <py_sfcl.CommandDataDefinition object at 0x06603720>) , Command count = 55 ] 
16:10:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:10:32: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
16:10:32: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:32: Host Frequency set to 25000 KHz
16:10:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:32: ####CSD Registe 2.0 Values####
16:10:32: CSD_STRUCTURE                                 :0x1
16:10:32: Reserv1                                       :0x0
16:10:32: Time Access 1 TAAC                            :0xe
16:10:32: Time Access 2 NSAC*100                        :0x0
16:10:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:32: Card Command Classess CCC                     :0x5b5
16:10:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:32: DSR(driver stage register)  DSR_IMP           :0x0
16:10:32: Reserv2                                       :0x0
16:10:32: Device Size C_SIZE                            :0xedc8
16:10:32: Reserv3                                       :0x0
16:10:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:32: Reserv4                                       :0x0
16:10:32: Write Speed Factor R2W_FACTOR                 :0x2
16:10:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:32: FILE_FORMAT_GRP                               :0x0
16:10:32: COPY flag                                     :0x1
16:10:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:32: File_Format                                   :0x0
16:10:32: CRC                                           :0x0
16:10:32: ####CSD Registe Values####  

16:10:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:10:32: [GetSCRRegisterEntry] Passed
16:10:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:10:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:10:32: Data_Status_After Erases          : 0
16:10:32: CPRM Security Support             : No Security
16:10:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:10:32: Spec. Version                     : Version 3.0X
16:10:32: Extended Security Support         : Extended_Security_Not_Supported
16:10:32: Command Support                   : COMMAND_SUPPORT
16:10:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:10:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603A50>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 57 ] 
16:10:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:10:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603690>, <py_sfcl.CommandDataDefinition object at 0x06603510>) , Command count = 58 ] 
16:10:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:10:32: [ SetBusWidth(0x4) , Command count = 59 ] 
16:10:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:10:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06603AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
16:10:32: Protected Area Size 0x28000
16:10:32: Bus Width           2
16:10:32: Secure Mode         0
16:10:32: Speed  Class        4
16:10:32: Perf Move           0
16:10:32: Au Size             9
16:10:32: Erase Size          15
16:10:32: Erase Timeout       1
16:10:32: Erase offset        1
16:10:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:10:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:10:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:10:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
16:10:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:10:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:10:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:10:32: Host Frequency set to 100000 KHz
16:10:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:10:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:32: ####CSD Registe 2.0 Values####
16:10:32: CSD_STRUCTURE                                 :0x1
16:10:32: Reserv1                                       :0x0
16:10:32: Time Access 1 TAAC                            :0xe
16:10:32: Time Access 2 NSAC*100                        :0x0
16:10:32: Data Transfer Rate TRAN_SPEED                 :0xb
16:10:32: Card Command Classess CCC                     :0x5b5
16:10:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:32: DSR(driver stage register)  DSR_IMP           :0x0
16:10:32: Reserv2                                       :0x0
16:10:32: Device Size C_SIZE                            :0xedc8
16:10:32: Reserv3                                       :0x0
16:10:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:32: Reserv4                                       :0x0
16:10:32: Write Speed Factor R2W_FACTOR                 :0x2
16:10:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:32: FILE_FORMAT_GRP                               :0x0
16:10:32: COPY flag                                     :0x1
16:10:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:32: File_Format                                   :0x0
16:10:32: CRC                                           :0x0
16:10:32: ####CSD Registe Values####  

16:10:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603E70>, <py_sfcl.CommandDataDefinition object at 0x06603BD0>) , Command count = 62 ] 
16:10:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:10:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603DE0>, <py_sfcl.CommandDataDefinition object at 0x06603660>) , Command count = 63 ] 
16:10:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:10:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:10:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06603D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
16:10:33: Protected Area Size 0x28000
16:10:33: Bus Width           2
16:10:33: Secure Mode         0
16:10:33: Speed  Class        4
16:10:33: Perf Move           0
16:10:33: Au Size             9
16:10:33: Erase Size          15
16:10:33: Erase Timeout       1
16:10:33: Erase offset        1
16:10:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:10:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:10:33: [RT2HCSDUHSI007_1_1_1_1.py]POWER : OFF and ON
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]RESET card
16:10:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 65 ] 
16:10:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:35: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:10:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:10:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 66 ] 
16:10:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
16:10:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603A80>, <py_sfcl.CommandDataDefinition object at 0x06603D20>) , Command count = 67 ] 
16:10:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603870>) , Command count = 68 ] 
16:10:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:10:35: [ SetCardRCA(0x1, 0xD555) , Command count = 69 ] 
16:10:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]Set bus width as 4
16:10:35: [ SetBusWidth(0x4) , Command count = 70 ] 
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetTO
16:10:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 71 ] 
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetVolt
16:10:35: [GO18_globalSetVolt]### Set Host Voltage value.
16:10:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:10:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0660C0C0>, 0x0, True) , Command count = 72 ] 
16:10:35: [GO18_globalSetVolt]### Host voltage value is set.
16:10:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:10:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0660C0F0>, 0x0, False) , Command count = 73 ] 
16:10:35: [GO18_globalSetVolt]### Host voltage value is set.
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetLSHostFreq
16:10:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:35: Host Frequency set to 25000 KHz
16:10:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]*********Soft Reset*********
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]RESET card
16:10:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 74 ] 
16:10:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
16:10:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
16:10:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C150>, <py_sfcl.CommandDataDefinition object at 0x0660C180>) , Command count = 75 ] 
16:10:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C1E0>, <py_sfcl.CommandDataDefinition object at 0x0660C210>) , Command count = 76 ] 
16:10:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:35: [ SetCardRCA(0x1, 0xD555) , Command count = 77 ] 
16:10:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]Set bus width as 4
16:10:35: [ SetBusWidth(0x4) , Command count = 78 ] 
16:10:35: [RT2HCSDUHSI007_1_1_1_1.py]CALL : AddressForWriteRead
16:10:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:35: ####CSD Registe 2.0 Values####
16:10:35: CSD_STRUCTURE                                 :0x1
16:10:35: Reserv1                                       :0x0
16:10:35: Time Access 1 TAAC                            :0xe
16:10:35: Time Access 2 NSAC*100                        :0x0
16:10:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:35: Card Command Classess CCC                     :0x5b5
16:10:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:35: DSR(driver stage register)  DSR_IMP           :0x0
16:10:35: Reserv2                                       :0x0
16:10:35: Device Size C_SIZE                            :0xedc8
16:10:35: Reserv3                                       :0x0
16:10:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:35: Reserv4                                       :0x0
16:10:35: Write Speed Factor R2W_FACTOR                 :0x2
16:10:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:35: FILE_FORMAT_GRP                               :0x0
16:10:35: COPY flag                                     :0x1
16:10:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:35: File_Format                                   :0x0
16:10:35: CRC                                           :0x0
16:10:35: ####CSD Registe Values####  

16:10:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:10:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:35: ProductSerialNumber = 0x23482900
16:10:35: CardMaximumLBA      = 0x3b72400
16:10:35: CardCapacity        = 32G
16:10:35: Is card secure      = 0
16:10:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:35: [DVTCommonLib]###  LogicalWrite called
16:10:37: [ WriteLba(0x10CD65D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 79 ] 
16:10:37: [DVTCommonLib]###  LogicalWrite Completed 

16:10:37: [DVTCommonLib]###  LogicalRead called
16:10:38: [ ReadLba(0x10CD65D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 80 ] 
16:10:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:38: [RT2HCSDUHSI007_1_1_1_1.py]*********Power Cycle Reset*********
16:10:38: [RT2HCSDUHSI007_1_1_1_1.py]POWER : OFF and ON
16:10:41: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetResetFreq
16:10:41: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:10:41: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:10:41: [RT2HCSDUHSI007_1_1_1_1.py]RUNNING Cmd8, Cmd55, ACmd41 
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613870>, <py_sfcl.CommandDataDefinition object at 0x066138A0>) , Command count = 81 ] 
16:10:41: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613960>, <py_sfcl.CommandDataDefinition object at 0x06613990>) , Command count = 82 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066139F0>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 83 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613A80>, <py_sfcl.CommandDataDefinition object at 0x06613AB0>) , Command count = 84 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613B10>, <py_sfcl.CommandDataDefinition object at 0x06613B40>) , Command count = 85 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613BA0>, <py_sfcl.CommandDataDefinition object at 0x06613BD0>) , Command count = 86 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613C30>, <py_sfcl.CommandDataDefinition object at 0x06613C60>) , Command count = 87 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613CC0>, <py_sfcl.CommandDataDefinition object at 0x06613CF0>) , Command count = 88 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613D50>, <py_sfcl.CommandDataDefinition object at 0x06613D80>) , Command count = 89 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613DE0>, <py_sfcl.CommandDataDefinition object at 0x06613E10>) , Command count = 90 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613E70>, <py_sfcl.CommandDataDefinition object at 0x06613EA0>) , Command count = 91 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613F00>, <py_sfcl.CommandDataDefinition object at 0x06613F30>) , Command count = 92 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613F90>, <py_sfcl.CommandDataDefinition object at 0x06613FC0>) , Command count = 93 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619060>, <py_sfcl.CommandDataDefinition object at 0x06619090>) , Command count = 94 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066190F0>, <py_sfcl.CommandDataDefinition object at 0x06619120>) , Command count = 95 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619180>, <py_sfcl.CommandDataDefinition object at 0x066191B0>) , Command count = 96 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x06619240>) , Command count = 97 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 98 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619330>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 99 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066193C0>, <py_sfcl.CommandDataDefinition object at 0x066193F0>) , Command count = 100 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619450>, <py_sfcl.CommandDataDefinition object at 0x06619480>) , Command count = 101 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066194E0>, <py_sfcl.CommandDataDefinition object at 0x06619510>) , Command count = 102 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619570>, <py_sfcl.CommandDataDefinition object at 0x066195A0>) , Command count = 103 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619600>, <py_sfcl.CommandDataDefinition object at 0x06619630>) , Command count = 104 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 105 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619720>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 106 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066197B0>, <py_sfcl.CommandDataDefinition object at 0x066197E0>) , Command count = 107 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619840>, <py_sfcl.CommandDataDefinition object at 0x06619870>) , Command count = 108 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066198D0>, <py_sfcl.CommandDataDefinition object at 0x06619900>) , Command count = 109 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619960>, <py_sfcl.CommandDataDefinition object at 0x06619990>) , Command count = 110 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066199F0>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 111 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619A80>, <py_sfcl.CommandDataDefinition object at 0x06619AB0>) , Command count = 112 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619B40>) , Command count = 113 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619BA0>, <py_sfcl.CommandDataDefinition object at 0x06619BD0>) , Command count = 114 ] 
16:10:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619C30>, <py_sfcl.CommandDataDefinition object at 0x06619C60>) , Command count = 115 ] 
16:10:41: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:10:41: [ SetCardCap(True) , Command count = 116 ] 
16:10:41: [ SetSdMmcCardMode(0x2, True) , Command count = 117 ] 
16:10:41: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:10:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:10:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 118 ] 
16:10:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:10:41: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
16:10:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619EA0>, <py_sfcl.CommandDataDefinition object at 0x06619ED0>) , Command count = 119 ] 
16:10:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619F30>, <py_sfcl.CommandDataDefinition object at 0x06619F60>) , Command count = 120 ] 
16:10:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:10:41: [ SetCardRCA(0x1, 0xD555) , Command count = 121 ] 
16:10:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:41: [RT2HCSDUHSI007_1_1_1_1.py]Set bus width as 4
16:10:41: [ SetBusWidth(0x4) , Command count = 122 ] 
16:10:41: [RT2HCSDUHSI007_1_1_1_1.py]CALL : globalSetLSHostFreq
16:10:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:41: Host Frequency set to 25000 KHz
16:10:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:41: [RT2HCSDUHSI007_1_1_1_1.py]CALL : AddressForWriteRead
16:10:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:41: ####CSD Registe 2.0 Values####
16:10:41: CSD_STRUCTURE                                 :0x1
16:10:41: Reserv1                                       :0x0
16:10:41: Time Access 1 TAAC                            :0xe
16:10:41: Time Access 2 NSAC*100                        :0x0
16:10:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:41: Card Command Classess CCC                     :0x5b5
16:10:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:41: DSR(driver stage register)  DSR_IMP           :0x0
16:10:41: Reserv2                                       :0x0
16:10:41: Device Size C_SIZE                            :0xedc8
16:10:41: Reserv3                                       :0x0
16:10:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:41: Reserv4                                       :0x0
16:10:41: Write Speed Factor R2W_FACTOR                 :0x2
16:10:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:41: FILE_FORMAT_GRP                               :0x0
16:10:41: COPY flag                                     :0x1
16:10:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:41: File_Format                                   :0x0
16:10:41: CRC                                           :0x0
16:10:41: ####CSD Registe Values####  

16:10:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:10:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:41: ProductSerialNumber = 0x23482900
16:10:41: CardMaximumLBA      = 0x3b72400
16:10:41: CardCapacity        = 32G
16:10:41: Is card secure      = 0
16:10:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:41: [DVTCommonLib]###  LogicalWrite called
16:10:43: [ WriteLba(0x18AFA11, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 123 ] 
16:10:43: [DVTCommonLib]###  LogicalWrite Completed 

16:10:43: [DVTCommonLib]###  LogicalRead called
16:10:44: [ ReadLba(0x18AFA11, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 124 ] 
16:10:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:44: [RT2HCSDUHSI007_1_1_1_1.py]*********Power Cycle & CMD 0 Reset*********
16:10:44: [RT2HCSDUHSI007_1_1_1_1.py]POWER : OFF and ON
16:10:46: [RT2HCSDUHSI007_1_1_1_1.py]RESET card and IDENTIFICATION of the card
16:10:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 125 ] 
16:10:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:46: [RT2HCSDUHSI007_1_1_1_1.py]Identification of the card
16:10:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C0C0>, <py_sfcl.CommandDataDefinition object at 0x0661C120>) , Command count = 126 ] 
16:10:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C180>, <py_sfcl.CommandDataDefinition object at 0x0661C1B0>) , Command count = 127 ] 
16:10:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:46: [ SetCardRCA(0x1, 0xD555) , Command count = 128 ] 
16:10:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:46: [RT2HCSDUHSI007_1_1_1_1.py]CALL : AddressForWriteRead
16:10:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:46: ####CSD Registe 2.0 Values####
16:10:46: CSD_STRUCTURE                                 :0x1
16:10:46: Reserv1                                       :0x0
16:10:46: Time Access 1 TAAC                            :0xe
16:10:46: Time Access 2 NSAC*100                        :0x0
16:10:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:46: Card Command Classess CCC                     :0x5b5
16:10:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:46: DSR(driver stage register)  DSR_IMP           :0x0
16:10:46: Reserv2                                       :0x0
16:10:46: Device Size C_SIZE                            :0xedc8
16:10:46: Reserv3                                       :0x0
16:10:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:46: Reserv4                                       :0x0
16:10:46: Write Speed Factor R2W_FACTOR                 :0x2
16:10:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:46: FILE_FORMAT_GRP                               :0x0
16:10:46: COPY flag                                     :0x1
16:10:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:46: File_Format                                   :0x0
16:10:46: CRC                                           :0x0
16:10:46: ####CSD Registe Values####  

16:10:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:10:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:46: ProductSerialNumber = 0x23482900
16:10:46: CardMaximumLBA      = 0x3b72400
16:10:46: CardCapacity        = 32G
16:10:46: Is card secure      = 0
16:10:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:46: [DVTCommonLib]###  LogicalWrite called
16:10:48: [ WriteLba(0x1530381, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 129 ] 
16:10:48: [DVTCommonLib]###  LogicalWrite Completed 

16:10:48: [DVTCommonLib]###  LogicalRead called
16:10:50: [ ReadLba(0x1530381, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 130 ] 
16:10:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:50: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:50: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI022_1_1_1_2  ##########
16:10:50: [GO4_globalInitCard]### Switch to Specify Card Type
16:10:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:52: Host Frequency set to 25000 KHz
16:10:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:52: [GO18_globalSetVolt]### Set Host Voltage value.
16:10:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:10:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0661C4B0>, 0x0, True) , Command count = 131 ] 
16:10:52: [GO18_globalSetVolt]### Host voltage value is set.
16:10:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:10:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0661C2D0>, 0x0, False) , Command count = 132 ] 
16:10:52: [GO18_globalSetVolt]### Host voltage value is set.
16:10:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 133 ] 
16:10:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 134 ] 
16:10:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:10:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 135 ] 
16:10:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:10:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C450>, <py_sfcl.CommandDataDefinition object at 0x0661C3F0>) , Command count = 136 ] 
16:10:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C480>, <py_sfcl.CommandDataDefinition object at 0x0661C4E0>) , Command count = 137 ] 
16:10:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:10:52: [ SetCardRCA(0x1, 0xD555) , Command count = 138 ] 
16:10:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:52: Host Frequency set to 25000 KHz
16:10:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:52: ####CSD Registe 2.0 Values####
16:10:52: CSD_STRUCTURE                                 :0x1
16:10:52: Reserv1                                       :0x0
16:10:52: Time Access 1 TAAC                            :0xe
16:10:52: Time Access 2 NSAC*100                        :0x0
16:10:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:52: Card Command Classess CCC                     :0x5b5
16:10:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:52: DSR(driver stage register)  DSR_IMP           :0x0
16:10:52: Reserv2                                       :0x0
16:10:52: Device Size C_SIZE                            :0xedc8
16:10:52: Reserv3                                       :0x0
16:10:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:52: Reserv4                                       :0x0
16:10:52: Write Speed Factor R2W_FACTOR                 :0x2
16:10:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:52: FILE_FORMAT_GRP                               :0x0
16:10:52: COPY flag                                     :0x1
16:10:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:52: File_Format                                   :0x0
16:10:52: CRC                                           :0x0
16:10:52: ####CSD Registe Values####  

16:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:10:52: [GetSCRRegisterEntry] Passed
16:10:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:10:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:10:52: Data_Status_After Erases          : 0
16:10:52: CPRM Security Support             : No Security
16:10:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:10:52: Spec. Version                     : Version 3.0X
16:10:52: Extended Security Support         : Extended_Security_Not_Supported
16:10:52: Command Support                   : COMMAND_SUPPORT
16:10:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C750>, <py_sfcl.CommandDataDefinition object at 0x0661C570>) , Command count = 139 ] 
16:10:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 140 ] 
16:10:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:10:52: [ SetBusWidth(0x4) , Command count = 141 ] 
16:10:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:10:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0661C6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 142 ] 
16:10:52: Protected Area Size 0x28000
16:10:52: Bus Width           2
16:10:52: Secure Mode         0
16:10:52: Speed  Class        4
16:10:52: Perf Move           0
16:10:52: Au Size             9
16:10:52: Erase Size          15
16:10:52: Erase Timeout       1
16:10:52: Erase offset        1
16:10:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:10:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:10:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:10:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 143 ] 
16:10:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:10:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:10:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:10:52: Host Frequency set to 100000 KHz
16:10:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:10:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:52: ####CSD Registe 2.0 Values####
16:10:52: CSD_STRUCTURE                                 :0x1
16:10:52: Reserv1                                       :0x0
16:10:52: Time Access 1 TAAC                            :0xe
16:10:52: Time Access 2 NSAC*100                        :0x0
16:10:52: Data Transfer Rate TRAN_SPEED                 :0xb
16:10:52: Card Command Classess CCC                     :0x5b5
16:10:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:52: DSR(driver stage register)  DSR_IMP           :0x0
16:10:52: Reserv2                                       :0x0
16:10:52: Device Size C_SIZE                            :0xedc8
16:10:52: Reserv3                                       :0x0
16:10:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:52: Reserv4                                       :0x0
16:10:52: Write Speed Factor R2W_FACTOR                 :0x2
16:10:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:52: FILE_FORMAT_GRP                               :0x0
16:10:52: COPY flag                                     :0x1
16:10:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:52: File_Format                                   :0x0
16:10:52: CRC                                           :0x0
16:10:52: ####CSD Registe Values####  

16:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C9C0>, <py_sfcl.CommandDataDefinition object at 0x0661C7E0>) , Command count = 144 ] 
16:10:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:10:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C840>, <py_sfcl.CommandDataDefinition object at 0x0661C870>) , Command count = 145 ] 
16:10:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:10:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetTO
16:10:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 146 ] 
16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetTO CALL got Completed 

16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetVolt
16:10:52: [GO18_globalSetVolt]### Set Host Voltage value.
16:10:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:10:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0661C930>, 0x0, True) , Command count = 147 ] 
16:10:52: [GO18_globalSetVolt]### Host voltage value is set.
16:10:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:10:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0661C960>, 0x0, False) , Command count = 148 ] 
16:10:52: [GO18_globalSetVolt]### Host voltage value is set.
16:10:52: [RT2HCSDUHSI022_1_1_1_2.py] globalSetVolt CALL got Completed

16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
16:10:52: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:10:52: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetResetFreq CALL got Completed

16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]***Test CMD 8' s out of sequence during Soft Reset***
16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]SET RCA
16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]setting of RCA value completed

16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]Run cmd0, cmd8, cmd55, acmd41
16:10:52: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Begins
16:10:53: [ HostReset(False) , Command count = 149 ] 
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Completed

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]: Run Cmd0()
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CA80>, <py_sfcl.CommandDataDefinition object at 0x0661CAB0>) , Command count = 150 ] 
16:10:53: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]: Cmd0() Execution successfull

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CB10>, <py_sfcl.CommandDataDefinition object at 0x0661CB40>) , Command count = 151 ] 
16:10:53: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613930>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 152 ] 
16:10:53: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CBA0>, <py_sfcl.CommandDataDefinition object at 0x0661CC60>) , Command count = 153 ] 
16:10:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 154 ] 
16:10:53: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CD50>, <py_sfcl.CommandDataDefinition object at 0x0661CD80>) , Command count = 155 ] 
16:10:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDE0>, <py_sfcl.CommandDataDefinition object at 0x0661CE10>) , Command count = 156 ] 
16:10:53: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CE70>, <py_sfcl.CommandDataDefinition object at 0x0661CEA0>) , Command count = 157 ] 
16:10:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF00>, <py_sfcl.CommandDataDefinition object at 0x0661CF30>) , Command count = 158 ] 
16:10:53: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Set High Capacity of the card
16:10:53: [ SetCardCap(True) , Command count = 159 ] 
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Setting Capacity of the card Completed

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Set card mode as SD
16:10:53: [ SetSdMmcCardMode(0x2, True) , Command count = 160 ] 
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Card mode got Changed to SD

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Card Identification Test begins
16:10:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620030>, <py_sfcl.CommandDataDefinition object at 0x06620060>) , Command count = 161 ] 
16:10:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066200C0>, <py_sfcl.CommandDataDefinition object at 0x066200F0>) , Command count = 162 ] 
16:10:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:53: [ SetCardRCA(0x1, 0xD555) , Command count = 163 ] 
16:10:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Card Identification Test Completed

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Set bus width as 4
16:10:53: [ SetBusWidth(0x4) , Command count = 164 ] 
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]Card bus width got set to 4 

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
16:10:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:53: Host Frequency set to 25000 KHz
16:10:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetResetFreq CALL got Completed

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetSpeedMode
16:10:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:10:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 165 ] 
16:10:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:10:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:10:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:10:53: Host Frequency set to 100000 KHz
16:10:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:10:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:53: ####CSD Registe 2.0 Values####
16:10:53: CSD_STRUCTURE                                 :0x1
16:10:53: Reserv1                                       :0x0
16:10:53: Time Access 1 TAAC                            :0xe
16:10:53: Time Access 2 NSAC*100                        :0x0
16:10:53: Data Transfer Rate TRAN_SPEED                 :0xb
16:10:53: Card Command Classess CCC                     :0x5b5
16:10:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:53: DSR(driver stage register)  DSR_IMP           :0x0
16:10:53: Reserv2                                       :0x0
16:10:53: Device Size C_SIZE                            :0xedc8
16:10:53: Reserv3                                       :0x0
16:10:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:53: Reserv4                                       :0x0
16:10:53: Write Speed Factor R2W_FACTOR                 :0x2
16:10:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:53: FILE_FORMAT_GRP                               :0x0
16:10:53: COPY flag                                     :0x1
16:10:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:53: File_Format                                   :0x0
16:10:53: CRC                                           :0x0
16:10:53: ####CSD Registe Values####  

16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620420>, <py_sfcl.CommandDataDefinition object at 0x06620210>) , Command count = 166 ] 
16:10:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:10:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620270>, <py_sfcl.CommandDataDefinition object at 0x066202A0>) , Command count = 167 ] 
16:10:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetSpeedMode CALL Completed

16:10:53: [RT2HCSDUHSI022_1_1_1_2.py]CALL : AddressForWriteRead
16:10:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:53: ####CSD Registe 2.0 Values####
16:10:53: CSD_STRUCTURE                                 :0x1
16:10:53: Reserv1                                       :0x0
16:10:53: Time Access 1 TAAC                            :0xe
16:10:53: Time Access 2 NSAC*100                        :0x0
16:10:53: Data Transfer Rate TRAN_SPEED                 :0xb
16:10:53: Card Command Classess CCC                     :0x5b5
16:10:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:53: DSR(driver stage register)  DSR_IMP           :0x0
16:10:53: Reserv2                                       :0x0
16:10:53: Device Size C_SIZE                            :0xedc8
16:10:53: Reserv3                                       :0x0
16:10:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:53: Reserv4                                       :0x0
16:10:53: Write Speed Factor R2W_FACTOR                 :0x2
16:10:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:53: FILE_FORMAT_GRP                               :0x0
16:10:53: COPY flag                                     :0x1
16:10:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:53: File_Format                                   :0x0
16:10:53: CRC                                           :0x0
16:10:53: ####CSD Registe Values####  

16:10:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:10:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:53: ProductSerialNumber = 0x23482900
16:10:53: CardMaximumLBA      = 0x3b72400
16:10:53: CardCapacity        = 32G
16:10:53: Is card secure      = 0
16:10:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:53: [DVTCommonLib]###  LogicalWrite called
16:10:55: [ WriteLba(0x19B4AFC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 168 ] 
16:10:55: [DVTCommonLib]###  LogicalWrite Completed 

16:10:55: [DVTCommonLib]###  LogicalRead called
16:10:56: [ ReadLba(0x19B4AFC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 169 ] 
16:10:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:56: [RT2HCSDUHSI022_1_1_1_2.py]: AddressForWriteRead CALL Completed

16:10:56: [RT2HCSDUHSI022_1_1_1_2.py]***Test CMD 8' s out of sequence during  Power Cycle Reset***
16:10:56: [RT2HCSDUHSI022_1_1_1_2.py]POWER : OFF and ON
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Begins
16:10:58: [ HostReset(False) , Command count = 170 ] 
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Completed

16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
16:10:58: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:10:58: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq Completed 

16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]: Set RCA value
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]: RCA value got set

16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620360>, <py_sfcl.CommandDataDefinition object at 0x066203C0>) , Command count = 171 ] 
16:10:58: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CC30>, <py_sfcl.CommandDataDefinition object at 0x066204B0>) , Command count = 172 ] 
16:10:58: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620480>, <py_sfcl.CommandDataDefinition object at 0x06620540>) , Command count = 173 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066205A0>, <py_sfcl.CommandDataDefinition object at 0x066205D0>) , Command count = 174 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620630>, <py_sfcl.CommandDataDefinition object at 0x06620660>) , Command count = 175 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066206C0>, <py_sfcl.CommandDataDefinition object at 0x066206F0>) , Command count = 176 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620750>, <py_sfcl.CommandDataDefinition object at 0x06620780>) , Command count = 177 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066207E0>, <py_sfcl.CommandDataDefinition object at 0x06620810>) , Command count = 178 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620870>, <py_sfcl.CommandDataDefinition object at 0x066208A0>) , Command count = 179 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620900>, <py_sfcl.CommandDataDefinition object at 0x06620930>) , Command count = 180 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620990>, <py_sfcl.CommandDataDefinition object at 0x066209C0>) , Command count = 181 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620A20>, <py_sfcl.CommandDataDefinition object at 0x06620A50>) , Command count = 182 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620AB0>, <py_sfcl.CommandDataDefinition object at 0x06620AE0>) , Command count = 183 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620B40>, <py_sfcl.CommandDataDefinition object at 0x06620B70>) , Command count = 184 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620BD0>, <py_sfcl.CommandDataDefinition object at 0x06620C00>) , Command count = 185 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620C60>, <py_sfcl.CommandDataDefinition object at 0x06620C90>) , Command count = 186 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620CF0>, <py_sfcl.CommandDataDefinition object at 0x06620D20>) , Command count = 187 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620D80>, <py_sfcl.CommandDataDefinition object at 0x06620DB0>) , Command count = 188 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620E10>, <py_sfcl.CommandDataDefinition object at 0x06620E40>) , Command count = 189 ] 
16:10:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620EA0>, <py_sfcl.CommandDataDefinition object at 0x06620ED0>) , Command count = 190 ] 
16:10:58: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]Set High Capacity of the card
16:10:58: [ SetCardCap(True) , Command count = 191 ] 
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]Setting up of Card Capacity Completed

16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]Set card mode as SD
16:10:58: [ SetSdMmcCardMode(0x2, True) , Command count = 192 ] 
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]Card mode got Changed to SD

16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:10:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:10:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 193 ] 
16:10:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:10:58: [RT2HCSDUHSI022_1_1_1_2.py]Identification of the card Begins
16:10:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620FC0>, <py_sfcl.CommandDataDefinition object at 0x066B5030>) , Command count = 194 ] 
16:10:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5090>, <py_sfcl.CommandDataDefinition object at 0x066B50C0>) , Command count = 195 ] 
16:10:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:10:58: [ SetCardRCA(0x1, 0xD555) , Command count = 196 ] 
16:10:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]:Identification Test got Completed

16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]Set bus width as 4
16:10:59: [ SetBusWidth(0x4) , Command count = 197 ] 
16:10:59: [RT2HCSDUHSI022_1_1_1_2.py] Bus width as got changed to 4

16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetHostFreq
16:10:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:10:59: Host Frequency set to 25000 KHz
16:10:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalsetHostFreq Completed

16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetSpeedMode
16:10:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:10:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 198 ] 
16:10:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:10:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:10:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:10:59: Host Frequency set to 100000 KHz
16:10:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:10:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:59: ####CSD Registe 2.0 Values####
16:10:59: CSD_STRUCTURE                                 :0x1
16:10:59: Reserv1                                       :0x0
16:10:59: Time Access 1 TAAC                            :0xe
16:10:59: Time Access 2 NSAC*100                        :0x0
16:10:59: Data Transfer Rate TRAN_SPEED                 :0xb
16:10:59: Card Command Classess CCC                     :0x5b5
16:10:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:59: DSR(driver stage register)  DSR_IMP           :0x0
16:10:59: Reserv2                                       :0x0
16:10:59: Device Size C_SIZE                            :0xedc8
16:10:59: Reserv3                                       :0x0
16:10:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:59: Reserv4                                       :0x0
16:10:59: Write Speed Factor R2W_FACTOR                 :0x2
16:10:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:59: FILE_FORMAT_GRP                               :0x0
16:10:59: COPY flag                                     :0x1
16:10:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:59: File_Format                                   :0x0
16:10:59: CRC                                           :0x0
16:10:59: ####CSD Registe Values####  

16:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B53C0>, <py_sfcl.CommandDataDefinition object at 0x066B51B0>) , Command count = 199 ] 
16:10:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:10:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5210>, <py_sfcl.CommandDataDefinition object at 0x066B5240>) , Command count = 200 ] 
16:10:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetSpeedMode CALL Completed

16:10:59: [RT2HCSDUHSI022_1_1_1_2.py]CALL : AddressForWriteRead
16:10:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:59: ####CSD Registe 2.0 Values####
16:10:59: CSD_STRUCTURE                                 :0x1
16:10:59: Reserv1                                       :0x0
16:10:59: Time Access 1 TAAC                            :0xe
16:10:59: Time Access 2 NSAC*100                        :0x0
16:10:59: Data Transfer Rate TRAN_SPEED                 :0xb
16:10:59: Card Command Classess CCC                     :0x5b5
16:10:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:59: DSR(driver stage register)  DSR_IMP           :0x0
16:10:59: Reserv2                                       :0x0
16:10:59: Device Size C_SIZE                            :0xedc8
16:10:59: Reserv3                                       :0x0
16:10:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:59: Reserv4                                       :0x0
16:10:59: Write Speed Factor R2W_FACTOR                 :0x2
16:10:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:59: FILE_FORMAT_GRP                               :0x0
16:10:59: COPY flag                                     :0x1
16:10:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:59: File_Format                                   :0x0
16:10:59: CRC                                           :0x0
16:10:59: ####CSD Registe Values####  

16:10:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:10:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:59: ProductSerialNumber = 0x23482900
16:10:59: CardMaximumLBA      = 0x3b72400
16:10:59: CardCapacity        = 32G
16:10:59: Is card secure      = 0
16:10:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:10:59: [DVTCommonLib]###  LogicalWrite called
16:11:00: [ WriteLba(0x19DAF78, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 201 ] 
16:11:00: [DVTCommonLib]###  LogicalWrite Completed 

16:11:00: [DVTCommonLib]###  LogicalRead called
16:11:02: [ ReadLba(0x19DAF78, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 202 ] 
16:11:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:02: [RT2HCSDUHSI022_1_1_1_2.py]: AddressForWriteRead CALL Completed

16:11:02: [RT2HCSDUHSI022_1_1_1_2.py]***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
16:11:02: [RT2HCSDUHSI022_1_1_1_2.py]POWER : OFF and ON
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Begins
16:11:04: [ HostReset(False) , Command count = 203 ] 
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL: BasicCommandFPGAReset Completed

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetResetFreq
16:11:04: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:11:04: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalsetHostFreq Completed

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]: Set RCA value
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]: RCA value got set

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]: Run Cmd0()
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5300>, <py_sfcl.CommandDataDefinition object at 0x066B5330>) , Command count = 204 ] 
16:11:04: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]: Cmd0() Execution successfull

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5420>, <py_sfcl.CommandDataDefinition object at 0x066B5450>) , Command count = 205 ] 
16:11:04: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620510>, <py_sfcl.CommandDataDefinition object at 0x066B54E0>) , Command count = 206 ] 
16:11:04: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]RUNNING Cmd8, Cmd55, ACmd41 
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B54B0>, <py_sfcl.CommandDataDefinition object at 0x066B5570>) , Command count = 207 ] 
16:11:04: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5540>, <py_sfcl.CommandDataDefinition object at 0x066B5600>) , Command count = 208 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5660>, <py_sfcl.CommandDataDefinition object at 0x066B5690>) , Command count = 209 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B56F0>, <py_sfcl.CommandDataDefinition object at 0x066B5720>) , Command count = 210 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5780>, <py_sfcl.CommandDataDefinition object at 0x066B57B0>) , Command count = 211 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5810>, <py_sfcl.CommandDataDefinition object at 0x066B5840>) , Command count = 212 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B58A0>, <py_sfcl.CommandDataDefinition object at 0x066B58D0>) , Command count = 213 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5930>, <py_sfcl.CommandDataDefinition object at 0x066B5960>) , Command count = 214 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B59C0>, <py_sfcl.CommandDataDefinition object at 0x066B59F0>) , Command count = 215 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5A50>, <py_sfcl.CommandDataDefinition object at 0x066B5A80>) , Command count = 216 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5AE0>, <py_sfcl.CommandDataDefinition object at 0x066B5B10>) , Command count = 217 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5B70>, <py_sfcl.CommandDataDefinition object at 0x066B5BA0>) , Command count = 218 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5C00>, <py_sfcl.CommandDataDefinition object at 0x066B5C30>) , Command count = 219 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5C90>, <py_sfcl.CommandDataDefinition object at 0x066B5CC0>) , Command count = 220 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5D20>, <py_sfcl.CommandDataDefinition object at 0x066B5D50>) , Command count = 221 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5DB0>, <py_sfcl.CommandDataDefinition object at 0x066B5DE0>) , Command count = 222 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5E40>, <py_sfcl.CommandDataDefinition object at 0x066B5E70>) , Command count = 223 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5ED0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 224 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5F60>, <py_sfcl.CommandDataDefinition object at 0x066B5F90>) , Command count = 225 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9030>, <py_sfcl.CommandDataDefinition object at 0x066B9060>) , Command count = 226 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90C0>, <py_sfcl.CommandDataDefinition object at 0x066B90F0>) , Command count = 227 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9150>, <py_sfcl.CommandDataDefinition object at 0x066B9180>) , Command count = 228 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B91E0>, <py_sfcl.CommandDataDefinition object at 0x066B9210>) , Command count = 229 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9270>, <py_sfcl.CommandDataDefinition object at 0x066B92A0>) , Command count = 230 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 231 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9390>, <py_sfcl.CommandDataDefinition object at 0x066B93C0>) , Command count = 232 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9420>, <py_sfcl.CommandDataDefinition object at 0x066B9450>) , Command count = 233 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B94B0>, <py_sfcl.CommandDataDefinition object at 0x066B94E0>) , Command count = 234 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9540>, <py_sfcl.CommandDataDefinition object at 0x066B9570>) , Command count = 235 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B95D0>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 236 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9660>, <py_sfcl.CommandDataDefinition object at 0x066B9690>) , Command count = 237 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 238 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9780>, <py_sfcl.CommandDataDefinition object at 0x066B97B0>) , Command count = 239 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9810>, <py_sfcl.CommandDataDefinition object at 0x066B9840>) , Command count = 240 ] 
16:11:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B98A0>, <py_sfcl.CommandDataDefinition object at 0x066B98D0>) , Command count = 241 ] 
16:11:04: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Set High Capacity of the card
16:11:04: [ SetCardCap(True) , Command count = 242 ] 
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Setting Card Capacity was successful 

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Set card mode as SD
16:11:04: [ SetSdMmcCardMode(0x2, True) , Command count = 243 ] 
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]card mode got set to SD successfully

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py] SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 244 ] 
16:11:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Identification of the card begins
16:11:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 245 ] 
16:11:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9A50>, <py_sfcl.CommandDataDefinition object at 0x066B9A80>) , Command count = 246 ] 
16:11:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:04: [ SetCardRCA(0x1, 0xD555) , Command count = 247 ] 
16:11:04: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Card Identification Test Completed

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Set bus width as 4
16:11:04: [ SetBusWidth(0x4) , Command count = 248 ] 
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]Setting card bus width to 4 Completed

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetLSHostFreq
16:11:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:04: Host Frequency set to 25000 KHz
16:11:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL : globalSetLSHostFreq CALL Completed

16:11:04: [RT2HCSDUHSI022_1_1_1_2.py]CALL: globalSetSpeedMode
16:11:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:11:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 249 ] 
16:11:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:11:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:11:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:11:05: Host Frequency set to 100000 KHz
16:11:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:11:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:05: ####CSD Registe 2.0 Values####
16:11:05: CSD_STRUCTURE                                 :0x1
16:11:05: Reserv1                                       :0x0
16:11:05: Time Access 1 TAAC                            :0xe
16:11:05: Time Access 2 NSAC*100                        :0x0
16:11:05: Data Transfer Rate TRAN_SPEED                 :0xb
16:11:05: Card Command Classess CCC                     :0x5b5
16:11:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:05: DSR(driver stage register)  DSR_IMP           :0x0
16:11:05: Reserv2                                       :0x0
16:11:05: Device Size C_SIZE                            :0xedc8
16:11:05: Reserv3                                       :0x0
16:11:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:05: Reserv4                                       :0x0
16:11:05: Write Speed Factor R2W_FACTOR                 :0x2
16:11:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:05: FILE_FORMAT_GRP                               :0x0
16:11:05: COPY flag                                     :0x1
16:11:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:05: File_Format                                   :0x0
16:11:05: CRC                                           :0x0
16:11:05: ####CSD Registe Values####  

16:11:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9D80>, <py_sfcl.CommandDataDefinition object at 0x066B9B70>) , Command count = 250 ] 
16:11:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:11:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9BD0>, <py_sfcl.CommandDataDefinition object at 0x066B9C00>) , Command count = 251 ] 
16:11:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:11:05: [RT2HCSDUHSI022_1_1_1_2.py]: globalSetSpeedMode CALL Completed

16:11:05: [RT2HCSDUHSI022_1_1_1_2.py]CALL : AddressForWriteRead
16:11:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:05: ####CSD Registe 2.0 Values####
16:11:05: CSD_STRUCTURE                                 :0x1
16:11:05: Reserv1                                       :0x0
16:11:05: Time Access 1 TAAC                            :0xe
16:11:05: Time Access 2 NSAC*100                        :0x0
16:11:05: Data Transfer Rate TRAN_SPEED                 :0xb
16:11:05: Card Command Classess CCC                     :0x5b5
16:11:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:05: DSR(driver stage register)  DSR_IMP           :0x0
16:11:05: Reserv2                                       :0x0
16:11:05: Device Size C_SIZE                            :0xedc8
16:11:05: Reserv3                                       :0x0
16:11:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:05: Reserv4                                       :0x0
16:11:05: Write Speed Factor R2W_FACTOR                 :0x2
16:11:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:05: FILE_FORMAT_GRP                               :0x0
16:11:05: COPY flag                                     :0x1
16:11:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:05: File_Format                                   :0x0
16:11:05: CRC                                           :0x0
16:11:05: ####CSD Registe Values####  

16:11:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:05: ProductSerialNumber = 0x23482900
16:11:05: CardMaximumLBA      = 0x3b72400
16:11:05: CardCapacity        = 32G
16:11:05: Is card secure      = 0
16:11:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:05: [DVTCommonLib]###  LogicalWrite called
16:11:07: [ WriteLba(0x2676508, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 252 ] 
16:11:07: [DVTCommonLib]###  LogicalWrite Completed 

16:11:07: [DVTCommonLib]###  LogicalRead called
16:11:08: [ ReadLba(0x2676508, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 253 ] 
16:11:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:08: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:08: [RT2HCSDUHSI022_1_1_1_2.py] AddressForWriteRead CALL Completed
16:11:08: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI032_1_1_1_2a ##########
16:11:08: [GO4_globalInitCard]### Switch to Specify Card Type
16:11:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:11: Host Frequency set to 25000 KHz
16:11:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:11: [GO18_globalSetVolt]### Set Host Voltage value.
16:11:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:11:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x054FD7B0>, 0x0, True) , Command count = 254 ] 
16:11:11: [GO18_globalSetVolt]### Host voltage value is set.
16:11:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:11:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0535CE70>, 0x0, False) , Command count = 255 ] 
16:11:11: [GO18_globalSetVolt]### Host voltage value is set.
16:11:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 256 ] 
16:11:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 257 ] 
16:11:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 258 ] 
16:11:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 259 ] 
16:11:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E180>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 260 ] 
16:11:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:11: [ SetCardRCA(0x1, 0xD555) , Command count = 261 ] 
16:11:11: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:11: Host Frequency set to 25000 KHz
16:11:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:11: ####CSD Registe 2.0 Values####
16:11:11: CSD_STRUCTURE                                 :0x1
16:11:11: Reserv1                                       :0x0
16:11:11: Time Access 1 TAAC                            :0xe
16:11:11: Time Access 2 NSAC*100                        :0x0
16:11:11: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:11: Card Command Classess CCC                     :0x5b5
16:11:11: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:11: DSR(driver stage register)  DSR_IMP           :0x0
16:11:11: Reserv2                                       :0x0
16:11:11: Device Size C_SIZE                            :0xedc8
16:11:11: Reserv3                                       :0x0
16:11:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:11: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:11: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:11: Reserv4                                       :0x0
16:11:11: Write Speed Factor R2W_FACTOR                 :0x2
16:11:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:11: FILE_FORMAT_GRP                               :0x0
16:11:11: COPY flag                                     :0x1
16:11:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:11: File_Format                                   :0x0
16:11:11: CRC                                           :0x0
16:11:11: ####CSD Registe Values####  

16:11:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:11:11: [GetSCRRegisterEntry] Passed
16:11:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:11:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:11:11: Data_Status_After Erases          : 0
16:11:11: CPRM Security Support             : No Security
16:11:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:11:11: Spec. Version                     : Version 3.0X
16:11:11: Extended Security Support         : Extended_Security_Not_Supported
16:11:11: Command Support                   : COMMAND_SUPPORT
16:11:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E210>, <py_sfcl.CommandDataDefinition object at 0x066B9F90>) , Command count = 262 ] 
16:11:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 263 ] 
16:11:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:11:11: [ SetBusWidth(0x4) , Command count = 264 ] 
16:11:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:11:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x066B9E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 265 ] 
16:11:11: Protected Area Size 0x28000
16:11:11: Bus Width           2
16:11:11: Secure Mode         0
16:11:11: Speed  Class        4
16:11:11: Perf Move           0
16:11:11: Au Size             9
16:11:11: Erase Size          15
16:11:11: Erase Timeout       1
16:11:11: Erase offset        1
16:11:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:11:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:11:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:11:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 266 ] 
16:11:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:11:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:11:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:11:11: Host Frequency set to 100000 KHz
16:11:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:11:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:11: ####CSD Registe 2.0 Values####
16:11:11: CSD_STRUCTURE                                 :0x1
16:11:11: Reserv1                                       :0x0
16:11:11: Time Access 1 TAAC                            :0xe
16:11:11: Time Access 2 NSAC*100                        :0x0
16:11:11: Data Transfer Rate TRAN_SPEED                 :0xb
16:11:11: Card Command Classess CCC                     :0x5b5
16:11:11: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:11: DSR(driver stage register)  DSR_IMP           :0x0
16:11:11: Reserv2                                       :0x0
16:11:11: Device Size C_SIZE                            :0xedc8
16:11:11: Reserv3                                       :0x0
16:11:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:11: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:11: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:11: Reserv4                                       :0x0
16:11:11: Write Speed Factor R2W_FACTOR                 :0x2
16:11:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:11: FILE_FORMAT_GRP                               :0x0
16:11:11: COPY flag                                     :0x1
16:11:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:11: File_Format                                   :0x0
16:11:11: CRC                                           :0x0
16:11:11: ####CSD Registe Values####  

16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552ECC0>, <py_sfcl.CommandDataDefinition object at 0x066B9ED0>) , Command count = 267 ] 
16:11:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552EC30>, <py_sfcl.CommandDataDefinition object at 0x066B9F30>) , Command count = 268 ] 
16:11:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:11:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:11:11: [RT2HCSDUHSI032_1_1_1_2a.py]POWER : OFF and ON
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]RESET card with CMD 8 and IDENTIFICATION of the card
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]RESET card
16:11:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 269 ] 
16:11:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 270 ] 
16:11:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Identification of the card
16:11:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0553AFC0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 271 ] 
16:11:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540990>, <py_sfcl.CommandDataDefinition object at 0x066BD060>) , Command count = 272 ] 
16:11:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:14: [ SetCardRCA(0x1, 0xD555) , Command count = 273 ] 
16:11:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
16:11:14: [ SetBusWidth(0x4) , Command count = 274 ] 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py] Bus width as got changed to 4

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetTO
16:11:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 275 ] 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: globalSetTO CALL got Completed 

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetVolt
16:11:14: [GO18_globalSetVolt]### Set Host Voltage value.
16:11:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:11:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0553A900>, 0x0, True) , Command count = 276 ] 
16:11:14: [GO18_globalSetVolt]### Host voltage value is set.
16:11:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:11:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x05540C00>, 0x0, False) , Command count = 277 ] 
16:11:14: [GO18_globalSetVolt]### Host voltage value is set.
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py] globalSetVolt CALL got Completed

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetResetFreq
16:11:14: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:11:14: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: globalSetResetFreq CALL got Completed

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]***Test CMD 8' s out of sequence during Soft Reset***
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]SET RCA
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]setting of RCA value completed

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: Run Cmd0()
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540C30>, <py_sfcl.CommandDataDefinition object at 0x066BD120>) , Command count = 278 ] 
16:11:14: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: Cmd0() Execution successfull

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat1_CMD8_SD_HIGH for 0 times 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540C60>, <py_sfcl.CommandDataDefinition object at 0x066BD180>) , Command count = 279 ] 
16:11:14: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x8E', 'CRC 7']
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat1_CMD8_SD_HIGH for 1 times 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B55D0>, <py_sfcl.CommandDataDefinition object at 0x066BD1E0>) , Command count = 280 ] 
16:11:14: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x8E', 'CRC 7']
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540C90>, <py_sfcl.CommandDataDefinition object at 0x066BD240>) , Command count = 281 ] 
16:11:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540E40>, <py_sfcl.CommandDataDefinition object at 0x066BD2A0>) , Command count = 282 ] 
16:11:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540ED0>, <py_sfcl.CommandDataDefinition object at 0x066BD300>) , Command count = 283 ] 
16:11:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F00>, <py_sfcl.CommandDataDefinition object at 0x066BD360>) , Command count = 284 ] 
16:11:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F30>, <py_sfcl.CommandDataDefinition object at 0x066BD3C0>) , Command count = 285 ] 
16:11:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F60>, <py_sfcl.CommandDataDefinition object at 0x066BD420>) , Command count = 286 ] 
16:11:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Set High Capacity of the card
16:11:14: [ SetCardCap(True) , Command count = 287 ] 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Setting Capacity of the card Completed

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Set card mode as SD
16:11:14: [ SetSdMmcCardMode(0x2, True) , Command count = 288 ] 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Card mode got Changed to SD

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Card Identification Test begins
16:11:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F90>, <py_sfcl.CommandDataDefinition object at 0x066BD480>) , Command count = 289 ] 
16:11:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066BD4E0>) , Command count = 290 ] 
16:11:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:14: [ SetCardRCA(0x1, 0xD555) , Command count = 291 ] 
16:11:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Card Identification Test Completed

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
16:11:14: [ SetBusWidth(0x4) , Command count = 292 ] 
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]Card bus width got set to 4 

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetResetFreq
16:11:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:14: Host Frequency set to 25000 KHz
16:11:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]: globalSetResetFreq CALL got Completed

16:11:14: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : AddressForWriteRead
16:11:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:14: ####CSD Registe 2.0 Values####
16:11:14: CSD_STRUCTURE                                 :0x1
16:11:14: Reserv1                                       :0x0
16:11:14: Time Access 1 TAAC                            :0xe
16:11:14: Time Access 2 NSAC*100                        :0x0
16:11:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:14: Card Command Classess CCC                     :0x5b5
16:11:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:14: DSR(driver stage register)  DSR_IMP           :0x0
16:11:14: Reserv2                                       :0x0
16:11:14: Device Size C_SIZE                            :0xedc8
16:11:14: Reserv3                                       :0x0
16:11:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:14: Reserv4                                       :0x0
16:11:14: Write Speed Factor R2W_FACTOR                 :0x2
16:11:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:14: FILE_FORMAT_GRP                               :0x0
16:11:14: COPY flag                                     :0x1
16:11:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:14: File_Format                                   :0x0
16:11:14: CRC                                           :0x0
16:11:14: ####CSD Registe Values####  

16:11:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:14: ProductSerialNumber = 0x23482900
16:11:14: CardMaximumLBA      = 0x3b72400
16:11:14: CardCapacity        = 32G
16:11:14: Is card secure      = 0
16:11:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:14: [DVTCommonLib]###  LogicalWrite called
16:11:16: [ WriteLba(0x348A3F1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 293 ] 
16:11:16: [DVTCommonLib]###  LogicalWrite Completed 

16:11:16: [DVTCommonLib]###  LogicalRead called
16:11:18: [ ReadLba(0x348A3F1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 294 ] 
16:11:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:18: [RT2HCSDUHSI032_1_1_1_2a.py]: AddressForWriteRead CALL Completed

16:11:18: [RT2HCSDUHSI032_1_1_1_2a.py]***Test CMD 8' s out of sequence during  Power Cycle Reset***
16:11:18: [RT2HCSDUHSI032_1_1_1_2a.py]POWER : OFF and ON
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]: Set RCA value
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]: RCA value got set

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat2_CMD8_SD_HIGH for 0 times 
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064827B0>, <py_sfcl.CommandDataDefinition object at 0x066BD570>) , Command count = 295 ] 
16:11:20: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xED']
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat2_CMD8_SD_HIGH for 1 times 
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540DB0>, <py_sfcl.CommandDataDefinition object at 0x066BD5A0>) , Command count = 296 ] 
16:11:20: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0x55']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0655ABD0>, <py_sfcl.CommandDataDefinition object at 0x066BD600>) , Command count = 297 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066030F0>, <py_sfcl.CommandDataDefinition object at 0x066BD630>) , Command count = 298 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603210>, <py_sfcl.CommandDataDefinition object at 0x066BD690>) , Command count = 299 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603CC0>, <py_sfcl.CommandDataDefinition object at 0x06603E10>) , Command count = 300 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 301 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603780>, <py_sfcl.CommandDataDefinition object at 0x066BD780>) , Command count = 302 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066BD7E0>, <py_sfcl.CommandDataDefinition object at 0x066BD810>) , Command count = 303 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603480>, <py_sfcl.CommandDataDefinition object at 0x066BD870>) , Command count = 304 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038D0>, <py_sfcl.CommandDataDefinition object at 0x06603630>) , Command count = 305 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603F30>, <py_sfcl.CommandDataDefinition object at 0x06603960>) , Command count = 306 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603B70>, <py_sfcl.CommandDataDefinition object at 0x066BD8D0>) , Command count = 307 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066037B0>, <py_sfcl.CommandDataDefinition object at 0x06603720>) , Command count = 308 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603A50>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 309 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603F00>, <py_sfcl.CommandDataDefinition object at 0x066BD930>) , Command count = 310 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482630>, <py_sfcl.CommandDataDefinition object at 0x06603450>) , Command count = 311 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066034B0>, <py_sfcl.CommandDataDefinition object at 0x066BD9C0>) , Command count = 312 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603690>, <py_sfcl.CommandDataDefinition object at 0x06603510>) , Command count = 313 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603E70>, <py_sfcl.CommandDataDefinition object at 0x06603BD0>) , Command count = 314 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035A0>, <py_sfcl.CommandDataDefinition object at 0x06603750>) , Command count = 315 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603B40>, <py_sfcl.CommandDataDefinition object at 0x066BDA50>) , Command count = 316 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035D0>, <py_sfcl.CommandDataDefinition object at 0x066BDAB0>) , Command count = 317 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603DE0>, <py_sfcl.CommandDataDefinition object at 0x06603660>) , Command count = 318 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603A80>, <py_sfcl.CommandDataDefinition object at 0x06603D20>) , Command count = 319 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603CF0>, <py_sfcl.CommandDataDefinition object at 0x066BDB10>) , Command count = 320 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C030>, <py_sfcl.CommandDataDefinition object at 0x066BDB70>) , Command count = 321 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x066BDBD0>) , Command count = 322 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603BA0>, <py_sfcl.CommandDataDefinition object at 0x0660C060>) , Command count = 323 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C0C0>, <py_sfcl.CommandDataDefinition object at 0x0660C120>) , Command count = 324 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603C90>, <py_sfcl.CommandDataDefinition object at 0x066BDC90>) , Command count = 325 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603870>) , Command count = 326 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C150>, <py_sfcl.CommandDataDefinition object at 0x0660C180>) , Command count = 327 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C270>, <py_sfcl.CommandDataDefinition object at 0x066BDCF0>) , Command count = 328 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x066BDD50>) , Command count = 329 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066BDDB0>, <py_sfcl.CommandDataDefinition object at 0x066BDDE0>) , Command count = 330 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066BDE40>, <py_sfcl.CommandDataDefinition object at 0x066BDE70>) , Command count = 331 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C210>, <py_sfcl.CommandDataDefinition object at 0x066138D0>) , Command count = 332 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613870>, <py_sfcl.CommandDataDefinition object at 0x066138A0>) , Command count = 333 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613960>, <py_sfcl.CommandDataDefinition object at 0x06613990>) , Command count = 334 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066139F0>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 335 ] 
16:11:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613A80>, <py_sfcl.CommandDataDefinition object at 0x06613AB0>) , Command count = 336 ] 
16:11:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]Set High Capacity of the card
16:11:20: [ SetCardCap(True) , Command count = 337 ] 
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]Setting up of Card Capacity Completed

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]Set card mode as SD
16:11:20: [ SetSdMmcCardMode(0x2, True) , Command count = 338 ] 
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]Card mode got Changed to SD

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 339 ] 
16:11:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]Identification of the card Begins
16:11:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613CC0>, <py_sfcl.CommandDataDefinition object at 0x06613CF0>) , Command count = 340 ] 
16:11:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613D50>, <py_sfcl.CommandDataDefinition object at 0x06613D80>) , Command count = 341 ] 
16:11:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:20: [ SetCardRCA(0x1, 0xD555) , Command count = 342 ] 
16:11:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]:Identification Test got Completed

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
16:11:20: [ SetBusWidth(0x4) , Command count = 343 ] 
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py] Bus width as got changed to 4

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetHostFreq
16:11:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:20: Host Frequency set to 25000 KHz
16:11:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalsetHostFreq Completed

16:11:20: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : AddressForWriteRead
16:11:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:20: ####CSD Registe 2.0 Values####
16:11:20: CSD_STRUCTURE                                 :0x1
16:11:20: Reserv1                                       :0x0
16:11:20: Time Access 1 TAAC                            :0xe
16:11:20: Time Access 2 NSAC*100                        :0x0
16:11:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:20: Card Command Classess CCC                     :0x5b5
16:11:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:20: DSR(driver stage register)  DSR_IMP           :0x0
16:11:20: Reserv2                                       :0x0
16:11:20: Device Size C_SIZE                            :0xedc8
16:11:20: Reserv3                                       :0x0
16:11:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:20: Reserv4                                       :0x0
16:11:20: Write Speed Factor R2W_FACTOR                 :0x2
16:11:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:20: FILE_FORMAT_GRP                               :0x0
16:11:20: COPY flag                                     :0x1
16:11:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:20: File_Format                                   :0x0
16:11:20: CRC                                           :0x0
16:11:20: ####CSD Registe Values####  

16:11:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:20: ProductSerialNumber = 0x23482900
16:11:20: CardMaximumLBA      = 0x3b72400
16:11:20: CardCapacity        = 32G
16:11:20: Is card secure      = 0
16:11:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:20: [DVTCommonLib]###  LogicalWrite called
16:11:22: [ WriteLba(0x29CE64F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 344 ] 
16:11:22: [DVTCommonLib]###  LogicalWrite Completed 

16:11:22: [DVTCommonLib]###  LogicalRead called
16:11:23: [ ReadLba(0x29CE64F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 345 ] 
16:11:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:23: [RT2HCSDUHSI032_1_1_1_2a.py]: AddressForWriteRead CALL Completed

16:11:23: [RT2HCSDUHSI032_1_1_1_2a.py]***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
16:11:23: [RT2HCSDUHSI032_1_1_1_2a.py]POWER : OFF and ON
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetResetFreq
16:11:25: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:11:25: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalsetHostFreq Completed

16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]: Set RCA value
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]: RCA value got set

16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]: Run Cmd0()
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619060>, <py_sfcl.CommandDataDefinition object at 0x06619090>) , Command count = 346 ] 
16:11:25: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]: Cmd0() Execution successfull

16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat3_CMD8_SD_HIGH for 0 times 
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066190F0>, <py_sfcl.CommandDataDefinition object at 0x06619120>) , Command count = 347 ] 
16:11:25: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xDC']
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]: Running Loop Repeat3_CMD8_SD_HIGH for 1 times 
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]RUNNING Cmd8 
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603030>, <py_sfcl.CommandDataDefinition object at 0x06619270>) , Command count = 348 ] 
16:11:25: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xFF', 'CRC 7']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619180>, <py_sfcl.CommandDataDefinition object at 0x06619240>) , Command count = 349 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 350 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619330>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 351 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066193C0>, <py_sfcl.CommandDataDefinition object at 0x066193F0>) , Command count = 352 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619450>, <py_sfcl.CommandDataDefinition object at 0x06619480>) , Command count = 353 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066194E0>, <py_sfcl.CommandDataDefinition object at 0x06619510>) , Command count = 354 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619570>, <py_sfcl.CommandDataDefinition object at 0x066195A0>) , Command count = 355 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619600>, <py_sfcl.CommandDataDefinition object at 0x06619630>) , Command count = 356 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 357 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619720>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 358 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066197B0>, <py_sfcl.CommandDataDefinition object at 0x066197E0>) , Command count = 359 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619840>, <py_sfcl.CommandDataDefinition object at 0x06619870>) , Command count = 360 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066198D0>, <py_sfcl.CommandDataDefinition object at 0x06619900>) , Command count = 361 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619960>, <py_sfcl.CommandDataDefinition object at 0x06619990>) , Command count = 362 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066199F0>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 363 ] 
16:11:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619A80>, <py_sfcl.CommandDataDefinition object at 0x06619AB0>) , Command count = 364 ] 
16:11:25: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]Set High Capacity of the card
16:11:25: [ SetCardCap(True) , Command count = 365 ] 
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]Setting Card Capacity was successful 

16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]Set card mode as SD
16:11:25: [ SetSdMmcCardMode(0x2, True) , Command count = 366 ] 
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]card mode got set to SD successfully

16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py] SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 367 ] 
16:11:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:25: [RT2HCSDUHSI032_1_1_1_2a.py]Identification of the card begins
16:11:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619E10>, <py_sfcl.CommandDataDefinition object at 0x06619BD0>) , Command count = 368 ] 
16:11:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619E70>, <py_sfcl.CommandDataDefinition object at 0x06619B40>) , Command count = 369 ] 
16:11:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:25: [ SetCardRCA(0x1, 0xD555) , Command count = 370 ] 
16:11:26: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:26: [RT2HCSDUHSI032_1_1_1_2a.py]Card Identification Test Completed

16:11:26: [RT2HCSDUHSI032_1_1_1_2a.py]Set bus width as 4
16:11:26: [ SetBusWidth(0x4) , Command count = 371 ] 
16:11:26: [RT2HCSDUHSI032_1_1_1_2a.py]Setting card bus width to 4 Completed

16:11:26: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetLSHostFreq
16:11:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:26: Host Frequency set to 25000 KHz
16:11:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:26: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : globalSetLSHostFreq CALL Completed

16:11:26: [RT2HCSDUHSI032_1_1_1_2a.py]CALL : AddressForWriteRead
16:11:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:26: ####CSD Registe 2.0 Values####
16:11:26: CSD_STRUCTURE                                 :0x1
16:11:26: Reserv1                                       :0x0
16:11:26: Time Access 1 TAAC                            :0xe
16:11:26: Time Access 2 NSAC*100                        :0x0
16:11:26: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:26: Card Command Classess CCC                     :0x5b5
16:11:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:26: DSR(driver stage register)  DSR_IMP           :0x0
16:11:26: Reserv2                                       :0x0
16:11:26: Device Size C_SIZE                            :0xedc8
16:11:26: Reserv3                                       :0x0
16:11:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:26: Reserv4                                       :0x0
16:11:26: Write Speed Factor R2W_FACTOR                 :0x2
16:11:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:26: FILE_FORMAT_GRP                               :0x0
16:11:26: COPY flag                                     :0x1
16:11:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:26: File_Format                                   :0x0
16:11:26: CRC                                           :0x0
16:11:26: ####CSD Registe Values####  

16:11:26: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:26: ProductSerialNumber = 0x23482900
16:11:26: CardMaximumLBA      = 0x3b72400
16:11:26: CardCapacity        = 32G
16:11:26: Is card secure      = 0
16:11:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:26: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:26: [DVTCommonLib]###  LogicalWrite called
16:11:27: [ WriteLba(0x35EEE16, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 372 ] 
16:11:27: [DVTCommonLib]###  LogicalWrite Completed 

16:11:27: [DVTCommonLib]###  LogicalRead called
16:11:29: [ ReadLba(0x35EEE16, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 373 ] 
16:11:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:29: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:29: [RT2HCSDUHSI032_1_1_1_2a.py] AddressForWriteRead CALL Completed
16:11:29: [RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py]##########CALL : RT2HCSDUHSI033_1_1_1_3 ##########
16:11:29: [GO4_globalInitCard]### Switch to Specify Card Type
16:11:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:31: Host Frequency set to 25000 KHz
16:11:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:31: [GO18_globalSetVolt]### Set Host Voltage value.
16:11:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:11:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06619FC0>, 0x0, True) , Command count = 374 ] 
16:11:31: [GO18_globalSetVolt]### Host voltage value is set.
16:11:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:11:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06619F90>, 0x0, False) , Command count = 375 ] 
16:11:31: [GO18_globalSetVolt]### Host voltage value is set.
16:11:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 376 ] 
16:11:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 377 ] 
16:11:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 378 ] 
16:11:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C210>, <py_sfcl.CommandDataDefinition object at 0x0661C120>) , Command count = 379 ] 
16:11:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C0C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 380 ] 
16:11:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:31: [ SetCardRCA(0x1, 0xD555) , Command count = 381 ] 
16:11:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:31: Host Frequency set to 25000 KHz
16:11:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:31: ####CSD Registe 2.0 Values####
16:11:31: CSD_STRUCTURE                                 :0x1
16:11:31: Reserv1                                       :0x0
16:11:31: Time Access 1 TAAC                            :0xe
16:11:31: Time Access 2 NSAC*100                        :0x0
16:11:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:31: Card Command Classess CCC                     :0x5b5
16:11:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:31: DSR(driver stage register)  DSR_IMP           :0x0
16:11:31: Reserv2                                       :0x0
16:11:31: Device Size C_SIZE                            :0xedc8
16:11:31: Reserv3                                       :0x0
16:11:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:31: Reserv4                                       :0x0
16:11:31: Write Speed Factor R2W_FACTOR                 :0x2
16:11:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:31: FILE_FORMAT_GRP                               :0x0
16:11:31: COPY flag                                     :0x1
16:11:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:31: File_Format                                   :0x0
16:11:31: CRC                                           :0x0
16:11:31: ####CSD Registe Values####  

16:11:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:11:31: [GetSCRRegisterEntry] Passed
16:11:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:11:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:11:31: Data_Status_After Erases          : 0
16:11:31: CPRM Security Support             : No Security
16:11:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:11:31: Spec. Version                     : Version 3.0X
16:11:31: Extended Security Support         : Extended_Security_Not_Supported
16:11:31: Command Support                   : COMMAND_SUPPORT
16:11:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:11:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C0F0>, <py_sfcl.CommandDataDefinition object at 0x0661C2A0>) , Command count = 382 ] 
16:11:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:11:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C4B0>, <py_sfcl.CommandDataDefinition object at 0x0661C300>) , Command count = 383 ] 
16:11:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:11:31: [ SetBusWidth(0x4) , Command count = 384 ] 
16:11:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:11:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06613F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 385 ] 
16:11:31: Protected Area Size 0x28000
16:11:31: Bus Width           2
16:11:31: Secure Mode         0
16:11:31: Speed  Class        4
16:11:31: Perf Move           0
16:11:31: Au Size             9
16:11:31: Erase Size          15
16:11:31: Erase Timeout       1
16:11:31: Erase offset        1
16:11:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:11:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:11:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:11:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 386 ] 
16:11:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:11:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:11:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:11:32: Host Frequency set to 100000 KHz
16:11:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:11:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:32: ####CSD Registe 2.0 Values####
16:11:32: CSD_STRUCTURE                                 :0x1
16:11:32: Reserv1                                       :0x0
16:11:32: Time Access 1 TAAC                            :0xe
16:11:32: Time Access 2 NSAC*100                        :0x0
16:11:32: Data Transfer Rate TRAN_SPEED                 :0xb
16:11:32: Card Command Classess CCC                     :0x5b5
16:11:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:32: DSR(driver stage register)  DSR_IMP           :0x0
16:11:32: Reserv2                                       :0x0
16:11:32: Device Size C_SIZE                            :0xedc8
16:11:32: Reserv3                                       :0x0
16:11:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:32: Reserv4                                       :0x0
16:11:32: Write Speed Factor R2W_FACTOR                 :0x2
16:11:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:32: FILE_FORMAT_GRP                               :0x0
16:11:32: COPY flag                                     :0x1
16:11:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:32: File_Format                                   :0x0
16:11:32: CRC                                           :0x0
16:11:32: ####CSD Registe Values####  

16:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C180>, <py_sfcl.CommandDataDefinition object at 0x0661C1B0>) , Command count = 387 ] 
16:11:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:11:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C450>, <py_sfcl.CommandDataDefinition object at 0x0661C3F0>) , Command count = 388 ] 
16:11:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:11:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:11:32: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
16:11:34: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetTO
16:11:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 389 ] 
16:11:34: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetVolt
16:11:34: [GO18_globalSetVolt]### Set Host Voltage value.
16:11:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:11:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0661C480>, 0x0, True) , Command count = 390 ] 
16:11:34: [GO18_globalSetVolt]### Host voltage value is set.
16:11:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:11:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0661C750>, 0x0, False) , Command count = 391 ] 
16:11:34: [GO18_globalSetVolt]### Host voltage value is set.
16:11:34: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
16:11:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:34: Host Frequency set to 25000 KHz
16:11:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:34: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Soft Reset*********
16:11:34: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]RESET card
16:11:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 392 ] 
16:11:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:35: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 393 ] 
16:11:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:35: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Identification of the card
16:11:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066033C0>, <py_sfcl.CommandDataDefinition object at 0x0661C7B0>) , Command count = 394 ] 
16:11:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 395 ] 
16:11:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:35: [ SetCardRCA(0x1, 0xD555) , Command count = 396 ] 
16:11:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:35: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Set bus width as 4
16:11:35: [ SetBusWidth(0x4) , Command count = 397 ] 
16:11:35: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:11:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:35: ####CSD Registe 2.0 Values####
16:11:35: CSD_STRUCTURE                                 :0x1
16:11:35: Reserv1                                       :0x0
16:11:35: Time Access 1 TAAC                            :0xe
16:11:35: Time Access 2 NSAC*100                        :0x0
16:11:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:35: Card Command Classess CCC                     :0x5b5
16:11:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:35: DSR(driver stage register)  DSR_IMP           :0x0
16:11:35: Reserv2                                       :0x0
16:11:35: Device Size C_SIZE                            :0xedc8
16:11:35: Reserv3                                       :0x0
16:11:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:35: Reserv4                                       :0x0
16:11:35: Write Speed Factor R2W_FACTOR                 :0x2
16:11:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:35: FILE_FORMAT_GRP                               :0x0
16:11:35: COPY flag                                     :0x1
16:11:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:35: File_Format                                   :0x0
16:11:35: CRC                                           :0x0
16:11:35: ####CSD Registe Values####  

16:11:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:35: ProductSerialNumber = 0x23482900
16:11:35: CardMaximumLBA      = 0x3b72400
16:11:35: CardCapacity        = 32G
16:11:35: Is card secure      = 0
16:11:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:35: [DVTCommonLib]###  LogicalWrite called
16:11:36: [ WriteLba(0x47B8FD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 398 ] 
16:11:36: [DVTCommonLib]###  LogicalWrite Completed 

16:11:36: [DVTCommonLib]###  LogicalRead called
16:11:38: [ ReadLba(0x47B8FD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 399 ] 
16:11:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:38: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle Reset*********
16:11:38: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
16:11:40: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetResetFreq
16:11:40: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:11:40: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:11:40: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]RUNNING Cmd8, Cmd55, ACmd41 
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0655A930>, <py_sfcl.CommandDataDefinition object at 0x0661CA50>) , Command count = 400 ] 
16:11:40: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x0661C870>) , Command count = 401 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CA80>, <py_sfcl.CommandDataDefinition object at 0x0661CAB0>) , Command count = 402 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CB10>, <py_sfcl.CommandDataDefinition object at 0x0661CB40>) , Command count = 403 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CBD0>, <py_sfcl.CommandDataDefinition object at 0x0661CC90>) , Command count = 404 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CBA0>, <py_sfcl.CommandDataDefinition object at 0x0661CC60>) , Command count = 405 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 406 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CD50>, <py_sfcl.CommandDataDefinition object at 0x0661CD80>) , Command count = 407 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDE0>, <py_sfcl.CommandDataDefinition object at 0x0661CE10>) , Command count = 408 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CE70>, <py_sfcl.CommandDataDefinition object at 0x0661CEA0>) , Command count = 409 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF90>, <py_sfcl.CommandDataDefinition object at 0x0661C8D0>) , Command count = 410 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CFC0>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 411 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF00>, <py_sfcl.CommandDataDefinition object at 0x0661CF30>) , Command count = 412 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620030>, <py_sfcl.CommandDataDefinition object at 0x06620060>) , Command count = 413 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620150>, <py_sfcl.CommandDataDefinition object at 0x06613930>) , Command count = 414 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620180>, <py_sfcl.CommandDataDefinition object at 0x06613BD0>) , Command count = 415 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066201E0>, <py_sfcl.CommandDataDefinition object at 0x06613C90>) , Command count = 416 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066200C0>, <py_sfcl.CommandDataDefinition object at 0x066200F0>) , Command count = 417 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620420>, <py_sfcl.CommandDataDefinition object at 0x06620210>) , Command count = 418 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613E10>, <py_sfcl.CommandDataDefinition object at 0x06613ED0>) , Command count = 419 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613C00>, <py_sfcl.CommandDataDefinition object at 0x066BDED0>) , Command count = 420 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620330>, <py_sfcl.CommandDataDefinition object at 0x066BDF30>) , Command count = 421 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620270>, <py_sfcl.CommandDataDefinition object at 0x066202A0>) , Command count = 422 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620360>, <py_sfcl.CommandDataDefinition object at 0x066203C0>) , Command count = 423 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CC30>, <py_sfcl.CommandDataDefinition object at 0x066204B0>) , Command count = 424 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620480>, <py_sfcl.CommandDataDefinition object at 0x06620540>) , Command count = 425 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066205A0>, <py_sfcl.CommandDataDefinition object at 0x066205D0>) , Command count = 426 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620630>, <py_sfcl.CommandDataDefinition object at 0x06620660>) , Command count = 427 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066206C0>, <py_sfcl.CommandDataDefinition object at 0x066206F0>) , Command count = 428 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620750>, <py_sfcl.CommandDataDefinition object at 0x06620780>) , Command count = 429 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066207E0>, <py_sfcl.CommandDataDefinition object at 0x06620810>) , Command count = 430 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620870>, <py_sfcl.CommandDataDefinition object at 0x066208A0>) , Command count = 431 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620900>, <py_sfcl.CommandDataDefinition object at 0x06620930>) , Command count = 432 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620990>, <py_sfcl.CommandDataDefinition object at 0x066209C0>) , Command count = 433 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620A20>, <py_sfcl.CommandDataDefinition object at 0x06620A50>) , Command count = 434 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620AB0>, <py_sfcl.CommandDataDefinition object at 0x06620AE0>) , Command count = 435 ] 
16:11:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620B40>, <py_sfcl.CommandDataDefinition object at 0x06620B70>) , Command count = 436 ] 
16:11:40: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:11:40: [ SetCardCap(True) , Command count = 437 ] 
16:11:40: [ SetSdMmcCardMode(0x2, True) , Command count = 438 ] 
16:11:40: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 439 ] 
16:11:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:40: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Identification of the card
16:11:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620D80>, <py_sfcl.CommandDataDefinition object at 0x06620DB0>) , Command count = 440 ] 
16:11:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06620E10>, <py_sfcl.CommandDataDefinition object at 0x06620E40>) , Command count = 441 ] 
16:11:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:40: [ SetCardRCA(0x1, 0xD555) , Command count = 442 ] 
16:11:40: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:40: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Set bus width as 4
16:11:40: [ SetBusWidth(0x4) , Command count = 443 ] 
16:11:40: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
16:11:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:40: Host Frequency set to 25000 KHz
16:11:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:40: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:11:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:40: ####CSD Registe 2.0 Values####
16:11:40: CSD_STRUCTURE                                 :0x1
16:11:40: Reserv1                                       :0x0
16:11:40: Time Access 1 TAAC                            :0xe
16:11:40: Time Access 2 NSAC*100                        :0x0
16:11:40: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:40: Card Command Classess CCC                     :0x5b5
16:11:40: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:40: DSR(driver stage register)  DSR_IMP           :0x0
16:11:40: Reserv2                                       :0x0
16:11:40: Device Size C_SIZE                            :0xedc8
16:11:40: Reserv3                                       :0x0
16:11:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:40: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:40: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:40: Reserv4                                       :0x0
16:11:40: Write Speed Factor R2W_FACTOR                 :0x2
16:11:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:40: FILE_FORMAT_GRP                               :0x0
16:11:40: COPY flag                                     :0x1
16:11:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:40: File_Format                                   :0x0
16:11:40: CRC                                           :0x0
16:11:40: ####CSD Registe Values####  

16:11:40: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:40: ProductSerialNumber = 0x23482900
16:11:40: CardMaximumLBA      = 0x3b72400
16:11:40: CardCapacity        = 32G
16:11:40: Is card secure      = 0
16:11:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:40: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:40: [DVTCommonLib]###  LogicalWrite called
16:11:42: [ WriteLba(0x117E611, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 444 ] 
16:11:42: [DVTCommonLib]###  LogicalWrite Completed 

16:11:42: [DVTCommonLib]###  LogicalRead called
16:11:43: [ ReadLba(0x117E611, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 445 ] 
16:11:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:43: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:43: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle & CMD 0 Reset*********
16:11:43: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
16:11:46: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]RESET card and IDENTIFICATION of the card
16:11:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x0, 0x1, 0xAA, 0x0) , Command count = 446 ] 
16:11:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:46: SwitchVolt (CMD11): to 1.8 v, timeToClockOff=0 ms, clockOffPeriod=5 ms
16:11:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:11:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 447 ] 
16:11:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:11:46: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Identification of the card
16:11:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5150>, <py_sfcl.CommandDataDefinition object at 0x066B50F0>) , Command count = 448 ] 
16:11:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5180>, <py_sfcl.CommandDataDefinition object at 0x06620FC0>) , Command count = 449 ] 
16:11:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:11:46: [ SetCardRCA(0x1, 0xD555) , Command count = 450 ] 
16:11:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:46: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]Set bus width as 4
16:11:46: [ SetBusWidth(0x4) , Command count = 451 ] 
16:11:46: [RT2HCSDUHSI006_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:11:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:46: ####CSD Registe 2.0 Values####
16:11:46: CSD_STRUCTURE                                 :0x1
16:11:46: Reserv1                                       :0x0
16:11:46: Time Access 1 TAAC                            :0xe
16:11:46: Time Access 2 NSAC*100                        :0x0
16:11:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:46: Card Command Classess CCC                     :0x5b5
16:11:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:46: DSR(driver stage register)  DSR_IMP           :0x0
16:11:46: Reserv2                                       :0x0
16:11:46: Device Size C_SIZE                            :0xedc8
16:11:46: Reserv3                                       :0x0
16:11:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:46: Reserv4                                       :0x0
16:11:46: Write Speed Factor R2W_FACTOR                 :0x2
16:11:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:46: FILE_FORMAT_GRP                               :0x0
16:11:46: COPY flag                                     :0x1
16:11:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:46: File_Format                                   :0x0
16:11:46: CRC                                           :0x0
16:11:46: ####CSD Registe Values####  

16:11:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:46: ProductSerialNumber = 0x23482900
16:11:46: CardMaximumLBA      = 0x3b72400
16:11:46: CardCapacity        = 32G
16:11:46: Is card secure      = 0
16:11:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:46: [DVTCommonLib]###  LogicalWrite called
16:11:47: [ WriteLba(0x1B9B289, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 452 ] 
16:11:47: [DVTCommonLib]###  LogicalWrite Completed 

16:11:47: [DVTCommonLib]###  LogicalRead called
16:11:49: [ ReadLba(0x1B9B289, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 453 ] 
16:11:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:49: [RT2HCSDUHSI033_1_1_1_3.py]***Test Pattern Field in Soft Reset***
16:11:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : globalSetLSHostFreq
16:11:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:11:49: Host Frequency set to 25000 KHz
16:11:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:11:49: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 0 times 
16:11:49: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x0, 0x0) , Command count = 454 ] 
16:11:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:11:49: [DVTCommonLib]### Card response as High Capacity from card
16:11:49: [DVTCommonLib]### VOLA from card : 0x1
16:11:49: [DVTCommonLib]### CMD Pattern from card : 0x0
16:11:49: [DVTCommonLib]### Reserved bits from card : 0x0
16:11:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5210>, <py_sfcl.CommandDataDefinition object at 0x066B5240>) , Command count = 455 ] 
16:11:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5300>, <py_sfcl.CommandDataDefinition object at 0x066B5330>) , Command count = 456 ] 
16:11:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:49: [ SetCardRCA(0x1, 0xD555) , Command count = 457 ] 
16:11:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:49: [ SetBusWidth(0x4) , Command count = 458 ] 
16:11:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:11:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:49: ####CSD Registe 2.0 Values####
16:11:49: CSD_STRUCTURE                                 :0x1
16:11:49: Reserv1                                       :0x0
16:11:49: Time Access 1 TAAC                            :0xe
16:11:49: Time Access 2 NSAC*100                        :0x0
16:11:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:49: Card Command Classess CCC                     :0x5b5
16:11:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:49: DSR(driver stage register)  DSR_IMP           :0x0
16:11:49: Reserv2                                       :0x0
16:11:49: Device Size C_SIZE                            :0xedc8
16:11:49: Reserv3                                       :0x0
16:11:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:49: Reserv4                                       :0x0
16:11:49: Write Speed Factor R2W_FACTOR                 :0x2
16:11:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:49: FILE_FORMAT_GRP                               :0x0
16:11:49: COPY flag                                     :0x1
16:11:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:49: File_Format                                   :0x0
16:11:49: CRC                                           :0x0
16:11:49: ####CSD Registe Values####  

16:11:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:49: ProductSerialNumber = 0x23482900
16:11:49: CardMaximumLBA      = 0x3b72400
16:11:49: CardCapacity        = 32G
16:11:49: Is card secure      = 0
16:11:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:49: [DVTCommonLib]###  LogicalWrite called
16:11:51: [ WriteLba(0x8EE9EE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 459 ] 
16:11:51: [DVTCommonLib]###  LogicalWrite Completed 

16:11:51: [DVTCommonLib]###  LogicalRead called
16:11:53: [ ReadLba(0x8EE9EE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 460 ] 
16:11:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:53: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 1 times 
16:11:53: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1, 0x0) , Command count = 461 ] 
16:11:53: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:11:53: [DVTCommonLib]### Card response as High Capacity from card
16:11:53: [DVTCommonLib]### VOLA from card : 0x1
16:11:53: [DVTCommonLib]### CMD Pattern from card : 0x1
16:11:53: [DVTCommonLib]### Reserved bits from card : 0x0
16:11:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B56F0>, <py_sfcl.CommandDataDefinition object at 0x066B5720>) , Command count = 462 ] 
16:11:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5780>, <py_sfcl.CommandDataDefinition object at 0x066B57B0>) , Command count = 463 ] 
16:11:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:53: [ SetCardRCA(0x1, 0xD555) , Command count = 464 ] 
16:11:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:53: [ SetBusWidth(0x4) , Command count = 465 ] 
16:11:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:11:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:53: ####CSD Registe 2.0 Values####
16:11:53: CSD_STRUCTURE                                 :0x1
16:11:53: Reserv1                                       :0x0
16:11:53: Time Access 1 TAAC                            :0xe
16:11:53: Time Access 2 NSAC*100                        :0x0
16:11:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:53: Card Command Classess CCC                     :0x5b5
16:11:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:53: DSR(driver stage register)  DSR_IMP           :0x0
16:11:53: Reserv2                                       :0x0
16:11:53: Device Size C_SIZE                            :0xedc8
16:11:53: Reserv3                                       :0x0
16:11:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:53: Reserv4                                       :0x0
16:11:53: Write Speed Factor R2W_FACTOR                 :0x2
16:11:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:53: FILE_FORMAT_GRP                               :0x0
16:11:53: COPY flag                                     :0x1
16:11:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:53: File_Format                                   :0x0
16:11:53: CRC                                           :0x0
16:11:53: ####CSD Registe Values####  

16:11:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:53: ProductSerialNumber = 0x23482900
16:11:53: CardMaximumLBA      = 0x3b72400
16:11:53: CardCapacity        = 32G
16:11:53: Is card secure      = 0
16:11:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:53: [DVTCommonLib]###  LogicalWrite called
16:11:55: [ WriteLba(0x26FB271, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 466 ] 
16:11:55: [DVTCommonLib]###  LogicalWrite Completed 

16:11:55: [DVTCommonLib]###  LogicalRead called
16:11:56: [ ReadLba(0x26FB271, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 467 ] 
16:11:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 2 times 
16:11:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2, 0x0) , Command count = 468 ] 
16:11:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:11:56: [DVTCommonLib]### Card response as High Capacity from card
16:11:56: [DVTCommonLib]### VOLA from card : 0x1
16:11:56: [DVTCommonLib]### CMD Pattern from card : 0x2
16:11:56: [DVTCommonLib]### Reserved bits from card : 0x0
16:11:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5AE0>, <py_sfcl.CommandDataDefinition object at 0x066B5B10>) , Command count = 469 ] 
16:11:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5B70>, <py_sfcl.CommandDataDefinition object at 0x066B5BA0>) , Command count = 470 ] 
16:11:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:56: [ SetCardRCA(0x1, 0xD555) , Command count = 471 ] 
16:11:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:56: [ SetBusWidth(0x4) , Command count = 472 ] 
16:11:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:11:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:56: ####CSD Registe 2.0 Values####
16:11:56: CSD_STRUCTURE                                 :0x1
16:11:56: Reserv1                                       :0x0
16:11:56: Time Access 1 TAAC                            :0xe
16:11:56: Time Access 2 NSAC*100                        :0x0
16:11:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:56: Card Command Classess CCC                     :0x5b5
16:11:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:56: DSR(driver stage register)  DSR_IMP           :0x0
16:11:56: Reserv2                                       :0x0
16:11:56: Device Size C_SIZE                            :0xedc8
16:11:56: Reserv3                                       :0x0
16:11:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:56: Reserv4                                       :0x0
16:11:56: Write Speed Factor R2W_FACTOR                 :0x2
16:11:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:56: FILE_FORMAT_GRP                               :0x0
16:11:56: COPY flag                                     :0x1
16:11:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:56: File_Format                                   :0x0
16:11:56: CRC                                           :0x0
16:11:56: ####CSD Registe Values####  

16:11:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:11:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:56: ProductSerialNumber = 0x23482900
16:11:56: CardMaximumLBA      = 0x3b72400
16:11:56: CardCapacity        = 32G
16:11:56: Is card secure      = 0
16:11:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:11:56: [DVTCommonLib]###  LogicalWrite called
16:11:58: [ WriteLba(0x74DD44, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 473 ] 
16:11:58: [DVTCommonLib]###  LogicalWrite Completed 

16:11:58: [DVTCommonLib]###  LogicalRead called
16:12:00: [ ReadLba(0x74DD44, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 474 ] 
16:12:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:00: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 3 times 
16:12:00: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3, 0x0) , Command count = 475 ] 
16:12:00: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:00: [DVTCommonLib]### Card response as High Capacity from card
16:12:00: [DVTCommonLib]### VOLA from card : 0x1
16:12:00: [DVTCommonLib]### CMD Pattern from card : 0x3
16:12:00: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5ED0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 476 ] 
16:12:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9090>, <py_sfcl.CommandDataDefinition object at 0x066B5F60>) , Command count = 477 ] 
16:12:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:00: [ SetCardRCA(0x1, 0xD555) , Command count = 478 ] 
16:12:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:00: [ SetBusWidth(0x4) , Command count = 479 ] 
16:12:00: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:00: ####CSD Registe 2.0 Values####
16:12:00: CSD_STRUCTURE                                 :0x1
16:12:00: Reserv1                                       :0x0
16:12:00: Time Access 1 TAAC                            :0xe
16:12:00: Time Access 2 NSAC*100                        :0x0
16:12:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:00: Card Command Classess CCC                     :0x5b5
16:12:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:00: DSR(driver stage register)  DSR_IMP           :0x0
16:12:00: Reserv2                                       :0x0
16:12:00: Device Size C_SIZE                            :0xedc8
16:12:00: Reserv3                                       :0x0
16:12:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:00: Reserv4                                       :0x0
16:12:00: Write Speed Factor R2W_FACTOR                 :0x2
16:12:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:00: FILE_FORMAT_GRP                               :0x0
16:12:00: COPY flag                                     :0x1
16:12:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:00: File_Format                                   :0x0
16:12:00: CRC                                           :0x0
16:12:00: ####CSD Registe Values####  

16:12:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:00: ProductSerialNumber = 0x23482900
16:12:00: CardMaximumLBA      = 0x3b72400
16:12:00: CardCapacity        = 32G
16:12:00: Is card secure      = 0
16:12:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:00: [DVTCommonLib]###  LogicalWrite called
16:12:02: [ WriteLba(0x21A2A4D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 480 ] 
16:12:02: [DVTCommonLib]###  LogicalWrite Completed 

16:12:02: [DVTCommonLib]###  LogicalRead called
16:12:03: [ ReadLba(0x21A2A4D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 481 ] 
16:12:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 4 times 
16:12:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4, 0x0) , Command count = 482 ] 
16:12:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:03: [DVTCommonLib]### Card response as High Capacity from card
16:12:03: [DVTCommonLib]### VOLA from card : 0x1
16:12:03: [DVTCommonLib]### CMD Pattern from card : 0x4
16:12:03: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 483 ] 
16:12:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9390>, <py_sfcl.CommandDataDefinition object at 0x066B93C0>) , Command count = 484 ] 
16:12:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:03: [ SetCardRCA(0x1, 0xD555) , Command count = 485 ] 
16:12:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:03: [ SetBusWidth(0x4) , Command count = 486 ] 
16:12:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:03: ####CSD Registe 2.0 Values####
16:12:03: CSD_STRUCTURE                                 :0x1
16:12:03: Reserv1                                       :0x0
16:12:03: Time Access 1 TAAC                            :0xe
16:12:03: Time Access 2 NSAC*100                        :0x0
16:12:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:03: Card Command Classess CCC                     :0x5b5
16:12:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:03: DSR(driver stage register)  DSR_IMP           :0x0
16:12:03: Reserv2                                       :0x0
16:12:03: Device Size C_SIZE                            :0xedc8
16:12:03: Reserv3                                       :0x0
16:12:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:03: Reserv4                                       :0x0
16:12:03: Write Speed Factor R2W_FACTOR                 :0x2
16:12:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:03: FILE_FORMAT_GRP                               :0x0
16:12:03: COPY flag                                     :0x1
16:12:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:03: File_Format                                   :0x0
16:12:03: CRC                                           :0x0
16:12:03: ####CSD Registe Values####  

16:12:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:03: ProductSerialNumber = 0x23482900
16:12:03: CardMaximumLBA      = 0x3b72400
16:12:03: CardCapacity        = 32G
16:12:03: Is card secure      = 0
16:12:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:04: [DVTCommonLib]###  LogicalWrite called
16:12:05: [ WriteLba(0x2D62DE8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 487 ] 
16:12:05: [DVTCommonLib]###  LogicalWrite Completed 

16:12:05: [DVTCommonLib]###  LogicalRead called
16:12:07: [ ReadLba(0x2D62DE8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 488 ] 
16:12:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:07: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 5 times 
16:12:07: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5, 0x0) , Command count = 489 ] 
16:12:07: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:07: [DVTCommonLib]### Card response as High Capacity from card
16:12:07: [DVTCommonLib]### VOLA from card : 0x1
16:12:07: [DVTCommonLib]### CMD Pattern from card : 0x5
16:12:07: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 490 ] 
16:12:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9780>, <py_sfcl.CommandDataDefinition object at 0x066B97B0>) , Command count = 491 ] 
16:12:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:07: [ SetCardRCA(0x1, 0xD555) , Command count = 492 ] 
16:12:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:07: [ SetBusWidth(0x4) , Command count = 493 ] 
16:12:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:07: ####CSD Registe 2.0 Values####
16:12:07: CSD_STRUCTURE                                 :0x1
16:12:07: Reserv1                                       :0x0
16:12:07: Time Access 1 TAAC                            :0xe
16:12:07: Time Access 2 NSAC*100                        :0x0
16:12:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:07: Card Command Classess CCC                     :0x5b5
16:12:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:07: DSR(driver stage register)  DSR_IMP           :0x0
16:12:07: Reserv2                                       :0x0
16:12:07: Device Size C_SIZE                            :0xedc8
16:12:07: Reserv3                                       :0x0
16:12:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:07: Reserv4                                       :0x0
16:12:07: Write Speed Factor R2W_FACTOR                 :0x2
16:12:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:07: FILE_FORMAT_GRP                               :0x0
16:12:07: COPY flag                                     :0x1
16:12:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:07: File_Format                                   :0x0
16:12:07: CRC                                           :0x0
16:12:07: ####CSD Registe Values####  

16:12:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:07: ProductSerialNumber = 0x23482900
16:12:07: CardMaximumLBA      = 0x3b72400
16:12:07: CardCapacity        = 32G
16:12:07: Is card secure      = 0
16:12:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:07: [DVTCommonLib]###  LogicalWrite called
16:12:09: [ WriteLba(0x132760, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 494 ] 
16:12:09: [DVTCommonLib]###  LogicalWrite Completed 

16:12:09: [DVTCommonLib]###  LogicalRead called
16:12:10: [ ReadLba(0x132760, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 495 ] 
16:12:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 6 times 
16:12:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6, 0x0) , Command count = 496 ] 
16:12:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:10: [DVTCommonLib]### Card response as High Capacity from card
16:12:10: [DVTCommonLib]### VOLA from card : 0x1
16:12:10: [DVTCommonLib]### CMD Pattern from card : 0x6
16:12:10: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 497 ] 
16:12:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9AE0>, <py_sfcl.CommandDataDefinition object at 0x066B98D0>) , Command count = 498 ] 
16:12:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:10: [ SetCardRCA(0x1, 0xD555) , Command count = 499 ] 
16:12:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:10: [ SetBusWidth(0x4) , Command count = 500 ] 
16:12:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:10: ####CSD Registe 2.0 Values####
16:12:10: CSD_STRUCTURE                                 :0x1
16:12:10: Reserv1                                       :0x0
16:12:10: Time Access 1 TAAC                            :0xe
16:12:10: Time Access 2 NSAC*100                        :0x0
16:12:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:10: Card Command Classess CCC                     :0x5b5
16:12:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:10: DSR(driver stage register)  DSR_IMP           :0x0
16:12:10: Reserv2                                       :0x0
16:12:10: Device Size C_SIZE                            :0xedc8
16:12:10: Reserv3                                       :0x0
16:12:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:10: Reserv4                                       :0x0
16:12:10: Write Speed Factor R2W_FACTOR                 :0x2
16:12:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:10: FILE_FORMAT_GRP                               :0x0
16:12:10: COPY flag                                     :0x1
16:12:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:10: File_Format                                   :0x0
16:12:10: CRC                                           :0x0
16:12:10: ####CSD Registe Values####  

16:12:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:11: ProductSerialNumber = 0x23482900
16:12:11: CardMaximumLBA      = 0x3b72400
16:12:11: CardCapacity        = 32G
16:12:11: Is card secure      = 0
16:12:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:11: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:11: [DVTCommonLib]###  LogicalWrite called
16:12:12: [ WriteLba(0x10317F2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 501 ] 
16:12:12: [DVTCommonLib]###  LogicalWrite Completed 

16:12:12: [DVTCommonLib]###  LogicalRead called
16:12:14: [ ReadLba(0x10317F2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 502 ] 
16:12:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:14: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 7 times 
16:12:14: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7, 0x0) , Command count = 503 ] 
16:12:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:14: [DVTCommonLib]### Card response as High Capacity from card
16:12:14: [DVTCommonLib]### VOLA from card : 0x1
16:12:14: [DVTCommonLib]### CMD Pattern from card : 0x7
16:12:14: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9C30>, <py_sfcl.CommandDataDefinition object at 0x066B9A50>) , Command count = 504 ] 
16:12:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C960>, <py_sfcl.CommandDataDefinition object at 0x066B9EA0>) , Command count = 505 ] 
16:12:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:14: [ SetCardRCA(0x1, 0xD555) , Command count = 506 ] 
16:12:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:14: [ SetBusWidth(0x4) , Command count = 507 ] 
16:12:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:14: ####CSD Registe 2.0 Values####
16:12:14: CSD_STRUCTURE                                 :0x1
16:12:14: Reserv1                                       :0x0
16:12:14: Time Access 1 TAAC                            :0xe
16:12:14: Time Access 2 NSAC*100                        :0x0
16:12:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:14: Card Command Classess CCC                     :0x5b5
16:12:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:14: DSR(driver stage register)  DSR_IMP           :0x0
16:12:14: Reserv2                                       :0x0
16:12:14: Device Size C_SIZE                            :0xedc8
16:12:14: Reserv3                                       :0x0
16:12:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:14: Reserv4                                       :0x0
16:12:14: Write Speed Factor R2W_FACTOR                 :0x2
16:12:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:14: FILE_FORMAT_GRP                               :0x0
16:12:14: COPY flag                                     :0x1
16:12:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:14: File_Format                                   :0x0
16:12:14: CRC                                           :0x0
16:12:14: ####CSD Registe Values####  

16:12:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:14: ProductSerialNumber = 0x23482900
16:12:14: CardMaximumLBA      = 0x3b72400
16:12:14: CardCapacity        = 32G
16:12:14: Is card secure      = 0
16:12:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:14: [DVTCommonLib]###  LogicalWrite called
16:12:16: [ WriteLba(0x1349C31, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 508 ] 
16:12:16: [DVTCommonLib]###  LogicalWrite Completed 

16:12:16: [DVTCommonLib]###  LogicalRead called
16:12:17: [ ReadLba(0x1349C31, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 509 ] 
16:12:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 8 times 
16:12:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8, 0x0) , Command count = 510 ] 
16:12:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:17: [DVTCommonLib]### Card response as High Capacity from card
16:12:17: [DVTCommonLib]### VOLA from card : 0x1
16:12:17: [DVTCommonLib]### CMD Pattern from card : 0x8
16:12:17: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 511 ] 
16:12:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E1B0>, <py_sfcl.CommandDataDefinition object at 0x066B9C00>) , Command count = 512 ] 
16:12:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:17: [ SetCardRCA(0x1, 0xD555) , Command count = 513 ] 
16:12:18: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:18: [ SetBusWidth(0x4) , Command count = 514 ] 
16:12:18: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:18: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:18: ####CSD Registe 2.0 Values####
16:12:18: CSD_STRUCTURE                                 :0x1
16:12:18: Reserv1                                       :0x0
16:12:18: Time Access 1 TAAC                            :0xe
16:12:18: Time Access 2 NSAC*100                        :0x0
16:12:18: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:18: Card Command Classess CCC                     :0x5b5
16:12:18: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:18: DSR(driver stage register)  DSR_IMP           :0x0
16:12:18: Reserv2                                       :0x0
16:12:18: Device Size C_SIZE                            :0xedc8
16:12:18: Reserv3                                       :0x0
16:12:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:18: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:18: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:18: Reserv4                                       :0x0
16:12:18: Write Speed Factor R2W_FACTOR                 :0x2
16:12:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:18: FILE_FORMAT_GRP                               :0x0
16:12:18: COPY flag                                     :0x1
16:12:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:18: File_Format                                   :0x0
16:12:18: CRC                                           :0x0
16:12:18: ####CSD Registe Values####  

16:12:18: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:18: ProductSerialNumber = 0x23482900
16:12:18: CardMaximumLBA      = 0x3b72400
16:12:18: CardCapacity        = 32G
16:12:18: Is card secure      = 0
16:12:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:18: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:18: [DVTCommonLib]###  LogicalWrite called
16:12:19: [ WriteLba(0x3B21BDD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 515 ] 
16:12:19: [DVTCommonLib]###  LogicalWrite Completed 

16:12:19: [DVTCommonLib]###  LogicalRead called
16:12:21: [ ReadLba(0x3B21BDD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 516 ] 
16:12:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:21: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 9 times 
16:12:21: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9, 0x0) , Command count = 517 ] 
16:12:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:21: [DVTCommonLib]### Card response as High Capacity from card
16:12:21: [DVTCommonLib]### VOLA from card : 0x1
16:12:21: [DVTCommonLib]### CMD Pattern from card : 0x9
16:12:21: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 518 ] 
16:12:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552ECC0>, <py_sfcl.CommandDataDefinition object at 0x066B9ED0>) , Command count = 519 ] 
16:12:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:21: [ SetCardRCA(0x1, 0xD555) , Command count = 520 ] 
16:12:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:21: [ SetBusWidth(0x4) , Command count = 521 ] 
16:12:21: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:21: ####CSD Registe 2.0 Values####
16:12:21: CSD_STRUCTURE                                 :0x1
16:12:21: Reserv1                                       :0x0
16:12:21: Time Access 1 TAAC                            :0xe
16:12:21: Time Access 2 NSAC*100                        :0x0
16:12:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:21: Card Command Classess CCC                     :0x5b5
16:12:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:21: DSR(driver stage register)  DSR_IMP           :0x0
16:12:21: Reserv2                                       :0x0
16:12:21: Device Size C_SIZE                            :0xedc8
16:12:21: Reserv3                                       :0x0
16:12:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:21: Reserv4                                       :0x0
16:12:21: Write Speed Factor R2W_FACTOR                 :0x2
16:12:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:21: FILE_FORMAT_GRP                               :0x0
16:12:21: COPY flag                                     :0x1
16:12:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:21: File_Format                                   :0x0
16:12:21: CRC                                           :0x0
16:12:21: ####CSD Registe Values####  

16:12:21: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:21: ProductSerialNumber = 0x23482900
16:12:21: CardMaximumLBA      = 0x3b72400
16:12:21: CardCapacity        = 32G
16:12:21: Is card secure      = 0
16:12:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:21: [DVTCommonLib]###  LogicalWrite called
16:12:23: [ WriteLba(0x1CB6DEC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 522 ] 
16:12:23: [DVTCommonLib]###  LogicalWrite Completed 

16:12:23: [DVTCommonLib]###  LogicalRead called
16:12:24: [ ReadLba(0x1CB6DEC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 523 ] 
16:12:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 10 times 
16:12:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA, 0x0) , Command count = 524 ] 
16:12:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:24: [DVTCommonLib]### Card response as High Capacity from card
16:12:24: [DVTCommonLib]### VOLA from card : 0x1
16:12:24: [DVTCommonLib]### CMD Pattern from card : 0xA
16:12:24: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055409C0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 525 ] 
16:12:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0553A3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9F30>) , Command count = 526 ] 
16:12:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:24: [ SetCardRCA(0x1, 0xD555) , Command count = 527 ] 
16:12:25: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:25: [ SetBusWidth(0x4) , Command count = 528 ] 
16:12:25: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:25: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:25: ####CSD Registe 2.0 Values####
16:12:25: CSD_STRUCTURE                                 :0x1
16:12:25: Reserv1                                       :0x0
16:12:25: Time Access 1 TAAC                            :0xe
16:12:25: Time Access 2 NSAC*100                        :0x0
16:12:25: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:25: Card Command Classess CCC                     :0x5b5
16:12:25: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:25: DSR(driver stage register)  DSR_IMP           :0x0
16:12:25: Reserv2                                       :0x0
16:12:25: Device Size C_SIZE                            :0xedc8
16:12:25: Reserv3                                       :0x0
16:12:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:25: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:25: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:25: Reserv4                                       :0x0
16:12:25: Write Speed Factor R2W_FACTOR                 :0x2
16:12:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:25: FILE_FORMAT_GRP                               :0x0
16:12:25: COPY flag                                     :0x1
16:12:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:25: File_Format                                   :0x0
16:12:25: CRC                                           :0x0
16:12:25: ####CSD Registe Values####  

16:12:25: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:25: ProductSerialNumber = 0x23482900
16:12:25: CardMaximumLBA      = 0x3b72400
16:12:25: CardCapacity        = 32G
16:12:25: Is card secure      = 0
16:12:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:25: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:25: [DVTCommonLib]###  LogicalWrite called
16:12:26: [ WriteLba(0x2D3E271, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 529 ] 
16:12:26: [DVTCommonLib]###  LogicalWrite Completed 

16:12:26: [DVTCommonLib]###  LogicalRead called
16:12:28: [ ReadLba(0x2D3E271, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 530 ] 
16:12:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 11 times 
16:12:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB, 0x0) , Command count = 531 ] 
16:12:28: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:28: [DVTCommonLib]### Card response as High Capacity from card
16:12:28: [DVTCommonLib]### VOLA from card : 0x1
16:12:28: [DVTCommonLib]### CMD Pattern from card : 0xB
16:12:28: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9840>, <py_sfcl.CommandDataDefinition object at 0x066B9DB0>) , Command count = 532 ] 
16:12:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540C90>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 533 ] 
16:12:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:28: [ SetCardRCA(0x1, 0xD555) , Command count = 534 ] 
16:12:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:28: [ SetBusWidth(0x4) , Command count = 535 ] 
16:12:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:28: ####CSD Registe 2.0 Values####
16:12:28: CSD_STRUCTURE                                 :0x1
16:12:28: Reserv1                                       :0x0
16:12:28: Time Access 1 TAAC                            :0xe
16:12:28: Time Access 2 NSAC*100                        :0x0
16:12:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:28: Card Command Classess CCC                     :0x5b5
16:12:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:28: DSR(driver stage register)  DSR_IMP           :0x0
16:12:28: Reserv2                                       :0x0
16:12:28: Device Size C_SIZE                            :0xedc8
16:12:28: Reserv3                                       :0x0
16:12:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:28: Reserv4                                       :0x0
16:12:28: Write Speed Factor R2W_FACTOR                 :0x2
16:12:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:28: FILE_FORMAT_GRP                               :0x0
16:12:28: COPY flag                                     :0x1
16:12:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:28: File_Format                                   :0x0
16:12:28: CRC                                           :0x0
16:12:28: ####CSD Registe Values####  

16:12:28: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:28: ProductSerialNumber = 0x23482900
16:12:28: CardMaximumLBA      = 0x3b72400
16:12:28: CardCapacity        = 32G
16:12:28: Is card secure      = 0
16:12:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:28: [DVTCommonLib]###  LogicalWrite called
16:12:30: [ WriteLba(0x6525C4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 536 ] 
16:12:30: [DVTCommonLib]###  LogicalWrite Completed 

16:12:30: [DVTCommonLib]###  LogicalRead called
16:12:31: [ ReadLba(0x6525C4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 537 ] 
16:12:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 12 times 
16:12:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC, 0x0) , Command count = 538 ] 
16:12:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:31: [DVTCommonLib]### Card response as High Capacity from card
16:12:31: [DVTCommonLib]### VOLA from card : 0x1
16:12:31: [DVTCommonLib]### CMD Pattern from card : 0xC
16:12:31: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482030>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 539 ] 
16:12:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F60>, <py_sfcl.CommandDataDefinition object at 0x066B9900>) , Command count = 540 ] 
16:12:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:31: [ SetCardRCA(0x1, 0xD555) , Command count = 541 ] 
16:12:32: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:32: [ SetBusWidth(0x4) , Command count = 542 ] 
16:12:32: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:32: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:32: ####CSD Registe 2.0 Values####
16:12:32: CSD_STRUCTURE                                 :0x1
16:12:32: Reserv1                                       :0x0
16:12:32: Time Access 1 TAAC                            :0xe
16:12:32: Time Access 2 NSAC*100                        :0x0
16:12:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:32: Card Command Classess CCC                     :0x5b5
16:12:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:32: DSR(driver stage register)  DSR_IMP           :0x0
16:12:32: Reserv2                                       :0x0
16:12:32: Device Size C_SIZE                            :0xedc8
16:12:32: Reserv3                                       :0x0
16:12:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:32: Reserv4                                       :0x0
16:12:32: Write Speed Factor R2W_FACTOR                 :0x2
16:12:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:32: FILE_FORMAT_GRP                               :0x0
16:12:32: COPY flag                                     :0x1
16:12:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:32: File_Format                                   :0x0
16:12:32: CRC                                           :0x0
16:12:32: ####CSD Registe Values####  

16:12:32: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:32: ProductSerialNumber = 0x23482900
16:12:32: CardMaximumLBA      = 0x3b72400
16:12:32: CardCapacity        = 32G
16:12:32: Is card secure      = 0
16:12:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:32: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:32: [DVTCommonLib]###  LogicalWrite called
16:12:33: [ WriteLba(0x2586843, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 543 ] 
16:12:33: [DVTCommonLib]###  LogicalWrite Completed 

16:12:33: [DVTCommonLib]###  LogicalRead called
16:12:35: [ ReadLba(0x2586843, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 544 ] 
16:12:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:35: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 13 times 
16:12:35: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD, 0x0) , Command count = 545 ] 
16:12:35: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:35: [DVTCommonLib]### Card response as High Capacity from card
16:12:35: [DVTCommonLib]### VOLA from card : 0x1
16:12:35: [DVTCommonLib]### CMD Pattern from card : 0xD
16:12:35: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066B96C0>) , Command count = 546 ] 
16:12:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064827B0>, <py_sfcl.CommandDataDefinition object at 0x066B9570>) , Command count = 547 ] 
16:12:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:35: [ SetCardRCA(0x1, 0xD555) , Command count = 548 ] 
16:12:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:35: [ SetBusWidth(0x4) , Command count = 549 ] 
16:12:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:35: ####CSD Registe 2.0 Values####
16:12:35: CSD_STRUCTURE                                 :0x1
16:12:35: Reserv1                                       :0x0
16:12:35: Time Access 1 TAAC                            :0xe
16:12:35: Time Access 2 NSAC*100                        :0x0
16:12:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:35: Card Command Classess CCC                     :0x5b5
16:12:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:35: DSR(driver stage register)  DSR_IMP           :0x0
16:12:35: Reserv2                                       :0x0
16:12:35: Device Size C_SIZE                            :0xedc8
16:12:35: Reserv3                                       :0x0
16:12:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:35: Reserv4                                       :0x0
16:12:35: Write Speed Factor R2W_FACTOR                 :0x2
16:12:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:35: FILE_FORMAT_GRP                               :0x0
16:12:35: COPY flag                                     :0x1
16:12:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:35: File_Format                                   :0x0
16:12:35: CRC                                           :0x0
16:12:35: ####CSD Registe Values####  

16:12:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:35: ProductSerialNumber = 0x23482900
16:12:35: CardMaximumLBA      = 0x3b72400
16:12:35: CardCapacity        = 32G
16:12:35: Is card secure      = 0
16:12:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:35: [DVTCommonLib]###  LogicalWrite called
16:12:37: [ WriteLba(0x137E66C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 550 ] 
16:12:37: [DVTCommonLib]###  LogicalWrite Completed 

16:12:37: [DVTCommonLib]###  LogicalRead called
16:12:38: [ ReadLba(0x137E66C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 551 ] 
16:12:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 14 times 
16:12:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xE, 0x0) , Command count = 552 ] 
16:12:39: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:39: [DVTCommonLib]### Card response as High Capacity from card
16:12:39: [DVTCommonLib]### VOLA from card : 0x1
16:12:39: [DVTCommonLib]### CMD Pattern from card : 0xE
16:12:39: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 553 ] 
16:12:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603780>, <py_sfcl.CommandDataDefinition object at 0x066B9180>) , Command count = 554 ] 
16:12:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:39: [ SetCardRCA(0x1, 0xD555) , Command count = 555 ] 
16:12:39: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:39: [ SetBusWidth(0x4) , Command count = 556 ] 
16:12:39: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:39: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:39: ####CSD Registe 2.0 Values####
16:12:39: CSD_STRUCTURE                                 :0x1
16:12:39: Reserv1                                       :0x0
16:12:39: Time Access 1 TAAC                            :0xe
16:12:39: Time Access 2 NSAC*100                        :0x0
16:12:39: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:39: Card Command Classess CCC                     :0x5b5
16:12:39: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:39: DSR(driver stage register)  DSR_IMP           :0x0
16:12:39: Reserv2                                       :0x0
16:12:39: Device Size C_SIZE                            :0xedc8
16:12:39: Reserv3                                       :0x0
16:12:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:39: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:39: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:39: Reserv4                                       :0x0
16:12:39: Write Speed Factor R2W_FACTOR                 :0x2
16:12:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:39: FILE_FORMAT_GRP                               :0x0
16:12:39: COPY flag                                     :0x1
16:12:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:39: File_Format                                   :0x0
16:12:39: CRC                                           :0x0
16:12:39: ####CSD Registe Values####  

16:12:39: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:39: ProductSerialNumber = 0x23482900
16:12:39: CardMaximumLBA      = 0x3b72400
16:12:39: CardCapacity        = 32G
16:12:39: Is card secure      = 0
16:12:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:39: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:39: [DVTCommonLib]###  LogicalWrite called
16:12:40: [ WriteLba(0x2F66E1C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 557 ] 
16:12:40: [DVTCommonLib]###  LogicalWrite Completed 

16:12:40: [DVTCommonLib]###  LogicalRead called
16:12:42: [ ReadLba(0x2F66E1C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 558 ] 
16:12:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:42: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 15 times 
16:12:42: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xF, 0x0) , Command count = 559 ] 
16:12:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:42: [DVTCommonLib]### Card response as High Capacity from card
16:12:42: [DVTCommonLib]### VOLA from card : 0x1
16:12:42: [DVTCommonLib]### CMD Pattern from card : 0xF
16:12:42: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066037B0>, <py_sfcl.CommandDataDefinition object at 0x06603720>) , Command count = 560 ] 
16:12:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603A50>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 561 ] 
16:12:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:42: [ SetCardRCA(0x1, 0xD555) , Command count = 562 ] 
16:12:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:42: [ SetBusWidth(0x4) , Command count = 563 ] 
16:12:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:42: ####CSD Registe 2.0 Values####
16:12:42: CSD_STRUCTURE                                 :0x1
16:12:42: Reserv1                                       :0x0
16:12:42: Time Access 1 TAAC                            :0xe
16:12:42: Time Access 2 NSAC*100                        :0x0
16:12:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:42: Card Command Classess CCC                     :0x5b5
16:12:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:42: DSR(driver stage register)  DSR_IMP           :0x0
16:12:42: Reserv2                                       :0x0
16:12:42: Device Size C_SIZE                            :0xedc8
16:12:42: Reserv3                                       :0x0
16:12:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:42: Reserv4                                       :0x0
16:12:42: Write Speed Factor R2W_FACTOR                 :0x2
16:12:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:42: FILE_FORMAT_GRP                               :0x0
16:12:42: COPY flag                                     :0x1
16:12:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:42: File_Format                                   :0x0
16:12:42: CRC                                           :0x0
16:12:42: ####CSD Registe Values####  

16:12:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:42: ProductSerialNumber = 0x23482900
16:12:42: CardMaximumLBA      = 0x3b72400
16:12:42: CardCapacity        = 32G
16:12:42: Is card secure      = 0
16:12:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:42: [DVTCommonLib]###  LogicalWrite called
16:12:44: [ WriteLba(0x1C9F32B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 564 ] 
16:12:44: [DVTCommonLib]###  LogicalWrite Completed 

16:12:44: [DVTCommonLib]###  LogicalRead called
16:12:45: [ ReadLba(0x1C9F32B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 565 ] 
16:12:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 16 times 
16:12:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x10, 0x0) , Command count = 566 ] 
16:12:46: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:46: [DVTCommonLib]### Card response as High Capacity from card
16:12:46: [DVTCommonLib]### VOLA from card : 0x1
16:12:46: [DVTCommonLib]### CMD Pattern from card : 0x10
16:12:46: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035A0>, <py_sfcl.CommandDataDefinition object at 0x06603750>) , Command count = 567 ] 
16:12:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603B40>, <py_sfcl.CommandDataDefinition object at 0x06603510>) , Command count = 568 ] 
16:12:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:46: [ SetCardRCA(0x1, 0xD555) , Command count = 569 ] 
16:12:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:46: [ SetBusWidth(0x4) , Command count = 570 ] 
16:12:46: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:46: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:46: ####CSD Registe 2.0 Values####
16:12:46: CSD_STRUCTURE                                 :0x1
16:12:46: Reserv1                                       :0x0
16:12:46: Time Access 1 TAAC                            :0xe
16:12:46: Time Access 2 NSAC*100                        :0x0
16:12:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:46: Card Command Classess CCC                     :0x5b5
16:12:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:46: DSR(driver stage register)  DSR_IMP           :0x0
16:12:46: Reserv2                                       :0x0
16:12:46: Device Size C_SIZE                            :0xedc8
16:12:46: Reserv3                                       :0x0
16:12:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:46: Reserv4                                       :0x0
16:12:46: Write Speed Factor R2W_FACTOR                 :0x2
16:12:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:46: FILE_FORMAT_GRP                               :0x0
16:12:46: COPY flag                                     :0x1
16:12:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:46: File_Format                                   :0x0
16:12:46: CRC                                           :0x0
16:12:46: ####CSD Registe Values####  

16:12:46: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:46: ProductSerialNumber = 0x23482900
16:12:46: CardMaximumLBA      = 0x3b72400
16:12:46: CardCapacity        = 32G
16:12:46: Is card secure      = 0
16:12:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:46: [DVTCommonLib]###  LogicalWrite called
16:12:47: [ WriteLba(0x1DE2DBC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 571 ] 
16:12:47: [DVTCommonLib]###  LogicalWrite Completed 

16:12:47: [DVTCommonLib]###  LogicalRead called
16:12:49: [ ReadLba(0x1DE2DBC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 572 ] 
16:12:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:49: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 17 times 
16:12:49: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x11, 0x0) , Command count = 573 ] 
16:12:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:49: [DVTCommonLib]### Card response as High Capacity from card
16:12:49: [DVTCommonLib]### VOLA from card : 0x1
16:12:49: [DVTCommonLib]### CMD Pattern from card : 0x11
16:12:49: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x06603A80>) , Command count = 574 ] 
16:12:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C060>, <py_sfcl.CommandDataDefinition object at 0x06603BA0>) , Command count = 575 ] 
16:12:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:49: [ SetCardRCA(0x1, 0xD555) , Command count = 576 ] 
16:12:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:49: [ SetBusWidth(0x4) , Command count = 577 ] 
16:12:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:49: ####CSD Registe 2.0 Values####
16:12:49: CSD_STRUCTURE                                 :0x1
16:12:49: Reserv1                                       :0x0
16:12:49: Time Access 1 TAAC                            :0xe
16:12:49: Time Access 2 NSAC*100                        :0x0
16:12:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:49: Card Command Classess CCC                     :0x5b5
16:12:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:49: DSR(driver stage register)  DSR_IMP           :0x0
16:12:49: Reserv2                                       :0x0
16:12:49: Device Size C_SIZE                            :0xedc8
16:12:49: Reserv3                                       :0x0
16:12:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:49: Reserv4                                       :0x0
16:12:49: Write Speed Factor R2W_FACTOR                 :0x2
16:12:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:49: FILE_FORMAT_GRP                               :0x0
16:12:49: COPY flag                                     :0x1
16:12:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:49: File_Format                                   :0x0
16:12:49: CRC                                           :0x0
16:12:49: ####CSD Registe Values####  

16:12:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:49: ProductSerialNumber = 0x23482900
16:12:49: CardMaximumLBA      = 0x3b72400
16:12:49: CardCapacity        = 32G
16:12:49: Is card secure      = 0
16:12:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:49: [DVTCommonLib]###  LogicalWrite called
16:12:51: [ WriteLba(0xC03746, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 578 ] 
16:12:51: [DVTCommonLib]###  LogicalWrite Completed 

16:12:51: [DVTCommonLib]###  LogicalRead called
16:12:52: [ ReadLba(0xC03746, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 579 ] 
16:12:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 18 times 
16:12:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x12, 0x0) , Command count = 580 ] 
16:12:53: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:53: [DVTCommonLib]### Card response as High Capacity from card
16:12:53: [DVTCommonLib]### VOLA from card : 0x1
16:12:53: [DVTCommonLib]### CMD Pattern from card : 0x12
16:12:53: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x06603CF0>) , Command count = 581 ] 
16:12:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603C90>, <py_sfcl.CommandDataDefinition object at 0x066038A0>) , Command count = 582 ] 
16:12:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:53: [ SetCardRCA(0x1, 0xD555) , Command count = 583 ] 
16:12:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:53: [ SetBusWidth(0x4) , Command count = 584 ] 
16:12:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:53: ####CSD Registe 2.0 Values####
16:12:53: CSD_STRUCTURE                                 :0x1
16:12:53: Reserv1                                       :0x0
16:12:53: Time Access 1 TAAC                            :0xe
16:12:53: Time Access 2 NSAC*100                        :0x0
16:12:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:53: Card Command Classess CCC                     :0x5b5
16:12:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:53: DSR(driver stage register)  DSR_IMP           :0x0
16:12:53: Reserv2                                       :0x0
16:12:53: Device Size C_SIZE                            :0xedc8
16:12:53: Reserv3                                       :0x0
16:12:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:53: Reserv4                                       :0x0
16:12:53: Write Speed Factor R2W_FACTOR                 :0x2
16:12:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:53: FILE_FORMAT_GRP                               :0x0
16:12:53: COPY flag                                     :0x1
16:12:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:53: File_Format                                   :0x0
16:12:53: CRC                                           :0x0
16:12:53: ####CSD Registe Values####  

16:12:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:53: ProductSerialNumber = 0x23482900
16:12:53: CardMaximumLBA      = 0x3b72400
16:12:53: CardCapacity        = 32G
16:12:53: Is card secure      = 0
16:12:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:53: [DVTCommonLib]###  LogicalWrite called
16:12:54: [ WriteLba(0x29DE97A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 585 ] 
16:12:54: [DVTCommonLib]###  LogicalWrite Completed 

16:12:54: [DVTCommonLib]###  LogicalRead called
16:12:56: [ ReadLba(0x29DE97A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 586 ] 
16:12:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 19 times 
16:12:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x13, 0x0) , Command count = 587 ] 
16:12:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:12:56: [DVTCommonLib]### Card response as High Capacity from card
16:12:56: [DVTCommonLib]### VOLA from card : 0x1
16:12:56: [DVTCommonLib]### CMD Pattern from card : 0x13
16:12:56: [DVTCommonLib]### Reserved bits from card : 0x0
16:12:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613B10>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 588 ] 
16:12:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613BA0>, <py_sfcl.CommandDataDefinition object at 0x06613870>) , Command count = 589 ] 
16:12:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:56: [ SetCardRCA(0x1, 0xD555) , Command count = 590 ] 
16:12:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:56: [ SetBusWidth(0x4) , Command count = 591 ] 
16:12:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:12:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:56: ####CSD Registe 2.0 Values####
16:12:56: CSD_STRUCTURE                                 :0x1
16:12:56: Reserv1                                       :0x0
16:12:56: Time Access 1 TAAC                            :0xe
16:12:56: Time Access 2 NSAC*100                        :0x0
16:12:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:56: Card Command Classess CCC                     :0x5b5
16:12:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:56: DSR(driver stage register)  DSR_IMP           :0x0
16:12:56: Reserv2                                       :0x0
16:12:56: Device Size C_SIZE                            :0xedc8
16:12:56: Reserv3                                       :0x0
16:12:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:56: Reserv4                                       :0x0
16:12:56: Write Speed Factor R2W_FACTOR                 :0x2
16:12:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:56: FILE_FORMAT_GRP                               :0x0
16:12:56: COPY flag                                     :0x1
16:12:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:56: File_Format                                   :0x0
16:12:56: CRC                                           :0x0
16:12:56: ####CSD Registe Values####  

16:12:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:12:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:56: ProductSerialNumber = 0x23482900
16:12:56: CardMaximumLBA      = 0x3b72400
16:12:56: CardCapacity        = 32G
16:12:56: Is card secure      = 0
16:12:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:12:56: [DVTCommonLib]###  LogicalWrite called
16:12:58: [ WriteLba(0x19510, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 592 ] 
16:12:58: [DVTCommonLib]###  LogicalWrite Completed 

16:12:58: [DVTCommonLib]###  LogicalRead called
16:12:59: [ ReadLba(0x19510, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 593 ] 
16:12:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 20 times 
16:12:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x14, 0x0) , Command count = 594 ] 
16:13:00: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:00: [DVTCommonLib]### Card response as High Capacity from card
16:13:00: [DVTCommonLib]### VOLA from card : 0x1
16:13:00: [DVTCommonLib]### CMD Pattern from card : 0x14
16:13:00: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482780>, <py_sfcl.CommandDataDefinition object at 0x06613CC0>) , Command count = 595 ] 
16:13:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482AE0>, <py_sfcl.CommandDataDefinition object at 0x06613E40>) , Command count = 596 ] 
16:13:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:00: [ SetCardRCA(0x1, 0xD555) , Command count = 597 ] 
16:13:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:00: [ SetBusWidth(0x4) , Command count = 598 ] 
16:13:00: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:00: ####CSD Registe 2.0 Values####
16:13:00: CSD_STRUCTURE                                 :0x1
16:13:00: Reserv1                                       :0x0
16:13:00: Time Access 1 TAAC                            :0xe
16:13:00: Time Access 2 NSAC*100                        :0x0
16:13:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:00: Card Command Classess CCC                     :0x5b5
16:13:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:00: DSR(driver stage register)  DSR_IMP           :0x0
16:13:00: Reserv2                                       :0x0
16:13:00: Device Size C_SIZE                            :0xedc8
16:13:00: Reserv3                                       :0x0
16:13:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:00: Reserv4                                       :0x0
16:13:00: Write Speed Factor R2W_FACTOR                 :0x2
16:13:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:00: FILE_FORMAT_GRP                               :0x0
16:13:00: COPY flag                                     :0x1
16:13:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:00: File_Format                                   :0x0
16:13:00: CRC                                           :0x0
16:13:00: ####CSD Registe Values####  

16:13:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:00: ProductSerialNumber = 0x23482900
16:13:00: CardMaximumLBA      = 0x3b72400
16:13:00: CardCapacity        = 32G
16:13:00: Is card secure      = 0
16:13:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:00: [DVTCommonLib]###  LogicalWrite called
16:13:01: [ WriteLba(0x2BC91CC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 599 ] 
16:13:01: [DVTCommonLib]###  LogicalWrite Completed 

16:13:01: [DVTCommonLib]###  LogicalRead called
16:13:03: [ ReadLba(0x2BC91CC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 600 ] 
16:13:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 21 times 
16:13:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x15, 0x0) , Command count = 601 ] 
16:13:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:03: [DVTCommonLib]### Card response as High Capacity from card
16:13:03: [DVTCommonLib]### VOLA from card : 0x1
16:13:03: [DVTCommonLib]### CMD Pattern from card : 0x15
16:13:03: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 602 ] 
16:13:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619330>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 603 ] 
16:13:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:03: [ SetCardRCA(0x1, 0xD555) , Command count = 604 ] 
16:13:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:03: [ SetBusWidth(0x4) , Command count = 605 ] 
16:13:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:03: ####CSD Registe 2.0 Values####
16:13:03: CSD_STRUCTURE                                 :0x1
16:13:03: Reserv1                                       :0x0
16:13:03: Time Access 1 TAAC                            :0xe
16:13:03: Time Access 2 NSAC*100                        :0x0
16:13:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:03: Card Command Classess CCC                     :0x5b5
16:13:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:03: DSR(driver stage register)  DSR_IMP           :0x0
16:13:03: Reserv2                                       :0x0
16:13:03: Device Size C_SIZE                            :0xedc8
16:13:03: Reserv3                                       :0x0
16:13:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:03: Reserv4                                       :0x0
16:13:03: Write Speed Factor R2W_FACTOR                 :0x2
16:13:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:03: FILE_FORMAT_GRP                               :0x0
16:13:03: COPY flag                                     :0x1
16:13:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:03: File_Format                                   :0x0
16:13:03: CRC                                           :0x0
16:13:03: ####CSD Registe Values####  

16:13:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:03: ProductSerialNumber = 0x23482900
16:13:03: CardMaximumLBA      = 0x3b72400
16:13:03: CardCapacity        = 32G
16:13:03: Is card secure      = 0
16:13:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:03: [DVTCommonLib]###  LogicalWrite called
16:13:05: [ WriteLba(0x2BD1DBE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 606 ] 
16:13:05: [DVTCommonLib]###  LogicalWrite Completed 

16:13:05: [DVTCommonLib]###  LogicalRead called
16:13:06: [ ReadLba(0x2BD1DBE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 607 ] 
16:13:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 22 times 
16:13:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x16, 0x0) , Command count = 608 ] 
16:13:07: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:07: [DVTCommonLib]### Card response as High Capacity from card
16:13:07: [DVTCommonLib]### VOLA from card : 0x1
16:13:07: [DVTCommonLib]### CMD Pattern from card : 0x16
16:13:07: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 609 ] 
16:13:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619720>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 610 ] 
16:13:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:07: [ SetCardRCA(0x1, 0xD555) , Command count = 611 ] 
16:13:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:07: [ SetBusWidth(0x4) , Command count = 612 ] 
16:13:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:07: ####CSD Registe 2.0 Values####
16:13:07: CSD_STRUCTURE                                 :0x1
16:13:07: Reserv1                                       :0x0
16:13:07: Time Access 1 TAAC                            :0xe
16:13:07: Time Access 2 NSAC*100                        :0x0
16:13:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:07: Card Command Classess CCC                     :0x5b5
16:13:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:07: DSR(driver stage register)  DSR_IMP           :0x0
16:13:07: Reserv2                                       :0x0
16:13:07: Device Size C_SIZE                            :0xedc8
16:13:07: Reserv3                                       :0x0
16:13:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:07: Reserv4                                       :0x0
16:13:07: Write Speed Factor R2W_FACTOR                 :0x2
16:13:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:07: FILE_FORMAT_GRP                               :0x0
16:13:07: COPY flag                                     :0x1
16:13:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:07: File_Format                                   :0x0
16:13:07: CRC                                           :0x0
16:13:07: ####CSD Registe Values####  

16:13:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:07: ProductSerialNumber = 0x23482900
16:13:07: CardMaximumLBA      = 0x3b72400
16:13:07: CardCapacity        = 32G
16:13:07: Is card secure      = 0
16:13:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:07: [DVTCommonLib]###  LogicalWrite called
16:13:08: [ WriteLba(0x2E5B4A5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 613 ] 
16:13:08: [DVTCommonLib]###  LogicalWrite Completed 

16:13:08: [DVTCommonLib]###  LogicalRead called
16:13:10: [ ReadLba(0x2E5B4A5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 614 ] 
16:13:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 23 times 
16:13:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x17, 0x0) , Command count = 615 ] 
16:13:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:10: [DVTCommonLib]### Card response as High Capacity from card
16:13:10: [DVTCommonLib]### VOLA from card : 0x1
16:13:10: [DVTCommonLib]### CMD Pattern from card : 0x17
16:13:10: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 616 ] 
16:13:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619BA0>, <py_sfcl.CommandDataDefinition object at 0x06619990>) , Command count = 617 ] 
16:13:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:10: [ SetCardRCA(0x1, 0xD555) , Command count = 618 ] 
16:13:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:10: [ SetBusWidth(0x4) , Command count = 619 ] 
16:13:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:10: ####CSD Registe 2.0 Values####
16:13:10: CSD_STRUCTURE                                 :0x1
16:13:10: Reserv1                                       :0x0
16:13:10: Time Access 1 TAAC                            :0xe
16:13:10: Time Access 2 NSAC*100                        :0x0
16:13:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:10: Card Command Classess CCC                     :0x5b5
16:13:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:10: DSR(driver stage register)  DSR_IMP           :0x0
16:13:10: Reserv2                                       :0x0
16:13:10: Device Size C_SIZE                            :0xedc8
16:13:10: Reserv3                                       :0x0
16:13:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:10: Reserv4                                       :0x0
16:13:10: Write Speed Factor R2W_FACTOR                 :0x2
16:13:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:10: FILE_FORMAT_GRP                               :0x0
16:13:10: COPY flag                                     :0x1
16:13:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:10: File_Format                                   :0x0
16:13:10: CRC                                           :0x0
16:13:10: ####CSD Registe Values####  

16:13:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:10: ProductSerialNumber = 0x23482900
16:13:10: CardMaximumLBA      = 0x3b72400
16:13:10: CardCapacity        = 32G
16:13:10: Is card secure      = 0
16:13:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:10: [DVTCommonLib]###  LogicalWrite called
16:13:12: [ WriteLba(0x1222BA4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 620 ] 
16:13:12: [DVTCommonLib]###  LogicalWrite Completed 

16:13:12: [DVTCommonLib]###  LogicalRead called
16:13:14: [ ReadLba(0x1222BA4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 621 ] 
16:13:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:14: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 24 times 
16:13:14: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x18, 0x0) , Command count = 622 ] 
16:13:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:14: [DVTCommonLib]### Card response as High Capacity from card
16:13:14: [DVTCommonLib]### VOLA from card : 0x1
16:13:14: [DVTCommonLib]### CMD Pattern from card : 0x18
16:13:14: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619030>, <py_sfcl.CommandDataDefinition object at 0x06619E10>) , Command count = 623 ] 
16:13:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619C00>, <py_sfcl.CommandDataDefinition object at 0x06619AB0>) , Command count = 624 ] 
16:13:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:14: [ SetCardRCA(0x1, 0xD555) , Command count = 625 ] 
16:13:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:14: [ SetBusWidth(0x4) , Command count = 626 ] 
16:13:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:14: ####CSD Registe 2.0 Values####
16:13:14: CSD_STRUCTURE                                 :0x1
16:13:14: Reserv1                                       :0x0
16:13:14: Time Access 1 TAAC                            :0xe
16:13:14: Time Access 2 NSAC*100                        :0x0
16:13:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:14: Card Command Classess CCC                     :0x5b5
16:13:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:14: DSR(driver stage register)  DSR_IMP           :0x0
16:13:14: Reserv2                                       :0x0
16:13:14: Device Size C_SIZE                            :0xedc8
16:13:14: Reserv3                                       :0x0
16:13:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:14: Reserv4                                       :0x0
16:13:14: Write Speed Factor R2W_FACTOR                 :0x2
16:13:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:14: FILE_FORMAT_GRP                               :0x0
16:13:14: COPY flag                                     :0x1
16:13:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:14: File_Format                                   :0x0
16:13:14: CRC                                           :0x0
16:13:14: ####CSD Registe Values####  

16:13:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:14: ProductSerialNumber = 0x23482900
16:13:14: CardMaximumLBA      = 0x3b72400
16:13:14: CardCapacity        = 32G
16:13:14: Is card secure      = 0
16:13:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:14: [DVTCommonLib]###  LogicalWrite called
16:13:15: [ WriteLba(0xFAE19A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 627 ] 
16:13:15: [DVTCommonLib]###  LogicalWrite Completed 

16:13:15: [DVTCommonLib]###  LogicalRead called
16:13:17: [ ReadLba(0xFAE19A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 628 ] 
16:13:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 25 times 
16:13:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x19, 0x0) , Command count = 629 ] 
16:13:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:17: [DVTCommonLib]### Card response as High Capacity from card
16:13:17: [DVTCommonLib]### VOLA from card : 0x1
16:13:17: [DVTCommonLib]### CMD Pattern from card : 0x19
16:13:17: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C1E0>, <py_sfcl.CommandDataDefinition object at 0x06619E70>) , Command count = 630 ] 
16:13:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C210>, <py_sfcl.CommandDataDefinition object at 0x0661C120>) , Command count = 631 ] 
16:13:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:17: [ SetCardRCA(0x1, 0xD555) , Command count = 632 ] 
16:13:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:17: [ SetBusWidth(0x4) , Command count = 633 ] 
16:13:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:17: ####CSD Registe 2.0 Values####
16:13:17: CSD_STRUCTURE                                 :0x1
16:13:17: Reserv1                                       :0x0
16:13:17: Time Access 1 TAAC                            :0xe
16:13:17: Time Access 2 NSAC*100                        :0x0
16:13:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:17: Card Command Classess CCC                     :0x5b5
16:13:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:17: DSR(driver stage register)  DSR_IMP           :0x0
16:13:17: Reserv2                                       :0x0
16:13:17: Device Size C_SIZE                            :0xedc8
16:13:17: Reserv3                                       :0x0
16:13:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:17: Reserv4                                       :0x0
16:13:17: Write Speed Factor R2W_FACTOR                 :0x2
16:13:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:17: FILE_FORMAT_GRP                               :0x0
16:13:17: COPY flag                                     :0x1
16:13:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:17: File_Format                                   :0x0
16:13:17: CRC                                           :0x0
16:13:17: ####CSD Registe Values####  

16:13:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:17: ProductSerialNumber = 0x23482900
16:13:17: CardMaximumLBA      = 0x3b72400
16:13:17: CardCapacity        = 32G
16:13:17: Is card secure      = 0
16:13:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:17: [DVTCommonLib]###  LogicalWrite called
16:13:19: [ WriteLba(0x398145D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 634 ] 
16:13:19: [DVTCommonLib]###  LogicalWrite Completed 

16:13:19: [DVTCommonLib]###  LogicalRead called
16:13:21: [ ReadLba(0x398145D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 635 ] 
16:13:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:21: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 26 times 
16:13:21: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1A, 0x0) , Command count = 636 ] 
16:13:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:21: [DVTCommonLib]### Card response as High Capacity from card
16:13:21: [DVTCommonLib]### VOLA from card : 0x1
16:13:21: [DVTCommonLib]### CMD Pattern from card : 0x1A
16:13:21: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C6C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 637 ] 
16:13:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C4B0>, <py_sfcl.CommandDataDefinition object at 0x0661C300>) , Command count = 638 ] 
16:13:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:21: [ SetCardRCA(0x1, 0xD555) , Command count = 639 ] 
16:13:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:21: [ SetBusWidth(0x4) , Command count = 640 ] 
16:13:21: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:21: ####CSD Registe 2.0 Values####
16:13:21: CSD_STRUCTURE                                 :0x1
16:13:21: Reserv1                                       :0x0
16:13:21: Time Access 1 TAAC                            :0xe
16:13:21: Time Access 2 NSAC*100                        :0x0
16:13:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:21: Card Command Classess CCC                     :0x5b5
16:13:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:21: DSR(driver stage register)  DSR_IMP           :0x0
16:13:21: Reserv2                                       :0x0
16:13:21: Device Size C_SIZE                            :0xedc8
16:13:21: Reserv3                                       :0x0
16:13:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:21: Reserv4                                       :0x0
16:13:21: Write Speed Factor R2W_FACTOR                 :0x2
16:13:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:21: FILE_FORMAT_GRP                               :0x0
16:13:21: COPY flag                                     :0x1
16:13:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:21: File_Format                                   :0x0
16:13:21: CRC                                           :0x0
16:13:21: ####CSD Registe Values####  

16:13:21: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:21: ProductSerialNumber = 0x23482900
16:13:21: CardMaximumLBA      = 0x3b72400
16:13:21: CardCapacity        = 32G
16:13:21: Is card secure      = 0
16:13:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:21: [DVTCommonLib]###  LogicalWrite called
16:13:23: [ WriteLba(0x30CB4C2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 641 ] 
16:13:23: [DVTCommonLib]###  LogicalWrite Completed 

16:13:23: [DVTCommonLib]###  LogicalRead called
16:13:24: [ ReadLba(0x30CB4C2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 642 ] 
16:13:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 27 times 
16:13:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1B, 0x0) , Command count = 643 ] 
16:13:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:24: [DVTCommonLib]### Card response as High Capacity from card
16:13:24: [DVTCommonLib]### VOLA from card : 0x1
16:13:24: [DVTCommonLib]### CMD Pattern from card : 0x1B
16:13:24: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C570>, <py_sfcl.CommandDataDefinition object at 0x0661C1B0>) , Command count = 644 ] 
16:13:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C450>, <py_sfcl.CommandDataDefinition object at 0x0661C3F0>) , Command count = 645 ] 
16:13:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:24: [ SetCardRCA(0x1, 0xD555) , Command count = 646 ] 
16:13:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:24: [ SetBusWidth(0x4) , Command count = 647 ] 
16:13:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:24: ####CSD Registe 2.0 Values####
16:13:24: CSD_STRUCTURE                                 :0x1
16:13:24: Reserv1                                       :0x0
16:13:24: Time Access 1 TAAC                            :0xe
16:13:24: Time Access 2 NSAC*100                        :0x0
16:13:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:24: Card Command Classess CCC                     :0x5b5
16:13:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:24: DSR(driver stage register)  DSR_IMP           :0x0
16:13:24: Reserv2                                       :0x0
16:13:24: Device Size C_SIZE                            :0xedc8
16:13:24: Reserv3                                       :0x0
16:13:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:24: Reserv4                                       :0x0
16:13:24: Write Speed Factor R2W_FACTOR                 :0x2
16:13:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:24: FILE_FORMAT_GRP                               :0x0
16:13:24: COPY flag                                     :0x1
16:13:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:24: File_Format                                   :0x0
16:13:24: CRC                                           :0x0
16:13:24: ####CSD Registe Values####  

16:13:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:24: ProductSerialNumber = 0x23482900
16:13:24: CardMaximumLBA      = 0x3b72400
16:13:24: CardCapacity        = 32G
16:13:24: Is card secure      = 0
16:13:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:24: [DVTCommonLib]###  LogicalWrite called
16:13:26: [ WriteLba(0x1849CB5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 648 ] 
16:13:26: [DVTCommonLib]###  LogicalWrite Completed 

16:13:26: [DVTCommonLib]###  LogicalRead called
16:13:28: [ ReadLba(0x1849CB5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 649 ] 
16:13:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:28: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 28 times 
16:13:28: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1C, 0x0) , Command count = 650 ] 
16:13:28: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:28: [DVTCommonLib]### Card response as High Capacity from card
16:13:28: [DVTCommonLib]### VOLA from card : 0x1
16:13:28: [DVTCommonLib]### CMD Pattern from card : 0x1C
16:13:28: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 651 ] 
16:13:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0655A930>, <py_sfcl.CommandDataDefinition object at 0x0661CA50>) , Command count = 652 ] 
16:13:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:28: [ SetCardRCA(0x1, 0xD555) , Command count = 653 ] 
16:13:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:28: [ SetBusWidth(0x4) , Command count = 654 ] 
16:13:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:28: ####CSD Registe 2.0 Values####
16:13:28: CSD_STRUCTURE                                 :0x1
16:13:28: Reserv1                                       :0x0
16:13:28: Time Access 1 TAAC                            :0xe
16:13:28: Time Access 2 NSAC*100                        :0x0
16:13:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:28: Card Command Classess CCC                     :0x5b5
16:13:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:28: DSR(driver stage register)  DSR_IMP           :0x0
16:13:28: Reserv2                                       :0x0
16:13:28: Device Size C_SIZE                            :0xedc8
16:13:28: Reserv3                                       :0x0
16:13:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:28: Reserv4                                       :0x0
16:13:28: Write Speed Factor R2W_FACTOR                 :0x2
16:13:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:28: FILE_FORMAT_GRP                               :0x0
16:13:28: COPY flag                                     :0x1
16:13:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:28: File_Format                                   :0x0
16:13:28: CRC                                           :0x0
16:13:28: ####CSD Registe Values####  

16:13:28: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:28: ProductSerialNumber = 0x23482900
16:13:28: CardMaximumLBA      = 0x3b72400
16:13:28: CardCapacity        = 32G
16:13:28: Is card secure      = 0
16:13:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:28: [DVTCommonLib]###  LogicalWrite called
16:13:30: [ WriteLba(0x213DDC7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 655 ] 
16:13:30: [DVTCommonLib]###  LogicalWrite Completed 

16:13:30: [DVTCommonLib]###  LogicalRead called
16:13:31: [ ReadLba(0x213DDC7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 656 ] 
16:13:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 29 times 
16:13:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1D, 0x0) , Command count = 657 ] 
16:13:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:31: [DVTCommonLib]### Card response as High Capacity from card
16:13:31: [DVTCommonLib]### VOLA from card : 0x1
16:13:31: [DVTCommonLib]### CMD Pattern from card : 0x1D
16:13:31: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 658 ] 
16:13:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CD50>, <py_sfcl.CommandDataDefinition object at 0x0661CD80>) , Command count = 659 ] 
16:13:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:31: [ SetCardRCA(0x1, 0xD555) , Command count = 660 ] 
16:13:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:31: [ SetBusWidth(0x4) , Command count = 661 ] 
16:13:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:31: ####CSD Registe 2.0 Values####
16:13:31: CSD_STRUCTURE                                 :0x1
16:13:31: Reserv1                                       :0x0
16:13:31: Time Access 1 TAAC                            :0xe
16:13:31: Time Access 2 NSAC*100                        :0x0
16:13:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:31: Card Command Classess CCC                     :0x5b5
16:13:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:31: DSR(driver stage register)  DSR_IMP           :0x0
16:13:31: Reserv2                                       :0x0
16:13:31: Device Size C_SIZE                            :0xedc8
16:13:31: Reserv3                                       :0x0
16:13:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:31: Reserv4                                       :0x0
16:13:31: Write Speed Factor R2W_FACTOR                 :0x2
16:13:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:31: FILE_FORMAT_GRP                               :0x0
16:13:31: COPY flag                                     :0x1
16:13:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:31: File_Format                                   :0x0
16:13:31: CRC                                           :0x0
16:13:31: ####CSD Registe Values####  

16:13:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:31: ProductSerialNumber = 0x23482900
16:13:31: CardMaximumLBA      = 0x3b72400
16:13:31: CardCapacity        = 32G
16:13:31: Is card secure      = 0
16:13:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:31: [DVTCommonLib]###  LogicalWrite called
16:13:33: [ WriteLba(0xA6B6F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 662 ] 
16:13:33: [DVTCommonLib]###  LogicalWrite Completed 

16:13:33: [DVTCommonLib]###  LogicalRead called
16:13:35: [ ReadLba(0xA6B6F5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 663 ] 
16:13:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:35: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 30 times 
16:13:35: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1E, 0x0) , Command count = 664 ] 
16:13:35: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:35: [DVTCommonLib]### Card response as High Capacity from card
16:13:35: [DVTCommonLib]### VOLA from card : 0x1
16:13:35: [DVTCommonLib]### CMD Pattern from card : 0x1E
16:13:35: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 665 ] 
16:13:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C8D0>, <py_sfcl.CommandDataDefinition object at 0x0661C3C0>) , Command count = 666 ] 
16:13:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:35: [ SetCardRCA(0x1, 0xD555) , Command count = 667 ] 
16:13:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:35: [ SetBusWidth(0x4) , Command count = 668 ] 
16:13:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:35: ####CSD Registe 2.0 Values####
16:13:35: CSD_STRUCTURE                                 :0x1
16:13:35: Reserv1                                       :0x0
16:13:35: Time Access 1 TAAC                            :0xe
16:13:35: Time Access 2 NSAC*100                        :0x0
16:13:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:35: Card Command Classess CCC                     :0x5b5
16:13:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:35: DSR(driver stage register)  DSR_IMP           :0x0
16:13:35: Reserv2                                       :0x0
16:13:35: Device Size C_SIZE                            :0xedc8
16:13:35: Reserv3                                       :0x0
16:13:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:35: Reserv4                                       :0x0
16:13:35: Write Speed Factor R2W_FACTOR                 :0x2
16:13:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:35: FILE_FORMAT_GRP                               :0x0
16:13:35: COPY flag                                     :0x1
16:13:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:35: File_Format                                   :0x0
16:13:35: CRC                                           :0x0
16:13:35: ####CSD Registe Values####  

16:13:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:35: ProductSerialNumber = 0x23482900
16:13:35: CardMaximumLBA      = 0x3b72400
16:13:35: CardCapacity        = 32G
16:13:35: Is card secure      = 0
16:13:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:35: [DVTCommonLib]###  LogicalWrite called
16:13:37: [ WriteLba(0xCC7B75, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 669 ] 
16:13:37: [DVTCommonLib]###  LogicalWrite Completed 

16:13:37: [DVTCommonLib]###  LogicalRead called
16:13:38: [ ReadLba(0xCC7B75, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 670 ] 
16:13:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 31 times 
16:13:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x1F, 0x0) , Command count = 671 ] 
16:13:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:38: [DVTCommonLib]### Card response as High Capacity from card
16:13:38: [DVTCommonLib]### VOLA from card : 0x1
16:13:38: [DVTCommonLib]### CMD Pattern from card : 0x1F
16:13:38: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 672 ] 
16:13:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CB10>, <py_sfcl.CommandDataDefinition object at 0x0661CB40>) , Command count = 673 ] 
16:13:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:38: [ SetCardRCA(0x1, 0xD555) , Command count = 674 ] 
16:13:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:38: [ SetBusWidth(0x4) , Command count = 675 ] 
16:13:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:38: ####CSD Registe 2.0 Values####
16:13:38: CSD_STRUCTURE                                 :0x1
16:13:38: Reserv1                                       :0x0
16:13:38: Time Access 1 TAAC                            :0xe
16:13:38: Time Access 2 NSAC*100                        :0x0
16:13:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:38: Card Command Classess CCC                     :0x5b5
16:13:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:38: DSR(driver stage register)  DSR_IMP           :0x0
16:13:38: Reserv2                                       :0x0
16:13:38: Device Size C_SIZE                            :0xedc8
16:13:38: Reserv3                                       :0x0
16:13:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:38: Reserv4                                       :0x0
16:13:38: Write Speed Factor R2W_FACTOR                 :0x2
16:13:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:38: FILE_FORMAT_GRP                               :0x0
16:13:38: COPY flag                                     :0x1
16:13:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:38: File_Format                                   :0x0
16:13:38: CRC                                           :0x0
16:13:38: ####CSD Registe Values####  

16:13:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:38: ProductSerialNumber = 0x23482900
16:13:38: CardMaximumLBA      = 0x3b72400
16:13:38: CardCapacity        = 32G
16:13:38: Is card secure      = 0
16:13:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:38: [DVTCommonLib]###  LogicalWrite called
16:13:40: [ WriteLba(0x334F478, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 676 ] 
16:13:40: [DVTCommonLib]###  LogicalWrite Completed 

16:13:40: [DVTCommonLib]###  LogicalRead called
16:13:42: [ ReadLba(0x334F478, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 677 ] 
16:13:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:42: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 32 times 
16:13:42: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x20, 0x0) , Command count = 678 ] 
16:13:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:42: [DVTCommonLib]### Card response as High Capacity from card
16:13:42: [DVTCommonLib]### VOLA from card : 0x1
16:13:42: [DVTCommonLib]### CMD Pattern from card : 0x20
16:13:42: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x06619F90>) , Command count = 679 ] 
16:13:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619ED0>, <py_sfcl.CommandDataDefinition object at 0x06619870>) , Command count = 680 ] 
16:13:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:42: [ SetCardRCA(0x1, 0xD555) , Command count = 681 ] 
16:13:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:42: [ SetBusWidth(0x4) , Command count = 682 ] 
16:13:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:42: ####CSD Registe 2.0 Values####
16:13:42: CSD_STRUCTURE                                 :0x1
16:13:42: Reserv1                                       :0x0
16:13:42: Time Access 1 TAAC                            :0xe
16:13:42: Time Access 2 NSAC*100                        :0x0
16:13:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:42: Card Command Classess CCC                     :0x5b5
16:13:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:42: DSR(driver stage register)  DSR_IMP           :0x0
16:13:42: Reserv2                                       :0x0
16:13:42: Device Size C_SIZE                            :0xedc8
16:13:42: Reserv3                                       :0x0
16:13:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:42: Reserv4                                       :0x0
16:13:42: Write Speed Factor R2W_FACTOR                 :0x2
16:13:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:42: FILE_FORMAT_GRP                               :0x0
16:13:42: COPY flag                                     :0x1
16:13:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:42: File_Format                                   :0x0
16:13:42: CRC                                           :0x0
16:13:42: ####CSD Registe Values####  

16:13:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:42: ProductSerialNumber = 0x23482900
16:13:42: CardMaximumLBA      = 0x3b72400
16:13:42: CardCapacity        = 32G
16:13:42: Is card secure      = 0
16:13:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:42: [DVTCommonLib]###  LogicalWrite called
16:13:44: [ WriteLba(0x2EDAD2F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 683 ] 
16:13:44: [DVTCommonLib]###  LogicalWrite Completed 

16:13:44: [DVTCommonLib]###  LogicalRead called
16:13:45: [ ReadLba(0x2EDAD2F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 684 ] 
16:13:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 33 times 
16:13:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x21, 0x0) , Command count = 685 ] 
16:13:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:45: [DVTCommonLib]### Card response as High Capacity from card
16:13:45: [DVTCommonLib]### VOLA from card : 0x1
16:13:45: [DVTCommonLib]### CMD Pattern from card : 0x21
16:13:45: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066196F0>, <py_sfcl.CommandDataDefinition object at 0x066194E0>) , Command count = 686 ] 
16:13:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619480>, <py_sfcl.CommandDataDefinition object at 0x066193F0>) , Command count = 687 ] 
16:13:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:45: [ SetCardRCA(0x1, 0xD555) , Command count = 688 ] 
16:13:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:45: [ SetBusWidth(0x4) , Command count = 689 ] 
16:13:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:45: ####CSD Registe 2.0 Values####
16:13:45: CSD_STRUCTURE                                 :0x1
16:13:45: Reserv1                                       :0x0
16:13:45: Time Access 1 TAAC                            :0xe
16:13:45: Time Access 2 NSAC*100                        :0x0
16:13:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:45: Card Command Classess CCC                     :0x5b5
16:13:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:45: DSR(driver stage register)  DSR_IMP           :0x0
16:13:45: Reserv2                                       :0x0
16:13:45: Device Size C_SIZE                            :0xedc8
16:13:45: Reserv3                                       :0x0
16:13:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:45: Reserv4                                       :0x0
16:13:45: Write Speed Factor R2W_FACTOR                 :0x2
16:13:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:45: FILE_FORMAT_GRP                               :0x0
16:13:45: COPY flag                                     :0x1
16:13:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:45: File_Format                                   :0x0
16:13:45: CRC                                           :0x0
16:13:45: ####CSD Registe Values####  

16:13:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:46: ProductSerialNumber = 0x23482900
16:13:46: CardMaximumLBA      = 0x3b72400
16:13:46: CardCapacity        = 32G
16:13:46: Is card secure      = 0
16:13:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:46: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:46: [DVTCommonLib]###  LogicalWrite called
16:13:47: [ WriteLba(0x23AA202, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 690 ] 
16:13:47: [DVTCommonLib]###  LogicalWrite Completed 

16:13:47: [DVTCommonLib]###  LogicalRead called
16:13:49: [ ReadLba(0x23AA202, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 691 ] 
16:13:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:49: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 34 times 
16:13:49: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x22, 0x0) , Command count = 692 ] 
16:13:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:49: [DVTCommonLib]### Card response as High Capacity from card
16:13:49: [DVTCommonLib]### VOLA from card : 0x1
16:13:49: [DVTCommonLib]### CMD Pattern from card : 0x22
16:13:49: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613C00>, <py_sfcl.CommandDataDefinition object at 0x06613E10>) , Command count = 693 ] 
16:13:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613C90>, <py_sfcl.CommandDataDefinition object at 0x06613BD0>) , Command count = 694 ] 
16:13:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:49: [ SetCardRCA(0x1, 0xD555) , Command count = 695 ] 
16:13:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:49: [ SetBusWidth(0x4) , Command count = 696 ] 
16:13:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:49: ####CSD Registe 2.0 Values####
16:13:49: CSD_STRUCTURE                                 :0x1
16:13:49: Reserv1                                       :0x0
16:13:49: Time Access 1 TAAC                            :0xe
16:13:49: Time Access 2 NSAC*100                        :0x0
16:13:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:49: Card Command Classess CCC                     :0x5b5
16:13:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:49: DSR(driver stage register)  DSR_IMP           :0x0
16:13:49: Reserv2                                       :0x0
16:13:49: Device Size C_SIZE                            :0xedc8
16:13:49: Reserv3                                       :0x0
16:13:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:49: Reserv4                                       :0x0
16:13:49: Write Speed Factor R2W_FACTOR                 :0x2
16:13:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:49: FILE_FORMAT_GRP                               :0x0
16:13:49: COPY flag                                     :0x1
16:13:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:49: File_Format                                   :0x0
16:13:49: CRC                                           :0x0
16:13:49: ####CSD Registe Values####  

16:13:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:49: ProductSerialNumber = 0x23482900
16:13:49: CardMaximumLBA      = 0x3b72400
16:13:49: CardCapacity        = 32G
16:13:49: Is card secure      = 0
16:13:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:49: [DVTCommonLib]###  LogicalWrite called
16:13:51: [ WriteLba(0x98440E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 697 ] 
16:13:51: [DVTCommonLib]###  LogicalWrite Completed 

16:13:51: [DVTCommonLib]###  LogicalRead called
16:13:52: [ ReadLba(0x98440E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 698 ] 
16:13:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 35 times 
16:13:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x23, 0x0) , Command count = 699 ] 
16:13:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:52: [DVTCommonLib]### Card response as High Capacity from card
16:13:52: [DVTCommonLib]### VOLA from card : 0x1
16:13:52: [DVTCommonLib]### CMD Pattern from card : 0x23
16:13:52: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613EA0>, <py_sfcl.CommandDataDefinition object at 0x06613D20>) , Command count = 700 ] 
16:13:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613C60>, <py_sfcl.CommandDataDefinition object at 0x06613F30>) , Command count = 701 ] 
16:13:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:52: [ SetCardRCA(0x1, 0xD555) , Command count = 702 ] 
16:13:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:53: [ SetBusWidth(0x4) , Command count = 703 ] 
16:13:53: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:53: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:53: ####CSD Registe 2.0 Values####
16:13:53: CSD_STRUCTURE                                 :0x1
16:13:53: Reserv1                                       :0x0
16:13:53: Time Access 1 TAAC                            :0xe
16:13:53: Time Access 2 NSAC*100                        :0x0
16:13:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:53: Card Command Classess CCC                     :0x5b5
16:13:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:53: DSR(driver stage register)  DSR_IMP           :0x0
16:13:53: Reserv2                                       :0x0
16:13:53: Device Size C_SIZE                            :0xedc8
16:13:53: Reserv3                                       :0x0
16:13:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:53: Reserv4                                       :0x0
16:13:53: Write Speed Factor R2W_FACTOR                 :0x2
16:13:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:53: FILE_FORMAT_GRP                               :0x0
16:13:53: COPY flag                                     :0x1
16:13:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:53: File_Format                                   :0x0
16:13:53: CRC                                           :0x0
16:13:53: ####CSD Registe Values####  

16:13:53: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:53: ProductSerialNumber = 0x23482900
16:13:53: CardMaximumLBA      = 0x3b72400
16:13:53: CardCapacity        = 32G
16:13:53: Is card secure      = 0
16:13:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:53: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:53: [DVTCommonLib]###  LogicalWrite called
16:13:54: [ WriteLba(0x1C2F9E5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 704 ] 
16:13:54: [DVTCommonLib]###  LogicalWrite Completed 

16:13:54: [DVTCommonLib]###  LogicalRead called
16:13:56: [ ReadLba(0x1C2F9E5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 705 ] 
16:13:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:56: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 36 times 
16:13:56: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x24, 0x0) , Command count = 706 ] 
16:13:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:56: [DVTCommonLib]### Card response as High Capacity from card
16:13:56: [DVTCommonLib]### VOLA from card : 0x1
16:13:56: [DVTCommonLib]### CMD Pattern from card : 0x24
16:13:56: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613DB0>, <py_sfcl.CommandDataDefinition object at 0x06613D50>) , Command count = 707 ] 
16:13:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066033C0>, <py_sfcl.CommandDataDefinition object at 0x06603D50>) , Command count = 708 ] 
16:13:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:56: [ SetCardRCA(0x1, 0xD555) , Command count = 709 ] 
16:13:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:56: [ SetBusWidth(0x4) , Command count = 710 ] 
16:13:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:13:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:56: ####CSD Registe 2.0 Values####
16:13:56: CSD_STRUCTURE                                 :0x1
16:13:56: Reserv1                                       :0x0
16:13:56: Time Access 1 TAAC                            :0xe
16:13:56: Time Access 2 NSAC*100                        :0x0
16:13:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:56: Card Command Classess CCC                     :0x5b5
16:13:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:56: DSR(driver stage register)  DSR_IMP           :0x0
16:13:56: Reserv2                                       :0x0
16:13:56: Device Size C_SIZE                            :0xedc8
16:13:56: Reserv3                                       :0x0
16:13:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:56: Reserv4                                       :0x0
16:13:56: Write Speed Factor R2W_FACTOR                 :0x2
16:13:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:56: FILE_FORMAT_GRP                               :0x0
16:13:56: COPY flag                                     :0x1
16:13:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:56: File_Format                                   :0x0
16:13:56: CRC                                           :0x0
16:13:56: ####CSD Registe Values####  

16:13:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:13:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:56: ProductSerialNumber = 0x23482900
16:13:56: CardMaximumLBA      = 0x3b72400
16:13:56: CardCapacity        = 32G
16:13:56: Is card secure      = 0
16:13:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:13:56: [DVTCommonLib]###  LogicalWrite called
16:13:58: [ WriteLba(0x27F8881, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 711 ] 
16:13:58: [DVTCommonLib]###  LogicalWrite Completed 

16:13:58: [DVTCommonLib]###  LogicalRead called
16:13:59: [ ReadLba(0x27F8881, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 712 ] 
16:13:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 37 times 
16:13:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x25, 0x0) , Command count = 713 ] 
16:13:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:13:59: [DVTCommonLib]### Card response as High Capacity from card
16:13:59: [DVTCommonLib]### VOLA from card : 0x1
16:13:59: [DVTCommonLib]### CMD Pattern from card : 0x25
16:13:59: [DVTCommonLib]### Reserved bits from card : 0x0
16:13:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603F90>) , Command count = 714 ] 
16:13:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603450>, <py_sfcl.CommandDataDefinition object at 0x06603630>) , Command count = 715 ] 
16:13:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:59: [ SetCardRCA(0x1, 0xD555) , Command count = 716 ] 
16:14:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:00: [ SetBusWidth(0x4) , Command count = 717 ] 
16:14:00: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:00: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:00: ####CSD Registe 2.0 Values####
16:14:00: CSD_STRUCTURE                                 :0x1
16:14:00: Reserv1                                       :0x0
16:14:00: Time Access 1 TAAC                            :0xe
16:14:00: Time Access 2 NSAC*100                        :0x0
16:14:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:00: Card Command Classess CCC                     :0x5b5
16:14:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:00: DSR(driver stage register)  DSR_IMP           :0x0
16:14:00: Reserv2                                       :0x0
16:14:00: Device Size C_SIZE                            :0xedc8
16:14:00: Reserv3                                       :0x0
16:14:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:00: Reserv4                                       :0x0
16:14:00: Write Speed Factor R2W_FACTOR                 :0x2
16:14:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:00: FILE_FORMAT_GRP                               :0x0
16:14:00: COPY flag                                     :0x1
16:14:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:00: File_Format                                   :0x0
16:14:00: CRC                                           :0x0
16:14:00: ####CSD Registe Values####  

16:14:00: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:00: ProductSerialNumber = 0x23482900
16:14:00: CardMaximumLBA      = 0x3b72400
16:14:00: CardCapacity        = 32G
16:14:00: Is card secure      = 0
16:14:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:00: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:00: [DVTCommonLib]###  LogicalWrite called
16:14:01: [ WriteLba(0x20D79CE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 718 ] 
16:14:01: [DVTCommonLib]###  LogicalWrite Completed 

16:14:01: [DVTCommonLib]###  LogicalRead called
16:14:03: [ ReadLba(0x20D79CE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 719 ] 
16:14:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 38 times 
16:14:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x26, 0x0) , Command count = 720 ] 
16:14:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:03: [DVTCommonLib]### Card response as High Capacity from card
16:14:03: [DVTCommonLib]### VOLA from card : 0x1
16:14:03: [DVTCommonLib]### CMD Pattern from card : 0x26
16:14:03: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90F0>, <py_sfcl.CommandDataDefinition object at 0x066B9060>) , Command count = 721 ] 
16:14:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5C00>, <py_sfcl.CommandDataDefinition object at 0x066B5B10>) , Command count = 722 ] 
16:14:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:03: [ SetCardRCA(0x1, 0xD555) , Command count = 723 ] 
16:14:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:03: [ SetBusWidth(0x4) , Command count = 724 ] 
16:14:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:03: ####CSD Registe 2.0 Values####
16:14:03: CSD_STRUCTURE                                 :0x1
16:14:03: Reserv1                                       :0x0
16:14:03: Time Access 1 TAAC                            :0xe
16:14:03: Time Access 2 NSAC*100                        :0x0
16:14:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:03: Card Command Classess CCC                     :0x5b5
16:14:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:03: DSR(driver stage register)  DSR_IMP           :0x0
16:14:03: Reserv2                                       :0x0
16:14:03: Device Size C_SIZE                            :0xedc8
16:14:03: Reserv3                                       :0x0
16:14:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:03: Reserv4                                       :0x0
16:14:03: Write Speed Factor R2W_FACTOR                 :0x2
16:14:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:03: FILE_FORMAT_GRP                               :0x0
16:14:03: COPY flag                                     :0x1
16:14:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:03: File_Format                                   :0x0
16:14:03: CRC                                           :0x0
16:14:03: ####CSD Registe Values####  

16:14:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:03: ProductSerialNumber = 0x23482900
16:14:03: CardMaximumLBA      = 0x3b72400
16:14:03: CardCapacity        = 32G
16:14:03: Is card secure      = 0
16:14:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:03: [DVTCommonLib]###  LogicalWrite called
16:14:05: [ WriteLba(0x1AEFFA3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 725 ] 
16:14:05: [DVTCommonLib]###  LogicalWrite Completed 

16:14:05: [DVTCommonLib]###  LogicalRead called
16:14:06: [ ReadLba(0x1AEFFA3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 726 ] 
16:14:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 39 times 
16:14:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x27, 0x0) , Command count = 727 ] 
16:14:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:06: [DVTCommonLib]### Card response as High Capacity from card
16:14:06: [DVTCommonLib]### VOLA from card : 0x1
16:14:06: [DVTCommonLib]### CMD Pattern from card : 0x27
16:14:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5ED0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 728 ] 
16:14:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9030>, <py_sfcl.CommandDataDefinition object at 0x066B5BA0>) , Command count = 729 ] 
16:14:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:06: [ SetCardRCA(0x1, 0xD555) , Command count = 730 ] 
16:14:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:07: [ SetBusWidth(0x4) , Command count = 731 ] 
16:14:07: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:07: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:07: ####CSD Registe 2.0 Values####
16:14:07: CSD_STRUCTURE                                 :0x1
16:14:07: Reserv1                                       :0x0
16:14:07: Time Access 1 TAAC                            :0xe
16:14:07: Time Access 2 NSAC*100                        :0x0
16:14:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:07: Card Command Classess CCC                     :0x5b5
16:14:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:07: DSR(driver stage register)  DSR_IMP           :0x0
16:14:07: Reserv2                                       :0x0
16:14:07: Device Size C_SIZE                            :0xedc8
16:14:07: Reserv3                                       :0x0
16:14:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:07: Reserv4                                       :0x0
16:14:07: Write Speed Factor R2W_FACTOR                 :0x2
16:14:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:07: FILE_FORMAT_GRP                               :0x0
16:14:07: COPY flag                                     :0x1
16:14:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:07: File_Format                                   :0x0
16:14:07: CRC                                           :0x0
16:14:07: ####CSD Registe Values####  

16:14:07: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:07: ProductSerialNumber = 0x23482900
16:14:07: CardMaximumLBA      = 0x3b72400
16:14:07: CardCapacity        = 32G
16:14:07: Is card secure      = 0
16:14:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:07: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:07: [DVTCommonLib]###  LogicalWrite called
16:14:08: [ WriteLba(0x2A780CB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 732 ] 
16:14:08: [DVTCommonLib]###  LogicalWrite Completed 

16:14:08: [DVTCommonLib]###  LogicalRead called
16:14:10: [ ReadLba(0x2A780CB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 733 ] 
16:14:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 40 times 
16:14:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x28, 0x0) , Command count = 734 ] 
16:14:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:10: [DVTCommonLib]### Card response as High Capacity from card
16:14:10: [DVTCommonLib]### VOLA from card : 0x1
16:14:10: [DVTCommonLib]### CMD Pattern from card : 0x28
16:14:10: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 735 ] 
16:14:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9420>, <py_sfcl.CommandDataDefinition object at 0x066B5BA0>) , Command count = 736 ] 
16:14:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:10: [ SetCardRCA(0x1, 0xD555) , Command count = 737 ] 
16:14:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:10: [ SetBusWidth(0x4) , Command count = 738 ] 
16:14:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:10: ####CSD Registe 2.0 Values####
16:14:10: CSD_STRUCTURE                                 :0x1
16:14:10: Reserv1                                       :0x0
16:14:10: Time Access 1 TAAC                            :0xe
16:14:10: Time Access 2 NSAC*100                        :0x0
16:14:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:10: Card Command Classess CCC                     :0x5b5
16:14:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:10: DSR(driver stage register)  DSR_IMP           :0x0
16:14:10: Reserv2                                       :0x0
16:14:10: Device Size C_SIZE                            :0xedc8
16:14:10: Reserv3                                       :0x0
16:14:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:10: Reserv4                                       :0x0
16:14:10: Write Speed Factor R2W_FACTOR                 :0x2
16:14:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:10: FILE_FORMAT_GRP                               :0x0
16:14:10: COPY flag                                     :0x1
16:14:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:10: File_Format                                   :0x0
16:14:10: CRC                                           :0x0
16:14:10: ####CSD Registe Values####  

16:14:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:10: ProductSerialNumber = 0x23482900
16:14:10: CardMaximumLBA      = 0x3b72400
16:14:10: CardCapacity        = 32G
16:14:10: Is card secure      = 0
16:14:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:10: [DVTCommonLib]###  LogicalWrite called
16:14:12: [ WriteLba(0x312CC5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 739 ] 
16:14:12: [DVTCommonLib]###  LogicalWrite Completed 

16:14:12: [DVTCommonLib]###  LogicalRead called
16:14:13: [ ReadLba(0x312CC5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 740 ] 
16:14:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 41 times 
16:14:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x29, 0x0) , Command count = 741 ] 
16:14:14: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:14: [DVTCommonLib]### Card response as High Capacity from card
16:14:14: [DVTCommonLib]### VOLA from card : 0x1
16:14:14: [DVTCommonLib]### CMD Pattern from card : 0x29
16:14:14: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 742 ] 
16:14:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9810>, <py_sfcl.CommandDataDefinition object at 0x066B97E0>) , Command count = 743 ] 
16:14:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:14: [ SetCardRCA(0x1, 0xD555) , Command count = 744 ] 
16:14:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:14: [ SetBusWidth(0x4) , Command count = 745 ] 
16:14:14: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:14: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:14: ####CSD Registe 2.0 Values####
16:14:14: CSD_STRUCTURE                                 :0x1
16:14:14: Reserv1                                       :0x0
16:14:14: Time Access 1 TAAC                            :0xe
16:14:14: Time Access 2 NSAC*100                        :0x0
16:14:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:14: Card Command Classess CCC                     :0x5b5
16:14:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:14: DSR(driver stage register)  DSR_IMP           :0x0
16:14:14: Reserv2                                       :0x0
16:14:14: Device Size C_SIZE                            :0xedc8
16:14:14: Reserv3                                       :0x0
16:14:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:14: Reserv4                                       :0x0
16:14:14: Write Speed Factor R2W_FACTOR                 :0x2
16:14:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:14: FILE_FORMAT_GRP                               :0x0
16:14:14: COPY flag                                     :0x1
16:14:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:14: File_Format                                   :0x0
16:14:14: CRC                                           :0x0
16:14:14: ####CSD Registe Values####  

16:14:14: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:14: ProductSerialNumber = 0x23482900
16:14:14: CardMaximumLBA      = 0x3b72400
16:14:14: CardCapacity        = 32G
16:14:14: Is card secure      = 0
16:14:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:14: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:14: [DVTCommonLib]###  LogicalWrite called
16:14:15: [ WriteLba(0x6897B9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 746 ] 
16:14:15: [DVTCommonLib]###  LogicalWrite Completed 

16:14:15: [DVTCommonLib]###  LogicalRead called
16:14:17: [ ReadLba(0x6897B9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 747 ] 
16:14:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 42 times 
16:14:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2A, 0x0) , Command count = 748 ] 
16:14:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:17: [DVTCommonLib]### Card response as High Capacity from card
16:14:17: [DVTCommonLib]### VOLA from card : 0x1
16:14:17: [DVTCommonLib]### CMD Pattern from card : 0x2A
16:14:17: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 749 ] 
16:14:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9B10>, <py_sfcl.CommandDataDefinition object at 0x066B97B0>) , Command count = 750 ] 
16:14:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:17: [ SetCardRCA(0x1, 0xD555) , Command count = 751 ] 
16:14:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:17: [ SetBusWidth(0x4) , Command count = 752 ] 
16:14:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:17: ####CSD Registe 2.0 Values####
16:14:17: CSD_STRUCTURE                                 :0x1
16:14:17: Reserv1                                       :0x0
16:14:17: Time Access 1 TAAC                            :0xe
16:14:17: Time Access 2 NSAC*100                        :0x0
16:14:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:17: Card Command Classess CCC                     :0x5b5
16:14:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:17: DSR(driver stage register)  DSR_IMP           :0x0
16:14:17: Reserv2                                       :0x0
16:14:17: Device Size C_SIZE                            :0xedc8
16:14:17: Reserv3                                       :0x0
16:14:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:17: Reserv4                                       :0x0
16:14:17: Write Speed Factor R2W_FACTOR                 :0x2
16:14:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:17: FILE_FORMAT_GRP                               :0x0
16:14:17: COPY flag                                     :0x1
16:14:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:17: File_Format                                   :0x0
16:14:17: CRC                                           :0x0
16:14:17: ####CSD Registe Values####  

16:14:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:17: ProductSerialNumber = 0x23482900
16:14:17: CardMaximumLBA      = 0x3b72400
16:14:17: CardCapacity        = 32G
16:14:17: Is card secure      = 0
16:14:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:17: [DVTCommonLib]###  LogicalWrite called
16:14:19: [ WriteLba(0x22860E7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 753 ] 
16:14:19: [DVTCommonLib]###  LogicalWrite Completed 

16:14:19: [DVTCommonLib]###  LogicalRead called
16:14:20: [ ReadLba(0x22860E7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 754 ] 
16:14:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 43 times 
16:14:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2B, 0x0) , Command count = 755 ] 
16:14:21: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:21: [DVTCommonLib]### Card response as High Capacity from card
16:14:21: [DVTCommonLib]### VOLA from card : 0x1
16:14:21: [DVTCommonLib]### CMD Pattern from card : 0x2B
16:14:21: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9C30>, <py_sfcl.CommandDataDefinition object at 0x066B9A50>) , Command count = 756 ] 
16:14:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054FD7B0>, <py_sfcl.CommandDataDefinition object at 0x066B98D0>) , Command count = 757 ] 
16:14:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:21: [ SetCardRCA(0x1, 0xD555) , Command count = 758 ] 
16:14:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:21: [ SetBusWidth(0x4) , Command count = 759 ] 
16:14:21: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:21: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:21: ####CSD Registe 2.0 Values####
16:14:21: CSD_STRUCTURE                                 :0x1
16:14:21: Reserv1                                       :0x0
16:14:21: Time Access 1 TAAC                            :0xe
16:14:21: Time Access 2 NSAC*100                        :0x0
16:14:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:21: Card Command Classess CCC                     :0x5b5
16:14:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:21: DSR(driver stage register)  DSR_IMP           :0x0
16:14:21: Reserv2                                       :0x0
16:14:21: Device Size C_SIZE                            :0xedc8
16:14:21: Reserv3                                       :0x0
16:14:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:21: Reserv4                                       :0x0
16:14:21: Write Speed Factor R2W_FACTOR                 :0x2
16:14:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:21: FILE_FORMAT_GRP                               :0x0
16:14:21: COPY flag                                     :0x1
16:14:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:21: File_Format                                   :0x0
16:14:21: CRC                                           :0x0
16:14:21: ####CSD Registe Values####  

16:14:21: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:21: ProductSerialNumber = 0x23482900
16:14:21: CardMaximumLBA      = 0x3b72400
16:14:21: CardCapacity        = 32G
16:14:21: Is card secure      = 0
16:14:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:21: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:21: [DVTCommonLib]###  LogicalWrite called
16:14:22: [ WriteLba(0x6EB124, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 760 ] 
16:14:22: [DVTCommonLib]###  LogicalWrite Completed 

16:14:22: [DVTCommonLib]###  LogicalRead called
16:14:24: [ ReadLba(0x6EB124, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 761 ] 
16:14:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 44 times 
16:14:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2C, 0x0) , Command count = 762 ] 
16:14:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:24: [DVTCommonLib]### Card response as High Capacity from card
16:14:24: [DVTCommonLib]### VOLA from card : 0x1
16:14:24: [DVTCommonLib]### CMD Pattern from card : 0x2C
16:14:24: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 763 ] 
16:14:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E180>, <py_sfcl.CommandDataDefinition object at 0x066B9EA0>) , Command count = 764 ] 
16:14:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:24: [ SetCardRCA(0x1, 0xD555) , Command count = 765 ] 
16:14:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:24: [ SetBusWidth(0x4) , Command count = 766 ] 
16:14:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:24: ####CSD Registe 2.0 Values####
16:14:24: CSD_STRUCTURE                                 :0x1
16:14:24: Reserv1                                       :0x0
16:14:24: Time Access 1 TAAC                            :0xe
16:14:24: Time Access 2 NSAC*100                        :0x0
16:14:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:24: Card Command Classess CCC                     :0x5b5
16:14:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:24: DSR(driver stage register)  DSR_IMP           :0x0
16:14:24: Reserv2                                       :0x0
16:14:24: Device Size C_SIZE                            :0xedc8
16:14:24: Reserv3                                       :0x0
16:14:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:24: Reserv4                                       :0x0
16:14:24: Write Speed Factor R2W_FACTOR                 :0x2
16:14:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:24: FILE_FORMAT_GRP                               :0x0
16:14:24: COPY flag                                     :0x1
16:14:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:24: File_Format                                   :0x0
16:14:24: CRC                                           :0x0
16:14:24: ####CSD Registe Values####  

16:14:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:24: ProductSerialNumber = 0x23482900
16:14:24: CardMaximumLBA      = 0x3b72400
16:14:24: CardCapacity        = 32G
16:14:24: Is card secure      = 0
16:14:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:24: [DVTCommonLib]###  LogicalWrite called
16:14:26: [ WriteLba(0x1B911F2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 767 ] 
16:14:26: [DVTCommonLib]###  LogicalWrite Completed 

16:14:26: [DVTCommonLib]###  LogicalRead called
16:14:27: [ ReadLba(0x1B911F2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 768 ] 
16:14:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 45 times 
16:14:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2D, 0x0) , Command count = 769 ] 
16:14:28: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:28: [DVTCommonLib]### Card response as High Capacity from card
16:14:28: [DVTCommonLib]### VOLA from card : 0x1
16:14:28: [DVTCommonLib]### CMD Pattern from card : 0x2D
16:14:28: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 770 ] 
16:14:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055213F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C00>) , Command count = 771 ] 
16:14:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:28: [ SetCardRCA(0x1, 0xD555) , Command count = 772 ] 
16:14:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:28: [ SetBusWidth(0x4) , Command count = 773 ] 
16:14:28: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:28: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:28: ####CSD Registe 2.0 Values####
16:14:28: CSD_STRUCTURE                                 :0x1
16:14:28: Reserv1                                       :0x0
16:14:28: Time Access 1 TAAC                            :0xe
16:14:28: Time Access 2 NSAC*100                        :0x0
16:14:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:28: Card Command Classess CCC                     :0x5b5
16:14:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:28: DSR(driver stage register)  DSR_IMP           :0x0
16:14:28: Reserv2                                       :0x0
16:14:28: Device Size C_SIZE                            :0xedc8
16:14:28: Reserv3                                       :0x0
16:14:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:28: Reserv4                                       :0x0
16:14:28: Write Speed Factor R2W_FACTOR                 :0x2
16:14:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:28: FILE_FORMAT_GRP                               :0x0
16:14:28: COPY flag                                     :0x1
16:14:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:28: File_Format                                   :0x0
16:14:28: CRC                                           :0x0
16:14:28: ####CSD Registe Values####  

16:14:28: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:28: ProductSerialNumber = 0x23482900
16:14:28: CardMaximumLBA      = 0x3b72400
16:14:28: CardCapacity        = 32G
16:14:28: Is card secure      = 0
16:14:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:28: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:28: [DVTCommonLib]###  LogicalWrite called
16:14:29: [ WriteLba(0x1666AB0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 774 ] 
16:14:29: [DVTCommonLib]###  LogicalWrite Completed 

16:14:29: [DVTCommonLib]###  LogicalRead called
16:14:31: [ ReadLba(0x1666AB0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 775 ] 
16:14:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 46 times 
16:14:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2E, 0x0) , Command count = 776 ] 
16:14:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:31: [DVTCommonLib]### Card response as High Capacity from card
16:14:31: [DVTCommonLib]### VOLA from card : 0x1
16:14:31: [DVTCommonLib]### CMD Pattern from card : 0x2E
16:14:31: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055409C0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 777 ] 
16:14:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0535CE70>, <py_sfcl.CommandDataDefinition object at 0x066B9ED0>) , Command count = 778 ] 
16:14:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:31: [ SetCardRCA(0x1, 0xD555) , Command count = 779 ] 
16:14:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:31: [ SetBusWidth(0x4) , Command count = 780 ] 
16:14:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:31: ####CSD Registe 2.0 Values####
16:14:31: CSD_STRUCTURE                                 :0x1
16:14:31: Reserv1                                       :0x0
16:14:31: Time Access 1 TAAC                            :0xe
16:14:31: Time Access 2 NSAC*100                        :0x0
16:14:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:31: Card Command Classess CCC                     :0x5b5
16:14:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:31: DSR(driver stage register)  DSR_IMP           :0x0
16:14:31: Reserv2                                       :0x0
16:14:31: Device Size C_SIZE                            :0xedc8
16:14:31: Reserv3                                       :0x0
16:14:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:31: Reserv4                                       :0x0
16:14:31: Write Speed Factor R2W_FACTOR                 :0x2
16:14:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:31: FILE_FORMAT_GRP                               :0x0
16:14:31: COPY flag                                     :0x1
16:14:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:31: File_Format                                   :0x0
16:14:31: CRC                                           :0x0
16:14:31: ####CSD Registe Values####  

16:14:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:31: ProductSerialNumber = 0x23482900
16:14:31: CardMaximumLBA      = 0x3b72400
16:14:31: CardCapacity        = 32G
16:14:31: Is card secure      = 0
16:14:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:31: [DVTCommonLib]###  LogicalWrite called
16:14:33: [ WriteLba(0x45C284, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 781 ] 
16:14:33: [DVTCommonLib]###  LogicalWrite Completed 

16:14:33: [DVTCommonLib]###  LogicalRead called
16:14:34: [ ReadLba(0x45C284, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 782 ] 
16:14:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 47 times 
16:14:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x2F, 0x0) , Command count = 783 ] 
16:14:35: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:35: [DVTCommonLib]### Card response as High Capacity from card
16:14:35: [DVTCommonLib]### VOLA from card : 0x1
16:14:35: [DVTCommonLib]### CMD Pattern from card : 0x2F
16:14:35: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9840>, <py_sfcl.CommandDataDefinition object at 0x066B9DB0>) , Command count = 784 ] 
16:14:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540E40>, <py_sfcl.CommandDataDefinition object at 0x066B9F30>) , Command count = 785 ] 
16:14:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:35: [ SetCardRCA(0x1, 0xD555) , Command count = 786 ] 
16:14:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:35: [ SetBusWidth(0x4) , Command count = 787 ] 
16:14:35: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:35: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:35: ####CSD Registe 2.0 Values####
16:14:35: CSD_STRUCTURE                                 :0x1
16:14:35: Reserv1                                       :0x0
16:14:35: Time Access 1 TAAC                            :0xe
16:14:35: Time Access 2 NSAC*100                        :0x0
16:14:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:35: Card Command Classess CCC                     :0x5b5
16:14:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:35: DSR(driver stage register)  DSR_IMP           :0x0
16:14:35: Reserv2                                       :0x0
16:14:35: Device Size C_SIZE                            :0xedc8
16:14:35: Reserv3                                       :0x0
16:14:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:35: Reserv4                                       :0x0
16:14:35: Write Speed Factor R2W_FACTOR                 :0x2
16:14:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:35: FILE_FORMAT_GRP                               :0x0
16:14:35: COPY flag                                     :0x1
16:14:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:35: File_Format                                   :0x0
16:14:35: CRC                                           :0x0
16:14:35: ####CSD Registe Values####  

16:14:35: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:35: ProductSerialNumber = 0x23482900
16:14:35: CardMaximumLBA      = 0x3b72400
16:14:35: CardCapacity        = 32G
16:14:35: Is card secure      = 0
16:14:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:35: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:35: [DVTCommonLib]###  LogicalWrite called
16:14:36: [ WriteLba(0x16C19F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 788 ] 
16:14:36: [DVTCommonLib]###  LogicalWrite Completed 

16:14:36: [DVTCommonLib]###  LogicalRead called
16:14:38: [ ReadLba(0x16C19F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 789 ] 
16:14:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 48 times 
16:14:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x30, 0x0) , Command count = 790 ] 
16:14:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:38: [DVTCommonLib]### Card response as High Capacity from card
16:14:38: [DVTCommonLib]### VOLA from card : 0x1
16:14:38: [DVTCommonLib]### CMD Pattern from card : 0x30
16:14:38: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482030>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 791 ] 
16:14:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F90>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 792 ] 
16:14:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:38: [ SetCardRCA(0x1, 0xD555) , Command count = 793 ] 
16:14:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:38: [ SetBusWidth(0x4) , Command count = 794 ] 
16:14:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:38: ####CSD Registe 2.0 Values####
16:14:38: CSD_STRUCTURE                                 :0x1
16:14:38: Reserv1                                       :0x0
16:14:38: Time Access 1 TAAC                            :0xe
16:14:38: Time Access 2 NSAC*100                        :0x0
16:14:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:38: Card Command Classess CCC                     :0x5b5
16:14:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:38: DSR(driver stage register)  DSR_IMP           :0x0
16:14:38: Reserv2                                       :0x0
16:14:38: Device Size C_SIZE                            :0xedc8
16:14:38: Reserv3                                       :0x0
16:14:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:38: Reserv4                                       :0x0
16:14:38: Write Speed Factor R2W_FACTOR                 :0x2
16:14:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:38: FILE_FORMAT_GRP                               :0x0
16:14:38: COPY flag                                     :0x1
16:14:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:38: File_Format                                   :0x0
16:14:38: CRC                                           :0x0
16:14:38: ####CSD Registe Values####  

16:14:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:38: ProductSerialNumber = 0x23482900
16:14:38: CardMaximumLBA      = 0x3b72400
16:14:38: CardCapacity        = 32G
16:14:38: Is card secure      = 0
16:14:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:38: [DVTCommonLib]###  LogicalWrite called
16:14:40: [ WriteLba(0x2A6608E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 795 ] 
16:14:40: [DVTCommonLib]###  LogicalWrite Completed 

16:14:40: [DVTCommonLib]###  LogicalRead called
16:14:41: [ ReadLba(0x2A6608E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 796 ] 
16:14:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 49 times 
16:14:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x31, 0x0) , Command count = 797 ] 
16:14:42: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:42: [DVTCommonLib]### Card response as High Capacity from card
16:14:42: [DVTCommonLib]### VOLA from card : 0x1
16:14:42: [DVTCommonLib]### CMD Pattern from card : 0x31
16:14:42: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066B96C0>) , Command count = 798 ] 
16:14:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540DB0>, <py_sfcl.CommandDataDefinition object at 0x066B9900>) , Command count = 799 ] 
16:14:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:42: [ SetCardRCA(0x1, 0xD555) , Command count = 800 ] 
16:14:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:42: [ SetBusWidth(0x4) , Command count = 801 ] 
16:14:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:42: ####CSD Registe 2.0 Values####
16:14:42: CSD_STRUCTURE                                 :0x1
16:14:42: Reserv1                                       :0x0
16:14:42: Time Access 1 TAAC                            :0xe
16:14:42: Time Access 2 NSAC*100                        :0x0
16:14:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:42: Card Command Classess CCC                     :0x5b5
16:14:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:42: DSR(driver stage register)  DSR_IMP           :0x0
16:14:42: Reserv2                                       :0x0
16:14:42: Device Size C_SIZE                            :0xedc8
16:14:42: Reserv3                                       :0x0
16:14:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:42: Reserv4                                       :0x0
16:14:42: Write Speed Factor R2W_FACTOR                 :0x2
16:14:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:42: FILE_FORMAT_GRP                               :0x0
16:14:42: COPY flag                                     :0x1
16:14:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:42: File_Format                                   :0x0
16:14:42: CRC                                           :0x0
16:14:42: ####CSD Registe Values####  

16:14:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:42: ProductSerialNumber = 0x23482900
16:14:42: CardMaximumLBA      = 0x3b72400
16:14:42: CardCapacity        = 32G
16:14:42: Is card secure      = 0
16:14:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:42: [DVTCommonLib]###  LogicalWrite called
16:14:43: [ WriteLba(0x50D72C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 802 ] 
16:14:43: [DVTCommonLib]###  LogicalWrite Completed 

16:14:43: [DVTCommonLib]###  LogicalRead called
16:14:45: [ ReadLba(0x50D72C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 803 ] 
16:14:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 50 times 
16:14:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x32, 0x0) , Command count = 804 ] 
16:14:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:45: [DVTCommonLib]### Card response as High Capacity from card
16:14:45: [DVTCommonLib]### VOLA from card : 0x1
16:14:45: [DVTCommonLib]### CMD Pattern from card : 0x32
16:14:45: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 805 ] 
16:14:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9510>, <py_sfcl.CommandDataDefinition object at 0x066B9570>) , Command count = 806 ] 
16:14:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:45: [ SetCardRCA(0x1, 0xD555) , Command count = 807 ] 
16:14:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:45: [ SetBusWidth(0x4) , Command count = 808 ] 
16:14:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:45: ####CSD Registe 2.0 Values####
16:14:45: CSD_STRUCTURE                                 :0x1
16:14:45: Reserv1                                       :0x0
16:14:45: Time Access 1 TAAC                            :0xe
16:14:45: Time Access 2 NSAC*100                        :0x0
16:14:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:45: Card Command Classess CCC                     :0x5b5
16:14:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:45: DSR(driver stage register)  DSR_IMP           :0x0
16:14:45: Reserv2                                       :0x0
16:14:45: Device Size C_SIZE                            :0xedc8
16:14:45: Reserv3                                       :0x0
16:14:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:45: Reserv4                                       :0x0
16:14:45: Write Speed Factor R2W_FACTOR                 :0x2
16:14:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:45: FILE_FORMAT_GRP                               :0x0
16:14:45: COPY flag                                     :0x1
16:14:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:45: File_Format                                   :0x0
16:14:45: CRC                                           :0x0
16:14:45: ####CSD Registe Values####  

16:14:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:45: ProductSerialNumber = 0x23482900
16:14:45: CardMaximumLBA      = 0x3b72400
16:14:45: CardCapacity        = 32G
16:14:45: Is card secure      = 0
16:14:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:45: [DVTCommonLib]###  LogicalWrite called
16:14:47: [ WriteLba(0x6C1390, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 809 ] 
16:14:47: [DVTCommonLib]###  LogicalWrite Completed 

16:14:47: [DVTCommonLib]###  LogicalRead called
16:14:48: [ ReadLba(0x6C1390, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 810 ] 
16:14:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 51 times 
16:14:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x33, 0x0) , Command count = 811 ] 
16:14:49: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:49: [DVTCommonLib]### Card response as High Capacity from card
16:14:49: [DVTCommonLib]### VOLA from card : 0x1
16:14:49: [DVTCommonLib]### CMD Pattern from card : 0x33
16:14:49: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066037B0>, <py_sfcl.CommandDataDefinition object at 0x06603720>) , Command count = 812 ] 
16:14:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603F00>, <py_sfcl.CommandDataDefinition object at 0x06603ED0>) , Command count = 813 ] 
16:14:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:49: [ SetCardRCA(0x1, 0xD555) , Command count = 814 ] 
16:14:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:49: [ SetBusWidth(0x4) , Command count = 815 ] 
16:14:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:49: ####CSD Registe 2.0 Values####
16:14:49: CSD_STRUCTURE                                 :0x1
16:14:49: Reserv1                                       :0x0
16:14:49: Time Access 1 TAAC                            :0xe
16:14:49: Time Access 2 NSAC*100                        :0x0
16:14:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:49: Card Command Classess CCC                     :0x5b5
16:14:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:49: DSR(driver stage register)  DSR_IMP           :0x0
16:14:49: Reserv2                                       :0x0
16:14:49: Device Size C_SIZE                            :0xedc8
16:14:49: Reserv3                                       :0x0
16:14:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:49: Reserv4                                       :0x0
16:14:49: Write Speed Factor R2W_FACTOR                 :0x2
16:14:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:49: FILE_FORMAT_GRP                               :0x0
16:14:49: COPY flag                                     :0x1
16:14:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:49: File_Format                                   :0x0
16:14:49: CRC                                           :0x0
16:14:49: ####CSD Registe Values####  

16:14:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:49: ProductSerialNumber = 0x23482900
16:14:49: CardMaximumLBA      = 0x3b72400
16:14:49: CardCapacity        = 32G
16:14:49: Is card secure      = 0
16:14:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:49: [DVTCommonLib]###  LogicalWrite called
16:14:50: [ WriteLba(0x1212CE6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 816 ] 
16:14:50: [DVTCommonLib]###  LogicalWrite Completed 

16:14:50: [DVTCommonLib]###  LogicalRead called
16:14:52: [ ReadLba(0x1212CE6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 817 ] 
16:14:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 52 times 
16:14:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x34, 0x0) , Command count = 818 ] 
16:14:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:52: [DVTCommonLib]### Card response as High Capacity from card
16:14:52: [DVTCommonLib]### VOLA from card : 0x1
16:14:52: [DVTCommonLib]### CMD Pattern from card : 0x34
16:14:52: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035A0>, <py_sfcl.CommandDataDefinition object at 0x06603750>) , Command count = 819 ] 
16:14:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035D0>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 820 ] 
16:14:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:52: [ SetCardRCA(0x1, 0xD555) , Command count = 821 ] 
16:14:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:52: [ SetBusWidth(0x4) , Command count = 822 ] 
16:14:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:52: ####CSD Registe 2.0 Values####
16:14:52: CSD_STRUCTURE                                 :0x1
16:14:52: Reserv1                                       :0x0
16:14:52: Time Access 1 TAAC                            :0xe
16:14:52: Time Access 2 NSAC*100                        :0x0
16:14:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:52: Card Command Classess CCC                     :0x5b5
16:14:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:52: DSR(driver stage register)  DSR_IMP           :0x0
16:14:52: Reserv2                                       :0x0
16:14:52: Device Size C_SIZE                            :0xedc8
16:14:52: Reserv3                                       :0x0
16:14:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:52: Reserv4                                       :0x0
16:14:52: Write Speed Factor R2W_FACTOR                 :0x2
16:14:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:52: FILE_FORMAT_GRP                               :0x0
16:14:52: COPY flag                                     :0x1
16:14:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:52: File_Format                                   :0x0
16:14:52: CRC                                           :0x0
16:14:52: ####CSD Registe Values####  

16:14:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:52: ProductSerialNumber = 0x23482900
16:14:52: CardMaximumLBA      = 0x3b72400
16:14:52: CardCapacity        = 32G
16:14:52: Is card secure      = 0
16:14:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:52: [DVTCommonLib]###  LogicalWrite called
16:14:54: [ WriteLba(0x2B3E0A0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 823 ] 
16:14:54: [DVTCommonLib]###  LogicalWrite Completed 

16:14:54: [DVTCommonLib]###  LogicalRead called
16:14:55: [ ReadLba(0x2B3E0A0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 824 ] 
16:14:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 53 times 
16:14:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x35, 0x0) , Command count = 825 ] 
16:14:56: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:56: [DVTCommonLib]### Card response as High Capacity from card
16:14:56: [DVTCommonLib]### VOLA from card : 0x1
16:14:56: [DVTCommonLib]### CMD Pattern from card : 0x35
16:14:56: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x06603A80>) , Command count = 826 ] 
16:14:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C0C0>, <py_sfcl.CommandDataDefinition object at 0x06603510>) , Command count = 827 ] 
16:14:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:56: [ SetCardRCA(0x1, 0xD555) , Command count = 828 ] 
16:14:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:56: [ SetBusWidth(0x4) , Command count = 829 ] 
16:14:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:56: ####CSD Registe 2.0 Values####
16:14:56: CSD_STRUCTURE                                 :0x1
16:14:56: Reserv1                                       :0x0
16:14:56: Time Access 1 TAAC                            :0xe
16:14:56: Time Access 2 NSAC*100                        :0x0
16:14:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:56: Card Command Classess CCC                     :0x5b5
16:14:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:56: DSR(driver stage register)  DSR_IMP           :0x0
16:14:56: Reserv2                                       :0x0
16:14:56: Device Size C_SIZE                            :0xedc8
16:14:56: Reserv3                                       :0x0
16:14:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:56: Reserv4                                       :0x0
16:14:56: Write Speed Factor R2W_FACTOR                 :0x2
16:14:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:56: FILE_FORMAT_GRP                               :0x0
16:14:56: COPY flag                                     :0x1
16:14:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:56: File_Format                                   :0x0
16:14:56: CRC                                           :0x0
16:14:56: ####CSD Registe Values####  

16:14:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:56: ProductSerialNumber = 0x23482900
16:14:56: CardMaximumLBA      = 0x3b72400
16:14:56: CardCapacity        = 32G
16:14:56: Is card secure      = 0
16:14:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:56: [DVTCommonLib]###  LogicalWrite called
16:14:57: [ WriteLba(0x2E6ED50, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 830 ] 
16:14:57: [DVTCommonLib]###  LogicalWrite Completed 

16:14:57: [DVTCommonLib]###  LogicalRead called
16:14:59: [ ReadLba(0x2E6ED50, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 831 ] 
16:14:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 54 times 
16:14:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x36, 0x0) , Command count = 832 ] 
16:14:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:14:59: [DVTCommonLib]### Card response as High Capacity from card
16:14:59: [DVTCommonLib]### VOLA from card : 0x1
16:14:59: [DVTCommonLib]### CMD Pattern from card : 0x36
16:14:59: [DVTCommonLib]### Reserved bits from card : 0x0
16:14:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x06603CF0>) , Command count = 833 ] 
16:14:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613900>, <py_sfcl.CommandDataDefinition object at 0x06603BA0>) , Command count = 834 ] 
16:14:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:59: [ SetCardRCA(0x1, 0xD555) , Command count = 835 ] 
16:14:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:59: [ SetBusWidth(0x4) , Command count = 836 ] 
16:14:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:14:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:59: ####CSD Registe 2.0 Values####
16:14:59: CSD_STRUCTURE                                 :0x1
16:14:59: Reserv1                                       :0x0
16:14:59: Time Access 1 TAAC                            :0xe
16:14:59: Time Access 2 NSAC*100                        :0x0
16:14:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:59: Card Command Classess CCC                     :0x5b5
16:14:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:59: DSR(driver stage register)  DSR_IMP           :0x0
16:14:59: Reserv2                                       :0x0
16:14:59: Device Size C_SIZE                            :0xedc8
16:14:59: Reserv3                                       :0x0
16:14:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:59: Reserv4                                       :0x0
16:14:59: Write Speed Factor R2W_FACTOR                 :0x2
16:14:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:59: FILE_FORMAT_GRP                               :0x0
16:14:59: COPY flag                                     :0x1
16:14:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:59: File_Format                                   :0x0
16:14:59: CRC                                           :0x0
16:14:59: ####CSD Registe Values####  

16:14:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:14:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:59: ProductSerialNumber = 0x23482900
16:14:59: CardMaximumLBA      = 0x3b72400
16:14:59: CardCapacity        = 32G
16:14:59: Is card secure      = 0
16:14:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:14:59: [DVTCommonLib]###  LogicalWrite called
16:15:01: [ WriteLba(0x16BD180, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 837 ] 
16:15:01: [DVTCommonLib]###  LogicalWrite Completed 

16:15:01: [DVTCommonLib]###  LogicalRead called
16:15:03: [ ReadLba(0x16BD180, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 838 ] 
16:15:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:03: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 55 times 
16:15:03: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x37, 0x0) , Command count = 839 ] 
16:15:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:03: [DVTCommonLib]### Card response as High Capacity from card
16:15:03: [DVTCommonLib]### VOLA from card : 0x1
16:15:03: [DVTCommonLib]### CMD Pattern from card : 0x37
16:15:03: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613B10>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 840 ] 
16:15:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613C30>, <py_sfcl.CommandDataDefinition object at 0x06613990>) , Command count = 841 ] 
16:15:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:03: [ SetCardRCA(0x1, 0xD555) , Command count = 842 ] 
16:15:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:03: [ SetBusWidth(0x4) , Command count = 843 ] 
16:15:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:03: ####CSD Registe 2.0 Values####
16:15:03: CSD_STRUCTURE                                 :0x1
16:15:03: Reserv1                                       :0x0
16:15:03: Time Access 1 TAAC                            :0xe
16:15:03: Time Access 2 NSAC*100                        :0x0
16:15:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:03: Card Command Classess CCC                     :0x5b5
16:15:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:03: DSR(driver stage register)  DSR_IMP           :0x0
16:15:03: Reserv2                                       :0x0
16:15:03: Device Size C_SIZE                            :0xedc8
16:15:03: Reserv3                                       :0x0
16:15:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:03: Reserv4                                       :0x0
16:15:03: Write Speed Factor R2W_FACTOR                 :0x2
16:15:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:03: FILE_FORMAT_GRP                               :0x0
16:15:03: COPY flag                                     :0x1
16:15:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:03: File_Format                                   :0x0
16:15:03: CRC                                           :0x0
16:15:03: ####CSD Registe Values####  

16:15:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:03: ProductSerialNumber = 0x23482900
16:15:03: CardMaximumLBA      = 0x3b72400
16:15:03: CardCapacity        = 32G
16:15:03: Is card secure      = 0
16:15:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:03: [DVTCommonLib]###  LogicalWrite called
16:15:04: [ WriteLba(0x172CB4D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 844 ] 
16:15:04: [DVTCommonLib]###  LogicalWrite Completed 

16:15:04: [DVTCommonLib]###  LogicalRead called
16:15:06: [ ReadLba(0x172CB4D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 845 ] 
16:15:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 56 times 
16:15:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x38, 0x0) , Command count = 846 ] 
16:15:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:06: [DVTCommonLib]### Card response as High Capacity from card
16:15:06: [DVTCommonLib]### VOLA from card : 0x1
16:15:06: [DVTCommonLib]### CMD Pattern from card : 0x38
16:15:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482780>, <py_sfcl.CommandDataDefinition object at 0x06613CC0>) , Command count = 847 ] 
16:15:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619150>, <py_sfcl.CommandDataDefinition object at 0x06613870>) , Command count = 848 ] 
16:15:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:06: [ SetCardRCA(0x1, 0xD555) , Command count = 849 ] 
16:15:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:06: [ SetBusWidth(0x4) , Command count = 850 ] 
16:15:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:06: ####CSD Registe 2.0 Values####
16:15:06: CSD_STRUCTURE                                 :0x1
16:15:06: Reserv1                                       :0x0
16:15:06: Time Access 1 TAAC                            :0xe
16:15:06: Time Access 2 NSAC*100                        :0x0
16:15:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:06: Card Command Classess CCC                     :0x5b5
16:15:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:06: DSR(driver stage register)  DSR_IMP           :0x0
16:15:06: Reserv2                                       :0x0
16:15:06: Device Size C_SIZE                            :0xedc8
16:15:06: Reserv3                                       :0x0
16:15:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:06: Reserv4                                       :0x0
16:15:06: Write Speed Factor R2W_FACTOR                 :0x2
16:15:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:06: FILE_FORMAT_GRP                               :0x0
16:15:06: COPY flag                                     :0x1
16:15:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:06: File_Format                                   :0x0
16:15:06: CRC                                           :0x0
16:15:06: ####CSD Registe Values####  

16:15:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:06: ProductSerialNumber = 0x23482900
16:15:06: CardMaximumLBA      = 0x3b72400
16:15:06: CardCapacity        = 32G
16:15:06: Is card secure      = 0
16:15:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:06: [DVTCommonLib]###  LogicalWrite called
16:15:08: [ WriteLba(0x1EC800E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 851 ] 
16:15:08: [DVTCommonLib]###  LogicalWrite Completed 

16:15:08: [DVTCommonLib]###  LogicalRead called
16:15:10: [ ReadLba(0x1EC800E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 852 ] 
16:15:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:10: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 57 times 
16:15:10: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x39, 0x0) , Command count = 853 ] 
16:15:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:10: [DVTCommonLib]### Card response as High Capacity from card
16:15:10: [DVTCommonLib]### VOLA from card : 0x1
16:15:10: [DVTCommonLib]### CMD Pattern from card : 0x39
16:15:10: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 854 ] 
16:15:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066193C0>, <py_sfcl.CommandDataDefinition object at 0x06619420>) , Command count = 855 ] 
16:15:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:10: [ SetCardRCA(0x1, 0xD555) , Command count = 856 ] 
16:15:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:10: [ SetBusWidth(0x4) , Command count = 857 ] 
16:15:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:10: ####CSD Registe 2.0 Values####
16:15:10: CSD_STRUCTURE                                 :0x1
16:15:10: Reserv1                                       :0x0
16:15:10: Time Access 1 TAAC                            :0xe
16:15:10: Time Access 2 NSAC*100                        :0x0
16:15:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:10: Card Command Classess CCC                     :0x5b5
16:15:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:10: DSR(driver stage register)  DSR_IMP           :0x0
16:15:10: Reserv2                                       :0x0
16:15:10: Device Size C_SIZE                            :0xedc8
16:15:10: Reserv3                                       :0x0
16:15:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:10: Reserv4                                       :0x0
16:15:10: Write Speed Factor R2W_FACTOR                 :0x2
16:15:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:10: FILE_FORMAT_GRP                               :0x0
16:15:10: COPY flag                                     :0x1
16:15:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:10: File_Format                                   :0x0
16:15:10: CRC                                           :0x0
16:15:10: ####CSD Registe Values####  

16:15:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:10: ProductSerialNumber = 0x23482900
16:15:10: CardMaximumLBA      = 0x3b72400
16:15:10: CardCapacity        = 32G
16:15:10: Is card secure      = 0
16:15:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:10: [DVTCommonLib]###  LogicalWrite called
16:15:12: [ WriteLba(0x1F30AE1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 858 ] 
16:15:12: [DVTCommonLib]###  LogicalWrite Completed 

16:15:12: [DVTCommonLib]###  LogicalRead called
16:15:13: [ ReadLba(0x1F30AE1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 859 ] 
16:15:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 58 times 
16:15:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3A, 0x0) , Command count = 860 ] 
16:15:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:13: [DVTCommonLib]### Card response as High Capacity from card
16:15:13: [DVTCommonLib]### VOLA from card : 0x1
16:15:13: [DVTCommonLib]### CMD Pattern from card : 0x3A
16:15:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 861 ] 
16:15:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066197B0>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 862 ] 
16:15:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:13: [ SetCardRCA(0x1, 0xD555) , Command count = 863 ] 
16:15:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:13: [ SetBusWidth(0x4) , Command count = 864 ] 
16:15:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:13: ####CSD Registe 2.0 Values####
16:15:13: CSD_STRUCTURE                                 :0x1
16:15:13: Reserv1                                       :0x0
16:15:13: Time Access 1 TAAC                            :0xe
16:15:13: Time Access 2 NSAC*100                        :0x0
16:15:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:13: Card Command Classess CCC                     :0x5b5
16:15:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:13: DSR(driver stage register)  DSR_IMP           :0x0
16:15:13: Reserv2                                       :0x0
16:15:13: Device Size C_SIZE                            :0xedc8
16:15:13: Reserv3                                       :0x0
16:15:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:13: Reserv4                                       :0x0
16:15:13: Write Speed Factor R2W_FACTOR                 :0x2
16:15:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:13: FILE_FORMAT_GRP                               :0x0
16:15:13: COPY flag                                     :0x1
16:15:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:13: File_Format                                   :0x0
16:15:13: CRC                                           :0x0
16:15:13: ####CSD Registe Values####  

16:15:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:13: ProductSerialNumber = 0x23482900
16:15:13: CardMaximumLBA      = 0x3b72400
16:15:13: CardCapacity        = 32G
16:15:13: Is card secure      = 0
16:15:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:13: [DVTCommonLib]###  LogicalWrite called
16:15:15: [ WriteLba(0x34A3672, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 865 ] 
16:15:15: [DVTCommonLib]###  LogicalWrite Completed 

16:15:15: [DVTCommonLib]###  LogicalRead called
16:15:17: [ ReadLba(0x34A3672, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 866 ] 
16:15:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:17: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 59 times 
16:15:17: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3B, 0x0) , Command count = 867 ] 
16:15:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:17: [DVTCommonLib]### Card response as High Capacity from card
16:15:17: [DVTCommonLib]### VOLA from card : 0x1
16:15:17: [DVTCommonLib]### CMD Pattern from card : 0x3B
16:15:17: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 868 ] 
16:15:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619D20>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 869 ] 
16:15:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:17: [ SetCardRCA(0x1, 0xD555) , Command count = 870 ] 
16:15:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:17: [ SetBusWidth(0x4) , Command count = 871 ] 
16:15:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:17: ####CSD Registe 2.0 Values####
16:15:17: CSD_STRUCTURE                                 :0x1
16:15:17: Reserv1                                       :0x0
16:15:17: Time Access 1 TAAC                            :0xe
16:15:17: Time Access 2 NSAC*100                        :0x0
16:15:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:17: Card Command Classess CCC                     :0x5b5
16:15:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:17: DSR(driver stage register)  DSR_IMP           :0x0
16:15:17: Reserv2                                       :0x0
16:15:17: Device Size C_SIZE                            :0xedc8
16:15:17: Reserv3                                       :0x0
16:15:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:17: Reserv4                                       :0x0
16:15:17: Write Speed Factor R2W_FACTOR                 :0x2
16:15:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:17: FILE_FORMAT_GRP                               :0x0
16:15:17: COPY flag                                     :0x1
16:15:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:17: File_Format                                   :0x0
16:15:17: CRC                                           :0x0
16:15:17: ####CSD Registe Values####  

16:15:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:17: ProductSerialNumber = 0x23482900
16:15:17: CardMaximumLBA      = 0x3b72400
16:15:17: CardCapacity        = 32G
16:15:17: Is card secure      = 0
16:15:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:17: [DVTCommonLib]###  LogicalWrite called
16:15:19: [ WriteLba(0x1560009, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 872 ] 
16:15:19: [DVTCommonLib]###  LogicalWrite Completed 

16:15:19: [DVTCommonLib]###  LogicalRead called
16:15:20: [ ReadLba(0x1560009, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 873 ] 
16:15:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 60 times 
16:15:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3C, 0x0) , Command count = 874 ] 
16:15:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:20: [DVTCommonLib]### Card response as High Capacity from card
16:15:20: [DVTCommonLib]### VOLA from card : 0x1
16:15:20: [DVTCommonLib]### CMD Pattern from card : 0x3C
16:15:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619030>, <py_sfcl.CommandDataDefinition object at 0x06619E10>) , Command count = 875 ] 
16:15:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540C00>, <py_sfcl.CommandDataDefinition object at 0x06619990>) , Command count = 876 ] 
16:15:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:20: [ SetCardRCA(0x1, 0xD555) , Command count = 877 ] 
16:15:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:20: [ SetBusWidth(0x4) , Command count = 878 ] 
16:15:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:20: ####CSD Registe 2.0 Values####
16:15:20: CSD_STRUCTURE                                 :0x1
16:15:20: Reserv1                                       :0x0
16:15:20: Time Access 1 TAAC                            :0xe
16:15:20: Time Access 2 NSAC*100                        :0x0
16:15:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:20: Card Command Classess CCC                     :0x5b5
16:15:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:20: DSR(driver stage register)  DSR_IMP           :0x0
16:15:20: Reserv2                                       :0x0
16:15:20: Device Size C_SIZE                            :0xedc8
16:15:20: Reserv3                                       :0x0
16:15:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:20: Reserv4                                       :0x0
16:15:20: Write Speed Factor R2W_FACTOR                 :0x2
16:15:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:20: FILE_FORMAT_GRP                               :0x0
16:15:20: COPY flag                                     :0x1
16:15:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:20: File_Format                                   :0x0
16:15:20: CRC                                           :0x0
16:15:20: ####CSD Registe Values####  

16:15:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:20: ProductSerialNumber = 0x23482900
16:15:20: CardMaximumLBA      = 0x3b72400
16:15:20: CardCapacity        = 32G
16:15:20: Is card secure      = 0
16:15:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:20: [DVTCommonLib]###  LogicalWrite called
16:15:22: [ WriteLba(0x175A283, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 879 ] 
16:15:22: [DVTCommonLib]###  LogicalWrite Completed 

16:15:22: [DVTCommonLib]###  LogicalRead called
16:15:24: [ ReadLba(0x175A283, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 880 ] 
16:15:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:24: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 61 times 
16:15:24: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3D, 0x0) , Command count = 881 ] 
16:15:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:24: [DVTCommonLib]### Card response as High Capacity from card
16:15:24: [DVTCommonLib]### VOLA from card : 0x1
16:15:24: [DVTCommonLib]### CMD Pattern from card : 0x3D
16:15:24: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C1E0>, <py_sfcl.CommandDataDefinition object at 0x06619E70>) , Command count = 882 ] 
16:15:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619C60>, <py_sfcl.CommandDataDefinition object at 0x06619AB0>) , Command count = 883 ] 
16:15:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:24: [ SetCardRCA(0x1, 0xD555) , Command count = 884 ] 
16:15:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:24: [ SetBusWidth(0x4) , Command count = 885 ] 
16:15:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:24: ####CSD Registe 2.0 Values####
16:15:24: CSD_STRUCTURE                                 :0x1
16:15:24: Reserv1                                       :0x0
16:15:24: Time Access 1 TAAC                            :0xe
16:15:24: Time Access 2 NSAC*100                        :0x0
16:15:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:24: Card Command Classess CCC                     :0x5b5
16:15:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:24: DSR(driver stage register)  DSR_IMP           :0x0
16:15:24: Reserv2                                       :0x0
16:15:24: Device Size C_SIZE                            :0xedc8
16:15:24: Reserv3                                       :0x0
16:15:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:24: Reserv4                                       :0x0
16:15:24: Write Speed Factor R2W_FACTOR                 :0x2
16:15:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:24: FILE_FORMAT_GRP                               :0x0
16:15:24: COPY flag                                     :0x1
16:15:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:24: File_Format                                   :0x0
16:15:24: CRC                                           :0x0
16:15:24: ####CSD Registe Values####  

16:15:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:24: ProductSerialNumber = 0x23482900
16:15:24: CardMaximumLBA      = 0x3b72400
16:15:24: CardCapacity        = 32G
16:15:24: Is card secure      = 0
16:15:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:24: [DVTCommonLib]###  LogicalWrite called
16:15:26: [ WriteLba(0x2697D2D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 886 ] 
16:15:26: [DVTCommonLib]###  LogicalWrite Completed 

16:15:26: [DVTCommonLib]###  LogicalRead called
16:15:27: [ ReadLba(0x2697D2D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 887 ] 
16:15:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 62 times 
16:15:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3E, 0x0) , Command count = 888 ] 
16:15:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:27: [DVTCommonLib]### Card response as High Capacity from card
16:15:27: [DVTCommonLib]### VOLA from card : 0x1
16:15:27: [DVTCommonLib]### CMD Pattern from card : 0x3E
16:15:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C6C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 889 ] 
16:15:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C180>, <py_sfcl.CommandDataDefinition object at 0x06619C00>) , Command count = 890 ] 
16:15:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:27: [ SetCardRCA(0x1, 0xD555) , Command count = 891 ] 
16:15:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:27: [ SetBusWidth(0x4) , Command count = 892 ] 
16:15:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:27: ####CSD Registe 2.0 Values####
16:15:27: CSD_STRUCTURE                                 :0x1
16:15:27: Reserv1                                       :0x0
16:15:27: Time Access 1 TAAC                            :0xe
16:15:27: Time Access 2 NSAC*100                        :0x0
16:15:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:27: Card Command Classess CCC                     :0x5b5
16:15:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:27: DSR(driver stage register)  DSR_IMP           :0x0
16:15:27: Reserv2                                       :0x0
16:15:27: Device Size C_SIZE                            :0xedc8
16:15:27: Reserv3                                       :0x0
16:15:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:27: Reserv4                                       :0x0
16:15:27: Write Speed Factor R2W_FACTOR                 :0x2
16:15:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:27: FILE_FORMAT_GRP                               :0x0
16:15:27: COPY flag                                     :0x1
16:15:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:27: File_Format                                   :0x0
16:15:27: CRC                                           :0x0
16:15:27: ####CSD Registe Values####  

16:15:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:27: ProductSerialNumber = 0x23482900
16:15:27: CardMaximumLBA      = 0x3b72400
16:15:27: CardCapacity        = 32G
16:15:27: Is card secure      = 0
16:15:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:27: [DVTCommonLib]###  LogicalWrite called
16:15:29: [ WriteLba(0x2B94F16, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 893 ] 
16:15:29: [DVTCommonLib]###  LogicalWrite Completed 

16:15:29: [DVTCommonLib]###  LogicalRead called
16:15:31: [ ReadLba(0x2B94F16, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 894 ] 
16:15:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:31: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 63 times 
16:15:31: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x3F, 0x0) , Command count = 895 ] 
16:15:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:31: [DVTCommonLib]### Card response as High Capacity from card
16:15:31: [DVTCommonLib]### VOLA from card : 0x1
16:15:31: [DVTCommonLib]### CMD Pattern from card : 0x3F
16:15:31: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C570>, <py_sfcl.CommandDataDefinition object at 0x0661C1B0>) , Command count = 896 ] 
16:15:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C7B0>, <py_sfcl.CommandDataDefinition object at 0x0661C300>) , Command count = 897 ] 
16:15:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:31: [ SetCardRCA(0x1, 0xD555) , Command count = 898 ] 
16:15:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:31: [ SetBusWidth(0x4) , Command count = 899 ] 
16:15:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:31: ####CSD Registe 2.0 Values####
16:15:31: CSD_STRUCTURE                                 :0x1
16:15:31: Reserv1                                       :0x0
16:15:31: Time Access 1 TAAC                            :0xe
16:15:31: Time Access 2 NSAC*100                        :0x0
16:15:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:31: Card Command Classess CCC                     :0x5b5
16:15:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:31: DSR(driver stage register)  DSR_IMP           :0x0
16:15:31: Reserv2                                       :0x0
16:15:31: Device Size C_SIZE                            :0xedc8
16:15:31: Reserv3                                       :0x0
16:15:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:31: Reserv4                                       :0x0
16:15:31: Write Speed Factor R2W_FACTOR                 :0x2
16:15:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:31: FILE_FORMAT_GRP                               :0x0
16:15:31: COPY flag                                     :0x1
16:15:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:31: File_Format                                   :0x0
16:15:31: CRC                                           :0x0
16:15:31: ####CSD Registe Values####  

16:15:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:31: ProductSerialNumber = 0x23482900
16:15:31: CardMaximumLBA      = 0x3b72400
16:15:31: CardCapacity        = 32G
16:15:31: Is card secure      = 0
16:15:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:31: [DVTCommonLib]###  LogicalWrite called
16:15:33: [ WriteLba(0x18DBC15, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 900 ] 
16:15:33: [DVTCommonLib]###  LogicalWrite Completed 

16:15:33: [DVTCommonLib]###  LogicalRead called
16:15:34: [ ReadLba(0x18DBC15, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 901 ] 
16:15:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 64 times 
16:15:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x40, 0x0) , Command count = 902 ] 
16:15:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:34: [DVTCommonLib]### Card response as High Capacity from card
16:15:34: [DVTCommonLib]### VOLA from card : 0x1
16:15:34: [DVTCommonLib]### CMD Pattern from card : 0x40
16:15:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 903 ] 
16:15:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C870>, <py_sfcl.CommandDataDefinition object at 0x0661C3F0>) , Command count = 904 ] 
16:15:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:34: [ SetCardRCA(0x1, 0xD555) , Command count = 905 ] 
16:15:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:34: [ SetBusWidth(0x4) , Command count = 906 ] 
16:15:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:34: ####CSD Registe 2.0 Values####
16:15:34: CSD_STRUCTURE                                 :0x1
16:15:34: Reserv1                                       :0x0
16:15:34: Time Access 1 TAAC                            :0xe
16:15:34: Time Access 2 NSAC*100                        :0x0
16:15:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:34: Card Command Classess CCC                     :0x5b5
16:15:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:34: DSR(driver stage register)  DSR_IMP           :0x0
16:15:34: Reserv2                                       :0x0
16:15:34: Device Size C_SIZE                            :0xedc8
16:15:34: Reserv3                                       :0x0
16:15:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:34: Reserv4                                       :0x0
16:15:34: Write Speed Factor R2W_FACTOR                 :0x2
16:15:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:34: FILE_FORMAT_GRP                               :0x0
16:15:34: COPY flag                                     :0x1
16:15:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:34: File_Format                                   :0x0
16:15:34: CRC                                           :0x0
16:15:34: ####CSD Registe Values####  

16:15:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:34: ProductSerialNumber = 0x23482900
16:15:34: CardMaximumLBA      = 0x3b72400
16:15:34: CardCapacity        = 32G
16:15:34: Is card secure      = 0
16:15:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:35: [DVTCommonLib]###  LogicalWrite called
16:15:36: [ WriteLba(0x1A64048, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 907 ] 
16:15:36: [DVTCommonLib]###  LogicalWrite Completed 

16:15:36: [DVTCommonLib]###  LogicalRead called
16:15:38: [ ReadLba(0x1A64048, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 908 ] 
16:15:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:38: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 65 times 
16:15:38: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x41, 0x0) , Command count = 909 ] 
16:15:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:38: [DVTCommonLib]### Card response as High Capacity from card
16:15:38: [DVTCommonLib]### VOLA from card : 0x1
16:15:38: [DVTCommonLib]### CMD Pattern from card : 0x41
16:15:38: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 910 ] 
16:15:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDE0>, <py_sfcl.CommandDataDefinition object at 0x0661CA50>) , Command count = 911 ] 
16:15:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:38: [ SetCardRCA(0x1, 0xD555) , Command count = 912 ] 
16:15:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:38: [ SetBusWidth(0x4) , Command count = 913 ] 
16:15:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:38: ####CSD Registe 2.0 Values####
16:15:38: CSD_STRUCTURE                                 :0x1
16:15:38: Reserv1                                       :0x0
16:15:38: Time Access 1 TAAC                            :0xe
16:15:38: Time Access 2 NSAC*100                        :0x0
16:15:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:38: Card Command Classess CCC                     :0x5b5
16:15:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:38: DSR(driver stage register)  DSR_IMP           :0x0
16:15:38: Reserv2                                       :0x0
16:15:38: Device Size C_SIZE                            :0xedc8
16:15:38: Reserv3                                       :0x0
16:15:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:38: Reserv4                                       :0x0
16:15:38: Write Speed Factor R2W_FACTOR                 :0x2
16:15:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:38: FILE_FORMAT_GRP                               :0x0
16:15:38: COPY flag                                     :0x1
16:15:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:38: File_Format                                   :0x0
16:15:38: CRC                                           :0x0
16:15:38: ####CSD Registe Values####  

16:15:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:38: ProductSerialNumber = 0x23482900
16:15:38: CardMaximumLBA      = 0x3b72400
16:15:38: CardCapacity        = 32G
16:15:38: Is card secure      = 0
16:15:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:38: [DVTCommonLib]###  LogicalWrite called
16:15:40: [ WriteLba(0x52F39B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 914 ] 
16:15:40: [DVTCommonLib]###  LogicalWrite Completed 

16:15:40: [DVTCommonLib]###  LogicalRead called
16:15:41: [ ReadLba(0x52F39B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 915 ] 
16:15:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 66 times 
16:15:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x42, 0x0) , Command count = 916 ] 
16:15:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:41: [DVTCommonLib]### Card response as High Capacity from card
16:15:41: [DVTCommonLib]### VOLA from card : 0x1
16:15:41: [DVTCommonLib]### CMD Pattern from card : 0x42
16:15:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 917 ] 
16:15:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CE10>, <py_sfcl.CommandDataDefinition object at 0x0661CD80>) , Command count = 918 ] 
16:15:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:41: [ SetCardRCA(0x1, 0xD555) , Command count = 919 ] 
16:15:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:42: [ SetBusWidth(0x4) , Command count = 920 ] 
16:15:42: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:42: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:42: ####CSD Registe 2.0 Values####
16:15:42: CSD_STRUCTURE                                 :0x1
16:15:42: Reserv1                                       :0x0
16:15:42: Time Access 1 TAAC                            :0xe
16:15:42: Time Access 2 NSAC*100                        :0x0
16:15:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:42: Card Command Classess CCC                     :0x5b5
16:15:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:42: DSR(driver stage register)  DSR_IMP           :0x0
16:15:42: Reserv2                                       :0x0
16:15:42: Device Size C_SIZE                            :0xedc8
16:15:42: Reserv3                                       :0x0
16:15:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:42: Reserv4                                       :0x0
16:15:42: Write Speed Factor R2W_FACTOR                 :0x2
16:15:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:42: FILE_FORMAT_GRP                               :0x0
16:15:42: COPY flag                                     :0x1
16:15:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:42: File_Format                                   :0x0
16:15:42: CRC                                           :0x0
16:15:42: ####CSD Registe Values####  

16:15:42: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:42: ProductSerialNumber = 0x23482900
16:15:42: CardMaximumLBA      = 0x3b72400
16:15:42: CardCapacity        = 32G
16:15:42: Is card secure      = 0
16:15:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:42: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:42: [DVTCommonLib]###  LogicalWrite called
16:15:43: [ WriteLba(0x14A530F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 921 ] 
16:15:43: [DVTCommonLib]###  LogicalWrite Completed 

16:15:43: [DVTCommonLib]###  LogicalRead called
16:15:45: [ ReadLba(0x14A530F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 922 ] 
16:15:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 67 times 
16:15:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x43, 0x0) , Command count = 923 ] 
16:15:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:45: [DVTCommonLib]### Card response as High Capacity from card
16:15:45: [DVTCommonLib]### VOLA from card : 0x1
16:15:45: [DVTCommonLib]### CMD Pattern from card : 0x43
16:15:45: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 924 ] 
16:15:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CAB0>, <py_sfcl.CommandDataDefinition object at 0x0661C3C0>) , Command count = 925 ] 
16:15:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:45: [ SetCardRCA(0x1, 0xD555) , Command count = 926 ] 
16:15:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:45: [ SetBusWidth(0x4) , Command count = 927 ] 
16:15:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:45: ####CSD Registe 2.0 Values####
16:15:45: CSD_STRUCTURE                                 :0x1
16:15:45: Reserv1                                       :0x0
16:15:45: Time Access 1 TAAC                            :0xe
16:15:45: Time Access 2 NSAC*100                        :0x0
16:15:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:45: Card Command Classess CCC                     :0x5b5
16:15:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:45: DSR(driver stage register)  DSR_IMP           :0x0
16:15:45: Reserv2                                       :0x0
16:15:45: Device Size C_SIZE                            :0xedc8
16:15:45: Reserv3                                       :0x0
16:15:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:45: Reserv4                                       :0x0
16:15:45: Write Speed Factor R2W_FACTOR                 :0x2
16:15:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:45: FILE_FORMAT_GRP                               :0x0
16:15:45: COPY flag                                     :0x1
16:15:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:45: File_Format                                   :0x0
16:15:45: CRC                                           :0x0
16:15:45: ####CSD Registe Values####  

16:15:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:45: ProductSerialNumber = 0x23482900
16:15:45: CardMaximumLBA      = 0x3b72400
16:15:45: CardCapacity        = 32G
16:15:45: Is card secure      = 0
16:15:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:45: [DVTCommonLib]###  LogicalWrite called
16:15:47: [ WriteLba(0x120040F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 928 ] 
16:15:47: [DVTCommonLib]###  LogicalWrite Completed 

16:15:47: [DVTCommonLib]###  LogicalRead called
16:15:48: [ ReadLba(0x120040F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 929 ] 
16:15:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 68 times 
16:15:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x44, 0x0) , Command count = 930 ] 
16:15:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:48: [DVTCommonLib]### Card response as High Capacity from card
16:15:48: [DVTCommonLib]### VOLA from card : 0x1
16:15:48: [DVTCommonLib]### CMD Pattern from card : 0x44
16:15:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x06619F90>) , Command count = 931 ] 
16:15:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619930>, <py_sfcl.CommandDataDefinition object at 0x0661CB10>) , Command count = 932 ] 
16:15:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:48: [ SetCardRCA(0x1, 0xD555) , Command count = 933 ] 
16:15:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:49: [ SetBusWidth(0x4) , Command count = 934 ] 
16:15:49: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:49: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:49: ####CSD Registe 2.0 Values####
16:15:49: CSD_STRUCTURE                                 :0x1
16:15:49: Reserv1                                       :0x0
16:15:49: Time Access 1 TAAC                            :0xe
16:15:49: Time Access 2 NSAC*100                        :0x0
16:15:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:49: Card Command Classess CCC                     :0x5b5
16:15:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:49: DSR(driver stage register)  DSR_IMP           :0x0
16:15:49: Reserv2                                       :0x0
16:15:49: Device Size C_SIZE                            :0xedc8
16:15:49: Reserv3                                       :0x0
16:15:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:49: Reserv4                                       :0x0
16:15:49: Write Speed Factor R2W_FACTOR                 :0x2
16:15:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:49: FILE_FORMAT_GRP                               :0x0
16:15:49: COPY flag                                     :0x1
16:15:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:49: File_Format                                   :0x0
16:15:49: CRC                                           :0x0
16:15:49: ####CSD Registe Values####  

16:15:49: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:49: ProductSerialNumber = 0x23482900
16:15:49: CardMaximumLBA      = 0x3b72400
16:15:49: CardCapacity        = 32G
16:15:49: Is card secure      = 0
16:15:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:49: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:49: [DVTCommonLib]###  LogicalWrite called
16:15:50: [ WriteLba(0x2DC2D0B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 935 ] 
16:15:50: [DVTCommonLib]###  LogicalWrite Completed 

16:15:50: [DVTCommonLib]###  LogicalRead called
16:15:52: [ ReadLba(0x2DC2D0B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 936 ] 
16:15:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 69 times 
16:15:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x45, 0x0) , Command count = 937 ] 
16:15:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:52: [DVTCommonLib]### Card response as High Capacity from card
16:15:52: [DVTCommonLib]### VOLA from card : 0x1
16:15:52: [DVTCommonLib]### CMD Pattern from card : 0x45
16:15:52: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066196F0>, <py_sfcl.CommandDataDefinition object at 0x066194E0>) , Command count = 938 ] 
16:15:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619120>, <py_sfcl.CommandDataDefinition object at 0x06619660>) , Command count = 939 ] 
16:15:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:52: [ SetCardRCA(0x1, 0xD555) , Command count = 940 ] 
16:15:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:52: [ SetBusWidth(0x4) , Command count = 941 ] 
16:15:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:52: ####CSD Registe 2.0 Values####
16:15:52: CSD_STRUCTURE                                 :0x1
16:15:52: Reserv1                                       :0x0
16:15:52: Time Access 1 TAAC                            :0xe
16:15:52: Time Access 2 NSAC*100                        :0x0
16:15:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:52: Card Command Classess CCC                     :0x5b5
16:15:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:52: DSR(driver stage register)  DSR_IMP           :0x0
16:15:52: Reserv2                                       :0x0
16:15:52: Device Size C_SIZE                            :0xedc8
16:15:52: Reserv3                                       :0x0
16:15:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:52: Reserv4                                       :0x0
16:15:52: Write Speed Factor R2W_FACTOR                 :0x2
16:15:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:52: FILE_FORMAT_GRP                               :0x0
16:15:52: COPY flag                                     :0x1
16:15:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:52: File_Format                                   :0x0
16:15:52: CRC                                           :0x0
16:15:52: ####CSD Registe Values####  

16:15:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:52: ProductSerialNumber = 0x23482900
16:15:52: CardMaximumLBA      = 0x3b72400
16:15:52: CardCapacity        = 32G
16:15:52: Is card secure      = 0
16:15:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:52: [DVTCommonLib]###  LogicalWrite called
16:15:54: [ WriteLba(0x3A9EE3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 942 ] 
16:15:54: [DVTCommonLib]###  LogicalWrite Completed 

16:15:54: [DVTCommonLib]###  LogicalRead called
16:15:55: [ ReadLba(0x3A9EE3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 943 ] 
16:15:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 70 times 
16:15:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x46, 0x0) , Command count = 944 ] 
16:15:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:55: [DVTCommonLib]### Card response as High Capacity from card
16:15:55: [DVTCommonLib]### VOLA from card : 0x1
16:15:55: [DVTCommonLib]### CMD Pattern from card : 0x46
16:15:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066193F0>, <py_sfcl.CommandDataDefinition object at 0x06613C00>) , Command count = 945 ] 
16:15:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613F60>, <py_sfcl.CommandDataDefinition object at 0x06613B40>) , Command count = 946 ] 
16:15:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:55: [ SetCardRCA(0x1, 0xD555) , Command count = 947 ] 
16:15:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:56: [ SetBusWidth(0x4) , Command count = 948 ] 
16:15:56: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:56: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:56: ####CSD Registe 2.0 Values####
16:15:56: CSD_STRUCTURE                                 :0x1
16:15:56: Reserv1                                       :0x0
16:15:56: Time Access 1 TAAC                            :0xe
16:15:56: Time Access 2 NSAC*100                        :0x0
16:15:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:56: Card Command Classess CCC                     :0x5b5
16:15:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:56: DSR(driver stage register)  DSR_IMP           :0x0
16:15:56: Reserv2                                       :0x0
16:15:56: Device Size C_SIZE                            :0xedc8
16:15:56: Reserv3                                       :0x0
16:15:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:56: Reserv4                                       :0x0
16:15:56: Write Speed Factor R2W_FACTOR                 :0x2
16:15:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:56: FILE_FORMAT_GRP                               :0x0
16:15:56: COPY flag                                     :0x1
16:15:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:56: File_Format                                   :0x0
16:15:56: CRC                                           :0x0
16:15:56: ####CSD Registe Values####  

16:15:56: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:56: ProductSerialNumber = 0x23482900
16:15:56: CardMaximumLBA      = 0x3b72400
16:15:56: CardCapacity        = 32G
16:15:56: Is card secure      = 0
16:15:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:56: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:56: [DVTCommonLib]###  LogicalWrite called
16:15:57: [ WriteLba(0x1DC578, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 949 ] 
16:15:57: [DVTCommonLib]###  LogicalWrite Completed 

16:15:57: [DVTCommonLib]###  LogicalRead called
16:15:59: [ ReadLba(0x1DC578, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 950 ] 
16:15:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 71 times 
16:15:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x47, 0x0) , Command count = 951 ] 
16:15:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:15:59: [DVTCommonLib]### Card response as High Capacity from card
16:15:59: [DVTCommonLib]### VOLA from card : 0x1
16:15:59: [DVTCommonLib]### CMD Pattern from card : 0x47
16:15:59: [DVTCommonLib]### Reserved bits from card : 0x0
16:15:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613EA0>, <py_sfcl.CommandDataDefinition object at 0x06613D20>) , Command count = 952 ] 
16:15:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613E40>, <py_sfcl.CommandDataDefinition object at 0x06613BD0>) , Command count = 953 ] 
16:15:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:59: [ SetCardRCA(0x1, 0xD555) , Command count = 954 ] 
16:15:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:59: [ SetBusWidth(0x4) , Command count = 955 ] 
16:15:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:15:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:59: ####CSD Registe 2.0 Values####
16:15:59: CSD_STRUCTURE                                 :0x1
16:15:59: Reserv1                                       :0x0
16:15:59: Time Access 1 TAAC                            :0xe
16:15:59: Time Access 2 NSAC*100                        :0x0
16:15:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:59: Card Command Classess CCC                     :0x5b5
16:15:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:59: DSR(driver stage register)  DSR_IMP           :0x0
16:15:59: Reserv2                                       :0x0
16:15:59: Device Size C_SIZE                            :0xedc8
16:15:59: Reserv3                                       :0x0
16:15:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:59: Reserv4                                       :0x0
16:15:59: Write Speed Factor R2W_FACTOR                 :0x2
16:15:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:59: FILE_FORMAT_GRP                               :0x0
16:15:59: COPY flag                                     :0x1
16:15:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:59: File_Format                                   :0x0
16:15:59: CRC                                           :0x0
16:15:59: ####CSD Registe Values####  

16:15:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:15:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:59: ProductSerialNumber = 0x23482900
16:15:59: CardMaximumLBA      = 0x3b72400
16:15:59: CardCapacity        = 32G
16:15:59: Is card secure      = 0
16:15:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:15:59: [DVTCommonLib]###  LogicalWrite called
16:16:01: [ WriteLba(0x189D344, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 956 ] 
16:16:01: [DVTCommonLib]###  LogicalWrite Completed 

16:16:01: [DVTCommonLib]###  LogicalRead called
16:16:02: [ ReadLba(0x189D344, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 957 ] 
16:16:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 72 times 
16:16:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x48, 0x0) , Command count = 958 ] 
16:16:03: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:03: [DVTCommonLib]### Card response as High Capacity from card
16:16:03: [DVTCommonLib]### VOLA from card : 0x1
16:16:03: [DVTCommonLib]### CMD Pattern from card : 0x48
16:16:03: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066036F0>, <py_sfcl.CommandDataDefinition object at 0x06613DB0>) , Command count = 959 ] 
16:16:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603030>, <py_sfcl.CommandDataDefinition object at 0x06613F30>) , Command count = 960 ] 
16:16:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:03: [ SetCardRCA(0x1, 0xD555) , Command count = 961 ] 
16:16:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:03: [ SetBusWidth(0x4) , Command count = 962 ] 
16:16:03: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:03: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:03: ####CSD Registe 2.0 Values####
16:16:03: CSD_STRUCTURE                                 :0x1
16:16:03: Reserv1                                       :0x0
16:16:03: Time Access 1 TAAC                            :0xe
16:16:03: Time Access 2 NSAC*100                        :0x0
16:16:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:03: Card Command Classess CCC                     :0x5b5
16:16:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:03: DSR(driver stage register)  DSR_IMP           :0x0
16:16:03: Reserv2                                       :0x0
16:16:03: Device Size C_SIZE                            :0xedc8
16:16:03: Reserv3                                       :0x0
16:16:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:03: Reserv4                                       :0x0
16:16:03: Write Speed Factor R2W_FACTOR                 :0x2
16:16:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:03: FILE_FORMAT_GRP                               :0x0
16:16:03: COPY flag                                     :0x1
16:16:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:03: File_Format                                   :0x0
16:16:03: CRC                                           :0x0
16:16:03: ####CSD Registe Values####  

16:16:03: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:03: ProductSerialNumber = 0x23482900
16:16:03: CardMaximumLBA      = 0x3b72400
16:16:03: CardCapacity        = 32G
16:16:03: Is card secure      = 0
16:16:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:03: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:03: [DVTCommonLib]###  LogicalWrite called
16:16:04: [ WriteLba(0x29BC687, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 963 ] 
16:16:04: [DVTCommonLib]###  LogicalWrite Completed 

16:16:04: [DVTCommonLib]###  LogicalRead called
16:16:06: [ ReadLba(0x29BC687, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 964 ] 
16:16:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 73 times 
16:16:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x49, 0x0) , Command count = 965 ] 
16:16:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:06: [DVTCommonLib]### Card response as High Capacity from card
16:16:06: [DVTCommonLib]### VOLA from card : 0x1
16:16:06: [DVTCommonLib]### CMD Pattern from card : 0x49
16:16:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603F90>) , Command count = 966 ] 
16:16:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9180>, <py_sfcl.CommandDataDefinition object at 0x06603D50>) , Command count = 967 ] 
16:16:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:06: [ SetCardRCA(0x1, 0xD555) , Command count = 968 ] 
16:16:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:06: [ SetBusWidth(0x4) , Command count = 969 ] 
16:16:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:06: ####CSD Registe 2.0 Values####
16:16:06: CSD_STRUCTURE                                 :0x1
16:16:06: Reserv1                                       :0x0
16:16:06: Time Access 1 TAAC                            :0xe
16:16:06: Time Access 2 NSAC*100                        :0x0
16:16:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:06: Card Command Classess CCC                     :0x5b5
16:16:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:06: DSR(driver stage register)  DSR_IMP           :0x0
16:16:06: Reserv2                                       :0x0
16:16:06: Device Size C_SIZE                            :0xedc8
16:16:06: Reserv3                                       :0x0
16:16:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:06: Reserv4                                       :0x0
16:16:06: Write Speed Factor R2W_FACTOR                 :0x2
16:16:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:06: FILE_FORMAT_GRP                               :0x0
16:16:06: COPY flag                                     :0x1
16:16:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:06: File_Format                                   :0x0
16:16:06: CRC                                           :0x0
16:16:06: ####CSD Registe Values####  

16:16:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:06: ProductSerialNumber = 0x23482900
16:16:06: CardMaximumLBA      = 0x3b72400
16:16:06: CardCapacity        = 32G
16:16:06: Is card secure      = 0
16:16:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:06: [DVTCommonLib]###  LogicalWrite called
16:16:08: [ WriteLba(0x2041B32, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 970 ] 
16:16:08: [DVTCommonLib]###  LogicalWrite Completed 

16:16:08: [DVTCommonLib]###  LogicalRead called
16:16:09: [ ReadLba(0x2041B32, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 971 ] 
16:16:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 74 times 
16:16:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4A, 0x0) , Command count = 972 ] 
16:16:10: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:10: [DVTCommonLib]### Card response as High Capacity from card
16:16:10: [DVTCommonLib]### VOLA from card : 0x1
16:16:10: [DVTCommonLib]### CMD Pattern from card : 0x4A
16:16:10: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90F0>, <py_sfcl.CommandDataDefinition object at 0x066B9060>) , Command count = 973 ] 
16:16:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5C90>, <py_sfcl.CommandDataDefinition object at 0x066B5C60>) , Command count = 974 ] 
16:16:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:10: [ SetCardRCA(0x1, 0xD555) , Command count = 975 ] 
16:16:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:10: [ SetBusWidth(0x4) , Command count = 976 ] 
16:16:10: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:10: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:10: ####CSD Registe 2.0 Values####
16:16:10: CSD_STRUCTURE                                 :0x1
16:16:10: Reserv1                                       :0x0
16:16:10: Time Access 1 TAAC                            :0xe
16:16:10: Time Access 2 NSAC*100                        :0x0
16:16:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:10: Card Command Classess CCC                     :0x5b5
16:16:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:10: DSR(driver stage register)  DSR_IMP           :0x0
16:16:10: Reserv2                                       :0x0
16:16:10: Device Size C_SIZE                            :0xedc8
16:16:10: Reserv3                                       :0x0
16:16:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:10: Reserv4                                       :0x0
16:16:10: Write Speed Factor R2W_FACTOR                 :0x2
16:16:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:10: FILE_FORMAT_GRP                               :0x0
16:16:10: COPY flag                                     :0x1
16:16:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:10: File_Format                                   :0x0
16:16:10: CRC                                           :0x0
16:16:10: ####CSD Registe Values####  

16:16:10: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:10: ProductSerialNumber = 0x23482900
16:16:10: CardMaximumLBA      = 0x3b72400
16:16:10: CardCapacity        = 32G
16:16:10: Is card secure      = 0
16:16:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:10: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:10: [DVTCommonLib]###  LogicalWrite called
16:16:11: [ WriteLba(0x3A478B7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 977 ] 
16:16:11: [DVTCommonLib]###  LogicalWrite Completed 

16:16:11: [DVTCommonLib]###  LogicalRead called
16:16:13: [ ReadLba(0x3A478B7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 978 ] 
16:16:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 75 times 
16:16:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4B, 0x0) , Command count = 979 ] 
16:16:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:13: [DVTCommonLib]### Card response as High Capacity from card
16:16:13: [DVTCommonLib]### VOLA from card : 0x1
16:16:13: [DVTCommonLib]### CMD Pattern from card : 0x4B
16:16:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5ED0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 980 ] 
16:16:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90C0>, <py_sfcl.CommandDataDefinition object at 0x066B5B10>) , Command count = 981 ] 
16:16:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:13: [ SetCardRCA(0x1, 0xD555) , Command count = 982 ] 
16:16:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:13: [ SetBusWidth(0x4) , Command count = 983 ] 
16:16:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:13: ####CSD Registe 2.0 Values####
16:16:13: CSD_STRUCTURE                                 :0x1
16:16:13: Reserv1                                       :0x0
16:16:13: Time Access 1 TAAC                            :0xe
16:16:13: Time Access 2 NSAC*100                        :0x0
16:16:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:13: Card Command Classess CCC                     :0x5b5
16:16:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:13: DSR(driver stage register)  DSR_IMP           :0x0
16:16:13: Reserv2                                       :0x0
16:16:13: Device Size C_SIZE                            :0xedc8
16:16:13: Reserv3                                       :0x0
16:16:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:13: Reserv4                                       :0x0
16:16:13: Write Speed Factor R2W_FACTOR                 :0x2
16:16:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:13: FILE_FORMAT_GRP                               :0x0
16:16:13: COPY flag                                     :0x1
16:16:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:13: File_Format                                   :0x0
16:16:13: CRC                                           :0x0
16:16:13: ####CSD Registe Values####  

16:16:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:13: ProductSerialNumber = 0x23482900
16:16:13: CardMaximumLBA      = 0x3b72400
16:16:13: CardCapacity        = 32G
16:16:13: Is card secure      = 0
16:16:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:13: [DVTCommonLib]###  LogicalWrite called
16:16:15: [ WriteLba(0x15646D6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 984 ] 
16:16:15: [DVTCommonLib]###  LogicalWrite Completed 

16:16:15: [DVTCommonLib]###  LogicalRead called
16:16:16: [ ReadLba(0x15646D6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 985 ] 
16:16:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 76 times 
16:16:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4C, 0x0) , Command count = 986 ] 
16:16:17: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:17: [DVTCommonLib]### Card response as High Capacity from card
16:16:17: [DVTCommonLib]### VOLA from card : 0x1
16:16:17: [DVTCommonLib]### CMD Pattern from card : 0x4C
16:16:17: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 987 ] 
16:16:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B94B0>, <py_sfcl.CommandDataDefinition object at 0x066B5B70>) , Command count = 988 ] 
16:16:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:17: [ SetCardRCA(0x1, 0xD555) , Command count = 989 ] 
16:16:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:17: [ SetBusWidth(0x4) , Command count = 990 ] 
16:16:17: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:17: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:17: ####CSD Registe 2.0 Values####
16:16:17: CSD_STRUCTURE                                 :0x1
16:16:17: Reserv1                                       :0x0
16:16:17: Time Access 1 TAAC                            :0xe
16:16:17: Time Access 2 NSAC*100                        :0x0
16:16:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:17: Card Command Classess CCC                     :0x5b5
16:16:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:17: DSR(driver stage register)  DSR_IMP           :0x0
16:16:17: Reserv2                                       :0x0
16:16:17: Device Size C_SIZE                            :0xedc8
16:16:17: Reserv3                                       :0x0
16:16:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:17: Reserv4                                       :0x0
16:16:17: Write Speed Factor R2W_FACTOR                 :0x2
16:16:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:17: FILE_FORMAT_GRP                               :0x0
16:16:17: COPY flag                                     :0x1
16:16:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:17: File_Format                                   :0x0
16:16:17: CRC                                           :0x0
16:16:17: ####CSD Registe Values####  

16:16:17: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:17: ProductSerialNumber = 0x23482900
16:16:17: CardMaximumLBA      = 0x3b72400
16:16:17: CardCapacity        = 32G
16:16:17: Is card secure      = 0
16:16:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:17: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:17: [DVTCommonLib]###  LogicalWrite called
16:16:18: [ WriteLba(0x1CBD30E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 991 ] 
16:16:18: [DVTCommonLib]###  LogicalWrite Completed 

16:16:18: [DVTCommonLib]###  LogicalRead called
16:16:20: [ ReadLba(0x1CBD30E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 992 ] 
16:16:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 77 times 
16:16:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4D, 0x0) , Command count = 993 ] 
16:16:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:20: [DVTCommonLib]### Card response as High Capacity from card
16:16:20: [DVTCommonLib]### VOLA from card : 0x1
16:16:20: [DVTCommonLib]### CMD Pattern from card : 0x4D
16:16:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 994 ] 
16:16:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9930>, <py_sfcl.CommandDataDefinition object at 0x066B5B70>) , Command count = 995 ] 
16:16:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:20: [ SetCardRCA(0x1, 0xD555) , Command count = 996 ] 
16:16:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:20: [ SetBusWidth(0x4) , Command count = 997 ] 
16:16:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:20: ####CSD Registe 2.0 Values####
16:16:20: CSD_STRUCTURE                                 :0x1
16:16:20: Reserv1                                       :0x0
16:16:20: Time Access 1 TAAC                            :0xe
16:16:20: Time Access 2 NSAC*100                        :0x0
16:16:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:20: Card Command Classess CCC                     :0x5b5
16:16:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:20: DSR(driver stage register)  DSR_IMP           :0x0
16:16:20: Reserv2                                       :0x0
16:16:20: Device Size C_SIZE                            :0xedc8
16:16:20: Reserv3                                       :0x0
16:16:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:20: Reserv4                                       :0x0
16:16:20: Write Speed Factor R2W_FACTOR                 :0x2
16:16:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:20: FILE_FORMAT_GRP                               :0x0
16:16:20: COPY flag                                     :0x1
16:16:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:20: File_Format                                   :0x0
16:16:20: CRC                                           :0x0
16:16:20: ####CSD Registe Values####  

16:16:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:20: ProductSerialNumber = 0x23482900
16:16:20: CardMaximumLBA      = 0x3b72400
16:16:20: CardCapacity        = 32G
16:16:20: Is card secure      = 0
16:16:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:20: [DVTCommonLib]###  LogicalWrite called
16:16:22: [ WriteLba(0x347AB05, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 998 ] 
16:16:22: [DVTCommonLib]###  LogicalWrite Completed 

16:16:22: [DVTCommonLib]###  LogicalRead called
16:16:23: [ ReadLba(0x347AB05, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 999 ] 
16:16:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 78 times 
16:16:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4E, 0x0) , Command count = 1000 ] 
16:16:24: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:24: [DVTCommonLib]### Card response as High Capacity from card
16:16:24: [DVTCommonLib]### VOLA from card : 0x1
16:16:24: [DVTCommonLib]### CMD Pattern from card : 0x4E
16:16:24: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 1001 ] 
16:16:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9B40>, <py_sfcl.CommandDataDefinition object at 0x066B9A20>) , Command count = 1002 ] 
16:16:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1003 ] 
16:16:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:24: [ SetBusWidth(0x4) , Command count = 1004 ] 
16:16:24: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:24: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:24: ####CSD Registe 2.0 Values####
16:16:24: CSD_STRUCTURE                                 :0x1
16:16:24: Reserv1                                       :0x0
16:16:24: Time Access 1 TAAC                            :0xe
16:16:24: Time Access 2 NSAC*100                        :0x0
16:16:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:24: Card Command Classess CCC                     :0x5b5
16:16:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:24: DSR(driver stage register)  DSR_IMP           :0x0
16:16:24: Reserv2                                       :0x0
16:16:24: Device Size C_SIZE                            :0xedc8
16:16:24: Reserv3                                       :0x0
16:16:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:24: Reserv4                                       :0x0
16:16:24: Write Speed Factor R2W_FACTOR                 :0x2
16:16:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:24: FILE_FORMAT_GRP                               :0x0
16:16:24: COPY flag                                     :0x1
16:16:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:24: File_Format                                   :0x0
16:16:24: CRC                                           :0x0
16:16:24: ####CSD Registe Values####  

16:16:24: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:24: ProductSerialNumber = 0x23482900
16:16:24: CardMaximumLBA      = 0x3b72400
16:16:24: CardCapacity        = 32G
16:16:24: Is card secure      = 0
16:16:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:24: [DVTCommonLib]###  LogicalWrite called
16:16:25: [ WriteLba(0x658DDB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1005 ] 
16:16:25: [DVTCommonLib]###  LogicalWrite Completed 

16:16:25: [DVTCommonLib]###  LogicalRead called
16:16:27: [ ReadLba(0x658DDB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1006 ] 
16:16:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 79 times 
16:16:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x4F, 0x0) , Command count = 1007 ] 
16:16:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:27: [DVTCommonLib]### Card response as High Capacity from card
16:16:27: [DVTCommonLib]### VOLA from card : 0x1
16:16:27: [DVTCommonLib]### CMD Pattern from card : 0x4F
16:16:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9C30>, <py_sfcl.CommandDataDefinition object at 0x066B9A50>) , Command count = 1008 ] 
16:16:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0551EE10>, <py_sfcl.CommandDataDefinition object at 0x066B97B0>) , Command count = 1009 ] 
16:16:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1010 ] 
16:16:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:27: [ SetBusWidth(0x4) , Command count = 1011 ] 
16:16:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:27: ####CSD Registe 2.0 Values####
16:16:27: CSD_STRUCTURE                                 :0x1
16:16:27: Reserv1                                       :0x0
16:16:27: Time Access 1 TAAC                            :0xe
16:16:27: Time Access 2 NSAC*100                        :0x0
16:16:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:27: Card Command Classess CCC                     :0x5b5
16:16:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:27: DSR(driver stage register)  DSR_IMP           :0x0
16:16:27: Reserv2                                       :0x0
16:16:27: Device Size C_SIZE                            :0xedc8
16:16:27: Reserv3                                       :0x0
16:16:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:27: Reserv4                                       :0x0
16:16:27: Write Speed Factor R2W_FACTOR                 :0x2
16:16:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:27: FILE_FORMAT_GRP                               :0x0
16:16:27: COPY flag                                     :0x1
16:16:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:27: File_Format                                   :0x0
16:16:27: CRC                                           :0x0
16:16:27: ####CSD Registe Values####  

16:16:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:27: ProductSerialNumber = 0x23482900
16:16:27: CardMaximumLBA      = 0x3b72400
16:16:27: CardCapacity        = 32G
16:16:27: Is card secure      = 0
16:16:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:27: [DVTCommonLib]###  LogicalWrite called
16:16:29: [ WriteLba(0x39F461B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1012 ] 
16:16:29: [DVTCommonLib]###  LogicalWrite Completed 

16:16:29: [DVTCommonLib]###  LogicalRead called
16:16:30: [ ReadLba(0x39F461B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1013 ] 
16:16:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 80 times 
16:16:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x50, 0x0) , Command count = 1014 ] 
16:16:31: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:31: [DVTCommonLib]### Card response as High Capacity from card
16:16:31: [DVTCommonLib]### VOLA from card : 0x1
16:16:31: [DVTCommonLib]### CMD Pattern from card : 0x50
16:16:31: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 1015 ] 
16:16:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E210>, <py_sfcl.CommandDataDefinition object at 0x066B98D0>) , Command count = 1016 ] 
16:16:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1017 ] 
16:16:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:31: [ SetBusWidth(0x4) , Command count = 1018 ] 
16:16:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:31: ####CSD Registe 2.0 Values####
16:16:31: CSD_STRUCTURE                                 :0x1
16:16:31: Reserv1                                       :0x0
16:16:31: Time Access 1 TAAC                            :0xe
16:16:31: Time Access 2 NSAC*100                        :0x0
16:16:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:31: Card Command Classess CCC                     :0x5b5
16:16:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:31: DSR(driver stage register)  DSR_IMP           :0x0
16:16:31: Reserv2                                       :0x0
16:16:31: Device Size C_SIZE                            :0xedc8
16:16:31: Reserv3                                       :0x0
16:16:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:31: Reserv4                                       :0x0
16:16:31: Write Speed Factor R2W_FACTOR                 :0x2
16:16:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:31: FILE_FORMAT_GRP                               :0x0
16:16:31: COPY flag                                     :0x1
16:16:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:31: File_Format                                   :0x0
16:16:31: CRC                                           :0x0
16:16:31: ####CSD Registe Values####  

16:16:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:31: ProductSerialNumber = 0x23482900
16:16:31: CardMaximumLBA      = 0x3b72400
16:16:31: CardCapacity        = 32G
16:16:31: Is card secure      = 0
16:16:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:31: [DVTCommonLib]###  LogicalWrite called
16:16:32: [ WriteLba(0x1C94CC6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1019 ] 
16:16:32: [DVTCommonLib]###  LogicalWrite Completed 

16:16:32: [DVTCommonLib]###  LogicalRead called
16:16:34: [ ReadLba(0x1C94CC6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1020 ] 
16:16:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 81 times 
16:16:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x51, 0x0) , Command count = 1021 ] 
16:16:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:34: [DVTCommonLib]### Card response as High Capacity from card
16:16:34: [DVTCommonLib]### VOLA from card : 0x1
16:16:34: [DVTCommonLib]### CMD Pattern from card : 0x51
16:16:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 1022 ] 
16:16:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552EE70>, <py_sfcl.CommandDataDefinition object at 0x066B9EA0>) , Command count = 1023 ] 
16:16:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1024 ] 
16:16:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:34: [ SetBusWidth(0x4) , Command count = 1025 ] 
16:16:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:34: ####CSD Registe 2.0 Values####
16:16:34: CSD_STRUCTURE                                 :0x1
16:16:34: Reserv1                                       :0x0
16:16:34: Time Access 1 TAAC                            :0xe
16:16:34: Time Access 2 NSAC*100                        :0x0
16:16:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:34: Card Command Classess CCC                     :0x5b5
16:16:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:34: DSR(driver stage register)  DSR_IMP           :0x0
16:16:34: Reserv2                                       :0x0
16:16:34: Device Size C_SIZE                            :0xedc8
16:16:34: Reserv3                                       :0x0
16:16:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:34: Reserv4                                       :0x0
16:16:34: Write Speed Factor R2W_FACTOR                 :0x2
16:16:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:34: FILE_FORMAT_GRP                               :0x0
16:16:34: COPY flag                                     :0x1
16:16:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:34: File_Format                                   :0x0
16:16:34: CRC                                           :0x0
16:16:34: ####CSD Registe Values####  

16:16:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:34: ProductSerialNumber = 0x23482900
16:16:34: CardMaximumLBA      = 0x3b72400
16:16:34: CardCapacity        = 32G
16:16:34: Is card secure      = 0
16:16:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:34: [DVTCommonLib]###  LogicalWrite called
16:16:36: [ WriteLba(0x10259A8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1026 ] 
16:16:36: [DVTCommonLib]###  LogicalWrite Completed 

16:16:36: [DVTCommonLib]###  LogicalRead called
16:16:37: [ ReadLba(0x10259A8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1027 ] 
16:16:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 82 times 
16:16:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x52, 0x0) , Command count = 1028 ] 
16:16:38: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:38: [DVTCommonLib]### Card response as High Capacity from card
16:16:38: [DVTCommonLib]### VOLA from card : 0x1
16:16:38: [DVTCommonLib]### CMD Pattern from card : 0x52
16:16:38: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055409C0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 1029 ] 
16:16:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0553A900>, <py_sfcl.CommandDataDefinition object at 0x066B9C00>) , Command count = 1030 ] 
16:16:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1031 ] 
16:16:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:38: [ SetBusWidth(0x4) , Command count = 1032 ] 
16:16:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:38: ####CSD Registe 2.0 Values####
16:16:38: CSD_STRUCTURE                                 :0x1
16:16:38: Reserv1                                       :0x0
16:16:38: Time Access 1 TAAC                            :0xe
16:16:38: Time Access 2 NSAC*100                        :0x0
16:16:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:38: Card Command Classess CCC                     :0x5b5
16:16:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:38: DSR(driver stage register)  DSR_IMP           :0x0
16:16:38: Reserv2                                       :0x0
16:16:38: Device Size C_SIZE                            :0xedc8
16:16:38: Reserv3                                       :0x0
16:16:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:38: Reserv4                                       :0x0
16:16:38: Write Speed Factor R2W_FACTOR                 :0x2
16:16:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:38: FILE_FORMAT_GRP                               :0x0
16:16:38: COPY flag                                     :0x1
16:16:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:38: File_Format                                   :0x0
16:16:38: CRC                                           :0x0
16:16:38: ####CSD Registe Values####  

16:16:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:38: ProductSerialNumber = 0x23482900
16:16:38: CardMaximumLBA      = 0x3b72400
16:16:38: CardCapacity        = 32G
16:16:38: Is card secure      = 0
16:16:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:38: [DVTCommonLib]###  LogicalWrite called
16:16:39: [ WriteLba(0x729D1E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1033 ] 
16:16:39: [DVTCommonLib]###  LogicalWrite Completed 

16:16:39: [DVTCommonLib]###  LogicalRead called
16:16:41: [ ReadLba(0x729D1E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1034 ] 
16:16:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 83 times 
16:16:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x53, 0x0) , Command count = 1035 ] 
16:16:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:41: [DVTCommonLib]### Card response as High Capacity from card
16:16:41: [DVTCommonLib]### VOLA from card : 0x1
16:16:41: [DVTCommonLib]### CMD Pattern from card : 0x53
16:16:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9840>, <py_sfcl.CommandDataDefinition object at 0x066B9DB0>) , Command count = 1036 ] 
16:16:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540ED0>, <py_sfcl.CommandDataDefinition object at 0x066B9ED0>) , Command count = 1037 ] 
16:16:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1038 ] 
16:16:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:41: [ SetBusWidth(0x4) , Command count = 1039 ] 
16:16:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:41: ####CSD Registe 2.0 Values####
16:16:41: CSD_STRUCTURE                                 :0x1
16:16:41: Reserv1                                       :0x0
16:16:41: Time Access 1 TAAC                            :0xe
16:16:41: Time Access 2 NSAC*100                        :0x0
16:16:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:41: Card Command Classess CCC                     :0x5b5
16:16:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:41: DSR(driver stage register)  DSR_IMP           :0x0
16:16:41: Reserv2                                       :0x0
16:16:41: Device Size C_SIZE                            :0xedc8
16:16:41: Reserv3                                       :0x0
16:16:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:41: Reserv4                                       :0x0
16:16:41: Write Speed Factor R2W_FACTOR                 :0x2
16:16:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:41: FILE_FORMAT_GRP                               :0x0
16:16:41: COPY flag                                     :0x1
16:16:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:41: File_Format                                   :0x0
16:16:41: CRC                                           :0x0
16:16:41: ####CSD Registe Values####  

16:16:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:41: ProductSerialNumber = 0x23482900
16:16:41: CardMaximumLBA      = 0x3b72400
16:16:41: CardCapacity        = 32G
16:16:41: Is card secure      = 0
16:16:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:41: [DVTCommonLib]###  LogicalWrite called
16:16:43: [ WriteLba(0x5C42B8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1040 ] 
16:16:43: [DVTCommonLib]###  LogicalWrite Completed 

16:16:43: [DVTCommonLib]###  LogicalRead called
16:16:45: [ ReadLba(0x5C42B8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1041 ] 
16:16:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:45: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 84 times 
16:16:45: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x54, 0x0) , Command count = 1042 ] 
16:16:45: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:45: [DVTCommonLib]### Card response as High Capacity from card
16:16:45: [DVTCommonLib]### VOLA from card : 0x1
16:16:45: [DVTCommonLib]### CMD Pattern from card : 0x54
16:16:45: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482030>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 1043 ] 
16:16:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064822A0>, <py_sfcl.CommandDataDefinition object at 0x066B9F30>) , Command count = 1044 ] 
16:16:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1045 ] 
16:16:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:45: [ SetBusWidth(0x4) , Command count = 1046 ] 
16:16:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:45: ####CSD Registe 2.0 Values####
16:16:45: CSD_STRUCTURE                                 :0x1
16:16:45: Reserv1                                       :0x0
16:16:45: Time Access 1 TAAC                            :0xe
16:16:45: Time Access 2 NSAC*100                        :0x0
16:16:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:45: Card Command Classess CCC                     :0x5b5
16:16:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:45: DSR(driver stage register)  DSR_IMP           :0x0
16:16:45: Reserv2                                       :0x0
16:16:45: Device Size C_SIZE                            :0xedc8
16:16:45: Reserv3                                       :0x0
16:16:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:45: Reserv4                                       :0x0
16:16:45: Write Speed Factor R2W_FACTOR                 :0x2
16:16:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:45: FILE_FORMAT_GRP                               :0x0
16:16:45: COPY flag                                     :0x1
16:16:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:45: File_Format                                   :0x0
16:16:45: CRC                                           :0x0
16:16:45: ####CSD Registe Values####  

16:16:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:45: ProductSerialNumber = 0x23482900
16:16:45: CardMaximumLBA      = 0x3b72400
16:16:45: CardCapacity        = 32G
16:16:45: Is card secure      = 0
16:16:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:45: [DVTCommonLib]###  LogicalWrite called
16:16:46: [ WriteLba(0x4651B6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1047 ] 
16:16:46: [DVTCommonLib]###  LogicalWrite Completed 

16:16:46: [DVTCommonLib]###  LogicalRead called
16:16:48: [ ReadLba(0x4651B6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1048 ] 
16:16:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 85 times 
16:16:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x55, 0x0) , Command count = 1049 ] 
16:16:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:48: [DVTCommonLib]### Card response as High Capacity from card
16:16:48: [DVTCommonLib]### VOLA from card : 0x1
16:16:48: [DVTCommonLib]### CMD Pattern from card : 0x55
16:16:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066B96C0>) , Command count = 1050 ] 
16:16:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0655ABD0>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 1051 ] 
16:16:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1052 ] 
16:16:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:48: [ SetBusWidth(0x4) , Command count = 1053 ] 
16:16:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:48: ####CSD Registe 2.0 Values####
16:16:48: CSD_STRUCTURE                                 :0x1
16:16:48: Reserv1                                       :0x0
16:16:48: Time Access 1 TAAC                            :0xe
16:16:48: Time Access 2 NSAC*100                        :0x0
16:16:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:48: Card Command Classess CCC                     :0x5b5
16:16:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:48: DSR(driver stage register)  DSR_IMP           :0x0
16:16:48: Reserv2                                       :0x0
16:16:48: Device Size C_SIZE                            :0xedc8
16:16:48: Reserv3                                       :0x0
16:16:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:48: Reserv4                                       :0x0
16:16:48: Write Speed Factor R2W_FACTOR                 :0x2
16:16:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:48: FILE_FORMAT_GRP                               :0x0
16:16:48: COPY flag                                     :0x1
16:16:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:48: File_Format                                   :0x0
16:16:48: CRC                                           :0x0
16:16:48: ####CSD Registe Values####  

16:16:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:48: ProductSerialNumber = 0x23482900
16:16:48: CardMaximumLBA      = 0x3b72400
16:16:48: CardCapacity        = 32G
16:16:48: Is card secure      = 0
16:16:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:48: [DVTCommonLib]###  LogicalWrite called
16:16:50: [ WriteLba(0x2535CAB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1054 ] 
16:16:50: [DVTCommonLib]###  LogicalWrite Completed 

16:16:50: [DVTCommonLib]###  LogicalRead called
16:16:52: [ ReadLba(0x2535CAB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1055 ] 
16:16:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:52: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 86 times 
16:16:52: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x56, 0x0) , Command count = 1056 ] 
16:16:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:52: [DVTCommonLib]### Card response as High Capacity from card
16:16:52: [DVTCommonLib]### VOLA from card : 0x1
16:16:52: [DVTCommonLib]### CMD Pattern from card : 0x56
16:16:52: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 1057 ] 
16:16:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603480>, <py_sfcl.CommandDataDefinition object at 0x05540F90>) , Command count = 1058 ] 
16:16:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1059 ] 
16:16:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:52: [ SetBusWidth(0x4) , Command count = 1060 ] 
16:16:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:52: ####CSD Registe 2.0 Values####
16:16:52: CSD_STRUCTURE                                 :0x1
16:16:52: Reserv1                                       :0x0
16:16:52: Time Access 1 TAAC                            :0xe
16:16:52: Time Access 2 NSAC*100                        :0x0
16:16:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:52: Card Command Classess CCC                     :0x5b5
16:16:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:52: DSR(driver stage register)  DSR_IMP           :0x0
16:16:52: Reserv2                                       :0x0
16:16:52: Device Size C_SIZE                            :0xedc8
16:16:52: Reserv3                                       :0x0
16:16:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:52: Reserv4                                       :0x0
16:16:52: Write Speed Factor R2W_FACTOR                 :0x2
16:16:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:52: FILE_FORMAT_GRP                               :0x0
16:16:52: COPY flag                                     :0x1
16:16:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:52: File_Format                                   :0x0
16:16:52: CRC                                           :0x0
16:16:52: ####CSD Registe Values####  

16:16:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:52: ProductSerialNumber = 0x23482900
16:16:52: CardMaximumLBA      = 0x3b72400
16:16:52: CardCapacity        = 32G
16:16:52: Is card secure      = 0
16:16:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:52: [DVTCommonLib]###  LogicalWrite called
16:16:53: [ WriteLba(0x13BF8D1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1061 ] 
16:16:53: [DVTCommonLib]###  LogicalWrite Completed 

16:16:53: [DVTCommonLib]###  LogicalRead called
16:16:55: [ ReadLba(0x13BF8D1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1062 ] 
16:16:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 87 times 
16:16:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x57, 0x0) , Command count = 1063 ] 
16:16:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:55: [DVTCommonLib]### Card response as High Capacity from card
16:16:55: [DVTCommonLib]### VOLA from card : 0x1
16:16:55: [DVTCommonLib]### CMD Pattern from card : 0x57
16:16:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9570>, <py_sfcl.CommandDataDefinition object at 0x066037B0>) , Command count = 1064 ] 
16:16:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482630>, <py_sfcl.CommandDataDefinition object at 0x06603A20>) , Command count = 1065 ] 
16:16:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1066 ] 
16:16:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:55: [ SetBusWidth(0x4) , Command count = 1067 ] 
16:16:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:55: ####CSD Registe 2.0 Values####
16:16:55: CSD_STRUCTURE                                 :0x1
16:16:55: Reserv1                                       :0x0
16:16:55: Time Access 1 TAAC                            :0xe
16:16:55: Time Access 2 NSAC*100                        :0x0
16:16:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:55: Card Command Classess CCC                     :0x5b5
16:16:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:55: DSR(driver stage register)  DSR_IMP           :0x0
16:16:55: Reserv2                                       :0x0
16:16:55: Device Size C_SIZE                            :0xedc8
16:16:55: Reserv3                                       :0x0
16:16:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:55: Reserv4                                       :0x0
16:16:55: Write Speed Factor R2W_FACTOR                 :0x2
16:16:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:55: FILE_FORMAT_GRP                               :0x0
16:16:55: COPY flag                                     :0x1
16:16:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:55: File_Format                                   :0x0
16:16:55: CRC                                           :0x0
16:16:55: ####CSD Registe Values####  

16:16:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:55: ProductSerialNumber = 0x23482900
16:16:55: CardMaximumLBA      = 0x3b72400
16:16:55: CardCapacity        = 32G
16:16:55: Is card secure      = 0
16:16:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:55: [DVTCommonLib]###  LogicalWrite called
16:16:57: [ WriteLba(0x9C15DB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1068 ] 
16:16:57: [DVTCommonLib]###  LogicalWrite Completed 

16:16:57: [DVTCommonLib]###  LogicalRead called
16:16:59: [ ReadLba(0x9C15DB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1069 ] 
16:16:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:59: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 88 times 
16:16:59: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x58, 0x0) , Command count = 1070 ] 
16:16:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:16:59: [DVTCommonLib]### Card response as High Capacity from card
16:16:59: [DVTCommonLib]### VOLA from card : 0x1
16:16:59: [DVTCommonLib]### CMD Pattern from card : 0x58
16:16:59: [DVTCommonLib]### Reserved bits from card : 0x0
16:16:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035A0>, <py_sfcl.CommandDataDefinition object at 0x06603750>) , Command count = 1071 ] 
16:16:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603DE0>, <py_sfcl.CommandDataDefinition object at 0x06603ED0>) , Command count = 1072 ] 
16:16:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1073 ] 
16:16:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:59: [ SetBusWidth(0x4) , Command count = 1074 ] 
16:16:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:16:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:59: ####CSD Registe 2.0 Values####
16:16:59: CSD_STRUCTURE                                 :0x1
16:16:59: Reserv1                                       :0x0
16:16:59: Time Access 1 TAAC                            :0xe
16:16:59: Time Access 2 NSAC*100                        :0x0
16:16:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:59: Card Command Classess CCC                     :0x5b5
16:16:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:59: DSR(driver stage register)  DSR_IMP           :0x0
16:16:59: Reserv2                                       :0x0
16:16:59: Device Size C_SIZE                            :0xedc8
16:16:59: Reserv3                                       :0x0
16:16:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:59: Reserv4                                       :0x0
16:16:59: Write Speed Factor R2W_FACTOR                 :0x2
16:16:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:59: FILE_FORMAT_GRP                               :0x0
16:16:59: COPY flag                                     :0x1
16:16:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:59: File_Format                                   :0x0
16:16:59: CRC                                           :0x0
16:16:59: ####CSD Registe Values####  

16:16:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:16:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:59: ProductSerialNumber = 0x23482900
16:16:59: CardMaximumLBA      = 0x3b72400
16:16:59: CardCapacity        = 32G
16:16:59: Is card secure      = 0
16:16:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:16:59: [DVTCommonLib]###  LogicalWrite called
16:17:01: [ WriteLba(0x2F46328, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1075 ] 
16:17:01: [DVTCommonLib]###  LogicalWrite Completed 

16:17:01: [DVTCommonLib]###  LogicalRead called
16:17:02: [ ReadLba(0x2F46328, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1076 ] 
16:17:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 89 times 
16:17:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x59, 0x0) , Command count = 1077 ] 
16:17:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:02: [DVTCommonLib]### Card response as High Capacity from card
16:17:02: [DVTCommonLib]### VOLA from card : 0x1
16:17:02: [DVTCommonLib]### CMD Pattern from card : 0x59
16:17:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x06603A80>) , Command count = 1078 ] 
16:17:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C1B0>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 1079 ] 
16:17:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1080 ] 
16:17:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:02: [ SetBusWidth(0x4) , Command count = 1081 ] 
16:17:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:02: ####CSD Registe 2.0 Values####
16:17:02: CSD_STRUCTURE                                 :0x1
16:17:02: Reserv1                                       :0x0
16:17:02: Time Access 1 TAAC                            :0xe
16:17:02: Time Access 2 NSAC*100                        :0x0
16:17:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:02: Card Command Classess CCC                     :0x5b5
16:17:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:02: DSR(driver stage register)  DSR_IMP           :0x0
16:17:02: Reserv2                                       :0x0
16:17:02: Device Size C_SIZE                            :0xedc8
16:17:02: Reserv3                                       :0x0
16:17:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:02: Reserv4                                       :0x0
16:17:02: Write Speed Factor R2W_FACTOR                 :0x2
16:17:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:02: FILE_FORMAT_GRP                               :0x0
16:17:02: COPY flag                                     :0x1
16:17:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:02: File_Format                                   :0x0
16:17:02: CRC                                           :0x0
16:17:02: ####CSD Registe Values####  

16:17:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:02: ProductSerialNumber = 0x23482900
16:17:02: CardMaximumLBA      = 0x3b72400
16:17:02: CardCapacity        = 32G
16:17:02: Is card secure      = 0
16:17:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:02: [DVTCommonLib]###  LogicalWrite called
16:17:04: [ WriteLba(0xBC31BB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1082 ] 
16:17:04: [DVTCommonLib]###  LogicalWrite Completed 

16:17:04: [DVTCommonLib]###  LogicalRead called
16:17:06: [ ReadLba(0xBC31BB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1083 ] 
16:17:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:06: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 90 times 
16:17:06: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5A, 0x0) , Command count = 1084 ] 
16:17:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:06: [DVTCommonLib]### Card response as High Capacity from card
16:17:06: [DVTCommonLib]### VOLA from card : 0x1
16:17:06: [DVTCommonLib]### CMD Pattern from card : 0x5A
16:17:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x06603CF0>) , Command count = 1085 ] 
16:17:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C210>, <py_sfcl.CommandDataDefinition object at 0x06603510>) , Command count = 1086 ] 
16:17:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1087 ] 
16:17:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:06: [ SetBusWidth(0x4) , Command count = 1088 ] 
16:17:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:06: ####CSD Registe 2.0 Values####
16:17:06: CSD_STRUCTURE                                 :0x1
16:17:06: Reserv1                                       :0x0
16:17:06: Time Access 1 TAAC                            :0xe
16:17:06: Time Access 2 NSAC*100                        :0x0
16:17:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:06: Card Command Classess CCC                     :0x5b5
16:17:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:06: DSR(driver stage register)  DSR_IMP           :0x0
16:17:06: Reserv2                                       :0x0
16:17:06: Device Size C_SIZE                            :0xedc8
16:17:06: Reserv3                                       :0x0
16:17:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:06: Reserv4                                       :0x0
16:17:06: Write Speed Factor R2W_FACTOR                 :0x2
16:17:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:06: FILE_FORMAT_GRP                               :0x0
16:17:06: COPY flag                                     :0x1
16:17:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:06: File_Format                                   :0x0
16:17:06: CRC                                           :0x0
16:17:06: ####CSD Registe Values####  

16:17:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:06: ProductSerialNumber = 0x23482900
16:17:06: CardMaximumLBA      = 0x3b72400
16:17:06: CardCapacity        = 32G
16:17:06: Is card secure      = 0
16:17:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:06: [DVTCommonLib]###  LogicalWrite called
16:17:08: [ WriteLba(0xAA8CD9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1089 ] 
16:17:08: [DVTCommonLib]###  LogicalWrite Completed 

16:17:08: [DVTCommonLib]###  LogicalRead called
16:17:09: [ ReadLba(0xAA8CD9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1090 ] 
16:17:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 91 times 
16:17:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5B, 0x0) , Command count = 1091 ] 
16:17:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:09: [DVTCommonLib]### Card response as High Capacity from card
16:17:09: [DVTCommonLib]### VOLA from card : 0x1
16:17:09: [DVTCommonLib]### CMD Pattern from card : 0x5B
16:17:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613B10>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 1092 ] 
16:17:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613A80>, <py_sfcl.CommandDataDefinition object at 0x06603510>) , Command count = 1093 ] 
16:17:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1094 ] 
16:17:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:09: [ SetBusWidth(0x4) , Command count = 1095 ] 
16:17:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:09: ####CSD Registe 2.0 Values####
16:17:09: CSD_STRUCTURE                                 :0x1
16:17:09: Reserv1                                       :0x0
16:17:09: Time Access 1 TAAC                            :0xe
16:17:09: Time Access 2 NSAC*100                        :0x0
16:17:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:09: Card Command Classess CCC                     :0x5b5
16:17:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:09: DSR(driver stage register)  DSR_IMP           :0x0
16:17:09: Reserv2                                       :0x0
16:17:09: Device Size C_SIZE                            :0xedc8
16:17:09: Reserv3                                       :0x0
16:17:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:09: Reserv4                                       :0x0
16:17:09: Write Speed Factor R2W_FACTOR                 :0x2
16:17:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:09: FILE_FORMAT_GRP                               :0x0
16:17:09: COPY flag                                     :0x1
16:17:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:09: File_Format                                   :0x0
16:17:09: CRC                                           :0x0
16:17:09: ####CSD Registe Values####  

16:17:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:09: ProductSerialNumber = 0x23482900
16:17:09: CardMaximumLBA      = 0x3b72400
16:17:09: CardCapacity        = 32G
16:17:09: Is card secure      = 0
16:17:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:09: [DVTCommonLib]###  LogicalWrite called
16:17:11: [ WriteLba(0x585767, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1096 ] 
16:17:11: [DVTCommonLib]###  LogicalWrite Completed 

16:17:11: [DVTCommonLib]###  LogicalRead called
16:17:13: [ ReadLba(0x585767, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1097 ] 
16:17:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:13: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 92 times 
16:17:13: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5C, 0x0) , Command count = 1098 ] 
16:17:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:13: [DVTCommonLib]### Card response as High Capacity from card
16:17:13: [DVTCommonLib]### VOLA from card : 0x1
16:17:13: [DVTCommonLib]### CMD Pattern from card : 0x5C
16:17:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482780>, <py_sfcl.CommandDataDefinition object at 0x06613CC0>) , Command count = 1099 ] 
16:17:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619060>, <py_sfcl.CommandDataDefinition object at 0x06613AB0>) , Command count = 1100 ] 
16:17:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1101 ] 
16:17:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:13: [ SetBusWidth(0x4) , Command count = 1102 ] 
16:17:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:13: ####CSD Registe 2.0 Values####
16:17:13: CSD_STRUCTURE                                 :0x1
16:17:13: Reserv1                                       :0x0
16:17:13: Time Access 1 TAAC                            :0xe
16:17:13: Time Access 2 NSAC*100                        :0x0
16:17:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:13: Card Command Classess CCC                     :0x5b5
16:17:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:13: DSR(driver stage register)  DSR_IMP           :0x0
16:17:13: Reserv2                                       :0x0
16:17:13: Device Size C_SIZE                            :0xedc8
16:17:13: Reserv3                                       :0x0
16:17:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:13: Reserv4                                       :0x0
16:17:13: Write Speed Factor R2W_FACTOR                 :0x2
16:17:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:13: FILE_FORMAT_GRP                               :0x0
16:17:13: COPY flag                                     :0x1
16:17:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:13: File_Format                                   :0x0
16:17:13: CRC                                           :0x0
16:17:13: ####CSD Registe Values####  

16:17:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:13: ProductSerialNumber = 0x23482900
16:17:13: CardMaximumLBA      = 0x3b72400
16:17:13: CardCapacity        = 32G
16:17:13: Is card secure      = 0
16:17:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:13: [DVTCommonLib]###  LogicalWrite called
16:17:15: [ WriteLba(0x71A833, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1103 ] 
16:17:15: [DVTCommonLib]###  LogicalWrite Completed 

16:17:15: [DVTCommonLib]###  LogicalRead called
16:17:16: [ ReadLba(0x71A833, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1104 ] 
16:17:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 93 times 
16:17:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5D, 0x0) , Command count = 1105 ] 
16:17:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:16: [DVTCommonLib]### Card response as High Capacity from card
16:17:16: [DVTCommonLib]### VOLA from card : 0x1
16:17:16: [DVTCommonLib]### CMD Pattern from card : 0x5D
16:17:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 1106 ] 
16:17:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619450>, <py_sfcl.CommandDataDefinition object at 0x06619150>) , Command count = 1107 ] 
16:17:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1108 ] 
16:17:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:16: [ SetBusWidth(0x4) , Command count = 1109 ] 
16:17:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:16: ####CSD Registe 2.0 Values####
16:17:16: CSD_STRUCTURE                                 :0x1
16:17:16: Reserv1                                       :0x0
16:17:16: Time Access 1 TAAC                            :0xe
16:17:16: Time Access 2 NSAC*100                        :0x0
16:17:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:16: Card Command Classess CCC                     :0x5b5
16:17:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:16: DSR(driver stage register)  DSR_IMP           :0x0
16:17:16: Reserv2                                       :0x0
16:17:16: Device Size C_SIZE                            :0xedc8
16:17:16: Reserv3                                       :0x0
16:17:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:16: Reserv4                                       :0x0
16:17:16: Write Speed Factor R2W_FACTOR                 :0x2
16:17:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:16: FILE_FORMAT_GRP                               :0x0
16:17:16: COPY flag                                     :0x1
16:17:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:16: File_Format                                   :0x0
16:17:16: CRC                                           :0x0
16:17:16: ####CSD Registe Values####  

16:17:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:16: ProductSerialNumber = 0x23482900
16:17:16: CardMaximumLBA      = 0x3b72400
16:17:16: CardCapacity        = 32G
16:17:16: Is card secure      = 0
16:17:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:16: [DVTCommonLib]###  LogicalWrite called
16:17:18: [ WriteLba(0x71F102, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1110 ] 
16:17:18: [DVTCommonLib]###  LogicalWrite Completed 

16:17:18: [DVTCommonLib]###  LogicalRead called
16:17:20: [ ReadLba(0x71F102, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1111 ] 
16:17:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 94 times 
16:17:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5E, 0x0) , Command count = 1112 ] 
16:17:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:20: [DVTCommonLib]### Card response as High Capacity from card
16:17:20: [DVTCommonLib]### VOLA from card : 0x1
16:17:20: [DVTCommonLib]### CMD Pattern from card : 0x5E
16:17:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 1113 ] 
16:17:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619840>, <py_sfcl.CommandDataDefinition object at 0x06619420>) , Command count = 1114 ] 
16:17:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1115 ] 
16:17:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:20: [ SetBusWidth(0x4) , Command count = 1116 ] 
16:17:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:20: ####CSD Registe 2.0 Values####
16:17:20: CSD_STRUCTURE                                 :0x1
16:17:20: Reserv1                                       :0x0
16:17:20: Time Access 1 TAAC                            :0xe
16:17:20: Time Access 2 NSAC*100                        :0x0
16:17:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:20: Card Command Classess CCC                     :0x5b5
16:17:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:20: DSR(driver stage register)  DSR_IMP           :0x0
16:17:20: Reserv2                                       :0x0
16:17:20: Device Size C_SIZE                            :0xedc8
16:17:20: Reserv3                                       :0x0
16:17:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:20: Reserv4                                       :0x0
16:17:20: Write Speed Factor R2W_FACTOR                 :0x2
16:17:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:20: FILE_FORMAT_GRP                               :0x0
16:17:20: COPY flag                                     :0x1
16:17:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:20: File_Format                                   :0x0
16:17:20: CRC                                           :0x0
16:17:20: ####CSD Registe Values####  

16:17:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:20: ProductSerialNumber = 0x23482900
16:17:20: CardMaximumLBA      = 0x3b72400
16:17:20: CardCapacity        = 32G
16:17:20: Is card secure      = 0
16:17:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:20: [DVTCommonLib]###  LogicalWrite called
16:17:22: [ WriteLba(0x359CA30, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1117 ] 
16:17:22: [DVTCommonLib]###  LogicalWrite Completed 

16:17:22: [DVTCommonLib]###  LogicalRead called
16:17:23: [ ReadLba(0x359CA30, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1118 ] 
16:17:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 95 times 
16:17:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x5F, 0x0) , Command count = 1119 ] 
16:17:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:23: [DVTCommonLib]### Card response as High Capacity from card
16:17:23: [DVTCommonLib]### VOLA from card : 0x1
16:17:23: [DVTCommonLib]### CMD Pattern from card : 0x5F
16:17:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 1120 ] 
16:17:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619A80>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 1121 ] 
16:17:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1122 ] 
16:17:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:23: [ SetBusWidth(0x4) , Command count = 1123 ] 
16:17:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:23: ####CSD Registe 2.0 Values####
16:17:23: CSD_STRUCTURE                                 :0x1
16:17:23: Reserv1                                       :0x0
16:17:23: Time Access 1 TAAC                            :0xe
16:17:23: Time Access 2 NSAC*100                        :0x0
16:17:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:23: Card Command Classess CCC                     :0x5b5
16:17:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:23: DSR(driver stage register)  DSR_IMP           :0x0
16:17:23: Reserv2                                       :0x0
16:17:23: Device Size C_SIZE                            :0xedc8
16:17:23: Reserv3                                       :0x0
16:17:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:23: Reserv4                                       :0x0
16:17:23: Write Speed Factor R2W_FACTOR                 :0x2
16:17:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:23: FILE_FORMAT_GRP                               :0x0
16:17:23: COPY flag                                     :0x1
16:17:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:23: File_Format                                   :0x0
16:17:23: CRC                                           :0x0
16:17:23: ####CSD Registe Values####  

16:17:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:23: ProductSerialNumber = 0x23482900
16:17:23: CardMaximumLBA      = 0x3b72400
16:17:24: CardCapacity        = 32G
16:17:24: Is card secure      = 0
16:17:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:24: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:24: [DVTCommonLib]###  LogicalWrite called
16:17:25: [ WriteLba(0x2FA0FA2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1124 ] 
16:17:25: [DVTCommonLib]###  LogicalWrite Completed 

16:17:25: [DVTCommonLib]###  LogicalRead called
16:17:27: [ ReadLba(0x2FA0FA2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1125 ] 
16:17:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 96 times 
16:17:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x60, 0x0) , Command count = 1126 ] 
16:17:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:27: [DVTCommonLib]### Card response as High Capacity from card
16:17:27: [DVTCommonLib]### VOLA from card : 0x1
16:17:27: [DVTCommonLib]### CMD Pattern from card : 0x60
16:17:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619030>, <py_sfcl.CommandDataDefinition object at 0x06619E10>) , Command count = 1127 ] 
16:17:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619FC0>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 1128 ] 
16:17:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1129 ] 
16:17:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:27: [ SetBusWidth(0x4) , Command count = 1130 ] 
16:17:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:27: ####CSD Registe 2.0 Values####
16:17:27: CSD_STRUCTURE                                 :0x1
16:17:27: Reserv1                                       :0x0
16:17:27: Time Access 1 TAAC                            :0xe
16:17:27: Time Access 2 NSAC*100                        :0x0
16:17:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:27: Card Command Classess CCC                     :0x5b5
16:17:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:27: DSR(driver stage register)  DSR_IMP           :0x0
16:17:27: Reserv2                                       :0x0
16:17:27: Device Size C_SIZE                            :0xedc8
16:17:27: Reserv3                                       :0x0
16:17:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:27: Reserv4                                       :0x0
16:17:27: Write Speed Factor R2W_FACTOR                 :0x2
16:17:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:27: FILE_FORMAT_GRP                               :0x0
16:17:27: COPY flag                                     :0x1
16:17:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:27: File_Format                                   :0x0
16:17:27: CRC                                           :0x0
16:17:27: ####CSD Registe Values####  

16:17:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:27: ProductSerialNumber = 0x23482900
16:17:27: CardMaximumLBA      = 0x3b72400
16:17:27: CardCapacity        = 32G
16:17:27: Is card secure      = 0
16:17:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:27: [DVTCommonLib]###  LogicalWrite called
16:17:29: [ WriteLba(0x6F90ED, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1131 ] 
16:17:29: [DVTCommonLib]###  LogicalWrite Completed 

16:17:29: [DVTCommonLib]###  LogicalRead called
16:17:30: [ ReadLba(0x6F90ED, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1132 ] 
16:17:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 97 times 
16:17:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x61, 0x0) , Command count = 1133 ] 
16:17:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:30: [DVTCommonLib]### Card response as High Capacity from card
16:17:30: [DVTCommonLib]### VOLA from card : 0x1
16:17:30: [DVTCommonLib]### CMD Pattern from card : 0x61
16:17:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C1E0>, <py_sfcl.CommandDataDefinition object at 0x06619E70>) , Command count = 1134 ] 
16:17:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C0C0>, <py_sfcl.CommandDataDefinition object at 0x06619990>) , Command count = 1135 ] 
16:17:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1136 ] 
16:17:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:31: [ SetBusWidth(0x4) , Command count = 1137 ] 
16:17:31: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:31: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:31: ####CSD Registe 2.0 Values####
16:17:31: CSD_STRUCTURE                                 :0x1
16:17:31: Reserv1                                       :0x0
16:17:31: Time Access 1 TAAC                            :0xe
16:17:31: Time Access 2 NSAC*100                        :0x0
16:17:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:31: Card Command Classess CCC                     :0x5b5
16:17:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:31: DSR(driver stage register)  DSR_IMP           :0x0
16:17:31: Reserv2                                       :0x0
16:17:31: Device Size C_SIZE                            :0xedc8
16:17:31: Reserv3                                       :0x0
16:17:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:31: Reserv4                                       :0x0
16:17:31: Write Speed Factor R2W_FACTOR                 :0x2
16:17:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:31: FILE_FORMAT_GRP                               :0x0
16:17:31: COPY flag                                     :0x1
16:17:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:31: File_Format                                   :0x0
16:17:31: CRC                                           :0x0
16:17:31: ####CSD Registe Values####  

16:17:31: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:31: ProductSerialNumber = 0x23482900
16:17:31: CardMaximumLBA      = 0x3b72400
16:17:31: CardCapacity        = 32G
16:17:31: Is card secure      = 0
16:17:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:31: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:31: [DVTCommonLib]###  LogicalWrite called
16:17:32: [ WriteLba(0xD4FFFB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1138 ] 
16:17:32: [DVTCommonLib]###  LogicalWrite Completed 

16:17:32: [DVTCommonLib]###  LogicalRead called
16:17:34: [ ReadLba(0xD4FFFB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1139 ] 
16:17:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 98 times 
16:17:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x62, 0x0) , Command count = 1140 ] 
16:17:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:34: [DVTCommonLib]### Card response as High Capacity from card
16:17:34: [DVTCommonLib]### VOLA from card : 0x1
16:17:34: [DVTCommonLib]### CMD Pattern from card : 0x62
16:17:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C6C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 1141 ] 
16:17:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C540>, <py_sfcl.CommandDataDefinition object at 0x06619C60>) , Command count = 1142 ] 
16:17:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1143 ] 
16:17:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:34: [ SetBusWidth(0x4) , Command count = 1144 ] 
16:17:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:34: ####CSD Registe 2.0 Values####
16:17:34: CSD_STRUCTURE                                 :0x1
16:17:34: Reserv1                                       :0x0
16:17:34: Time Access 1 TAAC                            :0xe
16:17:34: Time Access 2 NSAC*100                        :0x0
16:17:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:34: Card Command Classess CCC                     :0x5b5
16:17:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:34: DSR(driver stage register)  DSR_IMP           :0x0
16:17:34: Reserv2                                       :0x0
16:17:34: Device Size C_SIZE                            :0xedc8
16:17:34: Reserv3                                       :0x0
16:17:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:34: Reserv4                                       :0x0
16:17:34: Write Speed Factor R2W_FACTOR                 :0x2
16:17:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:34: FILE_FORMAT_GRP                               :0x0
16:17:34: COPY flag                                     :0x1
16:17:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:34: File_Format                                   :0x0
16:17:34: CRC                                           :0x0
16:17:34: ####CSD Registe Values####  

16:17:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:34: ProductSerialNumber = 0x23482900
16:17:34: CardMaximumLBA      = 0x3b72400
16:17:34: CardCapacity        = 32G
16:17:34: Is card secure      = 0
16:17:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:34: [DVTCommonLib]###  LogicalWrite called
16:17:36: [ WriteLba(0x347521D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1145 ] 
16:17:36: [DVTCommonLib]###  LogicalWrite Completed 

16:17:36: [DVTCommonLib]###  LogicalRead called
16:17:37: [ ReadLba(0x347521D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1146 ] 
16:17:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 99 times 
16:17:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x63, 0x0) , Command count = 1147 ] 
16:17:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:37: [DVTCommonLib]### Card response as High Capacity from card
16:17:37: [DVTCommonLib]### VOLA from card : 0x1
16:17:37: [DVTCommonLib]### CMD Pattern from card : 0x63
16:17:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C570>, <py_sfcl.CommandDataDefinition object at 0x0661C1B0>) , Command count = 1148 ] 
16:17:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C9C0>, <py_sfcl.CommandDataDefinition object at 0x0661C180>) , Command count = 1149 ] 
16:17:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1150 ] 
16:17:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:38: [ SetBusWidth(0x4) , Command count = 1151 ] 
16:17:38: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:38: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:38: ####CSD Registe 2.0 Values####
16:17:38: CSD_STRUCTURE                                 :0x1
16:17:38: Reserv1                                       :0x0
16:17:38: Time Access 1 TAAC                            :0xe
16:17:38: Time Access 2 NSAC*100                        :0x0
16:17:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:38: Card Command Classess CCC                     :0x5b5
16:17:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:38: DSR(driver stage register)  DSR_IMP           :0x0
16:17:38: Reserv2                                       :0x0
16:17:38: Device Size C_SIZE                            :0xedc8
16:17:38: Reserv3                                       :0x0
16:17:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:38: Reserv4                                       :0x0
16:17:38: Write Speed Factor R2W_FACTOR                 :0x2
16:17:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:38: FILE_FORMAT_GRP                               :0x0
16:17:38: COPY flag                                     :0x1
16:17:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:38: File_Format                                   :0x0
16:17:38: CRC                                           :0x0
16:17:38: ####CSD Registe Values####  

16:17:38: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:38: ProductSerialNumber = 0x23482900
16:17:38: CardMaximumLBA      = 0x3b72400
16:17:38: CardCapacity        = 32G
16:17:38: Is card secure      = 0
16:17:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:38: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:38: [DVTCommonLib]###  LogicalWrite called
16:17:39: [ WriteLba(0xB7A796, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1152 ] 
16:17:39: [DVTCommonLib]###  LogicalWrite Completed 

16:17:39: [DVTCommonLib]###  LogicalRead called
16:17:41: [ ReadLba(0xB7A796, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1153 ] 
16:17:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 100 times 
16:17:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x64, 0x0) , Command count = 1154 ] 
16:17:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:41: [DVTCommonLib]### Card response as High Capacity from card
16:17:41: [DVTCommonLib]### VOLA from card : 0x1
16:17:41: [DVTCommonLib]### CMD Pattern from card : 0x64
16:17:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 1155 ] 
16:17:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CA80>, <py_sfcl.CommandDataDefinition object at 0x0661C300>) , Command count = 1156 ] 
16:17:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1157 ] 
16:17:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:41: [ SetBusWidth(0x4) , Command count = 1158 ] 
16:17:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:41: ####CSD Registe 2.0 Values####
16:17:41: CSD_STRUCTURE                                 :0x1
16:17:41: Reserv1                                       :0x0
16:17:41: Time Access 1 TAAC                            :0xe
16:17:41: Time Access 2 NSAC*100                        :0x0
16:17:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:41: Card Command Classess CCC                     :0x5b5
16:17:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:41: DSR(driver stage register)  DSR_IMP           :0x0
16:17:41: Reserv2                                       :0x0
16:17:41: Device Size C_SIZE                            :0xedc8
16:17:41: Reserv3                                       :0x0
16:17:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:41: Reserv4                                       :0x0
16:17:41: Write Speed Factor R2W_FACTOR                 :0x2
16:17:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:41: FILE_FORMAT_GRP                               :0x0
16:17:41: COPY flag                                     :0x1
16:17:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:41: File_Format                                   :0x0
16:17:41: CRC                                           :0x0
16:17:41: ####CSD Registe Values####  

16:17:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:41: ProductSerialNumber = 0x23482900
16:17:41: CardMaximumLBA      = 0x3b72400
16:17:41: CardCapacity        = 32G
16:17:41: Is card secure      = 0
16:17:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:41: [DVTCommonLib]###  LogicalWrite called
16:17:43: [ WriteLba(0x2B24BA5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1159 ] 
16:17:43: [DVTCommonLib]###  LogicalWrite Completed 

16:17:43: [DVTCommonLib]###  LogicalRead called
16:17:44: [ ReadLba(0x2B24BA5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1160 ] 
16:17:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 101 times 
16:17:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x65, 0x0) , Command count = 1161 ] 
16:17:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:44: [DVTCommonLib]### Card response as High Capacity from card
16:17:44: [DVTCommonLib]### VOLA from card : 0x1
16:17:44: [DVTCommonLib]### CMD Pattern from card : 0x65
16:17:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 1162 ] 
16:17:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CE70>, <py_sfcl.CommandDataDefinition object at 0x0661C3F0>) , Command count = 1163 ] 
16:17:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1164 ] 
16:17:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:45: [ SetBusWidth(0x4) , Command count = 1165 ] 
16:17:45: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:45: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:45: ####CSD Registe 2.0 Values####
16:17:45: CSD_STRUCTURE                                 :0x1
16:17:45: Reserv1                                       :0x0
16:17:45: Time Access 1 TAAC                            :0xe
16:17:45: Time Access 2 NSAC*100                        :0x0
16:17:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:45: Card Command Classess CCC                     :0x5b5
16:17:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:45: DSR(driver stage register)  DSR_IMP           :0x0
16:17:45: Reserv2                                       :0x0
16:17:45: Device Size C_SIZE                            :0xedc8
16:17:45: Reserv3                                       :0x0
16:17:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:45: Reserv4                                       :0x0
16:17:45: Write Speed Factor R2W_FACTOR                 :0x2
16:17:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:45: FILE_FORMAT_GRP                               :0x0
16:17:45: COPY flag                                     :0x1
16:17:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:45: File_Format                                   :0x0
16:17:45: CRC                                           :0x0
16:17:45: ####CSD Registe Values####  

16:17:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:45: ProductSerialNumber = 0x23482900
16:17:45: CardMaximumLBA      = 0x3b72400
16:17:45: CardCapacity        = 32G
16:17:45: Is card secure      = 0
16:17:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:45: [DVTCommonLib]###  LogicalWrite called
16:17:46: [ WriteLba(0x1B9FBDD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1166 ] 
16:17:46: [DVTCommonLib]###  LogicalWrite Completed 

16:17:46: [DVTCommonLib]###  LogicalRead called
16:17:48: [ ReadLba(0x1B9FBDD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1167 ] 
16:17:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 102 times 
16:17:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x66, 0x0) , Command count = 1168 ] 
16:17:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:48: [DVTCommonLib]### Card response as High Capacity from card
16:17:48: [DVTCommonLib]### VOLA from card : 0x1
16:17:48: [DVTCommonLib]### CMD Pattern from card : 0x66
16:17:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 1169 ] 
16:17:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF60>, <py_sfcl.CommandDataDefinition object at 0x0661CA50>) , Command count = 1170 ] 
16:17:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1171 ] 
16:17:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:48: [ SetBusWidth(0x4) , Command count = 1172 ] 
16:17:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:48: ####CSD Registe 2.0 Values####
16:17:48: CSD_STRUCTURE                                 :0x1
16:17:48: Reserv1                                       :0x0
16:17:48: Time Access 1 TAAC                            :0xe
16:17:48: Time Access 2 NSAC*100                        :0x0
16:17:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:48: Card Command Classess CCC                     :0x5b5
16:17:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:48: DSR(driver stage register)  DSR_IMP           :0x0
16:17:48: Reserv2                                       :0x0
16:17:48: Device Size C_SIZE                            :0xedc8
16:17:48: Reserv3                                       :0x0
16:17:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:48: Reserv4                                       :0x0
16:17:48: Write Speed Factor R2W_FACTOR                 :0x2
16:17:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:48: FILE_FORMAT_GRP                               :0x0
16:17:48: COPY flag                                     :0x1
16:17:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:48: File_Format                                   :0x0
16:17:48: CRC                                           :0x0
16:17:48: ####CSD Registe Values####  

16:17:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:48: ProductSerialNumber = 0x23482900
16:17:48: CardMaximumLBA      = 0x3b72400
16:17:48: CardCapacity        = 32G
16:17:48: Is card secure      = 0
16:17:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:48: [DVTCommonLib]###  LogicalWrite called
16:17:50: [ WriteLba(0xC3AF5B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1173 ] 
16:17:50: [DVTCommonLib]###  LogicalWrite Completed 

16:17:50: [DVTCommonLib]###  LogicalRead called
16:17:51: [ ReadLba(0xC3AF5B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1174 ] 
16:17:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 103 times 
16:17:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x67, 0x0) , Command count = 1175 ] 
16:17:52: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:52: [DVTCommonLib]### Card response as High Capacity from card
16:17:52: [DVTCommonLib]### VOLA from card : 0x1
16:17:52: [DVTCommonLib]### CMD Pattern from card : 0x67
16:17:52: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 1176 ] 
16:17:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CB70>, <py_sfcl.CommandDataDefinition object at 0x0661CD80>) , Command count = 1177 ] 
16:17:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1178 ] 
16:17:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:52: [ SetBusWidth(0x4) , Command count = 1179 ] 
16:17:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:52: ####CSD Registe 2.0 Values####
16:17:52: CSD_STRUCTURE                                 :0x1
16:17:52: Reserv1                                       :0x0
16:17:52: Time Access 1 TAAC                            :0xe
16:17:52: Time Access 2 NSAC*100                        :0x0
16:17:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:52: Card Command Classess CCC                     :0x5b5
16:17:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:52: DSR(driver stage register)  DSR_IMP           :0x0
16:17:52: Reserv2                                       :0x0
16:17:52: Device Size C_SIZE                            :0xedc8
16:17:52: Reserv3                                       :0x0
16:17:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:52: Reserv4                                       :0x0
16:17:52: Write Speed Factor R2W_FACTOR                 :0x2
16:17:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:52: FILE_FORMAT_GRP                               :0x0
16:17:52: COPY flag                                     :0x1
16:17:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:52: File_Format                                   :0x0
16:17:52: CRC                                           :0x0
16:17:52: ####CSD Registe Values####  

16:17:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:52: ProductSerialNumber = 0x23482900
16:17:52: CardMaximumLBA      = 0x3b72400
16:17:52: CardCapacity        = 32G
16:17:52: Is card secure      = 0
16:17:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:52: [DVTCommonLib]###  LogicalWrite called
16:17:53: [ WriteLba(0x31EB7B5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1180 ] 
16:17:53: [DVTCommonLib]###  LogicalWrite Completed 

16:17:53: [DVTCommonLib]###  LogicalRead called
16:17:55: [ ReadLba(0x31EB7B5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1181 ] 
16:17:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 104 times 
16:17:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x68, 0x0) , Command count = 1182 ] 
16:17:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:55: [DVTCommonLib]### Card response as High Capacity from card
16:17:55: [DVTCommonLib]### VOLA from card : 0x1
16:17:55: [DVTCommonLib]### CMD Pattern from card : 0x68
16:17:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x06619F90>) , Command count = 1183 ] 
16:17:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619630>, <py_sfcl.CommandDataDefinition object at 0x0661CAB0>) , Command count = 1184 ] 
16:17:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1185 ] 
16:17:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:55: [ SetBusWidth(0x4) , Command count = 1186 ] 
16:17:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:55: ####CSD Registe 2.0 Values####
16:17:55: CSD_STRUCTURE                                 :0x1
16:17:55: Reserv1                                       :0x0
16:17:55: Time Access 1 TAAC                            :0xe
16:17:55: Time Access 2 NSAC*100                        :0x0
16:17:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:55: Card Command Classess CCC                     :0x5b5
16:17:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:55: DSR(driver stage register)  DSR_IMP           :0x0
16:17:55: Reserv2                                       :0x0
16:17:55: Device Size C_SIZE                            :0xedc8
16:17:55: Reserv3                                       :0x0
16:17:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:55: Reserv4                                       :0x0
16:17:55: Write Speed Factor R2W_FACTOR                 :0x2
16:17:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:55: FILE_FORMAT_GRP                               :0x0
16:17:55: COPY flag                                     :0x1
16:17:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:55: File_Format                                   :0x0
16:17:55: CRC                                           :0x0
16:17:55: ####CSD Registe Values####  

16:17:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:55: ProductSerialNumber = 0x23482900
16:17:55: CardMaximumLBA      = 0x3b72400
16:17:55: CardCapacity        = 32G
16:17:55: Is card secure      = 0
16:17:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:55: [DVTCommonLib]###  LogicalWrite called
16:17:57: [ WriteLba(0x16CCC6E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1187 ] 
16:17:57: [DVTCommonLib]###  LogicalWrite Completed 

16:17:57: [DVTCommonLib]###  LogicalRead called
16:17:58: [ ReadLba(0x16CCC6E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1188 ] 
16:17:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 105 times 
16:17:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x69, 0x0) , Command count = 1189 ] 
16:17:59: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:17:59: [DVTCommonLib]### Card response as High Capacity from card
16:17:59: [DVTCommonLib]### VOLA from card : 0x1
16:17:59: [DVTCommonLib]### CMD Pattern from card : 0x69
16:17:59: [DVTCommonLib]### Reserved bits from card : 0x0
16:17:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CB10>, <py_sfcl.CommandDataDefinition object at 0x066196F0>) , Command count = 1190 ] 
16:17:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066191B0>, <py_sfcl.CommandDataDefinition object at 0x06619540>) , Command count = 1191 ] 
16:17:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1192 ] 
16:17:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:59: [ SetBusWidth(0x4) , Command count = 1193 ] 
16:17:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:17:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:59: ####CSD Registe 2.0 Values####
16:17:59: CSD_STRUCTURE                                 :0x1
16:17:59: Reserv1                                       :0x0
16:17:59: Time Access 1 TAAC                            :0xe
16:17:59: Time Access 2 NSAC*100                        :0x0
16:17:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:59: Card Command Classess CCC                     :0x5b5
16:17:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:59: DSR(driver stage register)  DSR_IMP           :0x0
16:17:59: Reserv2                                       :0x0
16:17:59: Device Size C_SIZE                            :0xedc8
16:17:59: Reserv3                                       :0x0
16:17:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:59: Reserv4                                       :0x0
16:17:59: Write Speed Factor R2W_FACTOR                 :0x2
16:17:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:59: FILE_FORMAT_GRP                               :0x0
16:17:59: COPY flag                                     :0x1
16:17:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:59: File_Format                                   :0x0
16:17:59: CRC                                           :0x0
16:17:59: ####CSD Registe Values####  

16:17:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:17:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:59: ProductSerialNumber = 0x23482900
16:17:59: CardMaximumLBA      = 0x3b72400
16:17:59: CardCapacity        = 32G
16:17:59: Is card secure      = 0
16:17:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:17:59: [DVTCommonLib]###  LogicalWrite called
16:18:00: [ WriteLba(0xF9DA51, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1194 ] 
16:18:00: [DVTCommonLib]###  LogicalWrite Completed 

16:18:00: [DVTCommonLib]###  LogicalRead called
16:18:02: [ ReadLba(0xF9DA51, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1195 ] 
16:18:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 106 times 
16:18:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6A, 0x0) , Command count = 1196 ] 
16:18:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:02: [DVTCommonLib]### Card response as High Capacity from card
16:18:02: [DVTCommonLib]### VOLA from card : 0x1
16:18:02: [DVTCommonLib]### CMD Pattern from card : 0x6A
16:18:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5A0>, <py_sfcl.CommandDataDefinition object at 0x066193F0>) , Command count = 1197 ] 
16:18:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C930>, <py_sfcl.CommandDataDefinition object at 0x06613C00>) , Command count = 1198 ] 
16:18:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1199 ] 
16:18:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:02: [ SetBusWidth(0x4) , Command count = 1200 ] 
16:18:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:02: ####CSD Registe 2.0 Values####
16:18:02: CSD_STRUCTURE                                 :0x1
16:18:02: Reserv1                                       :0x0
16:18:02: Time Access 1 TAAC                            :0xe
16:18:02: Time Access 2 NSAC*100                        :0x0
16:18:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:02: Card Command Classess CCC                     :0x5b5
16:18:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:02: DSR(driver stage register)  DSR_IMP           :0x0
16:18:02: Reserv2                                       :0x0
16:18:02: Device Size C_SIZE                            :0xedc8
16:18:02: Reserv3                                       :0x0
16:18:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:02: Reserv4                                       :0x0
16:18:02: Write Speed Factor R2W_FACTOR                 :0x2
16:18:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:02: FILE_FORMAT_GRP                               :0x0
16:18:02: COPY flag                                     :0x1
16:18:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:02: File_Format                                   :0x0
16:18:02: CRC                                           :0x0
16:18:02: ####CSD Registe Values####  

16:18:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:02: ProductSerialNumber = 0x23482900
16:18:02: CardMaximumLBA      = 0x3b72400
16:18:02: CardCapacity        = 32G
16:18:02: Is card secure      = 0
16:18:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:02: [DVTCommonLib]###  LogicalWrite called
16:18:04: [ WriteLba(0x21F779, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1201 ] 
16:18:04: [DVTCommonLib]###  LogicalWrite Completed 

16:18:04: [DVTCommonLib]###  LogicalRead called
16:18:05: [ ReadLba(0x21F779, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1202 ] 
16:18:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 107 times 
16:18:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6B, 0x0) , Command count = 1203 ] 
16:18:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:06: [DVTCommonLib]### Card response as High Capacity from card
16:18:06: [DVTCommonLib]### VOLA from card : 0x1
16:18:06: [DVTCommonLib]### CMD Pattern from card : 0x6B
16:18:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613EA0>, <py_sfcl.CommandDataDefinition object at 0x06613D20>) , Command count = 1204 ] 
16:18:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613E70>, <py_sfcl.CommandDataDefinition object at 0x06613B40>) , Command count = 1205 ] 
16:18:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1206 ] 
16:18:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:06: [ SetBusWidth(0x4) , Command count = 1207 ] 
16:18:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:06: ####CSD Registe 2.0 Values####
16:18:06: CSD_STRUCTURE                                 :0x1
16:18:06: Reserv1                                       :0x0
16:18:06: Time Access 1 TAAC                            :0xe
16:18:06: Time Access 2 NSAC*100                        :0x0
16:18:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:06: Card Command Classess CCC                     :0x5b5
16:18:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:06: DSR(driver stage register)  DSR_IMP           :0x0
16:18:06: Reserv2                                       :0x0
16:18:06: Device Size C_SIZE                            :0xedc8
16:18:06: Reserv3                                       :0x0
16:18:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:06: Reserv4                                       :0x0
16:18:06: Write Speed Factor R2W_FACTOR                 :0x2
16:18:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:06: FILE_FORMAT_GRP                               :0x0
16:18:06: COPY flag                                     :0x1
16:18:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:06: File_Format                                   :0x0
16:18:06: CRC                                           :0x0
16:18:06: ####CSD Registe Values####  

16:18:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:06: ProductSerialNumber = 0x23482900
16:18:06: CardMaximumLBA      = 0x3b72400
16:18:06: CardCapacity        = 32G
16:18:06: Is card secure      = 0
16:18:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:06: [DVTCommonLib]###  LogicalWrite called
16:18:07: [ WriteLba(0x66E650, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1208 ] 
16:18:07: [DVTCommonLib]###  LogicalWrite Completed 

16:18:07: [DVTCommonLib]###  LogicalRead called
16:18:09: [ ReadLba(0x66E650, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1209 ] 
16:18:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 108 times 
16:18:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6C, 0x0) , Command count = 1210 ] 
16:18:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:09: [DVTCommonLib]### Card response as High Capacity from card
16:18:09: [DVTCommonLib]### VOLA from card : 0x1
16:18:09: [DVTCommonLib]### CMD Pattern from card : 0x6C
16:18:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066036F0>, <py_sfcl.CommandDataDefinition object at 0x06613DB0>) , Command count = 1211 ] 
16:18:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603C90>, <py_sfcl.CommandDataDefinition object at 0x06613BD0>) , Command count = 1212 ] 
16:18:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1213 ] 
16:18:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:09: [ SetBusWidth(0x4) , Command count = 1214 ] 
16:18:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:09: ####CSD Registe 2.0 Values####
16:18:09: CSD_STRUCTURE                                 :0x1
16:18:09: Reserv1                                       :0x0
16:18:09: Time Access 1 TAAC                            :0xe
16:18:09: Time Access 2 NSAC*100                        :0x0
16:18:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:09: Card Command Classess CCC                     :0x5b5
16:18:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:09: DSR(driver stage register)  DSR_IMP           :0x0
16:18:09: Reserv2                                       :0x0
16:18:09: Device Size C_SIZE                            :0xedc8
16:18:09: Reserv3                                       :0x0
16:18:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:09: Reserv4                                       :0x0
16:18:09: Write Speed Factor R2W_FACTOR                 :0x2
16:18:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:09: FILE_FORMAT_GRP                               :0x0
16:18:09: COPY flag                                     :0x1
16:18:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:09: File_Format                                   :0x0
16:18:09: CRC                                           :0x0
16:18:09: ####CSD Registe Values####  

16:18:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:09: ProductSerialNumber = 0x23482900
16:18:09: CardMaximumLBA      = 0x3b72400
16:18:09: CardCapacity        = 32G
16:18:09: Is card secure      = 0
16:18:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:09: [DVTCommonLib]###  LogicalWrite called
16:18:11: [ WriteLba(0x5409B5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1215 ] 
16:18:11: [DVTCommonLib]###  LogicalWrite Completed 

16:18:11: [DVTCommonLib]###  LogicalRead called
16:18:12: [ ReadLba(0x5409B5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1216 ] 
16:18:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 109 times 
16:18:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6D, 0x0) , Command count = 1217 ] 
16:18:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:13: [DVTCommonLib]### Card response as High Capacity from card
16:18:13: [DVTCommonLib]### VOLA from card : 0x1
16:18:13: [DVTCommonLib]### CMD Pattern from card : 0x6D
16:18:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603F90>) , Command count = 1218 ] 
16:18:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B92D0>, <py_sfcl.CommandDataDefinition object at 0x06603030>) , Command count = 1219 ] 
16:18:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1220 ] 
16:18:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:13: [ SetBusWidth(0x4) , Command count = 1221 ] 
16:18:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:13: ####CSD Registe 2.0 Values####
16:18:13: CSD_STRUCTURE                                 :0x1
16:18:13: Reserv1                                       :0x0
16:18:13: Time Access 1 TAAC                            :0xe
16:18:13: Time Access 2 NSAC*100                        :0x0
16:18:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:13: Card Command Classess CCC                     :0x5b5
16:18:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:13: DSR(driver stage register)  DSR_IMP           :0x0
16:18:13: Reserv2                                       :0x0
16:18:13: Device Size C_SIZE                            :0xedc8
16:18:13: Reserv3                                       :0x0
16:18:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:13: Reserv4                                       :0x0
16:18:13: Write Speed Factor R2W_FACTOR                 :0x2
16:18:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:13: FILE_FORMAT_GRP                               :0x0
16:18:13: COPY flag                                     :0x1
16:18:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:13: File_Format                                   :0x0
16:18:13: CRC                                           :0x0
16:18:13: ####CSD Registe Values####  

16:18:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:13: ProductSerialNumber = 0x23482900
16:18:13: CardMaximumLBA      = 0x3b72400
16:18:13: CardCapacity        = 32G
16:18:13: Is card secure      = 0
16:18:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:13: [DVTCommonLib]###  LogicalWrite called
16:18:14: [ WriteLba(0x3B344B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1222 ] 
16:18:14: [DVTCommonLib]###  LogicalWrite Completed 

16:18:14: [DVTCommonLib]###  LogicalRead called
16:18:16: [ ReadLba(0x3B344B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1223 ] 
16:18:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 110 times 
16:18:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6E, 0x0) , Command count = 1224 ] 
16:18:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:16: [DVTCommonLib]### Card response as High Capacity from card
16:18:16: [DVTCommonLib]### VOLA from card : 0x1
16:18:16: [DVTCommonLib]### CMD Pattern from card : 0x6E
16:18:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90F0>, <py_sfcl.CommandDataDefinition object at 0x066B9060>) , Command count = 1225 ] 
16:18:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603630>, <py_sfcl.CommandDataDefinition object at 0x066B5990>) , Command count = 1226 ] 
16:18:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1227 ] 
16:18:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:16: [ SetBusWidth(0x4) , Command count = 1228 ] 
16:18:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:16: ####CSD Registe 2.0 Values####
16:18:16: CSD_STRUCTURE                                 :0x1
16:18:16: Reserv1                                       :0x0
16:18:16: Time Access 1 TAAC                            :0xe
16:18:16: Time Access 2 NSAC*100                        :0x0
16:18:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:16: Card Command Classess CCC                     :0x5b5
16:18:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:16: DSR(driver stage register)  DSR_IMP           :0x0
16:18:16: Reserv2                                       :0x0
16:18:16: Device Size C_SIZE                            :0xedc8
16:18:16: Reserv3                                       :0x0
16:18:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:16: Reserv4                                       :0x0
16:18:16: Write Speed Factor R2W_FACTOR                 :0x2
16:18:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:16: FILE_FORMAT_GRP                               :0x0
16:18:16: COPY flag                                     :0x1
16:18:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:16: File_Format                                   :0x0
16:18:16: CRC                                           :0x0
16:18:16: ####CSD Registe Values####  

16:18:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:16: ProductSerialNumber = 0x23482900
16:18:16: CardMaximumLBA      = 0x3b72400
16:18:16: CardCapacity        = 32G
16:18:16: Is card secure      = 0
16:18:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:16: [DVTCommonLib]###  LogicalWrite called
16:18:18: [ WriteLba(0x262F014, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1229 ] 
16:18:18: [DVTCommonLib]###  LogicalWrite Completed 

16:18:18: [DVTCommonLib]###  LogicalRead called
16:18:19: [ ReadLba(0x262F014, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1230 ] 
16:18:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 111 times 
16:18:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x6F, 0x0) , Command count = 1231 ] 
16:18:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:20: [DVTCommonLib]### Card response as High Capacity from card
16:18:20: [DVTCommonLib]### VOLA from card : 0x1
16:18:20: [DVTCommonLib]### CMD Pattern from card : 0x6F
16:18:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B5ED0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 1232 ] 
16:18:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9150>, <py_sfcl.CommandDataDefinition object at 0x066B5C60>) , Command count = 1233 ] 
16:18:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1234 ] 
16:18:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:20: [ SetBusWidth(0x4) , Command count = 1235 ] 
16:18:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:20: ####CSD Registe 2.0 Values####
16:18:20: CSD_STRUCTURE                                 :0x1
16:18:20: Reserv1                                       :0x0
16:18:20: Time Access 1 TAAC                            :0xe
16:18:20: Time Access 2 NSAC*100                        :0x0
16:18:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:20: Card Command Classess CCC                     :0x5b5
16:18:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:20: DSR(driver stage register)  DSR_IMP           :0x0
16:18:20: Reserv2                                       :0x0
16:18:20: Device Size C_SIZE                            :0xedc8
16:18:20: Reserv3                                       :0x0
16:18:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:20: Reserv4                                       :0x0
16:18:20: Write Speed Factor R2W_FACTOR                 :0x2
16:18:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:20: FILE_FORMAT_GRP                               :0x0
16:18:20: COPY flag                                     :0x1
16:18:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:20: File_Format                                   :0x0
16:18:20: CRC                                           :0x0
16:18:20: ####CSD Registe Values####  

16:18:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:20: ProductSerialNumber = 0x23482900
16:18:20: CardMaximumLBA      = 0x3b72400
16:18:20: CardCapacity        = 32G
16:18:20: Is card secure      = 0
16:18:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:20: [DVTCommonLib]###  LogicalWrite called
16:18:21: [ WriteLba(0x18358B3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1236 ] 
16:18:21: [DVTCommonLib]###  LogicalWrite Completed 

16:18:21: [DVTCommonLib]###  LogicalRead called
16:18:23: [ ReadLba(0x18358B3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1237 ] 
16:18:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 112 times 
16:18:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x70, 0x0) , Command count = 1238 ] 
16:18:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:23: [DVTCommonLib]### Card response as High Capacity from card
16:18:23: [DVTCommonLib]### VOLA from card : 0x1
16:18:23: [DVTCommonLib]### CMD Pattern from card : 0x70
16:18:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 1239 ] 
16:18:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B91B0>, <py_sfcl.CommandDataDefinition object at 0x066B5C90>) , Command count = 1240 ] 
16:18:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1241 ] 
16:18:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:23: [ SetBusWidth(0x4) , Command count = 1242 ] 
16:18:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:23: ####CSD Registe 2.0 Values####
16:18:23: CSD_STRUCTURE                                 :0x1
16:18:23: Reserv1                                       :0x0
16:18:23: Time Access 1 TAAC                            :0xe
16:18:23: Time Access 2 NSAC*100                        :0x0
16:18:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:23: Card Command Classess CCC                     :0x5b5
16:18:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:23: DSR(driver stage register)  DSR_IMP           :0x0
16:18:23: Reserv2                                       :0x0
16:18:23: Device Size C_SIZE                            :0xedc8
16:18:23: Reserv3                                       :0x0
16:18:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:23: Reserv4                                       :0x0
16:18:23: Write Speed Factor R2W_FACTOR                 :0x2
16:18:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:23: FILE_FORMAT_GRP                               :0x0
16:18:23: COPY flag                                     :0x1
16:18:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:23: File_Format                                   :0x0
16:18:23: CRC                                           :0x0
16:18:23: ####CSD Registe Values####  

16:18:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:23: ProductSerialNumber = 0x23482900
16:18:23: CardMaximumLBA      = 0x3b72400
16:18:23: CardCapacity        = 32G
16:18:23: Is card secure      = 0
16:18:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:23: [DVTCommonLib]###  LogicalWrite called
16:18:25: [ WriteLba(0x36ED1F1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1243 ] 
16:18:25: [DVTCommonLib]###  LogicalWrite Completed 

16:18:25: [DVTCommonLib]###  LogicalRead called
16:18:26: [ ReadLba(0x36ED1F1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1244 ] 
16:18:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 113 times 
16:18:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x71, 0x0) , Command count = 1245 ] 
16:18:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:27: [DVTCommonLib]### Card response as High Capacity from card
16:18:27: [DVTCommonLib]### VOLA from card : 0x1
16:18:27: [DVTCommonLib]### CMD Pattern from card : 0x71
16:18:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 1246 ] 
16:18:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B95A0>, <py_sfcl.CommandDataDefinition object at 0x066B5C90>) , Command count = 1247 ] 
16:18:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1248 ] 
16:18:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:27: [ SetBusWidth(0x4) , Command count = 1249 ] 
16:18:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:27: ####CSD Registe 2.0 Values####
16:18:27: CSD_STRUCTURE                                 :0x1
16:18:27: Reserv1                                       :0x0
16:18:27: Time Access 1 TAAC                            :0xe
16:18:27: Time Access 2 NSAC*100                        :0x0
16:18:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:27: Card Command Classess CCC                     :0x5b5
16:18:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:27: DSR(driver stage register)  DSR_IMP           :0x0
16:18:27: Reserv2                                       :0x0
16:18:27: Device Size C_SIZE                            :0xedc8
16:18:27: Reserv3                                       :0x0
16:18:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:27: Reserv4                                       :0x0
16:18:27: Write Speed Factor R2W_FACTOR                 :0x2
16:18:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:27: FILE_FORMAT_GRP                               :0x0
16:18:27: COPY flag                                     :0x1
16:18:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:27: File_Format                                   :0x0
16:18:27: CRC                                           :0x0
16:18:27: ####CSD Registe Values####  

16:18:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:27: ProductSerialNumber = 0x23482900
16:18:27: CardMaximumLBA      = 0x3b72400
16:18:27: CardCapacity        = 32G
16:18:27: Is card secure      = 0
16:18:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:27: [DVTCommonLib]###  LogicalWrite called
16:18:28: [ WriteLba(0x2611088, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1250 ] 
16:18:28: [DVTCommonLib]###  LogicalWrite Completed 

16:18:28: [DVTCommonLib]###  LogicalRead called
16:18:30: [ ReadLba(0x2611088, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1251 ] 
16:18:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 114 times 
16:18:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x72, 0x0) , Command count = 1252 ] 
16:18:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:30: [DVTCommonLib]### Card response as High Capacity from card
16:18:30: [DVTCommonLib]### VOLA from card : 0x1
16:18:30: [DVTCommonLib]### CMD Pattern from card : 0x72
16:18:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 1253 ] 
16:18:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9690>, <py_sfcl.CommandDataDefinition object at 0x066B5C90>) , Command count = 1254 ] 
16:18:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1255 ] 
16:18:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:30: [ SetBusWidth(0x4) , Command count = 1256 ] 
16:18:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:30: ####CSD Registe 2.0 Values####
16:18:30: CSD_STRUCTURE                                 :0x1
16:18:30: Reserv1                                       :0x0
16:18:30: Time Access 1 TAAC                            :0xe
16:18:30: Time Access 2 NSAC*100                        :0x0
16:18:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:30: Card Command Classess CCC                     :0x5b5
16:18:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:30: DSR(driver stage register)  DSR_IMP           :0x0
16:18:30: Reserv2                                       :0x0
16:18:30: Device Size C_SIZE                            :0xedc8
16:18:30: Reserv3                                       :0x0
16:18:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:30: Reserv4                                       :0x0
16:18:30: Write Speed Factor R2W_FACTOR                 :0x2
16:18:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:30: FILE_FORMAT_GRP                               :0x0
16:18:30: COPY flag                                     :0x1
16:18:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:30: File_Format                                   :0x0
16:18:30: CRC                                           :0x0
16:18:30: ####CSD Registe Values####  

16:18:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:30: ProductSerialNumber = 0x23482900
16:18:30: CardMaximumLBA      = 0x3b72400
16:18:30: CardCapacity        = 32G
16:18:30: Is card secure      = 0
16:18:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:30: [DVTCommonLib]###  LogicalWrite called
16:18:32: [ WriteLba(0x1F2C6FE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1257 ] 
16:18:32: [DVTCommonLib]###  LogicalWrite Completed 

16:18:32: [DVTCommonLib]###  LogicalRead called
16:18:33: [ ReadLba(0x1F2C6FE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1258 ] 
16:18:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 115 times 
16:18:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x73, 0x0) , Command count = 1259 ] 
16:18:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:34: [DVTCommonLib]### Card response as High Capacity from card
16:18:34: [DVTCommonLib]### VOLA from card : 0x1
16:18:34: [DVTCommonLib]### CMD Pattern from card : 0x73
16:18:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9C30>, <py_sfcl.CommandDataDefinition object at 0x066B9A50>) , Command count = 1260 ] 
16:18:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05501150>, <py_sfcl.CommandDataDefinition object at 0x066B9A80>) , Command count = 1261 ] 
16:18:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1262 ] 
16:18:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:34: [ SetBusWidth(0x4) , Command count = 1263 ] 
16:18:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:34: ####CSD Registe 2.0 Values####
16:18:34: CSD_STRUCTURE                                 :0x1
16:18:34: Reserv1                                       :0x0
16:18:34: Time Access 1 TAAC                            :0xe
16:18:34: Time Access 2 NSAC*100                        :0x0
16:18:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:34: Card Command Classess CCC                     :0x5b5
16:18:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:34: DSR(driver stage register)  DSR_IMP           :0x0
16:18:34: Reserv2                                       :0x0
16:18:34: Device Size C_SIZE                            :0xedc8
16:18:34: Reserv3                                       :0x0
16:18:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:34: Reserv4                                       :0x0
16:18:34: Write Speed Factor R2W_FACTOR                 :0x2
16:18:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:34: FILE_FORMAT_GRP                               :0x0
16:18:34: COPY flag                                     :0x1
16:18:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:34: File_Format                                   :0x0
16:18:34: CRC                                           :0x0
16:18:34: ####CSD Registe Values####  

16:18:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:34: ProductSerialNumber = 0x23482900
16:18:34: CardMaximumLBA      = 0x3b72400
16:18:34: CardCapacity        = 32G
16:18:34: Is card secure      = 0
16:18:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:34: [DVTCommonLib]###  LogicalWrite called
16:18:35: [ WriteLba(0x64EC11, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1264 ] 
16:18:35: [DVTCommonLib]###  LogicalWrite Completed 

16:18:35: [DVTCommonLib]###  LogicalRead called
16:18:37: [ ReadLba(0x64EC11, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1265 ] 
16:18:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 116 times 
16:18:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x74, 0x0) , Command count = 1266 ] 
16:18:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:37: [DVTCommonLib]### Card response as High Capacity from card
16:18:37: [DVTCommonLib]### VOLA from card : 0x1
16:18:37: [DVTCommonLib]### CMD Pattern from card : 0x74
16:18:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 1267 ] 
16:18:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C360>, <py_sfcl.CommandDataDefinition object at 0x066B97B0>) , Command count = 1268 ] 
16:18:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1269 ] 
16:18:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:37: [ SetBusWidth(0x4) , Command count = 1270 ] 
16:18:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:37: ####CSD Registe 2.0 Values####
16:18:37: CSD_STRUCTURE                                 :0x1
16:18:37: Reserv1                                       :0x0
16:18:37: Time Access 1 TAAC                            :0xe
16:18:37: Time Access 2 NSAC*100                        :0x0
16:18:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:37: Card Command Classess CCC                     :0x5b5
16:18:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:37: DSR(driver stage register)  DSR_IMP           :0x0
16:18:37: Reserv2                                       :0x0
16:18:37: Device Size C_SIZE                            :0xedc8
16:18:37: Reserv3                                       :0x0
16:18:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:37: Reserv4                                       :0x0
16:18:37: Write Speed Factor R2W_FACTOR                 :0x2
16:18:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:37: FILE_FORMAT_GRP                               :0x0
16:18:37: COPY flag                                     :0x1
16:18:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:37: File_Format                                   :0x0
16:18:37: CRC                                           :0x0
16:18:37: ####CSD Registe Values####  

16:18:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:37: ProductSerialNumber = 0x23482900
16:18:37: CardMaximumLBA      = 0x3b72400
16:18:37: CardCapacity        = 32G
16:18:37: Is card secure      = 0
16:18:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:37: [DVTCommonLib]###  LogicalWrite called
16:18:39: [ WriteLba(0x22B03B4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1271 ] 
16:18:39: [DVTCommonLib]###  LogicalWrite Completed 

16:18:39: [DVTCommonLib]###  LogicalRead called
16:18:41: [ ReadLba(0x22B03B4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1272 ] 
16:18:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 117 times 
16:18:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x75, 0x0) , Command count = 1273 ] 
16:18:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:41: [DVTCommonLib]### Card response as High Capacity from card
16:18:41: [DVTCommonLib]### VOLA from card : 0x1
16:18:41: [DVTCommonLib]### CMD Pattern from card : 0x75
16:18:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 1274 ] 
16:18:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B98D0>, <py_sfcl.CommandDataDefinition object at 0x066B9F00>) , Command count = 1275 ] 
16:18:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1276 ] 
16:18:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:41: [ SetBusWidth(0x4) , Command count = 1277 ] 
16:18:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:41: ####CSD Registe 2.0 Values####
16:18:41: CSD_STRUCTURE                                 :0x1
16:18:41: Reserv1                                       :0x0
16:18:41: Time Access 1 TAAC                            :0xe
16:18:41: Time Access 2 NSAC*100                        :0x0
16:18:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:41: Card Command Classess CCC                     :0x5b5
16:18:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:41: DSR(driver stage register)  DSR_IMP           :0x0
16:18:41: Reserv2                                       :0x0
16:18:41: Device Size C_SIZE                            :0xedc8
16:18:41: Reserv3                                       :0x0
16:18:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:41: Reserv4                                       :0x0
16:18:41: Write Speed Factor R2W_FACTOR                 :0x2
16:18:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:41: FILE_FORMAT_GRP                               :0x0
16:18:41: COPY flag                                     :0x1
16:18:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:41: File_Format                                   :0x0
16:18:41: CRC                                           :0x0
16:18:41: ####CSD Registe Values####  

16:18:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:41: ProductSerialNumber = 0x23482900
16:18:41: CardMaximumLBA      = 0x3b72400
16:18:41: CardCapacity        = 32G
16:18:41: Is card secure      = 0
16:18:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:41: [DVTCommonLib]###  LogicalWrite called
16:18:42: [ WriteLba(0x31AB048, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1278 ] 
16:18:42: [DVTCommonLib]###  LogicalWrite Completed 

16:18:42: [DVTCommonLib]###  LogicalRead called
16:18:44: [ ReadLba(0x31AB048, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1279 ] 
16:18:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 118 times 
16:18:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x76, 0x0) , Command count = 1280 ] 
16:18:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:44: [DVTCommonLib]### Card response as High Capacity from card
16:18:44: [DVTCommonLib]### VOLA from card : 0x1
16:18:44: [DVTCommonLib]### CMD Pattern from card : 0x76
16:18:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055409C0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 1281 ] 
16:18:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552EC30>, <py_sfcl.CommandDataDefinition object at 0x066B9EA0>) , Command count = 1282 ] 
16:18:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1283 ] 
16:18:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:44: [ SetBusWidth(0x4) , Command count = 1284 ] 
16:18:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:44: ####CSD Registe 2.0 Values####
16:18:44: CSD_STRUCTURE                                 :0x1
16:18:44: Reserv1                                       :0x0
16:18:44: Time Access 1 TAAC                            :0xe
16:18:44: Time Access 2 NSAC*100                        :0x0
16:18:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:44: Card Command Classess CCC                     :0x5b5
16:18:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:44: DSR(driver stage register)  DSR_IMP           :0x0
16:18:44: Reserv2                                       :0x0
16:18:44: Device Size C_SIZE                            :0xedc8
16:18:44: Reserv3                                       :0x0
16:18:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:44: Reserv4                                       :0x0
16:18:44: Write Speed Factor R2W_FACTOR                 :0x2
16:18:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:44: FILE_FORMAT_GRP                               :0x0
16:18:44: COPY flag                                     :0x1
16:18:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:44: File_Format                                   :0x0
16:18:44: CRC                                           :0x0
16:18:44: ####CSD Registe Values####  

16:18:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:44: ProductSerialNumber = 0x23482900
16:18:44: CardMaximumLBA      = 0x3b72400
16:18:44: CardCapacity        = 32G
16:18:44: Is card secure      = 0
16:18:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:44: [DVTCommonLib]###  LogicalWrite called
16:18:46: [ WriteLba(0xD5BF86, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1285 ] 
16:18:46: [DVTCommonLib]###  LogicalWrite Completed 

16:18:46: [DVTCommonLib]###  LogicalRead called
16:18:48: [ ReadLba(0xD5BF86, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1286 ] 
16:18:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 119 times 
16:18:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x77, 0x0) , Command count = 1287 ] 
16:18:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:48: [DVTCommonLib]### Card response as High Capacity from card
16:18:48: [DVTCommonLib]### VOLA from card : 0x1
16:18:48: [DVTCommonLib]### CMD Pattern from card : 0x77
16:18:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9840>, <py_sfcl.CommandDataDefinition object at 0x066B9DB0>) , Command count = 1288 ] 
16:18:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540990>, <py_sfcl.CommandDataDefinition object at 0x066B9C00>) , Command count = 1289 ] 
16:18:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1290 ] 
16:18:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:48: [ SetBusWidth(0x4) , Command count = 1291 ] 
16:18:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:48: ####CSD Registe 2.0 Values####
16:18:48: CSD_STRUCTURE                                 :0x1
16:18:48: Reserv1                                       :0x0
16:18:48: Time Access 1 TAAC                            :0xe
16:18:48: Time Access 2 NSAC*100                        :0x0
16:18:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:48: Card Command Classess CCC                     :0x5b5
16:18:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:48: DSR(driver stage register)  DSR_IMP           :0x0
16:18:48: Reserv2                                       :0x0
16:18:48: Device Size C_SIZE                            :0xedc8
16:18:48: Reserv3                                       :0x0
16:18:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:48: Reserv4                                       :0x0
16:18:48: Write Speed Factor R2W_FACTOR                 :0x2
16:18:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:48: FILE_FORMAT_GRP                               :0x0
16:18:48: COPY flag                                     :0x1
16:18:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:48: File_Format                                   :0x0
16:18:48: CRC                                           :0x0
16:18:48: ####CSD Registe Values####  

16:18:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:48: ProductSerialNumber = 0x23482900
16:18:48: CardMaximumLBA      = 0x3b72400
16:18:48: CardCapacity        = 32G
16:18:48: Is card secure      = 0
16:18:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:48: [DVTCommonLib]###  LogicalWrite called
16:18:50: [ WriteLba(0xE9F740, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1292 ] 
16:18:50: [DVTCommonLib]###  LogicalWrite Completed 

16:18:50: [DVTCommonLib]###  LogicalRead called
16:18:51: [ ReadLba(0xE9F740, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1293 ] 
16:18:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 120 times 
16:18:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x78, 0x0) , Command count = 1294 ] 
16:18:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:51: [DVTCommonLib]### Card response as High Capacity from card
16:18:51: [DVTCommonLib]### VOLA from card : 0x1
16:18:51: [DVTCommonLib]### CMD Pattern from card : 0x78
16:18:51: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482030>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 1295 ] 
16:18:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9ED0>, <py_sfcl.CommandDataDefinition object at 0x066B9960>) , Command count = 1296 ] 
16:18:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1297 ] 
16:18:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:51: [ SetBusWidth(0x4) , Command count = 1298 ] 
16:18:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:51: ####CSD Registe 2.0 Values####
16:18:51: CSD_STRUCTURE                                 :0x1
16:18:51: Reserv1                                       :0x0
16:18:51: Time Access 1 TAAC                            :0xe
16:18:51: Time Access 2 NSAC*100                        :0x0
16:18:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:51: Card Command Classess CCC                     :0x5b5
16:18:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:51: DSR(driver stage register)  DSR_IMP           :0x0
16:18:51: Reserv2                                       :0x0
16:18:51: Device Size C_SIZE                            :0xedc8
16:18:51: Reserv3                                       :0x0
16:18:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:51: Reserv4                                       :0x0
16:18:51: Write Speed Factor R2W_FACTOR                 :0x2
16:18:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:51: FILE_FORMAT_GRP                               :0x0
16:18:51: COPY flag                                     :0x1
16:18:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:51: File_Format                                   :0x0
16:18:51: CRC                                           :0x0
16:18:51: ####CSD Registe Values####  

16:18:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:51: ProductSerialNumber = 0x23482900
16:18:51: CardMaximumLBA      = 0x3b72400
16:18:51: CardCapacity        = 32G
16:18:51: Is card secure      = 0
16:18:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:51: [DVTCommonLib]###  LogicalWrite called
16:18:53: [ WriteLba(0x43EAEE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1299 ] 
16:18:53: [DVTCommonLib]###  LogicalWrite Completed 

16:18:53: [DVTCommonLib]###  LogicalRead called
16:18:55: [ ReadLba(0x43EAEE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1300 ] 
16:18:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 121 times 
16:18:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x79, 0x0) , Command count = 1301 ] 
16:18:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:55: [DVTCommonLib]### Card response as High Capacity from card
16:18:55: [DVTCommonLib]### VOLA from card : 0x1
16:18:55: [DVTCommonLib]### CMD Pattern from card : 0x79
16:18:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066B96C0>) , Command count = 1302 ] 
16:18:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x064824B0>, <py_sfcl.CommandDataDefinition object at 0x066B9F30>) , Command count = 1303 ] 
16:18:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1304 ] 
16:18:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:55: [ SetBusWidth(0x4) , Command count = 1305 ] 
16:18:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:55: ####CSD Registe 2.0 Values####
16:18:55: CSD_STRUCTURE                                 :0x1
16:18:55: Reserv1                                       :0x0
16:18:55: Time Access 1 TAAC                            :0xe
16:18:55: Time Access 2 NSAC*100                        :0x0
16:18:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:55: Card Command Classess CCC                     :0x5b5
16:18:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:55: DSR(driver stage register)  DSR_IMP           :0x0
16:18:55: Reserv2                                       :0x0
16:18:55: Device Size C_SIZE                            :0xedc8
16:18:55: Reserv3                                       :0x0
16:18:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:55: Reserv4                                       :0x0
16:18:55: Write Speed Factor R2W_FACTOR                 :0x2
16:18:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:55: FILE_FORMAT_GRP                               :0x0
16:18:55: COPY flag                                     :0x1
16:18:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:55: File_Format                                   :0x0
16:18:55: CRC                                           :0x0
16:18:55: ####CSD Registe Values####  

16:18:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:55: ProductSerialNumber = 0x23482900
16:18:55: CardMaximumLBA      = 0x3b72400
16:18:55: CardCapacity        = 32G
16:18:55: Is card secure      = 0
16:18:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:55: [DVTCommonLib]###  LogicalWrite called
16:18:57: [ WriteLba(0x32C1F30, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1306 ] 
16:18:57: [DVTCommonLib]###  LogicalWrite Completed 

16:18:57: [DVTCommonLib]###  LogicalRead called
16:18:58: [ ReadLba(0x32C1F30, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1307 ] 
16:18:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 122 times 
16:18:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7A, 0x0) , Command count = 1308 ] 
16:18:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:18:58: [DVTCommonLib]### Card response as High Capacity from card
16:18:58: [DVTCommonLib]### VOLA from card : 0x1
16:18:58: [DVTCommonLib]### CMD Pattern from card : 0x7A
16:18:58: [DVTCommonLib]### Reserved bits from card : 0x0
16:18:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 1309 ] 
16:18:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F60>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 1310 ] 
16:18:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1311 ] 
16:18:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:58: [ SetBusWidth(0x4) , Command count = 1312 ] 
16:18:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:18:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:58: ####CSD Registe 2.0 Values####
16:18:58: CSD_STRUCTURE                                 :0x1
16:18:58: Reserv1                                       :0x0
16:18:58: Time Access 1 TAAC                            :0xe
16:18:58: Time Access 2 NSAC*100                        :0x0
16:18:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:58: Card Command Classess CCC                     :0x5b5
16:18:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:58: DSR(driver stage register)  DSR_IMP           :0x0
16:18:58: Reserv2                                       :0x0
16:18:58: Device Size C_SIZE                            :0xedc8
16:18:58: Reserv3                                       :0x0
16:18:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:58: Reserv4                                       :0x0
16:18:58: Write Speed Factor R2W_FACTOR                 :0x2
16:18:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:58: FILE_FORMAT_GRP                               :0x0
16:18:58: COPY flag                                     :0x1
16:18:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:58: File_Format                                   :0x0
16:18:58: CRC                                           :0x0
16:18:58: ####CSD Registe Values####  

16:18:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:18:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:58: ProductSerialNumber = 0x23482900
16:18:58: CardMaximumLBA      = 0x3b72400
16:18:58: CardCapacity        = 32G
16:18:58: Is card secure      = 0
16:18:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:18:58: [DVTCommonLib]###  LogicalWrite called
16:19:00: [ WriteLba(0xBE6145, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1313 ] 
16:19:00: [DVTCommonLib]###  LogicalWrite Completed 

16:19:00: [DVTCommonLib]###  LogicalRead called
16:19:02: [ ReadLba(0xBE6145, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1314 ] 
16:19:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 123 times 
16:19:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7B, 0x0) , Command count = 1315 ] 
16:19:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:02: [DVTCommonLib]### Card response as High Capacity from card
16:19:02: [DVTCommonLib]### VOLA from card : 0x1
16:19:02: [DVTCommonLib]### CMD Pattern from card : 0x7B
16:19:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9570>, <py_sfcl.CommandDataDefinition object at 0x066037B0>) , Command count = 1316 ] 
16:19:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038D0>, <py_sfcl.CommandDataDefinition object at 0x06603480>) , Command count = 1317 ] 
16:19:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1318 ] 
16:19:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:02: [ SetBusWidth(0x4) , Command count = 1319 ] 
16:19:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:02: ####CSD Registe 2.0 Values####
16:19:02: CSD_STRUCTURE                                 :0x1
16:19:02: Reserv1                                       :0x0
16:19:02: Time Access 1 TAAC                            :0xe
16:19:02: Time Access 2 NSAC*100                        :0x0
16:19:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:02: Card Command Classess CCC                     :0x5b5
16:19:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:02: DSR(driver stage register)  DSR_IMP           :0x0
16:19:02: Reserv2                                       :0x0
16:19:02: Device Size C_SIZE                            :0xedc8
16:19:02: Reserv3                                       :0x0
16:19:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:02: Reserv4                                       :0x0
16:19:02: Write Speed Factor R2W_FACTOR                 :0x2
16:19:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:02: FILE_FORMAT_GRP                               :0x0
16:19:02: COPY flag                                     :0x1
16:19:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:02: File_Format                                   :0x0
16:19:02: CRC                                           :0x0
16:19:02: ####CSD Registe Values####  

16:19:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:02: ProductSerialNumber = 0x23482900
16:19:02: CardMaximumLBA      = 0x3b72400
16:19:02: CardCapacity        = 32G
16:19:02: Is card secure      = 0
16:19:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:02: [DVTCommonLib]###  LogicalWrite called
16:19:04: [ WriteLba(0x2269F1D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1320 ] 
16:19:04: [DVTCommonLib]###  LogicalWrite Completed 

16:19:04: [DVTCommonLib]###  LogicalRead called
16:19:05: [ ReadLba(0x2269F1D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1321 ] 
16:19:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 124 times 
16:19:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7C, 0x0) , Command count = 1322 ] 
16:19:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:05: [DVTCommonLib]### Card response as High Capacity from card
16:19:05: [DVTCommonLib]### VOLA from card : 0x1
16:19:05: [DVTCommonLib]### CMD Pattern from card : 0x7C
16:19:05: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035A0>, <py_sfcl.CommandDataDefinition object at 0x06603750>) , Command count = 1323 ] 
16:19:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603A20>, <py_sfcl.CommandDataDefinition object at 0x06603BD0>) , Command count = 1324 ] 
16:19:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1325 ] 
16:19:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:05: [ SetBusWidth(0x4) , Command count = 1326 ] 
16:19:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:05: ####CSD Registe 2.0 Values####
16:19:05: CSD_STRUCTURE                                 :0x1
16:19:05: Reserv1                                       :0x0
16:19:05: Time Access 1 TAAC                            :0xe
16:19:05: Time Access 2 NSAC*100                        :0x0
16:19:05: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:05: Card Command Classess CCC                     :0x5b5
16:19:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:05: DSR(driver stage register)  DSR_IMP           :0x0
16:19:05: Reserv2                                       :0x0
16:19:05: Device Size C_SIZE                            :0xedc8
16:19:05: Reserv3                                       :0x0
16:19:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:05: Reserv4                                       :0x0
16:19:05: Write Speed Factor R2W_FACTOR                 :0x2
16:19:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:05: FILE_FORMAT_GRP                               :0x0
16:19:05: COPY flag                                     :0x1
16:19:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:05: File_Format                                   :0x0
16:19:05: CRC                                           :0x0
16:19:05: ####CSD Registe Values####  

16:19:05: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:05: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:06: ProductSerialNumber = 0x23482900
16:19:06: CardMaximumLBA      = 0x3b72400
16:19:06: CardCapacity        = 32G
16:19:06: Is card secure      = 0
16:19:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:06: [DVTCommonLib]###  LogicalWrite called
16:19:07: [ WriteLba(0x3A0A352, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1327 ] 
16:19:07: [DVTCommonLib]###  LogicalWrite Completed 

16:19:07: [DVTCommonLib]###  LogicalRead called
16:19:09: [ ReadLba(0x3A0A352, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1328 ] 
16:19:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 125 times 
16:19:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7D, 0x0) , Command count = 1329 ] 
16:19:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:09: [DVTCommonLib]### Card response as High Capacity from card
16:19:09: [DVTCommonLib]### VOLA from card : 0x1
16:19:09: [DVTCommonLib]### CMD Pattern from card : 0x7D
16:19:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x06603A80>) , Command count = 1330 ] 
16:19:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603ED0>, <py_sfcl.CommandDataDefinition object at 0x06603D20>) , Command count = 1331 ] 
16:19:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1332 ] 
16:19:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:09: [ SetBusWidth(0x4) , Command count = 1333 ] 
16:19:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:09: ####CSD Registe 2.0 Values####
16:19:09: CSD_STRUCTURE                                 :0x1
16:19:09: Reserv1                                       :0x0
16:19:09: Time Access 1 TAAC                            :0xe
16:19:09: Time Access 2 NSAC*100                        :0x0
16:19:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:09: Card Command Classess CCC                     :0x5b5
16:19:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:09: DSR(driver stage register)  DSR_IMP           :0x0
16:19:09: Reserv2                                       :0x0
16:19:09: Device Size C_SIZE                            :0xedc8
16:19:09: Reserv3                                       :0x0
16:19:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:09: Reserv4                                       :0x0
16:19:09: Write Speed Factor R2W_FACTOR                 :0x2
16:19:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:09: FILE_FORMAT_GRP                               :0x0
16:19:09: COPY flag                                     :0x1
16:19:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:09: File_Format                                   :0x0
16:19:09: CRC                                           :0x0
16:19:09: ####CSD Registe Values####  

16:19:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:09: ProductSerialNumber = 0x23482900
16:19:09: CardMaximumLBA      = 0x3b72400
16:19:09: CardCapacity        = 32G
16:19:09: Is card secure      = 0
16:19:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:09: [DVTCommonLib]###  LogicalWrite called
16:19:11: [ WriteLba(0x15B7119, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1334 ] 
16:19:11: [DVTCommonLib]###  LogicalWrite Completed 

16:19:11: [DVTCommonLib]###  LogicalRead called
16:19:12: [ ReadLba(0x15B7119, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1335 ] 
16:19:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 126 times 
16:19:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7E, 0x0) , Command count = 1336 ] 
16:19:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:12: [DVTCommonLib]### Card response as High Capacity from card
16:19:12: [DVTCommonLib]### VOLA from card : 0x1
16:19:12: [DVTCommonLib]### CMD Pattern from card : 0x7E
16:19:12: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x06603CF0>) , Command count = 1337 ] 
16:19:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C240>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 1338 ] 
16:19:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1339 ] 
16:19:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:13: [ SetBusWidth(0x4) , Command count = 1340 ] 
16:19:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:13: ####CSD Registe 2.0 Values####
16:19:13: CSD_STRUCTURE                                 :0x1
16:19:13: Reserv1                                       :0x0
16:19:13: Time Access 1 TAAC                            :0xe
16:19:13: Time Access 2 NSAC*100                        :0x0
16:19:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:13: Card Command Classess CCC                     :0x5b5
16:19:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:13: DSR(driver stage register)  DSR_IMP           :0x0
16:19:13: Reserv2                                       :0x0
16:19:13: Device Size C_SIZE                            :0xedc8
16:19:13: Reserv3                                       :0x0
16:19:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:13: Reserv4                                       :0x0
16:19:13: Write Speed Factor R2W_FACTOR                 :0x2
16:19:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:13: FILE_FORMAT_GRP                               :0x0
16:19:13: COPY flag                                     :0x1
16:19:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:13: File_Format                                   :0x0
16:19:13: CRC                                           :0x0
16:19:13: ####CSD Registe Values####  

16:19:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:13: ProductSerialNumber = 0x23482900
16:19:13: CardMaximumLBA      = 0x3b72400
16:19:13: CardCapacity        = 32G
16:19:13: Is card secure      = 0
16:19:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:13: [DVTCommonLib]###  LogicalWrite called
16:19:14: [ WriteLba(0x27C08CC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1341 ] 
16:19:14: [DVTCommonLib]###  LogicalWrite Completed 

16:19:14: [DVTCommonLib]###  LogicalRead called
16:19:16: [ ReadLba(0x27C08CC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1342 ] 
16:19:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 127 times 
16:19:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x7F, 0x0) , Command count = 1343 ] 
16:19:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:16: [DVTCommonLib]### Card response as High Capacity from card
16:19:16: [DVTCommonLib]### VOLA from card : 0x1
16:19:16: [DVTCommonLib]### CMD Pattern from card : 0x7F
16:19:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613B10>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 1344 ] 
16:19:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066139C0>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 1345 ] 
16:19:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1346 ] 
16:19:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:16: [ SetBusWidth(0x4) , Command count = 1347 ] 
16:19:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:16: ####CSD Registe 2.0 Values####
16:19:16: CSD_STRUCTURE                                 :0x1
16:19:16: Reserv1                                       :0x0
16:19:16: Time Access 1 TAAC                            :0xe
16:19:16: Time Access 2 NSAC*100                        :0x0
16:19:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:16: Card Command Classess CCC                     :0x5b5
16:19:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:16: DSR(driver stage register)  DSR_IMP           :0x0
16:19:16: Reserv2                                       :0x0
16:19:16: Device Size C_SIZE                            :0xedc8
16:19:16: Reserv3                                       :0x0
16:19:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:16: Reserv4                                       :0x0
16:19:16: Write Speed Factor R2W_FACTOR                 :0x2
16:19:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:16: FILE_FORMAT_GRP                               :0x0
16:19:16: COPY flag                                     :0x1
16:19:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:16: File_Format                                   :0x0
16:19:16: CRC                                           :0x0
16:19:16: ####CSD Registe Values####  

16:19:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:16: ProductSerialNumber = 0x23482900
16:19:16: CardMaximumLBA      = 0x3b72400
16:19:16: CardCapacity        = 32G
16:19:16: Is card secure      = 0
16:19:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:16: [DVTCommonLib]###  LogicalWrite called
16:19:18: [ WriteLba(0x250BFDD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1348 ] 
16:19:18: [DVTCommonLib]###  LogicalWrite Completed 

16:19:18: [DVTCommonLib]###  LogicalRead called
16:19:19: [ ReadLba(0x250BFDD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1349 ] 
16:19:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 128 times 
16:19:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x80, 0x0) , Command count = 1350 ] 
16:19:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:20: [DVTCommonLib]### Card response as High Capacity from card
16:19:20: [DVTCommonLib]### VOLA from card : 0x1
16:19:20: [DVTCommonLib]### CMD Pattern from card : 0x80
16:19:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482780>, <py_sfcl.CommandDataDefinition object at 0x06613CC0>) , Command count = 1351 ] 
16:19:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066190F0>, <py_sfcl.CommandDataDefinition object at 0x06613900>) , Command count = 1352 ] 
16:19:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1353 ] 
16:19:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:20: [ SetBusWidth(0x4) , Command count = 1354 ] 
16:19:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:20: ####CSD Registe 2.0 Values####
16:19:20: CSD_STRUCTURE                                 :0x1
16:19:20: Reserv1                                       :0x0
16:19:20: Time Access 1 TAAC                            :0xe
16:19:20: Time Access 2 NSAC*100                        :0x0
16:19:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:20: Card Command Classess CCC                     :0x5b5
16:19:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:20: DSR(driver stage register)  DSR_IMP           :0x0
16:19:20: Reserv2                                       :0x0
16:19:20: Device Size C_SIZE                            :0xedc8
16:19:20: Reserv3                                       :0x0
16:19:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:20: Reserv4                                       :0x0
16:19:20: Write Speed Factor R2W_FACTOR                 :0x2
16:19:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:20: FILE_FORMAT_GRP                               :0x0
16:19:20: COPY flag                                     :0x1
16:19:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:20: File_Format                                   :0x0
16:19:20: CRC                                           :0x0
16:19:20: ####CSD Registe Values####  

16:19:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:20: ProductSerialNumber = 0x23482900
16:19:20: CardMaximumLBA      = 0x3b72400
16:19:20: CardCapacity        = 32G
16:19:20: Is card secure      = 0
16:19:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:20: [DVTCommonLib]###  LogicalWrite called
16:19:21: [ WriteLba(0x1FF3DE3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1355 ] 
16:19:21: [DVTCommonLib]###  LogicalWrite Completed 

16:19:21: [DVTCommonLib]###  LogicalRead called
16:19:23: [ ReadLba(0x1FF3DE3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1356 ] 
16:19:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 129 times 
16:19:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x81, 0x0) , Command count = 1357 ] 
16:19:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:23: [DVTCommonLib]### Card response as High Capacity from card
16:19:23: [DVTCommonLib]### VOLA from card : 0x1
16:19:23: [DVTCommonLib]### CMD Pattern from card : 0x81
16:19:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 1358 ] 
16:19:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613A80>, <py_sfcl.CommandDataDefinition object at 0x06613AB0>) , Command count = 1359 ] 
16:19:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1360 ] 
16:19:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:23: [ SetBusWidth(0x4) , Command count = 1361 ] 
16:19:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:23: ####CSD Registe 2.0 Values####
16:19:23: CSD_STRUCTURE                                 :0x1
16:19:23: Reserv1                                       :0x0
16:19:23: Time Access 1 TAAC                            :0xe
16:19:23: Time Access 2 NSAC*100                        :0x0
16:19:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:23: Card Command Classess CCC                     :0x5b5
16:19:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:23: DSR(driver stage register)  DSR_IMP           :0x0
16:19:23: Reserv2                                       :0x0
16:19:23: Device Size C_SIZE                            :0xedc8
16:19:23: Reserv3                                       :0x0
16:19:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:23: Reserv4                                       :0x0
16:19:23: Write Speed Factor R2W_FACTOR                 :0x2
16:19:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:23: FILE_FORMAT_GRP                               :0x0
16:19:23: COPY flag                                     :0x1
16:19:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:23: File_Format                                   :0x0
16:19:23: CRC                                           :0x0
16:19:23: ####CSD Registe Values####  

16:19:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:23: ProductSerialNumber = 0x23482900
16:19:23: CardMaximumLBA      = 0x3b72400
16:19:23: CardCapacity        = 32G
16:19:23: Is card secure      = 0
16:19:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:23: [DVTCommonLib]###  LogicalWrite called
16:19:25: [ WriteLba(0x9380E3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1362 ] 
16:19:25: [DVTCommonLib]###  LogicalWrite Completed 

16:19:25: [DVTCommonLib]###  LogicalRead called
16:19:26: [ ReadLba(0x9380E3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1363 ] 
16:19:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 130 times 
16:19:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x82, 0x0) , Command count = 1364 ] 
16:19:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:27: [DVTCommonLib]### Card response as High Capacity from card
16:19:27: [DVTCommonLib]### VOLA from card : 0x1
16:19:27: [DVTCommonLib]### CMD Pattern from card : 0x82
16:19:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 1365 ] 
16:19:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066195D0>, <py_sfcl.CommandDataDefinition object at 0x06619150>) , Command count = 1366 ] 
16:19:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1367 ] 
16:19:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:27: [ SetBusWidth(0x4) , Command count = 1368 ] 
16:19:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:27: ####CSD Registe 2.0 Values####
16:19:27: CSD_STRUCTURE                                 :0x1
16:19:27: Reserv1                                       :0x0
16:19:27: Time Access 1 TAAC                            :0xe
16:19:27: Time Access 2 NSAC*100                        :0x0
16:19:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:27: Card Command Classess CCC                     :0x5b5
16:19:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:27: DSR(driver stage register)  DSR_IMP           :0x0
16:19:27: Reserv2                                       :0x0
16:19:27: Device Size C_SIZE                            :0xedc8
16:19:27: Reserv3                                       :0x0
16:19:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:27: Reserv4                                       :0x0
16:19:27: Write Speed Factor R2W_FACTOR                 :0x2
16:19:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:27: FILE_FORMAT_GRP                               :0x0
16:19:27: COPY flag                                     :0x1
16:19:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:27: File_Format                                   :0x0
16:19:27: CRC                                           :0x0
16:19:27: ####CSD Registe Values####  

16:19:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:27: ProductSerialNumber = 0x23482900
16:19:27: CardMaximumLBA      = 0x3b72400
16:19:27: CardCapacity        = 32G
16:19:27: Is card secure      = 0
16:19:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:27: [DVTCommonLib]###  LogicalWrite called
16:19:28: [ WriteLba(0x2C7F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1369 ] 
16:19:28: [DVTCommonLib]###  LogicalWrite Completed 

16:19:28: [DVTCommonLib]###  LogicalRead called
16:19:30: [ ReadLba(0x2C7F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1370 ] 
16:19:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 131 times 
16:19:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x83, 0x0) , Command count = 1371 ] 
16:19:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:30: [DVTCommonLib]### Card response as High Capacity from card
16:19:30: [DVTCommonLib]### VOLA from card : 0x1
16:19:30: [DVTCommonLib]### CMD Pattern from card : 0x83
16:19:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 1372 ] 
16:19:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066199C0>, <py_sfcl.CommandDataDefinition object at 0x06619420>) , Command count = 1373 ] 
16:19:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1374 ] 
16:19:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:30: [ SetBusWidth(0x4) , Command count = 1375 ] 
16:19:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:30: ####CSD Registe 2.0 Values####
16:19:30: CSD_STRUCTURE                                 :0x1
16:19:30: Reserv1                                       :0x0
16:19:30: Time Access 1 TAAC                            :0xe
16:19:30: Time Access 2 NSAC*100                        :0x0
16:19:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:30: Card Command Classess CCC                     :0x5b5
16:19:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:30: DSR(driver stage register)  DSR_IMP           :0x0
16:19:30: Reserv2                                       :0x0
16:19:30: Device Size C_SIZE                            :0xedc8
16:19:30: Reserv3                                       :0x0
16:19:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:30: Reserv4                                       :0x0
16:19:30: Write Speed Factor R2W_FACTOR                 :0x2
16:19:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:30: FILE_FORMAT_GRP                               :0x0
16:19:30: COPY flag                                     :0x1
16:19:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:30: File_Format                                   :0x0
16:19:30: CRC                                           :0x0
16:19:30: ####CSD Registe Values####  

16:19:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:30: ProductSerialNumber = 0x23482900
16:19:30: CardMaximumLBA      = 0x3b72400
16:19:30: CardCapacity        = 32G
16:19:30: Is card secure      = 0
16:19:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:30: [DVTCommonLib]###  LogicalWrite called
16:19:32: [ WriteLba(0x289437B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1376 ] 
16:19:32: [DVTCommonLib]###  LogicalWrite Completed 

16:19:32: [DVTCommonLib]###  LogicalRead called
16:19:33: [ ReadLba(0x289437B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1377 ] 
16:19:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 132 times 
16:19:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x84, 0x0) , Command count = 1378 ] 
16:19:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:34: [DVTCommonLib]### Card response as High Capacity from card
16:19:34: [DVTCommonLib]### VOLA from card : 0x1
16:19:34: [DVTCommonLib]### CMD Pattern from card : 0x84
16:19:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619030>, <py_sfcl.CommandDataDefinition object at 0x06619E10>) , Command count = 1379 ] 
16:19:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619180>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 1380 ] 
16:19:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1381 ] 
16:19:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:34: [ SetBusWidth(0x4) , Command count = 1382 ] 
16:19:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:34: ####CSD Registe 2.0 Values####
16:19:34: CSD_STRUCTURE                                 :0x1
16:19:34: Reserv1                                       :0x0
16:19:34: Time Access 1 TAAC                            :0xe
16:19:34: Time Access 2 NSAC*100                        :0x0
16:19:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:34: Card Command Classess CCC                     :0x5b5
16:19:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:34: DSR(driver stage register)  DSR_IMP           :0x0
16:19:34: Reserv2                                       :0x0
16:19:34: Device Size C_SIZE                            :0xedc8
16:19:34: Reserv3                                       :0x0
16:19:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:34: Reserv4                                       :0x0
16:19:34: Write Speed Factor R2W_FACTOR                 :0x2
16:19:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:34: FILE_FORMAT_GRP                               :0x0
16:19:34: COPY flag                                     :0x1
16:19:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:34: File_Format                                   :0x0
16:19:34: CRC                                           :0x0
16:19:34: ####CSD Registe Values####  

16:19:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:34: ProductSerialNumber = 0x23482900
16:19:34: CardMaximumLBA      = 0x3b72400
16:19:34: CardCapacity        = 32G
16:19:34: Is card secure      = 0
16:19:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:34: [DVTCommonLib]###  LogicalWrite called
16:19:35: [ WriteLba(0x67C0D8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1383 ] 
16:19:35: [DVTCommonLib]###  LogicalWrite Completed 

16:19:35: [DVTCommonLib]###  LogicalRead called
16:19:37: [ ReadLba(0x67C0D8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1384 ] 
16:19:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 133 times 
16:19:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x85, 0x0) , Command count = 1385 ] 
16:19:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:37: [DVTCommonLib]### Card response as High Capacity from card
16:19:37: [DVTCommonLib]### VOLA from card : 0x1
16:19:37: [DVTCommonLib]### CMD Pattern from card : 0x85
16:19:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C1E0>, <py_sfcl.CommandDataDefinition object at 0x06619E70>) , Command count = 1386 ] 
16:19:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C330>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 1387 ] 
16:19:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1388 ] 
16:19:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:37: [ SetBusWidth(0x4) , Command count = 1389 ] 
16:19:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:37: ####CSD Registe 2.0 Values####
16:19:37: CSD_STRUCTURE                                 :0x1
16:19:37: Reserv1                                       :0x0
16:19:37: Time Access 1 TAAC                            :0xe
16:19:37: Time Access 2 NSAC*100                        :0x0
16:19:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:37: Card Command Classess CCC                     :0x5b5
16:19:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:37: DSR(driver stage register)  DSR_IMP           :0x0
16:19:37: Reserv2                                       :0x0
16:19:37: Device Size C_SIZE                            :0xedc8
16:19:37: Reserv3                                       :0x0
16:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:37: Reserv4                                       :0x0
16:19:37: Write Speed Factor R2W_FACTOR                 :0x2
16:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:37: FILE_FORMAT_GRP                               :0x0
16:19:37: COPY flag                                     :0x1
16:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:37: File_Format                                   :0x0
16:19:37: CRC                                           :0x0
16:19:37: ####CSD Registe Values####  

16:19:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:37: ProductSerialNumber = 0x23482900
16:19:37: CardMaximumLBA      = 0x3b72400
16:19:37: CardCapacity        = 32G
16:19:37: Is card secure      = 0
16:19:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:37: [DVTCommonLib]###  LogicalWrite called
16:19:39: [ WriteLba(0x158C00, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1390 ] 
16:19:39: [DVTCommonLib]###  LogicalWrite Completed 

16:19:39: [DVTCommonLib]###  LogicalRead called
16:19:40: [ ReadLba(0x158C00, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1391 ] 
16:19:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:40: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:40: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 134 times 
16:19:40: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x86, 0x0) , Command count = 1392 ] 
16:19:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:41: [DVTCommonLib]### Card response as High Capacity from card
16:19:41: [DVTCommonLib]### VOLA from card : 0x1
16:19:41: [DVTCommonLib]### CMD Pattern from card : 0x86
16:19:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C6C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 1393 ] 
16:19:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619990>, <py_sfcl.CommandDataDefinition object at 0x06619F60>) , Command count = 1394 ] 
16:19:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1395 ] 
16:19:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:41: [ SetBusWidth(0x4) , Command count = 1396 ] 
16:19:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:41: ####CSD Registe 2.0 Values####
16:19:41: CSD_STRUCTURE                                 :0x1
16:19:41: Reserv1                                       :0x0
16:19:41: Time Access 1 TAAC                            :0xe
16:19:41: Time Access 2 NSAC*100                        :0x0
16:19:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:41: Card Command Classess CCC                     :0x5b5
16:19:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:41: DSR(driver stage register)  DSR_IMP           :0x0
16:19:41: Reserv2                                       :0x0
16:19:41: Device Size C_SIZE                            :0xedc8
16:19:41: Reserv3                                       :0x0
16:19:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:41: Reserv4                                       :0x0
16:19:41: Write Speed Factor R2W_FACTOR                 :0x2
16:19:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:41: FILE_FORMAT_GRP                               :0x0
16:19:41: COPY flag                                     :0x1
16:19:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:41: File_Format                                   :0x0
16:19:41: CRC                                           :0x0
16:19:41: ####CSD Registe Values####  

16:19:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:41: ProductSerialNumber = 0x23482900
16:19:41: CardMaximumLBA      = 0x3b72400
16:19:41: CardCapacity        = 32G
16:19:41: Is card secure      = 0
16:19:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:41: [DVTCommonLib]###  LogicalWrite called
16:19:42: [ WriteLba(0x2983FE0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1397 ] 
16:19:42: [DVTCommonLib]###  LogicalWrite Completed 

16:19:42: [DVTCommonLib]###  LogicalRead called
16:19:44: [ ReadLba(0x2983FE0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1398 ] 
16:19:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 135 times 
16:19:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x87, 0x0) , Command count = 1399 ] 
16:19:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:44: [DVTCommonLib]### Card response as High Capacity from card
16:19:44: [DVTCommonLib]### VOLA from card : 0x1
16:19:44: [DVTCommonLib]### CMD Pattern from card : 0x87
16:19:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C570>, <py_sfcl.CommandDataDefinition object at 0x0661C1B0>) , Command count = 1400 ] 
16:19:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C4E0>, <py_sfcl.CommandDataDefinition object at 0x0661C540>) , Command count = 1401 ] 
16:19:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1402 ] 
16:19:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:44: [ SetBusWidth(0x4) , Command count = 1403 ] 
16:19:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:44: ####CSD Registe 2.0 Values####
16:19:44: CSD_STRUCTURE                                 :0x1
16:19:44: Reserv1                                       :0x0
16:19:44: Time Access 1 TAAC                            :0xe
16:19:44: Time Access 2 NSAC*100                        :0x0
16:19:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:44: Card Command Classess CCC                     :0x5b5
16:19:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:44: DSR(driver stage register)  DSR_IMP           :0x0
16:19:44: Reserv2                                       :0x0
16:19:44: Device Size C_SIZE                            :0xedc8
16:19:44: Reserv3                                       :0x0
16:19:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:44: Reserv4                                       :0x0
16:19:44: Write Speed Factor R2W_FACTOR                 :0x2
16:19:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:44: FILE_FORMAT_GRP                               :0x0
16:19:44: COPY flag                                     :0x1
16:19:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:44: File_Format                                   :0x0
16:19:44: CRC                                           :0x0
16:19:44: ####CSD Registe Values####  

16:19:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:44: ProductSerialNumber = 0x23482900
16:19:44: CardMaximumLBA      = 0x3b72400
16:19:44: CardCapacity        = 32G
16:19:44: Is card secure      = 0
16:19:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:44: [DVTCommonLib]###  LogicalWrite called
16:19:46: [ WriteLba(0x126FD58, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1404 ] 
16:19:46: [DVTCommonLib]###  LogicalWrite Completed 

16:19:46: [DVTCommonLib]###  LogicalRead called
16:19:48: [ ReadLba(0x126FD58, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1405 ] 
16:19:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 136 times 
16:19:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x88, 0x0) , Command count = 1406 ] 
16:19:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:48: [DVTCommonLib]### Card response as High Capacity from card
16:19:48: [DVTCommonLib]### VOLA from card : 0x1
16:19:48: [DVTCommonLib]### CMD Pattern from card : 0x88
16:19:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 1407 ] 
16:19:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C9C0>, <py_sfcl.CommandDataDefinition object at 0x0661C180>) , Command count = 1408 ] 
16:19:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1409 ] 
16:19:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:48: [ SetBusWidth(0x4) , Command count = 1410 ] 
16:19:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:48: ####CSD Registe 2.0 Values####
16:19:48: CSD_STRUCTURE                                 :0x1
16:19:48: Reserv1                                       :0x0
16:19:48: Time Access 1 TAAC                            :0xe
16:19:48: Time Access 2 NSAC*100                        :0x0
16:19:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:48: Card Command Classess CCC                     :0x5b5
16:19:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:48: DSR(driver stage register)  DSR_IMP           :0x0
16:19:48: Reserv2                                       :0x0
16:19:48: Device Size C_SIZE                            :0xedc8
16:19:48: Reserv3                                       :0x0
16:19:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:48: Reserv4                                       :0x0
16:19:48: Write Speed Factor R2W_FACTOR                 :0x2
16:19:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:48: FILE_FORMAT_GRP                               :0x0
16:19:48: COPY flag                                     :0x1
16:19:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:48: File_Format                                   :0x0
16:19:48: CRC                                           :0x0
16:19:48: ####CSD Registe Values####  

16:19:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:48: ProductSerialNumber = 0x23482900
16:19:48: CardMaximumLBA      = 0x3b72400
16:19:48: CardCapacity        = 32G
16:19:48: Is card secure      = 0
16:19:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:48: [DVTCommonLib]###  LogicalWrite called
16:19:50: [ WriteLba(0x1EB1FC3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1411 ] 
16:19:50: [DVTCommonLib]###  LogicalWrite Completed 

16:19:50: [DVTCommonLib]###  LogicalRead called
16:19:51: [ ReadLba(0x1EB1FC3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1412 ] 
16:19:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 137 times 
16:19:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x89, 0x0) , Command count = 1413 ] 
16:19:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:51: [DVTCommonLib]### Card response as High Capacity from card
16:19:51: [DVTCommonLib]### VOLA from card : 0x1
16:19:51: [DVTCommonLib]### CMD Pattern from card : 0x89
16:19:51: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 1414 ] 
16:19:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C300>, <py_sfcl.CommandDataDefinition object at 0x0661CE40>) , Command count = 1415 ] 
16:19:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1416 ] 
16:19:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:51: [ SetBusWidth(0x4) , Command count = 1417 ] 
16:19:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:51: ####CSD Registe 2.0 Values####
16:19:51: CSD_STRUCTURE                                 :0x1
16:19:51: Reserv1                                       :0x0
16:19:51: Time Access 1 TAAC                            :0xe
16:19:51: Time Access 2 NSAC*100                        :0x0
16:19:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:51: Card Command Classess CCC                     :0x5b5
16:19:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:51: DSR(driver stage register)  DSR_IMP           :0x0
16:19:51: Reserv2                                       :0x0
16:19:51: Device Size C_SIZE                            :0xedc8
16:19:51: Reserv3                                       :0x0
16:19:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:51: Reserv4                                       :0x0
16:19:51: Write Speed Factor R2W_FACTOR                 :0x2
16:19:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:51: FILE_FORMAT_GRP                               :0x0
16:19:51: COPY flag                                     :0x1
16:19:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:51: File_Format                                   :0x0
16:19:51: CRC                                           :0x0
16:19:51: ####CSD Registe Values####  

16:19:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:51: ProductSerialNumber = 0x23482900
16:19:51: CardMaximumLBA      = 0x3b72400
16:19:51: CardCapacity        = 32G
16:19:51: Is card secure      = 0
16:19:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:51: [DVTCommonLib]###  LogicalWrite called
16:19:53: [ WriteLba(0x109CC4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1418 ] 
16:19:53: [DVTCommonLib]###  LogicalWrite Completed 

16:19:53: [DVTCommonLib]###  LogicalRead called
16:19:55: [ ReadLba(0x109CC4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1419 ] 
16:19:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 138 times 
16:19:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8A, 0x0) , Command count = 1420 ] 
16:19:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:55: [DVTCommonLib]### Card response as High Capacity from card
16:19:55: [DVTCommonLib]### VOLA from card : 0x1
16:19:55: [DVTCommonLib]### CMD Pattern from card : 0x8A
16:19:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 1421 ] 
16:19:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C3F0>, <py_sfcl.CommandDataDefinition object at 0x0661CF90>) , Command count = 1422 ] 
16:19:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1423 ] 
16:19:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:55: [ SetBusWidth(0x4) , Command count = 1424 ] 
16:19:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:55: ####CSD Registe 2.0 Values####
16:19:55: CSD_STRUCTURE                                 :0x1
16:19:55: Reserv1                                       :0x0
16:19:55: Time Access 1 TAAC                            :0xe
16:19:55: Time Access 2 NSAC*100                        :0x0
16:19:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:55: Card Command Classess CCC                     :0x5b5
16:19:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:55: DSR(driver stage register)  DSR_IMP           :0x0
16:19:55: Reserv2                                       :0x0
16:19:55: Device Size C_SIZE                            :0xedc8
16:19:55: Reserv3                                       :0x0
16:19:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:55: Reserv4                                       :0x0
16:19:55: Write Speed Factor R2W_FACTOR                 :0x2
16:19:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:55: FILE_FORMAT_GRP                               :0x0
16:19:55: COPY flag                                     :0x1
16:19:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:55: File_Format                                   :0x0
16:19:55: CRC                                           :0x0
16:19:55: ####CSD Registe Values####  

16:19:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:55: ProductSerialNumber = 0x23482900
16:19:55: CardMaximumLBA      = 0x3b72400
16:19:55: CardCapacity        = 32G
16:19:55: Is card secure      = 0
16:19:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:55: [DVTCommonLib]###  LogicalWrite called
16:19:57: [ WriteLba(0x2DB1DC9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1425 ] 
16:19:57: [DVTCommonLib]###  LogicalWrite Completed 

16:19:57: [DVTCommonLib]###  LogicalRead called
16:19:58: [ ReadLba(0x2DB1DC9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1426 ] 
16:19:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 139 times 
16:19:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8B, 0x0) , Command count = 1427 ] 
16:19:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:19:58: [DVTCommonLib]### Card response as High Capacity from card
16:19:58: [DVTCommonLib]### VOLA from card : 0x1
16:19:58: [DVTCommonLib]### CMD Pattern from card : 0x8B
16:19:58: [DVTCommonLib]### Reserved bits from card : 0x0
16:19:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 1428 ] 
16:19:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CD20>, <py_sfcl.CommandDataDefinition object at 0x0661CA50>) , Command count = 1429 ] 
16:19:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1430 ] 
16:19:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:58: [ SetBusWidth(0x4) , Command count = 1431 ] 
16:19:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:19:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:58: ####CSD Registe 2.0 Values####
16:19:58: CSD_STRUCTURE                                 :0x1
16:19:58: Reserv1                                       :0x0
16:19:58: Time Access 1 TAAC                            :0xe
16:19:58: Time Access 2 NSAC*100                        :0x0
16:19:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:58: Card Command Classess CCC                     :0x5b5
16:19:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:58: DSR(driver stage register)  DSR_IMP           :0x0
16:19:58: Reserv2                                       :0x0
16:19:58: Device Size C_SIZE                            :0xedc8
16:19:58: Reserv3                                       :0x0
16:19:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:58: Reserv4                                       :0x0
16:19:58: Write Speed Factor R2W_FACTOR                 :0x2
16:19:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:58: FILE_FORMAT_GRP                               :0x0
16:19:58: COPY flag                                     :0x1
16:19:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:58: File_Format                                   :0x0
16:19:58: CRC                                           :0x0
16:19:58: ####CSD Registe Values####  

16:19:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:19:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:58: ProductSerialNumber = 0x23482900
16:19:58: CardMaximumLBA      = 0x3b72400
16:19:58: CardCapacity        = 32G
16:19:58: Is card secure      = 0
16:19:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:19:58: [DVTCommonLib]###  LogicalWrite called
16:20:00: [ WriteLba(0x8C48DC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1432 ] 
16:20:00: [DVTCommonLib]###  LogicalWrite Completed 

16:20:00: [DVTCommonLib]###  LogicalRead called
16:20:02: [ ReadLba(0x8C48DC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1433 ] 
16:20:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 140 times 
16:20:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8C, 0x0) , Command count = 1434 ] 
16:20:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:02: [DVTCommonLib]### Card response as High Capacity from card
16:20:02: [DVTCommonLib]### VOLA from card : 0x1
16:20:02: [DVTCommonLib]### CMD Pattern from card : 0x8C
16:20:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x06619F90>) , Command count = 1435 ] 
16:20:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CC30>, <py_sfcl.CommandDataDefinition object at 0x0661CD80>) , Command count = 1436 ] 
16:20:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1437 ] 
16:20:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:02: [ SetBusWidth(0x4) , Command count = 1438 ] 
16:20:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:02: ####CSD Registe 2.0 Values####
16:20:02: CSD_STRUCTURE                                 :0x1
16:20:02: Reserv1                                       :0x0
16:20:02: Time Access 1 TAAC                            :0xe
16:20:02: Time Access 2 NSAC*100                        :0x0
16:20:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:02: Card Command Classess CCC                     :0x5b5
16:20:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:02: DSR(driver stage register)  DSR_IMP           :0x0
16:20:02: Reserv2                                       :0x0
16:20:02: Device Size C_SIZE                            :0xedc8
16:20:02: Reserv3                                       :0x0
16:20:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:02: Reserv4                                       :0x0
16:20:02: Write Speed Factor R2W_FACTOR                 :0x2
16:20:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:02: FILE_FORMAT_GRP                               :0x0
16:20:02: COPY flag                                     :0x1
16:20:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:02: File_Format                                   :0x0
16:20:02: CRC                                           :0x0
16:20:02: ####CSD Registe Values####  

16:20:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:02: ProductSerialNumber = 0x23482900
16:20:02: CardMaximumLBA      = 0x3b72400
16:20:02: CardCapacity        = 32G
16:20:02: Is card secure      = 0
16:20:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:02: [DVTCommonLib]###  LogicalWrite called
16:20:04: [ WriteLba(0x1CF4DE7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1439 ] 
16:20:04: [DVTCommonLib]###  LogicalWrite Completed 

16:20:04: [DVTCommonLib]###  LogicalRead called
16:20:05: [ ReadLba(0x1CF4DE7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1440 ] 
16:20:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 141 times 
16:20:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8D, 0x0) , Command count = 1441 ] 
16:20:05: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:05: [DVTCommonLib]### Card response as High Capacity from card
16:20:05: [DVTCommonLib]### VOLA from card : 0x1
16:20:05: [DVTCommonLib]### CMD Pattern from card : 0x8D
16:20:05: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066196F0>, <py_sfcl.CommandDataDefinition object at 0x06619870>) , Command count = 1442 ] 
16:20:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619510>, <py_sfcl.CommandDataDefinition object at 0x0661CB10>) , Command count = 1443 ] 
16:20:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1444 ] 
16:20:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:05: [ SetBusWidth(0x4) , Command count = 1445 ] 
16:20:05: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:06: ####CSD Registe 2.0 Values####
16:20:06: CSD_STRUCTURE                                 :0x1
16:20:06: Reserv1                                       :0x0
16:20:06: Time Access 1 TAAC                            :0xe
16:20:06: Time Access 2 NSAC*100                        :0x0
16:20:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:06: Card Command Classess CCC                     :0x5b5
16:20:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:06: DSR(driver stage register)  DSR_IMP           :0x0
16:20:06: Reserv2                                       :0x0
16:20:06: Device Size C_SIZE                            :0xedc8
16:20:06: Reserv3                                       :0x0
16:20:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:06: Reserv4                                       :0x0
16:20:06: Write Speed Factor R2W_FACTOR                 :0x2
16:20:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:06: FILE_FORMAT_GRP                               :0x0
16:20:06: COPY flag                                     :0x1
16:20:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:06: File_Format                                   :0x0
16:20:06: CRC                                           :0x0
16:20:06: ####CSD Registe Values####  

16:20:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:06: ProductSerialNumber = 0x23482900
16:20:06: CardMaximumLBA      = 0x3b72400
16:20:06: CardCapacity        = 32G
16:20:06: Is card secure      = 0
16:20:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:06: [DVTCommonLib]###  LogicalWrite called
16:20:07: [ WriteLba(0x358BC04, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1446 ] 
16:20:07: [DVTCommonLib]###  LogicalWrite Completed 

16:20:07: [DVTCommonLib]###  LogicalRead called
16:20:09: [ ReadLba(0x358BC04, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1447 ] 
16:20:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 142 times 
16:20:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8E, 0x0) , Command count = 1448 ] 
16:20:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:09: [DVTCommonLib]### Card response as High Capacity from card
16:20:09: [DVTCommonLib]### VOLA from card : 0x1
16:20:09: [DVTCommonLib]### CMD Pattern from card : 0x8E
16:20:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613E10>, <py_sfcl.CommandDataDefinition object at 0x066193F0>) , Command count = 1449 ] 
16:20:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CC60>, <py_sfcl.CommandDataDefinition object at 0x0661CB10>) , Command count = 1450 ] 
16:20:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1451 ] 
16:20:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:09: [ SetBusWidth(0x4) , Command count = 1452 ] 
16:20:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:09: ####CSD Registe 2.0 Values####
16:20:09: CSD_STRUCTURE                                 :0x1
16:20:09: Reserv1                                       :0x0
16:20:09: Time Access 1 TAAC                            :0xe
16:20:09: Time Access 2 NSAC*100                        :0x0
16:20:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:09: Card Command Classess CCC                     :0x5b5
16:20:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:09: DSR(driver stage register)  DSR_IMP           :0x0
16:20:09: Reserv2                                       :0x0
16:20:09: Device Size C_SIZE                            :0xedc8
16:20:09: Reserv3                                       :0x0
16:20:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:09: Reserv4                                       :0x0
16:20:09: Write Speed Factor R2W_FACTOR                 :0x2
16:20:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:09: FILE_FORMAT_GRP                               :0x0
16:20:09: COPY flag                                     :0x1
16:20:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:09: File_Format                                   :0x0
16:20:09: CRC                                           :0x0
16:20:09: ####CSD Registe Values####  

16:20:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:09: ProductSerialNumber = 0x23482900
16:20:09: CardMaximumLBA      = 0x3b72400
16:20:09: CardCapacity        = 32G
16:20:09: Is card secure      = 0
16:20:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:09: [DVTCommonLib]###  LogicalWrite called
16:20:11: [ WriteLba(0x6B01D1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1453 ] 
16:20:11: [DVTCommonLib]###  LogicalWrite Completed 

16:20:11: [DVTCommonLib]###  LogicalRead called
16:20:12: [ ReadLba(0x6B01D1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1454 ] 
16:20:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 143 times 
16:20:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x8F, 0x0) , Command count = 1455 ] 
16:20:12: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:12: [DVTCommonLib]### Card response as High Capacity from card
16:20:12: [DVTCommonLib]### VOLA from card : 0x1
16:20:12: [DVTCommonLib]### CMD Pattern from card : 0x8F
16:20:12: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613EA0>, <py_sfcl.CommandDataDefinition object at 0x06613D20>) , Command count = 1456 ] 
16:20:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C660>, <py_sfcl.CommandDataDefinition object at 0x0661CB10>) , Command count = 1457 ] 
16:20:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1458 ] 
16:20:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:13: [ SetBusWidth(0x4) , Command count = 1459 ] 
16:20:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:13: ####CSD Registe 2.0 Values####
16:20:13: CSD_STRUCTURE                                 :0x1
16:20:13: Reserv1                                       :0x0
16:20:13: Time Access 1 TAAC                            :0xe
16:20:13: Time Access 2 NSAC*100                        :0x0
16:20:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:13: Card Command Classess CCC                     :0x5b5
16:20:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:13: DSR(driver stage register)  DSR_IMP           :0x0
16:20:13: Reserv2                                       :0x0
16:20:13: Device Size C_SIZE                            :0xedc8
16:20:13: Reserv3                                       :0x0
16:20:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:13: Reserv4                                       :0x0
16:20:13: Write Speed Factor R2W_FACTOR                 :0x2
16:20:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:13: FILE_FORMAT_GRP                               :0x0
16:20:13: COPY flag                                     :0x1
16:20:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:13: File_Format                                   :0x0
16:20:13: CRC                                           :0x0
16:20:13: ####CSD Registe Values####  

16:20:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:13: ProductSerialNumber = 0x23482900
16:20:13: CardMaximumLBA      = 0x3b72400
16:20:13: CardCapacity        = 32G
16:20:13: Is card secure      = 0
16:20:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:13: [DVTCommonLib]###  LogicalWrite called
16:20:14: [ WriteLba(0x4794D8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1460 ] 
16:20:14: [DVTCommonLib]###  LogicalWrite Completed 

16:20:14: [DVTCommonLib]###  LogicalRead called
16:20:16: [ ReadLba(0x4794D8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1461 ] 
16:20:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 144 times 
16:20:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x90, 0x0) , Command count = 1462 ] 
16:20:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:16: [DVTCommonLib]### Card response as High Capacity from card
16:20:16: [DVTCommonLib]### VOLA from card : 0x1
16:20:16: [DVTCommonLib]### CMD Pattern from card : 0x90
16:20:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066036F0>, <py_sfcl.CommandDataDefinition object at 0x06613DB0>) , Command count = 1463 ] 
16:20:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C660>, <py_sfcl.CommandDataDefinition object at 0x0661CB10>) , Command count = 1464 ] 
16:20:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1465 ] 
16:20:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:16: [ SetBusWidth(0x4) , Command count = 1466 ] 
16:20:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:16: ####CSD Registe 2.0 Values####
16:20:16: CSD_STRUCTURE                                 :0x1
16:20:16: Reserv1                                       :0x0
16:20:16: Time Access 1 TAAC                            :0xe
16:20:16: Time Access 2 NSAC*100                        :0x0
16:20:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:16: Card Command Classess CCC                     :0x5b5
16:20:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:16: DSR(driver stage register)  DSR_IMP           :0x0
16:20:16: Reserv2                                       :0x0
16:20:16: Device Size C_SIZE                            :0xedc8
16:20:16: Reserv3                                       :0x0
16:20:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:16: Reserv4                                       :0x0
16:20:16: Write Speed Factor R2W_FACTOR                 :0x2
16:20:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:16: FILE_FORMAT_GRP                               :0x0
16:20:16: COPY flag                                     :0x1
16:20:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:16: File_Format                                   :0x0
16:20:16: CRC                                           :0x0
16:20:16: ####CSD Registe Values####  

16:20:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:16: ProductSerialNumber = 0x23482900
16:20:16: CardMaximumLBA      = 0x3b72400
16:20:16: CardCapacity        = 32G
16:20:16: Is card secure      = 0
16:20:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:16: [DVTCommonLib]###  LogicalWrite called
16:20:18: [ WriteLba(0x28488DC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1467 ] 
16:20:18: [DVTCommonLib]###  LogicalWrite Completed 

16:20:18: [DVTCommonLib]###  LogicalRead called
16:20:19: [ ReadLba(0x28488DC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1468 ] 
16:20:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 145 times 
16:20:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x91, 0x0) , Command count = 1469 ] 
16:20:19: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:19: [DVTCommonLib]### Card response as High Capacity from card
16:20:19: [DVTCommonLib]### VOLA from card : 0x1
16:20:19: [DVTCommonLib]### CMD Pattern from card : 0x91
16:20:19: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603F90>) , Command count = 1470 ] 
16:20:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C450>, <py_sfcl.CommandDataDefinition object at 0x06613E40>) , Command count = 1471 ] 
16:20:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1472 ] 
16:20:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:20: [ SetBusWidth(0x4) , Command count = 1473 ] 
16:20:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:20: ####CSD Registe 2.0 Values####
16:20:20: CSD_STRUCTURE                                 :0x1
16:20:20: Reserv1                                       :0x0
16:20:20: Time Access 1 TAAC                            :0xe
16:20:20: Time Access 2 NSAC*100                        :0x0
16:20:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:20: Card Command Classess CCC                     :0x5b5
16:20:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:20: DSR(driver stage register)  DSR_IMP           :0x0
16:20:20: Reserv2                                       :0x0
16:20:20: Device Size C_SIZE                            :0xedc8
16:20:20: Reserv3                                       :0x0
16:20:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:20: Reserv4                                       :0x0
16:20:20: Write Speed Factor R2W_FACTOR                 :0x2
16:20:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:20: FILE_FORMAT_GRP                               :0x0
16:20:20: COPY flag                                     :0x1
16:20:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:20: File_Format                                   :0x0
16:20:20: CRC                                           :0x0
16:20:20: ####CSD Registe Values####  

16:20:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:20: ProductSerialNumber = 0x23482900
16:20:20: CardMaximumLBA      = 0x3b72400
16:20:20: CardCapacity        = 32G
16:20:20: Is card secure      = 0
16:20:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:20: [DVTCommonLib]###  LogicalWrite called
16:20:21: [ WriteLba(0x2E41049, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1474 ] 
16:20:21: [DVTCommonLib]###  LogicalWrite Completed 

16:20:21: [DVTCommonLib]###  LogicalRead called
16:20:23: [ ReadLba(0x2E41049, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1475 ] 
16:20:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 146 times 
16:20:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x92, 0x0) , Command count = 1476 ] 
16:20:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:23: [DVTCommonLib]### Card response as High Capacity from card
16:20:23: [DVTCommonLib]### VOLA from card : 0x1
16:20:23: [DVTCommonLib]### CMD Pattern from card : 0x92
16:20:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90F0>, <py_sfcl.CommandDataDefinition object at 0x066B9060>) , Command count = 1477 ] 
16:20:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603D50>, <py_sfcl.CommandDataDefinition object at 0x0661C270>) , Command count = 1478 ] 
16:20:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1479 ] 
16:20:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:23: [ SetBusWidth(0x4) , Command count = 1480 ] 
16:20:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:23: ####CSD Registe 2.0 Values####
16:20:23: CSD_STRUCTURE                                 :0x1
16:20:23: Reserv1                                       :0x0
16:20:23: Time Access 1 TAAC                            :0xe
16:20:23: Time Access 2 NSAC*100                        :0x0
16:20:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:23: Card Command Classess CCC                     :0x5b5
16:20:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:23: DSR(driver stage register)  DSR_IMP           :0x0
16:20:23: Reserv2                                       :0x0
16:20:23: Device Size C_SIZE                            :0xedc8
16:20:23: Reserv3                                       :0x0
16:20:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:23: Reserv4                                       :0x0
16:20:23: Write Speed Factor R2W_FACTOR                 :0x2
16:20:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:23: FILE_FORMAT_GRP                               :0x0
16:20:23: COPY flag                                     :0x1
16:20:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:23: File_Format                                   :0x0
16:20:23: CRC                                           :0x0
16:20:23: ####CSD Registe Values####  

16:20:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:23: ProductSerialNumber = 0x23482900
16:20:23: CardMaximumLBA      = 0x3b72400
16:20:23: CardCapacity        = 32G
16:20:23: Is card secure      = 0
16:20:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:23: [DVTCommonLib]###  LogicalWrite called
16:20:25: [ WriteLba(0x3A57A11, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1481 ] 
16:20:25: [DVTCommonLib]###  LogicalWrite Completed 

16:20:25: [DVTCommonLib]###  LogicalRead called
16:20:26: [ ReadLba(0x3A57A11, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1482 ] 
16:20:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 147 times 
16:20:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x93, 0x0) , Command count = 1483 ] 
16:20:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:27: [DVTCommonLib]### Card response as High Capacity from card
16:20:27: [DVTCommonLib]### VOLA from card : 0x1
16:20:27: [DVTCommonLib]### CMD Pattern from card : 0x93
16:20:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CAB0>, <py_sfcl.CommandDataDefinition object at 0x0661CE10>) , Command count = 1484 ] 
16:20:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B52D0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 1485 ] 
16:20:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1486 ] 
16:20:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:27: [ SetBusWidth(0x4) , Command count = 1487 ] 
16:20:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:27: ####CSD Registe 2.0 Values####
16:20:27: CSD_STRUCTURE                                 :0x1
16:20:27: Reserv1                                       :0x0
16:20:27: Time Access 1 TAAC                            :0xe
16:20:27: Time Access 2 NSAC*100                        :0x0
16:20:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:27: Card Command Classess CCC                     :0x5b5
16:20:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:27: DSR(driver stage register)  DSR_IMP           :0x0
16:20:27: Reserv2                                       :0x0
16:20:27: Device Size C_SIZE                            :0xedc8
16:20:27: Reserv3                                       :0x0
16:20:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:27: Reserv4                                       :0x0
16:20:27: Write Speed Factor R2W_FACTOR                 :0x2
16:20:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:27: FILE_FORMAT_GRP                               :0x0
16:20:27: COPY flag                                     :0x1
16:20:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:27: File_Format                                   :0x0
16:20:27: CRC                                           :0x0
16:20:27: ####CSD Registe Values####  

16:20:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:27: ProductSerialNumber = 0x23482900
16:20:27: CardMaximumLBA      = 0x3b72400
16:20:27: CardCapacity        = 32G
16:20:27: Is card secure      = 0
16:20:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:27: [DVTCommonLib]###  LogicalWrite called
16:20:28: [ WriteLba(0x24A4C99, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1488 ] 
16:20:28: [DVTCommonLib]###  LogicalWrite Completed 

16:20:28: [DVTCommonLib]###  LogicalRead called
16:20:30: [ ReadLba(0x24A4C99, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1489 ] 
16:20:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 148 times 
16:20:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x94, 0x0) , Command count = 1490 ] 
16:20:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:30: [DVTCommonLib]### Card response as High Capacity from card
16:20:30: [DVTCommonLib]### VOLA from card : 0x1
16:20:30: [DVTCommonLib]### CMD Pattern from card : 0x94
16:20:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 1491 ] 
16:20:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9210>, <py_sfcl.CommandDataDefinition object at 0x066B5C60>) , Command count = 1492 ] 
16:20:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1493 ] 
16:20:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:30: [ SetBusWidth(0x4) , Command count = 1494 ] 
16:20:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:30: ####CSD Registe 2.0 Values####
16:20:30: CSD_STRUCTURE                                 :0x1
16:20:30: Reserv1                                       :0x0
16:20:30: Time Access 1 TAAC                            :0xe
16:20:30: Time Access 2 NSAC*100                        :0x0
16:20:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:30: Card Command Classess CCC                     :0x5b5
16:20:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:30: DSR(driver stage register)  DSR_IMP           :0x0
16:20:30: Reserv2                                       :0x0
16:20:30: Device Size C_SIZE                            :0xedc8
16:20:30: Reserv3                                       :0x0
16:20:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:30: Reserv4                                       :0x0
16:20:30: Write Speed Factor R2W_FACTOR                 :0x2
16:20:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:30: FILE_FORMAT_GRP                               :0x0
16:20:30: COPY flag                                     :0x1
16:20:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:30: File_Format                                   :0x0
16:20:30: CRC                                           :0x0
16:20:30: ####CSD Registe Values####  

16:20:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:30: ProductSerialNumber = 0x23482900
16:20:30: CardMaximumLBA      = 0x3b72400
16:20:30: CardCapacity        = 32G
16:20:30: Is card secure      = 0
16:20:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:30: [DVTCommonLib]###  LogicalWrite called
16:20:32: [ WriteLba(0x13FCEB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1495 ] 
16:20:32: [DVTCommonLib]###  LogicalWrite Completed 

16:20:32: [DVTCommonLib]###  LogicalRead called
16:20:33: [ ReadLba(0x13FCEB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1496 ] 
16:20:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:33: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:33: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 149 times 
16:20:33: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x95, 0x0) , Command count = 1497 ] 
16:20:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:34: [DVTCommonLib]### Card response as High Capacity from card
16:20:34: [DVTCommonLib]### VOLA from card : 0x1
16:20:34: [DVTCommonLib]### CMD Pattern from card : 0x95
16:20:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 1498 ] 
16:20:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B91E0>, <py_sfcl.CommandDataDefinition object at 0x066B90C0>) , Command count = 1499 ] 
16:20:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1500 ] 
16:20:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:34: [ SetBusWidth(0x4) , Command count = 1501 ] 
16:20:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:34: ####CSD Registe 2.0 Values####
16:20:34: CSD_STRUCTURE                                 :0x1
16:20:34: Reserv1                                       :0x0
16:20:34: Time Access 1 TAAC                            :0xe
16:20:34: Time Access 2 NSAC*100                        :0x0
16:20:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:34: Card Command Classess CCC                     :0x5b5
16:20:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:34: DSR(driver stage register)  DSR_IMP           :0x0
16:20:34: Reserv2                                       :0x0
16:20:34: Device Size C_SIZE                            :0xedc8
16:20:34: Reserv3                                       :0x0
16:20:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:34: Reserv4                                       :0x0
16:20:34: Write Speed Factor R2W_FACTOR                 :0x2
16:20:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:34: FILE_FORMAT_GRP                               :0x0
16:20:34: COPY flag                                     :0x1
16:20:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:34: File_Format                                   :0x0
16:20:34: CRC                                           :0x0
16:20:34: ####CSD Registe Values####  

16:20:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:34: ProductSerialNumber = 0x23482900
16:20:34: CardMaximumLBA      = 0x3b72400
16:20:34: CardCapacity        = 32G
16:20:34: Is card secure      = 0
16:20:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:34: [DVTCommonLib]###  LogicalWrite called
16:20:35: [ WriteLba(0x2D3129C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1502 ] 
16:20:35: [DVTCommonLib]###  LogicalWrite Completed 

16:20:35: [DVTCommonLib]###  LogicalRead called
16:20:37: [ ReadLba(0x2D3129C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1503 ] 
16:20:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 150 times 
16:20:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x96, 0x0) , Command count = 1504 ] 
16:20:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:37: [DVTCommonLib]### Card response as High Capacity from card
16:20:37: [DVTCommonLib]### VOLA from card : 0x1
16:20:37: [DVTCommonLib]### CMD Pattern from card : 0x96
16:20:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 1505 ] 
16:20:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B95D0>, <py_sfcl.CommandDataDefinition object at 0x066B97E0>) , Command count = 1506 ] 
16:20:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1507 ] 
16:20:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:37: [ SetBusWidth(0x4) , Command count = 1508 ] 
16:20:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:37: ####CSD Registe 2.0 Values####
16:20:37: CSD_STRUCTURE                                 :0x1
16:20:37: Reserv1                                       :0x0
16:20:37: Time Access 1 TAAC                            :0xe
16:20:37: Time Access 2 NSAC*100                        :0x0
16:20:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:37: Card Command Classess CCC                     :0x5b5
16:20:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:37: DSR(driver stage register)  DSR_IMP           :0x0
16:20:37: Reserv2                                       :0x0
16:20:37: Device Size C_SIZE                            :0xedc8
16:20:37: Reserv3                                       :0x0
16:20:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:37: Reserv4                                       :0x0
16:20:37: Write Speed Factor R2W_FACTOR                 :0x2
16:20:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:37: FILE_FORMAT_GRP                               :0x0
16:20:37: COPY flag                                     :0x1
16:20:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:37: File_Format                                   :0x0
16:20:37: CRC                                           :0x0
16:20:37: ####CSD Registe Values####  

16:20:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:37: ProductSerialNumber = 0x23482900
16:20:37: CardMaximumLBA      = 0x3b72400
16:20:37: CardCapacity        = 32G
16:20:37: Is card secure      = 0
16:20:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:37: [DVTCommonLib]###  LogicalWrite called
16:20:39: [ WriteLba(0xDA27AD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1509 ] 
16:20:39: [DVTCommonLib]###  LogicalWrite Completed 

16:20:39: [DVTCommonLib]###  LogicalRead called
16:20:41: [ ReadLba(0xDA27AD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1510 ] 
16:20:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 151 times 
16:20:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x97, 0x0) , Command count = 1511 ] 
16:20:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:41: [DVTCommonLib]### Card response as High Capacity from card
16:20:41: [DVTCommonLib]### VOLA from card : 0x1
16:20:41: [DVTCommonLib]### CMD Pattern from card : 0x97
16:20:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9C30>, <py_sfcl.CommandDataDefinition object at 0x066B9A50>) , Command count = 1512 ] 
16:20:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9990>, <py_sfcl.CommandDataDefinition object at 0x066B9A20>) , Command count = 1513 ] 
16:20:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1514 ] 
16:20:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:41: [ SetBusWidth(0x4) , Command count = 1515 ] 
16:20:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:41: ####CSD Registe 2.0 Values####
16:20:41: CSD_STRUCTURE                                 :0x1
16:20:41: Reserv1                                       :0x0
16:20:41: Time Access 1 TAAC                            :0xe
16:20:41: Time Access 2 NSAC*100                        :0x0
16:20:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:41: Card Command Classess CCC                     :0x5b5
16:20:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:41: DSR(driver stage register)  DSR_IMP           :0x0
16:20:41: Reserv2                                       :0x0
16:20:41: Device Size C_SIZE                            :0xedc8
16:20:41: Reserv3                                       :0x0
16:20:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:41: Reserv4                                       :0x0
16:20:41: Write Speed Factor R2W_FACTOR                 :0x2
16:20:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:41: FILE_FORMAT_GRP                               :0x0
16:20:41: COPY flag                                     :0x1
16:20:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:41: File_Format                                   :0x0
16:20:41: CRC                                           :0x0
16:20:41: ####CSD Registe Values####  

16:20:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:41: ProductSerialNumber = 0x23482900
16:20:41: CardMaximumLBA      = 0x3b72400
16:20:41: CardCapacity        = 32G
16:20:41: Is card secure      = 0
16:20:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:41: [DVTCommonLib]###  LogicalWrite called
16:20:42: [ WriteLba(0x250672, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1516 ] 
16:20:42: [DVTCommonLib]###  LogicalWrite Completed 

16:20:42: [DVTCommonLib]###  LogicalRead called
16:20:44: [ ReadLba(0x250672, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1517 ] 
16:20:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 152 times 
16:20:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x98, 0x0) , Command count = 1518 ] 
16:20:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:44: [DVTCommonLib]### Card response as High Capacity from card
16:20:44: [DVTCommonLib]### VOLA from card : 0x1
16:20:44: [DVTCommonLib]### CMD Pattern from card : 0x98
16:20:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 1519 ] 
16:20:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9A80>, <py_sfcl.CommandDataDefinition object at 0x066B9CC0>) , Command count = 1520 ] 
16:20:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1521 ] 
16:20:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:44: [ SetBusWidth(0x4) , Command count = 1522 ] 
16:20:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:44: ####CSD Registe 2.0 Values####
16:20:44: CSD_STRUCTURE                                 :0x1
16:20:44: Reserv1                                       :0x0
16:20:44: Time Access 1 TAAC                            :0xe
16:20:44: Time Access 2 NSAC*100                        :0x0
16:20:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:44: Card Command Classess CCC                     :0x5b5
16:20:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:44: DSR(driver stage register)  DSR_IMP           :0x0
16:20:44: Reserv2                                       :0x0
16:20:44: Device Size C_SIZE                            :0xedc8
16:20:44: Reserv3                                       :0x0
16:20:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:44: Reserv4                                       :0x0
16:20:44: Write Speed Factor R2W_FACTOR                 :0x2
16:20:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:44: FILE_FORMAT_GRP                               :0x0
16:20:44: COPY flag                                     :0x1
16:20:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:44: File_Format                                   :0x0
16:20:44: CRC                                           :0x0
16:20:44: ####CSD Registe Values####  

16:20:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:44: ProductSerialNumber = 0x23482900
16:20:44: CardMaximumLBA      = 0x3b72400
16:20:44: CardCapacity        = 32G
16:20:44: Is card secure      = 0
16:20:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:44: [DVTCommonLib]###  LogicalWrite called
16:20:46: [ WriteLba(0x2C244B5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1523 ] 
16:20:46: [DVTCommonLib]###  LogicalWrite Completed 

16:20:46: [DVTCommonLib]###  LogicalRead called
16:20:48: [ ReadLba(0x2C244B5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1524 ] 
16:20:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 153 times 
16:20:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x99, 0x0) , Command count = 1525 ] 
16:20:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:48: [DVTCommonLib]### Card response as High Capacity from card
16:20:48: [DVTCommonLib]### VOLA from card : 0x1
16:20:48: [DVTCommonLib]### CMD Pattern from card : 0x99
16:20:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 1526 ] 
16:20:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552CEA0>, <py_sfcl.CommandDataDefinition object at 0x066B9F60>) , Command count = 1527 ] 
16:20:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1528 ] 
16:20:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:48: [ SetBusWidth(0x4) , Command count = 1529 ] 
16:20:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:48: ####CSD Registe 2.0 Values####
16:20:48: CSD_STRUCTURE                                 :0x1
16:20:48: Reserv1                                       :0x0
16:20:48: Time Access 1 TAAC                            :0xe
16:20:48: Time Access 2 NSAC*100                        :0x0
16:20:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:48: Card Command Classess CCC                     :0x5b5
16:20:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:48: DSR(driver stage register)  DSR_IMP           :0x0
16:20:48: Reserv2                                       :0x0
16:20:48: Device Size C_SIZE                            :0xedc8
16:20:48: Reserv3                                       :0x0
16:20:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:48: Reserv4                                       :0x0
16:20:48: Write Speed Factor R2W_FACTOR                 :0x2
16:20:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:48: FILE_FORMAT_GRP                               :0x0
16:20:48: COPY flag                                     :0x1
16:20:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:48: File_Format                                   :0x0
16:20:48: CRC                                           :0x0
16:20:48: ####CSD Registe Values####  

16:20:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:48: ProductSerialNumber = 0x23482900
16:20:48: CardMaximumLBA      = 0x3b72400
16:20:48: CardCapacity        = 32G
16:20:48: Is card secure      = 0
16:20:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:48: [DVTCommonLib]###  LogicalWrite called
16:20:50: [ WriteLba(0xA16B4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1530 ] 
16:20:50: [DVTCommonLib]###  LogicalWrite Completed 

16:20:50: [DVTCommonLib]###  LogicalRead called
16:20:51: [ ReadLba(0xA16B4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1531 ] 
16:20:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 154 times 
16:20:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9A, 0x0) , Command count = 1532 ] 
16:20:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:51: [DVTCommonLib]### Card response as High Capacity from card
16:20:51: [DVTCommonLib]### VOLA from card : 0x1
16:20:51: [DVTCommonLib]### CMD Pattern from card : 0x9A
16:20:51: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055409C0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 1533 ] 
16:20:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C690>, <py_sfcl.CommandDataDefinition object at 0x066B9F00>) , Command count = 1534 ] 
16:20:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1535 ] 
16:20:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:51: [ SetBusWidth(0x4) , Command count = 1536 ] 
16:20:51: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:51: ####CSD Registe 2.0 Values####
16:20:51: CSD_STRUCTURE                                 :0x1
16:20:51: Reserv1                                       :0x0
16:20:51: Time Access 1 TAAC                            :0xe
16:20:51: Time Access 2 NSAC*100                        :0x0
16:20:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:51: Card Command Classess CCC                     :0x5b5
16:20:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:51: DSR(driver stage register)  DSR_IMP           :0x0
16:20:51: Reserv2                                       :0x0
16:20:51: Device Size C_SIZE                            :0xedc8
16:20:51: Reserv3                                       :0x0
16:20:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:51: Reserv4                                       :0x0
16:20:51: Write Speed Factor R2W_FACTOR                 :0x2
16:20:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:51: FILE_FORMAT_GRP                               :0x0
16:20:51: COPY flag                                     :0x1
16:20:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:51: File_Format                                   :0x0
16:20:51: CRC                                           :0x0
16:20:51: ####CSD Registe Values####  

16:20:51: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:51: ProductSerialNumber = 0x23482900
16:20:51: CardMaximumLBA      = 0x3b72400
16:20:51: CardCapacity        = 32G
16:20:51: Is card secure      = 0
16:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:51: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:51: [DVTCommonLib]###  LogicalWrite called
16:20:53: [ WriteLba(0x1E110A6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1537 ] 
16:20:53: [DVTCommonLib]###  LogicalWrite Completed 

16:20:53: [DVTCommonLib]###  LogicalRead called
16:20:55: [ ReadLba(0x1E110A6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1538 ] 
16:20:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 155 times 
16:20:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9B, 0x0) , Command count = 1539 ] 
16:20:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:55: [DVTCommonLib]### Card response as High Capacity from card
16:20:55: [DVTCommonLib]### VOLA from card : 0x1
16:20:55: [DVTCommonLib]### CMD Pattern from card : 0x9B
16:20:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9840>, <py_sfcl.CommandDataDefinition object at 0x066B9DB0>) , Command count = 1540 ] 
16:20:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0553AFC0>, <py_sfcl.CommandDataDefinition object at 0x066B9EA0>) , Command count = 1541 ] 
16:20:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1542 ] 
16:20:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:55: [ SetBusWidth(0x4) , Command count = 1543 ] 
16:20:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:55: ####CSD Registe 2.0 Values####
16:20:55: CSD_STRUCTURE                                 :0x1
16:20:55: Reserv1                                       :0x0
16:20:55: Time Access 1 TAAC                            :0xe
16:20:55: Time Access 2 NSAC*100                        :0x0
16:20:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:55: Card Command Classess CCC                     :0x5b5
16:20:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:55: DSR(driver stage register)  DSR_IMP           :0x0
16:20:55: Reserv2                                       :0x0
16:20:55: Device Size C_SIZE                            :0xedc8
16:20:55: Reserv3                                       :0x0
16:20:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:55: Reserv4                                       :0x0
16:20:55: Write Speed Factor R2W_FACTOR                 :0x2
16:20:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:55: FILE_FORMAT_GRP                               :0x0
16:20:55: COPY flag                                     :0x1
16:20:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:55: File_Format                                   :0x0
16:20:55: CRC                                           :0x0
16:20:55: ####CSD Registe Values####  

16:20:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:55: ProductSerialNumber = 0x23482900
16:20:55: CardMaximumLBA      = 0x3b72400
16:20:55: CardCapacity        = 32G
16:20:55: Is card secure      = 0
16:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:55: [DVTCommonLib]###  LogicalWrite called
16:20:57: [ WriteLba(0x2333DE0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1544 ] 
16:20:57: [DVTCommonLib]###  LogicalWrite Completed 

16:20:57: [DVTCommonLib]###  LogicalRead called
16:20:58: [ ReadLba(0x2333DE0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1545 ] 
16:20:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 156 times 
16:20:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9C, 0x0) , Command count = 1546 ] 
16:20:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:20:58: [DVTCommonLib]### Card response as High Capacity from card
16:20:58: [DVTCommonLib]### VOLA from card : 0x1
16:20:58: [DVTCommonLib]### CMD Pattern from card : 0x9C
16:20:58: [DVTCommonLib]### Reserved bits from card : 0x0
16:20:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482030>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 1547 ] 
16:20:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9750>, <py_sfcl.CommandDataDefinition object at 0x066B5780>) , Command count = 1548 ] 
16:20:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1549 ] 
16:20:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:58: [ SetBusWidth(0x4) , Command count = 1550 ] 
16:20:58: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:20:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:58: ####CSD Registe 2.0 Values####
16:20:58: CSD_STRUCTURE                                 :0x1
16:20:58: Reserv1                                       :0x0
16:20:58: Time Access 1 TAAC                            :0xe
16:20:58: Time Access 2 NSAC*100                        :0x0
16:20:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:58: Card Command Classess CCC                     :0x5b5
16:20:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:58: DSR(driver stage register)  DSR_IMP           :0x0
16:20:58: Reserv2                                       :0x0
16:20:58: Device Size C_SIZE                            :0xedc8
16:20:58: Reserv3                                       :0x0
16:20:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:58: Reserv4                                       :0x0
16:20:58: Write Speed Factor R2W_FACTOR                 :0x2
16:20:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:58: FILE_FORMAT_GRP                               :0x0
16:20:58: COPY flag                                     :0x1
16:20:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:58: File_Format                                   :0x0
16:20:58: CRC                                           :0x0
16:20:58: ####CSD Registe Values####  

16:20:58: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:20:58: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:59: ProductSerialNumber = 0x23482900
16:20:59: CardMaximumLBA      = 0x3b72400
16:20:59: CardCapacity        = 32G
16:20:59: Is card secure      = 0
16:20:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:20:59: [DVTCommonLib]###  LogicalWrite called
16:21:00: [ WriteLba(0x2DA83C3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1551 ] 
16:21:00: [DVTCommonLib]###  LogicalWrite Completed 

16:21:00: [DVTCommonLib]###  LogicalRead called
16:21:02: [ ReadLba(0x2DA83C3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1552 ] 
16:21:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 157 times 
16:21:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9D, 0x0) , Command count = 1553 ] 
16:21:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:02: [DVTCommonLib]### Card response as High Capacity from card
16:21:02: [DVTCommonLib]### VOLA from card : 0x1
16:21:02: [DVTCommonLib]### CMD Pattern from card : 0x9D
16:21:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066B96C0>) , Command count = 1554 ] 
16:21:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540F30>, <py_sfcl.CommandDataDefinition object at 0x066B94E0>) , Command count = 1555 ] 
16:21:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1556 ] 
16:21:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:02: [ SetBusWidth(0x4) , Command count = 1557 ] 
16:21:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:02: ####CSD Registe 2.0 Values####
16:21:02: CSD_STRUCTURE                                 :0x1
16:21:02: Reserv1                                       :0x0
16:21:02: Time Access 1 TAAC                            :0xe
16:21:02: Time Access 2 NSAC*100                        :0x0
16:21:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:02: Card Command Classess CCC                     :0x5b5
16:21:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:02: DSR(driver stage register)  DSR_IMP           :0x0
16:21:02: Reserv2                                       :0x0
16:21:02: Device Size C_SIZE                            :0xedc8
16:21:02: Reserv3                                       :0x0
16:21:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:02: Reserv4                                       :0x0
16:21:02: Write Speed Factor R2W_FACTOR                 :0x2
16:21:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:02: FILE_FORMAT_GRP                               :0x0
16:21:02: COPY flag                                     :0x1
16:21:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:02: File_Format                                   :0x0
16:21:02: CRC                                           :0x0
16:21:02: ####CSD Registe Values####  

16:21:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:02: ProductSerialNumber = 0x23482900
16:21:02: CardMaximumLBA      = 0x3b72400
16:21:02: CardCapacity        = 32G
16:21:02: Is card secure      = 0
16:21:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:02: [DVTCommonLib]###  LogicalWrite called
16:21:04: [ WriteLba(0x31256D6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1558 ] 
16:21:04: [DVTCommonLib]###  LogicalWrite Completed 

16:21:04: [DVTCommonLib]###  LogicalRead called
16:21:05: [ ReadLba(0x31256D6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1559 ] 
16:21:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 158 times 
16:21:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9E, 0x0) , Command count = 1560 ] 
16:21:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:06: [DVTCommonLib]### Card response as High Capacity from card
16:21:06: [DVTCommonLib]### VOLA from card : 0x1
16:21:06: [DVTCommonLib]### CMD Pattern from card : 0x9E
16:21:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 1561 ] 
16:21:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9630>, <py_sfcl.CommandDataDefinition object at 0x066B9ED0>) , Command count = 1562 ] 
16:21:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1563 ] 
16:21:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:06: [ SetBusWidth(0x4) , Command count = 1564 ] 
16:21:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:06: ####CSD Registe 2.0 Values####
16:21:06: CSD_STRUCTURE                                 :0x1
16:21:06: Reserv1                                       :0x0
16:21:06: Time Access 1 TAAC                            :0xe
16:21:06: Time Access 2 NSAC*100                        :0x0
16:21:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:06: Card Command Classess CCC                     :0x5b5
16:21:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:06: DSR(driver stage register)  DSR_IMP           :0x0
16:21:06: Reserv2                                       :0x0
16:21:06: Device Size C_SIZE                            :0xedc8
16:21:06: Reserv3                                       :0x0
16:21:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:06: Reserv4                                       :0x0
16:21:06: Write Speed Factor R2W_FACTOR                 :0x2
16:21:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:06: FILE_FORMAT_GRP                               :0x0
16:21:06: COPY flag                                     :0x1
16:21:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:06: File_Format                                   :0x0
16:21:06: CRC                                           :0x0
16:21:06: ####CSD Registe Values####  

16:21:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:06: ProductSerialNumber = 0x23482900
16:21:06: CardMaximumLBA      = 0x3b72400
16:21:06: CardCapacity        = 32G
16:21:06: Is card secure      = 0
16:21:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:06: [DVTCommonLib]###  LogicalWrite called
16:21:07: [ WriteLba(0x1CD5D64, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1565 ] 
16:21:07: [DVTCommonLib]###  LogicalWrite Completed 

16:21:07: [DVTCommonLib]###  LogicalRead called
16:21:09: [ ReadLba(0x1CD5D64, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1566 ] 
16:21:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 159 times 
16:21:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0x9F, 0x0) , Command count = 1567 ] 
16:21:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:09: [DVTCommonLib]### Card response as High Capacity from card
16:21:09: [DVTCommonLib]### VOLA from card : 0x1
16:21:09: [DVTCommonLib]### CMD Pattern from card : 0x9F
16:21:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9570>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 1568 ] 
16:21:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603210>, <py_sfcl.CommandDataDefinition object at 0x06603720>) , Command count = 1569 ] 
16:21:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1570 ] 
16:21:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:09: [ SetBusWidth(0x4) , Command count = 1571 ] 
16:21:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:09: ####CSD Registe 2.0 Values####
16:21:09: CSD_STRUCTURE                                 :0x1
16:21:09: Reserv1                                       :0x0
16:21:09: Time Access 1 TAAC                            :0xe
16:21:09: Time Access 2 NSAC*100                        :0x0
16:21:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:09: Card Command Classess CCC                     :0x5b5
16:21:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:09: DSR(driver stage register)  DSR_IMP           :0x0
16:21:09: Reserv2                                       :0x0
16:21:09: Device Size C_SIZE                            :0xedc8
16:21:09: Reserv3                                       :0x0
16:21:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:09: Reserv4                                       :0x0
16:21:09: Write Speed Factor R2W_FACTOR                 :0x2
16:21:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:09: FILE_FORMAT_GRP                               :0x0
16:21:09: COPY flag                                     :0x1
16:21:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:09: File_Format                                   :0x0
16:21:09: CRC                                           :0x0
16:21:09: ####CSD Registe Values####  

16:21:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:09: ProductSerialNumber = 0x23482900
16:21:09: CardMaximumLBA      = 0x3b72400
16:21:09: CardCapacity        = 32G
16:21:09: Is card secure      = 0
16:21:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:09: [DVTCommonLib]###  LogicalWrite called
16:21:11: [ WriteLba(0xFB1A90, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1572 ] 
16:21:11: [DVTCommonLib]###  LogicalWrite Completed 

16:21:11: [DVTCommonLib]###  LogicalRead called
16:21:12: [ ReadLba(0xFB1A90, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1573 ] 
16:21:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 160 times 
16:21:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA0, 0x0) , Command count = 1574 ] 
16:21:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:13: [DVTCommonLib]### Card response as High Capacity from card
16:21:13: [DVTCommonLib]### VOLA from card : 0x1
16:21:13: [DVTCommonLib]### CMD Pattern from card : 0xA0
16:21:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9510>, <py_sfcl.CommandDataDefinition object at 0x066035A0>) , Command count = 1575 ] 
16:21:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603F30>, <py_sfcl.CommandDataDefinition object at 0x06603480>) , Command count = 1576 ] 
16:21:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1577 ] 
16:21:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:13: [ SetBusWidth(0x4) , Command count = 1578 ] 
16:21:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:13: ####CSD Registe 2.0 Values####
16:21:13: CSD_STRUCTURE                                 :0x1
16:21:13: Reserv1                                       :0x0
16:21:13: Time Access 1 TAAC                            :0xe
16:21:13: Time Access 2 NSAC*100                        :0x0
16:21:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:13: Card Command Classess CCC                     :0x5b5
16:21:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:13: DSR(driver stage register)  DSR_IMP           :0x0
16:21:13: Reserv2                                       :0x0
16:21:13: Device Size C_SIZE                            :0xedc8
16:21:13: Reserv3                                       :0x0
16:21:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:13: Reserv4                                       :0x0
16:21:13: Write Speed Factor R2W_FACTOR                 :0x2
16:21:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:13: FILE_FORMAT_GRP                               :0x0
16:21:13: COPY flag                                     :0x1
16:21:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:13: File_Format                                   :0x0
16:21:13: CRC                                           :0x0
16:21:13: ####CSD Registe Values####  

16:21:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:13: ProductSerialNumber = 0x23482900
16:21:13: CardMaximumLBA      = 0x3b72400
16:21:13: CardCapacity        = 32G
16:21:13: Is card secure      = 0
16:21:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:13: [DVTCommonLib]###  LogicalWrite called
16:21:14: [ WriteLba(0x14DA6AE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1579 ] 
16:21:14: [DVTCommonLib]###  LogicalWrite Completed 

16:21:14: [DVTCommonLib]###  LogicalRead called
16:21:16: [ ReadLba(0x14DA6AE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1580 ] 
16:21:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 161 times 
16:21:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA1, 0x0) , Command count = 1581 ] 
16:21:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:16: [DVTCommonLib]### Card response as High Capacity from card
16:21:16: [DVTCommonLib]### VOLA from card : 0x1
16:21:16: [DVTCommonLib]### CMD Pattern from card : 0xA1
16:21:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x06603A80>) , Command count = 1582 ] 
16:21:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603690>, <py_sfcl.CommandDataDefinition object at 0x06603BD0>) , Command count = 1583 ] 
16:21:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1584 ] 
16:21:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:16: [ SetBusWidth(0x4) , Command count = 1585 ] 
16:21:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:16: ####CSD Registe 2.0 Values####
16:21:16: CSD_STRUCTURE                                 :0x1
16:21:16: Reserv1                                       :0x0
16:21:16: Time Access 1 TAAC                            :0xe
16:21:16: Time Access 2 NSAC*100                        :0x0
16:21:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:16: Card Command Classess CCC                     :0x5b5
16:21:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:16: DSR(driver stage register)  DSR_IMP           :0x0
16:21:16: Reserv2                                       :0x0
16:21:16: Device Size C_SIZE                            :0xedc8
16:21:16: Reserv3                                       :0x0
16:21:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:16: Reserv4                                       :0x0
16:21:16: Write Speed Factor R2W_FACTOR                 :0x2
16:21:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:16: FILE_FORMAT_GRP                               :0x0
16:21:16: COPY flag                                     :0x1
16:21:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:16: File_Format                                   :0x0
16:21:16: CRC                                           :0x0
16:21:16: ####CSD Registe Values####  

16:21:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:16: ProductSerialNumber = 0x23482900
16:21:16: CardMaximumLBA      = 0x3b72400
16:21:16: CardCapacity        = 32G
16:21:16: Is card secure      = 0
16:21:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:16: [DVTCommonLib]###  LogicalWrite called
16:21:18: [ WriteLba(0x1AC91DB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1586 ] 
16:21:18: [DVTCommonLib]###  LogicalWrite Completed 

16:21:18: [DVTCommonLib]###  LogicalRead called
16:21:19: [ ReadLba(0x1AC91DB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1587 ] 
16:21:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 162 times 
16:21:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA2, 0x0) , Command count = 1588 ] 
16:21:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:20: [DVTCommonLib]### Card response as High Capacity from card
16:21:20: [DVTCommonLib]### VOLA from card : 0x1
16:21:20: [DVTCommonLib]### CMD Pattern from card : 0xA2
16:21:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x06603CF0>) , Command count = 1589 ] 
16:21:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C180>, <py_sfcl.CommandDataDefinition object at 0x06603D20>) , Command count = 1590 ] 
16:21:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1591 ] 
16:21:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:20: [ SetBusWidth(0x4) , Command count = 1592 ] 
16:21:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:20: ####CSD Registe 2.0 Values####
16:21:20: CSD_STRUCTURE                                 :0x1
16:21:20: Reserv1                                       :0x0
16:21:20: Time Access 1 TAAC                            :0xe
16:21:20: Time Access 2 NSAC*100                        :0x0
16:21:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:20: Card Command Classess CCC                     :0x5b5
16:21:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:20: DSR(driver stage register)  DSR_IMP           :0x0
16:21:20: Reserv2                                       :0x0
16:21:20: Device Size C_SIZE                            :0xedc8
16:21:20: Reserv3                                       :0x0
16:21:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:20: Reserv4                                       :0x0
16:21:20: Write Speed Factor R2W_FACTOR                 :0x2
16:21:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:20: FILE_FORMAT_GRP                               :0x0
16:21:20: COPY flag                                     :0x1
16:21:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:20: File_Format                                   :0x0
16:21:20: CRC                                           :0x0
16:21:20: ####CSD Registe Values####  

16:21:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:20: ProductSerialNumber = 0x23482900
16:21:20: CardMaximumLBA      = 0x3b72400
16:21:20: CardCapacity        = 32G
16:21:20: Is card secure      = 0
16:21:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:20: [DVTCommonLib]###  LogicalWrite called
16:21:21: [ WriteLba(0x121E1F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1593 ] 
16:21:21: [DVTCommonLib]###  LogicalWrite Completed 

16:21:21: [DVTCommonLib]###  LogicalRead called
16:21:23: [ ReadLba(0x121E1F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1594 ] 
16:21:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 163 times 
16:21:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA3, 0x0) , Command count = 1595 ] 
16:21:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:23: [DVTCommonLib]### Card response as High Capacity from card
16:21:23: [DVTCommonLib]### VOLA from card : 0x1
16:21:23: [DVTCommonLib]### CMD Pattern from card : 0xA3
16:21:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603BA0>, <py_sfcl.CommandDataDefinition object at 0x06613B10>) , Command count = 1596 ] 
16:21:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C150>, <py_sfcl.CommandDataDefinition object at 0x0660C180>) , Command count = 1597 ] 
16:21:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1598 ] 
16:21:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:23: [ SetBusWidth(0x4) , Command count = 1599 ] 
16:21:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:23: ####CSD Registe 2.0 Values####
16:21:23: CSD_STRUCTURE                                 :0x1
16:21:23: Reserv1                                       :0x0
16:21:23: Time Access 1 TAAC                            :0xe
16:21:23: Time Access 2 NSAC*100                        :0x0
16:21:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:23: Card Command Classess CCC                     :0x5b5
16:21:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:23: DSR(driver stage register)  DSR_IMP           :0x0
16:21:23: Reserv2                                       :0x0
16:21:23: Device Size C_SIZE                            :0xedc8
16:21:23: Reserv3                                       :0x0
16:21:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:23: Reserv4                                       :0x0
16:21:23: Write Speed Factor R2W_FACTOR                 :0x2
16:21:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:23: FILE_FORMAT_GRP                               :0x0
16:21:23: COPY flag                                     :0x1
16:21:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:23: File_Format                                   :0x0
16:21:23: CRC                                           :0x0
16:21:23: ####CSD Registe Values####  

16:21:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:23: ProductSerialNumber = 0x23482900
16:21:23: CardMaximumLBA      = 0x3b72400
16:21:23: CardCapacity        = 32G
16:21:23: Is card secure      = 0
16:21:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:23: [DVTCommonLib]###  LogicalWrite called
16:21:25: [ WriteLba(0x3060D2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1600 ] 
16:21:25: [DVTCommonLib]###  LogicalWrite Completed 

16:21:25: [DVTCommonLib]###  LogicalRead called
16:21:26: [ ReadLba(0x3060D2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1601 ] 
16:21:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:26: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:26: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 164 times 
16:21:26: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA4, 0x0) , Command count = 1602 ] 
16:21:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:27: [DVTCommonLib]### Card response as High Capacity from card
16:21:27: [DVTCommonLib]### VOLA from card : 0x1
16:21:27: [DVTCommonLib]### CMD Pattern from card : 0xA4
16:21:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482780>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 1603 ] 
16:21:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613960>, <py_sfcl.CommandDataDefinition object at 0x06613CF0>) , Command count = 1604 ] 
16:21:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1605 ] 
16:21:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:27: [ SetBusWidth(0x4) , Command count = 1606 ] 
16:21:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:27: ####CSD Registe 2.0 Values####
16:21:27: CSD_STRUCTURE                                 :0x1
16:21:27: Reserv1                                       :0x0
16:21:27: Time Access 1 TAAC                            :0xe
16:21:27: Time Access 2 NSAC*100                        :0x0
16:21:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:27: Card Command Classess CCC                     :0x5b5
16:21:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:27: DSR(driver stage register)  DSR_IMP           :0x0
16:21:27: Reserv2                                       :0x0
16:21:27: Device Size C_SIZE                            :0xedc8
16:21:27: Reserv3                                       :0x0
16:21:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:27: Reserv4                                       :0x0
16:21:27: Write Speed Factor R2W_FACTOR                 :0x2
16:21:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:27: FILE_FORMAT_GRP                               :0x0
16:21:27: COPY flag                                     :0x1
16:21:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:27: File_Format                                   :0x0
16:21:27: CRC                                           :0x0
16:21:27: ####CSD Registe Values####  

16:21:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:27: ProductSerialNumber = 0x23482900
16:21:27: CardMaximumLBA      = 0x3b72400
16:21:27: CardCapacity        = 32G
16:21:27: Is card secure      = 0
16:21:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:27: [DVTCommonLib]###  LogicalWrite called
16:21:28: [ WriteLba(0x1B6C065, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1607 ] 
16:21:28: [DVTCommonLib]###  LogicalWrite Completed 

16:21:28: [DVTCommonLib]###  LogicalRead called
16:21:30: [ ReadLba(0x1B6C065, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1608 ] 
16:21:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 165 times 
16:21:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA5, 0x0) , Command count = 1609 ] 
16:21:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:30: [DVTCommonLib]### Card response as High Capacity from card
16:21:30: [DVTCommonLib]### VOLA from card : 0x1
16:21:30: [DVTCommonLib]### CMD Pattern from card : 0xA5
16:21:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 1610 ] 
16:21:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603B40>, <py_sfcl.CommandDataDefinition object at 0x066139C0>) , Command count = 1611 ] 
16:21:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1612 ] 
16:21:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:30: [ SetBusWidth(0x4) , Command count = 1613 ] 
16:21:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:30: ####CSD Registe 2.0 Values####
16:21:30: CSD_STRUCTURE                                 :0x1
16:21:30: Reserv1                                       :0x0
16:21:30: Time Access 1 TAAC                            :0xe
16:21:30: Time Access 2 NSAC*100                        :0x0
16:21:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:30: Card Command Classess CCC                     :0x5b5
16:21:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:30: DSR(driver stage register)  DSR_IMP           :0x0
16:21:30: Reserv2                                       :0x0
16:21:30: Device Size C_SIZE                            :0xedc8
16:21:30: Reserv3                                       :0x0
16:21:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:30: Reserv4                                       :0x0
16:21:30: Write Speed Factor R2W_FACTOR                 :0x2
16:21:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:30: FILE_FORMAT_GRP                               :0x0
16:21:30: COPY flag                                     :0x1
16:21:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:30: File_Format                                   :0x0
16:21:30: CRC                                           :0x0
16:21:30: ####CSD Registe Values####  

16:21:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:30: ProductSerialNumber = 0x23482900
16:21:30: CardMaximumLBA      = 0x3b72400
16:21:30: CardCapacity        = 32G
16:21:30: Is card secure      = 0
16:21:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:30: [DVTCommonLib]###  LogicalWrite called
16:21:32: [ WriteLba(0xC74BDD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1614 ] 
16:21:32: [DVTCommonLib]###  LogicalWrite Completed 

16:21:32: [DVTCommonLib]###  LogicalRead called
16:21:34: [ ReadLba(0xC74BDD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1615 ] 
16:21:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 166 times 
16:21:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA6, 0x0) , Command count = 1616 ] 
16:21:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:34: [DVTCommonLib]### Card response as High Capacity from card
16:21:34: [DVTCommonLib]### VOLA from card : 0x1
16:21:34: [DVTCommonLib]### CMD Pattern from card : 0xA6
16:21:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619690>, <py_sfcl.CommandDataDefinition object at 0x066196C0>) , Command count = 1617 ] 
16:21:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619270>, <py_sfcl.CommandDataDefinition object at 0x066190F0>) , Command count = 1618 ] 
16:21:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1619 ] 
16:21:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:34: [ SetBusWidth(0x4) , Command count = 1620 ] 
16:21:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:34: ####CSD Registe 2.0 Values####
16:21:34: CSD_STRUCTURE                                 :0x1
16:21:34: Reserv1                                       :0x0
16:21:34: Time Access 1 TAAC                            :0xe
16:21:34: Time Access 2 NSAC*100                        :0x0
16:21:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:34: Card Command Classess CCC                     :0x5b5
16:21:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:34: DSR(driver stage register)  DSR_IMP           :0x0
16:21:34: Reserv2                                       :0x0
16:21:34: Device Size C_SIZE                            :0xedc8
16:21:34: Reserv3                                       :0x0
16:21:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:34: Reserv4                                       :0x0
16:21:34: Write Speed Factor R2W_FACTOR                 :0x2
16:21:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:34: FILE_FORMAT_GRP                               :0x0
16:21:34: COPY flag                                     :0x1
16:21:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:34: File_Format                                   :0x0
16:21:34: CRC                                           :0x0
16:21:34: ####CSD Registe Values####  

16:21:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:34: ProductSerialNumber = 0x23482900
16:21:34: CardMaximumLBA      = 0x3b72400
16:21:34: CardCapacity        = 32G
16:21:34: Is card secure      = 0
16:21:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:34: [DVTCommonLib]###  LogicalWrite called
16:21:36: [ WriteLba(0x1924EC0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1621 ] 
16:21:36: [DVTCommonLib]###  LogicalWrite Completed 

16:21:36: [DVTCommonLib]###  LogicalRead called
16:21:37: [ ReadLba(0x1924EC0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1622 ] 
16:21:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 167 times 
16:21:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA7, 0x0) , Command count = 1623 ] 
16:21:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:37: [DVTCommonLib]### Card response as High Capacity from card
16:21:37: [DVTCommonLib]### VOLA from card : 0x1
16:21:37: [DVTCommonLib]### CMD Pattern from card : 0xA7
16:21:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 1624 ] 
16:21:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619570>, <py_sfcl.CommandDataDefinition object at 0x06619150>) , Command count = 1625 ] 
16:21:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1626 ] 
16:21:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:37: [ SetBusWidth(0x4) , Command count = 1627 ] 
16:21:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:37: ####CSD Registe 2.0 Values####
16:21:37: CSD_STRUCTURE                                 :0x1
16:21:37: Reserv1                                       :0x0
16:21:37: Time Access 1 TAAC                            :0xe
16:21:37: Time Access 2 NSAC*100                        :0x0
16:21:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:37: Card Command Classess CCC                     :0x5b5
16:21:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:37: DSR(driver stage register)  DSR_IMP           :0x0
16:21:37: Reserv2                                       :0x0
16:21:37: Device Size C_SIZE                            :0xedc8
16:21:37: Reserv3                                       :0x0
16:21:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:37: Reserv4                                       :0x0
16:21:37: Write Speed Factor R2W_FACTOR                 :0x2
16:21:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:37: FILE_FORMAT_GRP                               :0x0
16:21:37: COPY flag                                     :0x1
16:21:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:37: File_Format                                   :0x0
16:21:37: CRC                                           :0x0
16:21:37: ####CSD Registe Values####  

16:21:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:37: ProductSerialNumber = 0x23482900
16:21:37: CardMaximumLBA      = 0x3b72400
16:21:37: CardCapacity        = 32G
16:21:37: Is card secure      = 0
16:21:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:37: [DVTCommonLib]###  LogicalWrite called
16:21:39: [ WriteLba(0x1FA5BF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1628 ] 
16:21:39: [DVTCommonLib]###  LogicalWrite Completed 

16:21:39: [DVTCommonLib]###  LogicalRead called
16:21:41: [ ReadLba(0x1FA5BF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1629 ] 
16:21:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 168 times 
16:21:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA8, 0x0) , Command count = 1630 ] 
16:21:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:41: [DVTCommonLib]### Card response as High Capacity from card
16:21:41: [DVTCommonLib]### VOLA from card : 0x1
16:21:41: [DVTCommonLib]### CMD Pattern from card : 0xA8
16:21:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619030>, <py_sfcl.CommandDataDefinition object at 0x06619E10>) , Command count = 1631 ] 
16:21:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619960>, <py_sfcl.CommandDataDefinition object at 0x06619420>) , Command count = 1632 ] 
16:21:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1633 ] 
16:21:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:41: [ SetBusWidth(0x4) , Command count = 1634 ] 
16:21:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:41: ####CSD Registe 2.0 Values####
16:21:41: CSD_STRUCTURE                                 :0x1
16:21:41: Reserv1                                       :0x0
16:21:41: Time Access 1 TAAC                            :0xe
16:21:41: Time Access 2 NSAC*100                        :0x0
16:21:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:41: Card Command Classess CCC                     :0x5b5
16:21:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:41: DSR(driver stage register)  DSR_IMP           :0x0
16:21:41: Reserv2                                       :0x0
16:21:41: Device Size C_SIZE                            :0xedc8
16:21:41: Reserv3                                       :0x0
16:21:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:41: Reserv4                                       :0x0
16:21:41: Write Speed Factor R2W_FACTOR                 :0x2
16:21:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:41: FILE_FORMAT_GRP                               :0x0
16:21:41: COPY flag                                     :0x1
16:21:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:41: File_Format                                   :0x0
16:21:41: CRC                                           :0x0
16:21:41: ####CSD Registe Values####  

16:21:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:41: ProductSerialNumber = 0x23482900
16:21:41: CardMaximumLBA      = 0x3b72400
16:21:41: CardCapacity        = 32G
16:21:41: Is card secure      = 0
16:21:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:41: [DVTCommonLib]###  LogicalWrite called
16:21:43: [ WriteLba(0xE36CC8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1635 ] 
16:21:43: [DVTCommonLib]###  LogicalWrite Completed 

16:21:43: [DVTCommonLib]###  LogicalRead called
16:21:44: [ ReadLba(0xE36CC8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1636 ] 
16:21:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 169 times 
16:21:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xA9, 0x0) , Command count = 1637 ] 
16:21:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:44: [DVTCommonLib]### Card response as High Capacity from card
16:21:44: [DVTCommonLib]### VOLA from card : 0x1
16:21:44: [DVTCommonLib]### CMD Pattern from card : 0xA9
16:21:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C1E0>, <py_sfcl.CommandDataDefinition object at 0x06619E70>) , Command count = 1638 ] 
16:21:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619D20>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 1639 ] 
16:21:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1640 ] 
16:21:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:44: [ SetBusWidth(0x4) , Command count = 1641 ] 
16:21:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:44: ####CSD Registe 2.0 Values####
16:21:44: CSD_STRUCTURE                                 :0x1
16:21:44: Reserv1                                       :0x0
16:21:44: Time Access 1 TAAC                            :0xe
16:21:44: Time Access 2 NSAC*100                        :0x0
16:21:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:44: Card Command Classess CCC                     :0x5b5
16:21:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:44: DSR(driver stage register)  DSR_IMP           :0x0
16:21:44: Reserv2                                       :0x0
16:21:44: Device Size C_SIZE                            :0xedc8
16:21:44: Reserv3                                       :0x0
16:21:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:44: Reserv4                                       :0x0
16:21:44: Write Speed Factor R2W_FACTOR                 :0x2
16:21:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:44: FILE_FORMAT_GRP                               :0x0
16:21:44: COPY flag                                     :0x1
16:21:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:44: File_Format                                   :0x0
16:21:44: CRC                                           :0x0
16:21:44: ####CSD Registe Values####  

16:21:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:45: ProductSerialNumber = 0x23482900
16:21:45: CardMaximumLBA      = 0x3b72400
16:21:45: CardCapacity        = 32G
16:21:45: Is card secure      = 0
16:21:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:45: [DVTCommonLib]###  LogicalWrite called
16:21:46: [ WriteLba(0x2068861, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1642 ] 
16:21:46: [DVTCommonLib]###  LogicalWrite Completed 

16:21:46: [DVTCommonLib]###  LogicalRead called
16:21:48: [ ReadLba(0x2068861, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1643 ] 
16:21:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 170 times 
16:21:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAA, 0x0) , Command count = 1644 ] 
16:21:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:48: [DVTCommonLib]### Card response as High Capacity from card
16:21:48: [DVTCommonLib]### VOLA from card : 0x1
16:21:48: [DVTCommonLib]### CMD Pattern from card : 0xAA
16:21:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C6C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 1645 ] 
16:21:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066035D0>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 1646 ] 
16:21:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1647 ] 
16:21:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:48: [ SetBusWidth(0x4) , Command count = 1648 ] 
16:21:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:48: ####CSD Registe 2.0 Values####
16:21:48: CSD_STRUCTURE                                 :0x1
16:21:48: Reserv1                                       :0x0
16:21:48: Time Access 1 TAAC                            :0xe
16:21:48: Time Access 2 NSAC*100                        :0x0
16:21:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:48: Card Command Classess CCC                     :0x5b5
16:21:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:48: DSR(driver stage register)  DSR_IMP           :0x0
16:21:48: Reserv2                                       :0x0
16:21:48: Device Size C_SIZE                            :0xedc8
16:21:48: Reserv3                                       :0x0
16:21:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:48: Reserv4                                       :0x0
16:21:48: Write Speed Factor R2W_FACTOR                 :0x2
16:21:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:48: FILE_FORMAT_GRP                               :0x0
16:21:48: COPY flag                                     :0x1
16:21:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:48: File_Format                                   :0x0
16:21:48: CRC                                           :0x0
16:21:48: ####CSD Registe Values####  

16:21:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:48: ProductSerialNumber = 0x23482900
16:21:48: CardMaximumLBA      = 0x3b72400
16:21:48: CardCapacity        = 32G
16:21:48: Is card secure      = 0
16:21:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:48: [DVTCommonLib]###  LogicalWrite called
16:21:50: [ WriteLba(0x2BF67FB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1649 ] 
16:21:50: [DVTCommonLib]###  LogicalWrite Completed 

16:21:50: [DVTCommonLib]###  LogicalRead called
16:21:51: [ ReadLba(0x2BF67FB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1650 ] 
16:21:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 171 times 
16:21:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAB, 0x0) , Command count = 1651 ] 
16:21:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:51: [DVTCommonLib]### Card response as High Capacity from card
16:21:51: [DVTCommonLib]### VOLA from card : 0x1
16:21:51: [DVTCommonLib]### CMD Pattern from card : 0xAB
16:21:51: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619F60>, <py_sfcl.CommandDataDefinition object at 0x0661C570>) , Command count = 1652 ] 
16:21:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C390>, <py_sfcl.CommandDataDefinition object at 0x0661C510>) , Command count = 1653 ] 
16:21:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1654 ] 
16:21:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:52: [ SetBusWidth(0x4) , Command count = 1655 ] 
16:21:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:52: ####CSD Registe 2.0 Values####
16:21:52: CSD_STRUCTURE                                 :0x1
16:21:52: Reserv1                                       :0x0
16:21:52: Time Access 1 TAAC                            :0xe
16:21:52: Time Access 2 NSAC*100                        :0x0
16:21:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:52: Card Command Classess CCC                     :0x5b5
16:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:52: DSR(driver stage register)  DSR_IMP           :0x0
16:21:52: Reserv2                                       :0x0
16:21:52: Device Size C_SIZE                            :0xedc8
16:21:52: Reserv3                                       :0x0
16:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:52: Reserv4                                       :0x0
16:21:52: Write Speed Factor R2W_FACTOR                 :0x2
16:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:52: FILE_FORMAT_GRP                               :0x0
16:21:52: COPY flag                                     :0x1
16:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:52: File_Format                                   :0x0
16:21:52: CRC                                           :0x0
16:21:52: ####CSD Registe Values####  

16:21:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:52: ProductSerialNumber = 0x23482900
16:21:52: CardMaximumLBA      = 0x3b72400
16:21:52: CardCapacity        = 32G
16:21:52: Is card secure      = 0
16:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:52: [DVTCommonLib]###  LogicalWrite called
16:21:53: [ WriteLba(0x1DDA5BC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1656 ] 
16:21:53: [DVTCommonLib]###  LogicalWrite Completed 

16:21:53: [DVTCommonLib]###  LogicalRead called
16:21:55: [ ReadLba(0x1DDA5BC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1657 ] 
16:21:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 172 times 
16:21:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAC, 0x0) , Command count = 1658 ] 
16:21:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:55: [DVTCommonLib]### Card response as High Capacity from card
16:21:55: [DVTCommonLib]### VOLA from card : 0x1
16:21:55: [DVTCommonLib]### CMD Pattern from card : 0xAC
16:21:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 1659 ] 
16:21:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C360>, <py_sfcl.CommandDataDefinition object at 0x0661C540>) , Command count = 1660 ] 
16:21:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1661 ] 
16:21:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:55: [ SetBusWidth(0x4) , Command count = 1662 ] 
16:21:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:55: ####CSD Registe 2.0 Values####
16:21:55: CSD_STRUCTURE                                 :0x1
16:21:55: Reserv1                                       :0x0
16:21:55: Time Access 1 TAAC                            :0xe
16:21:55: Time Access 2 NSAC*100                        :0x0
16:21:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:55: Card Command Classess CCC                     :0x5b5
16:21:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:55: DSR(driver stage register)  DSR_IMP           :0x0
16:21:55: Reserv2                                       :0x0
16:21:55: Device Size C_SIZE                            :0xedc8
16:21:55: Reserv3                                       :0x0
16:21:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:55: Reserv4                                       :0x0
16:21:55: Write Speed Factor R2W_FACTOR                 :0x2
16:21:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:55: FILE_FORMAT_GRP                               :0x0
16:21:55: COPY flag                                     :0x1
16:21:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:55: File_Format                                   :0x0
16:21:55: CRC                                           :0x0
16:21:55: ####CSD Registe Values####  

16:21:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:55: ProductSerialNumber = 0x23482900
16:21:55: CardMaximumLBA      = 0x3b72400
16:21:55: CardCapacity        = 32G
16:21:55: Is card secure      = 0
16:21:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:55: [DVTCommonLib]###  LogicalWrite called
16:21:57: [ WriteLba(0x176388, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1663 ] 
16:21:57: [DVTCommonLib]###  LogicalWrite Completed 

16:21:57: [DVTCommonLib]###  LogicalRead called
16:21:58: [ ReadLba(0x176388, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1664 ] 
16:21:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 173 times 
16:21:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAD, 0x0) , Command count = 1665 ] 
16:21:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:21:58: [DVTCommonLib]### Card response as High Capacity from card
16:21:58: [DVTCommonLib]### VOLA from card : 0x1
16:21:58: [DVTCommonLib]### CMD Pattern from card : 0xAD
16:21:58: [DVTCommonLib]### Reserved bits from card : 0x0
16:21:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 1666 ] 
16:21:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C810>, <py_sfcl.CommandDataDefinition object at 0x0661C180>) , Command count = 1667 ] 
16:21:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1668 ] 
16:21:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:59: [ SetBusWidth(0x4) , Command count = 1669 ] 
16:21:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:21:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:59: ####CSD Registe 2.0 Values####
16:21:59: CSD_STRUCTURE                                 :0x1
16:21:59: Reserv1                                       :0x0
16:21:59: Time Access 1 TAAC                            :0xe
16:21:59: Time Access 2 NSAC*100                        :0x0
16:21:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:59: Card Command Classess CCC                     :0x5b5
16:21:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:59: DSR(driver stage register)  DSR_IMP           :0x0
16:21:59: Reserv2                                       :0x0
16:21:59: Device Size C_SIZE                            :0xedc8
16:21:59: Reserv3                                       :0x0
16:21:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:59: Reserv4                                       :0x0
16:21:59: Write Speed Factor R2W_FACTOR                 :0x2
16:21:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:59: FILE_FORMAT_GRP                               :0x0
16:21:59: COPY flag                                     :0x1
16:21:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:59: File_Format                                   :0x0
16:21:59: CRC                                           :0x0
16:21:59: ####CSD Registe Values####  

16:21:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:21:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:59: ProductSerialNumber = 0x23482900
16:21:59: CardMaximumLBA      = 0x3b72400
16:21:59: CardCapacity        = 32G
16:21:59: Is card secure      = 0
16:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:21:59: [DVTCommonLib]###  LogicalWrite called
16:22:00: [ WriteLba(0x3A4CB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1670 ] 
16:22:00: [DVTCommonLib]###  LogicalWrite Completed 

16:22:00: [DVTCommonLib]###  LogicalRead called
16:22:02: [ ReadLba(0x3A4CB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1671 ] 
16:22:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 174 times 
16:22:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAE, 0x0) , Command count = 1672 ] 
16:22:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:02: [DVTCommonLib]### Card response as High Capacity from card
16:22:02: [DVTCommonLib]### VOLA from card : 0x1
16:22:02: [DVTCommonLib]### CMD Pattern from card : 0xAE
16:22:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 1673 ] 
16:22:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C240>, <py_sfcl.CommandDataDefinition object at 0x0661CE40>) , Command count = 1674 ] 
16:22:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1675 ] 
16:22:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:02: [ SetBusWidth(0x4) , Command count = 1676 ] 
16:22:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:02: ####CSD Registe 2.0 Values####
16:22:02: CSD_STRUCTURE                                 :0x1
16:22:02: Reserv1                                       :0x0
16:22:02: Time Access 1 TAAC                            :0xe
16:22:02: Time Access 2 NSAC*100                        :0x0
16:22:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:02: Card Command Classess CCC                     :0x5b5
16:22:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:02: DSR(driver stage register)  DSR_IMP           :0x0
16:22:02: Reserv2                                       :0x0
16:22:02: Device Size C_SIZE                            :0xedc8
16:22:02: Reserv3                                       :0x0
16:22:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:02: Reserv4                                       :0x0
16:22:02: Write Speed Factor R2W_FACTOR                 :0x2
16:22:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:02: FILE_FORMAT_GRP                               :0x0
16:22:02: COPY flag                                     :0x1
16:22:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:02: File_Format                                   :0x0
16:22:02: CRC                                           :0x0
16:22:02: ####CSD Registe Values####  

16:22:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:02: ProductSerialNumber = 0x23482900
16:22:02: CardMaximumLBA      = 0x3b72400
16:22:02: CardCapacity        = 32G
16:22:02: Is card secure      = 0
16:22:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:02: [DVTCommonLib]###  LogicalWrite called
16:22:04: [ WriteLba(0x246543A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1677 ] 
16:22:04: [DVTCommonLib]###  LogicalWrite Completed 

16:22:04: [DVTCommonLib]###  LogicalRead called
16:22:05: [ ReadLba(0x246543A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1678 ] 
16:22:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 175 times 
16:22:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xAF, 0x0) , Command count = 1679 ] 
16:22:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:06: [DVTCommonLib]### Card response as High Capacity from card
16:22:06: [DVTCommonLib]### VOLA from card : 0x1
16:22:06: [DVTCommonLib]### CMD Pattern from card : 0xAF
16:22:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 1680 ] 
16:22:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDE0>, <py_sfcl.CommandDataDefinition object at 0x0661CF90>) , Command count = 1681 ] 
16:22:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1682 ] 
16:22:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:06: [ SetBusWidth(0x4) , Command count = 1683 ] 
16:22:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:06: ####CSD Registe 2.0 Values####
16:22:06: CSD_STRUCTURE                                 :0x1
16:22:06: Reserv1                                       :0x0
16:22:06: Time Access 1 TAAC                            :0xe
16:22:06: Time Access 2 NSAC*100                        :0x0
16:22:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:06: Card Command Classess CCC                     :0x5b5
16:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:06: DSR(driver stage register)  DSR_IMP           :0x0
16:22:06: Reserv2                                       :0x0
16:22:06: Device Size C_SIZE                            :0xedc8
16:22:06: Reserv3                                       :0x0
16:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:06: Reserv4                                       :0x0
16:22:06: Write Speed Factor R2W_FACTOR                 :0x2
16:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:06: FILE_FORMAT_GRP                               :0x0
16:22:06: COPY flag                                     :0x1
16:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:06: File_Format                                   :0x0
16:22:06: CRC                                           :0x0
16:22:06: ####CSD Registe Values####  

16:22:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:06: ProductSerialNumber = 0x23482900
16:22:06: CardMaximumLBA      = 0x3b72400
16:22:06: CardCapacity        = 32G
16:22:06: Is card secure      = 0
16:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:06: [DVTCommonLib]###  LogicalWrite called
16:22:07: [ WriteLba(0x1AA460A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1684 ] 
16:22:07: [DVTCommonLib]###  LogicalWrite Completed 

16:22:07: [DVTCommonLib]###  LogicalRead called
16:22:09: [ ReadLba(0x1AA460A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1685 ] 
16:22:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 176 times 
16:22:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB0, 0x0) , Command count = 1686 ] 
16:22:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:09: [DVTCommonLib]### Card response as High Capacity from card
16:22:09: [DVTCommonLib]### VOLA from card : 0x1
16:22:09: [DVTCommonLib]### CMD Pattern from card : 0xB0
16:22:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619210>, <py_sfcl.CommandDataDefinition object at 0x06619F90>) , Command count = 1687 ] 
16:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05417FC0>, <py_sfcl.CommandDataDefinition object at 0x0661CA50>) , Command count = 1688 ] 
16:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1689 ] 
16:22:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:09: [ SetBusWidth(0x4) , Command count = 1690 ] 
16:22:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:09: ####CSD Registe 2.0 Values####
16:22:09: CSD_STRUCTURE                                 :0x1
16:22:09: Reserv1                                       :0x0
16:22:09: Time Access 1 TAAC                            :0xe
16:22:09: Time Access 2 NSAC*100                        :0x0
16:22:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:09: Card Command Classess CCC                     :0x5b5
16:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:09: DSR(driver stage register)  DSR_IMP           :0x0
16:22:09: Reserv2                                       :0x0
16:22:09: Device Size C_SIZE                            :0xedc8
16:22:09: Reserv3                                       :0x0
16:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:09: Reserv4                                       :0x0
16:22:09: Write Speed Factor R2W_FACTOR                 :0x2
16:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:09: FILE_FORMAT_GRP                               :0x0
16:22:09: COPY flag                                     :0x1
16:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:09: File_Format                                   :0x0
16:22:09: CRC                                           :0x0
16:22:09: ####CSD Registe Values####  

16:22:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:09: ProductSerialNumber = 0x23482900
16:22:09: CardMaximumLBA      = 0x3b72400
16:22:09: CardCapacity        = 32G
16:22:09: Is card secure      = 0
16:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:09: [DVTCommonLib]###  LogicalWrite called
16:22:11: [ WriteLba(0x1B84F21, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1691 ] 
16:22:11: [DVTCommonLib]###  LogicalWrite Completed 

16:22:11: [DVTCommonLib]###  LogicalRead called
16:22:12: [ ReadLba(0x1B84F21, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1692 ] 
16:22:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 177 times 
16:22:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB1, 0x0) , Command count = 1693 ] 
16:22:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:13: [DVTCommonLib]### Card response as High Capacity from card
16:22:13: [DVTCommonLib]### VOLA from card : 0x1
16:22:13: [DVTCommonLib]### CMD Pattern from card : 0xB1
16:22:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066196F0>, <py_sfcl.CommandDataDefinition object at 0x06619870>) , Command count = 1694 ] 
16:22:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C330>, <py_sfcl.CommandDataDefinition object at 0x0661CC30>) , Command count = 1695 ] 
16:22:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1696 ] 
16:22:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:13: [ SetBusWidth(0x4) , Command count = 1697 ] 
16:22:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:13: ####CSD Registe 2.0 Values####
16:22:13: CSD_STRUCTURE                                 :0x1
16:22:13: Reserv1                                       :0x0
16:22:13: Time Access 1 TAAC                            :0xe
16:22:13: Time Access 2 NSAC*100                        :0x0
16:22:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:13: Card Command Classess CCC                     :0x5b5
16:22:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:13: DSR(driver stage register)  DSR_IMP           :0x0
16:22:13: Reserv2                                       :0x0
16:22:13: Device Size C_SIZE                            :0xedc8
16:22:13: Reserv3                                       :0x0
16:22:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:13: Reserv4                                       :0x0
16:22:13: Write Speed Factor R2W_FACTOR                 :0x2
16:22:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:13: FILE_FORMAT_GRP                               :0x0
16:22:13: COPY flag                                     :0x1
16:22:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:13: File_Format                                   :0x0
16:22:13: CRC                                           :0x0
16:22:13: ####CSD Registe Values####  

16:22:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:13: ProductSerialNumber = 0x23482900
16:22:13: CardMaximumLBA      = 0x3b72400
16:22:13: CardCapacity        = 32G
16:22:13: Is card secure      = 0
16:22:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:13: [DVTCommonLib]###  LogicalWrite called
16:22:14: [ WriteLba(0x4622CA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1698 ] 
16:22:14: [DVTCommonLib]###  LogicalWrite Completed 

16:22:14: [DVTCommonLib]###  LogicalRead called
16:22:16: [ ReadLba(0x4622CA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1699 ] 
16:22:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 178 times 
16:22:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB2, 0x0) , Command count = 1700 ] 
16:22:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:16: [DVTCommonLib]### Card response as High Capacity from card
16:22:16: [DVTCommonLib]### VOLA from card : 0x1
16:22:16: [DVTCommonLib]### CMD Pattern from card : 0xB2
16:22:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613E10>, <py_sfcl.CommandDataDefinition object at 0x0661C5A0>) , Command count = 1701 ] 
16:22:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619780>, <py_sfcl.CommandDataDefinition object at 0x06619540>) , Command count = 1702 ] 
16:22:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1703 ] 
16:22:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:16: [ SetBusWidth(0x4) , Command count = 1704 ] 
16:22:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:16: ####CSD Registe 2.0 Values####
16:22:16: CSD_STRUCTURE                                 :0x1
16:22:16: Reserv1                                       :0x0
16:22:16: Time Access 1 TAAC                            :0xe
16:22:16: Time Access 2 NSAC*100                        :0x0
16:22:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:16: Card Command Classess CCC                     :0x5b5
16:22:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:16: DSR(driver stage register)  DSR_IMP           :0x0
16:22:16: Reserv2                                       :0x0
16:22:16: Device Size C_SIZE                            :0xedc8
16:22:16: Reserv3                                       :0x0
16:22:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:16: Reserv4                                       :0x0
16:22:16: Write Speed Factor R2W_FACTOR                 :0x2
16:22:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:16: FILE_FORMAT_GRP                               :0x0
16:22:16: COPY flag                                     :0x1
16:22:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:16: File_Format                                   :0x0
16:22:16: CRC                                           :0x0
16:22:16: ####CSD Registe Values####  

16:22:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:16: ProductSerialNumber = 0x23482900
16:22:16: CardMaximumLBA      = 0x3b72400
16:22:16: CardCapacity        = 32G
16:22:16: Is card secure      = 0
16:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:16: [DVTCommonLib]###  LogicalWrite called
16:22:18: [ WriteLba(0x29FA17B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1705 ] 
16:22:18: [DVTCommonLib]###  LogicalWrite Completed 

16:22:18: [DVTCommonLib]###  LogicalRead called
16:22:20: [ ReadLba(0x29FA17B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1706 ] 
16:22:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:20: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 179 times 
16:22:20: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB3, 0x0) , Command count = 1707 ] 
16:22:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:20: [DVTCommonLib]### Card response as High Capacity from card
16:22:20: [DVTCommonLib]### VOLA from card : 0x1
16:22:20: [DVTCommonLib]### CMD Pattern from card : 0xB3
16:22:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613EA0>, <py_sfcl.CommandDataDefinition object at 0x06613D20>) , Command count = 1708 ] 
16:22:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066190C0>, <py_sfcl.CommandDataDefinition object at 0x06619540>) , Command count = 1709 ] 
16:22:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1710 ] 
16:22:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:20: [ SetBusWidth(0x4) , Command count = 1711 ] 
16:22:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:20: ####CSD Registe 2.0 Values####
16:22:20: CSD_STRUCTURE                                 :0x1
16:22:20: Reserv1                                       :0x0
16:22:20: Time Access 1 TAAC                            :0xe
16:22:20: Time Access 2 NSAC*100                        :0x0
16:22:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:20: Card Command Classess CCC                     :0x5b5
16:22:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:20: DSR(driver stage register)  DSR_IMP           :0x0
16:22:20: Reserv2                                       :0x0
16:22:20: Device Size C_SIZE                            :0xedc8
16:22:20: Reserv3                                       :0x0
16:22:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:20: Reserv4                                       :0x0
16:22:20: Write Speed Factor R2W_FACTOR                 :0x2
16:22:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:20: FILE_FORMAT_GRP                               :0x0
16:22:20: COPY flag                                     :0x1
16:22:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:20: File_Format                                   :0x0
16:22:20: CRC                                           :0x0
16:22:20: ####CSD Registe Values####  

16:22:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:20: ProductSerialNumber = 0x23482900
16:22:20: CardMaximumLBA      = 0x3b72400
16:22:20: CardCapacity        = 32G
16:22:20: Is card secure      = 0
16:22:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:20: [DVTCommonLib]###  LogicalWrite called
16:22:21: [ WriteLba(0x16E7010, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1712 ] 
16:22:21: [DVTCommonLib]###  LogicalWrite Completed 

16:22:21: [DVTCommonLib]###  LogicalRead called
16:22:23: [ ReadLba(0x16E7010, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1713 ] 
16:22:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 180 times 
16:22:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB4, 0x0) , Command count = 1714 ] 
16:22:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:23: [DVTCommonLib]### Card response as High Capacity from card
16:22:23: [DVTCommonLib]### VOLA from card : 0x1
16:22:23: [DVTCommonLib]### CMD Pattern from card : 0xB4
16:22:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066036F0>, <py_sfcl.CommandDataDefinition object at 0x0661C7E0>) , Command count = 1715 ] 
16:22:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613FC0>, <py_sfcl.CommandDataDefinition object at 0x06613B40>) , Command count = 1716 ] 
16:22:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1717 ] 
16:22:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:23: [ SetBusWidth(0x4) , Command count = 1718 ] 
16:22:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:23: ####CSD Registe 2.0 Values####
16:22:23: CSD_STRUCTURE                                 :0x1
16:22:23: Reserv1                                       :0x0
16:22:23: Time Access 1 TAAC                            :0xe
16:22:23: Time Access 2 NSAC*100                        :0x0
16:22:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:23: Card Command Classess CCC                     :0x5b5
16:22:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:23: DSR(driver stage register)  DSR_IMP           :0x0
16:22:23: Reserv2                                       :0x0
16:22:23: Device Size C_SIZE                            :0xedc8
16:22:23: Reserv3                                       :0x0
16:22:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:23: Reserv4                                       :0x0
16:22:23: Write Speed Factor R2W_FACTOR                 :0x2
16:22:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:23: FILE_FORMAT_GRP                               :0x0
16:22:23: COPY flag                                     :0x1
16:22:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:23: File_Format                                   :0x0
16:22:23: CRC                                           :0x0
16:22:23: ####CSD Registe Values####  

16:22:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:23: ProductSerialNumber = 0x23482900
16:22:23: CardMaximumLBA      = 0x3b72400
16:22:23: CardCapacity        = 32G
16:22:23: Is card secure      = 0
16:22:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:23: [DVTCommonLib]###  LogicalWrite called
16:22:25: [ WriteLba(0x2A29CDE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1719 ] 
16:22:25: [DVTCommonLib]###  LogicalWrite Completed 

16:22:25: [DVTCommonLib]###  LogicalRead called
16:22:27: [ ReadLba(0x2A29CDE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1720 ] 
16:22:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 181 times 
16:22:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB5, 0x0) , Command count = 1721 ] 
16:22:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:27: [DVTCommonLib]### Card response as High Capacity from card
16:22:27: [DVTCommonLib]### VOLA from card : 0x1
16:22:27: [DVTCommonLib]### CMD Pattern from card : 0xB5
16:22:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066038A0>, <py_sfcl.CommandDataDefinition object at 0x06603F90>) , Command count = 1722 ] 
16:22:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06613A50>, <py_sfcl.CommandDataDefinition object at 0x06613E70>) , Command count = 1723 ] 
16:22:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1724 ] 
16:22:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:27: [ SetBusWidth(0x4) , Command count = 1725 ] 
16:22:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:27: ####CSD Registe 2.0 Values####
16:22:27: CSD_STRUCTURE                                 :0x1
16:22:27: Reserv1                                       :0x0
16:22:27: Time Access 1 TAAC                            :0xe
16:22:27: Time Access 2 NSAC*100                        :0x0
16:22:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:27: Card Command Classess CCC                     :0x5b5
16:22:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:27: DSR(driver stage register)  DSR_IMP           :0x0
16:22:27: Reserv2                                       :0x0
16:22:27: Device Size C_SIZE                            :0xedc8
16:22:27: Reserv3                                       :0x0
16:22:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:27: Reserv4                                       :0x0
16:22:27: Write Speed Factor R2W_FACTOR                 :0x2
16:22:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:27: FILE_FORMAT_GRP                               :0x0
16:22:27: COPY flag                                     :0x1
16:22:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:27: File_Format                                   :0x0
16:22:27: CRC                                           :0x0
16:22:27: ####CSD Registe Values####  

16:22:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:27: ProductSerialNumber = 0x23482900
16:22:27: CardMaximumLBA      = 0x3b72400
16:22:27: CardCapacity        = 32G
16:22:27: Is card secure      = 0
16:22:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:27: [DVTCommonLib]###  LogicalWrite called
16:22:28: [ WriteLba(0x1CD03DC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1726 ] 
16:22:28: [DVTCommonLib]###  LogicalWrite Completed 

16:22:28: [DVTCommonLib]###  LogicalRead called
16:22:30: [ ReadLba(0x1CD03DC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1727 ] 
16:22:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 182 times 
16:22:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB6, 0x0) , Command count = 1728 ] 
16:22:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:30: [DVTCommonLib]### Card response as High Capacity from card
16:22:30: [DVTCommonLib]### VOLA from card : 0x1
16:22:30: [DVTCommonLib]### CMD Pattern from card : 0xB6
16:22:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B90F0>, <py_sfcl.CommandDataDefinition object at 0x066B9060>) , Command count = 1729 ] 
16:22:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C0F0>, <py_sfcl.CommandDataDefinition object at 0x06603990>) , Command count = 1730 ] 
16:22:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1731 ] 
16:22:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:30: [ SetBusWidth(0x4) , Command count = 1732 ] 
16:22:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:30: ####CSD Registe 2.0 Values####
16:22:30: CSD_STRUCTURE                                 :0x1
16:22:30: Reserv1                                       :0x0
16:22:30: Time Access 1 TAAC                            :0xe
16:22:30: Time Access 2 NSAC*100                        :0x0
16:22:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:30: Card Command Classess CCC                     :0x5b5
16:22:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:30: DSR(driver stage register)  DSR_IMP           :0x0
16:22:30: Reserv2                                       :0x0
16:22:30: Device Size C_SIZE                            :0xedc8
16:22:30: Reserv3                                       :0x0
16:22:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:30: Reserv4                                       :0x0
16:22:30: Write Speed Factor R2W_FACTOR                 :0x2
16:22:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:30: FILE_FORMAT_GRP                               :0x0
16:22:30: COPY flag                                     :0x1
16:22:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:30: File_Format                                   :0x0
16:22:30: CRC                                           :0x0
16:22:30: ####CSD Registe Values####  

16:22:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:30: ProductSerialNumber = 0x23482900
16:22:30: CardMaximumLBA      = 0x3b72400
16:22:30: CardCapacity        = 32G
16:22:30: Is card secure      = 0
16:22:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:30: [DVTCommonLib]###  LogicalWrite called
16:22:32: [ WriteLba(0xD71F72, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1733 ] 
16:22:32: [DVTCommonLib]###  LogicalWrite Completed 

16:22:32: [DVTCommonLib]###  LogicalRead called
16:22:34: [ ReadLba(0xD71F72, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1734 ] 
16:22:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 183 times 
16:22:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB7, 0x0) , Command count = 1735 ] 
16:22:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:34: [DVTCommonLib]### Card response as High Capacity from card
16:22:34: [DVTCommonLib]### VOLA from card : 0x1
16:22:34: [DVTCommonLib]### CMD Pattern from card : 0xB7
16:22:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CAB0>, <py_sfcl.CommandDataDefinition object at 0x0661CE10>) , Command count = 1736 ] 
16:22:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9120>, <py_sfcl.CommandDataDefinition object at 0x066B5FC0>) , Command count = 1737 ] 
16:22:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1738 ] 
16:22:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:34: [ SetBusWidth(0x4) , Command count = 1739 ] 
16:22:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:34: ####CSD Registe 2.0 Values####
16:22:34: CSD_STRUCTURE                                 :0x1
16:22:34: Reserv1                                       :0x0
16:22:34: Time Access 1 TAAC                            :0xe
16:22:34: Time Access 2 NSAC*100                        :0x0
16:22:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:34: Card Command Classess CCC                     :0x5b5
16:22:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:34: DSR(driver stage register)  DSR_IMP           :0x0
16:22:34: Reserv2                                       :0x0
16:22:34: Device Size C_SIZE                            :0xedc8
16:22:34: Reserv3                                       :0x0
16:22:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:34: Reserv4                                       :0x0
16:22:34: Write Speed Factor R2W_FACTOR                 :0x2
16:22:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:34: FILE_FORMAT_GRP                               :0x0
16:22:34: COPY flag                                     :0x1
16:22:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:34: File_Format                                   :0x0
16:22:34: CRC                                           :0x0
16:22:34: ####CSD Registe Values####  

16:22:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:34: ProductSerialNumber = 0x23482900
16:22:34: CardMaximumLBA      = 0x3b72400
16:22:34: CardCapacity        = 32G
16:22:34: Is card secure      = 0
16:22:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:34: [DVTCommonLib]###  LogicalWrite called
16:22:36: [ WriteLba(0x1BB7FAD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1740 ] 
16:22:36: [DVTCommonLib]###  LogicalWrite Completed 

16:22:36: [DVTCommonLib]###  LogicalRead called
16:22:37: [ ReadLba(0x1BB7FAD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1741 ] 
16:22:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 184 times 
16:22:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB8, 0x0) , Command count = 1742 ] 
16:22:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:37: [DVTCommonLib]### Card response as High Capacity from card
16:22:37: [DVTCommonLib]### VOLA from card : 0x1
16:22:37: [DVTCommonLib]### CMD Pattern from card : 0xB8
16:22:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9300>, <py_sfcl.CommandDataDefinition object at 0x066B9330>) , Command count = 1743 ] 
16:22:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B54E0>, <py_sfcl.CommandDataDefinition object at 0x066B5F00>) , Command count = 1744 ] 
16:22:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1745 ] 
16:22:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:37: [ SetBusWidth(0x4) , Command count = 1746 ] 
16:22:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:37: ####CSD Registe 2.0 Values####
16:22:37: CSD_STRUCTURE                                 :0x1
16:22:37: Reserv1                                       :0x0
16:22:37: Time Access 1 TAAC                            :0xe
16:22:37: Time Access 2 NSAC*100                        :0x0
16:22:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:37: Card Command Classess CCC                     :0x5b5
16:22:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:37: DSR(driver stage register)  DSR_IMP           :0x0
16:22:37: Reserv2                                       :0x0
16:22:37: Device Size C_SIZE                            :0xedc8
16:22:37: Reserv3                                       :0x0
16:22:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:37: Reserv4                                       :0x0
16:22:37: Write Speed Factor R2W_FACTOR                 :0x2
16:22:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:37: FILE_FORMAT_GRP                               :0x0
16:22:37: COPY flag                                     :0x1
16:22:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:37: File_Format                                   :0x0
16:22:37: CRC                                           :0x0
16:22:37: ####CSD Registe Values####  

16:22:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:37: ProductSerialNumber = 0x23482900
16:22:37: CardMaximumLBA      = 0x3b72400
16:22:37: CardCapacity        = 32G
16:22:37: Is card secure      = 0
16:22:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:37: [DVTCommonLib]###  LogicalWrite called
16:22:39: [ WriteLba(0x31B8AC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1747 ] 
16:22:39: [DVTCommonLib]###  LogicalWrite Completed 

16:22:39: [DVTCommonLib]###  LogicalRead called
16:22:41: [ ReadLba(0x31B8AC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1748 ] 
16:22:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 185 times 
16:22:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xB9, 0x0) , Command count = 1749 ] 
16:22:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:41: [DVTCommonLib]### Card response as High Capacity from card
16:22:41: [DVTCommonLib]### VOLA from card : 0x1
16:22:41: [DVTCommonLib]### CMD Pattern from card : 0xB9
16:22:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B96F0>, <py_sfcl.CommandDataDefinition object at 0x066B9720>) , Command count = 1750 ] 
16:22:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B92A0>, <py_sfcl.CommandDataDefinition object at 0x066B5C60>) , Command count = 1751 ] 
16:22:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1752 ] 
16:22:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:41: [ SetBusWidth(0x4) , Command count = 1753 ] 
16:22:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:41: ####CSD Registe 2.0 Values####
16:22:41: CSD_STRUCTURE                                 :0x1
16:22:41: Reserv1                                       :0x0
16:22:41: Time Access 1 TAAC                            :0xe
16:22:41: Time Access 2 NSAC*100                        :0x0
16:22:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:41: Card Command Classess CCC                     :0x5b5
16:22:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:41: DSR(driver stage register)  DSR_IMP           :0x0
16:22:41: Reserv2                                       :0x0
16:22:41: Device Size C_SIZE                            :0xedc8
16:22:41: Reserv3                                       :0x0
16:22:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:41: Reserv4                                       :0x0
16:22:41: Write Speed Factor R2W_FACTOR                 :0x2
16:22:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:41: FILE_FORMAT_GRP                               :0x0
16:22:41: COPY flag                                     :0x1
16:22:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:41: File_Format                                   :0x0
16:22:41: CRC                                           :0x0
16:22:41: ####CSD Registe Values####  

16:22:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:41: ProductSerialNumber = 0x23482900
16:22:41: CardMaximumLBA      = 0x3b72400
16:22:41: CardCapacity        = 32G
16:22:41: Is card secure      = 0
16:22:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:41: [DVTCommonLib]###  LogicalWrite called
16:22:43: [ WriteLba(0x363F827, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1754 ] 
16:22:43: [DVTCommonLib]###  LogicalWrite Completed 

16:22:43: [DVTCommonLib]###  LogicalRead called
16:22:44: [ ReadLba(0x363F827, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1755 ] 
16:22:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 186 times 
16:22:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBA, 0x0) , Command count = 1756 ] 
16:22:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:44: [DVTCommonLib]### Card response as High Capacity from card
16:22:44: [DVTCommonLib]### VOLA from card : 0x1
16:22:44: [DVTCommonLib]### CMD Pattern from card : 0xBA
16:22:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B99C0>, <py_sfcl.CommandDataDefinition object at 0x066B99F0>) , Command count = 1757 ] 
16:22:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9270>, <py_sfcl.CommandDataDefinition object at 0x066B9AB0>) , Command count = 1758 ] 
16:22:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1759 ] 
16:22:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:44: [ SetBusWidth(0x4) , Command count = 1760 ] 
16:22:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:44: ####CSD Registe 2.0 Values####
16:22:44: CSD_STRUCTURE                                 :0x1
16:22:44: Reserv1                                       :0x0
16:22:44: Time Access 1 TAAC                            :0xe
16:22:44: Time Access 2 NSAC*100                        :0x0
16:22:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:44: Card Command Classess CCC                     :0x5b5
16:22:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:44: DSR(driver stage register)  DSR_IMP           :0x0
16:22:44: Reserv2                                       :0x0
16:22:44: Device Size C_SIZE                            :0xedc8
16:22:44: Reserv3                                       :0x0
16:22:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:44: Reserv4                                       :0x0
16:22:44: Write Speed Factor R2W_FACTOR                 :0x2
16:22:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:44: FILE_FORMAT_GRP                               :0x0
16:22:44: COPY flag                                     :0x1
16:22:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:44: File_Format                                   :0x0
16:22:44: CRC                                           :0x0
16:22:44: ####CSD Registe Values####  

16:22:44: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:44: ProductSerialNumber = 0x23482900
16:22:44: CardMaximumLBA      = 0x3b72400
16:22:44: CardCapacity        = 32G
16:22:44: Is card secure      = 0
16:22:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:44: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:44: [DVTCommonLib]###  LogicalWrite called
16:22:46: [ WriteLba(0x2E25EE8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1761 ] 
16:22:46: [DVTCommonLib]###  LogicalWrite Completed 

16:22:46: [DVTCommonLib]###  LogicalRead called
16:22:48: [ ReadLba(0x2E25EE8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1762 ] 
16:22:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 187 times 
16:22:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBB, 0x0) , Command count = 1763 ] 
16:22:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:48: [DVTCommonLib]### Card response as High Capacity from card
16:22:48: [DVTCommonLib]### VOLA from card : 0x1
16:22:48: [DVTCommonLib]### CMD Pattern from card : 0xBB
16:22:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9C30>, <py_sfcl.CommandDataDefinition object at 0x066B9A50>) , Command count = 1764 ] 
16:22:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C060>, <py_sfcl.CommandDataDefinition object at 0x066B9BA0>) , Command count = 1765 ] 
16:22:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1766 ] 
16:22:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:48: [ SetBusWidth(0x4) , Command count = 1767 ] 
16:22:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:48: ####CSD Registe 2.0 Values####
16:22:48: CSD_STRUCTURE                                 :0x1
16:22:48: Reserv1                                       :0x0
16:22:48: Time Access 1 TAAC                            :0xe
16:22:48: Time Access 2 NSAC*100                        :0x0
16:22:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:48: Card Command Classess CCC                     :0x5b5
16:22:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:48: DSR(driver stage register)  DSR_IMP           :0x0
16:22:48: Reserv2                                       :0x0
16:22:48: Device Size C_SIZE                            :0xedc8
16:22:48: Reserv3                                       :0x0
16:22:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:48: Reserv4                                       :0x0
16:22:48: Write Speed Factor R2W_FACTOR                 :0x2
16:22:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:48: FILE_FORMAT_GRP                               :0x0
16:22:48: COPY flag                                     :0x1
16:22:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:48: File_Format                                   :0x0
16:22:48: CRC                                           :0x0
16:22:48: ####CSD Registe Values####  

16:22:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:48: ProductSerialNumber = 0x23482900
16:22:48: CardMaximumLBA      = 0x3b72400
16:22:48: CardCapacity        = 32G
16:22:48: Is card secure      = 0
16:22:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:48: [DVTCommonLib]###  LogicalWrite called
16:22:50: [ WriteLba(0x1A68D84, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1768 ] 
16:22:50: [DVTCommonLib]###  LogicalWrite Completed 

16:22:50: [DVTCommonLib]###  LogicalRead called
16:22:51: [ ReadLba(0x1A68D84, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1769 ] 
16:22:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 188 times 
16:22:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBC, 0x0) , Command count = 1770 ] 
16:22:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:51: [DVTCommonLib]### Card response as High Capacity from card
16:22:51: [DVTCommonLib]### VOLA from card : 0x1
16:22:51: [DVTCommonLib]### CMD Pattern from card : 0xBC
16:22:51: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E0F0>, <py_sfcl.CommandDataDefinition object at 0x066B9C60>) , Command count = 1771 ] 
16:22:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B98A0>, <py_sfcl.CommandDataDefinition object at 0x066B9D50>) , Command count = 1772 ] 
16:22:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1773 ] 
16:22:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:52: [ SetBusWidth(0x4) , Command count = 1774 ] 
16:22:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:52: ####CSD Registe 2.0 Values####
16:22:52: CSD_STRUCTURE                                 :0x1
16:22:52: Reserv1                                       :0x0
16:22:52: Time Access 1 TAAC                            :0xe
16:22:52: Time Access 2 NSAC*100                        :0x0
16:22:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:52: Card Command Classess CCC                     :0x5b5
16:22:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:52: DSR(driver stage register)  DSR_IMP           :0x0
16:22:52: Reserv2                                       :0x0
16:22:52: Device Size C_SIZE                            :0xedc8
16:22:52: Reserv3                                       :0x0
16:22:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:52: Reserv4                                       :0x0
16:22:52: Write Speed Factor R2W_FACTOR                 :0x2
16:22:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:52: FILE_FORMAT_GRP                               :0x0
16:22:52: COPY flag                                     :0x1
16:22:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:52: File_Format                                   :0x0
16:22:52: CRC                                           :0x0
16:22:52: ####CSD Registe Values####  

16:22:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:52: ProductSerialNumber = 0x23482900
16:22:52: CardMaximumLBA      = 0x3b72400
16:22:52: CardCapacity        = 32G
16:22:52: Is card secure      = 0
16:22:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:52: [DVTCommonLib]###  LogicalWrite called
16:22:53: [ WriteLba(0x1F3D428, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1775 ] 
16:22:53: [DVTCommonLib]###  LogicalWrite Completed 

16:22:53: [DVTCommonLib]###  LogicalRead called
16:22:55: [ ReadLba(0x1F3D428, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1776 ] 
16:22:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 189 times 
16:22:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBD, 0x0) , Command count = 1777 ] 
16:22:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:55: [DVTCommonLib]### Card response as High Capacity from card
16:22:55: [DVTCommonLib]### VOLA from card : 0x1
16:22:55: [DVTCommonLib]### CMD Pattern from card : 0xBD
16:22:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E3F0>, <py_sfcl.CommandDataDefinition object at 0x066B9DE0>) , Command count = 1778 ] 
16:22:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9B70>, <py_sfcl.CommandDataDefinition object at 0x066B97B0>) , Command count = 1779 ] 
16:22:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1780 ] 
16:22:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:55: [ SetBusWidth(0x4) , Command count = 1781 ] 
16:22:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:55: ####CSD Registe 2.0 Values####
16:22:55: CSD_STRUCTURE                                 :0x1
16:22:55: Reserv1                                       :0x0
16:22:55: Time Access 1 TAAC                            :0xe
16:22:55: Time Access 2 NSAC*100                        :0x0
16:22:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:55: Card Command Classess CCC                     :0x5b5
16:22:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:55: DSR(driver stage register)  DSR_IMP           :0x0
16:22:55: Reserv2                                       :0x0
16:22:55: Device Size C_SIZE                            :0xedc8
16:22:55: Reserv3                                       :0x0
16:22:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:55: Reserv4                                       :0x0
16:22:55: Write Speed Factor R2W_FACTOR                 :0x2
16:22:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:55: FILE_FORMAT_GRP                               :0x0
16:22:55: COPY flag                                     :0x1
16:22:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:55: File_Format                                   :0x0
16:22:55: CRC                                           :0x0
16:22:55: ####CSD Registe Values####  

16:22:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:55: ProductSerialNumber = 0x23482900
16:22:55: CardMaximumLBA      = 0x3b72400
16:22:55: CardCapacity        = 32G
16:22:55: Is card secure      = 0
16:22:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:55: [DVTCommonLib]###  LogicalWrite called
16:22:57: [ WriteLba(0x2883456, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1782 ] 
16:22:57: [DVTCommonLib]###  LogicalWrite Completed 

16:22:57: [DVTCommonLib]###  LogicalRead called
16:22:58: [ ReadLba(0x2883456, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1783 ] 
16:22:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 190 times 
16:22:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBE, 0x0) , Command count = 1784 ] 
16:22:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:22:58: [DVTCommonLib]### Card response as High Capacity from card
16:22:58: [DVTCommonLib]### VOLA from card : 0x1
16:22:58: [DVTCommonLib]### CMD Pattern from card : 0xBE
16:22:58: [DVTCommonLib]### Reserved bits from card : 0x0
16:22:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x055409C0>, <py_sfcl.CommandDataDefinition object at 0x066B9FC0>) , Command count = 1785 ] 
16:22:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9BD0>, <py_sfcl.CommandDataDefinition object at 0x066B9F60>) , Command count = 1786 ] 
16:22:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1787 ] 
16:22:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:59: [ SetBusWidth(0x4) , Command count = 1788 ] 
16:22:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:22:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:59: ####CSD Registe 2.0 Values####
16:22:59: CSD_STRUCTURE                                 :0x1
16:22:59: Reserv1                                       :0x0
16:22:59: Time Access 1 TAAC                            :0xe
16:22:59: Time Access 2 NSAC*100                        :0x0
16:22:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:59: Card Command Classess CCC                     :0x5b5
16:22:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:59: DSR(driver stage register)  DSR_IMP           :0x0
16:22:59: Reserv2                                       :0x0
16:22:59: Device Size C_SIZE                            :0xedc8
16:22:59: Reserv3                                       :0x0
16:22:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:59: Reserv4                                       :0x0
16:22:59: Write Speed Factor R2W_FACTOR                 :0x2
16:22:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:59: FILE_FORMAT_GRP                               :0x0
16:22:59: COPY flag                                     :0x1
16:22:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:59: File_Format                                   :0x0
16:22:59: CRC                                           :0x0
16:22:59: ####CSD Registe Values####  

16:22:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:22:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:59: ProductSerialNumber = 0x23482900
16:22:59: CardMaximumLBA      = 0x3b72400
16:22:59: CardCapacity        = 32G
16:22:59: Is card secure      = 0
16:22:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:22:59: [DVTCommonLib]###  LogicalWrite called
16:23:00: [ WriteLba(0x91F563, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1789 ] 
16:23:00: [DVTCommonLib]###  LogicalWrite Completed 

16:23:00: [DVTCommonLib]###  LogicalRead called
16:23:02: [ ReadLba(0x91F563, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1790 ] 
16:23:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 191 times 
16:23:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xBF, 0x0) , Command count = 1791 ] 
16:23:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:02: [DVTCommonLib]### Card response as High Capacity from card
16:23:02: [DVTCommonLib]### VOLA from card : 0x1
16:23:02: [DVTCommonLib]### CMD Pattern from card : 0xBF
16:23:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9840>, <py_sfcl.CommandDataDefinition object at 0x066B9DB0>) , Command count = 1792 ] 
16:23:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9D20>, <py_sfcl.CommandDataDefinition object at 0x066B9F00>) , Command count = 1793 ] 
16:23:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1794 ] 
16:23:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:02: [ SetBusWidth(0x4) , Command count = 1795 ] 
16:23:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:02: ####CSD Registe 2.0 Values####
16:23:02: CSD_STRUCTURE                                 :0x1
16:23:02: Reserv1                                       :0x0
16:23:02: Time Access 1 TAAC                            :0xe
16:23:02: Time Access 2 NSAC*100                        :0x0
16:23:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:02: Card Command Classess CCC                     :0x5b5
16:23:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:02: DSR(driver stage register)  DSR_IMP           :0x0
16:23:02: Reserv2                                       :0x0
16:23:02: Device Size C_SIZE                            :0xedc8
16:23:02: Reserv3                                       :0x0
16:23:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:02: Reserv4                                       :0x0
16:23:02: Write Speed Factor R2W_FACTOR                 :0x2
16:23:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:02: FILE_FORMAT_GRP                               :0x0
16:23:02: COPY flag                                     :0x1
16:23:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:02: File_Format                                   :0x0
16:23:02: CRC                                           :0x0
16:23:02: ####CSD Registe Values####  

16:23:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:02: ProductSerialNumber = 0x23482900
16:23:02: CardMaximumLBA      = 0x3b72400
16:23:02: CardCapacity        = 32G
16:23:02: Is card secure      = 0
16:23:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:02: [DVTCommonLib]###  LogicalWrite called
16:23:04: [ WriteLba(0x25EA7D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1796 ] 
16:23:04: [DVTCommonLib]###  LogicalWrite Completed 

16:23:04: [DVTCommonLib]###  LogicalRead called
16:23:05: [ ReadLba(0x25EA7D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1797 ] 
16:23:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 192 times 
16:23:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC0, 0x0) , Command count = 1798 ] 
16:23:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:06: [DVTCommonLib]### Card response as High Capacity from card
16:23:06: [DVTCommonLib]### VOLA from card : 0x1
16:23:06: [DVTCommonLib]### CMD Pattern from card : 0xC0
16:23:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482030>, <py_sfcl.CommandDataDefinition object at 0x066B9600>) , Command count = 1799 ] 
16:23:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540A20>, <py_sfcl.CommandDataDefinition object at 0x066B9C00>) , Command count = 1800 ] 
16:23:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1801 ] 
16:23:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:06: [ SetBusWidth(0x4) , Command count = 1802 ] 
16:23:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:06: ####CSD Registe 2.0 Values####
16:23:06: CSD_STRUCTURE                                 :0x1
16:23:06: Reserv1                                       :0x0
16:23:06: Time Access 1 TAAC                            :0xe
16:23:06: Time Access 2 NSAC*100                        :0x0
16:23:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:06: Card Command Classess CCC                     :0x5b5
16:23:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:06: DSR(driver stage register)  DSR_IMP           :0x0
16:23:06: Reserv2                                       :0x0
16:23:06: Device Size C_SIZE                            :0xedc8
16:23:06: Reserv3                                       :0x0
16:23:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:06: Reserv4                                       :0x0
16:23:06: Write Speed Factor R2W_FACTOR                 :0x2
16:23:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:06: FILE_FORMAT_GRP                               :0x0
16:23:06: COPY flag                                     :0x1
16:23:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:06: File_Format                                   :0x0
16:23:06: CRC                                           :0x0
16:23:06: ####CSD Registe Values####  

16:23:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:06: ProductSerialNumber = 0x23482900
16:23:06: CardMaximumLBA      = 0x3b72400
16:23:06: CardCapacity        = 32G
16:23:06: Is card secure      = 0
16:23:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:06: [DVTCommonLib]###  LogicalWrite called
16:23:07: [ WriteLba(0xF4E21A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1803 ] 
16:23:07: [DVTCommonLib]###  LogicalWrite Completed 

16:23:07: [DVTCommonLib]###  LogicalRead called
16:23:09: [ ReadLba(0xF4E21A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1804 ] 
16:23:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 193 times 
16:23:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC1, 0x0) , Command count = 1805 ] 
16:23:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:09: [DVTCommonLib]### Card response as High Capacity from card
16:23:09: [DVTCommonLib]### VOLA from card : 0x1
16:23:09: [DVTCommonLib]### CMD Pattern from card : 0xC1
16:23:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540FC0>, <py_sfcl.CommandDataDefinition object at 0x066B96C0>) , Command count = 1806 ] 
16:23:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05540C60>, <py_sfcl.CommandDataDefinition object at 0x066B9960>) , Command count = 1807 ] 
16:23:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1808 ] 
16:23:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:09: [ SetBusWidth(0x4) , Command count = 1809 ] 
16:23:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:09: ####CSD Registe 2.0 Values####
16:23:09: CSD_STRUCTURE                                 :0x1
16:23:09: Reserv1                                       :0x0
16:23:09: Time Access 1 TAAC                            :0xe
16:23:09: Time Access 2 NSAC*100                        :0x0
16:23:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:09: Card Command Classess CCC                     :0x5b5
16:23:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:09: DSR(driver stage register)  DSR_IMP           :0x0
16:23:09: Reserv2                                       :0x0
16:23:09: Device Size C_SIZE                            :0xedc8
16:23:09: Reserv3                                       :0x0
16:23:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:09: Reserv4                                       :0x0
16:23:09: Write Speed Factor R2W_FACTOR                 :0x2
16:23:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:09: FILE_FORMAT_GRP                               :0x0
16:23:09: COPY flag                                     :0x1
16:23:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:09: File_Format                                   :0x0
16:23:09: CRC                                           :0x0
16:23:09: ####CSD Registe Values####  

16:23:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:09: ProductSerialNumber = 0x23482900
16:23:09: CardMaximumLBA      = 0x3b72400
16:23:09: CardCapacity        = 32G
16:23:09: Is card secure      = 0
16:23:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:09: [DVTCommonLib]###  LogicalWrite called
16:23:11: [ WriteLba(0x19428F4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1810 ] 
16:23:11: [DVTCommonLib]###  LogicalWrite Completed 

16:23:11: [DVTCommonLib]###  LogicalRead called
16:23:12: [ ReadLba(0x19428F4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1811 ] 
16:23:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 194 times 
16:23:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC2, 0x0) , Command count = 1812 ] 
16:23:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:13: [DVTCommonLib]### Card response as High Capacity from card
16:23:13: [DVTCommonLib]### VOLA from card : 0x1
16:23:13: [DVTCommonLib]### CMD Pattern from card : 0xC2
16:23:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603900>, <py_sfcl.CommandDataDefinition object at 0x06603D80>) , Command count = 1813 ] 
16:23:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0551A480>, <py_sfcl.CommandDataDefinition object at 0x066B94E0>) , Command count = 1814 ] 
16:23:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1815 ] 
16:23:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:13: [ SetBusWidth(0x4) , Command count = 1816 ] 
16:23:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:13: ####CSD Registe 2.0 Values####
16:23:13: CSD_STRUCTURE                                 :0x1
16:23:13: Reserv1                                       :0x0
16:23:13: Time Access 1 TAAC                            :0xe
16:23:13: Time Access 2 NSAC*100                        :0x0
16:23:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:13: Card Command Classess CCC                     :0x5b5
16:23:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:13: DSR(driver stage register)  DSR_IMP           :0x0
16:23:13: Reserv2                                       :0x0
16:23:13: Device Size C_SIZE                            :0xedc8
16:23:13: Reserv3                                       :0x0
16:23:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:13: Reserv4                                       :0x0
16:23:13: Write Speed Factor R2W_FACTOR                 :0x2
16:23:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:13: FILE_FORMAT_GRP                               :0x0
16:23:13: COPY flag                                     :0x1
16:23:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:13: File_Format                                   :0x0
16:23:13: CRC                                           :0x0
16:23:13: ####CSD Registe Values####  

16:23:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:13: ProductSerialNumber = 0x23482900
16:23:13: CardMaximumLBA      = 0x3b72400
16:23:13: CardCapacity        = 32G
16:23:13: Is card secure      = 0
16:23:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:13: [DVTCommonLib]###  LogicalWrite called
16:23:14: [ WriteLba(0x31C94A5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1817 ] 
16:23:14: [DVTCommonLib]###  LogicalWrite Completed 

16:23:14: [DVTCommonLib]###  LogicalRead called
16:23:16: [ ReadLba(0x31C94A5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1818 ] 
16:23:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:16: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 195 times 
16:23:16: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC3, 0x0) , Command count = 1819 ] 
16:23:16: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:16: [DVTCommonLib]### Card response as High Capacity from card
16:23:16: [DVTCommonLib]### VOLA from card : 0x1
16:23:16: [DVTCommonLib]### CMD Pattern from card : 0xC3
16:23:16: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9570>, <py_sfcl.CommandDataDefinition object at 0x066B9C90>) , Command count = 1820 ] 
16:23:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603E10>, <py_sfcl.CommandDataDefinition object at 0x06603960>) , Command count = 1821 ] 
16:23:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1822 ] 
16:23:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:16: [ SetBusWidth(0x4) , Command count = 1823 ] 
16:23:16: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:16: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:16: ####CSD Registe 2.0 Values####
16:23:16: CSD_STRUCTURE                                 :0x1
16:23:16: Reserv1                                       :0x0
16:23:16: Time Access 1 TAAC                            :0xe
16:23:16: Time Access 2 NSAC*100                        :0x0
16:23:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:16: Card Command Classess CCC                     :0x5b5
16:23:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:16: DSR(driver stage register)  DSR_IMP           :0x0
16:23:16: Reserv2                                       :0x0
16:23:16: Device Size C_SIZE                            :0xedc8
16:23:16: Reserv3                                       :0x0
16:23:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:16: Reserv4                                       :0x0
16:23:16: Write Speed Factor R2W_FACTOR                 :0x2
16:23:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:16: FILE_FORMAT_GRP                               :0x0
16:23:16: COPY flag                                     :0x1
16:23:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:16: File_Format                                   :0x0
16:23:16: CRC                                           :0x0
16:23:16: ####CSD Registe Values####  

16:23:16: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:16: ProductSerialNumber = 0x23482900
16:23:16: CardMaximumLBA      = 0x3b72400
16:23:16: CardCapacity        = 32G
16:23:16: Is card secure      = 0
16:23:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:16: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:16: [DVTCommonLib]###  LogicalWrite called
16:23:18: [ WriteLba(0x1543842, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1824 ] 
16:23:18: [DVTCommonLib]###  LogicalWrite Completed 

16:23:18: [DVTCommonLib]###  LogicalRead called
16:23:19: [ ReadLba(0x1543842, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1825 ] 
16:23:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:19: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:19: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 196 times 
16:23:19: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC4, 0x0) , Command count = 1826 ] 
16:23:20: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:20: [DVTCommonLib]### Card response as High Capacity from card
16:23:20: [DVTCommonLib]### VOLA from card : 0x1
16:23:20: [DVTCommonLib]### CMD Pattern from card : 0xC4
16:23:20: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066B9510>, <py_sfcl.CommandDataDefinition object at 0x066035A0>) , Command count = 1827 ] 
16:23:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603CC0>, <py_sfcl.CommandDataDefinition object at 0x06603720>) , Command count = 1828 ] 
16:23:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1829 ] 
16:23:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:20: [ SetBusWidth(0x4) , Command count = 1830 ] 
16:23:20: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:20: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:20: ####CSD Registe 2.0 Values####
16:23:20: CSD_STRUCTURE                                 :0x1
16:23:20: Reserv1                                       :0x0
16:23:20: Time Access 1 TAAC                            :0xe
16:23:20: Time Access 2 NSAC*100                        :0x0
16:23:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:20: Card Command Classess CCC                     :0x5b5
16:23:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:20: DSR(driver stage register)  DSR_IMP           :0x0
16:23:20: Reserv2                                       :0x0
16:23:20: Device Size C_SIZE                            :0xedc8
16:23:20: Reserv3                                       :0x0
16:23:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:20: Reserv4                                       :0x0
16:23:20: Write Speed Factor R2W_FACTOR                 :0x2
16:23:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:20: FILE_FORMAT_GRP                               :0x0
16:23:20: COPY flag                                     :0x1
16:23:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:20: File_Format                                   :0x0
16:23:20: CRC                                           :0x0
16:23:20: ####CSD Registe Values####  

16:23:20: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:20: ProductSerialNumber = 0x23482900
16:23:20: CardMaximumLBA      = 0x3b72400
16:23:20: CardCapacity        = 32G
16:23:20: Is card secure      = 0
16:23:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:20: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:20: [DVTCommonLib]###  LogicalWrite called
16:23:21: [ WriteLba(0xCEBC67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1831 ] 
16:23:21: [DVTCommonLib]###  LogicalWrite Completed 

16:23:21: [DVTCommonLib]###  LogicalRead called
16:23:23: [ ReadLba(0xCEBC67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1832 ] 
16:23:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:23: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 197 times 
16:23:23: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC5, 0x0) , Command count = 1833 ] 
16:23:23: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:23: [DVTCommonLib]### Card response as High Capacity from card
16:23:23: [DVTCommonLib]### VOLA from card : 0x1
16:23:23: [DVTCommonLib]### CMD Pattern from card : 0xC5
16:23:23: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C090>, <py_sfcl.CommandDataDefinition object at 0x06603A80>) , Command count = 1834 ] 
16:23:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603480>, <py_sfcl.CommandDataDefinition object at 0x06603F00>) , Command count = 1835 ] 
16:23:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1836 ] 
16:23:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:23: [ SetBusWidth(0x4) , Command count = 1837 ] 
16:23:23: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:23: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:23: ####CSD Registe 2.0 Values####
16:23:23: CSD_STRUCTURE                                 :0x1
16:23:23: Reserv1                                       :0x0
16:23:23: Time Access 1 TAAC                            :0xe
16:23:23: Time Access 2 NSAC*100                        :0x0
16:23:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:23: Card Command Classess CCC                     :0x5b5
16:23:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:23: DSR(driver stage register)  DSR_IMP           :0x0
16:23:23: Reserv2                                       :0x0
16:23:23: Device Size C_SIZE                            :0xedc8
16:23:23: Reserv3                                       :0x0
16:23:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:23: Reserv4                                       :0x0
16:23:23: Write Speed Factor R2W_FACTOR                 :0x2
16:23:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:23: FILE_FORMAT_GRP                               :0x0
16:23:23: COPY flag                                     :0x1
16:23:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:23: File_Format                                   :0x0
16:23:23: CRC                                           :0x0
16:23:23: ####CSD Registe Values####  

16:23:23: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:23: ProductSerialNumber = 0x23482900
16:23:23: CardMaximumLBA      = 0x3b72400
16:23:23: CardCapacity        = 32G
16:23:23: Is card secure      = 0
16:23:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:23: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:23: [DVTCommonLib]###  LogicalWrite called
16:23:25: [ WriteLba(0x17F3CC8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1838 ] 
16:23:25: [DVTCommonLib]###  LogicalWrite Completed 

16:23:25: [DVTCommonLib]###  LogicalRead called
16:23:27: [ ReadLba(0x17F3CC8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1839 ] 
16:23:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:27: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 198 times 
16:23:27: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC6, 0x0) , Command count = 1840 ] 
16:23:27: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:27: [DVTCommonLib]### Card response as High Capacity from card
16:23:27: [DVTCommonLib]### VOLA from card : 0x1
16:23:27: [DVTCommonLib]### CMD Pattern from card : 0xC6
16:23:27: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C2A0>, <py_sfcl.CommandDataDefinition object at 0x06603CF0>) , Command count = 1841 ] 
16:23:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603E70>, <py_sfcl.CommandDataDefinition object at 0x06603BD0>) , Command count = 1842 ] 
16:23:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1843 ] 
16:23:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:27: [ SetBusWidth(0x4) , Command count = 1844 ] 
16:23:27: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:27: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:27: ####CSD Registe 2.0 Values####
16:23:27: CSD_STRUCTURE                                 :0x1
16:23:27: Reserv1                                       :0x0
16:23:27: Time Access 1 TAAC                            :0xe
16:23:27: Time Access 2 NSAC*100                        :0x0
16:23:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:27: Card Command Classess CCC                     :0x5b5
16:23:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:27: DSR(driver stage register)  DSR_IMP           :0x0
16:23:27: Reserv2                                       :0x0
16:23:27: Device Size C_SIZE                            :0xedc8
16:23:27: Reserv3                                       :0x0
16:23:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:27: Reserv4                                       :0x0
16:23:27: Write Speed Factor R2W_FACTOR                 :0x2
16:23:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:27: FILE_FORMAT_GRP                               :0x0
16:23:27: COPY flag                                     :0x1
16:23:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:27: File_Format                                   :0x0
16:23:27: CRC                                           :0x0
16:23:27: ####CSD Registe Values####  

16:23:27: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:27: ProductSerialNumber = 0x23482900
16:23:27: CardMaximumLBA      = 0x3b72400
16:23:27: CardCapacity        = 32G
16:23:27: Is card secure      = 0
16:23:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:27: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:27: [DVTCommonLib]###  LogicalWrite called
16:23:29: [ WriteLba(0x10EE8C0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1845 ] 
16:23:29: [DVTCommonLib]###  LogicalWrite Completed 

16:23:29: [DVTCommonLib]###  LogicalRead called
16:23:30: [ ReadLba(0x10EE8C0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1846 ] 
16:23:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:30: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 199 times 
16:23:30: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC7, 0x0) , Command count = 1847 ] 
16:23:30: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:30: [DVTCommonLib]### Card response as High Capacity from card
16:23:30: [DVTCommonLib]### VOLA from card : 0x1
16:23:30: [DVTCommonLib]### CMD Pattern from card : 0xC7
16:23:30: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603BA0>, <py_sfcl.CommandDataDefinition object at 0x0660C240>) , Command count = 1848 ] 
16:23:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C030>, <py_sfcl.CommandDataDefinition object at 0x06613A20>) , Command count = 1849 ] 
16:23:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1850 ] 
16:23:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:30: [ SetBusWidth(0x4) , Command count = 1851 ] 
16:23:30: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:30: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:30: ####CSD Registe 2.0 Values####
16:23:30: CSD_STRUCTURE                                 :0x1
16:23:30: Reserv1                                       :0x0
16:23:30: Time Access 1 TAAC                            :0xe
16:23:30: Time Access 2 NSAC*100                        :0x0
16:23:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:30: Card Command Classess CCC                     :0x5b5
16:23:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:30: DSR(driver stage register)  DSR_IMP           :0x0
16:23:30: Reserv2                                       :0x0
16:23:30: Device Size C_SIZE                            :0xedc8
16:23:30: Reserv3                                       :0x0
16:23:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:30: Reserv4                                       :0x0
16:23:30: Write Speed Factor R2W_FACTOR                 :0x2
16:23:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:30: FILE_FORMAT_GRP                               :0x0
16:23:30: COPY flag                                     :0x1
16:23:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:30: File_Format                                   :0x0
16:23:30: CRC                                           :0x0
16:23:30: ####CSD Registe Values####  

16:23:30: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:30: ProductSerialNumber = 0x23482900
16:23:30: CardMaximumLBA      = 0x3b72400
16:23:30: CardCapacity        = 32G
16:23:30: Is card secure      = 0
16:23:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:30: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:30: [DVTCommonLib]###  LogicalWrite called
16:23:32: [ WriteLba(0x3909904, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1852 ] 
16:23:32: [DVTCommonLib]###  LogicalWrite Completed 

16:23:32: [DVTCommonLib]###  LogicalRead called
16:23:34: [ ReadLba(0x3909904, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1853 ] 
16:23:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:34: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 200 times 
16:23:34: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC8, 0x0) , Command count = 1854 ] 
16:23:34: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:34: [DVTCommonLib]### Card response as High Capacity from card
16:23:34: [DVTCommonLib]### VOLA from card : 0x1
16:23:34: [DVTCommonLib]### CMD Pattern from card : 0xC8
16:23:34: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06482780>, <py_sfcl.CommandDataDefinition object at 0x06603C60>) , Command count = 1855 ] 
16:23:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0660C270>, <py_sfcl.CommandDataDefinition object at 0x06613990>) , Command count = 1856 ] 
16:23:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1857 ] 
16:23:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:34: [ SetBusWidth(0x4) , Command count = 1858 ] 
16:23:34: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:34: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:34: ####CSD Registe 2.0 Values####
16:23:34: CSD_STRUCTURE                                 :0x1
16:23:34: Reserv1                                       :0x0
16:23:34: Time Access 1 TAAC                            :0xe
16:23:34: Time Access 2 NSAC*100                        :0x0
16:23:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:34: Card Command Classess CCC                     :0x5b5
16:23:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:34: DSR(driver stage register)  DSR_IMP           :0x0
16:23:34: Reserv2                                       :0x0
16:23:34: Device Size C_SIZE                            :0xedc8
16:23:34: Reserv3                                       :0x0
16:23:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:34: Reserv4                                       :0x0
16:23:34: Write Speed Factor R2W_FACTOR                 :0x2
16:23:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:34: FILE_FORMAT_GRP                               :0x0
16:23:34: COPY flag                                     :0x1
16:23:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:34: File_Format                                   :0x0
16:23:34: CRC                                           :0x0
16:23:34: ####CSD Registe Values####  

16:23:34: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:34: ProductSerialNumber = 0x23482900
16:23:34: CardMaximumLBA      = 0x3b72400
16:23:34: CardCapacity        = 32G
16:23:34: Is card secure      = 0
16:23:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:34: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:34: [DVTCommonLib]###  LogicalWrite called
16:23:36: [ WriteLba(0x3224C76, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1859 ] 
16:23:36: [DVTCommonLib]###  LogicalWrite Completed 

16:23:36: [DVTCommonLib]###  LogicalRead called
16:23:37: [ ReadLba(0x3224C76, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1860 ] 
16:23:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:37: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 201 times 
16:23:37: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xC9, 0x0) , Command count = 1861 ] 
16:23:37: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:37: [DVTCommonLib]### Card response as High Capacity from card
16:23:37: [DVTCommonLib]### VOLA from card : 0x1
16:23:37: [DVTCommonLib]### CMD Pattern from card : 0xC9
16:23:37: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066192A0>, <py_sfcl.CommandDataDefinition object at 0x066192D0>) , Command count = 1862 ] 
16:23:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603510>, <py_sfcl.CommandDataDefinition object at 0x06613CF0>) , Command count = 1863 ] 
16:23:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1864 ] 
16:23:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:37: [ SetBusWidth(0x4) , Command count = 1865 ] 
16:23:37: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:37: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:37: ####CSD Registe 2.0 Values####
16:23:37: CSD_STRUCTURE                                 :0x1
16:23:37: Reserv1                                       :0x0
16:23:37: Time Access 1 TAAC                            :0xe
16:23:37: Time Access 2 NSAC*100                        :0x0
16:23:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:37: Card Command Classess CCC                     :0x5b5
16:23:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:37: DSR(driver stage register)  DSR_IMP           :0x0
16:23:37: Reserv2                                       :0x0
16:23:37: Device Size C_SIZE                            :0xedc8
16:23:37: Reserv3                                       :0x0
16:23:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:37: Reserv4                                       :0x0
16:23:37: Write Speed Factor R2W_FACTOR                 :0x2
16:23:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:37: FILE_FORMAT_GRP                               :0x0
16:23:37: COPY flag                                     :0x1
16:23:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:37: File_Format                                   :0x0
16:23:37: CRC                                           :0x0
16:23:37: ####CSD Registe Values####  

16:23:37: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:37: ProductSerialNumber = 0x23482900
16:23:37: CardMaximumLBA      = 0x3b72400
16:23:37: CardCapacity        = 32G
16:23:37: Is card secure      = 0
16:23:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:37: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:37: [DVTCommonLib]###  LogicalWrite called
16:23:39: [ WriteLba(0x235AAE9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1866 ] 
16:23:39: [DVTCommonLib]###  LogicalWrite Completed 

16:23:39: [DVTCommonLib]###  LogicalRead called
16:23:41: [ ReadLba(0x235AAE9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1867 ] 
16:23:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:41: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 202 times 
16:23:41: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCA, 0x0) , Command count = 1868 ] 
16:23:41: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:41: [DVTCommonLib]### Card response as High Capacity from card
16:23:41: [DVTCommonLib]### VOLA from card : 0x1
16:23:41: [DVTCommonLib]### CMD Pattern from card : 0xCA
16:23:41: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066139C0>, <py_sfcl.CommandDataDefinition object at 0x06619690>) , Command count = 1869 ] 
16:23:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619240>, <py_sfcl.CommandDataDefinition object at 0x066198A0>) , Command count = 1870 ] 
16:23:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1871 ] 
16:23:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:41: [ SetBusWidth(0x4) , Command count = 1872 ] 
16:23:41: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:41: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:41: ####CSD Registe 2.0 Values####
16:23:41: CSD_STRUCTURE                                 :0x1
16:23:41: Reserv1                                       :0x0
16:23:41: Time Access 1 TAAC                            :0xe
16:23:41: Time Access 2 NSAC*100                        :0x0
16:23:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:41: Card Command Classess CCC                     :0x5b5
16:23:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:41: DSR(driver stage register)  DSR_IMP           :0x0
16:23:41: Reserv2                                       :0x0
16:23:41: Device Size C_SIZE                            :0xedc8
16:23:41: Reserv3                                       :0x0
16:23:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:41: Reserv4                                       :0x0
16:23:41: Write Speed Factor R2W_FACTOR                 :0x2
16:23:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:41: FILE_FORMAT_GRP                               :0x0
16:23:41: COPY flag                                     :0x1
16:23:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:41: File_Format                                   :0x0
16:23:41: CRC                                           :0x0
16:23:41: ####CSD Registe Values####  

16:23:41: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:41: ProductSerialNumber = 0x23482900
16:23:41: CardMaximumLBA      = 0x3b72400
16:23:41: CardCapacity        = 32G
16:23:41: Is card secure      = 0
16:23:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:41: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:41: [DVTCommonLib]###  LogicalWrite called
16:23:43: [ WriteLba(0x2310C7A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1873 ] 
16:23:43: [DVTCommonLib]###  LogicalWrite Completed 

16:23:43: [DVTCommonLib]###  LogicalRead called
16:23:44: [ ReadLba(0x2310C7A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1874 ] 
16:23:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:44: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 203 times 
16:23:44: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCB, 0x0) , Command count = 1875 ] 
16:23:44: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:44: [DVTCommonLib]### Card response as High Capacity from card
16:23:44: [DVTCommonLib]### VOLA from card : 0x1
16:23:44: [DVTCommonLib]### CMD Pattern from card : 0xCB
16:23:44: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619B10>, <py_sfcl.CommandDataDefinition object at 0x06619A20>) , Command count = 1876 ] 
16:23:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06603930>, <py_sfcl.CommandDataDefinition object at 0x066190F0>) , Command count = 1877 ] 
16:23:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1878 ] 
16:23:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:44: [ SetBusWidth(0x4) , Command count = 1879 ] 
16:23:44: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:44: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:45: ####CSD Registe 2.0 Values####
16:23:45: CSD_STRUCTURE                                 :0x1
16:23:45: Reserv1                                       :0x0
16:23:45: Time Access 1 TAAC                            :0xe
16:23:45: Time Access 2 NSAC*100                        :0x0
16:23:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:45: Card Command Classess CCC                     :0x5b5
16:23:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:45: DSR(driver stage register)  DSR_IMP           :0x0
16:23:45: Reserv2                                       :0x0
16:23:45: Device Size C_SIZE                            :0xedc8
16:23:45: Reserv3                                       :0x0
16:23:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:45: Reserv4                                       :0x0
16:23:45: Write Speed Factor R2W_FACTOR                 :0x2
16:23:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:45: FILE_FORMAT_GRP                               :0x0
16:23:45: COPY flag                                     :0x1
16:23:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:45: File_Format                                   :0x0
16:23:45: CRC                                           :0x0
16:23:45: ####CSD Registe Values####  

16:23:45: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:45: ProductSerialNumber = 0x23482900
16:23:45: CardMaximumLBA      = 0x3b72400
16:23:45: CardCapacity        = 32G
16:23:45: Is card secure      = 0
16:23:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:45: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:45: [DVTCommonLib]###  LogicalWrite called
16:23:46: [ WriteLba(0x6535CD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1880 ] 
16:23:46: [DVTCommonLib]###  LogicalWrite Completed 

16:23:46: [DVTCommonLib]###  LogicalRead called
16:23:48: [ ReadLba(0x6535CD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1881 ] 
16:23:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:48: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 204 times 
16:23:48: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCC, 0x0) , Command count = 1882 ] 
16:23:48: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:48: [DVTCommonLib]### Card response as High Capacity from card
16:23:48: [DVTCommonLib]### VOLA from card : 0x1
16:23:48: [DVTCommonLib]### CMD Pattern from card : 0xCC
16:23:48: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619030>, <py_sfcl.CommandDataDefinition object at 0x06619E10>) , Command count = 1883 ] 
16:23:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619600>, <py_sfcl.CommandDataDefinition object at 0x06619150>) , Command count = 1884 ] 
16:23:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1885 ] 
16:23:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:48: [ SetBusWidth(0x4) , Command count = 1886 ] 
16:23:48: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:48: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:48: ####CSD Registe 2.0 Values####
16:23:48: CSD_STRUCTURE                                 :0x1
16:23:48: Reserv1                                       :0x0
16:23:48: Time Access 1 TAAC                            :0xe
16:23:48: Time Access 2 NSAC*100                        :0x0
16:23:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:48: Card Command Classess CCC                     :0x5b5
16:23:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:48: DSR(driver stage register)  DSR_IMP           :0x0
16:23:48: Reserv2                                       :0x0
16:23:48: Device Size C_SIZE                            :0xedc8
16:23:48: Reserv3                                       :0x0
16:23:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:48: Reserv4                                       :0x0
16:23:48: Write Speed Factor R2W_FACTOR                 :0x2
16:23:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:48: FILE_FORMAT_GRP                               :0x0
16:23:48: COPY flag                                     :0x1
16:23:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:48: File_Format                                   :0x0
16:23:48: CRC                                           :0x0
16:23:48: ####CSD Registe Values####  

16:23:48: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:48: ProductSerialNumber = 0x23482900
16:23:48: CardMaximumLBA      = 0x3b72400
16:23:48: CardCapacity        = 32G
16:23:48: Is card secure      = 0
16:23:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:48: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:48: [DVTCommonLib]###  LogicalWrite called
16:23:50: [ WriteLba(0x34A5B55, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1887 ] 
16:23:50: [DVTCommonLib]###  LogicalWrite Completed 

16:23:50: [DVTCommonLib]###  LogicalRead called
16:23:51: [ ReadLba(0x34A5B55, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1888 ] 
16:23:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:51: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:51: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 205 times 
16:23:51: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCD, 0x0) , Command count = 1889 ] 
16:23:51: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:51: [DVTCommonLib]### Card response as High Capacity from card
16:23:51: [DVTCommonLib]### VOLA from card : 0x1
16:23:51: [DVTCommonLib]### CMD Pattern from card : 0xCD
16:23:51: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C1E0>, <py_sfcl.CommandDataDefinition object at 0x06619E70>) , Command count = 1890 ] 
16:23:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x066199F0>, <py_sfcl.CommandDataDefinition object at 0x06619420>) , Command count = 1891 ] 
16:23:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1892 ] 
16:23:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:52: [ SetBusWidth(0x4) , Command count = 1893 ] 
16:23:52: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:52: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:52: ####CSD Registe 2.0 Values####
16:23:52: CSD_STRUCTURE                                 :0x1
16:23:52: Reserv1                                       :0x0
16:23:52: Time Access 1 TAAC                            :0xe
16:23:52: Time Access 2 NSAC*100                        :0x0
16:23:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:52: Card Command Classess CCC                     :0x5b5
16:23:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:52: DSR(driver stage register)  DSR_IMP           :0x0
16:23:52: Reserv2                                       :0x0
16:23:52: Device Size C_SIZE                            :0xedc8
16:23:52: Reserv3                                       :0x0
16:23:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:52: Reserv4                                       :0x0
16:23:52: Write Speed Factor R2W_FACTOR                 :0x2
16:23:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:52: FILE_FORMAT_GRP                               :0x0
16:23:52: COPY flag                                     :0x1
16:23:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:52: File_Format                                   :0x0
16:23:52: CRC                                           :0x0
16:23:52: ####CSD Registe Values####  

16:23:52: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:52: ProductSerialNumber = 0x23482900
16:23:52: CardMaximumLBA      = 0x3b72400
16:23:52: CardCapacity        = 32G
16:23:52: Is card secure      = 0
16:23:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:52: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:52: [DVTCommonLib]###  LogicalWrite called
16:23:53: [ WriteLba(0x22B6439, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1894 ] 
16:23:53: [DVTCommonLib]###  LogicalWrite Completed 

16:23:53: [DVTCommonLib]###  LogicalRead called
16:23:55: [ ReadLba(0x22B6439, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1895 ] 
16:23:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:55: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 206 times 
16:23:55: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCE, 0x0) , Command count = 1896 ] 
16:23:55: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:55: [DVTCommonLib]### Card response as High Capacity from card
16:23:55: [DVTCommonLib]### VOLA from card : 0x1
16:23:55: [DVTCommonLib]### CMD Pattern from card : 0xCE
16:23:55: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C6C0>, <py_sfcl.CommandDataDefinition object at 0x0661C150>) , Command count = 1897 ] 
16:23:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619EA0>, <py_sfcl.CommandDataDefinition object at 0x06619360>) , Command count = 1898 ] 
16:23:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1899 ] 
16:23:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:55: [ SetBusWidth(0x4) , Command count = 1900 ] 
16:23:55: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:55: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:55: ####CSD Registe 2.0 Values####
16:23:55: CSD_STRUCTURE                                 :0x1
16:23:55: Reserv1                                       :0x0
16:23:55: Time Access 1 TAAC                            :0xe
16:23:55: Time Access 2 NSAC*100                        :0x0
16:23:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:55: Card Command Classess CCC                     :0x5b5
16:23:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:55: DSR(driver stage register)  DSR_IMP           :0x0
16:23:55: Reserv2                                       :0x0
16:23:55: Device Size C_SIZE                            :0xedc8
16:23:55: Reserv3                                       :0x0
16:23:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:55: Reserv4                                       :0x0
16:23:55: Write Speed Factor R2W_FACTOR                 :0x2
16:23:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:55: FILE_FORMAT_GRP                               :0x0
16:23:55: COPY flag                                     :0x1
16:23:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:55: File_Format                                   :0x0
16:23:55: CRC                                           :0x0
16:23:55: ####CSD Registe Values####  

16:23:55: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:55: ProductSerialNumber = 0x23482900
16:23:55: CardMaximumLBA      = 0x3b72400
16:23:55: CardCapacity        = 32G
16:23:55: Is card secure      = 0
16:23:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:55: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:55: [DVTCommonLib]###  LogicalWrite called
16:23:57: [ WriteLba(0x23E429C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1901 ] 
16:23:57: [DVTCommonLib]###  LogicalWrite Completed 

16:23:57: [DVTCommonLib]###  LogicalRead called
16:23:58: [ ReadLba(0x23E429C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1902 ] 
16:23:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:58: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:58: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 207 times 
16:23:58: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xCF, 0x0) , Command count = 1903 ] 
16:23:58: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:23:58: [DVTCommonLib]### Card response as High Capacity from card
16:23:58: [DVTCommonLib]### VOLA from card : 0x1
16:23:58: [DVTCommonLib]### CMD Pattern from card : 0xCF
16:23:58: [DVTCommonLib]### Reserved bits from card : 0x0
16:23:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06619F60>, <py_sfcl.CommandDataDefinition object at 0x06619750>) , Command count = 1904 ] 
16:23:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C2A0>, <py_sfcl.CommandDataDefinition object at 0x0661C630>) , Command count = 1905 ] 
16:23:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1906 ] 
16:23:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:59: [ SetBusWidth(0x4) , Command count = 1907 ] 
16:23:59: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:23:59: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:59: ####CSD Registe 2.0 Values####
16:23:59: CSD_STRUCTURE                                 :0x1
16:23:59: Reserv1                                       :0x0
16:23:59: Time Access 1 TAAC                            :0xe
16:23:59: Time Access 2 NSAC*100                        :0x0
16:23:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:59: Card Command Classess CCC                     :0x5b5
16:23:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:59: DSR(driver stage register)  DSR_IMP           :0x0
16:23:59: Reserv2                                       :0x0
16:23:59: Device Size C_SIZE                            :0xedc8
16:23:59: Reserv3                                       :0x0
16:23:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:59: Reserv4                                       :0x0
16:23:59: Write Speed Factor R2W_FACTOR                 :0x2
16:23:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:59: FILE_FORMAT_GRP                               :0x0
16:23:59: COPY flag                                     :0x1
16:23:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:59: File_Format                                   :0x0
16:23:59: CRC                                           :0x0
16:23:59: ####CSD Registe Values####  

16:23:59: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:23:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:59: ProductSerialNumber = 0x23482900
16:23:59: CardMaximumLBA      = 0x3b72400
16:23:59: CardCapacity        = 32G
16:23:59: Is card secure      = 0
16:23:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:59: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:23:59: [DVTCommonLib]###  LogicalWrite called
16:24:00: [ WriteLba(0xAB9641, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1908 ] 
16:24:00: [DVTCommonLib]###  LogicalWrite Completed 

16:24:00: [DVTCommonLib]###  LogicalRead called
16:24:02: [ ReadLba(0xAB9641, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1909 ] 
16:24:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:02: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 208 times 
16:24:02: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:24:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD0, 0x0) , Command count = 1910 ] 
16:24:02: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:24:02: [DVTCommonLib]### Card response as High Capacity from card
16:24:02: [DVTCommonLib]### VOLA from card : 0x1
16:24:02: [DVTCommonLib]### CMD Pattern from card : 0xD0
16:24:02: [DVTCommonLib]### Reserved bits from card : 0x0
16:24:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C5D0>, <py_sfcl.CommandDataDefinition object at 0x0661C600>) , Command count = 1911 ] 
16:24:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E240>, <py_sfcl.CommandDataDefinition object at 0x0661C510>) , Command count = 1912 ] 
16:24:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1913 ] 
16:24:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:02: [ SetBusWidth(0x4) , Command count = 1914 ] 
16:24:02: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:24:02: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:02: ####CSD Registe 2.0 Values####
16:24:02: CSD_STRUCTURE                                 :0x1
16:24:02: Reserv1                                       :0x0
16:24:02: Time Access 1 TAAC                            :0xe
16:24:02: Time Access 2 NSAC*100                        :0x0
16:24:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:02: Card Command Classess CCC                     :0x5b5
16:24:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:02: DSR(driver stage register)  DSR_IMP           :0x0
16:24:02: Reserv2                                       :0x0
16:24:02: Device Size C_SIZE                            :0xedc8
16:24:02: Reserv3                                       :0x0
16:24:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:02: Reserv4                                       :0x0
16:24:02: Write Speed Factor R2W_FACTOR                 :0x2
16:24:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:02: FILE_FORMAT_GRP                               :0x0
16:24:02: COPY flag                                     :0x1
16:24:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:02: File_Format                                   :0x0
16:24:02: CRC                                           :0x0
16:24:02: ####CSD Registe Values####  

16:24:02: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:24:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:02: ProductSerialNumber = 0x23482900
16:24:02: CardMaximumLBA      = 0x3b72400
16:24:02: CardCapacity        = 32G
16:24:02: Is card secure      = 0
16:24:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:02: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:02: [DVTCommonLib]###  LogicalWrite called
16:24:04: [ WriteLba(0x11599D7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1915 ] 
16:24:04: [DVTCommonLib]###  LogicalWrite Completed 

16:24:04: [DVTCommonLib]###  LogicalRead called
16:24:05: [ ReadLba(0x11599D7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1916 ] 
16:24:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:05: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:05: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 209 times 
16:24:05: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:24:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD1, 0x0) , Command count = 1917 ] 
16:24:06: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:24:06: [DVTCommonLib]### Card response as High Capacity from card
16:24:06: [DVTCommonLib]### VOLA from card : 0x1
16:24:06: [DVTCommonLib]### CMD Pattern from card : 0xD1
16:24:06: [DVTCommonLib]### Reserved bits from card : 0x0
16:24:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py_sfcl.CommandDataDefinition object at 0x0661CCF0>) , Command count = 1918 ] 
16:24:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C480>, <py_sfcl.CommandDataDefinition object at 0x0661C540>) , Command count = 1919 ] 
16:24:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1920 ] 
16:24:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:06: [ SetBusWidth(0x4) , Command count = 1921 ] 
16:24:06: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:24:06: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:06: ####CSD Registe 2.0 Values####
16:24:06: CSD_STRUCTURE                                 :0x1
16:24:06: Reserv1                                       :0x0
16:24:06: Time Access 1 TAAC                            :0xe
16:24:06: Time Access 2 NSAC*100                        :0x0
16:24:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:06: Card Command Classess CCC                     :0x5b5
16:24:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:06: DSR(driver stage register)  DSR_IMP           :0x0
16:24:06: Reserv2                                       :0x0
16:24:06: Device Size C_SIZE                            :0xedc8
16:24:06: Reserv3                                       :0x0
16:24:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:06: Reserv4                                       :0x0
16:24:06: Write Speed Factor R2W_FACTOR                 :0x2
16:24:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:06: FILE_FORMAT_GRP                               :0x0
16:24:06: COPY flag                                     :0x1
16:24:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:06: File_Format                                   :0x0
16:24:06: CRC                                           :0x0
16:24:06: ####CSD Registe Values####  

16:24:06: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:24:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:06: ProductSerialNumber = 0x23482900
16:24:06: CardMaximumLBA      = 0x3b72400
16:24:06: CardCapacity        = 32G
16:24:06: Is card secure      = 0
16:24:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:06: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:06: [DVTCommonLib]###  LogicalWrite called
16:24:07: [ WriteLba(0x2D3BEBC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1922 ] 
16:24:07: [DVTCommonLib]###  LogicalWrite Completed 

16:24:07: [DVTCommonLib]###  LogicalRead called
16:24:09: [ ReadLba(0x2D3BEBC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1923 ] 
16:24:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:09: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 210 times 
16:24:09: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:24:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD2, 0x0) , Command count = 1924 ] 
16:24:09: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:24:09: [DVTCommonLib]### Card response as High Capacity from card
16:24:09: [DVTCommonLib]### VOLA from card : 0x1
16:24:09: [DVTCommonLib]### CMD Pattern from card : 0xD2
16:24:09: [DVTCommonLib]### Reserved bits from card : 0x0
16:24:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py_sfcl.CommandDataDefinition object at 0x0661C8A0>) , Command count = 1925 ] 
16:24:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C030>, <py_sfcl.CommandDataDefinition object at 0x0661C180>) , Command count = 1926 ] 
16:24:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1927 ] 
16:24:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:09: [ SetBusWidth(0x4) , Command count = 1928 ] 
16:24:09: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:24:09: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:09: ####CSD Registe 2.0 Values####
16:24:09: CSD_STRUCTURE                                 :0x1
16:24:09: Reserv1                                       :0x0
16:24:09: Time Access 1 TAAC                            :0xe
16:24:09: Time Access 2 NSAC*100                        :0x0
16:24:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:09: Card Command Classess CCC                     :0x5b5
16:24:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:09: DSR(driver stage register)  DSR_IMP           :0x0
16:24:09: Reserv2                                       :0x0
16:24:09: Device Size C_SIZE                            :0xedc8
16:24:09: Reserv3                                       :0x0
16:24:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:09: Reserv4                                       :0x0
16:24:09: Write Speed Factor R2W_FACTOR                 :0x2
16:24:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:09: FILE_FORMAT_GRP                               :0x0
16:24:09: COPY flag                                     :0x1
16:24:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:09: File_Format                                   :0x0
16:24:09: CRC                                           :0x0
16:24:09: ####CSD Registe Values####  

16:24:09: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:24:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:09: ProductSerialNumber = 0x23482900
16:24:09: CardMaximumLBA      = 0x3b72400
16:24:09: CardCapacity        = 32G
16:24:09: Is card secure      = 0
16:24:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:09: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:09: [DVTCommonLib]###  LogicalWrite called
16:24:11: [ WriteLba(0x1B4ED8C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1929 ] 
16:24:11: [DVTCommonLib]###  LogicalWrite Completed 

16:24:11: [DVTCommonLib]###  LogicalRead called
16:24:12: [ ReadLba(0x1B4ED8C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1930 ] 
16:24:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:12: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:12: [RT2HCSDUHSI033_1_1_1_3.py]: Running Loop PatternChange1_SD_HIGH for 211 times 
16:24:12: [RT2HCSDUHSI033_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:24:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, False, 0x1, 0x1, 0xD3, 0x0) , Command count = 1931 ] 
16:24:13: [DVTCommonLib]### Response of CardReset : 0xC0FF8000
16:24:13: [DVTCommonLib]### Card response as High Capacity from card
16:24:13: [DVTCommonLib]### VOLA from card : 0x1
16:24:13: [DVTCommonLib]### CMD Pattern from card : 0xD3
16:24:13: [DVTCommonLib]### Reserved bits from card : 0x0
16:24:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py_sfcl.CommandDataDefinition object at 0x0661CBD0>) , Command count = 1932 ] 
16:24:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CBA0>, <py_sfcl.CommandDataDefinition object at 0x0661CE40>) , Command count = 1933 ] 
16:24:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1934 ] 
16:24:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:13: [ SetBusWidth(0x4) , Command count = 1935 ] 
16:24:13: [RT2HCSDUHSI033_1_1_1_3.py]CALL : AddressForWriteRead
16:24:13: [RTLC2HCSD29_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:13: ####CSD Registe 2.0 Values####
16:24:13: CSD_STRUCTURE                                 :0x1
16:24:13: Reserv1                                       :0x0
16:24:13: Time Access 1 TAAC                            :0xe
16:24:13: Time Access 2 NSAC*100                        :0x0
16:24:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:13: Card Command Classess CCC                     :0x5b5
16:24:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:13: DSR(driver stage register)  DSR_IMP           :0x0
16:24:13: Reserv2                                       :0x0
16:24:13: Device Size C_SIZE                            :0xedc8
16:24:13: Reserv3                                       :0x0
16:24:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:13: Reserv4                                       :0x0
16:24:13: Write Speed Factor R2W_FACTOR                 :0x2
16:24:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:13: FILE_FORMAT_GRP                               :0x0
16:24:13: COPY flag                                     :0x1
16:24:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:13: File_Format                                   :0x0
16:24:13: CRC                                           :0x0
16:24:13: ####CSD Registe Values####  

16:24:13: [ERROR] - Card Type is not SD 1.0 for this test, which is not expected.
16:24:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:13: ProductSerialNumber = 0x23482900
16:24:13: CardMaximumLBA      = 0x3b72400
16:24:13: CardCapacity        = 32G
16:24:13: Is card secure      = 0
16:24:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:13: [RTLC2HCSD29_AddressForWriteRead]### ***************CARD INFO************
16:24:13: [DVTCommonLib]###  LogicalWrite called
16:24:14: [DVTCommonLib]### LogicalWrite Failed
16:24:14: [DVTCommonLib]### 

2016-11-21 16:24:14: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\RTHHCCallAll02_CallAllReset_1_UHS_I.py", line 85, in RunTestProcedure
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\RTHHCCallAll02_CallAllReset_1_UHS_I.py", line 57, in Run
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode_UHS_I\RT2HCSDUHSI002_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py", line 128, in Run
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode_UHS_I\RT2HCSDUHSI033_1_1_1_3.py", line 114, in Run
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode_UHS_I\RT2HCSDUHSI001_AddressForWriteRead.py", line 71, in Run
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode_UHS_I\RT2HCSDUHSI001_AddressForWriteRead.py", line 125, in AddressForWriteRead
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\Common\DvtCommonLib.py", line 2904, in LogicalWrite
   File "CardMetaClassFuncDef", line 2, in WriteLba
   File "C:\Program Files\SanDisk\CTF\LIBS\CardFramework\CardCommand.py", line 1172, in __call__
     return self.__doCall( *args, **kwargs )
   File "C:\Program Files\SanDisk\CTF\LIBS\CardFramework\CardCommand.py", line 1126, in call
     return self._ExtendedExecute( testspace, testspace.GetCard( ), history, function, *args, **kwargs )
   File "C:\Program Files\SanDisk\CTF\LIBS\CardFramework\CardCommand.py", line 857, in _ExtendedExecute
     returnValue, pendingException = \
   File "C:\Program Files\SanDisk\CTF\LIBS\CardFramework\CardCommand.py", line 752, in __RawExecute
     returnValue      = function( *modifiedArgs, **modifiedKwArgs )



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 InvalidTest
    KeyboardInterrupt



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 KeyboardInterrupt:


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   1916 ReadLba(11599D7, 1000, <200000/200, 0>)                                     835.286      1556.6   read=  0, write=  0                 0       
   1917 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 0, 0, 1,      836.843       201.0   read=  0, write=  0                 C0FF8000
   1918 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0552E240>, <py      837.045         4.0   read=  0, write=  0                 0       
   1919 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CCC0>, <py      837.049         3.5   read=  0, write=  0                 0       
   1920 SetCardRCA(1, D555)                                                         837.052         1.4   read=  0, write=  0                 'Obj'   
   1921 SetBusWidth(4)                                                              837.136         4.2   read=  0, write=  0                 0       
   1922 WriteLba(2D3BEBC, 1000, <200000/200, 1>)                                    837.167      1649.6   read=  0, write=  0                 0       
   1923 ReadLba(2D3BEBC, 1000, <200000/200, 0>)                                     838.817      1556.6   read=  0, write=  0                 0       
   1924 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 0, 0, 1,      840.375       191.1   read=  0, write=  0                 C0FF8000
   1925 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C480>, <py      840.566         4.0   read=  0, write=  0                 0       
   1926 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CF30>, <py      840.571         3.5   read=  0, write=  0                 0       
   1927 SetCardRCA(1, D555)                                                         840.574         1.3   read=  0, write=  0                 'Obj'   
   1928 SetBusWidth(4)                                                              840.658         4.2   read=  0, write=  0                 0       
   1929 WriteLba(1B4ED8C, 1000, <200000/200, 1>)                                    840.689      1642.8   read=  0, write=  0                 0       
   1930 ReadLba(1B4ED8C, 1000, <200000/200, 0>)                                     842.332      1556.7   read=  0, write=  0                 0       
   1931 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 0, 0, 1,      843.890       191.1   read=  0, write=  0                 C0FF8000
   1932 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661C030>, <py      844.081         4.0   read=  0, write=  0                 0       
   1933 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0661CDB0>, <py      844.086         3.4   read=  0, write=  0                 0       
   1934 SetCardRCA(1, D555)                                                         844.089         1.3   read=  0, write=  0                 'Obj'   
   1935 SetBusWidth(4)                                                              844.172         4.1   read=  0, write=  0                 0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:14:04


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    250 WriteLba(0x29FA17B, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1710.950796   NA                                  0       
    250 WriteLba(0x2DA83C3, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1703.105729   NA                                  0       
    250 WriteLba(0x1FA5BF, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1701.579276   NA                                  0       
    250 WriteLba(0x2E41049, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1700.368860   NA                                  0       
    250 WriteLba(0x2983FE0, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1698.620548   NA                                  0       
    250 WriteLba(0x91F563, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1697.163219   NA                                  0       
    250 WriteLba(0x235AAE9, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1691.014546   NA                                  0       
    250 WriteLba(0x2269F1D, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1678.033813   NA                                  0       
    250 WriteLba(0x2D3129C, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1676.721070   NA                                  0       
    250 WriteLba(0xAB9641, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1676.491061   NA                                  0       
    250 WriteLba(0x14DA6AE, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1675.481073   NA                                  0       
    250 WriteLba(0x1BB7FAD, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1675.433682   NA                                  0       
    250 WriteLba(0x250BFDD, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1667.283144   NA                                  0       
    250 WriteLba(0x31C94A5, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1667.042268   NA                                  0       
    250 WriteLba(0xC74BDD, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1664.636226   NA                                  0       
    250 WriteLba(0xA16B4, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                        NA 1661.619543   NA                                  0       
    250 WriteLba(0x2DB1DC9, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1661.199067   NA                                  0       
    250 WriteLba(0x3A4CB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1659.996499   NA                                  0       
    250 WriteLba(0x121E1F, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1657.639356   NA                                  0       
    250 WriteLba(0x4794D8, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1657.456134   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 1934


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

KeyboardInterrupt error at 00:14:06.


     ####  ##   ##  ###### ####### ######  ######   ##  ## ######   ###### 
      ##   ###  ##  # ## #  ##   #  ##  ##  ##  ##  ##  ##  ##  ##  # ## # 
      ##   #### ##    ##    ## #    ##  ##  ##  ##  ##  ##  ##  ##    ##   
      ##   ## ####    ##    ####    #####   #####   ##  ##  #####     ##   
      ##   ##  ###    ##    ## #    ## ##   ## ##   ##  ##  ##        ##   
      ##   ##   ##    ##    ##   #  ##  ##  ##  ##  ##  ##  ##        ##   
     ####  ##   ##   ####  ####### ###  ## ###  ##   ####  ####      ####  
                                                                           

 

