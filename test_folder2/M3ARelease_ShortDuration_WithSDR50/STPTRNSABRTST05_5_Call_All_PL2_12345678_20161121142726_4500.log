14:27:19: Sata Disconnector Board found in COM1.
14:27:23: *****************************************************

14:27:23: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

14:27:23: *                                                   *

14:27:23: *  Compatibility with this version is not verified! *

14:27:23: *****************************************************

14:27:26: [ DeviceSetupCompletion() , Command count = 7 ] 
14:27:26: Testname Mapping: ScriptName=[STPTRNSABRTST05_5_Call_All_PL2] -> TestId=[STPTRNSABRTST05]
14:27:26: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
14:27:26: [ GetPhysicalChipsInfo() , Command count = 9 ] 
14:27:26: [ GetFileSize(0xEA) , Command count = 10 ] 
14:27:26: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
14:27:26: [ GetFileSize(0x16) , Command count = 12 ] 
14:27:26: [ GetCardStatus() , Command count = 13 ] 
14:27:26: [ GetFileSize(0x18) , Command count = 14 ] 
14:27:26: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
14:27:26: [ GetFileSize(0x15) , Command count = 16 ] 
14:27:26: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
14:27:26: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
14:27:26: [ GetFileSize(0xE) , Command count = 18 ] 
14:27:26: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
14:27:26: [ GetFileSize(0x1E) , Command count = 20 ] 
14:27:26: [ GetCardStatus() , Command count = 21 ] 
14:27:26: [ GetFileSize(0x21) , Command count = 22 ] 
14:27:26: [ GetCardStatus() , Command count = 23 ] 
14:27:26: [ GetFileSize(0x33) , Command count = 24 ] 
14:27:26: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
14:27:26: [ GetFileSize(0x1F) , Command count = 26 ] 
14:27:26: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
14:27:26: [ GetFileSize(0x2A) , Command count = 28 ] 
14:27:26: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
14:27:26: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
14:27:26: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
14:27:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
14:27:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
14:27:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
14:27:26: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
14:27:27: [ GetFileSize(0x33) , Command count = 36 ] 
14:27:27: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
14:27:27: [ GetFileSize(0x33) , Command count = 38 ] 
14:27:27: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
14:27:27: [ GetIpVersionInfo() , Command count = 40 ] 
14:27:27: [ GetPhysicalChipsInfo() , Command count = 41 ] 
14:27:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0606F690>, <0x200/0x200, Arb>) , Command count = 42 ] 
14:27:27: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=STPTRNSABRTST05 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 14:27:27
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : STPTRNSABRTST05
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 39537891629
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: STPTRNSABRTST05_5_Call_All_PL2 >>>>>>>>>>>>>>>



14:27:33: ###### Running call_All_PL2_5 scripts  ######
14:27:40: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
14:27:40: MaxLba of the card: 0x3B72400 
14:27:43: [GO7_globalPreTestingSettings]### Default Initialization Start
14:27:43: [DVTCommonLib]###  SwitchHostVoltageRegion called
14:27:43: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
14:27:43: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

14:27:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
14:27:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
14:27:46: [ CardInit() , Command count = 47 ] 
14:27:46: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165695
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

14:27:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:46: ####CSD Registe 2.0 Values####
14:27:46: CSD_STRUCTURE                                 :0x1
14:27:46: Reserv1                                       :0x0
14:27:46: Time Access 1 TAAC                            :0xe
14:27:46: Time Access 2 NSAC*100                        :0x0
14:27:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:46: Card Command Classess CCC                     :0x5b5
14:27:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:46: DSR(driver stage register)  DSR_IMP           :0x0
14:27:46: Reserv2                                       :0x0
14:27:46: Device Size C_SIZE                            :0xedc8
14:27:47: Reserv3                                       :0x0
14:27:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:47: Reserv4                                       :0x0
14:27:47: Write Speed Factor R2W_FACTOR                 :0x2
14:27:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:47: FILE_FORMAT_GRP                               :0x0
14:27:47: COPY flag                                     :0x1
14:27:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:47: File_Format                                   :0x0
14:27:47: CRC                                           :0x0
14:27:47: ####CSD Registe Values####  

14:27:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
14:27:47: ProductSerialNumber = 0x23482900
14:27:47: CardMaximumLBA      = 0x3b72400
14:27:47: CardCapacity        = 32G
14:27:47: Is card secure      = 0
14:27:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

14:27:47: [GO7_globalPreTestingSettings]### Default Initialization Completed 


14:27:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:49: Host Frequency set to 25000 KHz
14:27:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E39C0>, 0x0, True) , Command count = 49 ] 
14:27:49: [GO18_globalSetVolt]### Host voltage value is set.
14:27:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3690>, 0x0, False) , Command count = 50 ] 
14:27:49: [GO18_globalSetVolt]### Host voltage value is set.
14:27:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
14:27:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
14:27:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
14:27:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 54 ] 
14:27:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A20>, <py_sfcl.CommandDataDefinition object at 0x060E3AE0>) , Command count = 55 ] 
14:27:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:49: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
14:27:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:50: Host Frequency set to 25000 KHz
14:27:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:50: ####CSD Registe 2.0 Values####
14:27:50: CSD_STRUCTURE                                 :0x1
14:27:50: Reserv1                                       :0x0
14:27:50: Time Access 1 TAAC                            :0xe
14:27:50: Time Access 2 NSAC*100                        :0x0
14:27:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:50: Card Command Classess CCC                     :0x5b5
14:27:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:50: DSR(driver stage register)  DSR_IMP           :0x0
14:27:50: Reserv2                                       :0x0
14:27:50: Device Size C_SIZE                            :0xedc8
14:27:50: Reserv3                                       :0x0
14:27:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:50: Reserv4                                       :0x0
14:27:50: Write Speed Factor R2W_FACTOR                 :0x2
14:27:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:50: FILE_FORMAT_GRP                               :0x0
14:27:50: COPY flag                                     :0x1
14:27:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:50: File_Format                                   :0x0
14:27:50: CRC                                           :0x0
14:27:50: ####CSD Registe Values####  

14:27:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:50: [GetSCRRegisterEntry] Passed
14:27:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:50: Data_Status_After Erases          : 0
14:27:50: CPRM Security Support             : No Security
14:27:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:50: Spec. Version                     : Version 3.0X
14:27:50: Extended Security Support         : Extended_Security_Not_Supported
14:27:50: Command Support                   : COMMAND_SUPPORT
14:27:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C030>, <py_sfcl.CommandDataDefinition object at 0x0611C060>) , Command count = 57 ] 
14:27:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C0C0>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 58 ] 
14:27:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:50: [ SetBusWidth(0x4) , Command count = 59 ] 
14:27:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
14:27:50: Protected Area Size 0x28000
14:27:50: Bus Width           2
14:27:50: Secure Mode         0
14:27:50: Speed  Class        4
14:27:50: Perf Move           0
14:27:50: Au Size             9
14:27:50: Erase Size          15
14:27:50: Erase Timeout       1
14:27:50: Erase offset        1
14:27:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
14:27:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:50: Host Frequency set to 100000 KHz
14:27:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:50: ####CSD Registe 2.0 Values####
14:27:50: CSD_STRUCTURE                                 :0x1
14:27:50: Reserv1                                       :0x0
14:27:50: Time Access 1 TAAC                            :0xe
14:27:50: Time Access 2 NSAC*100                        :0x0
14:27:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:50: Card Command Classess CCC                     :0x5b5
14:27:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:50: DSR(driver stage register)  DSR_IMP           :0x0
14:27:50: Reserv2                                       :0x0
14:27:50: Device Size C_SIZE                            :0xedc8
14:27:50: Reserv3                                       :0x0
14:27:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:50: Reserv4                                       :0x0
14:27:50: Write Speed Factor R2W_FACTOR                 :0x2
14:27:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:50: FILE_FORMAT_GRP                               :0x0
14:27:50: COPY flag                                     :0x1
14:27:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:50: File_Format                                   :0x0
14:27:50: CRC                                           :0x0
14:27:50: ####CSD Registe Values####  

14:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C600>, <py_sfcl.CommandDataDefinition object at 0x0611C420>) , Command count = 62 ] 
14:27:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C480>, <py_sfcl.CommandDataDefinition object at 0x0611C4B0>) , Command count = 63 ] 
14:27:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
14:27:50: Protected Area Size 0x28000
14:27:50: Bus Width           2
14:27:50: Secure Mode         0
14:27:50: Speed  Class        4
14:27:50: Perf Move           0
14:27:50: Au Size             9
14:27:50: Erase Size          15
14:27:50: Erase Timeout       1
14:27:50: Erase offset        1
14:27:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:50: ########################################
14:27:50: Stated Running script STPTRNSABRTST62_util_LOAD_VARS 
14:27:50: ########################################
14:27:50: Failed Running script <module 'STPTRNSABRTST62_util_LOAD_VARS' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST62_util_LOAD_VARS.pyc'> with error 'module' object has no attribute 'TestProcedure' 
14:27:51: ########################################
14:27:51: ########################################
14:27:51: Stated Running script STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test 
14:27:51: ########################################
14:27:51: ###### Running STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test Test 
14:27:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:53: Host Frequency set to 25000 KHz
14:27:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CAB0>, 0x0, True) , Command count = 65 ] 
14:27:53: [GO18_globalSetVolt]### Host voltage value is set.
14:27:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C810>, 0x0, False) , Command count = 66 ] 
14:27:53: [GO18_globalSetVolt]### Host voltage value is set.
14:27:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 67 ] 
14:27:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
14:27:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 69 ] 
14:27:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA20>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 70 ] 
14:27:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF30>, <py_sfcl.CommandDataDefinition object at 0x0611CEA0>) , Command count = 71 ] 
14:27:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:53: [ SetCardRCA(0x1, 0xD555) , Command count = 72 ] 
14:27:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:53: Host Frequency set to 25000 KHz
14:27:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:53: ####CSD Registe 2.0 Values####
14:27:53: CSD_STRUCTURE                                 :0x1
14:27:53: Reserv1                                       :0x0
14:27:53: Time Access 1 TAAC                            :0xe
14:27:53: Time Access 2 NSAC*100                        :0x0
14:27:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:53: Card Command Classess CCC                     :0x5b5
14:27:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:53: DSR(driver stage register)  DSR_IMP           :0x0
14:27:53: Reserv2                                       :0x0
14:27:53: Device Size C_SIZE                            :0xedc8
14:27:53: Reserv3                                       :0x0
14:27:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:53: Reserv4                                       :0x0
14:27:53: Write Speed Factor R2W_FACTOR                 :0x2
14:27:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:53: FILE_FORMAT_GRP                               :0x0
14:27:53: COPY flag                                     :0x1
14:27:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:53: File_Format                                   :0x0
14:27:53: CRC                                           :0x0
14:27:53: ####CSD Registe Values####  

14:27:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:53: [GetSCRRegisterEntry] Passed
14:27:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:53: Data_Status_After Erases          : 0
14:27:53: CPRM Security Support             : No Security
14:27:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:53: Spec. Version                     : Version 3.0X
14:27:53: Extended Security Support         : Extended_Security_Not_Supported
14:27:53: Command Support                   : COMMAND_SUPPORT
14:27:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC30>, <py_sfcl.CommandDataDefinition object at 0x0611C900>) , Command count = 73 ] 
14:27:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF90>, <py_sfcl.CommandDataDefinition object at 0x0611CA80>) , Command count = 74 ] 
14:27:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:53: [ SetBusWidth(0x4) , Command count = 75 ] 
14:27:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CA50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 76 ] 
14:27:53: Protected Area Size 0x28000
14:27:53: Bus Width           2
14:27:53: Secure Mode         0
14:27:53: Speed  Class        4
14:27:53: Perf Move           0
14:27:53: Au Size             9
14:27:53: Erase Size          15
14:27:53: Erase Timeout       1
14:27:53: Erase offset        1
14:27:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 77 ] 
14:27:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:53: Host Frequency set to 100000 KHz
14:27:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:53: ####CSD Registe 2.0 Values####
14:27:53: CSD_STRUCTURE                                 :0x1
14:27:53: Reserv1                                       :0x0
14:27:53: Time Access 1 TAAC                            :0xe
14:27:53: Time Access 2 NSAC*100                        :0x0
14:27:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:27:53: Card Command Classess CCC                     :0x5b5
14:27:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:53: DSR(driver stage register)  DSR_IMP           :0x0
14:27:53: Reserv2                                       :0x0
14:27:53: Device Size C_SIZE                            :0xedc8
14:27:53: Reserv3                                       :0x0
14:27:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:53: Reserv4                                       :0x0
14:27:53: Write Speed Factor R2W_FACTOR                 :0x2
14:27:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:53: FILE_FORMAT_GRP                               :0x0
14:27:53: COPY flag                                     :0x1
14:27:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:54: File_Format                                   :0x0
14:27:54: CRC                                           :0x0
14:27:54: ####CSD Registe Values####  

14:27:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CD20>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 78 ] 
14:27:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:27:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C780>, <py_sfcl.CommandDataDefinition object at 0x0611CCC0>) , Command count = 79 ] 
14:27:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:27:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:27:54: ###STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test [Info] : TEST PREREQUISITES 
14:27:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x3A000 with Constant Pattern
14:27:57: [ WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 80 ] 
14:27:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x3A000 with Constant Pattern 

14:27:57: ###STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test [Info] : START TEST 
14:27:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Outer loop Count 28
14:27:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4094
14:27:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:27:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CB10>, <py_sfcl.PySEnhancedCmdData object at 0x0611CBA0>, <None>) , Command count = 81 ] 
14:27:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:27:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:27:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:59: Host Frequency set to 25000 KHz
14:27:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:27:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:27:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129210>, 0x0, True) , Command count = 82 ] 
14:27:59: [GO18_globalSetVolt]### Host voltage value is set.
14:27:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:27:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129060>, 0x0, False) , Command count = 83 ] 
14:27:59: [GO18_globalSetVolt]### Host voltage value is set.
14:27:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 84 ] 
14:27:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:27:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 85 ] 
14:27:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:27:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:27:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:27:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:27:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:27:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 86 ] 
14:27:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:27:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x06129150>) , Command count = 87 ] 
14:27:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291E0>, <py_sfcl.CommandDataDefinition object at 0x06129240>) , Command count = 88 ] 
14:27:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:27:59: [ SetCardRCA(0x1, 0xD555) , Command count = 89 ] 
14:27:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:27:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:27:59: Host Frequency set to 25000 KHz
14:27:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:27:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:59: ####CSD Registe 2.0 Values####
14:27:59: CSD_STRUCTURE                                 :0x1
14:27:59: Reserv1                                       :0x0
14:27:59: Time Access 1 TAAC                            :0xe
14:27:59: Time Access 2 NSAC*100                        :0x0
14:27:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:27:59: Card Command Classess CCC                     :0x5b5
14:27:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:27:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:27:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:27:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:27:59: DSR(driver stage register)  DSR_IMP           :0x0
14:27:59: Reserv2                                       :0x0
14:27:59: Device Size C_SIZE                            :0xedc8
14:27:59: Reserv3                                       :0x0
14:27:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:27:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:27:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:27:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:27:59: Reserv4                                       :0x0
14:27:59: Write Speed Factor R2W_FACTOR                 :0x2
14:27:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:27:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:27:59: FILE_FORMAT_GRP                               :0x0
14:27:59: COPY flag                                     :0x1
14:27:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:27:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:27:59: File_Format                                   :0x0
14:27:59: CRC                                           :0x0
14:27:59: ####CSD Registe Values####  

14:27:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:27:59: [GetSCRRegisterEntry] Passed
14:27:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:27:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:27:59: Data_Status_After Erases          : 0
14:27:59: CPRM Security Support             : No Security
14:27:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:27:59: Spec. Version                     : Version 3.0X
14:27:59: Extended Security Support         : Extended_Security_Not_Supported
14:27:59: Command Support                   : COMMAND_SUPPORT
14:27:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061294B0>, <py_sfcl.CommandDataDefinition object at 0x061292D0>) , Command count = 90 ] 
14:27:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:27:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129330>, <py_sfcl.CommandDataDefinition object at 0x06129360>) , Command count = 91 ] 
14:27:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:27:59: [ SetBusWidth(0x4) , Command count = 92 ] 
14:27:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:27:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 93 ] 
14:27:59: Protected Area Size 0x28000
14:27:59: Bus Width           2
14:27:59: Secure Mode         0
14:27:59: Speed  Class        4
14:27:59: Perf Move           0
14:27:59: Au Size             9
14:27:59: Erase Size          15
14:27:59: Erase Timeout       1
14:27:59: Erase offset        1
14:27:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:27:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:27:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:27:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 94 ] 
14:27:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:27:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:27:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:27:59: Host Frequency set to 100000 KHz
14:27:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:27:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:27:59: ####CSD Registe 2.0 Values####
14:27:59: CSD_STRUCTURE                                 :0x1
14:27:59: Reserv1                                       :0x0
14:27:59: Time Access 1 TAAC                            :0xe
14:28:00: Time Access 2 NSAC*100                        :0x0
14:28:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:00: Card Command Classess CCC                     :0x5b5
14:28:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:00: DSR(driver stage register)  DSR_IMP           :0x0
14:28:00: Reserv2                                       :0x0
14:28:00: Device Size C_SIZE                            :0xedc8
14:28:00: Reserv3                                       :0x0
14:28:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:00: Reserv4                                       :0x0
14:28:00: Write Speed Factor R2W_FACTOR                 :0x2
14:28:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:00: FILE_FORMAT_GRP                               :0x0
14:28:00: COPY flag                                     :0x1
14:28:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:00: File_Format                                   :0x0
14:28:00: CRC                                           :0x0
14:28:00: ####CSD Registe Values####  

14:28:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129720>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 95 ] 
14:28:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 96 ] 
14:28:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F29B to EndLba:0x3B6F31B with One's Pattern
14:28:00: [ WrLbaNoData(0x3B6F29B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 97 ] 
14:28:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F29B to EndLba:0x3B6F31B with One's Pattern 

14:28:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F31B to EndLba:0x3B6F39B with One's Pattern
14:28:00: [ WrLbaNoData(0x3B6F31B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 98 ] 
14:28:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F31B to EndLba:0x3B6F39B with One's Pattern 

14:28:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23165 to EndLba:0x25163 with Constant Pattern
14:28:00: [ RdLbaNoData(0x23165, 0x1FFE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 99 ] 
14:28:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23165 to EndLba:0x25163 with Constant Pattern 

14:28:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4093
14:28:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061297B0>, <py_sfcl.PySEnhancedCmdData object at 0x061297E0>, <None>) , Command count = 100 ] 
14:28:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:03: Host Frequency set to 25000 KHz
14:28:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129A20>, 0x0, True) , Command count = 101 ] 
14:28:03: [GO18_globalSetVolt]### Host voltage value is set.
14:28:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129870>, 0x0, False) , Command count = 102 ] 
14:28:03: [GO18_globalSetVolt]### Host voltage value is set.
14:28:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 103 ] 
14:28:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 104 ] 
14:28:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 105 ] 
14:28:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129960>) , Command count = 106 ] 
14:28:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299F0>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 107 ] 
14:28:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:03: [ SetCardRCA(0x1, 0xD555) , Command count = 108 ] 
14:28:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:03: Host Frequency set to 25000 KHz
14:28:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:03: ####CSD Registe 2.0 Values####
14:28:03: CSD_STRUCTURE                                 :0x1
14:28:03: Reserv1                                       :0x0
14:28:03: Time Access 1 TAAC                            :0xe
14:28:03: Time Access 2 NSAC*100                        :0x0
14:28:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:03: Card Command Classess CCC                     :0x5b5
14:28:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:03: DSR(driver stage register)  DSR_IMP           :0x0
14:28:03: Reserv2                                       :0x0
14:28:03: Device Size C_SIZE                            :0xedc8
14:28:03: Reserv3                                       :0x0
14:28:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:03: Reserv4                                       :0x0
14:28:03: Write Speed Factor R2W_FACTOR                 :0x2
14:28:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:03: FILE_FORMAT_GRP                               :0x0
14:28:03: COPY flag                                     :0x1
14:28:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:03: File_Format                                   :0x0
14:28:03: CRC                                           :0x0
14:28:03: ####CSD Registe Values####  

14:28:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:03: [GetSCRRegisterEntry] Passed
14:28:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:03: Data_Status_After Erases          : 0
14:28:03: CPRM Security Support             : No Security
14:28:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:03: Spec. Version                     : Version 3.0X
14:28:03: Extended Security Support         : Extended_Security_Not_Supported
14:28:03: Command Support                   : COMMAND_SUPPORT
14:28:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CC0>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 109 ] 
14:28:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B40>, <py_sfcl.CommandDataDefinition object at 0x06129B70>) , Command count = 110 ] 
14:28:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:03: [ SetBusWidth(0x4) , Command count = 111 ] 
14:28:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 112 ] 
14:28:03: Protected Area Size 0x28000
14:28:03: Bus Width           2
14:28:03: Secure Mode         0
14:28:03: Speed  Class        4
14:28:03: Perf Move           0
14:28:03: Au Size             9
14:28:03: Erase Size          15
14:28:03: Erase Timeout       1
14:28:03: Erase offset        1
14:28:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 113 ] 
14:28:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:03: Host Frequency set to 100000 KHz
14:28:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:03: ####CSD Registe 2.0 Values####
14:28:03: CSD_STRUCTURE                                 :0x1
14:28:03: Reserv1                                       :0x0
14:28:03: Time Access 1 TAAC                            :0xe
14:28:03: Time Access 2 NSAC*100                        :0x0
14:28:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:03: Card Command Classess CCC                     :0x5b5
14:28:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:04: DSR(driver stage register)  DSR_IMP           :0x0
14:28:04: Reserv2                                       :0x0
14:28:04: Device Size C_SIZE                            :0xedc8
14:28:04: Reserv3                                       :0x0
14:28:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:04: Reserv4                                       :0x0
14:28:04: Write Speed Factor R2W_FACTOR                 :0x2
14:28:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:04: FILE_FORMAT_GRP                               :0x0
14:28:04: COPY flag                                     :0x1
14:28:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:04: File_Format                                   :0x0
14:28:04: CRC                                           :0x0
14:28:04: ####CSD Registe Values####  

14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F00>, <py_sfcl.CommandDataDefinition object at 0x06129D20>) , Command count = 114 ] 
14:28:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129D80>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 115 ] 
14:28:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71CD2 to EndLba:0x3B71D52 with One's Pattern
14:28:04: [ WrLbaNoData(0x3B71CD2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 116 ] 
14:28:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71CD2 to EndLba:0x3B71D52 with One's Pattern 

14:28:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71D52 to EndLba:0x3B71DD2 with One's Pattern
14:28:04: [ WrLbaNoData(0x3B71D52, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 117 ] 
14:28:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71D52 to EndLba:0x3B71DD2 with One's Pattern 

14:28:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23165 to EndLba:0x25161 with Constant Pattern
14:28:04: [ RdLbaNoData(0x23165, 0x1FFC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 118 ] 
14:28:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23165 to EndLba:0x25161 with Constant Pattern 

14:28:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4092
14:28:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129EA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129ED0>, <py_sfcl.PySEnhancedCmdData object at 0x06129F30>, <None>) , Command count = 119 ] 
14:28:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:07: Host Frequency set to 25000 KHz
14:28:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129F90>, 0x0, True) , Command count = 120 ] 
14:28:07: [GO18_globalSetVolt]### Host voltage value is set.
14:28:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E030>, 0x0, False) , Command count = 121 ] 
14:28:07: [GO18_globalSetVolt]### Host voltage value is set.
14:28:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 122 ] 
14:28:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 123 ] 
14:28:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 124 ] 
14:28:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E180>, <py_sfcl.CommandDataDefinition object at 0x0612E120>) , Command count = 125 ] 
14:28:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1B0>, <py_sfcl.CommandDataDefinition object at 0x0612E1E0>) , Command count = 126 ] 
14:28:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:07: [ SetCardRCA(0x1, 0xD555) , Command count = 127 ] 
14:28:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:07: Host Frequency set to 25000 KHz
14:28:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:07: ####CSD Registe 2.0 Values####
14:28:07: CSD_STRUCTURE                                 :0x1
14:28:07: Reserv1                                       :0x0
14:28:07: Time Access 1 TAAC                            :0xe
14:28:07: Time Access 2 NSAC*100                        :0x0
14:28:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:07: Card Command Classess CCC                     :0x5b5
14:28:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:07: DSR(driver stage register)  DSR_IMP           :0x0
14:28:07: Reserv2                                       :0x0
14:28:07: Device Size C_SIZE                            :0xedc8
14:28:07: Reserv3                                       :0x0
14:28:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:07: Reserv4                                       :0x0
14:28:07: Write Speed Factor R2W_FACTOR                 :0x2
14:28:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:07: FILE_FORMAT_GRP                               :0x0
14:28:07: COPY flag                                     :0x1
14:28:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:07: File_Format                                   :0x0
14:28:07: CRC                                           :0x0
14:28:07: ####CSD Registe Values####  

14:28:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:07: [GetSCRRegisterEntry] Passed
14:28:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:07: Data_Status_After Erases          : 0
14:28:07: CPRM Security Support             : No Security
14:28:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:07: Spec. Version                     : Version 3.0X
14:28:07: Extended Security Support         : Extended_Security_Not_Supported
14:28:07: Command Support                   : COMMAND_SUPPORT
14:28:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E450>, <py_sfcl.CommandDataDefinition object at 0x0612E270>) , Command count = 128 ] 
14:28:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2D0>, <py_sfcl.CommandDataDefinition object at 0x0612E300>) , Command count = 129 ] 
14:28:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:07: [ SetBusWidth(0x4) , Command count = 130 ] 
14:28:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 131 ] 
14:28:07: Protected Area Size 0x28000
14:28:07: Bus Width           2
14:28:07: Secure Mode         0
14:28:07: Speed  Class        4
14:28:07: Perf Move           0
14:28:07: Au Size             9
14:28:07: Erase Size          15
14:28:07: Erase Timeout       1
14:28:07: Erase offset        1
14:28:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 132 ] 
14:28:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:07: Host Frequency set to 100000 KHz
14:28:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:07: ####CSD Registe 2.0 Values####
14:28:07: CSD_STRUCTURE                                 :0x1
14:28:07: Reserv1                                       :0x0
14:28:07: Time Access 1 TAAC                            :0xe
14:28:07: Time Access 2 NSAC*100                        :0x0
14:28:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:07: Card Command Classess CCC                     :0x5b5
14:28:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:07: DSR(driver stage register)  DSR_IMP           :0x0
14:28:07: Reserv2                                       :0x0
14:28:07: Device Size C_SIZE                            :0xedc8
14:28:07: Reserv3                                       :0x0
14:28:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:07: Reserv4                                       :0x0
14:28:08: Write Speed Factor R2W_FACTOR                 :0x2
14:28:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:08: FILE_FORMAT_GRP                               :0x0
14:28:08: COPY flag                                     :0x1
14:28:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:08: File_Format                                   :0x0
14:28:08: CRC                                           :0x0
14:28:08: ####CSD Registe Values####  

14:28:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E660>, <py_sfcl.CommandDataDefinition object at 0x0612E480>) , Command count = 133 ] 
14:28:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4E0>, <py_sfcl.CommandDataDefinition object at 0x0612E510>) , Command count = 134 ] 
14:28:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EC95 to EndLba:0x3B6ED15 with One's Pattern
14:28:08: [ WrLbaNoData(0x3B6EC95, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 135 ] 
14:28:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EC95 to EndLba:0x3B6ED15 with One's Pattern 

14:28:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED15 to EndLba:0x3B6ED95 with One's Pattern
14:28:08: [ WrLbaNoData(0x3B6ED15, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 136 ] 
14:28:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED15 to EndLba:0x3B6ED95 with One's Pattern 

14:28:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23167 to EndLba:0x25161 with Constant Pattern
14:28:08: [ RdLbaNoData(0x23167, 0x1FFA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 137 ] 
14:28:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23167 to EndLba:0x25161 with Constant Pattern 

14:28:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4091
14:28:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E630>, <py_sfcl.PySEnhancedCmdData object at 0x0612E690>, <None>) , Command count = 138 ] 
14:28:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:11: Host Frequency set to 25000 KHz
14:28:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E8D0>, 0x0, True) , Command count = 139 ] 
14:28:11: [GO18_globalSetVolt]### Host voltage value is set.
14:28:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E720>, 0x0, False) , Command count = 140 ] 
14:28:11: [GO18_globalSetVolt]### Host voltage value is set.
14:28:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 141 ] 
14:28:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 142 ] 
14:28:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 143 ] 
14:28:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x0612E810>) , Command count = 144 ] 
14:28:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8A0>, <py_sfcl.CommandDataDefinition object at 0x0612E900>) , Command count = 145 ] 
14:28:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:11: [ SetCardRCA(0x1, 0xD555) , Command count = 146 ] 
14:28:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:11: Host Frequency set to 25000 KHz
14:28:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:11: ####CSD Registe 2.0 Values####
14:28:11: CSD_STRUCTURE                                 :0x1
14:28:11: Reserv1                                       :0x0
14:28:11: Time Access 1 TAAC                            :0xe
14:28:11: Time Access 2 NSAC*100                        :0x0
14:28:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:11: Card Command Classess CCC                     :0x5b5
14:28:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:11: DSR(driver stage register)  DSR_IMP           :0x0
14:28:11: Reserv2                                       :0x0
14:28:11: Device Size C_SIZE                            :0xedc8
14:28:11: Reserv3                                       :0x0
14:28:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:11: Reserv4                                       :0x0
14:28:11: Write Speed Factor R2W_FACTOR                 :0x2
14:28:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:11: FILE_FORMAT_GRP                               :0x0
14:28:11: COPY flag                                     :0x1
14:28:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:11: File_Format                                   :0x0
14:28:11: CRC                                           :0x0
14:28:11: ####CSD Registe Values####  

14:28:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:11: [GetSCRRegisterEntry] Passed
14:28:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:11: Data_Status_After Erases          : 0
14:28:11: CPRM Security Support             : No Security
14:28:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:11: Spec. Version                     : Version 3.0X
14:28:11: Extended Security Support         : Extended_Security_Not_Supported
14:28:11: Command Support                   : COMMAND_SUPPORT
14:28:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB70>, <py_sfcl.CommandDataDefinition object at 0x0612E990>) , Command count = 147 ] 
14:28:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E9F0>, <py_sfcl.CommandDataDefinition object at 0x0612EA20>) , Command count = 148 ] 
14:28:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:11: [ SetBusWidth(0x4) , Command count = 149 ] 
14:28:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EAE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 150 ] 
14:28:11: Protected Area Size 0x28000
14:28:11: Bus Width           2
14:28:11: Secure Mode         0
14:28:11: Speed  Class        4
14:28:11: Perf Move           0
14:28:11: Au Size             9
14:28:11: Erase Size          15
14:28:11: Erase Timeout       1
14:28:11: Erase offset        1
14:28:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 151 ] 
14:28:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:11: Host Frequency set to 100000 KHz
14:28:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:11: ####CSD Registe 2.0 Values####
14:28:11: CSD_STRUCTURE                                 :0x1
14:28:11: Reserv1                                       :0x0
14:28:11: Time Access 1 TAAC                            :0xe
14:28:11: Time Access 2 NSAC*100                        :0x0
14:28:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:11: Card Command Classess CCC                     :0x5b5
14:28:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:11: DSR(driver stage register)  DSR_IMP           :0x0
14:28:11: Reserv2                                       :0x0
14:28:11: Device Size C_SIZE                            :0xedc8
14:28:11: Reserv3                                       :0x0
14:28:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:11: Reserv4                                       :0x0
14:28:11: Write Speed Factor R2W_FACTOR                 :0x2
14:28:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:11: FILE_FORMAT_GRP                               :0x0
14:28:11: COPY flag                                     :0x1
14:28:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:11: File_Format                                   :0x0
14:28:11: CRC                                           :0x0
14:28:11: ####CSD Registe Values####  

14:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED80>, <py_sfcl.CommandDataDefinition object at 0x0612EBA0>) , Command count = 152 ] 
14:28:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC00>, <py_sfcl.CommandDataDefinition object at 0x0612EC30>) , Command count = 153 ] 
14:28:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F0E0 to EndLba:0x3B6F160 with One's Pattern
14:28:12: [ WrLbaNoData(0x3B6F0E0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 154 ] 
14:28:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F0E0 to EndLba:0x3B6F160 with One's Pattern 

14:28:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F160 to EndLba:0x3B6F1E0 with One's Pattern
14:28:12: [ WrLbaNoData(0x3B6F160, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 155 ] 
14:28:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F160 to EndLba:0x3B6F1E0 with One's Pattern 

14:28:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23167 to EndLba:0x2515F with Constant Pattern
14:28:12: [ RdLbaNoData(0x23167, 0x1FF8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 156 ] 
14:28:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23167 to EndLba:0x2515F with Constant Pattern 

14:28:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4090
14:28:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612ED20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612ED50>, <py_sfcl.PySEnhancedCmdData object at 0x0612EDB0>, <None>) , Command count = 157 ] 
14:28:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:14: Host Frequency set to 25000 KHz
14:28:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EE10>, 0x0, True) , Command count = 158 ] 
14:28:14: [GO18_globalSetVolt]### Host voltage value is set.
14:28:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EE70>, 0x0, False) , Command count = 159 ] 
14:28:14: [GO18_globalSetVolt]### Host voltage value is set.
14:28:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 160 ] 
14:28:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 161 ] 
14:28:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 162 ] 
14:28:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x0612EF60>) , Command count = 163 ] 
14:28:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06132060>) , Command count = 164 ] 
14:28:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:15: [ SetCardRCA(0x1, 0xD555) , Command count = 165 ] 
14:28:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:15: Host Frequency set to 25000 KHz
14:28:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:15: ####CSD Registe 2.0 Values####
14:28:15: CSD_STRUCTURE                                 :0x1
14:28:15: Reserv1                                       :0x0
14:28:15: Time Access 1 TAAC                            :0xe
14:28:15: Time Access 2 NSAC*100                        :0x0
14:28:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:15: Card Command Classess CCC                     :0x5b5
14:28:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:15: DSR(driver stage register)  DSR_IMP           :0x0
14:28:15: Reserv2                                       :0x0
14:28:15: Device Size C_SIZE                            :0xedc8
14:28:15: Reserv3                                       :0x0
14:28:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:15: Reserv4                                       :0x0
14:28:15: Write Speed Factor R2W_FACTOR                 :0x2
14:28:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:15: FILE_FORMAT_GRP                               :0x0
14:28:15: COPY flag                                     :0x1
14:28:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:15: File_Format                                   :0x0
14:28:15: CRC                                           :0x0
14:28:15: ####CSD Registe Values####  

14:28:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:15: [GetSCRRegisterEntry] Passed
14:28:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:15: Data_Status_After Erases          : 0
14:28:15: CPRM Security Support             : No Security
14:28:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:15: Spec. Version                     : Version 3.0X
14:28:15: Extended Security Support         : Extended_Security_Not_Supported
14:28:15: Command Support                   : COMMAND_SUPPORT
14:28:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322D0>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 166 ] 
14:28:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132150>, <py_sfcl.CommandDataDefinition object at 0x06132180>) , Command count = 167 ] 
14:28:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:15: [ SetBusWidth(0x4) , Command count = 168 ] 
14:28:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 169 ] 
14:28:15: Protected Area Size 0x28000
14:28:15: Bus Width           2
14:28:15: Secure Mode         0
14:28:15: Speed  Class        4
14:28:15: Perf Move           0
14:28:15: Au Size             9
14:28:15: Erase Size          15
14:28:15: Erase Timeout       1
14:28:15: Erase offset        1
14:28:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 170 ] 
14:28:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:15: Host Frequency set to 100000 KHz
14:28:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:15: ####CSD Registe 2.0 Values####
14:28:15: CSD_STRUCTURE                                 :0x1
14:28:15: Reserv1                                       :0x0
14:28:15: Time Access 1 TAAC                            :0xe
14:28:15: Time Access 2 NSAC*100                        :0x0
14:28:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:15: Card Command Classess CCC                     :0x5b5
14:28:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:15: DSR(driver stage register)  DSR_IMP           :0x0
14:28:15: Reserv2                                       :0x0
14:28:15: Device Size C_SIZE                            :0xedc8
14:28:15: Reserv3                                       :0x0
14:28:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:15: Reserv4                                       :0x0
14:28:15: Write Speed Factor R2W_FACTOR                 :0x2
14:28:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:15: FILE_FORMAT_GRP                               :0x0
14:28:15: COPY flag                                     :0x1
14:28:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:15: File_Format                                   :0x0
14:28:15: CRC                                           :0x0
14:28:15: ####CSD Registe Values####  

14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324E0>, <py_sfcl.CommandDataDefinition object at 0x06132300>) , Command count = 171 ] 
14:28:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132360>, <py_sfcl.CommandDataDefinition object at 0x06132390>) , Command count = 172 ] 
14:28:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F510 to EndLba:0x3B6F590 with One's Pattern
14:28:16: [ WrLbaNoData(0x3B6F510, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 173 ] 
14:28:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F510 to EndLba:0x3B6F590 with One's Pattern 

14:28:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F590 to EndLba:0x3B6F610 with One's Pattern
14:28:16: [ WrLbaNoData(0x3B6F590, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 174 ] 
14:28:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F590 to EndLba:0x3B6F610 with One's Pattern 

14:28:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23169 to EndLba:0x2515F with Constant Pattern
14:28:16: [ RdLbaNoData(0x23169, 0x1FF6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 175 ] 
14:28:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23169 to EndLba:0x2515F with Constant Pattern 

14:28:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4089
14:28:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061324B0>, <py_sfcl.PySEnhancedCmdData object at 0x06132510>, <None>) , Command count = 176 ] 
14:28:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:18: Host Frequency set to 25000 KHz
14:28:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132750>, 0x0, True) , Command count = 177 ] 
14:28:18: [GO18_globalSetVolt]### Host voltage value is set.
14:28:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x061325A0>, 0x0, False) , Command count = 178 ] 
14:28:18: [GO18_globalSetVolt]### Host voltage value is set.
14:28:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 179 ] 
14:28:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 180 ] 
14:28:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 181 ] 
14:28:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061326F0>, <py_sfcl.CommandDataDefinition object at 0x06132690>) , Command count = 182 ] 
14:28:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132720>, <py_sfcl.CommandDataDefinition object at 0x06132780>) , Command count = 183 ] 
14:28:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:19: [ SetCardRCA(0x1, 0xD555) , Command count = 184 ] 
14:28:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:19: Host Frequency set to 25000 KHz
14:28:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:19: ####CSD Registe 2.0 Values####
14:28:19: CSD_STRUCTURE                                 :0x1
14:28:19: Reserv1                                       :0x0
14:28:19: Time Access 1 TAAC                            :0xe
14:28:19: Time Access 2 NSAC*100                        :0x0
14:28:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:19: Card Command Classess CCC                     :0x5b5
14:28:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:19: DSR(driver stage register)  DSR_IMP           :0x0
14:28:19: Reserv2                                       :0x0
14:28:19: Device Size C_SIZE                            :0xedc8
14:28:19: Reserv3                                       :0x0
14:28:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:19: Reserv4                                       :0x0
14:28:19: Write Speed Factor R2W_FACTOR                 :0x2
14:28:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:19: FILE_FORMAT_GRP                               :0x0
14:28:19: COPY flag                                     :0x1
14:28:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:19: File_Format                                   :0x0
14:28:19: CRC                                           :0x0
14:28:19: ####CSD Registe Values####  

14:28:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:19: [GetSCRRegisterEntry] Passed
14:28:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:19: Data_Status_After Erases          : 0
14:28:19: CPRM Security Support             : No Security
14:28:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:19: Spec. Version                     : Version 3.0X
14:28:19: Extended Security Support         : Extended_Security_Not_Supported
14:28:19: Command Support                   : COMMAND_SUPPORT
14:28:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329F0>, <py_sfcl.CommandDataDefinition object at 0x06132810>) , Command count = 185 ] 
14:28:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132870>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 186 ] 
14:28:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:19: [ SetBusWidth(0x4) , Command count = 187 ] 
14:28:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 188 ] 
14:28:19: Protected Area Size 0x28000
14:28:19: Bus Width           2
14:28:19: Secure Mode         0
14:28:19: Speed  Class        4
14:28:19: Perf Move           0
14:28:19: Au Size             9
14:28:19: Erase Size          15
14:28:19: Erase Timeout       1
14:28:19: Erase offset        1
14:28:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 189 ] 
14:28:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:19: Host Frequency set to 100000 KHz
14:28:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:19: ####CSD Registe 2.0 Values####
14:28:19: CSD_STRUCTURE                                 :0x1
14:28:19: Reserv1                                       :0x0
14:28:19: Time Access 1 TAAC                            :0xe
14:28:19: Time Access 2 NSAC*100                        :0x0
14:28:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:19: Card Command Classess CCC                     :0x5b5
14:28:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:19: DSR(driver stage register)  DSR_IMP           :0x0
14:28:19: Reserv2                                       :0x0
14:28:19: Device Size C_SIZE                            :0xedc8
14:28:19: Reserv3                                       :0x0
14:28:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:19: Reserv4                                       :0x0
14:28:19: Write Speed Factor R2W_FACTOR                 :0x2
14:28:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:19: FILE_FORMAT_GRP                               :0x0
14:28:19: COPY flag                                     :0x1
14:28:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:19: File_Format                                   :0x0
14:28:19: CRC                                           :0x0
14:28:19: ####CSD Registe Values####  

14:28:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C00>, <py_sfcl.CommandDataDefinition object at 0x06132A20>) , Command count = 190 ] 
14:28:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x06132AB0>) , Command count = 191 ] 
14:28:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7073C to EndLba:0x3B707BC with One's Pattern
14:28:19: [ WrLbaNoData(0x3B7073C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 192 ] 
14:28:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7073C to EndLba:0x3B707BC with One's Pattern 

14:28:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B707BC to EndLba:0x3B7083C with One's Pattern
14:28:20: [ WrLbaNoData(0x3B707BC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 193 ] 
14:28:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B707BC to EndLba:0x3B7083C with One's Pattern 

14:28:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23169 to EndLba:0x2515D with Constant Pattern
14:28:20: [ RdLbaNoData(0x23169, 0x1FF4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 194 ] 
14:28:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23169 to EndLba:0x2515D with Constant Pattern 

14:28:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4088
14:28:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06132C30>, <None>) , Command count = 195 ] 
14:28:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:22: Host Frequency set to 25000 KHz
14:28:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132E70>, 0x0, True) , Command count = 196 ] 
14:28:22: [GO18_globalSetVolt]### Host voltage value is set.
14:28:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132CC0>, 0x0, False) , Command count = 197 ] 
14:28:22: [GO18_globalSetVolt]### Host voltage value is set.
14:28:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 198 ] 
14:28:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 199 ] 
14:28:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 200 ] 
14:28:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06132DB0>) , Command count = 201 ] 
14:28:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E40>, <py_sfcl.CommandDataDefinition object at 0x06132EA0>) , Command count = 202 ] 
14:28:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:22: [ SetCardRCA(0x1, 0xD555) , Command count = 203 ] 
14:28:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:23: Host Frequency set to 25000 KHz
14:28:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:23: ####CSD Registe 2.0 Values####
14:28:23: CSD_STRUCTURE                                 :0x1
14:28:23: Reserv1                                       :0x0
14:28:23: Time Access 1 TAAC                            :0xe
14:28:23: Time Access 2 NSAC*100                        :0x0
14:28:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:23: Card Command Classess CCC                     :0x5b5
14:28:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:23: DSR(driver stage register)  DSR_IMP           :0x0
14:28:23: Reserv2                                       :0x0
14:28:23: Device Size C_SIZE                            :0xedc8
14:28:23: Reserv3                                       :0x0
14:28:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:23: Reserv4                                       :0x0
14:28:23: Write Speed Factor R2W_FACTOR                 :0x2
14:28:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:23: FILE_FORMAT_GRP                               :0x0
14:28:23: COPY flag                                     :0x1
14:28:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:23: File_Format                                   :0x0
14:28:23: CRC                                           :0x0
14:28:23: ####CSD Registe Values####  

14:28:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:23: [GetSCRRegisterEntry] Passed
14:28:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:23: Data_Status_After Erases          : 0
14:28:23: CPRM Security Support             : No Security
14:28:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:23: Spec. Version                     : Version 3.0X
14:28:23: Extended Security Support         : Extended_Security_Not_Supported
14:28:23: Command Support                   : COMMAND_SUPPORT
14:28:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F30>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 204 ] 
14:28:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132FC0>, <py_sfcl.CommandDataDefinition object at 0x06138030>) , Command count = 205 ] 
14:28:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:23: [ SetBusWidth(0x4) , Command count = 206 ] 
14:28:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061380F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 207 ] 
14:28:23: Protected Area Size 0x28000
14:28:23: Bus Width           2
14:28:23: Secure Mode         0
14:28:23: Speed  Class        4
14:28:23: Perf Move           0
14:28:23: Au Size             9
14:28:23: Erase Size          15
14:28:23: Erase Timeout       1
14:28:23: Erase offset        1
14:28:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 208 ] 
14:28:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:23: Host Frequency set to 100000 KHz
14:28:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:23: ####CSD Registe 2.0 Values####
14:28:23: CSD_STRUCTURE                                 :0x1
14:28:23: Reserv1                                       :0x0
14:28:23: Time Access 1 TAAC                            :0xe
14:28:23: Time Access 2 NSAC*100                        :0x0
14:28:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:23: Card Command Classess CCC                     :0x5b5
14:28:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:23: DSR(driver stage register)  DSR_IMP           :0x0
14:28:23: Reserv2                                       :0x0
14:28:23: Device Size C_SIZE                            :0xedc8
14:28:23: Reserv3                                       :0x0
14:28:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:23: Reserv4                                       :0x0
14:28:23: Write Speed Factor R2W_FACTOR                 :0x2
14:28:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:23: FILE_FORMAT_GRP                               :0x0
14:28:23: COPY flag                                     :0x1
14:28:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:23: File_Format                                   :0x0
14:28:23: CRC                                           :0x0
14:28:23: ####CSD Registe Values####  

14:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138360>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 209 ] 
14:28:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 210 ] 
14:28:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A9A to EndLba:0x3B70B1A with One's Pattern
14:28:23: [ WrLbaNoData(0x3B70A9A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 211 ] 
14:28:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A9A to EndLba:0x3B70B1A with One's Pattern 

14:28:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B1A to EndLba:0x3B70B9A with One's Pattern
14:28:23: [ WrLbaNoData(0x3B70B1A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 212 ] 
14:28:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B1A to EndLba:0x3B70B9A with One's Pattern 

14:28:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2316B to EndLba:0x2515D with Constant Pattern
14:28:23: [ RdLbaNoData(0x2316B, 0x1FF2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 213 ] 
14:28:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2316B to EndLba:0x2515D with Constant Pattern 

14:28:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4087
14:28:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138330>, <py_sfcl.PySEnhancedCmdData object at 0x06138390>, <None>) , Command count = 214 ] 
14:28:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:25: Host Frequency set to 25000 KHz
14:28:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x061385D0>, 0x0, True) , Command count = 215 ] 
14:28:25: [GO18_globalSetVolt]### Host voltage value is set.
14:28:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138420>, 0x0, False) , Command count = 216 ] 
14:28:25: [GO18_globalSetVolt]### Host voltage value is set.
14:28:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 217 ] 
14:28:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 218 ] 
14:28:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 219 ] 
14:28:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138570>, <py_sfcl.CommandDataDefinition object at 0x06138510>) , Command count = 220 ] 
14:28:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385A0>, <py_sfcl.CommandDataDefinition object at 0x06138600>) , Command count = 221 ] 
14:28:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:26: [ SetCardRCA(0x1, 0xD555) , Command count = 222 ] 
14:28:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:26: Host Frequency set to 25000 KHz
14:28:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:26: ####CSD Registe 2.0 Values####
14:28:26: CSD_STRUCTURE                                 :0x1
14:28:26: Reserv1                                       :0x0
14:28:26: Time Access 1 TAAC                            :0xe
14:28:26: Time Access 2 NSAC*100                        :0x0
14:28:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:26: Card Command Classess CCC                     :0x5b5
14:28:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:26: DSR(driver stage register)  DSR_IMP           :0x0
14:28:26: Reserv2                                       :0x0
14:28:26: Device Size C_SIZE                            :0xedc8
14:28:26: Reserv3                                       :0x0
14:28:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:26: Reserv4                                       :0x0
14:28:26: Write Speed Factor R2W_FACTOR                 :0x2
14:28:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:26: FILE_FORMAT_GRP                               :0x0
14:28:26: COPY flag                                     :0x1
14:28:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:26: File_Format                                   :0x0
14:28:26: CRC                                           :0x0
14:28:26: ####CSD Registe Values####  

14:28:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:26: [GetSCRRegisterEntry] Passed
14:28:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:26: Data_Status_After Erases          : 0
14:28:26: CPRM Security Support             : No Security
14:28:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:26: Spec. Version                     : Version 3.0X
14:28:26: Extended Security Support         : Extended_Security_Not_Supported
14:28:26: Command Support                   : COMMAND_SUPPORT
14:28:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138870>, <py_sfcl.CommandDataDefinition object at 0x06138690>) , Command count = 223 ] 
14:28:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061386F0>, <py_sfcl.CommandDataDefinition object at 0x06138720>) , Command count = 224 ] 
14:28:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:26: [ SetBusWidth(0x4) , Command count = 225 ] 
14:28:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061387E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 226 ] 
14:28:26: Protected Area Size 0x28000
14:28:26: Bus Width           2
14:28:26: Secure Mode         0
14:28:26: Speed  Class        4
14:28:26: Perf Move           0
14:28:26: Au Size             9
14:28:26: Erase Size          15
14:28:26: Erase Timeout       1
14:28:26: Erase offset        1
14:28:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 227 ] 
14:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:26: Host Frequency set to 100000 KHz
14:28:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:26: ####CSD Registe 2.0 Values####
14:28:26: CSD_STRUCTURE                                 :0x1
14:28:26: Reserv1                                       :0x0
14:28:26: Time Access 1 TAAC                            :0xe
14:28:26: Time Access 2 NSAC*100                        :0x0
14:28:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:26: Card Command Classess CCC                     :0x5b5
14:28:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:26: DSR(driver stage register)  DSR_IMP           :0x0
14:28:26: Reserv2                                       :0x0
14:28:26: Device Size C_SIZE                            :0xedc8
14:28:26: Reserv3                                       :0x0
14:28:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:26: Reserv4                                       :0x0
14:28:26: Write Speed Factor R2W_FACTOR                 :0x2
14:28:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:26: FILE_FORMAT_GRP                               :0x0
14:28:26: COPY flag                                     :0x1
14:28:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:26: File_Format                                   :0x0
14:28:26: CRC                                           :0x0
14:28:26: ####CSD Registe Values####  

14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A80>, <py_sfcl.CommandDataDefinition object at 0x061388A0>) , Command count = 228 ] 
14:28:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138900>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 229 ] 
14:28:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7056C to EndLba:0x3B705EC with One's Pattern
14:28:26: [ WrLbaNoData(0x3B7056C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 230 ] 
14:28:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7056C to EndLba:0x3B705EC with One's Pattern 

14:28:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B705EC to EndLba:0x3B7066C with One's Pattern
14:28:26: [ WrLbaNoData(0x3B705EC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 231 ] 
14:28:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B705EC to EndLba:0x3B7066C with One's Pattern 

14:28:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2316B to EndLba:0x2515B with Constant Pattern
14:28:26: [ RdLbaNoData(0x2316B, 0x1FF0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 232 ] 
14:28:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2316B to EndLba:0x2515B with Constant Pattern 

14:28:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4086
14:28:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138A50>, <py_sfcl.PySEnhancedCmdData object at 0x06138AB0>, <None>) , Command count = 233 ] 
14:28:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:28: Host Frequency set to 25000 KHz
14:28:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138CF0>, 0x0, True) , Command count = 234 ] 
14:28:28: [GO18_globalSetVolt]### Host voltage value is set.
14:28:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138B40>, 0x0, False) , Command count = 235 ] 
14:28:28: [GO18_globalSetVolt]### Host voltage value is set.
14:28:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 236 ] 
14:28:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 237 ] 
14:28:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 238 ] 
14:28:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C90>, <py_sfcl.CommandDataDefinition object at 0x06138C30>) , Command count = 239 ] 
14:28:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CC0>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 240 ] 
14:28:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:28: [ SetCardRCA(0x1, 0xD555) , Command count = 241 ] 
14:28:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:29: Host Frequency set to 25000 KHz
14:28:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:29: ####CSD Registe 2.0 Values####
14:28:29: CSD_STRUCTURE                                 :0x1
14:28:29: Reserv1                                       :0x0
14:28:29: Time Access 1 TAAC                            :0xe
14:28:29: Time Access 2 NSAC*100                        :0x0
14:28:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:29: Card Command Classess CCC                     :0x5b5
14:28:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:29: DSR(driver stage register)  DSR_IMP           :0x0
14:28:29: Reserv2                                       :0x0
14:28:29: Device Size C_SIZE                            :0xedc8
14:28:29: Reserv3                                       :0x0
14:28:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:29: Reserv4                                       :0x0
14:28:29: Write Speed Factor R2W_FACTOR                 :0x2
14:28:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:29: FILE_FORMAT_GRP                               :0x0
14:28:29: COPY flag                                     :0x1
14:28:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:29: File_Format                                   :0x0
14:28:29: CRC                                           :0x0
14:28:29: ####CSD Registe Values####  

14:28:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:29: [GetSCRRegisterEntry] Passed
14:28:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:29: Data_Status_After Erases          : 0
14:28:29: CPRM Security Support             : No Security
14:28:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:29: Spec. Version                     : Version 3.0X
14:28:29: Extended Security Support         : Extended_Security_Not_Supported
14:28:29: Command Support                   : COMMAND_SUPPORT
14:28:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F90>, <py_sfcl.CommandDataDefinition object at 0x06138DB0>) , Command count = 242 ] 
14:28:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E10>, <py_sfcl.CommandDataDefinition object at 0x06138E40>) , Command count = 243 ] 
14:28:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:29: [ SetBusWidth(0x4) , Command count = 244 ] 
14:28:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 245 ] 
14:28:29: Protected Area Size 0x28000
14:28:29: Bus Width           2
14:28:29: Secure Mode         0
14:28:29: Speed  Class        4
14:28:29: Perf Move           0
14:28:29: Au Size             9
14:28:29: Erase Size          15
14:28:29: Erase Timeout       1
14:28:29: Erase offset        1
14:28:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 246 ] 
14:28:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:29: Host Frequency set to 100000 KHz
14:28:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:29: ####CSD Registe 2.0 Values####
14:28:29: CSD_STRUCTURE                                 :0x1
14:28:29: Reserv1                                       :0x0
14:28:29: Time Access 1 TAAC                            :0xe
14:28:29: Time Access 2 NSAC*100                        :0x0
14:28:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:29: Card Command Classess CCC                     :0x5b5
14:28:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:29: DSR(driver stage register)  DSR_IMP           :0x0
14:28:29: Reserv2                                       :0x0
14:28:29: Device Size C_SIZE                            :0xedc8
14:28:29: Reserv3                                       :0x0
14:28:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:29: Reserv4                                       :0x0
14:28:29: Write Speed Factor R2W_FACTOR                 :0x2
14:28:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:29: FILE_FORMAT_GRP                               :0x0
14:28:29: COPY flag                                     :0x1
14:28:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:29: File_Format                                   :0x0
14:28:29: CRC                                           :0x0
14:28:29: ####CSD Registe Values####  

14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F1E0>) , Command count = 247 ] 
14:28:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x0613F090>) , Command count = 248 ] 
14:28:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EC6 to EndLba:0x3B70F46 with One's Pattern
14:28:29: [ WrLbaNoData(0x3B70EC6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 249 ] 
14:28:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EC6 to EndLba:0x3B70F46 with One's Pattern 

14:28:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70F46 to EndLba:0x3B70FC6 with One's Pattern
14:28:29: [ WrLbaNoData(0x3B70F46, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 250 ] 
14:28:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70F46 to EndLba:0x3B70FC6 with One's Pattern 

14:28:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2316D to EndLba:0x2515B with Constant Pattern
14:28:30: [ RdLbaNoData(0x2316D, 0x1FEE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 251 ] 
14:28:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2316D to EndLba:0x2515B with Constant Pattern 

14:28:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4085
14:28:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05184030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F180>, <py_sfcl.PySEnhancedCmdData object at 0x0613F1B0>, <None>) , Command count = 252 ] 
14:28:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:32: Host Frequency set to 25000 KHz
14:28:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F420>, 0x0, True) , Command count = 253 ] 
14:28:32: [GO18_globalSetVolt]### Host voltage value is set.
14:28:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x052577E0>, 0x0, False) , Command count = 254 ] 
14:28:32: [GO18_globalSetVolt]### Host voltage value is set.
14:28:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 255 ] 
14:28:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 256 ] 
14:28:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 257 ] 
14:28:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x0525E180>) , Command count = 258 ] 
14:28:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x0613F2A0>) , Command count = 259 ] 
14:28:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:32: [ SetCardRCA(0x1, 0xD555) , Command count = 260 ] 
14:28:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:33: Host Frequency set to 25000 KHz
14:28:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:33: ####CSD Registe 2.0 Values####
14:28:33: CSD_STRUCTURE                                 :0x1
14:28:33: Reserv1                                       :0x0
14:28:33: Time Access 1 TAAC                            :0xe
14:28:33: Time Access 2 NSAC*100                        :0x0
14:28:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:33: Card Command Classess CCC                     :0x5b5
14:28:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:33: DSR(driver stage register)  DSR_IMP           :0x0
14:28:33: Reserv2                                       :0x0
14:28:33: Device Size C_SIZE                            :0xedc8
14:28:33: Reserv3                                       :0x0
14:28:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:33: Reserv4                                       :0x0
14:28:33: Write Speed Factor R2W_FACTOR                 :0x2
14:28:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:33: FILE_FORMAT_GRP                               :0x0
14:28:33: COPY flag                                     :0x1
14:28:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:33: File_Format                                   :0x0
14:28:33: CRC                                           :0x0
14:28:33: ####CSD Registe Values####  

14:28:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:33: [GetSCRRegisterEntry] Passed
14:28:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:33: Data_Status_After Erases          : 0
14:28:33: CPRM Security Support             : No Security
14:28:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:33: Spec. Version                     : Version 3.0X
14:28:33: Extended Security Support         : Extended_Security_Not_Supported
14:28:33: Command Support                   : COMMAND_SUPPORT
14:28:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1E0>, <py_sfcl.CommandDataDefinition object at 0x0613F510>) , Command count = 261 ] 
14:28:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF240>, <py_sfcl.CommandDataDefinition object at 0x0613F360>) , Command count = 262 ] 
14:28:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:33: [ SetBusWidth(0x4) , Command count = 263 ] 
14:28:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 264 ] 
14:28:33: Protected Area Size 0x28000
14:28:33: Bus Width           2
14:28:33: Secure Mode         0
14:28:33: Speed  Class        4
14:28:33: Perf Move           0
14:28:33: Au Size             9
14:28:33: Erase Size          15
14:28:33: Erase Timeout       1
14:28:33: Erase offset        1
14:28:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 265 ] 
14:28:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:33: Host Frequency set to 100000 KHz
14:28:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:33: ####CSD Registe 2.0 Values####
14:28:33: CSD_STRUCTURE                                 :0x1
14:28:33: Reserv1                                       :0x0
14:28:33: Time Access 1 TAAC                            :0xe
14:28:33: Time Access 2 NSAC*100                        :0x0
14:28:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:33: Card Command Classess CCC                     :0x5b5
14:28:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:33: DSR(driver stage register)  DSR_IMP           :0x0
14:28:33: Reserv2                                       :0x0
14:28:33: Device Size C_SIZE                            :0xedc8
14:28:33: Reserv3                                       :0x0
14:28:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:33: Reserv4                                       :0x0
14:28:33: Write Speed Factor R2W_FACTOR                 :0x2
14:28:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:33: FILE_FORMAT_GRP                               :0x0
14:28:33: COPY flag                                     :0x1
14:28:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:33: File_Format                                   :0x0
14:28:33: CRC                                           :0x0
14:28:33: ####CSD Registe Values####  

14:28:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0518AE70>, <py_sfcl.CommandDataDefinition object at 0x0613F630>) , Command count = 266 ] 
14:28:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x0613F480>) , Command count = 267 ] 
14:28:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DEAD to EndLba:0x3B6DF2D with One's Pattern
14:28:33: [ WrLbaNoData(0x3B6DEAD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 268 ] 
14:28:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DEAD to EndLba:0x3B6DF2D with One's Pattern 

14:28:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DF2D to EndLba:0x3B6DFAD with One's Pattern
14:28:33: [ WrLbaNoData(0x3B6DF2D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 269 ] 
14:28:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DF2D to EndLba:0x3B6DFAD with One's Pattern 

14:28:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2316D to EndLba:0x25159 with Constant Pattern
14:28:33: [ RdLbaNoData(0x2316D, 0x1FEC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 270 ] 
14:28:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2316D to EndLba:0x25159 with Constant Pattern 

14:28:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4084
14:28:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BBFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F540>, <None>) , Command count = 271 ] 
14:28:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:35: Host Frequency set to 25000 KHz
14:28:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C19C0>, 0x0, True) , Command count = 272 ] 
14:28:35: [GO18_globalSetVolt]### Host voltage value is set.
14:28:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1A50>, 0x0, False) , Command count = 273 ] 
14:28:35: [GO18_globalSetVolt]### Host voltage value is set.
14:28:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 274 ] 
14:28:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 275 ] 
14:28:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 276 ] 
14:28:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C30>, <py_sfcl.CommandDataDefinition object at 0x0613F5D0>) , Command count = 277 ] 
14:28:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613F600>) , Command count = 278 ] 
14:28:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:35: [ SetCardRCA(0x1, 0xD555) , Command count = 279 ] 
14:28:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:35: Host Frequency set to 25000 KHz
14:28:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:35: ####CSD Registe 2.0 Values####
14:28:35: CSD_STRUCTURE                                 :0x1
14:28:35: Reserv1                                       :0x0
14:28:35: Time Access 1 TAAC                            :0xe
14:28:35: Time Access 2 NSAC*100                        :0x0
14:28:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:35: Card Command Classess CCC                     :0x5b5
14:28:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:35: DSR(driver stage register)  DSR_IMP           :0x0
14:28:35: Reserv2                                       :0x0
14:28:35: Device Size C_SIZE                            :0xedc8
14:28:35: Reserv3                                       :0x0
14:28:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:35: Reserv4                                       :0x0
14:28:35: Write Speed Factor R2W_FACTOR                 :0x2
14:28:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:35: FILE_FORMAT_GRP                               :0x0
14:28:35: COPY flag                                     :0x1
14:28:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:35: File_Format                                   :0x0
14:28:35: CRC                                           :0x0
14:28:35: ####CSD Registe Values####  

14:28:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:35: [GetSCRRegisterEntry] Passed
14:28:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:35: Data_Status_After Erases          : 0
14:28:35: CPRM Security Support             : No Security
14:28:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:35: Spec. Version                     : Version 3.0X
14:28:35: Extended Security Support         : Extended_Security_Not_Supported
14:28:35: Command Support                   : COMMAND_SUPPORT
14:28:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1CC0>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 280 ] 
14:28:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1DE0>, <py_sfcl.CommandDataDefinition object at 0x0613F6F0>) , Command count = 281 ] 
14:28:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:35: [ SetBusWidth(0x4) , Command count = 282 ] 
14:28:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 283 ] 
14:28:35: Protected Area Size 0x28000
14:28:35: Bus Width           2
14:28:35: Secure Mode         0
14:28:35: Speed  Class        4
14:28:35: Perf Move           0
14:28:35: Au Size             9
14:28:35: Erase Size          15
14:28:35: Erase Timeout       1
14:28:35: Erase offset        1
14:28:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 284 ] 
14:28:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:36: Host Frequency set to 100000 KHz
14:28:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:36: ####CSD Registe 2.0 Values####
14:28:36: CSD_STRUCTURE                                 :0x1
14:28:36: Reserv1                                       :0x0
14:28:36: Time Access 1 TAAC                            :0xe
14:28:36: Time Access 2 NSAC*100                        :0x0
14:28:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:36: Card Command Classess CCC                     :0x5b5
14:28:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:36: DSR(driver stage register)  DSR_IMP           :0x0
14:28:36: Reserv2                                       :0x0
14:28:36: Device Size C_SIZE                            :0xedc8
14:28:36: Reserv3                                       :0x0
14:28:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:36: Reserv4                                       :0x0
14:28:36: Write Speed Factor R2W_FACTOR                 :0x2
14:28:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:36: FILE_FORMAT_GRP                               :0x0
14:28:36: COPY flag                                     :0x1
14:28:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:36: File_Format                                   :0x0
14:28:36: CRC                                           :0x0
14:28:36: ####CSD Registe Values####  

14:28:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F60>, <py_sfcl.CommandDataDefinition object at 0x0613F9C0>) , Command count = 285 ] 
14:28:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0613F810>) , Command count = 286 ] 
14:28:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70549 to EndLba:0x3B705C9 with One's Pattern
14:28:36: [ WrLbaNoData(0x3B70549, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 287 ] 
14:28:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70549 to EndLba:0x3B705C9 with One's Pattern 

14:28:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B705C9 to EndLba:0x3B70649 with One's Pattern
14:28:36: [ WrLbaNoData(0x3B705C9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 288 ] 
14:28:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B705C9 to EndLba:0x3B70649 with One's Pattern 

14:28:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2316F to EndLba:0x25159 with Constant Pattern
14:28:36: [ RdLbaNoData(0x2316F, 0x1FEA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 289 ] 
14:28:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2316F to EndLba:0x25159 with Constant Pattern 

14:28:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4083
14:28:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F870>, <py_sfcl.PySEnhancedCmdData object at 0x0613F8D0>, <None>) , Command count = 290 ] 
14:28:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:38: Host Frequency set to 25000 KHz
14:28:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F2D0>, 0x0, True) , Command count = 291 ] 
14:28:38: [GO18_globalSetVolt]### Host voltage value is set.
14:28:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F4E0>, 0x0, False) , Command count = 292 ] 
14:28:38: [GO18_globalSetVolt]### Host voltage value is set.
14:28:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 293 ] 
14:28:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 294 ] 
14:28:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 295 ] 
14:28:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x0606F7E0>) , Command count = 296 ] 
14:28:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F960>, <py_sfcl.CommandDataDefinition object at 0x0613F9F0>) , Command count = 297 ] 
14:28:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:38: [ SetCardRCA(0x1, 0xD555) , Command count = 298 ] 
14:28:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:38: Host Frequency set to 25000 KHz
14:28:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:38: ####CSD Registe 2.0 Values####
14:28:38: CSD_STRUCTURE                                 :0x1
14:28:38: Reserv1                                       :0x0
14:28:38: Time Access 1 TAAC                            :0xe
14:28:38: Time Access 2 NSAC*100                        :0x0
14:28:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:38: Card Command Classess CCC                     :0x5b5
14:28:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:38: DSR(driver stage register)  DSR_IMP           :0x0
14:28:38: Reserv2                                       :0x0
14:28:38: Device Size C_SIZE                            :0xedc8
14:28:38: Reserv3                                       :0x0
14:28:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:38: Reserv4                                       :0x0
14:28:38: Write Speed Factor R2W_FACTOR                 :0x2
14:28:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:38: FILE_FORMAT_GRP                               :0x0
14:28:38: COPY flag                                     :0x1
14:28:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:38: File_Format                                   :0x0
14:28:38: CRC                                           :0x0
14:28:38: ####CSD Registe Values####  

14:28:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:38: [GetSCRRegisterEntry] Passed
14:28:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:38: Data_Status_After Erases          : 0
14:28:38: CPRM Security Support             : No Security
14:28:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:38: Spec. Version                     : Version 3.0X
14:28:38: Extended Security Support         : Extended_Security_Not_Supported
14:28:38: Command Support                   : COMMAND_SUPPORT
14:28:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E38D0>, <py_sfcl.CommandDataDefinition object at 0x0613FC30>) , Command count = 299 ] 
14:28:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3780>, <py_sfcl.CommandDataDefinition object at 0x060E3EA0>) , Command count = 300 ] 
14:28:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:38: [ SetBusWidth(0x4) , Command count = 301 ] 
14:28:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E3CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 302 ] 
14:28:38: Protected Area Size 0x28000
14:28:38: Bus Width           2
14:28:38: Secure Mode         0
14:28:38: Speed  Class        4
14:28:38: Perf Move           0
14:28:38: Au Size             9
14:28:38: Erase Size          15
14:28:38: Erase Timeout       1
14:28:38: Erase offset        1
14:28:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 303 ] 
14:28:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:38: Host Frequency set to 100000 KHz
14:28:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:38: ####CSD Registe 2.0 Values####
14:28:38: CSD_STRUCTURE                                 :0x1
14:28:38: Reserv1                                       :0x0
14:28:38: Time Access 1 TAAC                            :0xe
14:28:38: Time Access 2 NSAC*100                        :0x0
14:28:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:38: Card Command Classess CCC                     :0x5b5
14:28:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:38: DSR(driver stage register)  DSR_IMP           :0x0
14:28:38: Reserv2                                       :0x0
14:28:38: Device Size C_SIZE                            :0xedc8
14:28:38: Reserv3                                       :0x0
14:28:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:38: Reserv4                                       :0x0
14:28:38: Write Speed Factor R2W_FACTOR                 :0x2
14:28:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:38: FILE_FORMAT_GRP                               :0x0
14:28:38: COPY flag                                     :0x1
14:28:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:38: File_Format                                   :0x0
14:28:38: CRC                                           :0x0
14:28:38: ####CSD Registe Values####  

14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3C30>, <py_sfcl.CommandDataDefinition object at 0x0613FCF0>) , Command count = 304 ] 
14:28:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3D80>, <py_sfcl.CommandDataDefinition object at 0x060E3840>) , Command count = 305 ] 
14:28:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B719F5 to EndLba:0x3B71A75 with One's Pattern
14:28:38: [ WrLbaNoData(0x3B719F5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 306 ] 
14:28:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B719F5 to EndLba:0x3B71A75 with One's Pattern 

14:28:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71A75 to EndLba:0x3B71AF5 with One's Pattern
14:28:38: [ WrLbaNoData(0x3B71A75, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 307 ] 
14:28:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71A75 to EndLba:0x3B71AF5 with One's Pattern 

14:28:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2316F to EndLba:0x25157 with Constant Pattern
14:28:39: [ RdLbaNoData(0x2316F, 0x1FE8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 308 ] 
14:28:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2316F to EndLba:0x25157 with Constant Pattern 

14:28:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4082
14:28:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C060>, <py_sfcl.PySEnhancedCmdData object at 0x0611C120>, <None>) , Command count = 309 ] 
14:28:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:41: Host Frequency set to 25000 KHz
14:28:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C1B0>, 0x0, True) , Command count = 310 ] 
14:28:41: [GO18_globalSetVolt]### Host voltage value is set.
14:28:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F660>, 0x0, False) , Command count = 311 ] 
14:28:41: [GO18_globalSetVolt]### Host voltage value is set.
14:28:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 312 ] 
14:28:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 313 ] 
14:28:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 314 ] 
14:28:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 315 ] 
14:28:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3690>, <py_sfcl.CommandDataDefinition object at 0x0611C8A0>) , Command count = 316 ] 
14:28:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:41: [ SetCardRCA(0x1, 0xD555) , Command count = 317 ] 
14:28:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:41: Host Frequency set to 25000 KHz
14:28:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:41: ####CSD Registe 2.0 Values####
14:28:41: CSD_STRUCTURE                                 :0x1
14:28:41: Reserv1                                       :0x0
14:28:41: Time Access 1 TAAC                            :0xe
14:28:41: Time Access 2 NSAC*100                        :0x0
14:28:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:41: Card Command Classess CCC                     :0x5b5
14:28:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:41: DSR(driver stage register)  DSR_IMP           :0x0
14:28:41: Reserv2                                       :0x0
14:28:41: Device Size C_SIZE                            :0xedc8
14:28:41: Reserv3                                       :0x0
14:28:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:41: Reserv4                                       :0x0
14:28:41: Write Speed Factor R2W_FACTOR                 :0x2
14:28:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:41: FILE_FORMAT_GRP                               :0x0
14:28:41: COPY flag                                     :0x1
14:28:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:41: File_Format                                   :0x0
14:28:41: CRC                                           :0x0
14:28:41: ####CSD Registe Values####  

14:28:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:41: [GetSCRRegisterEntry] Passed
14:28:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:41: Data_Status_After Erases          : 0
14:28:41: CPRM Security Support             : No Security
14:28:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:41: Spec. Version                     : Version 3.0X
14:28:41: Extended Security Support         : Extended_Security_Not_Supported
14:28:41: Command Support                   : COMMAND_SUPPORT
14:28:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CFC0>, <py_sfcl.CommandDataDefinition object at 0x0611CB40>) , Command count = 318 ] 
14:28:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C0F0>, <py_sfcl.CommandDataDefinition object at 0x0611C450>) , Command count = 319 ] 
14:28:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:41: [ SetBusWidth(0x4) , Command count = 320 ] 
14:28:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 321 ] 
14:28:41: Protected Area Size 0x28000
14:28:41: Bus Width           2
14:28:41: Secure Mode         0
14:28:41: Speed  Class        4
14:28:41: Perf Move           0
14:28:41: Au Size             9
14:28:41: Erase Size          15
14:28:41: Erase Timeout       1
14:28:41: Erase offset        1
14:28:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 322 ] 
14:28:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:41: Host Frequency set to 100000 KHz
14:28:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:41: ####CSD Registe 2.0 Values####
14:28:41: CSD_STRUCTURE                                 :0x1
14:28:41: Reserv1                                       :0x0
14:28:41: Time Access 1 TAAC                            :0xe
14:28:41: Time Access 2 NSAC*100                        :0x0
14:28:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:41: Card Command Classess CCC                     :0x5b5
14:28:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:41: DSR(driver stage register)  DSR_IMP           :0x0
14:28:41: Reserv2                                       :0x0
14:28:41: Device Size C_SIZE                            :0xedc8
14:28:41: Reserv3                                       :0x0
14:28:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:41: Reserv4                                       :0x0
14:28:41: Write Speed Factor R2W_FACTOR                 :0x2
14:28:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:41: FILE_FORMAT_GRP                               :0x0
14:28:41: COPY flag                                     :0x1
14:28:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:41: File_Format                                   :0x0
14:28:41: CRC                                           :0x0
14:28:41: ####CSD Registe Values####  

14:28:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CDE0>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 323 ] 
14:28:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF30>, <py_sfcl.CommandDataDefinition object at 0x0611CEA0>) , Command count = 324 ] 
14:28:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F7EB to EndLba:0x3B6F86B with One's Pattern
14:28:41: [ WrLbaNoData(0x3B6F7EB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 325 ] 
14:28:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F7EB to EndLba:0x3B6F86B with One's Pattern 

14:28:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F86B to EndLba:0x3B6F8EB with One's Pattern
14:28:41: [ WrLbaNoData(0x3B6F86B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 326 ] 
14:28:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F86B to EndLba:0x3B6F8EB with One's Pattern 

14:28:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23171 to EndLba:0x25157 with Constant Pattern
14:28:41: [ RdLbaNoData(0x23171, 0x1FE6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 327 ] 
14:28:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23171 to EndLba:0x25157 with Constant Pattern 

14:28:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4081
14:28:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CC00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C510>, <py_sfcl.PySEnhancedCmdData object at 0x0611C900>, <None>) , Command count = 328 ] 
14:28:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:44: Host Frequency set to 25000 KHz
14:28:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CF90>, 0x0, True) , Command count = 329 ] 
14:28:44: [GO18_globalSetVolt]### Host voltage value is set.
14:28:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CD20>, 0x0, False) , Command count = 330 ] 
14:28:44: [GO18_globalSetVolt]### Host voltage value is set.
14:28:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 331 ] 
14:28:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 332 ] 
14:28:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 333 ] 
14:28:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129210>, <py_sfcl.CommandDataDefinition object at 0x06129090>) , Command count = 334 ] 
14:28:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061290F0>, <py_sfcl.CommandDataDefinition object at 0x0611C810>) , Command count = 335 ] 
14:28:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:44: [ SetCardRCA(0x1, 0xD555) , Command count = 336 ] 
14:28:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:44: Host Frequency set to 25000 KHz
14:28:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:44: ####CSD Registe 2.0 Values####
14:28:44: CSD_STRUCTURE                                 :0x1
14:28:44: Reserv1                                       :0x0
14:28:44: Time Access 1 TAAC                            :0xe
14:28:44: Time Access 2 NSAC*100                        :0x0
14:28:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:44: Card Command Classess CCC                     :0x5b5
14:28:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:44: DSR(driver stage register)  DSR_IMP           :0x0
14:28:44: Reserv2                                       :0x0
14:28:44: Device Size C_SIZE                            :0xedc8
14:28:44: Reserv3                                       :0x0
14:28:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:44: Reserv4                                       :0x0
14:28:44: Write Speed Factor R2W_FACTOR                 :0x2
14:28:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:44: FILE_FORMAT_GRP                               :0x0
14:28:44: COPY flag                                     :0x1
14:28:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:44: File_Format                                   :0x0
14:28:44: CRC                                           :0x0
14:28:44: ####CSD Registe Values####  

14:28:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:44: [GetSCRRegisterEntry] Passed
14:28:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:44: Data_Status_After Erases          : 0
14:28:44: CPRM Security Support             : No Security
14:28:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:44: Spec. Version                     : Version 3.0X
14:28:44: Extended Security Support         : Extended_Security_Not_Supported
14:28:44: Command Support                   : COMMAND_SUPPORT
14:28:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129120>, <py_sfcl.CommandDataDefinition object at 0x0611CF00>) , Command count = 337 ] 
14:28:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C780>, <py_sfcl.CommandDataDefinition object at 0x0611CCC0>) , Command count = 338 ] 
14:28:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:44: [ SetBusWidth(0x4) , Command count = 339 ] 
14:28:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 340 ] 
14:28:44: Protected Area Size 0x28000
14:28:44: Bus Width           2
14:28:44: Secure Mode         0
14:28:44: Speed  Class        4
14:28:44: Perf Move           0
14:28:44: Au Size             9
14:28:44: Erase Size          15
14:28:44: Erase Timeout       1
14:28:44: Erase offset        1
14:28:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 341 ] 
14:28:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:44: Host Frequency set to 100000 KHz
14:28:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:44: ####CSD Registe 2.0 Values####
14:28:44: CSD_STRUCTURE                                 :0x1
14:28:44: Reserv1                                       :0x0
14:28:44: Time Access 1 TAAC                            :0xe
14:28:44: Time Access 2 NSAC*100                        :0x0
14:28:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:44: Card Command Classess CCC                     :0x5b5
14:28:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:44: DSR(driver stage register)  DSR_IMP           :0x0
14:28:44: Reserv2                                       :0x0
14:28:44: Device Size C_SIZE                            :0xedc8
14:28:44: Reserv3                                       :0x0
14:28:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:44: Reserv4                                       :0x0
14:28:44: Write Speed Factor R2W_FACTOR                 :0x2
14:28:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:44: FILE_FORMAT_GRP                               :0x0
14:28:44: COPY flag                                     :0x1
14:28:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:44: File_Format                                   :0x0
14:28:44: CRC                                           :0x0
14:28:44: ####CSD Registe Values####  

14:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061294B0>, <py_sfcl.CommandDataDefinition object at 0x061292D0>) , Command count = 342 ] 
14:28:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x061291E0>) , Command count = 343 ] 
14:28:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D71C to EndLba:0x3B6D79C with One's Pattern
14:28:44: [ WrLbaNoData(0x3B6D71C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 344 ] 
14:28:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D71C to EndLba:0x3B6D79C with One's Pattern 

14:28:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D79C to EndLba:0x3B6D81C with One's Pattern
14:28:44: [ WrLbaNoData(0x3B6D79C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 345 ] 
14:28:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D79C to EndLba:0x3B6D81C with One's Pattern 

14:28:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23171 to EndLba:0x25155 with Constant Pattern
14:28:44: [ RdLbaNoData(0x23171, 0x1FE4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 346 ] 
14:28:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23171 to EndLba:0x25155 with Constant Pattern 

14:28:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4080
14:28:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129540>, <py_sfcl.PySEnhancedCmdData object at 0x06129600>, <None>) , Command count = 347 ] 
14:28:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:46: Host Frequency set to 25000 KHz
14:28:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CE40>, 0x0, True) , Command count = 348 ] 
14:28:46: [GO18_globalSetVolt]### Host voltage value is set.
14:28:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129630>, 0x0, False) , Command count = 349 ] 
14:28:47: [GO18_globalSetVolt]### Host voltage value is set.
14:28:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 350 ] 
14:28:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 351 ] 
14:28:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 352 ] 
14:28:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C8D0>, <py_sfcl.CommandDataDefinition object at 0x0611CDB0>) , Command count = 353 ] 
14:28:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129900>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 354 ] 
14:28:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:47: [ SetCardRCA(0x1, 0xD555) , Command count = 355 ] 
14:28:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:47: Host Frequency set to 25000 KHz
14:28:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:47: ####CSD Registe 2.0 Values####
14:28:47: CSD_STRUCTURE                                 :0x1
14:28:47: Reserv1                                       :0x0
14:28:47: Time Access 1 TAAC                            :0xe
14:28:47: Time Access 2 NSAC*100                        :0x0
14:28:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:47: Card Command Classess CCC                     :0x5b5
14:28:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:47: DSR(driver stage register)  DSR_IMP           :0x0
14:28:47: Reserv2                                       :0x0
14:28:47: Device Size C_SIZE                            :0xedc8
14:28:47: Reserv3                                       :0x0
14:28:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:47: Reserv4                                       :0x0
14:28:47: Write Speed Factor R2W_FACTOR                 :0x2
14:28:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:47: FILE_FORMAT_GRP                               :0x0
14:28:47: COPY flag                                     :0x1
14:28:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:47: File_Format                                   :0x0
14:28:47: CRC                                           :0x0
14:28:47: ####CSD Registe Values####  

14:28:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:47: [GetSCRRegisterEntry] Passed
14:28:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:47: Data_Status_After Erases          : 0
14:28:47: CPRM Security Support             : No Security
14:28:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:47: Spec. Version                     : Version 3.0X
14:28:47: Extended Security Support         : Extended_Security_Not_Supported
14:28:47: Command Support                   : COMMAND_SUPPORT
14:28:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129930>, <py_sfcl.CommandDataDefinition object at 0x06129300>) , Command count = 356 ] 
14:28:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 357 ] 
14:28:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:47: [ SetBusWidth(0x4) , Command count = 358 ] 
14:28:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 359 ] 
14:28:47: Protected Area Size 0x28000
14:28:47: Bus Width           2
14:28:47: Secure Mode         0
14:28:47: Speed  Class        4
14:28:47: Perf Move           0
14:28:47: Au Size             9
14:28:47: Erase Size          15
14:28:47: Erase Timeout       1
14:28:47: Erase offset        1
14:28:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 360 ] 
14:28:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:47: Host Frequency set to 100000 KHz
14:28:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:47: ####CSD Registe 2.0 Values####
14:28:47: CSD_STRUCTURE                                 :0x1
14:28:47: Reserv1                                       :0x0
14:28:47: Time Access 1 TAAC                            :0xe
14:28:47: Time Access 2 NSAC*100                        :0x0
14:28:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:47: Card Command Classess CCC                     :0x5b5
14:28:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:47: DSR(driver stage register)  DSR_IMP           :0x0
14:28:47: Reserv2                                       :0x0
14:28:47: Device Size C_SIZE                            :0xedc8
14:28:47: Reserv3                                       :0x0
14:28:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:47: Reserv4                                       :0x0
14:28:47: Write Speed Factor R2W_FACTOR                 :0x2
14:28:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:47: FILE_FORMAT_GRP                               :0x0
14:28:47: COPY flag                                     :0x1
14:28:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:47: File_Format                                   :0x0
14:28:47: CRC                                           :0x0
14:28:47: ####CSD Registe Values####  

14:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CC0>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 361 ] 
14:28:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BD0>, <py_sfcl.CommandDataDefinition object at 0x061299F0>) , Command count = 362 ] 
14:28:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70038 to EndLba:0x3B700B8 with One's Pattern
14:28:47: [ WrLbaNoData(0x3B70038, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 363 ] 
14:28:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70038 to EndLba:0x3B700B8 with One's Pattern 

14:28:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B700B8 to EndLba:0x3B70138 with One's Pattern
14:28:47: [ WrLbaNoData(0x3B700B8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 364 ] 
14:28:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B700B8 to EndLba:0x3B70138 with One's Pattern 

14:28:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23173 to EndLba:0x25155 with Constant Pattern
14:28:47: [ RdLbaNoData(0x23173, 0x1FE2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 365 ] 
14:28:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23173 to EndLba:0x25155 with Constant Pattern 

14:28:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4079
14:28:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129D20>, <py_sfcl.PySEnhancedCmdData object at 0x06129DE0>, <None>) , Command count = 366 ] 
14:28:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:49: Host Frequency set to 25000 KHz
14:28:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129660>, 0x0, True) , Command count = 367 ] 
14:28:49: [GO18_globalSetVolt]### Host voltage value is set.
14:28:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129E10>, 0x0, False) , Command count = 368 ] 
14:28:49: [GO18_globalSetVolt]### Host voltage value is set.
14:28:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 369 ] 
14:28:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 370 ] 
14:28:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 371 ] 
14:28:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129F90>) , Command count = 372 ] 
14:28:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x061297E0>) , Command count = 373 ] 
14:28:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:50: [ SetCardRCA(0x1, 0xD555) , Command count = 374 ] 
14:28:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:50: Host Frequency set to 25000 KHz
14:28:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:50: ####CSD Registe 2.0 Values####
14:28:50: CSD_STRUCTURE                                 :0x1
14:28:50: Reserv1                                       :0x0
14:28:50: Time Access 1 TAAC                            :0xe
14:28:50: Time Access 2 NSAC*100                        :0x0
14:28:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:50: Card Command Classess CCC                     :0x5b5
14:28:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:50: DSR(driver stage register)  DSR_IMP           :0x0
14:28:50: Reserv2                                       :0x0
14:28:50: Device Size C_SIZE                            :0xedc8
14:28:50: Reserv3                                       :0x0
14:28:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:50: Reserv4                                       :0x0
14:28:50: Write Speed Factor R2W_FACTOR                 :0x2
14:28:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:50: FILE_FORMAT_GRP                               :0x0
14:28:50: COPY flag                                     :0x1
14:28:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:50: File_Format                                   :0x0
14:28:50: CRC                                           :0x0
14:28:50: ####CSD Registe Values####  

14:28:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:50: [GetSCRRegisterEntry] Passed
14:28:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:50: Data_Status_After Erases          : 0
14:28:50: CPRM Security Support             : No Security
14:28:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:50: Spec. Version                     : Version 3.0X
14:28:50: Extended Security Support         : Extended_Security_Not_Supported
14:28:50: Command Support                   : COMMAND_SUPPORT
14:28:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0F0>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 375 ] 
14:28:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 376 ] 
14:28:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:50: [ SetBusWidth(0x4) , Command count = 377 ] 
14:28:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 378 ] 
14:28:50: Protected Area Size 0x28000
14:28:50: Bus Width           2
14:28:50: Secure Mode         0
14:28:50: Speed  Class        4
14:28:50: Perf Move           0
14:28:50: Au Size             9
14:28:50: Erase Size          15
14:28:50: Erase Timeout       1
14:28:50: Erase offset        1
14:28:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 379 ] 
14:28:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:50: Host Frequency set to 100000 KHz
14:28:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:50: ####CSD Registe 2.0 Values####
14:28:50: CSD_STRUCTURE                                 :0x1
14:28:50: Reserv1                                       :0x0
14:28:50: Time Access 1 TAAC                            :0xe
14:28:50: Time Access 2 NSAC*100                        :0x0
14:28:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:50: Card Command Classess CCC                     :0x5b5
14:28:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:50: DSR(driver stage register)  DSR_IMP           :0x0
14:28:50: Reserv2                                       :0x0
14:28:50: Device Size C_SIZE                            :0xedc8
14:28:50: Reserv3                                       :0x0
14:28:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:50: Reserv4                                       :0x0
14:28:50: Write Speed Factor R2W_FACTOR                 :0x2
14:28:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:50: FILE_FORMAT_GRP                               :0x0
14:28:50: COPY flag                                     :0x1
14:28:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:50: File_Format                                   :0x0
14:28:50: CRC                                           :0x0
14:28:50: ####CSD Registe Values####  

14:28:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E450>, <py_sfcl.CommandDataDefinition object at 0x0612E270>) , Command count = 380 ] 
14:28:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 381 ] 
14:28:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F384 to EndLba:0x3B6F404 with One's Pattern
14:28:50: [ WrLbaNoData(0x3B6F384, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 382 ] 
14:28:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F384 to EndLba:0x3B6F404 with One's Pattern 

14:28:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F404 to EndLba:0x3B6F484 with One's Pattern
14:28:50: [ WrLbaNoData(0x3B6F404, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 383 ] 
14:28:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F404 to EndLba:0x3B6F484 with One's Pattern 

14:28:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23173 to EndLba:0x25153 with Constant Pattern
14:28:50: [ RdLbaNoData(0x23173, 0x1FE0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 384 ] 
14:28:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23173 to EndLba:0x25153 with Constant Pattern 

14:28:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4078
14:28:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129B40>, <py_sfcl.PySEnhancedCmdData object at 0x06129C00>, <None>) , Command count = 385 ] 
14:28:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:52: Host Frequency set to 25000 KHz
14:28:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129E40>, 0x0, True) , Command count = 386 ] 
14:28:52: [GO18_globalSetVolt]### Host voltage value is set.
14:28:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E570>, 0x0, False) , Command count = 387 ] 
14:28:52: [GO18_globalSetVolt]### Host voltage value is set.
14:28:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 388 ] 
14:28:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 389 ] 
14:28:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 390 ] 
14:28:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8D0>, <py_sfcl.CommandDataDefinition object at 0x0612E750>) , Command count = 391 ] 
14:28:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E7B0>, <py_sfcl.CommandDataDefinition object at 0x061290C0>) , Command count = 392 ] 
14:28:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:52: [ SetCardRCA(0x1, 0xD555) , Command count = 393 ] 
14:28:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:53: Host Frequency set to 25000 KHz
14:28:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:53: ####CSD Registe 2.0 Values####
14:28:53: CSD_STRUCTURE                                 :0x1
14:28:53: Reserv1                                       :0x0
14:28:53: Time Access 1 TAAC                            :0xe
14:28:53: Time Access 2 NSAC*100                        :0x0
14:28:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:53: Card Command Classess CCC                     :0x5b5
14:28:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:53: DSR(driver stage register)  DSR_IMP           :0x0
14:28:53: Reserv2                                       :0x0
14:28:53: Device Size C_SIZE                            :0xedc8
14:28:53: Reserv3                                       :0x0
14:28:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:53: Reserv4                                       :0x0
14:28:53: Write Speed Factor R2W_FACTOR                 :0x2
14:28:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:53: FILE_FORMAT_GRP                               :0x0
14:28:53: COPY flag                                     :0x1
14:28:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:53: File_Format                                   :0x0
14:28:53: CRC                                           :0x0
14:28:53: ####CSD Registe Values####  

14:28:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:53: [GetSCRRegisterEntry] Passed
14:28:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:53: Data_Status_After Erases          : 0
14:28:53: CPRM Security Support             : No Security
14:28:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:53: Spec. Version                     : Version 3.0X
14:28:53: Extended Security Support         : Extended_Security_Not_Supported
14:28:53: Command Support                   : COMMAND_SUPPORT
14:28:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E7E0>, <py_sfcl.CommandDataDefinition object at 0x06129EA0>) , Command count = 394 ] 
14:28:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4E0>, <py_sfcl.CommandDataDefinition object at 0x0612E510>) , Command count = 395 ] 
14:28:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:53: [ SetBusWidth(0x4) , Command count = 396 ] 
14:28:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 397 ] 
14:28:53: Protected Area Size 0x28000
14:28:53: Bus Width           2
14:28:53: Secure Mode         0
14:28:53: Speed  Class        4
14:28:53: Perf Move           0
14:28:53: Au Size             9
14:28:53: Erase Size          15
14:28:53: Erase Timeout       1
14:28:53: Erase offset        1
14:28:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 398 ] 
14:28:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:53: Host Frequency set to 100000 KHz
14:28:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:53: ####CSD Registe 2.0 Values####
14:28:53: CSD_STRUCTURE                                 :0x1
14:28:53: Reserv1                                       :0x0
14:28:53: Time Access 1 TAAC                            :0xe
14:28:53: Time Access 2 NSAC*100                        :0x0
14:28:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:53: Card Command Classess CCC                     :0x5b5
14:28:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:53: DSR(driver stage register)  DSR_IMP           :0x0
14:28:53: Reserv2                                       :0x0
14:28:53: Device Size C_SIZE                            :0xedc8
14:28:53: Reserv3                                       :0x0
14:28:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:53: Reserv4                                       :0x0
14:28:53: Write Speed Factor R2W_FACTOR                 :0x2
14:28:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:53: FILE_FORMAT_GRP                               :0x0
14:28:53: COPY flag                                     :0x1
14:28:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:53: File_Format                                   :0x0
14:28:53: CRC                                           :0x0
14:28:53: ####CSD Registe Values####  

14:28:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB70>, <py_sfcl.CommandDataDefinition object at 0x0612E990>) , Command count = 399 ] 
14:28:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA80>, <py_sfcl.CommandDataDefinition object at 0x0612E8A0>) , Command count = 400 ] 
14:28:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71836 to EndLba:0x3B718B6 with One's Pattern
14:28:53: [ WrLbaNoData(0x3B71836, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 401 ] 
14:28:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71836 to EndLba:0x3B718B6 with One's Pattern 

14:28:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B718B6 to EndLba:0x3B71936 with One's Pattern
14:28:53: [ WrLbaNoData(0x3B718B6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 402 ] 
14:28:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B718B6 to EndLba:0x3B71936 with One's Pattern 

14:28:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23175 to EndLba:0x25153 with Constant Pattern
14:28:53: [ RdLbaNoData(0x23175, 0x1FDE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 403 ] 
14:28:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23175 to EndLba:0x25153 with Constant Pattern 

14:28:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4077
14:28:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EA20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EBD0>, <py_sfcl.PySEnhancedCmdData object at 0x0612EB10>, <None>) , Command count = 404 ] 
14:28:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:55: Host Frequency set to 25000 KHz
14:28:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E5A0>, 0x0, True) , Command count = 405 ] 
14:28:55: [GO18_globalSetVolt]### Host voltage value is set.
14:28:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F8D0>, 0x0, False) , Command count = 406 ] 
14:28:55: [GO18_globalSetVolt]### Host voltage value is set.
14:28:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 407 ] 
14:28:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 408 ] 
14:28:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 409 ] 
14:28:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x0612EEA0>) , Command count = 410 ] 
14:28:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF00>, <py_sfcl.CommandDataDefinition object at 0x0612E720>) , Command count = 411 ] 
14:28:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:55: [ SetCardRCA(0x1, 0xD555) , Command count = 412 ] 
14:28:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:55: Host Frequency set to 25000 KHz
14:28:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:55: ####CSD Registe 2.0 Values####
14:28:55: CSD_STRUCTURE                                 :0x1
14:28:55: Reserv1                                       :0x0
14:28:55: Time Access 1 TAAC                            :0xe
14:28:55: Time Access 2 NSAC*100                        :0x0
14:28:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:55: Card Command Classess CCC                     :0x5b5
14:28:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:55: DSR(driver stage register)  DSR_IMP           :0x0
14:28:55: Reserv2                                       :0x0
14:28:55: Device Size C_SIZE                            :0xedc8
14:28:55: Reserv3                                       :0x0
14:28:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:55: Reserv4                                       :0x0
14:28:55: Write Speed Factor R2W_FACTOR                 :0x2
14:28:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:55: FILE_FORMAT_GRP                               :0x0
14:28:55: COPY flag                                     :0x1
14:28:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:55: File_Format                                   :0x0
14:28:55: CRC                                           :0x0
14:28:55: ####CSD Registe Values####  

14:28:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:55: [GetSCRRegisterEntry] Passed
14:28:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:55: Data_Status_After Erases          : 0
14:28:55: CPRM Security Support             : No Security
14:28:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:55: Spec. Version                     : Version 3.0X
14:28:55: Extended Security Support         : Extended_Security_Not_Supported
14:28:55: Command Support                   : COMMAND_SUPPORT
14:28:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF30>, <py_sfcl.CommandDataDefinition object at 0x0613FE10>) , Command count = 413 ] 
14:28:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC00>, <py_sfcl.CommandDataDefinition object at 0x0612EC30>) , Command count = 414 ] 
14:28:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:55: [ SetBusWidth(0x4) , Command count = 415 ] 
14:28:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061320C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 416 ] 
14:28:55: Protected Area Size 0x28000
14:28:55: Bus Width           2
14:28:55: Secure Mode         0
14:28:55: Speed  Class        4
14:28:55: Perf Move           0
14:28:55: Au Size             9
14:28:55: Erase Size          15
14:28:55: Erase Timeout       1
14:28:55: Erase offset        1
14:28:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 417 ] 
14:28:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:56: Host Frequency set to 100000 KHz
14:28:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:56: ####CSD Registe 2.0 Values####
14:28:56: CSD_STRUCTURE                                 :0x1
14:28:56: Reserv1                                       :0x0
14:28:56: Time Access 1 TAAC                            :0xe
14:28:56: Time Access 2 NSAC*100                        :0x0
14:28:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:56: Card Command Classess CCC                     :0x5b5
14:28:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:56: DSR(driver stage register)  DSR_IMP           :0x0
14:28:56: Reserv2                                       :0x0
14:28:56: Device Size C_SIZE                            :0xedc8
14:28:56: Reserv3                                       :0x0
14:28:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:56: Reserv4                                       :0x0
14:28:56: Write Speed Factor R2W_FACTOR                 :0x2
14:28:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:56: FILE_FORMAT_GRP                               :0x0
14:28:56: COPY flag                                     :0x1
14:28:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:56: File_Format                                   :0x0
14:28:56: CRC                                           :0x0
14:28:56: ####CSD Registe Values####  

14:28:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322D0>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 418 ] 
14:28:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321E0>, <py_sfcl.CommandDataDefinition object at 0x06132030>) , Command count = 419 ] 
14:28:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FDDB to EndLba:0x3B6FE5B with One's Pattern
14:28:56: [ WrLbaNoData(0x3B6FDDB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 420 ] 
14:28:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FDDB to EndLba:0x3B6FE5B with One's Pattern 

14:28:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FE5B to EndLba:0x3B6FEDB with One's Pattern
14:28:56: [ WrLbaNoData(0x3B6FE5B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 421 ] 
14:28:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FE5B to EndLba:0x3B6FEDB with One's Pattern 

14:28:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23175 to EndLba:0x25151 with Constant Pattern
14:28:56: [ RdLbaNoData(0x23175, 0x1FDC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 422 ] 
14:28:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23175 to EndLba:0x25151 with Constant Pattern 

14:28:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4076
14:28:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132330>, <py_sfcl.PySEnhancedCmdData object at 0x06132270>, <None>) , Command count = 423 ] 
14:28:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:28:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:58: Host Frequency set to 25000 KHz
14:28:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:28:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:28:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612ECC0>, 0x0, True) , Command count = 424 ] 
14:28:58: [GO18_globalSetVolt]### Host voltage value is set.
14:28:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:28:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x061323F0>, 0x0, False) , Command count = 425 ] 
14:28:58: [GO18_globalSetVolt]### Host voltage value is set.
14:28:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 426 ] 
14:28:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:28:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 427 ] 
14:28:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:28:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:28:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:28:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:28:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:28:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 428 ] 
14:28:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:28:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:28:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132750>, <py_sfcl.CommandDataDefinition object at 0x061325D0>) , Command count = 429 ] 
14:28:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:28:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132630>, <py_sfcl.CommandDataDefinition object at 0x0612EE70>) , Command count = 430 ] 
14:28:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:28:58: [ SetCardRCA(0x1, 0xD555) , Command count = 431 ] 
14:28:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:28:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:28:58: Host Frequency set to 25000 KHz
14:28:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:28:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:58: ####CSD Registe 2.0 Values####
14:28:58: CSD_STRUCTURE                                 :0x1
14:28:58: Reserv1                                       :0x0
14:28:58: Time Access 1 TAAC                            :0xe
14:28:58: Time Access 2 NSAC*100                        :0x0
14:28:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:28:58: Card Command Classess CCC                     :0x5b5
14:28:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:58: DSR(driver stage register)  DSR_IMP           :0x0
14:28:58: Reserv2                                       :0x0
14:28:58: Device Size C_SIZE                            :0xedc8
14:28:58: Reserv3                                       :0x0
14:28:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:58: Reserv4                                       :0x0
14:28:58: Write Speed Factor R2W_FACTOR                 :0x2
14:28:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:58: FILE_FORMAT_GRP                               :0x0
14:28:58: COPY flag                                     :0x1
14:28:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:58: File_Format                                   :0x0
14:28:58: CRC                                           :0x0
14:28:58: ####CSD Registe Values####  

14:28:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:28:58: [GetSCRRegisterEntry] Passed
14:28:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:28:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:28:58: Data_Status_After Erases          : 0
14:28:58: CPRM Security Support             : No Security
14:28:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:28:58: Spec. Version                     : Version 3.0X
14:28:58: Extended Security Support         : Extended_Security_Not_Supported
14:28:58: Command Support                   : COMMAND_SUPPORT
14:28:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:28:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x0612ED20>) , Command count = 432 ] 
14:28:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:28:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132360>, <py_sfcl.CommandDataDefinition object at 0x06132390>) , Command count = 433 ] 
14:28:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:28:58: [ SetBusWidth(0x4) , Command count = 434 ] 
14:28:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:28:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 435 ] 
14:28:58: Protected Area Size 0x28000
14:28:58: Bus Width           2
14:28:58: Secure Mode         0
14:28:58: Speed  Class        4
14:28:58: Perf Move           0
14:28:58: Au Size             9
14:28:58: Erase Size          15
14:28:58: Erase Timeout       1
14:28:58: Erase offset        1
14:28:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:28:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:28:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:28:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 436 ] 
14:28:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:28:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:28:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:28:58: Host Frequency set to 100000 KHz
14:28:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:28:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:28:58: ####CSD Registe 2.0 Values####
14:28:58: CSD_STRUCTURE                                 :0x1
14:28:58: Reserv1                                       :0x0
14:28:58: Time Access 1 TAAC                            :0xe
14:28:58: Time Access 2 NSAC*100                        :0x0
14:28:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:28:58: Card Command Classess CCC                     :0x5b5
14:28:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:28:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:28:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:28:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:28:58: DSR(driver stage register)  DSR_IMP           :0x0
14:28:58: Reserv2                                       :0x0
14:28:58: Device Size C_SIZE                            :0xedc8
14:28:58: Reserv3                                       :0x0
14:28:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:28:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:28:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:28:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:28:58: Reserv4                                       :0x0
14:28:58: Write Speed Factor R2W_FACTOR                 :0x2
14:28:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:28:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:28:58: FILE_FORMAT_GRP                               :0x0
14:28:58: COPY flag                                     :0x1
14:28:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:28:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:28:58: File_Format                                   :0x0
14:28:58: CRC                                           :0x0
14:28:58: ####CSD Registe Values####  

14:28:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329F0>, <py_sfcl.CommandDataDefinition object at 0x06132810>) , Command count = 437 ] 
14:28:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:28:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 438 ] 
14:28:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:28:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:28:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:28:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F0AB to EndLba:0x3B6F12B with One's Pattern
14:28:58: [ WrLbaNoData(0x3B6F0AB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 439 ] 
14:28:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F0AB to EndLba:0x3B6F12B with One's Pattern 

14:28:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F12B to EndLba:0x3B6F1AB with One's Pattern
14:28:58: [ WrLbaNoData(0x3B6F12B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 440 ] 
14:28:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F12B to EndLba:0x3B6F1AB with One's Pattern 

14:28:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:28:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23177 to EndLba:0x25151 with Constant Pattern
14:28:59: [ RdLbaNoData(0x23177, 0x1FDA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 441 ] 
14:28:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23177 to EndLba:0x25151 with Constant Pattern 

14:28:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4075
14:28:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:28:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061328A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132A50>, <py_sfcl.PySEnhancedCmdData object at 0x06132990>, <None>) , Command count = 442 ] 
14:28:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:28:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:01: Host Frequency set to 25000 KHz
14:29:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132420>, 0x0, True) , Command count = 443 ] 
14:29:01: [GO18_globalSetVolt]### Host voltage value is set.
14:29:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132B10>, 0x0, False) , Command count = 444 ] 
14:29:01: [GO18_globalSetVolt]### Host voltage value is set.
14:29:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 445 ] 
14:29:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 446 ] 
14:29:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 447 ] 
14:29:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x06132CF0>) , Command count = 448 ] 
14:29:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D50>, <py_sfcl.CommandDataDefinition object at 0x061325A0>) , Command count = 449 ] 
14:29:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:01: [ SetCardRCA(0x1, 0xD555) , Command count = 450 ] 
14:29:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:01: Host Frequency set to 25000 KHz
14:29:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:01: ####CSD Registe 2.0 Values####
14:29:01: CSD_STRUCTURE                                 :0x1
14:29:01: Reserv1                                       :0x0
14:29:01: Time Access 1 TAAC                            :0xe
14:29:01: Time Access 2 NSAC*100                        :0x0
14:29:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:01: Card Command Classess CCC                     :0x5b5
14:29:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:01: DSR(driver stage register)  DSR_IMP           :0x0
14:29:01: Reserv2                                       :0x0
14:29:01: Device Size C_SIZE                            :0xedc8
14:29:01: Reserv3                                       :0x0
14:29:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:01: Reserv4                                       :0x0
14:29:01: Write Speed Factor R2W_FACTOR                 :0x2
14:29:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:01: FILE_FORMAT_GRP                               :0x0
14:29:01: COPY flag                                     :0x1
14:29:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:01: File_Format                                   :0x0
14:29:01: CRC                                           :0x0
14:29:01: ####CSD Registe Values####  

14:29:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:01: [GetSCRRegisterEntry] Passed
14:29:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:01: Data_Status_After Erases          : 0
14:29:01: CPRM Security Support             : No Security
14:29:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:01: Spec. Version                     : Version 3.0X
14:29:01: Extended Security Support         : Extended_Security_Not_Supported
14:29:01: Command Support                   : COMMAND_SUPPORT
14:29:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D80>, <py_sfcl.CommandDataDefinition object at 0x0613FF60>) , Command count = 451 ] 
14:29:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x06132AB0>) , Command count = 452 ] 
14:29:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:01: [ SetBusWidth(0x4) , Command count = 453 ] 
14:29:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 454 ] 
14:29:01: Protected Area Size 0x28000
14:29:01: Bus Width           2
14:29:01: Secure Mode         0
14:29:01: Speed  Class        4
14:29:01: Perf Move           0
14:29:01: Au Size             9
14:29:01: Erase Size          15
14:29:01: Erase Timeout       1
14:29:01: Erase offset        1
14:29:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 455 ] 
14:29:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:01: Host Frequency set to 100000 KHz
14:29:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:01: ####CSD Registe 2.0 Values####
14:29:01: CSD_STRUCTURE                                 :0x1
14:29:01: Reserv1                                       :0x0
14:29:01: Time Access 1 TAAC                            :0xe
14:29:01: Time Access 2 NSAC*100                        :0x0
14:29:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:01: Card Command Classess CCC                     :0x5b5
14:29:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:01: DSR(driver stage register)  DSR_IMP           :0x0
14:29:01: Reserv2                                       :0x0
14:29:01: Device Size C_SIZE                            :0xedc8
14:29:01: Reserv3                                       :0x0
14:29:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:01: Reserv4                                       :0x0
14:29:01: Write Speed Factor R2W_FACTOR                 :0x2
14:29:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:01: FILE_FORMAT_GRP                               :0x0
14:29:01: COPY flag                                     :0x1
14:29:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:01: File_Format                                   :0x0
14:29:01: CRC                                           :0x0
14:29:01: ####CSD Registe Values####  

14:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138060>, <py_sfcl.CommandDataDefinition object at 0x06132F30>) , Command count = 456 ] 
14:29:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138090>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 457 ] 
14:29:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FBF1 to EndLba:0x3B6FC71 with One's Pattern
14:29:01: [ WrLbaNoData(0x3B6FBF1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 458 ] 
14:29:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FBF1 to EndLba:0x3B6FC71 with One's Pattern 

14:29:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FC71 to EndLba:0x3B6FCF1 with One's Pattern
14:29:01: [ WrLbaNoData(0x3B6FC71, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 459 ] 
14:29:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FC71 to EndLba:0x3B6FCF1 with One's Pattern 

14:29:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23177 to EndLba:0x2514F with Constant Pattern
14:29:01: [ RdLbaNoData(0x23177, 0x1FD8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 460 ] 
14:29:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23177 to EndLba:0x2514F with Constant Pattern 

14:29:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4074
14:29:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138180>, <py_sfcl.PySEnhancedCmdData object at 0x06138240>, <None>) , Command count = 461 ] 
14:29:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:04: Host Frequency set to 25000 KHz
14:29:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132B40>, 0x0, True) , Command count = 462 ] 
14:29:04: [GO18_globalSetVolt]### Host voltage value is set.
14:29:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138270>, 0x0, False) , Command count = 463 ] 
14:29:04: [GO18_globalSetVolt]### Host voltage value is set.
14:29:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 464 ] 
14:29:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 465 ] 
14:29:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 466 ] 
14:29:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x06138450>) , Command count = 467 ] 
14:29:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061384B0>, <py_sfcl.CommandDataDefinition object at 0x06132C60>) , Command count = 468 ] 
14:29:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:04: [ SetCardRCA(0x1, 0xD555) , Command count = 469 ] 
14:29:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:04: Host Frequency set to 25000 KHz
14:29:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:04: ####CSD Registe 2.0 Values####
14:29:04: CSD_STRUCTURE                                 :0x1
14:29:04: Reserv1                                       :0x0
14:29:04: Time Access 1 TAAC                            :0xe
14:29:04: Time Access 2 NSAC*100                        :0x0
14:29:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:04: Card Command Classess CCC                     :0x5b5
14:29:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:04: DSR(driver stage register)  DSR_IMP           :0x0
14:29:04: Reserv2                                       :0x0
14:29:04: Device Size C_SIZE                            :0xedc8
14:29:04: Reserv3                                       :0x0
14:29:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:04: Reserv4                                       :0x0
14:29:04: Write Speed Factor R2W_FACTOR                 :0x2
14:29:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:04: FILE_FORMAT_GRP                               :0x0
14:29:04: COPY flag                                     :0x1
14:29:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:04: File_Format                                   :0x0
14:29:04: CRC                                           :0x0
14:29:04: ####CSD Registe Values####  

14:29:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:04: [GetSCRRegisterEntry] Passed
14:29:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:04: Data_Status_After Erases          : 0
14:29:04: CPRM Security Support             : No Security
14:29:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:04: Spec. Version                     : Version 3.0X
14:29:04: Extended Security Support         : Extended_Security_Not_Supported
14:29:04: Command Support                   : COMMAND_SUPPORT
14:29:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061384E0>, <py_sfcl.CommandDataDefinition object at 0x06132F90>) , Command count = 470 ] 
14:29:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 471 ] 
14:29:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:04: [ SetBusWidth(0x4) , Command count = 472 ] 
14:29:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 473 ] 
14:29:04: Protected Area Size 0x28000
14:29:04: Bus Width           2
14:29:04: Secure Mode         0
14:29:04: Speed  Class        4
14:29:04: Perf Move           0
14:29:04: Au Size             9
14:29:04: Erase Size          15
14:29:04: Erase Timeout       1
14:29:04: Erase offset        1
14:29:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 474 ] 
14:29:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:04: Host Frequency set to 100000 KHz
14:29:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:04: ####CSD Registe 2.0 Values####
14:29:04: CSD_STRUCTURE                                 :0x1
14:29:04: Reserv1                                       :0x0
14:29:04: Time Access 1 TAAC                            :0xe
14:29:04: Time Access 2 NSAC*100                        :0x0
14:29:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:04: Card Command Classess CCC                     :0x5b5
14:29:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:04: DSR(driver stage register)  DSR_IMP           :0x0
14:29:04: Reserv2                                       :0x0
14:29:04: Device Size C_SIZE                            :0xedc8
14:29:04: Reserv3                                       :0x0
14:29:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:04: Reserv4                                       :0x0
14:29:04: Write Speed Factor R2W_FACTOR                 :0x2
14:29:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:04: FILE_FORMAT_GRP                               :0x0
14:29:04: COPY flag                                     :0x1
14:29:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:04: File_Format                                   :0x0
14:29:04: CRC                                           :0x0
14:29:04: ####CSD Registe Values####  

14:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138870>, <py_sfcl.CommandDataDefinition object at 0x06138690>) , Command count = 475 ] 
14:29:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138780>, <py_sfcl.CommandDataDefinition object at 0x061385A0>) , Command count = 476 ] 
14:29:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71D41 to EndLba:0x3B71DC1 with One's Pattern
14:29:04: [ WrLbaNoData(0x3B71D41, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 477 ] 
14:29:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71D41 to EndLba:0x3B71DC1 with One's Pattern 

14:29:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71DC1 to EndLba:0x3B71E41 with One's Pattern
14:29:04: [ WrLbaNoData(0x3B71DC1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 478 ] 
14:29:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71DC1 to EndLba:0x3B71E41 with One's Pattern 

14:29:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23179 to EndLba:0x2514F with Constant Pattern
14:29:04: [ RdLbaNoData(0x23179, 0x1FD6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 479 ] 
14:29:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23179 to EndLba:0x2514F with Constant Pattern 

14:29:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4073
14:29:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138A80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061388A0>, <py_sfcl.PySEnhancedCmdData object at 0x06138960>, <None>) , Command count = 480 ] 
14:29:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:06: Host Frequency set to 25000 KHz
14:29:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061382A0>, 0x0, True) , Command count = 481 ] 
14:29:07: [GO18_globalSetVolt]### Host voltage value is set.
14:29:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138990>, 0x0, False) , Command count = 482 ] 
14:29:07: [GO18_globalSetVolt]### Host voltage value is set.
14:29:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 483 ] 
14:29:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 484 ] 
14:29:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 485 ] 
14:29:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x06138B70>) , Command count = 486 ] 
14:29:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BD0>, <py_sfcl.CommandDataDefinition object at 0x06138420>) , Command count = 487 ] 
14:29:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:07: [ SetCardRCA(0x1, 0xD555) , Command count = 488 ] 
14:29:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:07: Host Frequency set to 25000 KHz
14:29:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:07: ####CSD Registe 2.0 Values####
14:29:07: CSD_STRUCTURE                                 :0x1
14:29:07: Reserv1                                       :0x0
14:29:07: Time Access 1 TAAC                            :0xe
14:29:07: Time Access 2 NSAC*100                        :0x0
14:29:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:07: Card Command Classess CCC                     :0x5b5
14:29:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:07: DSR(driver stage register)  DSR_IMP           :0x0
14:29:07: Reserv2                                       :0x0
14:29:07: Device Size C_SIZE                            :0xedc8
14:29:07: Reserv3                                       :0x0
14:29:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:07: Reserv4                                       :0x0
14:29:07: Write Speed Factor R2W_FACTOR                 :0x2
14:29:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:07: FILE_FORMAT_GRP                               :0x0
14:29:07: COPY flag                                     :0x1
14:29:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:07: File_Format                                   :0x0
14:29:07: CRC                                           :0x0
14:29:07: ####CSD Registe Values####  

14:29:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:07: [GetSCRRegisterEntry] Passed
14:29:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:07: Data_Status_After Erases          : 0
14:29:07: CPRM Security Support             : No Security
14:29:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:07: Spec. Version                     : Version 3.0X
14:29:07: Extended Security Support         : Extended_Security_Not_Supported
14:29:07: Command Support                   : COMMAND_SUPPORT
14:29:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C00>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 489 ] 
14:29:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138900>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 490 ] 
14:29:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:07: [ SetBusWidth(0x4) , Command count = 491 ] 
14:29:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 492 ] 
14:29:07: Protected Area Size 0x28000
14:29:07: Bus Width           2
14:29:07: Secure Mode         0
14:29:07: Speed  Class        4
14:29:07: Perf Move           0
14:29:07: Au Size             9
14:29:07: Erase Size          15
14:29:07: Erase Timeout       1
14:29:07: Erase offset        1
14:29:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 493 ] 
14:29:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:07: Host Frequency set to 100000 KHz
14:29:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:07: ####CSD Registe 2.0 Values####
14:29:07: CSD_STRUCTURE                                 :0x1
14:29:07: Reserv1                                       :0x0
14:29:07: Time Access 1 TAAC                            :0xe
14:29:07: Time Access 2 NSAC*100                        :0x0
14:29:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:07: Card Command Classess CCC                     :0x5b5
14:29:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:07: DSR(driver stage register)  DSR_IMP           :0x0
14:29:07: Reserv2                                       :0x0
14:29:07: Device Size C_SIZE                            :0xedc8
14:29:07: Reserv3                                       :0x0
14:29:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:07: Reserv4                                       :0x0
14:29:07: Write Speed Factor R2W_FACTOR                 :0x2
14:29:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:07: FILE_FORMAT_GRP                               :0x0
14:29:07: COPY flag                                     :0x1
14:29:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:07: File_Format                                   :0x0
14:29:07: CRC                                           :0x0
14:29:07: ####CSD Registe Values####  

14:29:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F90>, <py_sfcl.CommandDataDefinition object at 0x06138DB0>) , Command count = 494 ] 
14:29:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138EA0>, <py_sfcl.CommandDataDefinition object at 0x06138CC0>) , Command count = 495 ] 
14:29:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F5BF to EndLba:0x3B6F63F with One's Pattern
14:29:07: [ WrLbaNoData(0x3B6F5BF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 496 ] 
14:29:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F5BF to EndLba:0x3B6F63F with One's Pattern 

14:29:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F63F to EndLba:0x3B6F6BF with One's Pattern
14:29:07: [ WrLbaNoData(0x3B6F63F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 497 ] 
14:29:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F63F to EndLba:0x3B6F6BF with One's Pattern 

14:29:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23179 to EndLba:0x2514D with Constant Pattern
14:29:07: [ RdLbaNoData(0x23179, 0x1FD4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 498 ] 
14:29:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23179 to EndLba:0x2514D with Constant Pattern 

14:29:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4072
14:29:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138E40>, <py_sfcl.PySEnhancedCmdData object at 0x06138F30>, <None>) , Command count = 499 ] 
14:29:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:09: Host Frequency set to 25000 KHz
14:29:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x061389C0>, 0x0, True) , Command count = 500 ] 
14:29:09: [GO18_globalSetVolt]### Host voltage value is set.
14:29:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F0F0>, 0x0, False) , Command count = 501 ] 
14:29:09: [GO18_globalSetVolt]### Host voltage value is set.
14:29:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 502 ] 
14:29:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 503 ] 
14:29:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 504 ] 
14:29:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A20>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 505 ] 
14:29:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E030>, <py_sfcl.CommandDataDefinition object at 0x0613F420>) , Command count = 506 ] 
14:29:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:10: [ SetCardRCA(0x1, 0xD555) , Command count = 507 ] 
14:29:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:10: Host Frequency set to 25000 KHz
14:29:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:10: ####CSD Registe 2.0 Values####
14:29:10: CSD_STRUCTURE                                 :0x1
14:29:10: Reserv1                                       :0x0
14:29:10: Time Access 1 TAAC                            :0xe
14:29:10: Time Access 2 NSAC*100                        :0x0
14:29:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:10: Card Command Classess CCC                     :0x5b5
14:29:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:10: DSR(driver stage register)  DSR_IMP           :0x0
14:29:10: Reserv2                                       :0x0
14:29:10: Device Size C_SIZE                            :0xedc8
14:29:10: Reserv3                                       :0x0
14:29:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:10: Reserv4                                       :0x0
14:29:10: Write Speed Factor R2W_FACTOR                 :0x2
14:29:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:10: FILE_FORMAT_GRP                               :0x0
14:29:10: COPY flag                                     :0x1
14:29:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:10: File_Format                                   :0x0
14:29:10: CRC                                           :0x0
14:29:10: ####CSD Registe Values####  

14:29:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:10: [GetSCRRegisterEntry] Passed
14:29:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:10: Data_Status_After Erases          : 0
14:29:10: CPRM Security Support             : No Security
14:29:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:10: Spec. Version                     : Version 3.0X
14:29:10: Extended Security Support         : Extended_Security_Not_Supported
14:29:10: Command Support                   : COMMAND_SUPPORT
14:29:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052A2420>, <py_sfcl.CommandDataDefinition object at 0x0613F030>) , Command count = 508 ] 
14:29:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x0613F090>) , Command count = 509 ] 
14:29:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:10: [ SetBusWidth(0x4) , Command count = 510 ] 
14:29:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0525E180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 511 ] 
14:29:10: Protected Area Size 0x28000
14:29:10: Bus Width           2
14:29:10: Secure Mode         0
14:29:10: Speed  Class        4
14:29:10: Perf Move           0
14:29:10: Au Size             9
14:29:10: Erase Size          15
14:29:10: Erase Timeout       1
14:29:10: Erase offset        1
14:29:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 512 ] 
14:29:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:10: Host Frequency set to 100000 KHz
14:29:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:10: ####CSD Registe 2.0 Values####
14:29:10: CSD_STRUCTURE                                 :0x1
14:29:10: Reserv1                                       :0x0
14:29:10: Time Access 1 TAAC                            :0xe
14:29:10: Time Access 2 NSAC*100                        :0x0
14:29:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:10: Card Command Classess CCC                     :0x5b5
14:29:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:10: DSR(driver stage register)  DSR_IMP           :0x0
14:29:10: Reserv2                                       :0x0
14:29:10: Device Size C_SIZE                            :0xedc8
14:29:10: Reserv3                                       :0x0
14:29:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:10: Reserv4                                       :0x0
14:29:10: Write Speed Factor R2W_FACTOR                 :0x2
14:29:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:10: FILE_FORMAT_GRP                               :0x0
14:29:10: COPY flag                                     :0x1
14:29:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:10: File_Format                                   :0x0
14:29:10: CRC                                           :0x0
14:29:10: ####CSD Registe Values####  

14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1E0>, <py_sfcl.CommandDataDefinition object at 0x052AF120>) , Command count = 513 ] 
14:29:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x0613F510>) , Command count = 514 ] 
14:29:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F474 to EndLba:0x3B6F4F4 with One's Pattern
14:29:10: [ WrLbaNoData(0x3B6F474, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 515 ] 
14:29:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F474 to EndLba:0x3B6F4F4 with One's Pattern 

14:29:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F4F4 to EndLba:0x3B6F574 with One's Pattern
14:29:10: [ WrLbaNoData(0x3B6F4F4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 516 ] 
14:29:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F4F4 to EndLba:0x3B6F574 with One's Pattern 

14:29:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2317B to EndLba:0x2514D with Constant Pattern
14:29:10: [ RdLbaNoData(0x2317B, 0x1FD2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 517 ] 
14:29:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2317B to EndLba:0x2514D with Constant Pattern 

14:29:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4071
14:29:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0518AE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F630>, <py_sfcl.PySEnhancedCmdData object at 0x0613F4B0>, <None>) , Command count = 518 ] 
14:29:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:12: Host Frequency set to 25000 KHz
14:29:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF30>, 0x0, True) , Command count = 519 ] 
14:29:12: [GO18_globalSetVolt]### Host voltage value is set.
14:29:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFC60>, 0x0, False) , Command count = 520 ] 
14:29:12: [GO18_globalSetVolt]### Host voltage value is set.
14:29:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 521 ] 
14:29:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 522 ] 
14:29:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 523 ] 
14:29:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x0613F5A0>) , Command count = 524 ] 
14:29:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x0613F1B0>) , Command count = 525 ] 
14:29:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:12: [ SetCardRCA(0x1, 0xD555) , Command count = 526 ] 
14:29:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:13: Host Frequency set to 25000 KHz
14:29:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:13: ####CSD Registe 2.0 Values####
14:29:13: CSD_STRUCTURE                                 :0x1
14:29:13: Reserv1                                       :0x0
14:29:13: Time Access 1 TAAC                            :0xe
14:29:13: Time Access 2 NSAC*100                        :0x0
14:29:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:13: Card Command Classess CCC                     :0x5b5
14:29:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:13: DSR(driver stage register)  DSR_IMP           :0x0
14:29:13: Reserv2                                       :0x0
14:29:13: Device Size C_SIZE                            :0xedc8
14:29:13: Reserv3                                       :0x0
14:29:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:13: Reserv4                                       :0x0
14:29:13: Write Speed Factor R2W_FACTOR                 :0x2
14:29:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:13: FILE_FORMAT_GRP                               :0x0
14:29:13: COPY flag                                     :0x1
14:29:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:13: File_Format                                   :0x0
14:29:13: CRC                                           :0x0
14:29:13: ####CSD Registe Values####  

14:29:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:13: [GetSCRRegisterEntry] Passed
14:29:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:13: Data_Status_After Erases          : 0
14:29:13: CPRM Security Support             : No Security
14:29:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:13: Spec. Version                     : Version 3.0X
14:29:13: Extended Security Support         : Extended_Security_Not_Supported
14:29:13: Command Support                   : COMMAND_SUPPORT
14:29:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB930>, <py_sfcl.CommandDataDefinition object at 0x0613F210>) , Command count = 527 ] 
14:29:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x0613F480>) , Command count = 528 ] 
14:29:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:13: [ SetBusWidth(0x4) , Command count = 529 ] 
14:29:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F5D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 530 ] 
14:29:13: Protected Area Size 0x28000
14:29:13: Bus Width           2
14:29:13: Secure Mode         0
14:29:13: Speed  Class        4
14:29:13: Perf Move           0
14:29:13: Au Size             9
14:29:13: Erase Size          15
14:29:13: Erase Timeout       1
14:29:13: Erase offset        1
14:29:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 531 ] 
14:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:13: Host Frequency set to 100000 KHz
14:29:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:13: ####CSD Registe 2.0 Values####
14:29:13: CSD_STRUCTURE                                 :0x1
14:29:13: Reserv1                                       :0x0
14:29:13: Time Access 1 TAAC                            :0xe
14:29:13: Time Access 2 NSAC*100                        :0x0
14:29:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:13: Card Command Classess CCC                     :0x5b5
14:29:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:13: DSR(driver stage register)  DSR_IMP           :0x0
14:29:13: Reserv2                                       :0x0
14:29:13: Device Size C_SIZE                            :0xedc8
14:29:13: Reserv3                                       :0x0
14:29:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:13: Reserv4                                       :0x0
14:29:13: Write Speed Factor R2W_FACTOR                 :0x2
14:29:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:13: FILE_FORMAT_GRP                               :0x0
14:29:13: COPY flag                                     :0x1
14:29:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:13: File_Format                                   :0x0
14:29:13: CRC                                           :0x0
14:29:13: ####CSD Registe Values####  

14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1CC0>, <py_sfcl.CommandDataDefinition object at 0x052C1C60>) , Command count = 532 ] 
14:29:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 533 ] 
14:29:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71BD9 to EndLba:0x3B71C59 with One's Pattern
14:29:13: [ WrLbaNoData(0x3B71BD9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 534 ] 
14:29:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71BD9 to EndLba:0x3B71C59 with One's Pattern 

14:29:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71C59 to EndLba:0x3B71CD9 with One's Pattern
14:29:13: [ WrLbaNoData(0x3B71C59, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 535 ] 
14:29:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71C59 to EndLba:0x3B71CD9 with One's Pattern 

14:29:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2317B to EndLba:0x2514B with Constant Pattern
14:29:13: [ RdLbaNoData(0x2317B, 0x1FD0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 536 ] 
14:29:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2317B to EndLba:0x2514B with Constant Pattern 

14:29:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4070
14:29:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F9C0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F840>, <None>) , Command count = 537 ] 
14:29:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:15: Host Frequency set to 25000 KHz
14:29:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFF60>, 0x0, True) , Command count = 538 ] 
14:29:15: [GO18_globalSetVolt]### Host voltage value is set.
14:29:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0529B4B0>, 0x0, False) , Command count = 539 ] 
14:29:15: [GO18_globalSetVolt]### Host voltage value is set.
14:29:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 540 ] 
14:29:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 541 ] 
14:29:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 542 ] 
14:29:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x0613F930>) , Command count = 543 ] 
14:29:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x0613F540>) , Command count = 544 ] 
14:29:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:15: [ SetCardRCA(0x1, 0xD555) , Command count = 545 ] 
14:29:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:16: Host Frequency set to 25000 KHz
14:29:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:16: ####CSD Registe 2.0 Values####
14:29:16: CSD_STRUCTURE                                 :0x1
14:29:16: Reserv1                                       :0x0
14:29:16: Time Access 1 TAAC                            :0xe
14:29:16: Time Access 2 NSAC*100                        :0x0
14:29:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:16: Card Command Classess CCC                     :0x5b5
14:29:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:16: DSR(driver stage register)  DSR_IMP           :0x0
14:29:16: Reserv2                                       :0x0
14:29:16: Device Size C_SIZE                            :0xedc8
14:29:16: Reserv3                                       :0x0
14:29:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:16: Reserv4                                       :0x0
14:29:16: Write Speed Factor R2W_FACTOR                 :0x2
14:29:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:16: FILE_FORMAT_GRP                               :0x0
14:29:16: COPY flag                                     :0x1
14:29:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:16: File_Format                                   :0x0
14:29:16: CRC                                           :0x0
14:29:16: ####CSD Registe Values####  

14:29:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:16: [GetSCRRegisterEntry] Passed
14:29:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:16: Data_Status_After Erases          : 0
14:29:16: CPRM Security Support             : No Security
14:29:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:16: Spec. Version                     : Version 3.0X
14:29:16: Extended Security Support         : Extended_Security_Not_Supported
14:29:16: Command Support                   : COMMAND_SUPPORT
14:29:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E38A0>, <py_sfcl.CommandDataDefinition object at 0x0613F600>) , Command count = 546 ] 
14:29:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0613F810>) , Command count = 547 ] 
14:29:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:16: [ SetBusWidth(0x4) , Command count = 548 ] 
14:29:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0606F7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 549 ] 
14:29:16: Protected Area Size 0x28000
14:29:16: Bus Width           2
14:29:16: Secure Mode         0
14:29:16: Speed  Class        4
14:29:16: Perf Move           0
14:29:16: Au Size             9
14:29:16: Erase Size          15
14:29:16: Erase Timeout       1
14:29:16: Erase offset        1
14:29:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 550 ] 
14:29:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:16: Host Frequency set to 100000 KHz
14:29:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:16: ####CSD Registe 2.0 Values####
14:29:16: CSD_STRUCTURE                                 :0x1
14:29:16: Reserv1                                       :0x0
14:29:16: Time Access 1 TAAC                            :0xe
14:29:16: Time Access 2 NSAC*100                        :0x0
14:29:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:16: Card Command Classess CCC                     :0x5b5
14:29:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:16: DSR(driver stage register)  DSR_IMP           :0x0
14:29:16: Reserv2                                       :0x0
14:29:16: Device Size C_SIZE                            :0xedc8
14:29:16: Reserv3                                       :0x0
14:29:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:16: Reserv4                                       :0x0
14:29:16: Write Speed Factor R2W_FACTOR                 :0x2
14:29:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:16: FILE_FORMAT_GRP                               :0x0
14:29:16: COPY flag                                     :0x1
14:29:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:16: File_Format                                   :0x0
14:29:16: CRC                                           :0x0
14:29:16: ####CSD Registe Values####  

14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E38D0>, <py_sfcl.CommandDataDefinition object at 0x0613FE40>) , Command count = 551 ] 
14:29:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39C0>, <py_sfcl.CommandDataDefinition object at 0x0613FA80>) , Command count = 552 ] 
14:29:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70865 to EndLba:0x3B708E5 with One's Pattern
14:29:16: [ WrLbaNoData(0x3B70865, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 553 ] 
14:29:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70865 to EndLba:0x3B708E5 with One's Pattern 

14:29:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B708E5 to EndLba:0x3B70965 with One's Pattern
14:29:16: [ WrLbaNoData(0x3B708E5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 554 ] 
14:29:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B708E5 to EndLba:0x3B70965 with One's Pattern 

14:29:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2317D to EndLba:0x2514B with Constant Pattern
14:29:16: [ RdLbaNoData(0x2317D, 0x1FCE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 555 ] 
14:29:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2317D to EndLba:0x2514B with Constant Pattern 

14:29:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4069
14:29:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3750>, <py_sfcl.PySEnhancedCmdData object at 0x060E3EA0>, <None>) , Command count = 556 ] 
14:29:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:18: Host Frequency set to 25000 KHz
14:29:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F060>, 0x0, True) , Command count = 557 ] 
14:29:18: [GO18_globalSetVolt]### Host voltage value is set.
14:29:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3A50>, 0x0, False) , Command count = 558 ] 
14:29:18: [GO18_globalSetVolt]### Host voltage value is set.
14:29:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 559 ] 
14:29:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 560 ] 
14:29:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 561 ] 
14:29:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1B0>, <py_sfcl.CommandDataDefinition object at 0x0611C240>) , Command count = 562 ] 
14:29:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C3F0>, <py_sfcl.CommandDataDefinition object at 0x060E3AE0>) , Command count = 563 ] 
14:29:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:18: [ SetCardRCA(0x1, 0xD555) , Command count = 564 ] 
14:29:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:18: Host Frequency set to 25000 KHz
14:29:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:18: ####CSD Registe 2.0 Values####
14:29:18: CSD_STRUCTURE                                 :0x1
14:29:18: Reserv1                                       :0x0
14:29:18: Time Access 1 TAAC                            :0xe
14:29:18: Time Access 2 NSAC*100                        :0x0
14:29:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:18: Card Command Classess CCC                     :0x5b5
14:29:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:18: DSR(driver stage register)  DSR_IMP           :0x0
14:29:18: Reserv2                                       :0x0
14:29:18: Device Size C_SIZE                            :0xedc8
14:29:18: Reserv3                                       :0x0
14:29:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:18: Reserv4                                       :0x0
14:29:18: Write Speed Factor R2W_FACTOR                 :0x2
14:29:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:18: FILE_FORMAT_GRP                               :0x0
14:29:18: COPY flag                                     :0x1
14:29:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:18: File_Format                                   :0x0
14:29:18: CRC                                           :0x0
14:29:18: ####CSD Registe Values####  

14:29:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:18: [GetSCRRegisterEntry] Passed
14:29:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:18: Data_Status_After Erases          : 0
14:29:18: CPRM Security Support             : No Security
14:29:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:18: Spec. Version                     : Version 3.0X
14:29:18: Extended Security Support         : Extended_Security_Not_Supported
14:29:18: Command Support                   : COMMAND_SUPPORT
14:29:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3960>, <py_sfcl.CommandDataDefinition object at 0x0613FA50>) , Command count = 565 ] 
14:29:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3D80>, <py_sfcl.CommandDataDefinition object at 0x060E3840>) , Command count = 566 ] 
14:29:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:18: [ SetBusWidth(0x4) , Command count = 567 ] 
14:29:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 568 ] 
14:29:18: Protected Area Size 0x28000
14:29:18: Bus Width           2
14:29:18: Secure Mode         0
14:29:18: Speed  Class        4
14:29:18: Perf Move           0
14:29:18: Au Size             9
14:29:18: Erase Size          15
14:29:18: Erase Timeout       1
14:29:18: Erase offset        1
14:29:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 569 ] 
14:29:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:19: Host Frequency set to 100000 KHz
14:29:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:19: ####CSD Registe 2.0 Values####
14:29:19: CSD_STRUCTURE                                 :0x1
14:29:19: Reserv1                                       :0x0
14:29:19: Time Access 1 TAAC                            :0xe
14:29:19: Time Access 2 NSAC*100                        :0x0
14:29:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:19: Card Command Classess CCC                     :0x5b5
14:29:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:19: DSR(driver stage register)  DSR_IMP           :0x0
14:29:19: Reserv2                                       :0x0
14:29:19: Device Size C_SIZE                            :0xedc8
14:29:19: Reserv3                                       :0x0
14:29:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:19: Reserv4                                       :0x0
14:29:19: Write Speed Factor R2W_FACTOR                 :0x2
14:29:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:19: FILE_FORMAT_GRP                               :0x0
14:29:19: COPY flag                                     :0x1
14:29:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:19: File_Format                                   :0x0
14:29:19: CRC                                           :0x0
14:29:19: ####CSD Registe Values####  

14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CFC0>, <py_sfcl.CommandDataDefinition object at 0x0611CB40>) , Command count = 570 ] 
14:29:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 571 ] 
14:29:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B712D5 to EndLba:0x3B71355 with One's Pattern
14:29:19: [ WrLbaNoData(0x3B712D5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 572 ] 
14:29:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B712D5 to EndLba:0x3B71355 with One's Pattern 

14:29:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71355 to EndLba:0x3B713D5 with One's Pattern
14:29:19: [ WrLbaNoData(0x3B71355, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 573 ] 
14:29:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71355 to EndLba:0x3B713D5 with One's Pattern 

14:29:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2317D to EndLba:0x25149 with Constant Pattern
14:29:19: [ RdLbaNoData(0x2317D, 0x1FCC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 574 ] 
14:29:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2317D to EndLba:0x25149 with Constant Pattern 

14:29:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4068
14:29:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CDE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C930>, <py_sfcl.PySEnhancedCmdData object at 0x0611C9C0>, <None>) , Command count = 575 ] 
14:29:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:21: Host Frequency set to 25000 KHz
14:29:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E34E0>, 0x0, True) , Command count = 576 ] 
14:29:21: [GO18_globalSetVolt]### Host voltage value is set.
14:29:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CC30>, 0x0, False) , Command count = 577 ] 
14:29:21: [GO18_globalSetVolt]### Host voltage value is set.
14:29:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 578 ] 
14:29:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 579 ] 
14:29:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 580 ] 
14:29:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF90>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 581 ] 
14:29:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAE0>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 582 ] 
14:29:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:21: [ SetCardRCA(0x1, 0xD555) , Command count = 583 ] 
14:29:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:21: Host Frequency set to 25000 KHz
14:29:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:21: ####CSD Registe 2.0 Values####
14:29:21: CSD_STRUCTURE                                 :0x1
14:29:21: Reserv1                                       :0x0
14:29:21: Time Access 1 TAAC                            :0xe
14:29:21: Time Access 2 NSAC*100                        :0x0
14:29:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:21: Card Command Classess CCC                     :0x5b5
14:29:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:21: DSR(driver stage register)  DSR_IMP           :0x0
14:29:21: Reserv2                                       :0x0
14:29:21: Device Size C_SIZE                            :0xedc8
14:29:21: Reserv3                                       :0x0
14:29:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:21: Reserv4                                       :0x0
14:29:21: Write Speed Factor R2W_FACTOR                 :0x2
14:29:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:21: FILE_FORMAT_GRP                               :0x0
14:29:21: COPY flag                                     :0x1
14:29:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:21: File_Format                                   :0x0
14:29:21: CRC                                           :0x0
14:29:21: ####CSD Registe Values####  

14:29:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:21: [GetSCRRegisterEntry] Passed
14:29:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:21: Data_Status_After Erases          : 0
14:29:21: CPRM Security Support             : No Security
14:29:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:21: Spec. Version                     : Version 3.0X
14:29:21: Extended Security Support         : Extended_Security_Not_Supported
14:29:21: Command Support                   : COMMAND_SUPPORT
14:29:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3570>, <py_sfcl.CommandDataDefinition object at 0x0611C030>) , Command count = 584 ] 
14:29:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129030>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 585 ] 
14:29:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:21: [ SetBusWidth(0x4) , Command count = 586 ] 
14:29:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 587 ] 
14:29:21: Protected Area Size 0x28000
14:29:21: Bus Width           2
14:29:21: Secure Mode         0
14:29:21: Speed  Class        4
14:29:21: Perf Move           0
14:29:21: Au Size             9
14:29:21: Erase Size          15
14:29:21: Erase Timeout       1
14:29:21: Erase offset        1
14:29:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 588 ] 
14:29:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:21: Host Frequency set to 100000 KHz
14:29:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:21: ####CSD Registe 2.0 Values####
14:29:21: CSD_STRUCTURE                                 :0x1
14:29:21: Reserv1                                       :0x0
14:29:21: Time Access 1 TAAC                            :0xe
14:29:21: Time Access 2 NSAC*100                        :0x0
14:29:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:21: Card Command Classess CCC                     :0x5b5
14:29:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:21: DSR(driver stage register)  DSR_IMP           :0x0
14:29:21: Reserv2                                       :0x0
14:29:21: Device Size C_SIZE                            :0xedc8
14:29:21: Reserv3                                       :0x0
14:29:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:21: Reserv4                                       :0x0
14:29:21: Write Speed Factor R2W_FACTOR                 :0x2
14:29:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:21: FILE_FORMAT_GRP                               :0x0
14:29:21: COPY flag                                     :0x1
14:29:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:21: File_Format                                   :0x0
14:29:21: CRC                                           :0x0
14:29:21: ####CSD Registe Values####  

14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129120>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 589 ] 
14:29:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 590 ] 
14:29:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E51B to EndLba:0x3B6E59B with One's Pattern
14:29:21: [ WrLbaNoData(0x3B6E51B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 591 ] 
14:29:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E51B to EndLba:0x3B6E59B with One's Pattern 

14:29:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E59B to EndLba:0x3B6E61B with One's Pattern
14:29:21: [ WrLbaNoData(0x3B6E59B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 592 ] 
14:29:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E59B to EndLba:0x3B6E61B with One's Pattern 

14:29:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2317F to EndLba:0x25149 with Constant Pattern
14:29:22: [ RdLbaNoData(0x2317F, 0x1FCA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 593 ] 
14:29:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2317F to EndLba:0x25149 with Constant Pattern 

14:29:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4067
14:29:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061294B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061292D0>, <py_sfcl.PySEnhancedCmdData object at 0x06129240>, <None>) , Command count = 594 ] 
14:29:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:24: Host Frequency set to 25000 KHz
14:29:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C990>, 0x0, True) , Command count = 595 ] 
14:29:24: [GO18_globalSetVolt]### Host voltage value is set.
14:29:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C9F0>, 0x0, False) , Command count = 596 ] 
14:29:24: [GO18_globalSetVolt]### Host voltage value is set.
14:29:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 597 ] 
14:29:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 598 ] 
14:29:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 599 ] 
14:29:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x0611CE40>) , Command count = 600 ] 
14:29:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129750>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 601 ] 
14:29:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:24: [ SetCardRCA(0x1, 0xD555) , Command count = 602 ] 
14:29:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:24: Host Frequency set to 25000 KHz
14:29:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:24: ####CSD Registe 2.0 Values####
14:29:24: CSD_STRUCTURE                                 :0x1
14:29:24: Reserv1                                       :0x0
14:29:24: Time Access 1 TAAC                            :0xe
14:29:24: Time Access 2 NSAC*100                        :0x0
14:29:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:24: Card Command Classess CCC                     :0x5b5
14:29:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:24: DSR(driver stage register)  DSR_IMP           :0x0
14:29:24: Reserv2                                       :0x0
14:29:24: Device Size C_SIZE                            :0xedc8
14:29:24: Reserv3                                       :0x0
14:29:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:24: Reserv4                                       :0x0
14:29:24: Write Speed Factor R2W_FACTOR                 :0x2
14:29:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:24: FILE_FORMAT_GRP                               :0x0
14:29:24: COPY flag                                     :0x1
14:29:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:24: File_Format                                   :0x0
14:29:24: CRC                                           :0x0
14:29:24: ####CSD Registe Values####  

14:29:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:24: [GetSCRRegisterEntry] Passed
14:29:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:24: Data_Status_After Erases          : 0
14:29:24: CPRM Security Support             : No Security
14:29:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:24: Spec. Version                     : Version 3.0X
14:29:24: Extended Security Support         : Extended_Security_Not_Supported
14:29:24: Command Support                   : COMMAND_SUPPORT
14:29:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CBA0>, <py_sfcl.CommandDataDefinition object at 0x0611CC00>) , Command count = 603 ] 
14:29:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x061291E0>) , Command count = 604 ] 
14:29:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:24: [ SetBusWidth(0x4) , Command count = 605 ] 
14:29:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 606 ] 
14:29:24: Protected Area Size 0x28000
14:29:24: Bus Width           2
14:29:24: Secure Mode         0
14:29:24: Speed  Class        4
14:29:24: Perf Move           0
14:29:24: Au Size             9
14:29:24: Erase Size          15
14:29:24: Erase Timeout       1
14:29:24: Erase offset        1
14:29:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 607 ] 
14:29:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:24: Host Frequency set to 100000 KHz
14:29:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:24: ####CSD Registe 2.0 Values####
14:29:24: CSD_STRUCTURE                                 :0x1
14:29:24: Reserv1                                       :0x0
14:29:24: Time Access 1 TAAC                            :0xe
14:29:24: Time Access 2 NSAC*100                        :0x0
14:29:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:24: Card Command Classess CCC                     :0x5b5
14:29:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:24: DSR(driver stage register)  DSR_IMP           :0x0
14:29:24: Reserv2                                       :0x0
14:29:24: Device Size C_SIZE                            :0xedc8
14:29:24: Reserv3                                       :0x0
14:29:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:24: Reserv4                                       :0x0
14:29:24: Write Speed Factor R2W_FACTOR                 :0x2
14:29:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:24: FILE_FORMAT_GRP                               :0x0
14:29:24: COPY flag                                     :0x1
14:29:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:24: File_Format                                   :0x0
14:29:24: CRC                                           :0x0
14:29:24: ####CSD Registe Values####  

14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129930>, <py_sfcl.CommandDataDefinition object at 0x06129300>) , Command count = 608 ] 
14:29:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 609 ] 
14:29:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B722C7 to EndLba:0x3B72347 with One's Pattern
14:29:24: [ WrLbaNoData(0x3B722C7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 610 ] 
14:29:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B722C7 to EndLba:0x3B72347 with One's Pattern 

14:29:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72347 to EndLba:0x3B723C7 with One's Pattern
14:29:24: [ WrLbaNoData(0x3B72347, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 611 ] 
14:29:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72347 to EndLba:0x3B723C7 with One's Pattern 

14:29:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2317F to EndLba:0x25147 with Constant Pattern
14:29:24: [ RdLbaNoData(0x2317F, 0x1FC8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 612 ] 
14:29:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2317F to EndLba:0x25147 with Constant Pattern 

14:29:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4066
14:29:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129AE0>, <py_sfcl.PySEnhancedCmdData object at 0x06129A50>, <None>) , Command count = 613 ] 
14:29:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:27: Host Frequency set to 25000 KHz
14:29:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129510>, 0x0, True) , Command count = 614 ] 
14:29:27: [GO18_globalSetVolt]### Host voltage value is set.
14:29:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x061293F0>, 0x0, False) , Command count = 615 ] 
14:29:27: [GO18_globalSetVolt]### Host voltage value is set.
14:29:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 616 ] 
14:29:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 617 ] 
14:29:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 618 ] 
14:29:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129660>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 619 ] 
14:29:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129690>, <py_sfcl.CommandDataDefinition object at 0x06129630>) , Command count = 620 ] 
14:29:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:27: [ SetCardRCA(0x1, 0xD555) , Command count = 621 ] 
14:29:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:27: Host Frequency set to 25000 KHz
14:29:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:27: ####CSD Registe 2.0 Values####
14:29:27: CSD_STRUCTURE                                 :0x1
14:29:27: Reserv1                                       :0x0
14:29:27: Time Access 1 TAAC                            :0xe
14:29:27: Time Access 2 NSAC*100                        :0x0
14:29:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:27: Card Command Classess CCC                     :0x5b5
14:29:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:27: DSR(driver stage register)  DSR_IMP           :0x0
14:29:27: Reserv2                                       :0x0
14:29:27: Device Size C_SIZE                            :0xedc8
14:29:27: Reserv3                                       :0x0
14:29:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:27: Reserv4                                       :0x0
14:29:27: Write Speed Factor R2W_FACTOR                 :0x2
14:29:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:27: FILE_FORMAT_GRP                               :0x0
14:29:27: COPY flag                                     :0x1
14:29:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:27: File_Format                                   :0x0
14:29:27: CRC                                           :0x0
14:29:27: ####CSD Registe Values####  

14:29:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:27: [GetSCRRegisterEntry] Passed
14:29:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:27: Data_Status_After Erases          : 0
14:29:27: CPRM Security Support             : No Security
14:29:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:27: Spec. Version                     : Version 3.0X
14:29:27: Extended Security Support         : Extended_Security_Not_Supported
14:29:27: Command Support                   : COMMAND_SUPPORT
14:29:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7E0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 622 ] 
14:29:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BD0>, <py_sfcl.CommandDataDefinition object at 0x061299F0>) , Command count = 623 ] 
14:29:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:27: [ SetBusWidth(0x4) , Command count = 624 ] 
14:29:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 625 ] 
14:29:27: Protected Area Size 0x28000
14:29:27: Bus Width           2
14:29:27: Secure Mode         0
14:29:27: Speed  Class        4
14:29:27: Perf Move           0
14:29:27: Au Size             9
14:29:27: Erase Size          15
14:29:27: Erase Timeout       1
14:29:27: Erase offset        1
14:29:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 626 ] 
14:29:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:27: Host Frequency set to 100000 KHz
14:29:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:27: ####CSD Registe 2.0 Values####
14:29:27: CSD_STRUCTURE                                 :0x1
14:29:27: Reserv1                                       :0x0
14:29:27: Time Access 1 TAAC                            :0xe
14:29:27: Time Access 2 NSAC*100                        :0x0
14:29:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:27: Card Command Classess CCC                     :0x5b5
14:29:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:27: DSR(driver stage register)  DSR_IMP           :0x0
14:29:27: Reserv2                                       :0x0
14:29:27: Device Size C_SIZE                            :0xedc8
14:29:27: Reserv3                                       :0x0
14:29:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:27: Reserv4                                       :0x0
14:29:27: Write Speed Factor R2W_FACTOR                 :0x2
14:29:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:27: FILE_FORMAT_GRP                               :0x0
14:29:27: COPY flag                                     :0x1
14:29:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:27: File_Format                                   :0x0
14:29:27: CRC                                           :0x0
14:29:27: ####CSD Registe Values####  

14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0F0>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 627 ] 
14:29:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E180>, <py_sfcl.CommandDataDefinition object at 0x06129840>) , Command count = 628 ] 
14:29:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B701F2 to EndLba:0x3B70272 with One's Pattern
14:29:27: [ WrLbaNoData(0x3B701F2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 629 ] 
14:29:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B701F2 to EndLba:0x3B70272 with One's Pattern 

14:29:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70272 to EndLba:0x3B702F2 with One's Pattern
14:29:27: [ WrLbaNoData(0x3B70272, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 630 ] 
14:29:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70272 to EndLba:0x3B702F2 with One's Pattern 

14:29:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23181 to EndLba:0x25147 with Constant Pattern
14:29:27: [ RdLbaNoData(0x23181, 0x1FC6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 631 ] 
14:29:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23181 to EndLba:0x25147 with Constant Pattern 

14:29:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4065
14:29:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E270>, <py_sfcl.PySEnhancedCmdData object at 0x0612E2A0>, <None>) , Command count = 632 ] 
14:29:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:29: Host Frequency set to 25000 KHz
14:29:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129CF0>, 0x0, True) , Command count = 633 ] 
14:29:30: [GO18_globalSetVolt]### Host voltage value is set.
14:29:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E3F0>, 0x0, False) , Command count = 634 ] 
14:29:30: [GO18_globalSetVolt]### Host voltage value is set.
14:29:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 635 ] 
14:29:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 636 ] 
14:29:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 637 ] 
14:29:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E40>, <py_sfcl.CommandDataDefinition object at 0x06129B70>) , Command count = 638 ] 
14:29:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E70>, <py_sfcl.CommandDataDefinition object at 0x06129B10>) , Command count = 639 ] 
14:29:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:30: [ SetCardRCA(0x1, 0xD555) , Command count = 640 ] 
14:29:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:30: Host Frequency set to 25000 KHz
14:29:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:30: ####CSD Registe 2.0 Values####
14:29:30: CSD_STRUCTURE                                 :0x1
14:29:30: Reserv1                                       :0x0
14:29:30: Time Access 1 TAAC                            :0xe
14:29:30: Time Access 2 NSAC*100                        :0x0
14:29:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:30: Card Command Classess CCC                     :0x5b5
14:29:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:30: DSR(driver stage register)  DSR_IMP           :0x0
14:29:30: Reserv2                                       :0x0
14:29:30: Device Size C_SIZE                            :0xedc8
14:29:30: Reserv3                                       :0x0
14:29:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:30: Reserv4                                       :0x0
14:29:30: Write Speed Factor R2W_FACTOR                 :0x2
14:29:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:30: FILE_FORMAT_GRP                               :0x0
14:29:30: COPY flag                                     :0x1
14:29:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:30: File_Format                                   :0x0
14:29:30: CRC                                           :0x0
14:29:30: ####CSD Registe Values####  

14:29:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:30: [GetSCRRegisterEntry] Passed
14:29:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:30: Data_Status_After Erases          : 0
14:29:30: CPRM Security Support             : No Security
14:29:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:30: Spec. Version                     : Version 3.0X
14:29:30: Extended Security Support         : Extended_Security_Not_Supported
14:29:30: Command Support                   : COMMAND_SUPPORT
14:29:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E030>, <py_sfcl.CommandDataDefinition object at 0x06129780>) , Command count = 641 ] 
14:29:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x0612E6F0>) , Command count = 642 ] 
14:29:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:30: [ SetBusWidth(0x4) , Command count = 643 ] 
14:29:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 644 ] 
14:29:30: Protected Area Size 0x28000
14:29:30: Bus Width           2
14:29:30: Secure Mode         0
14:29:30: Speed  Class        4
14:29:30: Perf Move           0
14:29:30: Au Size             9
14:29:30: Erase Size          15
14:29:30: Erase Timeout       1
14:29:30: Erase offset        1
14:29:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 645 ] 
14:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:30: Host Frequency set to 100000 KHz
14:29:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:30: ####CSD Registe 2.0 Values####
14:29:30: CSD_STRUCTURE                                 :0x1
14:29:30: Reserv1                                       :0x0
14:29:30: Time Access 1 TAAC                            :0xe
14:29:30: Time Access 2 NSAC*100                        :0x0
14:29:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:30: Card Command Classess CCC                     :0x5b5
14:29:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:30: DSR(driver stage register)  DSR_IMP           :0x0
14:29:30: Reserv2                                       :0x0
14:29:30: Device Size C_SIZE                            :0xedc8
14:29:30: Reserv3                                       :0x0
14:29:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:31: Reserv4                                       :0x0
14:29:31: Write Speed Factor R2W_FACTOR                 :0x2
14:29:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:31: FILE_FORMAT_GRP                               :0x0
14:29:31: COPY flag                                     :0x1
14:29:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:31: File_Format                                   :0x0
14:29:31: CRC                                           :0x0
14:29:31: ####CSD Registe Values####  

14:29:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E7E0>, <py_sfcl.CommandDataDefinition object at 0x0612E840>) , Command count = 646 ] 
14:29:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x06129F90>) , Command count = 647 ] 
14:29:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7015B to EndLba:0x3B701DB with One's Pattern
14:29:31: [ WrLbaNoData(0x3B7015B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 648 ] 
14:29:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7015B to EndLba:0x3B701DB with One's Pattern 

14:29:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B701DB to EndLba:0x3B7025B with One's Pattern
14:29:31: [ WrLbaNoData(0x3B701DB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 649 ] 
14:29:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B701DB to EndLba:0x3B7025B with One's Pattern 

14:29:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23181 to EndLba:0x25145 with Constant Pattern
14:29:31: [ RdLbaNoData(0x23181, 0x1FC4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 650 ] 
14:29:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23181 to EndLba:0x25145 with Constant Pattern 

14:29:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4064
14:29:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EB70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E990>, <py_sfcl.PySEnhancedCmdData object at 0x0612E900>, <None>) , Command count = 651 ] 
14:29:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:33: Host Frequency set to 25000 KHz
14:29:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E420>, 0x0, True) , Command count = 652 ] 
14:29:33: [GO18_globalSetVolt]### Host voltage value is set.
14:29:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E390>, 0x0, False) , Command count = 653 ] 
14:29:33: [GO18_globalSetVolt]### Host voltage value is set.
14:29:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 654 ] 
14:29:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 655 ] 
14:29:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 656 ] 
14:29:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x06129C00>) , Command count = 657 ] 
14:29:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5D0>, <py_sfcl.CommandDataDefinition object at 0x06129B40>) , Command count = 658 ] 
14:29:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:34: [ SetCardRCA(0x1, 0xD555) , Command count = 659 ] 
14:29:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:34: Host Frequency set to 25000 KHz
14:29:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:34: ####CSD Registe 2.0 Values####
14:29:34: CSD_STRUCTURE                                 :0x1
14:29:34: Reserv1                                       :0x0
14:29:34: Time Access 1 TAAC                            :0xe
14:29:34: Time Access 2 NSAC*100                        :0x0
14:29:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:34: Card Command Classess CCC                     :0x5b5
14:29:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:34: DSR(driver stage register)  DSR_IMP           :0x0
14:29:34: Reserv2                                       :0x0
14:29:34: Device Size C_SIZE                            :0xedc8
14:29:34: Reserv3                                       :0x0
14:29:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:34: Reserv4                                       :0x0
14:29:34: Write Speed Factor R2W_FACTOR                 :0x2
14:29:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:34: FILE_FORMAT_GRP                               :0x0
14:29:34: COPY flag                                     :0x1
14:29:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:34: File_Format                                   :0x0
14:29:34: CRC                                           :0x0
14:29:34: ####CSD Registe Values####  

14:29:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:34: [GetSCRRegisterEntry] Passed
14:29:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:34: Data_Status_After Erases          : 0
14:29:34: CPRM Security Support             : No Security
14:29:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:34: Spec. Version                     : Version 3.0X
14:29:34: Extended Security Support         : Extended_Security_Not_Supported
14:29:34: Command Support                   : COMMAND_SUPPORT
14:29:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E690>, <py_sfcl.CommandDataDefinition object at 0x0613FD80>) , Command count = 660 ] 
14:29:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA80>, <py_sfcl.CommandDataDefinition object at 0x0612E8A0>) , Command count = 661 ] 
14:29:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:34: [ SetBusWidth(0x4) , Command count = 662 ] 
14:29:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 663 ] 
14:29:34: Protected Area Size 0x28000
14:29:34: Bus Width           2
14:29:34: Secure Mode         0
14:29:34: Speed  Class        4
14:29:34: Perf Move           0
14:29:34: Au Size             9
14:29:34: Erase Size          15
14:29:34: Erase Timeout       1
14:29:34: Erase offset        1
14:29:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 664 ] 
14:29:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:34: Host Frequency set to 100000 KHz
14:29:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:34: ####CSD Registe 2.0 Values####
14:29:34: CSD_STRUCTURE                                 :0x1
14:29:34: Reserv1                                       :0x0
14:29:34: Time Access 1 TAAC                            :0xe
14:29:34: Time Access 2 NSAC*100                        :0x0
14:29:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:34: Card Command Classess CCC                     :0x5b5
14:29:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:34: DSR(driver stage register)  DSR_IMP           :0x0
14:29:34: Reserv2                                       :0x0
14:29:34: Device Size C_SIZE                            :0xedc8
14:29:34: Reserv3                                       :0x0
14:29:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:34: Reserv4                                       :0x0
14:29:34: Write Speed Factor R2W_FACTOR                 :0x2
14:29:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:34: FILE_FORMAT_GRP                               :0x0
14:29:34: COPY flag                                     :0x1
14:29:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:34: File_Format                                   :0x0
14:29:34: CRC                                           :0x0
14:29:34: ####CSD Registe Values####  

14:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF30>, <py_sfcl.CommandDataDefinition object at 0x0612EF90>) , Command count = 665 ] 
14:29:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x0612E720>) , Command count = 666 ] 
14:29:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E228 to EndLba:0x3B6E2A8 with One's Pattern
14:29:35: [ WrLbaNoData(0x3B6E228, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 667 ] 
14:29:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E228 to EndLba:0x3B6E2A8 with One's Pattern 

14:29:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E2A8 to EndLba:0x3B6E328 with One's Pattern
14:29:35: [ WrLbaNoData(0x3B6E2A8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 668 ] 
14:29:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E2A8 to EndLba:0x3B6E328 with One's Pattern 

14:29:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23183 to EndLba:0x25145 with Constant Pattern
14:29:35: [ RdLbaNoData(0x23183, 0x1FC2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 669 ] 
14:29:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23183 to EndLba:0x25145 with Constant Pattern 

14:29:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4063
14:29:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061322D0>, <py_sfcl.PySEnhancedCmdData object at 0x061320F0>, <None>) , Command count = 670 ] 
14:29:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:37: Host Frequency set to 25000 KHz
14:29:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EB40>, 0x0, True) , Command count = 671 ] 
14:29:37: [GO18_globalSetVolt]### Host voltage value is set.
14:29:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EAB0>, 0x0, False) , Command count = 672 ] 
14:29:37: [GO18_globalSetVolt]### Host voltage value is set.
14:29:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 673 ] 
14:29:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 674 ] 
14:29:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 675 ] 
14:29:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x0612E9C0>) , Command count = 676 ] 
14:29:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECF0>, <py_sfcl.CommandDataDefinition object at 0x0613FB40>) , Command count = 677 ] 
14:29:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:37: [ SetCardRCA(0x1, 0xD555) , Command count = 678 ] 
14:29:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:38: Host Frequency set to 25000 KHz
14:29:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:38: ####CSD Registe 2.0 Values####
14:29:38: CSD_STRUCTURE                                 :0x1
14:29:38: Reserv1                                       :0x0
14:29:38: Time Access 1 TAAC                            :0xe
14:29:38: Time Access 2 NSAC*100                        :0x0
14:29:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:38: Card Command Classess CCC                     :0x5b5
14:29:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:38: DSR(driver stage register)  DSR_IMP           :0x0
14:29:38: Reserv2                                       :0x0
14:29:38: Device Size C_SIZE                            :0xedc8
14:29:38: Reserv3                                       :0x0
14:29:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:38: Reserv4                                       :0x0
14:29:38: Write Speed Factor R2W_FACTOR                 :0x2
14:29:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:38: FILE_FORMAT_GRP                               :0x0
14:29:38: COPY flag                                     :0x1
14:29:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:38: File_Format                                   :0x0
14:29:38: CRC                                           :0x0
14:29:38: ####CSD Registe Values####  

14:29:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:38: [GetSCRRegisterEntry] Passed
14:29:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:38: Data_Status_After Erases          : 0
14:29:38: CPRM Security Support             : No Security
14:29:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:38: Spec. Version                     : Version 3.0X
14:29:38: Extended Security Support         : Extended_Security_Not_Supported
14:29:38: Command Support                   : COMMAND_SUPPORT
14:29:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E35A0>, <py_sfcl.CommandDataDefinition object at 0x0613FE70>) , Command count = 679 ] 
14:29:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321E0>, <py_sfcl.CommandDataDefinition object at 0x06132030>) , Command count = 680 ] 
14:29:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:38: [ SetBusWidth(0x4) , Command count = 681 ] 
14:29:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 682 ] 
14:29:38: Protected Area Size 0x28000
14:29:38: Bus Width           2
14:29:38: Secure Mode         0
14:29:38: Speed  Class        4
14:29:38: Perf Move           0
14:29:38: Au Size             9
14:29:38: Erase Size          15
14:29:38: Erase Timeout       1
14:29:38: Erase offset        1
14:29:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 683 ] 
14:29:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:38: Host Frequency set to 100000 KHz
14:29:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:38: ####CSD Registe 2.0 Values####
14:29:38: CSD_STRUCTURE                                 :0x1
14:29:38: Reserv1                                       :0x0
14:29:38: Time Access 1 TAAC                            :0xe
14:29:38: Time Access 2 NSAC*100                        :0x0
14:29:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:38: Card Command Classess CCC                     :0x5b5
14:29:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:38: DSR(driver stage register)  DSR_IMP           :0x0
14:29:38: Reserv2                                       :0x0
14:29:38: Device Size C_SIZE                            :0xedc8
14:29:38: Reserv3                                       :0x0
14:29:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:38: Reserv4                                       :0x0
14:29:38: Write Speed Factor R2W_FACTOR                 :0x2
14:29:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:38: FILE_FORMAT_GRP                               :0x0
14:29:38: COPY flag                                     :0x1
14:29:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:38: File_Format                                   :0x0
14:29:38: CRC                                           :0x0
14:29:38: ####CSD Registe Values####  

14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 684 ] 
14:29:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061326F0>, <py_sfcl.CommandDataDefinition object at 0x0612EEA0>) , Command count = 685 ] 
14:29:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E7E4 to EndLba:0x3B6E864 with One's Pattern
14:29:38: [ WrLbaNoData(0x3B6E7E4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 686 ] 
14:29:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E7E4 to EndLba:0x3B6E864 with One's Pattern 

14:29:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E864 to EndLba:0x3B6E8E4 with One's Pattern
14:29:38: [ WrLbaNoData(0x3B6E864, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 687 ] 
14:29:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E864 to EndLba:0x3B6E8E4 with One's Pattern 

14:29:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23183 to EndLba:0x25143 with Constant Pattern
14:29:38: [ RdLbaNoData(0x23183, 0x1FC0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 688 ] 
14:29:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23183 to EndLba:0x25143 with Constant Pattern 

14:29:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4062
14:29:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061329F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132810>, <py_sfcl.PySEnhancedCmdData object at 0x06132780>, <None>) , Command count = 689 ] 
14:29:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:40: Host Frequency set to 25000 KHz
14:29:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x061322A0>, 0x0, True) , Command count = 690 ] 
14:29:40: [GO18_globalSetVolt]### Host voltage value is set.
14:29:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132210>, 0x0, False) , Command count = 691 ] 
14:29:40: [GO18_globalSetVolt]### Host voltage value is set.
14:29:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 692 ] 
14:29:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 693 ] 
14:29:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 694 ] 
14:29:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132420>, <py_sfcl.CommandDataDefinition object at 0x06132180>) , Command count = 695 ] 
14:29:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132450>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 696 ] 
14:29:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:40: [ SetCardRCA(0x1, 0xD555) , Command count = 697 ] 
14:29:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:40: Host Frequency set to 25000 KHz
14:29:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:40: ####CSD Registe 2.0 Values####
14:29:40: CSD_STRUCTURE                                 :0x1
14:29:40: Reserv1                                       :0x0
14:29:40: Time Access 1 TAAC                            :0xe
14:29:40: Time Access 2 NSAC*100                        :0x0
14:29:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:40: Card Command Classess CCC                     :0x5b5
14:29:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:40: DSR(driver stage register)  DSR_IMP           :0x0
14:29:40: Reserv2                                       :0x0
14:29:40: Device Size C_SIZE                            :0xedc8
14:29:40: Reserv3                                       :0x0
14:29:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:40: Reserv4                                       :0x0
14:29:40: Write Speed Factor R2W_FACTOR                 :0x2
14:29:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:40: FILE_FORMAT_GRP                               :0x0
14:29:40: COPY flag                                     :0x1
14:29:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:40: File_Format                                   :0x0
14:29:40: CRC                                           :0x0
14:29:40: ####CSD Registe Values####  

14:29:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:40: [GetSCRRegisterEntry] Passed
14:29:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:40: Data_Status_After Erases          : 0
14:29:40: CPRM Security Support             : No Security
14:29:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:40: Spec. Version                     : Version 3.0X
14:29:40: Extended Security Support         : Extended_Security_Not_Supported
14:29:40: Command Support                   : COMMAND_SUPPORT
14:29:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x0613FF00>) , Command count = 698 ] 
14:29:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 699 ] 
14:29:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:40: [ SetBusWidth(0x4) , Command count = 700 ] 
14:29:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 701 ] 
14:29:40: Protected Area Size 0x28000
14:29:40: Bus Width           2
14:29:40: Secure Mode         0
14:29:40: Speed  Class        4
14:29:40: Perf Move           0
14:29:40: Au Size             9
14:29:40: Erase Size          15
14:29:40: Erase Timeout       1
14:29:40: Erase offset        1
14:29:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 702 ] 
14:29:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:41: Host Frequency set to 100000 KHz
14:29:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:41: ####CSD Registe 2.0 Values####
14:29:41: CSD_STRUCTURE                                 :0x1
14:29:41: Reserv1                                       :0x0
14:29:41: Time Access 1 TAAC                            :0xe
14:29:41: Time Access 2 NSAC*100                        :0x0
14:29:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:41: Card Command Classess CCC                     :0x5b5
14:29:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:41: DSR(driver stage register)  DSR_IMP           :0x0
14:29:41: Reserv2                                       :0x0
14:29:41: Device Size C_SIZE                            :0xedc8
14:29:41: Reserv3                                       :0x0
14:29:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:41: Reserv4                                       :0x0
14:29:41: Write Speed Factor R2W_FACTOR                 :0x2
14:29:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:41: FILE_FORMAT_GRP                               :0x0
14:29:41: COPY flag                                     :0x1
14:29:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:41: File_Format                                   :0x0
14:29:41: CRC                                           :0x0
14:29:41: ####CSD Registe Values####  

14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D80>, <py_sfcl.CommandDataDefinition object at 0x06132DE0>) , Command count = 703 ] 
14:29:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x061325A0>) , Command count = 704 ] 
14:29:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7065F to EndLba:0x3B706DF with One's Pattern
14:29:41: [ WrLbaNoData(0x3B7065F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 705 ] 
14:29:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7065F to EndLba:0x3B706DF with One's Pattern 

14:29:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B706DF to EndLba:0x3B7075F with One's Pattern
14:29:41: [ WrLbaNoData(0x3B706DF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 706 ] 
14:29:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B706DF to EndLba:0x3B7075F with One's Pattern 

14:29:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23185 to EndLba:0x25143 with Constant Pattern
14:29:41: [ RdLbaNoData(0x23185, 0x1FBE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 707 ] 
14:29:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23185 to EndLba:0x25143 with Constant Pattern 

14:29:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4061
14:29:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132F30>, <py_sfcl.PySEnhancedCmdData object at 0x06132EA0>, <None>) , Command count = 708 ] 
14:29:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:43: Host Frequency set to 25000 KHz
14:29:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x061329C0>, 0x0, True) , Command count = 709 ] 
14:29:43: [GO18_globalSetVolt]### Host voltage value is set.
14:29:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138120>, 0x0, False) , Command count = 710 ] 
14:29:43: [GO18_globalSetVolt]### Host voltage value is set.
14:29:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 711 ] 
14:29:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 712 ] 
14:29:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 713 ] 
14:29:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x06132930>) , Command count = 714 ] 
14:29:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B70>, <py_sfcl.CommandDataDefinition object at 0x06132B10>) , Command count = 715 ] 
14:29:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:43: [ SetCardRCA(0x1, 0xD555) , Command count = 716 ] 
14:29:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:43: Host Frequency set to 25000 KHz
14:29:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:43: ####CSD Registe 2.0 Values####
14:29:43: CSD_STRUCTURE                                 :0x1
14:29:43: Reserv1                                       :0x0
14:29:43: Time Access 1 TAAC                            :0xe
14:29:43: Time Access 2 NSAC*100                        :0x0
14:29:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:43: Card Command Classess CCC                     :0x5b5
14:29:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:43: DSR(driver stage register)  DSR_IMP           :0x0
14:29:43: Reserv2                                       :0x0
14:29:43: Device Size C_SIZE                            :0xedc8
14:29:43: Reserv3                                       :0x0
14:29:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:43: Reserv4                                       :0x0
14:29:43: Write Speed Factor R2W_FACTOR                 :0x2
14:29:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:43: FILE_FORMAT_GRP                               :0x0
14:29:43: COPY flag                                     :0x1
14:29:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:43: File_Format                                   :0x0
14:29:43: CRC                                           :0x0
14:29:43: ####CSD Registe Values####  

14:29:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:43: [GetSCRRegisterEntry] Passed
14:29:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:43: Data_Status_After Erases          : 0
14:29:43: CPRM Security Support             : No Security
14:29:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:43: Spec. Version                     : Version 3.0X
14:29:43: Extended Security Support         : Extended_Security_Not_Supported
14:29:43: Command Support                   : COMMAND_SUPPORT
14:29:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061383F0>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 717 ] 
14:29:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138090>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 718 ] 
14:29:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:43: [ SetBusWidth(0x4) , Command count = 719 ] 
14:29:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132BA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 720 ] 
14:29:43: Protected Area Size 0x28000
14:29:43: Bus Width           2
14:29:43: Secure Mode         0
14:29:43: Speed  Class        4
14:29:43: Perf Move           0
14:29:43: Au Size             9
14:29:43: Erase Size          15
14:29:43: Erase Timeout       1
14:29:43: Erase offset        1
14:29:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 721 ] 
14:29:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:43: Host Frequency set to 100000 KHz
14:29:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:43: ####CSD Registe 2.0 Values####
14:29:43: CSD_STRUCTURE                                 :0x1
14:29:43: Reserv1                                       :0x0
14:29:43: Time Access 1 TAAC                            :0xe
14:29:43: Time Access 2 NSAC*100                        :0x0
14:29:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:43: Card Command Classess CCC                     :0x5b5
14:29:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:43: DSR(driver stage register)  DSR_IMP           :0x0
14:29:43: Reserv2                                       :0x0
14:29:43: Device Size C_SIZE                            :0xedc8
14:29:43: Reserv3                                       :0x0
14:29:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:43: Reserv4                                       :0x0
14:29:43: Write Speed Factor R2W_FACTOR                 :0x2
14:29:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:43: FILE_FORMAT_GRP                               :0x0
14:29:43: COPY flag                                     :0x1
14:29:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:43: File_Format                                   :0x0
14:29:43: CRC                                           :0x0
14:29:43: ####CSD Registe Values####  

14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061384E0>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 722 ] 
14:29:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138570>, <py_sfcl.CommandDataDefinition object at 0x06132CF0>) , Command count = 723 ] 
14:29:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7015E to EndLba:0x3B701DE with One's Pattern
14:29:43: [ WrLbaNoData(0x3B7015E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 724 ] 
14:29:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7015E to EndLba:0x3B701DE with One's Pattern 

14:29:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B701DE to EndLba:0x3B7025E with One's Pattern
14:29:43: [ WrLbaNoData(0x3B701DE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 725 ] 
14:29:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B701DE to EndLba:0x3B7025E with One's Pattern 

14:29:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23185 to EndLba:0x25141 with Constant Pattern
14:29:44: [ RdLbaNoData(0x23185, 0x1FBC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 726 ] 
14:29:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23185 to EndLba:0x25141 with Constant Pattern 

14:29:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4060
14:29:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138690>, <py_sfcl.PySEnhancedCmdData object at 0x06138600>, <None>) , Command count = 727 ] 
14:29:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:46: Host Frequency set to 25000 KHz
14:29:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138150>, 0x0, True) , Command count = 728 ] 
14:29:46: [GO18_globalSetVolt]### Host voltage value is set.
14:29:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x061380C0>, 0x0, False) , Command count = 729 ] 
14:29:46: [GO18_globalSetVolt]### Host voltage value is set.
14:29:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 730 ] 
14:29:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 731 ] 
14:29:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 732 ] 
14:29:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061382A0>, <py_sfcl.CommandDataDefinition object at 0x06138810>) , Command count = 733 ] 
14:29:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061382D0>, <py_sfcl.CommandDataDefinition object at 0x06138270>) , Command count = 734 ] 
14:29:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:46: [ SetCardRCA(0x1, 0xD555) , Command count = 735 ] 
14:29:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:46: Host Frequency set to 25000 KHz
14:29:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:46: ####CSD Registe 2.0 Values####
14:29:46: CSD_STRUCTURE                                 :0x1
14:29:46: Reserv1                                       :0x0
14:29:46: Time Access 1 TAAC                            :0xe
14:29:46: Time Access 2 NSAC*100                        :0x0
14:29:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:46: Card Command Classess CCC                     :0x5b5
14:29:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:46: DSR(driver stage register)  DSR_IMP           :0x0
14:29:46: Reserv2                                       :0x0
14:29:46: Device Size C_SIZE                            :0xedc8
14:29:46: Reserv3                                       :0x0
14:29:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:46: Reserv4                                       :0x0
14:29:46: Write Speed Factor R2W_FACTOR                 :0x2
14:29:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:46: FILE_FORMAT_GRP                               :0x0
14:29:46: COPY flag                                     :0x1
14:29:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:46: File_Format                                   :0x0
14:29:46: CRC                                           :0x0
14:29:46: ####CSD Registe Values####  

14:29:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:46: [GetSCRRegisterEntry] Passed
14:29:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:46: Data_Status_After Erases          : 0
14:29:46: CPRM Security Support             : No Security
14:29:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:46: Spec. Version                     : Version 3.0X
14:29:46: Extended Security Support         : Extended_Security_Not_Supported
14:29:46: Command Support                   : COMMAND_SUPPORT
14:29:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138390>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 736 ] 
14:29:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138780>, <py_sfcl.CommandDataDefinition object at 0x061385A0>) , Command count = 737 ] 
14:29:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:46: [ SetBusWidth(0x4) , Command count = 738 ] 
14:29:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 739 ] 
14:29:46: Protected Area Size 0x28000
14:29:46: Bus Width           2
14:29:46: Secure Mode         0
14:29:46: Speed  Class        4
14:29:46: Perf Move           0
14:29:46: Au Size             9
14:29:46: Erase Size          15
14:29:46: Erase Timeout       1
14:29:46: Erase offset        1
14:29:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 740 ] 
14:29:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:46: Host Frequency set to 100000 KHz
14:29:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:46: ####CSD Registe 2.0 Values####
14:29:46: CSD_STRUCTURE                                 :0x1
14:29:46: Reserv1                                       :0x0
14:29:46: Time Access 1 TAAC                            :0xe
14:29:46: Time Access 2 NSAC*100                        :0x0
14:29:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:46: Card Command Classess CCC                     :0x5b5
14:29:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:46: DSR(driver stage register)  DSR_IMP           :0x0
14:29:46: Reserv2                                       :0x0
14:29:46: Device Size C_SIZE                            :0xedc8
14:29:46: Reserv3                                       :0x0
14:29:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:47: Reserv4                                       :0x0
14:29:47: Write Speed Factor R2W_FACTOR                 :0x2
14:29:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:47: FILE_FORMAT_GRP                               :0x0
14:29:47: COPY flag                                     :0x1
14:29:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:47: File_Format                                   :0x0
14:29:47: CRC                                           :0x0
14:29:47: ####CSD Registe Values####  

14:29:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C00>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 741 ] 
14:29:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C90>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 742 ] 
14:29:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70C70 to EndLba:0x3B70CF0 with One's Pattern
14:29:47: [ WrLbaNoData(0x3B70C70, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 743 ] 
14:29:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70C70 to EndLba:0x3B70CF0 with One's Pattern 

14:29:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70CF0 to EndLba:0x3B70D70 with One's Pattern
14:29:47: [ WrLbaNoData(0x3B70CF0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 744 ] 
14:29:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70CF0 to EndLba:0x3B70D70 with One's Pattern 

14:29:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23187 to EndLba:0x25141 with Constant Pattern
14:29:47: [ RdLbaNoData(0x23187, 0x1FBA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 745 ] 
14:29:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23187 to EndLba:0x25141 with Constant Pattern 

14:29:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4059
14:29:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138F90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06138D20>, <None>) , Command count = 746 ] 
14:29:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:50: Host Frequency set to 25000 KHz
14:29:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138840>, 0x0, True) , Command count = 747 ] 
14:29:50: [GO18_globalSetVolt]### Host voltage value is set.
14:29:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x061387B0>, 0x0, False) , Command count = 748 ] 
14:29:50: [GO18_globalSetVolt]### Host voltage value is set.
14:29:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 749 ] 
14:29:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 750 ] 
14:29:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 751 ] 
14:29:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061389C0>, <py_sfcl.CommandDataDefinition object at 0x06138A80>) , Command count = 752 ] 
14:29:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061389F0>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 753 ] 
14:29:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:50: [ SetCardRCA(0x1, 0xD555) , Command count = 754 ] 
14:29:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:50: Host Frequency set to 25000 KHz
14:29:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:50: ####CSD Registe 2.0 Values####
14:29:50: CSD_STRUCTURE                                 :0x1
14:29:50: Reserv1                                       :0x0
14:29:50: Time Access 1 TAAC                            :0xe
14:29:50: Time Access 2 NSAC*100                        :0x0
14:29:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:50: Card Command Classess CCC                     :0x5b5
14:29:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:50: DSR(driver stage register)  DSR_IMP           :0x0
14:29:50: Reserv2                                       :0x0
14:29:50: Device Size C_SIZE                            :0xedc8
14:29:50: Reserv3                                       :0x0
14:29:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:50: Reserv4                                       :0x0
14:29:50: Write Speed Factor R2W_FACTOR                 :0x2
14:29:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:50: FILE_FORMAT_GRP                               :0x0
14:29:50: COPY flag                                     :0x1
14:29:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:50: File_Format                                   :0x0
14:29:50: CRC                                           :0x0
14:29:50: ####CSD Registe Values####  

14:29:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:50: [GetSCRRegisterEntry] Passed
14:29:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:50: Data_Status_After Erases          : 0
14:29:50: CPRM Security Support             : No Security
14:29:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:50: Spec. Version                     : Version 3.0X
14:29:50: Extended Security Support         : Extended_Security_Not_Supported
14:29:50: Command Support                   : COMMAND_SUPPORT
14:29:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138AE0>, <py_sfcl.CommandDataDefinition object at 0x0613FDB0>) , Command count = 755 ] 
14:29:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138EA0>, <py_sfcl.CommandDataDefinition object at 0x06138CC0>) , Command count = 756 ] 
14:29:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:50: [ SetBusWidth(0x4) , Command count = 757 ] 
14:29:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 758 ] 
14:29:50: Protected Area Size 0x28000
14:29:50: Bus Width           2
14:29:50: Secure Mode         0
14:29:50: Speed  Class        4
14:29:50: Perf Move           0
14:29:50: Au Size             9
14:29:50: Erase Size          15
14:29:50: Erase Timeout       1
14:29:50: Erase offset        1
14:29:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 759 ] 
14:29:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:50: Host Frequency set to 100000 KHz
14:29:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:50: ####CSD Registe 2.0 Values####
14:29:50: CSD_STRUCTURE                                 :0x1
14:29:50: Reserv1                                       :0x0
14:29:50: Time Access 1 TAAC                            :0xe
14:29:50: Time Access 2 NSAC*100                        :0x0
14:29:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:50: Card Command Classess CCC                     :0x5b5
14:29:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:50: DSR(driver stage register)  DSR_IMP           :0x0
14:29:50: Reserv2                                       :0x0
14:29:50: Device Size C_SIZE                            :0xedc8
14:29:50: Reserv3                                       :0x0
14:29:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:50: Reserv4                                       :0x0
14:29:50: Write Speed Factor R2W_FACTOR                 :0x2
14:29:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:50: FILE_FORMAT_GRP                               :0x0
14:29:50: COPY flag                                     :0x1
14:29:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:50: File_Format                                   :0x0
14:29:50: CRC                                           :0x0
14:29:50: ####CSD Registe Values####  

14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052A2420>, <py_sfcl.CommandDataDefinition object at 0x0525E030>) , Command count = 760 ] 
14:29:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x0613F030>) , Command count = 761 ] 
14:29:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72160 to EndLba:0x3B721E0 with One's Pattern
14:29:51: [ WrLbaNoData(0x3B72160, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 762 ] 
14:29:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72160 to EndLba:0x3B721E0 with One's Pattern 

14:29:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B721E0 to EndLba:0x3B72260 with One's Pattern
14:29:51: [ WrLbaNoData(0x3B721E0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 763 ] 
14:29:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B721E0 to EndLba:0x3B72260 with One's Pattern 

14:29:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23187 to EndLba:0x2513F with Constant Pattern
14:29:51: [ RdLbaNoData(0x23187, 0x1FB8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 764 ] 
14:29:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23187 to EndLba:0x2513F with Constant Pattern 

14:29:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4058
14:29:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052AF120>, <py_sfcl.PySEnhancedCmdData object at 0x06138D80>, <None>) , Command count = 765 ] 
14:29:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:53: Host Frequency set to 25000 KHz
14:29:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138F60>, 0x0, True) , Command count = 766 ] 
14:29:53: [GO18_globalSetVolt]### Host voltage value is set.
14:29:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138ED0>, 0x0, False) , Command count = 767 ] 
14:29:53: [GO18_globalSetVolt]### Host voltage value is set.
14:29:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 768 ] 
14:29:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 769 ] 
14:29:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 770 ] 
14:29:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138DE0>, <py_sfcl.CommandDataDefinition object at 0x06138FC0>) , Command count = 771 ] 
14:29:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F3F0>, <py_sfcl.CommandDataDefinition object at 0x0613F450>) , Command count = 772 ] 
14:29:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:54: [ SetCardRCA(0x1, 0xD555) , Command count = 773 ] 
14:29:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:54: Host Frequency set to 25000 KHz
14:29:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:54: ####CSD Registe 2.0 Values####
14:29:54: CSD_STRUCTURE                                 :0x1
14:29:54: Reserv1                                       :0x0
14:29:54: Time Access 1 TAAC                            :0xe
14:29:54: Time Access 2 NSAC*100                        :0x0
14:29:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:54: Card Command Classess CCC                     :0x5b5
14:29:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:54: DSR(driver stage register)  DSR_IMP           :0x0
14:29:54: Reserv2                                       :0x0
14:29:54: Device Size C_SIZE                            :0xedc8
14:29:54: Reserv3                                       :0x0
14:29:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:54: Reserv4                                       :0x0
14:29:54: Write Speed Factor R2W_FACTOR                 :0x2
14:29:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:54: FILE_FORMAT_GRP                               :0x0
14:29:54: COPY flag                                     :0x1
14:29:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:54: File_Format                                   :0x0
14:29:54: CRC                                           :0x0
14:29:54: ####CSD Registe Values####  

14:29:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:54: [GetSCRRegisterEntry] Passed
14:29:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:54: Data_Status_After Erases          : 0
14:29:54: CPRM Security Support             : No Security
14:29:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:54: Spec. Version                     : Version 3.0X
14:29:54: Extended Security Support         : Extended_Security_Not_Supported
14:29:54: Command Support                   : COMMAND_SUPPORT
14:29:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052577E0>, <py_sfcl.CommandDataDefinition object at 0x0613F120>) , Command count = 774 ] 
14:29:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x0613F510>) , Command count = 775 ] 
14:29:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:54: [ SetBusWidth(0x4) , Command count = 776 ] 
14:29:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 777 ] 
14:29:54: Protected Area Size 0x28000
14:29:54: Bus Width           2
14:29:54: Secure Mode         0
14:29:54: Speed  Class        4
14:29:54: Perf Move           0
14:29:54: Au Size             9
14:29:54: Erase Size          15
14:29:54: Erase Timeout       1
14:29:54: Erase offset        1
14:29:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 778 ] 
14:29:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:54: Host Frequency set to 100000 KHz
14:29:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:54: ####CSD Registe 2.0 Values####
14:29:54: CSD_STRUCTURE                                 :0x1
14:29:54: Reserv1                                       :0x0
14:29:54: Time Access 1 TAAC                            :0xe
14:29:54: Time Access 2 NSAC*100                        :0x0
14:29:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:54: Card Command Classess CCC                     :0x5b5
14:29:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:54: DSR(driver stage register)  DSR_IMP           :0x0
14:29:54: Reserv2                                       :0x0
14:29:54: Device Size C_SIZE                            :0xedc8
14:29:54: Reserv3                                       :0x0
14:29:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:54: Reserv4                                       :0x0
14:29:54: Write Speed Factor R2W_FACTOR                 :0x2
14:29:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:54: FILE_FORMAT_GRP                               :0x0
14:29:54: COPY flag                                     :0x1
14:29:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:54: File_Format                                   :0x0
14:29:54: CRC                                           :0x0
14:29:54: ####CSD Registe Values####  

14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB930>, <py_sfcl.CommandDataDefinition object at 0x0613F6C0>) , Command count = 779 ] 
14:29:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C30>, <py_sfcl.CommandDataDefinition object at 0x0613F660>) , Command count = 780 ] 
14:29:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71822 to EndLba:0x3B718A2 with One's Pattern
14:29:54: [ WrLbaNoData(0x3B71822, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 781 ] 
14:29:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71822 to EndLba:0x3B718A2 with One's Pattern 

14:29:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B718A2 to EndLba:0x3B71922 with One's Pattern
14:29:54: [ WrLbaNoData(0x3B718A2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 782 ] 
14:29:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B718A2 to EndLba:0x3B71922 with One's Pattern 

14:29:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23189 to EndLba:0x2513F with Constant Pattern
14:29:54: [ RdLbaNoData(0x23189, 0x1FB6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 783 ] 
14:29:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23189 to EndLba:0x2513F with Constant Pattern 

14:29:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4057
14:29:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052C1C60>, <py_sfcl.PySEnhancedCmdData object at 0x0613F720>, <None>) , Command count = 784 ] 
14:29:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:29:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:56: Host Frequency set to 25000 KHz
14:29:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:29:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:29:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF270>, 0x0, True) , Command count = 785 ] 
14:29:56: [GO18_globalSetVolt]### Host voltage value is set.
14:29:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:29:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFC30>, 0x0, False) , Command count = 786 ] 
14:29:56: [GO18_globalSetVolt]### Host voltage value is set.
14:29:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 787 ] 
14:29:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:29:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 788 ] 
14:29:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:29:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:29:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:29:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:29:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:29:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 789 ] 
14:29:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:29:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:29:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x0613F7E0>) , Command count = 790 ] 
14:29:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:29:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x0613F4B0>) , Command count = 791 ] 
14:29:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:29:56: [ SetCardRCA(0x1, 0xD555) , Command count = 792 ] 
14:29:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:29:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:29:57: Host Frequency set to 25000 KHz
14:29:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:29:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:57: ####CSD Registe 2.0 Values####
14:29:57: CSD_STRUCTURE                                 :0x1
14:29:57: Reserv1                                       :0x0
14:29:57: Time Access 1 TAAC                            :0xe
14:29:57: Time Access 2 NSAC*100                        :0x0
14:29:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:29:57: Card Command Classess CCC                     :0x5b5
14:29:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:57: DSR(driver stage register)  DSR_IMP           :0x0
14:29:57: Reserv2                                       :0x0
14:29:57: Device Size C_SIZE                            :0xedc8
14:29:57: Reserv3                                       :0x0
14:29:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:57: Reserv4                                       :0x0
14:29:57: Write Speed Factor R2W_FACTOR                 :0x2
14:29:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:57: FILE_FORMAT_GRP                               :0x0
14:29:57: COPY flag                                     :0x1
14:29:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:57: File_Format                                   :0x0
14:29:57: CRC                                           :0x0
14:29:57: ####CSD Registe Values####  

14:29:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:29:57: [GetSCRRegisterEntry] Passed
14:29:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:29:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:29:57: Data_Status_After Erases          : 0
14:29:57: CPRM Security Support             : No Security
14:29:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:29:57: Spec. Version                     : Version 3.0X
14:29:57: Extended Security Support         : Extended_Security_Not_Supported
14:29:57: Command Support                   : COMMAND_SUPPORT
14:29:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1A50>, <py_sfcl.CommandDataDefinition object at 0x0613F360>) , Command count = 793 ] 
14:29:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 794 ] 
14:29:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:29:57: [ SetBusWidth(0x4) , Command count = 795 ] 
14:29:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:29:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 796 ] 
14:29:57: Protected Area Size 0x28000
14:29:57: Bus Width           2
14:29:57: Secure Mode         0
14:29:57: Speed  Class        4
14:29:57: Perf Move           0
14:29:57: Au Size             9
14:29:57: Erase Size          15
14:29:57: Erase Timeout       1
14:29:57: Erase offset        1
14:29:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:29:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:29:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:29:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 797 ] 
14:29:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:29:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:29:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:29:57: Host Frequency set to 100000 KHz
14:29:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:29:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:29:57: ####CSD Registe 2.0 Values####
14:29:57: CSD_STRUCTURE                                 :0x1
14:29:57: Reserv1                                       :0x0
14:29:57: Time Access 1 TAAC                            :0xe
14:29:57: Time Access 2 NSAC*100                        :0x0
14:29:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:29:57: Card Command Classess CCC                     :0x5b5
14:29:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:29:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:29:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:29:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:29:57: DSR(driver stage register)  DSR_IMP           :0x0
14:29:57: Reserv2                                       :0x0
14:29:57: Device Size C_SIZE                            :0xedc8
14:29:57: Reserv3                                       :0x0
14:29:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:29:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:29:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:29:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:29:57: Reserv4                                       :0x0
14:29:57: Write Speed Factor R2W_FACTOR                 :0x2
14:29:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:29:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:29:57: FILE_FORMAT_GRP                               :0x0
14:29:57: COPY flag                                     :0x1
14:29:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:29:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:29:57: File_Format                                   :0x0
14:29:57: CRC                                           :0x0
14:29:57: ####CSD Registe Values####  

14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E38A0>, <py_sfcl.CommandDataDefinition object at 0x0613F420>) , Command count = 798 ] 
14:29:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:29:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x0613F990>) , Command count = 799 ] 
14:29:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:29:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:29:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:29:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E1EF to EndLba:0x3B6E26F with One's Pattern
14:29:57: [ WrLbaNoData(0x3B6E1EF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 800 ] 
14:29:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E1EF to EndLba:0x3B6E26F with One's Pattern 

14:29:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E26F to EndLba:0x3B6E2EF with One's Pattern
14:29:57: [ WrLbaNoData(0x3B6E26F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 801 ] 
14:29:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E26F to EndLba:0x3B6E2EF with One's Pattern 

14:29:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:29:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23189 to EndLba:0x2513D with Constant Pattern
14:29:58: [ RdLbaNoData(0x23189, 0x1FB4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 802 ] 
14:29:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23189 to EndLba:0x2513D with Constant Pattern 

14:29:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4056
14:29:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:29:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E38D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FE40>, <py_sfcl.PySEnhancedCmdData object at 0x0613F960>, <None>) , Command count = 803 ] 
14:29:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:29:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:00: Host Frequency set to 25000 KHz
14:30:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F150>, 0x0, True) , Command count = 804 ] 
14:30:00: [GO18_globalSetVolt]### Host voltage value is set.
14:30:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1F00>, 0x0, False) , Command count = 805 ] 
14:30:00: [GO18_globalSetVolt]### Host voltage value is set.
14:30:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 806 ] 
14:30:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 807 ] 
14:30:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 808 ] 
14:30:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x0613FAB0>) , Command count = 809 ] 
14:30:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F840>) , Command count = 810 ] 
14:30:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:00: [ SetCardRCA(0x1, 0xD555) , Command count = 811 ] 
14:30:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:00: Host Frequency set to 25000 KHz
14:30:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:00: ####CSD Registe 2.0 Values####
14:30:00: CSD_STRUCTURE                                 :0x1
14:30:00: Reserv1                                       :0x0
14:30:00: Time Access 1 TAAC                            :0xe
14:30:00: Time Access 2 NSAC*100                        :0x0
14:30:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:00: Card Command Classess CCC                     :0x5b5
14:30:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:00: DSR(driver stage register)  DSR_IMP           :0x0
14:30:00: Reserv2                                       :0x0
14:30:00: Device Size C_SIZE                            :0xedc8
14:30:00: Reserv3                                       :0x0
14:30:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:00: Reserv4                                       :0x0
14:30:00: Write Speed Factor R2W_FACTOR                 :0x2
14:30:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:00: FILE_FORMAT_GRP                               :0x0
14:30:00: COPY flag                                     :0x1
14:30:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:00: File_Format                                   :0x0
14:30:00: CRC                                           :0x0
14:30:00: ####CSD Registe Values####  

14:30:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:00: [GetSCRRegisterEntry] Passed
14:30:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:00: Data_Status_After Erases          : 0
14:30:00: CPRM Security Support             : No Security
14:30:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:00: Spec. Version                     : Version 3.0X
14:30:00: Extended Security Support         : Extended_Security_Not_Supported
14:30:00: Command Support                   : COMMAND_SUPPORT
14:30:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F4E0>, <py_sfcl.CommandDataDefinition object at 0x0613F6F0>) , Command count = 812 ] 
14:30:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39C0>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 813 ] 
14:30:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:00: [ SetBusWidth(0x4) , Command count = 814 ] 
14:30:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FC90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 815 ] 
14:30:00: Protected Area Size 0x28000
14:30:00: Bus Width           2
14:30:00: Secure Mode         0
14:30:00: Speed  Class        4
14:30:00: Perf Move           0
14:30:00: Au Size             9
14:30:00: Erase Size          15
14:30:00: Erase Timeout       1
14:30:00: Erase offset        1
14:30:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 816 ] 
14:30:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:00: Host Frequency set to 100000 KHz
14:30:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:00: ####CSD Registe 2.0 Values####
14:30:00: CSD_STRUCTURE                                 :0x1
14:30:01: Reserv1                                       :0x0
14:30:01: Time Access 1 TAAC                            :0xe
14:30:01: Time Access 2 NSAC*100                        :0x0
14:30:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:01: Card Command Classess CCC                     :0x5b5
14:30:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:01: DSR(driver stage register)  DSR_IMP           :0x0
14:30:01: Reserv2                                       :0x0
14:30:01: Device Size C_SIZE                            :0xedc8
14:30:01: Reserv3                                       :0x0
14:30:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:01: Reserv4                                       :0x0
14:30:01: Write Speed Factor R2W_FACTOR                 :0x2
14:30:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:01: FILE_FORMAT_GRP                               :0x0
14:30:01: COPY flag                                     :0x1
14:30:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:01: File_Format                                   :0x0
14:30:01: CRC                                           :0x0
14:30:01: ####CSD Registe Values####  

14:30:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C420>, <py_sfcl.CommandDataDefinition object at 0x060E3960>) , Command count = 817 ] 
14:30:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x0613F090>) , Command count = 818 ] 
14:30:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED7D to EndLba:0x3B6EDFD with One's Pattern
14:30:01: [ WrLbaNoData(0x3B6ED7D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 819 ] 
14:30:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED7D to EndLba:0x3B6EDFD with One's Pattern 

14:30:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EDFD to EndLba:0x3B6EE7D with One's Pattern
14:30:01: [ WrLbaNoData(0x3B6EDFD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 820 ] 
14:30:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EDFD to EndLba:0x3B6EE7D with One's Pattern 

14:30:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2318B to EndLba:0x2513D with Constant Pattern
14:30:01: [ RdLbaNoData(0x2318B, 0x1FB2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 821 ] 
14:30:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2318B to EndLba:0x2513D with Constant Pattern 

14:30:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4055
14:30:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3930>, <py_sfcl.PySEnhancedCmdData object at 0x0611CFC0>, <None>) , Command count = 822 ] 
14:30:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:03: Host Frequency set to 25000 KHz
14:30:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1F30>, 0x0, True) , Command count = 823 ] 
14:30:03: [GO18_globalSetVolt]### Host voltage value is set.
14:30:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3540>, 0x0, False) , Command count = 824 ] 
14:30:03: [GO18_globalSetVolt]### Host voltage value is set.
14:30:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 825 ] 
14:30:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 826 ] 
14:30:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 827 ] 
14:30:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E34E0>, <py_sfcl.CommandDataDefinition object at 0x060E3750>) , Command count = 828 ] 
14:30:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C090>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 829 ] 
14:30:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:04: [ SetCardRCA(0x1, 0xD555) , Command count = 830 ] 
14:30:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:04: Host Frequency set to 25000 KHz
14:30:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:04: ####CSD Registe 2.0 Values####
14:30:04: CSD_STRUCTURE                                 :0x1
14:30:04: Reserv1                                       :0x0
14:30:04: Time Access 1 TAAC                            :0xe
14:30:04: Time Access 2 NSAC*100                        :0x0
14:30:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:04: Card Command Classess CCC                     :0x5b5
14:30:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:04: DSR(driver stage register)  DSR_IMP           :0x0
14:30:04: Reserv2                                       :0x0
14:30:04: Device Size C_SIZE                            :0xedc8
14:30:04: Reserv3                                       :0x0
14:30:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:04: Reserv4                                       :0x0
14:30:04: Write Speed Factor R2W_FACTOR                 :0x2
14:30:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:04: FILE_FORMAT_GRP                               :0x0
14:30:04: COPY flag                                     :0x1
14:30:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:04: File_Format                                   :0x0
14:30:04: CRC                                           :0x0
14:30:04: ####CSD Registe Values####  

14:30:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:04: [GetSCRRegisterEntry] Passed
14:30:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:04: Data_Status_After Erases          : 0
14:30:04: CPRM Security Support             : No Security
14:30:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:04: Spec. Version                     : Version 3.0X
14:30:04: Extended Security Support         : Extended_Security_Not_Supported
14:30:04: Command Support                   : COMMAND_SUPPORT
14:30:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F660>, <py_sfcl.CommandDataDefinition object at 0x0613F0C0>) , Command count = 831 ] 
14:30:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 832 ] 
14:30:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:04: [ SetBusWidth(0x4) , Command count = 833 ] 
14:30:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 834 ] 
14:30:04: Protected Area Size 0x28000
14:30:04: Bus Width           2
14:30:04: Secure Mode         0
14:30:04: Speed  Class        4
14:30:04: Perf Move           0
14:30:04: Au Size             9
14:30:04: Erase Size          15
14:30:04: Erase Timeout       1
14:30:04: Erase offset        1
14:30:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 835 ] 
14:30:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:04: Host Frequency set to 100000 KHz
14:30:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:04: ####CSD Registe 2.0 Values####
14:30:04: CSD_STRUCTURE                                 :0x1
14:30:04: Reserv1                                       :0x0
14:30:04: Time Access 1 TAAC                            :0xe
14:30:04: Time Access 2 NSAC*100                        :0x0
14:30:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:04: Card Command Classess CCC                     :0x5b5
14:30:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:04: DSR(driver stage register)  DSR_IMP           :0x0
14:30:04: Reserv2                                       :0x0
14:30:04: Device Size C_SIZE                            :0xedc8
14:30:04: Reserv3                                       :0x0
14:30:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:04: Reserv4                                       :0x0
14:30:04: Write Speed Factor R2W_FACTOR                 :0x2
14:30:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:04: FILE_FORMAT_GRP                               :0x0
14:30:04: COPY flag                                     :0x1
14:30:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:04: File_Format                                   :0x0
14:30:04: CRC                                           :0x0
14:30:04: ####CSD Registe Values####  

14:30:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3570>, <py_sfcl.CommandDataDefinition object at 0x0611C030>) , Command count = 836 ] 
14:30:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129210>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 837 ] 
14:30:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71114 to EndLba:0x3B71194 with One's Pattern
14:30:04: [ WrLbaNoData(0x3B71114, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 838 ] 
14:30:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71114 to EndLba:0x3B71194 with One's Pattern 

14:30:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71194 to EndLba:0x3B71214 with One's Pattern
14:30:04: [ WrLbaNoData(0x3B71194, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 839 ] 
14:30:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71194 to EndLba:0x3B71214 with One's Pattern 

14:30:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2318B to EndLba:0x2513B with Constant Pattern
14:30:04: [ RdLbaNoData(0x2318B, 0x1FB0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 840 ] 
14:30:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2318B to EndLba:0x2513B with Constant Pattern 

14:30:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4054
14:30:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129180>, <py_sfcl.PySEnhancedCmdData object at 0x0611C810>, <None>) , Command count = 841 ] 
14:30:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:06: Host Frequency set to 25000 KHz
14:30:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CA20>, 0x0, True) , Command count = 842 ] 
14:30:06: [GO18_globalSetVolt]### Host voltage value is set.
14:30:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129270>, 0x0, False) , Command count = 843 ] 
14:30:06: [GO18_globalSetVolt]### Host voltage value is set.
14:30:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 844 ] 
14:30:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 845 ] 
14:30:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 846 ] 
14:30:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x0611C480>) , Command count = 847 ] 
14:30:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C540>, <py_sfcl.CommandDataDefinition object at 0x0611CC30>) , Command count = 848 ] 
14:30:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:07: [ SetCardRCA(0x1, 0xD555) , Command count = 849 ] 
14:30:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:07: Host Frequency set to 25000 KHz
14:30:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:07: ####CSD Registe 2.0 Values####
14:30:07: CSD_STRUCTURE                                 :0x1
14:30:07: Reserv1                                       :0x0
14:30:07: Time Access 1 TAAC                            :0xe
14:30:07: Time Access 2 NSAC*100                        :0x0
14:30:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:07: Card Command Classess CCC                     :0x5b5
14:30:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:07: DSR(driver stage register)  DSR_IMP           :0x0
14:30:07: Reserv2                                       :0x0
14:30:07: Device Size C_SIZE                            :0xedc8
14:30:07: Reserv3                                       :0x0
14:30:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:07: Reserv4                                       :0x0
14:30:07: Write Speed Factor R2W_FACTOR                 :0x2
14:30:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:07: FILE_FORMAT_GRP                               :0x0
14:30:07: COPY flag                                     :0x1
14:30:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:07: File_Format                                   :0x0
14:30:07: CRC                                           :0x0
14:30:07: ####CSD Registe Values####  

14:30:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:07: [GetSCRRegisterEntry] Passed
14:30:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:07: Data_Status_After Erases          : 0
14:30:07: CPRM Security Support             : No Security
14:30:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:07: Spec. Version                     : Version 3.0X
14:30:07: Extended Security Support         : Extended_Security_Not_Supported
14:30:07: Command Support                   : COMMAND_SUPPORT
14:30:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129570>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 850 ] 
14:30:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 851 ] 
14:30:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:07: [ SetBusWidth(0x4) , Command count = 852 ] 
14:30:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 853 ] 
14:30:07: Protected Area Size 0x28000
14:30:07: Bus Width           2
14:30:07: Secure Mode         0
14:30:07: Speed  Class        4
14:30:07: Perf Move           0
14:30:07: Au Size             9
14:30:07: Erase Size          15
14:30:07: Erase Timeout       1
14:30:07: Erase offset        1
14:30:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 854 ] 
14:30:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:07: Host Frequency set to 100000 KHz
14:30:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:07: ####CSD Registe 2.0 Values####
14:30:07: CSD_STRUCTURE                                 :0x1
14:30:07: Reserv1                                       :0x0
14:30:07: Time Access 1 TAAC                            :0xe
14:30:07: Time Access 2 NSAC*100                        :0x0
14:30:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:07: Card Command Classess CCC                     :0x5b5
14:30:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:07: DSR(driver stage register)  DSR_IMP           :0x0
14:30:07: Reserv2                                       :0x0
14:30:07: Device Size C_SIZE                            :0xedc8
14:30:07: Reserv3                                       :0x0
14:30:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:07: Reserv4                                       :0x0
14:30:07: Write Speed Factor R2W_FACTOR                 :0x2
14:30:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:07: FILE_FORMAT_GRP                               :0x0
14:30:07: COPY flag                                     :0x1
14:30:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:07: File_Format                                   :0x0
14:30:07: CRC                                           :0x0
14:30:07: ####CSD Registe Values####  

14:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A20>, <py_sfcl.CommandDataDefinition object at 0x0611CBA0>) , Command count = 855 ] 
14:30:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C8D0>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 856 ] 
14:30:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B720D3 to EndLba:0x3B72153 with One's Pattern
14:30:07: [ WrLbaNoData(0x3B720D3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 857 ] 
14:30:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B720D3 to EndLba:0x3B72153 with One's Pattern 

14:30:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72153 to EndLba:0x3B721D3 with One's Pattern
14:30:07: [ WrLbaNoData(0x3B72153, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 858 ] 
14:30:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72153 to EndLba:0x3B721D3 with One's Pattern 

14:30:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2318D to EndLba:0x2513B with Constant Pattern
14:30:07: [ RdLbaNoData(0x2318D, 0x1FAE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 859 ] 
14:30:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2318D to EndLba:0x2513B with Constant Pattern 

14:30:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4053
14:30:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129300>, <py_sfcl.PySEnhancedCmdData object at 0x061298A0>, <None>) , Command count = 860 ] 
14:30:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:10: Host Frequency set to 25000 KHz
14:30:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3CF0>, 0x0, True) , Command count = 861 ] 
14:30:10: [GO18_globalSetVolt]### Host voltage value is set.
14:30:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x061292A0>, 0x0, False) , Command count = 862 ] 
14:30:10: [GO18_globalSetVolt]### Host voltage value is set.
14:30:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 863 ] 
14:30:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 864 ] 
14:30:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 865 ] 
14:30:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x06129A80>) , Command count = 866 ] 
14:30:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129330>, <py_sfcl.CommandDataDefinition object at 0x0611C9F0>) , Command count = 867 ] 
14:30:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:10: [ SetCardRCA(0x1, 0xD555) , Command count = 868 ] 
14:30:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:10: Host Frequency set to 25000 KHz
14:30:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:10: ####CSD Registe 2.0 Values####
14:30:10: CSD_STRUCTURE                                 :0x1
14:30:10: Reserv1                                       :0x0
14:30:10: Time Access 1 TAAC                            :0xe
14:30:10: Time Access 2 NSAC*100                        :0x0
14:30:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:10: Card Command Classess CCC                     :0x5b5
14:30:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:10: DSR(driver stage register)  DSR_IMP           :0x0
14:30:10: Reserv2                                       :0x0
14:30:10: Device Size C_SIZE                            :0xedc8
14:30:10: Reserv3                                       :0x0
14:30:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:10: Reserv4                                       :0x0
14:30:10: Write Speed Factor R2W_FACTOR                 :0x2
14:30:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:10: FILE_FORMAT_GRP                               :0x0
14:30:10: COPY flag                                     :0x1
14:30:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:10: File_Format                                   :0x0
14:30:10: CRC                                           :0x0
14:30:10: ####CSD Registe Values####  

14:30:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:10: [GetSCRRegisterEntry] Passed
14:30:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:10: Data_Status_After Erases          : 0
14:30:10: CPRM Security Support             : No Security
14:30:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:10: Spec. Version                     : Version 3.0X
14:30:10: Extended Security Support         : Extended_Security_Not_Supported
14:30:10: Command Support                   : COMMAND_SUPPORT
14:30:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129600>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 869 ] 
14:30:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 870 ] 
14:30:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:10: [ SetBusWidth(0x4) , Command count = 871 ] 
14:30:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 872 ] 
14:30:10: Protected Area Size 0x28000
14:30:10: Bus Width           2
14:30:10: Secure Mode         0
14:30:10: Speed  Class        4
14:30:10: Perf Move           0
14:30:10: Au Size             9
14:30:10: Erase Size          15
14:30:10: Erase Timeout       1
14:30:10: Erase offset        1
14:30:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 873 ] 
14:30:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:10: Host Frequency set to 100000 KHz
14:30:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:10: ####CSD Registe 2.0 Values####
14:30:10: CSD_STRUCTURE                                 :0x1
14:30:10: Reserv1                                       :0x0
14:30:10: Time Access 1 TAAC                            :0xe
14:30:10: Time Access 2 NSAC*100                        :0x0
14:30:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:10: Card Command Classess CCC                     :0x5b5
14:30:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:10: DSR(driver stage register)  DSR_IMP           :0x0
14:30:10: Reserv2                                       :0x0
14:30:10: Device Size C_SIZE                            :0xedc8
14:30:10: Reserv3                                       :0x0
14:30:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:11: Reserv4                                       :0x0
14:30:11: Write Speed Factor R2W_FACTOR                 :0x2
14:30:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:11: FILE_FORMAT_GRP                               :0x0
14:30:11: COPY flag                                     :0x1
14:30:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:11: File_Format                                   :0x0
14:30:11: CRC                                           :0x0
14:30:11: ####CSD Registe Values####  

14:30:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7E0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 874 ] 
14:30:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129690>) , Command count = 875 ] 
14:30:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71699 to EndLba:0x3B71719 with One's Pattern
14:30:11: [ WrLbaNoData(0x3B71699, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 876 ] 
14:30:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71699 to EndLba:0x3B71719 with One's Pattern 

14:30:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71719 to EndLba:0x3B71799 with One's Pattern
14:30:11: [ WrLbaNoData(0x3B71719, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 877 ] 
14:30:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71719 to EndLba:0x3B71799 with One's Pattern 

14:30:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2318D to EndLba:0x25139 with Constant Pattern
14:30:11: [ RdLbaNoData(0x2318D, 0x1FAC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 878 ] 
14:30:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2318D to EndLba:0x25139 with Constant Pattern 

14:30:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4052
14:30:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E0F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129810>, <py_sfcl.PySEnhancedCmdData object at 0x061297E0>, <None>) , Command count = 879 ] 
14:30:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:13: Host Frequency set to 25000 KHz
14:30:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C4B0>, 0x0, True) , Command count = 880 ] 
14:30:13: [GO18_globalSetVolt]### Host voltage value is set.
14:30:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E210>, 0x0, False) , Command count = 881 ] 
14:30:13: [GO18_globalSetVolt]### Host voltage value is set.
14:30:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 882 ] 
14:30:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 883 ] 
14:30:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 884 ] 
14:30:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CF0>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 885 ] 
14:30:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 886 ] 
14:30:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:13: [ SetCardRCA(0x1, 0xD555) , Command count = 887 ] 
14:30:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:13: Host Frequency set to 25000 KHz
14:30:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:13: ####CSD Registe 2.0 Values####
14:30:13: CSD_STRUCTURE                                 :0x1
14:30:13: Reserv1                                       :0x0
14:30:13: Time Access 1 TAAC                            :0xe
14:30:13: Time Access 2 NSAC*100                        :0x0
14:30:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:13: Card Command Classess CCC                     :0x5b5
14:30:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:13: DSR(driver stage register)  DSR_IMP           :0x0
14:30:13: Reserv2                                       :0x0
14:30:13: Device Size C_SIZE                            :0xedc8
14:30:13: Reserv3                                       :0x0
14:30:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:13: Reserv4                                       :0x0
14:30:13: Write Speed Factor R2W_FACTOR                 :0x2
14:30:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:13: FILE_FORMAT_GRP                               :0x0
14:30:13: COPY flag                                     :0x1
14:30:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:13: File_Format                                   :0x0
14:30:13: CRC                                           :0x0
14:30:13: ####CSD Registe Values####  

14:30:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:13: [GetSCRRegisterEntry] Passed
14:30:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:13: Data_Status_After Erases          : 0
14:30:13: CPRM Security Support             : No Security
14:30:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:13: Spec. Version                     : Version 3.0X
14:30:13: Extended Security Support         : Extended_Security_Not_Supported
14:30:13: Command Support                   : COMMAND_SUPPORT
14:30:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129DE0>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 888 ] 
14:30:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E180>, <py_sfcl.CommandDataDefinition object at 0x06129840>) , Command count = 889 ] 
14:30:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:13: [ SetBusWidth(0x4) , Command count = 890 ] 
14:30:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 891 ] 
14:30:13: Protected Area Size 0x28000
14:30:13: Bus Width           2
14:30:13: Secure Mode         0
14:30:13: Speed  Class        4
14:30:13: Perf Move           0
14:30:13: Au Size             9
14:30:13: Erase Size          15
14:30:13: Erase Timeout       1
14:30:13: Erase offset        1
14:30:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 892 ] 
14:30:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:13: Host Frequency set to 100000 KHz
14:30:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:14: ####CSD Registe 2.0 Values####
14:30:14: CSD_STRUCTURE                                 :0x1
14:30:14: Reserv1                                       :0x0
14:30:14: Time Access 1 TAAC                            :0xe
14:30:14: Time Access 2 NSAC*100                        :0x0
14:30:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:14: Card Command Classess CCC                     :0x5b5
14:30:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:14: DSR(driver stage register)  DSR_IMP           :0x0
14:30:14: Reserv2                                       :0x0
14:30:14: Device Size C_SIZE                            :0xedc8
14:30:14: Reserv3                                       :0x0
14:30:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:14: Reserv4                                       :0x0
14:30:14: Write Speed Factor R2W_FACTOR                 :0x2
14:30:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:14: FILE_FORMAT_GRP                               :0x0
14:30:14: COPY flag                                     :0x1
14:30:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:14: File_Format                                   :0x0
14:30:14: CRC                                           :0x0
14:30:14: ####CSD Registe Values####  

14:30:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E030>, <py_sfcl.CommandDataDefinition object at 0x06129780>) , Command count = 893 ] 
14:30:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8D0>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 894 ] 
14:30:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F77E to EndLba:0x3B6F7FE with One's Pattern
14:30:14: [ WrLbaNoData(0x3B6F77E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 895 ] 
14:30:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F77E to EndLba:0x3B6F7FE with One's Pattern 

14:30:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F7FE to EndLba:0x3B6F87E with One's Pattern
14:30:14: [ WrLbaNoData(0x3B6F7FE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 896 ] 
14:30:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F7FE to EndLba:0x3B6F87E with One's Pattern 

14:30:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2318F to EndLba:0x25139 with Constant Pattern
14:30:14: [ RdLbaNoData(0x2318F, 0x1FAA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 897 ] 
14:30:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2318F to EndLba:0x25139 with Constant Pattern 

14:30:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4051
14:30:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129BD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129EA0>, <py_sfcl.PySEnhancedCmdData object at 0x06129F30>, <None>) , Command count = 898 ] 
14:30:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:16: Host Frequency set to 25000 KHz
14:30:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E1E0>, 0x0, True) , Command count = 899 ] 
14:30:16: [GO18_globalSetVolt]### Host voltage value is set.
14:30:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F690>, 0x0, False) , Command count = 900 ] 
14:30:16: [GO18_globalSetVolt]### Host voltage value is set.
14:30:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 901 ] 
14:30:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 902 ] 
14:30:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 903 ] 
14:30:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x0612E930>) , Command count = 904 ] 
14:30:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2D0>, <py_sfcl.CommandDataDefinition object at 0x0612E3F0>) , Command count = 905 ] 
14:30:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:17: [ SetCardRCA(0x1, 0xD555) , Command count = 906 ] 
14:30:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:17: Host Frequency set to 25000 KHz
14:30:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:17: ####CSD Registe 2.0 Values####
14:30:17: CSD_STRUCTURE                                 :0x1
14:30:17: Reserv1                                       :0x0
14:30:17: Time Access 1 TAAC                            :0xe
14:30:17: Time Access 2 NSAC*100                        :0x0
14:30:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:17: Card Command Classess CCC                     :0x5b5
14:30:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:17: DSR(driver stage register)  DSR_IMP           :0x0
14:30:17: Reserv2                                       :0x0
14:30:17: Device Size C_SIZE                            :0xedc8
14:30:17: Reserv3                                       :0x0
14:30:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:17: Reserv4                                       :0x0
14:30:17: Write Speed Factor R2W_FACTOR                 :0x2
14:30:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:17: FILE_FORMAT_GRP                               :0x0
14:30:17: COPY flag                                     :0x1
14:30:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:17: File_Format                                   :0x0
14:30:17: CRC                                           :0x0
14:30:17: ####CSD Registe Values####  

14:30:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:17: [GetSCRRegisterEntry] Passed
14:30:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:17: Data_Status_After Erases          : 0
14:30:17: CPRM Security Support             : No Security
14:30:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:17: Spec. Version                     : Version 3.0X
14:30:17: Extended Security Support         : Extended_Security_Not_Supported
14:30:17: Command Support                   : COMMAND_SUPPORT
14:30:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x0612E2A0>) , Command count = 907 ] 
14:30:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x06129F90>) , Command count = 908 ] 
14:30:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:17: [ SetBusWidth(0x4) , Command count = 909 ] 
14:30:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 910 ] 
14:30:17: Protected Area Size 0x28000
14:30:17: Bus Width           2
14:30:17: Secure Mode         0
14:30:17: Speed  Class        4
14:30:17: Perf Move           0
14:30:17: Au Size             9
14:30:17: Erase Size          15
14:30:17: Erase Timeout       1
14:30:17: Erase offset        1
14:30:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 911 ] 
14:30:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:17: Host Frequency set to 100000 KHz
14:30:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:17: ####CSD Registe 2.0 Values####
14:30:17: CSD_STRUCTURE                                 :0x1
14:30:17: Reserv1                                       :0x0
14:30:17: Time Access 1 TAAC                            :0xe
14:30:17: Time Access 2 NSAC*100                        :0x0
14:30:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:17: Card Command Classess CCC                     :0x5b5
14:30:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:17: DSR(driver stage register)  DSR_IMP           :0x0
14:30:17: Reserv2                                       :0x0
14:30:17: Device Size C_SIZE                            :0xedc8
14:30:17: Reserv3                                       :0x0
14:30:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:17: Reserv4                                       :0x0
14:30:17: Write Speed Factor R2W_FACTOR                 :0x2
14:30:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:17: FILE_FORMAT_GRP                               :0x0
14:30:17: COPY flag                                     :0x1
14:30:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:17: File_Format                                   :0x0
14:30:17: CRC                                           :0x0
14:30:17: ####CSD Registe Values####  

14:30:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E690>, <py_sfcl.CommandDataDefinition object at 0x0612E6C0>) , Command count = 912 ] 
14:30:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x06129B40>) , Command count = 913 ] 
14:30:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704A4 to EndLba:0x3B70524 with One's Pattern
14:30:18: [ WrLbaNoData(0x3B704A4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 914 ] 
14:30:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704A4 to EndLba:0x3B70524 with One's Pattern 

14:30:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70524 to EndLba:0x3B705A4 with One's Pattern
14:30:18: [ WrLbaNoData(0x3B70524, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 915 ] 
14:30:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70524 to EndLba:0x3B705A4 with One's Pattern 

14:30:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2318F to EndLba:0x25137 with Constant Pattern
14:30:18: [ RdLbaNoData(0x2318F, 0x1FA8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 916 ] 
14:30:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2318F to EndLba:0x25137 with Constant Pattern 

14:30:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4050
14:30:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E8A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0612EE40>, <None>) , Command count = 917 ] 
14:30:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:20: Host Frequency set to 25000 KHz
14:30:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E1B0>, 0x0, True) , Command count = 918 ] 
14:30:20: [GO18_globalSetVolt]### Host voltage value is set.
14:30:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F810>, 0x0, False) , Command count = 919 ] 
14:30:20: [GO18_globalSetVolt]### Host voltage value is set.
14:30:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 920 ] 
14:30:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 921 ] 
14:30:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 922 ] 
14:30:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x0612EB40>) , Command count = 923 ] 
14:30:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E9F0>, <py_sfcl.CommandDataDefinition object at 0x0612E510>) , Command count = 924 ] 
14:30:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:20: [ SetCardRCA(0x1, 0xD555) , Command count = 925 ] 
14:30:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:20: Host Frequency set to 25000 KHz
14:30:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:20: ####CSD Registe 2.0 Values####
14:30:20: CSD_STRUCTURE                                 :0x1
14:30:20: Reserv1                                       :0x0
14:30:20: Time Access 1 TAAC                            :0xe
14:30:20: Time Access 2 NSAC*100                        :0x0
14:30:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:20: Card Command Classess CCC                     :0x5b5
14:30:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:20: DSR(driver stage register)  DSR_IMP           :0x0
14:30:20: Reserv2                                       :0x0
14:30:20: Device Size C_SIZE                            :0xedc8
14:30:20: Reserv3                                       :0x0
14:30:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:20: Reserv4                                       :0x0
14:30:20: Write Speed Factor R2W_FACTOR                 :0x2
14:30:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:20: FILE_FORMAT_GRP                               :0x0
14:30:20: COPY flag                                     :0x1
14:30:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:20: File_Format                                   :0x0
14:30:20: CRC                                           :0x0
14:30:20: ####CSD Registe Values####  

14:30:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:20: [GetSCRRegisterEntry] Passed
14:30:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:20: Data_Status_After Erases          : 0
14:30:20: CPRM Security Support             : No Security
14:30:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:20: Spec. Version                     : Version 3.0X
14:30:20: Extended Security Support         : Extended_Security_Not_Supported
14:30:20: Command Support                   : COMMAND_SUPPORT
14:30:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x0612EB70>) , Command count = 926 ] 
14:30:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x0612E720>) , Command count = 927 ] 
14:30:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:20: [ SetBusWidth(0x4) , Command count = 928 ] 
14:30:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E9C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 929 ] 
14:30:20: Protected Area Size 0x28000
14:30:20: Bus Width           2
14:30:20: Secure Mode         0
14:30:20: Speed  Class        4
14:30:20: Perf Move           0
14:30:20: Au Size             9
14:30:20: Erase Size          15
14:30:20: Erase Timeout       1
14:30:20: Erase offset        1
14:30:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 930 ] 
14:30:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:20: Host Frequency set to 100000 KHz
14:30:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:20: ####CSD Registe 2.0 Values####
14:30:20: CSD_STRUCTURE                                 :0x1
14:30:21: Reserv1                                       :0x0
14:30:21: Time Access 1 TAAC                            :0xe
14:30:21: Time Access 2 NSAC*100                        :0x0
14:30:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:21: Card Command Classess CCC                     :0x5b5
14:30:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:21: DSR(driver stage register)  DSR_IMP           :0x0
14:30:21: Reserv2                                       :0x0
14:30:21: Device Size C_SIZE                            :0xedc8
14:30:21: Reserv3                                       :0x0
14:30:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:21: Reserv4                                       :0x0
14:30:21: Write Speed Factor R2W_FACTOR                 :0x2
14:30:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:21: FILE_FORMAT_GRP                               :0x0
14:30:21: COPY flag                                     :0x1
14:30:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:21: File_Format                                   :0x0
14:30:21: CRC                                           :0x0
14:30:21: ####CSD Registe Values####  

14:30:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E35A0>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 931 ] 
14:30:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132750>, <py_sfcl.CommandDataDefinition object at 0x0613FE70>) , Command count = 932 ] 
14:30:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E97C to EndLba:0x3B6E9FC with One's Pattern
14:30:21: [ WrLbaNoData(0x3B6E97C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 933 ] 
14:30:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E97C to EndLba:0x3B6E9FC with One's Pattern 

14:30:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E9FC to EndLba:0x3B6EA7C with One's Pattern
14:30:21: [ WrLbaNoData(0x3B6E9FC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 934 ] 
14:30:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E9FC to EndLba:0x3B6EA7C with One's Pattern 

14:30:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23191 to EndLba:0x25137 with Constant Pattern
14:30:21: [ RdLbaNoData(0x23191, 0x1FA6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 935 ] 
14:30:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23191 to EndLba:0x25137 with Constant Pattern 

14:30:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4049
14:30:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061326C0>, <py_sfcl.PySEnhancedCmdData object at 0x0612EE70>, <None>) , Command count = 936 ] 
14:30:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:23: Host Frequency set to 25000 KHz
14:30:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E120>, 0x0, True) , Command count = 937 ] 
14:30:23: [GO18_globalSetVolt]### Host voltage value is set.
14:30:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EF60>, 0x0, False) , Command count = 938 ] 
14:30:23: [GO18_globalSetVolt]### Host voltage value is set.
14:30:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 939 ] 
14:30:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 940 ] 
14:30:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 941 ] 
14:30:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322A0>, <py_sfcl.CommandDataDefinition object at 0x061327B0>) , Command count = 942 ] 
14:30:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132150>, <py_sfcl.CommandDataDefinition object at 0x061328D0>) , Command count = 943 ] 
14:30:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:23: [ SetCardRCA(0x1, 0xD555) , Command count = 944 ] 
14:30:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:24: Host Frequency set to 25000 KHz
14:30:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:24: ####CSD Registe 2.0 Values####
14:30:24: CSD_STRUCTURE                                 :0x1
14:30:24: Reserv1                                       :0x0
14:30:24: Time Access 1 TAAC                            :0xe
14:30:24: Time Access 2 NSAC*100                        :0x0
14:30:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:24: Card Command Classess CCC                     :0x5b5
14:30:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:24: DSR(driver stage register)  DSR_IMP           :0x0
14:30:24: Reserv2                                       :0x0
14:30:24: Device Size C_SIZE                            :0xedc8
14:30:24: Reserv3                                       :0x0
14:30:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:24: Reserv4                                       :0x0
14:30:24: Write Speed Factor R2W_FACTOR                 :0x2
14:30:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:24: FILE_FORMAT_GRP                               :0x0
14:30:24: COPY flag                                     :0x1
14:30:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:24: File_Format                                   :0x0
14:30:24: CRC                                           :0x0
14:30:24: ####CSD Registe Values####  

14:30:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:24: [GetSCRRegisterEntry] Passed
14:30:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:24: Data_Status_After Erases          : 0
14:30:24: CPRM Security Support             : No Security
14:30:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:24: Spec. Version                     : Version 3.0X
14:30:24: Extended Security Support         : Extended_Security_Not_Supported
14:30:24: Command Support                   : COMMAND_SUPPORT
14:30:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132120>, <py_sfcl.CommandDataDefinition object at 0x0613FE70>) , Command count = 945 ] 
14:30:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 946 ] 
14:30:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:24: [ SetBusWidth(0x4) , Command count = 947 ] 
14:30:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 948 ] 
14:30:24: Protected Area Size 0x28000
14:30:24: Bus Width           2
14:30:24: Secure Mode         0
14:30:24: Speed  Class        4
14:30:24: Perf Move           0
14:30:24: Au Size             9
14:30:24: Erase Size          15
14:30:24: Erase Timeout       1
14:30:24: Erase offset        1
14:30:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 949 ] 
14:30:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:24: Host Frequency set to 100000 KHz
14:30:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:24: ####CSD Registe 2.0 Values####
14:30:24: CSD_STRUCTURE                                 :0x1
14:30:24: Reserv1                                       :0x0
14:30:24: Time Access 1 TAAC                            :0xe
14:30:24: Time Access 2 NSAC*100                        :0x0
14:30:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:24: Card Command Classess CCC                     :0x5b5
14:30:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:24: DSR(driver stage register)  DSR_IMP           :0x0
14:30:24: Reserv2                                       :0x0
14:30:24: Device Size C_SIZE                            :0xedc8
14:30:24: Reserv3                                       :0x0
14:30:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:24: Reserv4                                       :0x0
14:30:24: Write Speed Factor R2W_FACTOR                 :0x2
14:30:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:24: FILE_FORMAT_GRP                               :0x0
14:30:24: COPY flag                                     :0x1
14:30:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:24: File_Format                                   :0x0
14:30:24: CRC                                           :0x0
14:30:24: ####CSD Registe Values####  

14:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x06132540>) , Command count = 950 ] 
14:30:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 951 ] 
14:30:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D95B to EndLba:0x3B6D9DB with One's Pattern
14:30:24: [ WrLbaNoData(0x3B6D95B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 952 ] 
14:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D95B to EndLba:0x3B6D9DB with One's Pattern 

14:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D9DB to EndLba:0x3B6DA5B with One's Pattern
14:30:24: [ WrLbaNoData(0x3B6D9DB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 953 ] 
14:30:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D9DB to EndLba:0x3B6DA5B with One's Pattern 

14:30:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23191 to EndLba:0x25135 with Constant Pattern
14:30:24: [ RdLbaNoData(0x23191, 0x1FA4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 954 ] 
14:30:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23191 to EndLba:0x25135 with Constant Pattern 

14:30:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4048
14:30:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132D80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132DE0>, <py_sfcl.PySEnhancedCmdData object at 0x06132720>, <None>) , Command count = 955 ] 
14:30:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:27: Host Frequency set to 25000 KHz
14:30:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E810>, 0x0, True) , Command count = 956 ] 
14:30:27: [GO18_globalSetVolt]### Host voltage value is set.
14:30:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x061327E0>, 0x0, False) , Command count = 957 ] 
14:30:27: [GO18_globalSetVolt]### Host voltage value is set.
14:30:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 958 ] 
14:30:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 959 ] 
14:30:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 960 ] 
14:30:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 961 ] 
14:30:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x06132210>) , Command count = 962 ] 
14:30:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:27: [ SetCardRCA(0x1, 0xD555) , Command count = 963 ] 
14:30:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:27: Host Frequency set to 25000 KHz
14:30:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:27: ####CSD Registe 2.0 Values####
14:30:27: CSD_STRUCTURE                                 :0x1
14:30:27: Reserv1                                       :0x0
14:30:27: Time Access 1 TAAC                            :0xe
14:30:27: Time Access 2 NSAC*100                        :0x0
14:30:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:27: Card Command Classess CCC                     :0x5b5
14:30:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:27: DSR(driver stage register)  DSR_IMP           :0x0
14:30:27: Reserv2                                       :0x0
14:30:27: Device Size C_SIZE                            :0xedc8
14:30:27: Reserv3                                       :0x0
14:30:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:27: Reserv4                                       :0x0
14:30:27: Write Speed Factor R2W_FACTOR                 :0x2
14:30:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:27: FILE_FORMAT_GRP                               :0x0
14:30:27: COPY flag                                     :0x1
14:30:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:27: File_Format                                   :0x0
14:30:27: CRC                                           :0x0
14:30:27: ####CSD Registe Values####  

14:30:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:27: [GetSCRRegisterEntry] Passed
14:30:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:27: Data_Status_After Erases          : 0
14:30:27: CPRM Security Support             : No Security
14:30:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:27: Spec. Version                     : Version 3.0X
14:30:27: Extended Security Support         : Extended_Security_Not_Supported
14:30:27: Command Support                   : COMMAND_SUPPORT
14:30:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132990>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 964 ] 
14:30:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x061325A0>) , Command count = 965 ] 
14:30:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:27: [ SetBusWidth(0x4) , Command count = 966 ] 
14:30:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 967 ] 
14:30:27: Protected Area Size 0x28000
14:30:27: Bus Width           2
14:30:27: Secure Mode         0
14:30:27: Speed  Class        4
14:30:27: Perf Move           0
14:30:27: Au Size             9
14:30:27: Erase Size          15
14:30:27: Erase Timeout       1
14:30:27: Erase offset        1
14:30:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 968 ] 
14:30:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:27: Host Frequency set to 100000 KHz
14:30:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:27: ####CSD Registe 2.0 Values####
14:30:27: CSD_STRUCTURE                                 :0x1
14:30:27: Reserv1                                       :0x0
14:30:27: Time Access 1 TAAC                            :0xe
14:30:27: Time Access 2 NSAC*100                        :0x0
14:30:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:27: Card Command Classess CCC                     :0x5b5
14:30:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:27: DSR(driver stage register)  DSR_IMP           :0x0
14:30:27: Reserv2                                       :0x0
14:30:27: Device Size C_SIZE                            :0xedc8
14:30:27: Reserv3                                       :0x0
14:30:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:28: Reserv4                                       :0x0
14:30:28: Write Speed Factor R2W_FACTOR                 :0x2
14:30:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:28: FILE_FORMAT_GRP                               :0x0
14:30:28: COPY flag                                     :0x1
14:30:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:28: File_Format                                   :0x0
14:30:28: CRC                                           :0x0
14:30:28: ####CSD Registe Values####  

14:30:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061383F0>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 969 ] 
14:30:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x06132B70>) , Command count = 970 ] 
14:30:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71DF4 to EndLba:0x3B71E74 with One's Pattern
14:30:28: [ WrLbaNoData(0x3B71DF4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 971 ] 
14:30:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71DF4 to EndLba:0x3B71E74 with One's Pattern 

14:30:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71E74 to EndLba:0x3B71EF4 with One's Pattern
14:30:28: [ WrLbaNoData(0x3B71E74, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 972 ] 
14:30:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71E74 to EndLba:0x3B71EF4 with One's Pattern 

14:30:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23193 to EndLba:0x25135 with Constant Pattern
14:30:28: [ RdLbaNoData(0x23193, 0x1FA2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 973 ] 
14:30:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23193 to EndLba:0x25135 with Constant Pattern 

14:30:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4047
14:30:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061384E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138540>, <py_sfcl.PySEnhancedCmdData object at 0x06132C60>, <None>) , Command count = 974 ] 
14:30:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:30: Host Frequency set to 25000 KHz
14:30:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x061320C0>, 0x0, True) , Command count = 975 ] 
14:30:30: [GO18_globalSetVolt]### Host voltage value is set.
14:30:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132F00>, 0x0, False) , Command count = 976 ] 
14:30:30: [GO18_globalSetVolt]### Host voltage value is set.
14:30:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 977 ] 
14:30:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 978 ] 
14:30:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 979 ] 
14:30:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06138630>) , Command count = 980 ] 
14:30:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138030>, <py_sfcl.CommandDataDefinition object at 0x06132EA0>) , Command count = 981 ] 
14:30:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:30: [ SetCardRCA(0x1, 0xD555) , Command count = 982 ] 
14:30:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:30: Host Frequency set to 25000 KHz
14:30:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:30: ####CSD Registe 2.0 Values####
14:30:30: CSD_STRUCTURE                                 :0x1
14:30:30: Reserv1                                       :0x0
14:30:30: Time Access 1 TAAC                            :0xe
14:30:30: Time Access 2 NSAC*100                        :0x0
14:30:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:30: Card Command Classess CCC                     :0x5b5
14:30:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:30: DSR(driver stage register)  DSR_IMP           :0x0
14:30:30: Reserv2                                       :0x0
14:30:30: Device Size C_SIZE                            :0xedc8
14:30:30: Reserv3                                       :0x0
14:30:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:30: Reserv4                                       :0x0
14:30:30: Write Speed Factor R2W_FACTOR                 :0x2
14:30:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:30: FILE_FORMAT_GRP                               :0x0
14:30:30: COPY flag                                     :0x1
14:30:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:30: File_Format                                   :0x0
14:30:30: CRC                                           :0x0
14:30:30: ####CSD Registe Values####  

14:30:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:30: [GetSCRRegisterEntry] Passed
14:30:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:30: Data_Status_After Erases          : 0
14:30:30: CPRM Security Support             : No Security
14:30:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:30: Spec. Version                     : Version 3.0X
14:30:30: Extended Security Support         : Extended_Security_Not_Supported
14:30:30: Command Support                   : COMMAND_SUPPORT
14:30:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138360>, <py_sfcl.CommandDataDefinition object at 0x06132F30>) , Command count = 983 ] 
14:30:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132CF0>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 984 ] 
14:30:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:30: [ SetBusWidth(0x4) , Command count = 985 ] 
14:30:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 986 ] 
14:30:30: Protected Area Size 0x28000
14:30:30: Bus Width           2
14:30:30: Secure Mode         0
14:30:30: Speed  Class        4
14:30:30: Perf Move           0
14:30:30: Au Size             9
14:30:30: Erase Size          15
14:30:30: Erase Timeout       1
14:30:30: Erase offset        1
14:30:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 987 ] 
14:30:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:31: Host Frequency set to 100000 KHz
14:30:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:31: ####CSD Registe 2.0 Values####
14:30:31: CSD_STRUCTURE                                 :0x1
14:30:31: Reserv1                                       :0x0
14:30:31: Time Access 1 TAAC                            :0xe
14:30:31: Time Access 2 NSAC*100                        :0x0
14:30:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:31: Card Command Classess CCC                     :0x5b5
14:30:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:31: DSR(driver stage register)  DSR_IMP           :0x0
14:30:31: Reserv2                                       :0x0
14:30:31: Device Size C_SIZE                            :0xedc8
14:30:31: Reserv3                                       :0x0
14:30:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:31: Reserv4                                       :0x0
14:30:31: Write Speed Factor R2W_FACTOR                 :0x2
14:30:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:31: FILE_FORMAT_GRP                               :0x0
14:30:31: COPY flag                                     :0x1
14:30:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:31: File_Format                                   :0x0
14:30:31: CRC                                           :0x0
14:30:31: ####CSD Registe Values####  

14:30:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138390>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 988 ] 
14:30:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x061382D0>) , Command count = 989 ] 
14:30:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EFAB to EndLba:0x3B6F02B with One's Pattern
14:30:31: [ WrLbaNoData(0x3B6EFAB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 990 ] 
14:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EFAB to EndLba:0x3B6F02B with One's Pattern 

14:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F02B to EndLba:0x3B6F0AB with One's Pattern
14:30:31: [ WrLbaNoData(0x3B6F02B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 991 ] 
14:30:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F02B to EndLba:0x3B6F0AB with One's Pattern 

14:30:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23193 to EndLba:0x25133 with Constant Pattern
14:30:31: [ RdLbaNoData(0x23193, 0x1FA0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 992 ] 
14:30:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23193 to EndLba:0x25133 with Constant Pattern 

14:30:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4046
14:30:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138C00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061386C0>, <py_sfcl.PySEnhancedCmdData object at 0x06138420>, <None>) , Command count = 993 ] 
14:30:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:33: Host Frequency set to 25000 KHz
14:30:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132690>, 0x0, True) , Command count = 994 ] 
14:30:33: [GO18_globalSetVolt]### Host voltage value is set.
14:30:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138660>, 0x0, False) , Command count = 995 ] 
14:30:33: [GO18_globalSetVolt]### Host voltage value is set.
14:30:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 996 ] 
14:30:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 997 ] 
14:30:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 998 ] 
14:30:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138840>, <py_sfcl.CommandDataDefinition object at 0x06138D50>) , Command count = 999 ] 
14:30:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061386F0>, <py_sfcl.CommandDataDefinition object at 0x061380C0>) , Command count = 1000 ] 
14:30:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1001 ] 
14:30:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:34: Host Frequency set to 25000 KHz
14:30:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:34: ####CSD Registe 2.0 Values####
14:30:34: CSD_STRUCTURE                                 :0x1
14:30:34: Reserv1                                       :0x0
14:30:34: Time Access 1 TAAC                            :0xe
14:30:34: Time Access 2 NSAC*100                        :0x0
14:30:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:34: Card Command Classess CCC                     :0x5b5
14:30:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:34: DSR(driver stage register)  DSR_IMP           :0x0
14:30:34: Reserv2                                       :0x0
14:30:34: Device Size C_SIZE                            :0xedc8
14:30:34: Reserv3                                       :0x0
14:30:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:34: Reserv4                                       :0x0
14:30:34: Write Speed Factor R2W_FACTOR                 :0x2
14:30:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:34: FILE_FORMAT_GRP                               :0x0
14:30:34: COPY flag                                     :0x1
14:30:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:34: File_Format                                   :0x0
14:30:34: CRC                                           :0x0
14:30:34: ####CSD Registe Values####  

14:30:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:34: [GetSCRRegisterEntry] Passed
14:30:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:34: Data_Status_After Erases          : 0
14:30:34: CPRM Security Support             : No Security
14:30:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:34: Spec. Version                     : Version 3.0X
14:30:34: Extended Security Support         : Extended_Security_Not_Supported
14:30:34: Command Support                   : COMMAND_SUPPORT
14:30:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138720>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 1002 ] 
14:30:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C90>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 1003 ] 
14:30:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:34: [ SetBusWidth(0x4) , Command count = 1004 ] 
14:30:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1005 ] 
14:30:34: Protected Area Size 0x28000
14:30:34: Bus Width           2
14:30:34: Secure Mode         0
14:30:34: Speed  Class        4
14:30:34: Perf Move           0
14:30:34: Au Size             9
14:30:34: Erase Size          15
14:30:34: Erase Timeout       1
14:30:34: Erase offset        1
14:30:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1006 ] 
14:30:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:34: Host Frequency set to 100000 KHz
14:30:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:34: ####CSD Registe 2.0 Values####
14:30:34: CSD_STRUCTURE                                 :0x1
14:30:34: Reserv1                                       :0x0
14:30:34: Time Access 1 TAAC                            :0xe
14:30:34: Time Access 2 NSAC*100                        :0x0
14:30:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:34: Card Command Classess CCC                     :0x5b5
14:30:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:34: DSR(driver stage register)  DSR_IMP           :0x0
14:30:34: Reserv2                                       :0x0
14:30:34: Device Size C_SIZE                            :0xedc8
14:30:34: Reserv3                                       :0x0
14:30:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:34: Reserv4                                       :0x0
14:30:34: Write Speed Factor R2W_FACTOR                 :0x2
14:30:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:34: FILE_FORMAT_GRP                               :0x0
14:30:34: COPY flag                                     :0x1
14:30:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:34: File_Format                                   :0x0
14:30:34: CRC                                           :0x0
14:30:34: ####CSD Registe Values####  

14:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138AE0>, <py_sfcl.CommandDataDefinition object at 0x06138AB0>) , Command count = 1007 ] 
14:30:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A20>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 1008 ] 
14:30:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D7F6 to EndLba:0x3B6D876 with One's Pattern
14:30:34: [ WrLbaNoData(0x3B6D7F6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1009 ] 
14:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D7F6 to EndLba:0x3B6D876 with One's Pattern 

14:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D876 to EndLba:0x3B6D8F6 with One's Pattern
14:30:34: [ WrLbaNoData(0x3B6D876, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1010 ] 
14:30:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D876 to EndLba:0x3B6D8F6 with One's Pattern 

14:30:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23195 to EndLba:0x25133 with Constant Pattern
14:30:35: [ RdLbaNoData(0x23195, 0x1F9E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1011 ] 
14:30:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23195 to EndLba:0x25133 with Constant Pattern 

14:30:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4045
14:30:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FE10>, <py_sfcl.PySEnhancedCmdData object at 0x0613F270>, <None>) , Command count = 1012 ] 
14:30:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:37: Host Frequency set to 25000 KHz
14:30:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132DB0>, 0x0, True) , Command count = 1013 ] 
14:30:37: [GO18_globalSetVolt]### Host voltage value is set.
14:30:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06145150>, 0x0, False) , Command count = 1014 ] 
14:30:37: [GO18_globalSetVolt]### Host voltage value is set.
14:30:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1015 ] 
14:30:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1016 ] 
14:30:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1017 ] 
14:30:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x06138F60>) , Command count = 1018 ] 
14:30:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E10>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 1019 ] 
14:30:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1020 ] 
14:30:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:37: Host Frequency set to 25000 KHz
14:30:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:37: ####CSD Registe 2.0 Values####
14:30:37: CSD_STRUCTURE                                 :0x1
14:30:37: Reserv1                                       :0x0
14:30:37: Time Access 1 TAAC                            :0xe
14:30:37: Time Access 2 NSAC*100                        :0x0
14:30:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:37: Card Command Classess CCC                     :0x5b5
14:30:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:37: DSR(driver stage register)  DSR_IMP           :0x0
14:30:37: Reserv2                                       :0x0
14:30:37: Device Size C_SIZE                            :0xedc8
14:30:37: Reserv3                                       :0x0
14:30:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:37: Reserv4                                       :0x0
14:30:37: Write Speed Factor R2W_FACTOR                 :0x2
14:30:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:37: FILE_FORMAT_GRP                               :0x0
14:30:37: COPY flag                                     :0x1
14:30:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:37: File_Format                                   :0x0
14:30:37: CRC                                           :0x0
14:30:37: ####CSD Registe Values####  

14:30:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:37: [GetSCRRegisterEntry] Passed
14:30:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:37: Data_Status_After Erases          : 0
14:30:37: CPRM Security Support             : No Security
14:30:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:37: Spec. Version                     : Version 3.0X
14:30:37: Extended Security Support         : Extended_Security_Not_Supported
14:30:37: Command Support                   : COMMAND_SUPPORT
14:30:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F30>, <py_sfcl.CommandDataDefinition object at 0x06138F90>) , Command count = 1021 ] 
14:30:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x0613F030>) , Command count = 1022 ] 
14:30:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:37: [ SetBusWidth(0x4) , Command count = 1023 ] 
14:30:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1024 ] 
14:30:37: Protected Area Size 0x28000
14:30:37: Bus Width           2
14:30:37: Secure Mode         0
14:30:37: Speed  Class        4
14:30:37: Perf Move           0
14:30:37: Au Size             9
14:30:37: Erase Size          15
14:30:37: Erase Timeout       1
14:30:37: Erase offset        1
14:30:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1025 ] 
14:30:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:37: Host Frequency set to 100000 KHz
14:30:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:37: ####CSD Registe 2.0 Values####
14:30:37: CSD_STRUCTURE                                 :0x1
14:30:37: Reserv1                                       :0x0
14:30:37: Time Access 1 TAAC                            :0xe
14:30:37: Time Access 2 NSAC*100                        :0x0
14:30:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:37: Card Command Classess CCC                     :0x5b5
14:30:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:37: DSR(driver stage register)  DSR_IMP           :0x0
14:30:37: Reserv2                                       :0x0
14:30:37: Device Size C_SIZE                            :0xedc8
14:30:37: Reserv3                                       :0x0
14:30:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:38: Reserv4                                       :0x0
14:30:38: Write Speed Factor R2W_FACTOR                 :0x2
14:30:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:38: FILE_FORMAT_GRP                               :0x0
14:30:38: COPY flag                                     :0x1
14:30:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:38: File_Format                                   :0x0
14:30:38: CRC                                           :0x0
14:30:38: ####CSD Registe Values####  

14:30:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052577E0>, <py_sfcl.CommandDataDefinition object at 0x0613F120>) , Command count = 1026 ] 
14:30:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 1027 ] 
14:30:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71CEE to EndLba:0x3B71D6E with One's Pattern
14:30:38: [ WrLbaNoData(0x3B71CEE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1028 ] 
14:30:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71CEE to EndLba:0x3B71D6E with One's Pattern 

14:30:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71D6E to EndLba:0x3B71DEE with One's Pattern
14:30:38: [ WrLbaNoData(0x3B71D6E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1029 ] 
14:30:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71D6E to EndLba:0x3B71DEE with One's Pattern 

14:30:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23195 to EndLba:0x25131 with Constant Pattern
14:30:38: [ RdLbaNoData(0x23195, 0x1F9C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1030 ] 
14:30:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23195 to EndLba:0x25131 with Constant Pattern 

14:30:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4044
14:30:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BB930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F6C0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F240>, <None>) , Command count = 1031 ] 
14:30:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:40: Host Frequency set to 25000 KHz
14:30:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138510>, 0x0, True) , Command count = 1032 ] 
14:30:40: [GO18_globalSetVolt]### Host voltage value is set.
14:30:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF1B0>, 0x0, False) , Command count = 1033 ] 
14:30:40: [GO18_globalSetVolt]### Host voltage value is set.
14:30:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1034 ] 
14:30:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1035 ] 
14:30:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1036 ] 
14:30:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x0613FF60>) , Command count = 1037 ] 
14:30:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF240>, <py_sfcl.CommandDataDefinition object at 0x052AF270>) , Command count = 1038 ] 
14:30:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1039 ] 
14:30:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:41: Host Frequency set to 25000 KHz
14:30:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:41: ####CSD Registe 2.0 Values####
14:30:41: CSD_STRUCTURE                                 :0x1
14:30:41: Reserv1                                       :0x0
14:30:41: Time Access 1 TAAC                            :0xe
14:30:41: Time Access 2 NSAC*100                        :0x0
14:30:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:41: Card Command Classess CCC                     :0x5b5
14:30:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:41: DSR(driver stage register)  DSR_IMP           :0x0
14:30:41: Reserv2                                       :0x0
14:30:41: Device Size C_SIZE                            :0xedc8
14:30:41: Reserv3                                       :0x0
14:30:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:41: Reserv4                                       :0x0
14:30:41: Write Speed Factor R2W_FACTOR                 :0x2
14:30:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:41: FILE_FORMAT_GRP                               :0x0
14:30:41: COPY flag                                     :0x1
14:30:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:41: File_Format                                   :0x0
14:30:41: CRC                                           :0x0
14:30:41: ####CSD Registe Values####  

14:30:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:41: [GetSCRRegisterEntry] Passed
14:30:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:41: Data_Status_After Erases          : 0
14:30:41: CPRM Security Support             : No Security
14:30:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:41: Spec. Version                     : Version 3.0X
14:30:41: Extended Security Support         : Extended_Security_Not_Supported
14:30:41: Command Support                   : COMMAND_SUPPORT
14:30:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFC60>, <py_sfcl.CommandDataDefinition object at 0x052AF1E0>) , Command count = 1040 ] 
14:30:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C30>, <py_sfcl.CommandDataDefinition object at 0x0613F660>) , Command count = 1041 ] 
14:30:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:41: [ SetBusWidth(0x4) , Command count = 1042 ] 
14:30:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1043 ] 
14:30:41: Protected Area Size 0x28000
14:30:41: Bus Width           2
14:30:41: Secure Mode         0
14:30:41: Speed  Class        4
14:30:41: Perf Move           0
14:30:41: Au Size             9
14:30:41: Erase Size          15
14:30:41: Erase Timeout       1
14:30:41: Erase offset        1
14:30:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1044 ] 
14:30:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:41: Host Frequency set to 100000 KHz
14:30:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:41: ####CSD Registe 2.0 Values####
14:30:41: CSD_STRUCTURE                                 :0x1
14:30:41: Reserv1                                       :0x0
14:30:41: Time Access 1 TAAC                            :0xe
14:30:41: Time Access 2 NSAC*100                        :0x0
14:30:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:41: Card Command Classess CCC                     :0x5b5
14:30:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:41: DSR(driver stage register)  DSR_IMP           :0x0
14:30:41: Reserv2                                       :0x0
14:30:41: Device Size C_SIZE                            :0xedc8
14:30:41: Reserv3                                       :0x0
14:30:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:41: Reserv4                                       :0x0
14:30:41: Write Speed Factor R2W_FACTOR                 :0x2
14:30:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:41: FILE_FORMAT_GRP                               :0x0
14:30:41: COPY flag                                     :0x1
14:30:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:41: File_Format                                   :0x0
14:30:41: CRC                                           :0x0
14:30:41: ####CSD Registe Values####  

14:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1A50>, <py_sfcl.CommandDataDefinition object at 0x052AFEA0>) , Command count = 1045 ] 
14:30:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 1046 ] 
14:30:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA81 to EndLba:0x3B6FB01 with One's Pattern
14:30:41: [ WrLbaNoData(0x3B6FA81, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1047 ] 
14:30:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA81 to EndLba:0x3B6FB01 with One's Pattern 

14:30:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FB01 to EndLba:0x3B6FB81 with One's Pattern
14:30:41: [ WrLbaNoData(0x3B6FB01, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1048 ] 
14:30:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FB01 to EndLba:0x3B6FB81 with One's Pattern 

14:30:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23197 to EndLba:0x25131 with Constant Pattern
14:30:41: [ RdLbaNoData(0x23197, 0x1F9A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1049 ] 
14:30:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23197 to EndLba:0x25131 with Constant Pattern 

14:30:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4043
14:30:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E38A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F420>, <py_sfcl.PySEnhancedCmdData object at 0x0613F5A0>, <None>) , Command count = 1050 ] 
14:30:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:43: Host Frequency set to 25000 KHz
14:30:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138C30>, 0x0, True) , Command count = 1051 ] 
14:30:43: [GO18_globalSetVolt]### Host voltage value is set.
14:30:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C90>, 0x0, False) , Command count = 1052 ] 
14:30:44: [GO18_globalSetVolt]### Host voltage value is set.
14:30:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1053 ] 
14:30:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1054 ] 
14:30:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1055 ] 
14:30:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613F150>) , Command count = 1056 ] 
14:30:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1DE0>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 1057 ] 
14:30:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1058 ] 
14:30:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:44: Host Frequency set to 25000 KHz
14:30:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:44: ####CSD Registe 2.0 Values####
14:30:44: CSD_STRUCTURE                                 :0x1
14:30:44: Reserv1                                       :0x0
14:30:44: Time Access 1 TAAC                            :0xe
14:30:44: Time Access 2 NSAC*100                        :0x0
14:30:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:44: Card Command Classess CCC                     :0x5b5
14:30:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:44: DSR(driver stage register)  DSR_IMP           :0x0
14:30:44: Reserv2                                       :0x0
14:30:44: Device Size C_SIZE                            :0xedc8
14:30:44: Reserv3                                       :0x0
14:30:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:44: Reserv4                                       :0x0
14:30:44: Write Speed Factor R2W_FACTOR                 :0x2
14:30:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:44: FILE_FORMAT_GRP                               :0x0
14:30:44: COPY flag                                     :0x1
14:30:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:44: File_Format                                   :0x0
14:30:44: CRC                                           :0x0
14:30:44: ####CSD Registe Values####  

14:30:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:44: [GetSCRRegisterEntry] Passed
14:30:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:44: Data_Status_After Erases          : 0
14:30:44: CPRM Security Support             : No Security
14:30:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:44: Spec. Version                     : Version 3.0X
14:30:44: Extended Security Support         : Extended_Security_Not_Supported
14:30:44: Command Support                   : COMMAND_SUPPORT
14:30:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529B4B0>, <py_sfcl.CommandDataDefinition object at 0x0613F720>) , Command count = 1059 ] 
14:30:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x0613F990>) , Command count = 1060 ] 
14:30:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:44: [ SetBusWidth(0x4) , Command count = 1061 ] 
14:30:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1062 ] 
14:30:44: Protected Area Size 0x28000
14:30:44: Bus Width           2
14:30:44: Secure Mode         0
14:30:44: Speed  Class        4
14:30:44: Perf Move           0
14:30:44: Au Size             9
14:30:44: Erase Size          15
14:30:44: Erase Timeout       1
14:30:44: Erase offset        1
14:30:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1063 ] 
14:30:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:44: Host Frequency set to 100000 KHz
14:30:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:44: ####CSD Registe 2.0 Values####
14:30:44: CSD_STRUCTURE                                 :0x1
14:30:44: Reserv1                                       :0x0
14:30:44: Time Access 1 TAAC                            :0xe
14:30:44: Time Access 2 NSAC*100                        :0x0
14:30:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:44: Card Command Classess CCC                     :0x5b5
14:30:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:44: DSR(driver stage register)  DSR_IMP           :0x0
14:30:44: Reserv2                                       :0x0
14:30:44: Device Size C_SIZE                            :0xedc8
14:30:44: Reserv3                                       :0x0
14:30:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:45: Reserv4                                       :0x0
14:30:45: Write Speed Factor R2W_FACTOR                 :0x2
14:30:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:45: FILE_FORMAT_GRP                               :0x0
14:30:45: COPY flag                                     :0x1
14:30:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:45: File_Format                                   :0x0
14:30:45: CRC                                           :0x0
14:30:45: ####CSD Registe Values####  

14:30:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F4E0>, <py_sfcl.CommandDataDefinition object at 0x060E37B0>) , Command count = 1064 ] 
14:30:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1B0>, <py_sfcl.CommandDataDefinition object at 0x0613F7E0>) , Command count = 1065 ] 
14:30:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7089E to EndLba:0x3B7091E with One's Pattern
14:30:45: [ WrLbaNoData(0x3B7089E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1066 ] 
14:30:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7089E to EndLba:0x3B7091E with One's Pattern 

14:30:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7091E to EndLba:0x3B7099E with One's Pattern
14:30:45: [ WrLbaNoData(0x3B7091E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1067 ] 
14:30:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7091E to EndLba:0x3B7099E with One's Pattern 

14:30:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23197 to EndLba:0x2512F with Constant Pattern
14:30:45: [ RdLbaNoData(0x23197, 0x1F98, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1068 ] 
14:30:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23197 to EndLba:0x2512F with Constant Pattern 

14:30:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4042
14:30:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E39F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3AE0>, <py_sfcl.PySEnhancedCmdData object at 0x0613FA80>, <None>) , Command count = 1069 ] 
14:30:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:47: Host Frequency set to 25000 KHz
14:30:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0525E180>, 0x0, True) , Command count = 1070 ] 
14:30:47: [GO18_globalSetVolt]### Host voltage value is set.
14:30:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E780>, 0x0, False) , Command count = 1071 ] 
14:30:47: [GO18_globalSetVolt]### Host voltage value is set.
14:30:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1072 ] 
14:30:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1073 ] 
14:30:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1074 ] 
14:30:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0613F960>) , Command count = 1075 ] 
14:30:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3780>, <py_sfcl.CommandDataDefinition object at 0x0611C1B0>) , Command count = 1076 ] 
14:30:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1077 ] 
14:30:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:47: Host Frequency set to 25000 KHz
14:30:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:47: ####CSD Registe 2.0 Values####
14:30:47: CSD_STRUCTURE                                 :0x1
14:30:47: Reserv1                                       :0x0
14:30:47: Time Access 1 TAAC                            :0xe
14:30:47: Time Access 2 NSAC*100                        :0x0
14:30:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:47: Card Command Classess CCC                     :0x5b5
14:30:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:47: DSR(driver stage register)  DSR_IMP           :0x0
14:30:47: Reserv2                                       :0x0
14:30:47: Device Size C_SIZE                            :0xedc8
14:30:47: Reserv3                                       :0x0
14:30:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:47: Reserv4                                       :0x0
14:30:47: Write Speed Factor R2W_FACTOR                 :0x2
14:30:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:47: FILE_FORMAT_GRP                               :0x0
14:30:47: COPY flag                                     :0x1
14:30:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:47: File_Format                                   :0x0
14:30:47: CRC                                           :0x0
14:30:47: ####CSD Registe Values####  

14:30:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:47: [GetSCRRegisterEntry] Passed
14:30:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:47: Data_Status_After Erases          : 0
14:30:47: CPRM Security Support             : No Security
14:30:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:47: Spec. Version                     : Version 3.0X
14:30:47: Extended Security Support         : Extended_Security_Not_Supported
14:30:47: Command Support                   : COMMAND_SUPPORT
14:30:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC60>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 1078 ] 
14:30:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x060E3EA0>) , Command count = 1079 ] 
14:30:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:47: [ SetBusWidth(0x4) , Command count = 1080 ] 
14:30:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E3750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1081 ] 
14:30:47: Protected Area Size 0x28000
14:30:47: Bus Width           2
14:30:47: Secure Mode         0
14:30:47: Speed  Class        4
14:30:47: Perf Move           0
14:30:47: Au Size             9
14:30:47: Erase Size          15
14:30:47: Erase Timeout       1
14:30:47: Erase offset        1
14:30:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1082 ] 
14:30:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:48: Host Frequency set to 100000 KHz
14:30:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:48: ####CSD Registe 2.0 Values####
14:30:48: CSD_STRUCTURE                                 :0x1
14:30:48: Reserv1                                       :0x0
14:30:48: Time Access 1 TAAC                            :0xe
14:30:48: Time Access 2 NSAC*100                        :0x0
14:30:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:48: Card Command Classess CCC                     :0x5b5
14:30:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:48: DSR(driver stage register)  DSR_IMP           :0x0
14:30:48: Reserv2                                       :0x0
14:30:48: Device Size C_SIZE                            :0xedc8
14:30:48: Reserv3                                       :0x0
14:30:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:48: Reserv4                                       :0x0
14:30:48: Write Speed Factor R2W_FACTOR                 :0x2
14:30:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:48: FILE_FORMAT_GRP                               :0x0
14:30:48: COPY flag                                     :0x1
14:30:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:48: File_Format                                   :0x0
14:30:48: CRC                                           :0x0
14:30:48: ####CSD Registe Values####  

14:30:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F660>, <py_sfcl.CommandDataDefinition object at 0x0611C060>) , Command count = 1083 ] 
14:30:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF90>, <py_sfcl.CommandDataDefinition object at 0x0613F0C0>) , Command count = 1084 ] 
14:30:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EAC1 to EndLba:0x3B6EB41 with One's Pattern
14:30:48: [ WrLbaNoData(0x3B6EAC1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1085 ] 
14:30:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EAC1 to EndLba:0x3B6EB41 with One's Pattern 

14:30:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB41 to EndLba:0x3B6EBC1 with One's Pattern
14:30:48: [ WrLbaNoData(0x3B6EB41, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1086 ] 
14:30:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB41 to EndLba:0x3B6EBC1 with One's Pattern 

14:30:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23199 to EndLba:0x2512F with Constant Pattern
14:30:48: [ RdLbaNoData(0x23199, 0x1F96, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1087 ] 
14:30:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23199 to EndLba:0x2512F with Constant Pattern 

14:30:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4041
14:30:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C030>, <py_sfcl.PySEnhancedCmdData object at 0x0611C600>, <None>) , Command count = 1088 ] 
14:30:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:50: Host Frequency set to 25000 KHz
14:30:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3690>, 0x0, True) , Command count = 1089 ] 
14:30:50: [GO18_globalSetVolt]### Host voltage value is set.
14:30:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CAB0>, 0x0, False) , Command count = 1090 ] 
14:30:50: [GO18_globalSetVolt]### Host voltage value is set.
14:30:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1091 ] 
14:30:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1092 ] 
14:30:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1093 ] 
14:30:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA20>, <py_sfcl.CommandDataDefinition object at 0x0611C840>) , Command count = 1094 ] 
14:30:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C0F0>, <py_sfcl.CommandDataDefinition object at 0x0611CF00>) , Command count = 1095 ] 
14:30:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1096 ] 
14:30:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:51: Host Frequency set to 25000 KHz
14:30:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:51: ####CSD Registe 2.0 Values####
14:30:51: CSD_STRUCTURE                                 :0x1
14:30:51: Reserv1                                       :0x0
14:30:51: Time Access 1 TAAC                            :0xe
14:30:51: Time Access 2 NSAC*100                        :0x0
14:30:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:51: Card Command Classess CCC                     :0x5b5
14:30:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:51: DSR(driver stage register)  DSR_IMP           :0x0
14:30:51: Reserv2                                       :0x0
14:30:51: Device Size C_SIZE                            :0xedc8
14:30:51: Reserv3                                       :0x0
14:30:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:51: Reserv4                                       :0x0
14:30:51: Write Speed Factor R2W_FACTOR                 :0x2
14:30:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:51: FILE_FORMAT_GRP                               :0x0
14:30:51: COPY flag                                     :0x1
14:30:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:51: File_Format                                   :0x0
14:30:51: CRC                                           :0x0
14:30:51: ####CSD Registe Values####  

14:30:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:51: [GetSCRRegisterEntry] Passed
14:30:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:51: Data_Status_After Erases          : 0
14:30:51: CPRM Security Support             : No Security
14:30:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:51: Spec. Version                     : Version 3.0X
14:30:51: Extended Security Support         : Extended_Security_Not_Supported
14:30:51: Command Support                   : COMMAND_SUPPORT
14:30:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9C0>, <py_sfcl.CommandDataDefinition object at 0x0613FE40>) , Command count = 1097 ] 
14:30:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129210>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 1098 ] 
14:30:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:51: [ SetBusWidth(0x4) , Command count = 1099 ] 
14:30:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1100 ] 
14:30:51: Protected Area Size 0x28000
14:30:51: Bus Width           2
14:30:51: Secure Mode         0
14:30:51: Speed  Class        4
14:30:51: Perf Move           0
14:30:51: Au Size             9
14:30:51: Erase Size          15
14:30:51: Erase Timeout       1
14:30:51: Erase offset        1
14:30:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1101 ] 
14:30:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:51: Host Frequency set to 100000 KHz
14:30:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:51: ####CSD Registe 2.0 Values####
14:30:51: CSD_STRUCTURE                                 :0x1
14:30:51: Reserv1                                       :0x0
14:30:51: Time Access 1 TAAC                            :0xe
14:30:51: Time Access 2 NSAC*100                        :0x0
14:30:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:51: Card Command Classess CCC                     :0x5b5
14:30:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:51: DSR(driver stage register)  DSR_IMP           :0x0
14:30:51: Reserv2                                       :0x0
14:30:51: Device Size C_SIZE                            :0xedc8
14:30:51: Reserv3                                       :0x0
14:30:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:51: Reserv4                                       :0x0
14:30:51: Write Speed Factor R2W_FACTOR                 :0x2
14:30:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:51: FILE_FORMAT_GRP                               :0x0
14:30:51: COPY flag                                     :0x1
14:30:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:51: File_Format                                   :0x0
14:30:51: CRC                                           :0x0
14:30:51: ####CSD Registe Values####  

14:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129570>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 1102 ] 
14:30:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 1103 ] 
14:30:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E8BA to EndLba:0x3B6E93A with One's Pattern
14:30:51: [ WrLbaNoData(0x3B6E8BA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1104 ] 
14:30:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E8BA to EndLba:0x3B6E93A with One's Pattern 

14:30:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E93A to EndLba:0x3B6E9BA with One's Pattern
14:30:51: [ WrLbaNoData(0x3B6E93A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1105 ] 
14:30:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E93A to EndLba:0x3B6E9BA with One's Pattern 

14:30:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23199 to EndLba:0x2512D with Constant Pattern
14:30:51: [ RdLbaNoData(0x23199, 0x1F94, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1106 ] 
14:30:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23199 to EndLba:0x2512D with Constant Pattern 

14:30:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4040
14:30:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0611C960>, <None>) , Command count = 1107 ] 
14:30:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:54: Host Frequency set to 25000 KHz
14:30:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F7E0>, 0x0, True) , Command count = 1108 ] 
14:30:54: [GO18_globalSetVolt]### Host voltage value is set.
14:30:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129090>, 0x0, False) , Command count = 1109 ] 
14:30:54: [GO18_globalSetVolt]### Host voltage value is set.
14:30:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1110 ] 
14:30:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1111 ] 
14:30:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1112 ] 
14:30:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3CF0>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 1113 ] 
14:30:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129390>, <py_sfcl.CommandDataDefinition object at 0x06129060>) , Command count = 1114 ] 
14:30:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1115 ] 
14:30:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:54: Host Frequency set to 25000 KHz
14:30:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:54: ####CSD Registe 2.0 Values####
14:30:54: CSD_STRUCTURE                                 :0x1
14:30:54: Reserv1                                       :0x0
14:30:54: Time Access 1 TAAC                            :0xe
14:30:54: Time Access 2 NSAC*100                        :0x0
14:30:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:54: Card Command Classess CCC                     :0x5b5
14:30:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:54: DSR(driver stage register)  DSR_IMP           :0x0
14:30:54: Reserv2                                       :0x0
14:30:54: Device Size C_SIZE                            :0xedc8
14:30:54: Reserv3                                       :0x0
14:30:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:54: Reserv4                                       :0x0
14:30:54: Write Speed Factor R2W_FACTOR                 :0x2
14:30:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:54: FILE_FORMAT_GRP                               :0x0
14:30:54: COPY flag                                     :0x1
14:30:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:54: File_Format                                   :0x0
14:30:54: CRC                                           :0x0
14:30:54: ####CSD Registe Values####  

14:30:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:54: [GetSCRRegisterEntry] Passed
14:30:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:54: Data_Status_After Erases          : 0
14:30:54: CPRM Security Support             : No Security
14:30:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:54: Spec. Version                     : Version 3.0X
14:30:54: Extended Security Support         : Extended_Security_Not_Supported
14:30:54: Command Support                   : COMMAND_SUPPORT
14:30:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BA0>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 1116 ] 
14:30:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129240>, <py_sfcl.CommandDataDefinition object at 0x0611C8D0>) , Command count = 1117 ] 
14:30:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:54: [ SetBusWidth(0x4) , Command count = 1118 ] 
14:30:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1119 ] 
14:30:54: Protected Area Size 0x28000
14:30:54: Bus Width           2
14:30:54: Secure Mode         0
14:30:54: Speed  Class        4
14:30:54: Perf Move           0
14:30:54: Au Size             9
14:30:54: Erase Size          15
14:30:54: Erase Timeout       1
14:30:54: Erase offset        1
14:30:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1120 ] 
14:30:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:54: Host Frequency set to 100000 KHz
14:30:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:54: ####CSD Registe 2.0 Values####
14:30:54: CSD_STRUCTURE                                 :0x1
14:30:54: Reserv1                                       :0x0
14:30:54: Time Access 1 TAAC                            :0xe
14:30:54: Time Access 2 NSAC*100                        :0x0
14:30:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:54: Card Command Classess CCC                     :0x5b5
14:30:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:54: DSR(driver stage register)  DSR_IMP           :0x0
14:30:54: Reserv2                                       :0x0
14:30:54: Device Size C_SIZE                            :0xedc8
14:30:54: Reserv3                                       :0x0
14:30:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:55: Reserv4                                       :0x0
14:30:55: Write Speed Factor R2W_FACTOR                 :0x2
14:30:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:55: FILE_FORMAT_GRP                               :0x0
14:30:55: COPY flag                                     :0x1
14:30:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:55: File_Format                                   :0x0
14:30:55: CRC                                           :0x0
14:30:55: ####CSD Registe Values####  

14:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129600>, <py_sfcl.CommandDataDefinition object at 0x06129360>) , Command count = 1121 ] 
14:30:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129660>, <py_sfcl.CommandDataDefinition object at 0x0611C480>) , Command count = 1122 ] 
14:30:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B84 to EndLba:0x3B70C04 with One's Pattern
14:30:55: [ WrLbaNoData(0x3B70B84, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1123 ] 
14:30:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B84 to EndLba:0x3B70C04 with One's Pattern 

14:30:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70C04 to EndLba:0x3B70C84 with One's Pattern
14:30:55: [ WrLbaNoData(0x3B70C04, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1124 ] 
14:30:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70C04 to EndLba:0x3B70C84 with One's Pattern 

14:30:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2319B to EndLba:0x2512D with Constant Pattern
14:30:55: [ RdLbaNoData(0x2319B, 0x1F92, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1125 ] 
14:30:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2319B to EndLba:0x2512D with Constant Pattern 

14:30:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4039
14:30:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129630>, <py_sfcl.PySEnhancedCmdData object at 0x06129900>, <None>) , Command count = 1126 ] 
14:30:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:30:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:57: Host Frequency set to 25000 KHz
14:30:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:30:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:30:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x061290F0>, 0x0, True) , Command count = 1127 ] 
14:30:57: [GO18_globalSetVolt]### Host voltage value is set.
14:30:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:30:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CDB0>, 0x0, False) , Command count = 1128 ] 
14:30:57: [GO18_globalSetVolt]### Host voltage value is set.
14:30:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1129 ] 
14:30:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:30:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1130 ] 
14:30:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:30:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:30:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:30:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:30:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:30:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1131 ] 
14:30:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:30:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:30:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129870>, <py_sfcl.CommandDataDefinition object at 0x061291E0>) , Command count = 1132 ] 
14:30:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:30:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 1133 ] 
14:30:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:30:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1134 ] 
14:30:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:30:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:30:57: Host Frequency set to 25000 KHz
14:30:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:30:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:57: ####CSD Registe 2.0 Values####
14:30:57: CSD_STRUCTURE                                 :0x1
14:30:57: Reserv1                                       :0x0
14:30:57: Time Access 1 TAAC                            :0xe
14:30:57: Time Access 2 NSAC*100                        :0x0
14:30:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:30:57: Card Command Classess CCC                     :0x5b5
14:30:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:57: DSR(driver stage register)  DSR_IMP           :0x0
14:30:57: Reserv2                                       :0x0
14:30:57: Device Size C_SIZE                            :0xedc8
14:30:57: Reserv3                                       :0x0
14:30:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:57: Reserv4                                       :0x0
14:30:57: Write Speed Factor R2W_FACTOR                 :0x2
14:30:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:57: FILE_FORMAT_GRP                               :0x0
14:30:57: COPY flag                                     :0x1
14:30:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:57: File_Format                                   :0x0
14:30:57: CRC                                           :0x0
14:30:57: ####CSD Registe Values####  

14:30:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:30:57: [GetSCRRegisterEntry] Passed
14:30:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:30:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:30:57: Data_Status_After Erases          : 0
14:30:57: CPRM Security Support             : No Security
14:30:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:30:57: Spec. Version                     : Version 3.0X
14:30:57: Extended Security Support         : Extended_Security_Not_Supported
14:30:57: Command Support                   : COMMAND_SUPPORT
14:30:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:30:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A50>, <py_sfcl.CommandDataDefinition object at 0x0611C4B0>) , Command count = 1135 ] 
14:30:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:30:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129690>) , Command count = 1136 ] 
14:30:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:30:57: [ SetBusWidth(0x4) , Command count = 1137 ] 
14:30:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:30:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1138 ] 
14:30:57: Protected Area Size 0x28000
14:30:57: Bus Width           2
14:30:57: Secure Mode         0
14:30:57: Speed  Class        4
14:30:57: Perf Move           0
14:30:57: Au Size             9
14:30:57: Erase Size          15
14:30:57: Erase Timeout       1
14:30:57: Erase offset        1
14:30:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:30:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:30:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:30:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1139 ] 
14:30:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:30:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:30:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:30:58: Host Frequency set to 100000 KHz
14:30:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:30:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:30:58: ####CSD Registe 2.0 Values####
14:30:58: CSD_STRUCTURE                                 :0x1
14:30:58: Reserv1                                       :0x0
14:30:58: Time Access 1 TAAC                            :0xe
14:30:58: Time Access 2 NSAC*100                        :0x0
14:30:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:30:58: Card Command Classess CCC                     :0x5b5
14:30:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:30:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:30:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:30:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:30:58: DSR(driver stage register)  DSR_IMP           :0x0
14:30:58: Reserv2                                       :0x0
14:30:58: Device Size C_SIZE                            :0xedc8
14:30:58: Reserv3                                       :0x0
14:30:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:30:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:30:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:30:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:30:58: Reserv4                                       :0x0
14:30:58: Write Speed Factor R2W_FACTOR                 :0x2
14:30:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:30:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:30:58: FILE_FORMAT_GRP                               :0x0
14:30:58: COPY flag                                     :0x1
14:30:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:30:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:30:58: File_Format                                   :0x0
14:30:58: CRC                                           :0x0
14:30:58: ####CSD Registe Values####  

14:30:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129DE0>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 1140 ] 
14:30:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:30:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E40>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 1141 ] 
14:30:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:30:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:30:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:30:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D881 to EndLba:0x3B6D901 with One's Pattern
14:30:58: [ WrLbaNoData(0x3B6D881, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1142 ] 
14:30:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D881 to EndLba:0x3B6D901 with One's Pattern 

14:30:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D901 to EndLba:0x3B6D981 with One's Pattern
14:30:58: [ WrLbaNoData(0x3B6D901, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1143 ] 
14:30:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D901 to EndLba:0x3B6D981 with One's Pattern 

14:30:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:30:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2319B to EndLba:0x2512B with Constant Pattern
14:30:58: [ RdLbaNoData(0x2319B, 0x1F90, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1144 ] 
14:30:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2319B to EndLba:0x2512B with Constant Pattern 

14:30:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4038
14:30:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:30:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129780>, <py_sfcl.PySEnhancedCmdData object at 0x06129B10>, <None>) , Command count = 1145 ] 
14:30:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:30:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:00: Host Frequency set to 25000 KHz
14:31:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C870>, 0x0, True) , Command count = 1146 ] 
14:31:00: [GO18_globalSetVolt]### Host voltage value is set.
14:31:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x061298D0>, 0x0, False) , Command count = 1147 ] 
14:31:00: [GO18_globalSetVolt]### Host voltage value is set.
14:31:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1148 ] 
14:31:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1149 ] 
14:31:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1150 ] 
14:31:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1E0>, <py_sfcl.CommandDataDefinition object at 0x061297E0>) , Command count = 1151 ] 
14:31:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 1152 ] 
14:31:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1153 ] 
14:31:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:01: Host Frequency set to 25000 KHz
14:31:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:01: ####CSD Registe 2.0 Values####
14:31:01: CSD_STRUCTURE                                 :0x1
14:31:01: Reserv1                                       :0x0
14:31:01: Time Access 1 TAAC                            :0xe
14:31:01: Time Access 2 NSAC*100                        :0x0
14:31:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:01: Card Command Classess CCC                     :0x5b5
14:31:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:01: DSR(driver stage register)  DSR_IMP           :0x0
14:31:01: Reserv2                                       :0x0
14:31:01: Device Size C_SIZE                            :0xedc8
14:31:01: Reserv3                                       :0x0
14:31:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:01: Reserv4                                       :0x0
14:31:01: Write Speed Factor R2W_FACTOR                 :0x2
14:31:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:01: FILE_FORMAT_GRP                               :0x0
14:31:01: COPY flag                                     :0x1
14:31:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:01: File_Format                                   :0x0
14:31:01: CRC                                           :0x0
14:31:01: ####CSD Registe Values####  

14:31:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:01: [GetSCRRegisterEntry] Passed
14:31:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:01: Data_Status_After Erases          : 0
14:31:01: CPRM Security Support             : No Security
14:31:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:01: Spec. Version                     : Version 3.0X
14:31:01: Extended Security Support         : Extended_Security_Not_Supported
14:31:01: Command Support                   : COMMAND_SUPPORT
14:31:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E450>, <py_sfcl.CommandDataDefinition object at 0x0613FCC0>) , Command count = 1154 ] 
14:31:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E70>, <py_sfcl.CommandDataDefinition object at 0x0612E8D0>) , Command count = 1155 ] 
14:31:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:01: [ SetBusWidth(0x4) , Command count = 1156 ] 
14:31:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1157 ] 
14:31:01: Protected Area Size 0x28000
14:31:01: Bus Width           2
14:31:01: Secure Mode         0
14:31:01: Speed  Class        4
14:31:01: Perf Move           0
14:31:01: Au Size             9
14:31:01: Erase Size          15
14:31:01: Erase Timeout       1
14:31:01: Erase offset        1
14:31:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1158 ] 
14:31:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:01: Host Frequency set to 100000 KHz
14:31:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:01: ####CSD Registe 2.0 Values####
14:31:01: CSD_STRUCTURE                                 :0x1
14:31:01: Reserv1                                       :0x0
14:31:01: Time Access 1 TAAC                            :0xe
14:31:01: Time Access 2 NSAC*100                        :0x0
14:31:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:01: Card Command Classess CCC                     :0x5b5
14:31:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:01: DSR(driver stage register)  DSR_IMP           :0x0
14:31:01: Reserv2                                       :0x0
14:31:01: Device Size C_SIZE                            :0xedc8
14:31:01: Reserv3                                       :0x0
14:31:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:01: Reserv4                                       :0x0
14:31:01: Write Speed Factor R2W_FACTOR                 :0x2
14:31:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:01: FILE_FORMAT_GRP                               :0x0
14:31:01: COPY flag                                     :0x1
14:31:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:01: File_Format                                   :0x0
14:31:01: CRC                                           :0x0
14:31:01: ####CSD Registe Values####  

14:31:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129960>, <py_sfcl.CommandDataDefinition object at 0x0612E570>) , Command count = 1159 ] 
14:31:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 1160 ] 
14:31:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E8D4 to EndLba:0x3B6E954 with One's Pattern
14:31:01: [ WrLbaNoData(0x3B6E8D4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1161 ] 
14:31:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E8D4 to EndLba:0x3B6E954 with One's Pattern 

14:31:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E954 to EndLba:0x3B6E9D4 with One's Pattern
14:31:01: [ WrLbaNoData(0x3B6E954, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1162 ] 
14:31:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E954 to EndLba:0x3B6E9D4 with One's Pattern 

14:31:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2319D to EndLba:0x2512B with Constant Pattern
14:31:02: [ RdLbaNoData(0x2319D, 0x1F8E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1163 ] 
14:31:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2319D to EndLba:0x2512B with Constant Pattern 

14:31:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4037
14:31:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E6C0>, <py_sfcl.PySEnhancedCmdData object at 0x06129F90>, <None>) , Command count = 1164 ] 
14:31:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:04: Host Frequency set to 25000 KHz
14:31:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E0C0>, 0x0, True) , Command count = 1165 ] 
14:31:04: [GO18_globalSetVolt]### Host voltage value is set.
14:31:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E750>, 0x0, False) , Command count = 1166 ] 
14:31:04: [GO18_globalSetVolt]### Host voltage value is set.
14:31:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1167 ] 
14:31:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1168 ] 
14:31:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1169 ] 
14:31:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1B0>, <py_sfcl.CommandDataDefinition object at 0x06129F30>) , Command count = 1170 ] 
14:31:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4E0>, <py_sfcl.CommandDataDefinition object at 0x0613F690>) , Command count = 1171 ] 
14:31:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1172 ] 
14:31:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:04: Host Frequency set to 25000 KHz
14:31:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:04: ####CSD Registe 2.0 Values####
14:31:04: CSD_STRUCTURE                                 :0x1
14:31:04: Reserv1                                       :0x0
14:31:04: Time Access 1 TAAC                            :0xe
14:31:04: Time Access 2 NSAC*100                        :0x0
14:31:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:04: Card Command Classess CCC                     :0x5b5
14:31:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:04: DSR(driver stage register)  DSR_IMP           :0x0
14:31:04: Reserv2                                       :0x0
14:31:04: Device Size C_SIZE                            :0xedc8
14:31:04: Reserv3                                       :0x0
14:31:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:04: Reserv4                                       :0x0
14:31:04: Write Speed Factor R2W_FACTOR                 :0x2
14:31:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:04: FILE_FORMAT_GRP                               :0x0
14:31:04: COPY flag                                     :0x1
14:31:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:04: File_Format                                   :0x0
14:31:04: CRC                                           :0x0
14:31:04: ####CSD Registe Values####  

14:31:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:04: [GetSCRRegisterEntry] Passed
14:31:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:04: Data_Status_After Erases          : 0
14:31:04: CPRM Security Support             : No Security
14:31:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:04: Spec. Version                     : Version 3.0X
14:31:04: Extended Security Support         : Extended_Security_Not_Supported
14:31:04: Command Support                   : COMMAND_SUPPORT
14:31:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321B0>, <py_sfcl.CommandDataDefinition object at 0x0613F9F0>) , Command count = 1173 ] 
14:31:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B40>, <py_sfcl.CommandDataDefinition object at 0x0612EE10>) , Command count = 1174 ] 
14:31:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:04: [ SetBusWidth(0x4) , Command count = 1175 ] 
14:31:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EB40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1176 ] 
14:31:04: Protected Area Size 0x28000
14:31:04: Bus Width           2
14:31:04: Secure Mode         0
14:31:04: Speed  Class        4
14:31:04: Perf Move           0
14:31:04: Au Size             9
14:31:04: Erase Size          15
14:31:04: Erase Timeout       1
14:31:04: Erase offset        1
14:31:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1177 ] 
14:31:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:04: Host Frequency set to 100000 KHz
14:31:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:04: ####CSD Registe 2.0 Values####
14:31:04: CSD_STRUCTURE                                 :0x1
14:31:04: Reserv1                                       :0x0
14:31:04: Time Access 1 TAAC                            :0xe
14:31:04: Time Access 2 NSAC*100                        :0x0
14:31:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:04: Card Command Classess CCC                     :0x5b5
14:31:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:04: DSR(driver stage register)  DSR_IMP           :0x0
14:31:04: Reserv2                                       :0x0
14:31:04: Device Size C_SIZE                            :0xedc8
14:31:04: Reserv3                                       :0x0
14:31:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:04: Reserv4                                       :0x0
14:31:04: Write Speed Factor R2W_FACTOR                 :0x2
14:31:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:05: FILE_FORMAT_GRP                               :0x0
14:31:05: COPY flag                                     :0x1
14:31:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:05: File_Format                                   :0x0
14:31:05: CRC                                           :0x0
14:31:05: ####CSD Registe Values####  

14:31:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x0612EB70>) , Command count = 1178 ] 
14:31:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x0612E9F0>) , Command count = 1179 ] 
14:31:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7080E to EndLba:0x3B7088E with One's Pattern
14:31:05: [ WrLbaNoData(0x3B7080E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1180 ] 
14:31:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7080E to EndLba:0x3B7088E with One's Pattern 

14:31:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7088E to EndLba:0x3B7090E with One's Pattern
14:31:05: [ WrLbaNoData(0x3B7088E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1181 ] 
14:31:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7088E to EndLba:0x3B7090E with One's Pattern 

14:31:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2319D to EndLba:0x25129 with Constant Pattern
14:31:05: [ RdLbaNoData(0x2319D, 0x1F8C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1182 ] 
14:31:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2319D to EndLba:0x25129 with Constant Pattern 

14:31:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4036
14:31:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E35A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132570>, <py_sfcl.PySEnhancedCmdData object at 0x0612E720>, <None>) , Command count = 1183 ] 
14:31:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:07: Host Frequency set to 25000 KHz
14:31:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E7B0>, 0x0, True) , Command count = 1184 ] 
14:31:07: [GO18_globalSetVolt]### Host voltage value is set.
14:31:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E600>, 0x0, False) , Command count = 1185 ] 
14:31:07: [GO18_globalSetVolt]### Host voltage value is set.
14:31:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1186 ] 
14:31:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1187 ] 
14:31:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1188 ] 
14:31:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x0612E8A0>) , Command count = 1189 ] 
14:31:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC00>, <py_sfcl.CommandDataDefinition object at 0x0612EE40>) , Command count = 1190 ] 
14:31:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1191 ] 
14:31:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:07: Host Frequency set to 25000 KHz
14:31:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:07: ####CSD Registe 2.0 Values####
14:31:07: CSD_STRUCTURE                                 :0x1
14:31:07: Reserv1                                       :0x0
14:31:07: Time Access 1 TAAC                            :0xe
14:31:07: Time Access 2 NSAC*100                        :0x0
14:31:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:07: Card Command Classess CCC                     :0x5b5
14:31:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:07: DSR(driver stage register)  DSR_IMP           :0x0
14:31:07: Reserv2                                       :0x0
14:31:07: Device Size C_SIZE                            :0xedc8
14:31:07: Reserv3                                       :0x0
14:31:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:07: Reserv4                                       :0x0
14:31:07: Write Speed Factor R2W_FACTOR                 :0x2
14:31:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:07: FILE_FORMAT_GRP                               :0x0
14:31:07: COPY flag                                     :0x1
14:31:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:07: File_Format                                   :0x0
14:31:07: CRC                                           :0x0
14:31:07: ####CSD Registe Values####  

14:31:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:07: [GetSCRRegisterEntry] Passed
14:31:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:07: Data_Status_After Erases          : 0
14:31:07: CPRM Security Support             : No Security
14:31:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:07: Spec. Version                     : Version 3.0X
14:31:07: Extended Security Support         : Extended_Security_Not_Supported
14:31:07: Command Support                   : COMMAND_SUPPORT
14:31:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EAB0>, <py_sfcl.CommandDataDefinition object at 0x0613F810>) , Command count = 1192 ] 
14:31:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132750>, <py_sfcl.CommandDataDefinition object at 0x061322D0>) , Command count = 1193 ] 
14:31:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:07: [ SetBusWidth(0x4) , Command count = 1194 ] 
14:31:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061327B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1195 ] 
14:31:07: Protected Area Size 0x28000
14:31:07: Bus Width           2
14:31:07: Secure Mode         0
14:31:07: Speed  Class        4
14:31:07: Perf Move           0
14:31:07: Au Size             9
14:31:07: Erase Size          15
14:31:07: Erase Timeout       1
14:31:07: Erase offset        1
14:31:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1196 ] 
14:31:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:08: Host Frequency set to 100000 KHz
14:31:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:08: ####CSD Registe 2.0 Values####
14:31:08: CSD_STRUCTURE                                 :0x1
14:31:08: Reserv1                                       :0x0
14:31:08: Time Access 1 TAAC                            :0xe
14:31:08: Time Access 2 NSAC*100                        :0x0
14:31:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:08: Card Command Classess CCC                     :0x5b5
14:31:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:08: DSR(driver stage register)  DSR_IMP           :0x0
14:31:08: Reserv2                                       :0x0
14:31:08: Device Size C_SIZE                            :0xedc8
14:31:08: Reserv3                                       :0x0
14:31:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:08: Reserv4                                       :0x0
14:31:08: Write Speed Factor R2W_FACTOR                 :0x2
14:31:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:08: FILE_FORMAT_GRP                               :0x0
14:31:08: COPY flag                                     :0x1
14:31:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:08: File_Format                                   :0x0
14:31:08: CRC                                           :0x0
14:31:08: ####CSD Registe Values####  

14:31:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132120>, <py_sfcl.CommandDataDefinition object at 0x061323F0>) , Command count = 1197 ] 
14:31:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132420>, <py_sfcl.CommandDataDefinition object at 0x061328D0>) , Command count = 1198 ] 
14:31:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E58 to EndLba:0x3B70ED8 with One's Pattern
14:31:08: [ WrLbaNoData(0x3B70E58, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1199 ] 
14:31:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E58 to EndLba:0x3B70ED8 with One's Pattern 

14:31:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70ED8 to EndLba:0x3B70F58 with One's Pattern
14:31:08: [ WrLbaNoData(0x3B70ED8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1200 ] 
14:31:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70ED8 to EndLba:0x3B70F58 with One's Pattern 

14:31:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2319F to EndLba:0x25129 with Constant Pattern
14:31:08: [ RdLbaNoData(0x2319F, 0x1F8A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1201 ] 
14:31:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2319F to EndLba:0x25129 with Constant Pattern 

14:31:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4035
14:31:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132510>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132540>, <py_sfcl.PySEnhancedCmdData object at 0x061326F0>, <None>) , Command count = 1202 ] 
14:31:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:10: Host Frequency set to 25000 KHz
14:31:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129F60>, 0x0, True) , Command count = 1203 ] 
14:31:10: [GO18_globalSetVolt]### Host voltage value is set.
14:31:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x061325D0>, 0x0, False) , Command count = 1204 ] 
14:31:10: [GO18_globalSetVolt]### Host voltage value is set.
14:31:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1205 ] 
14:31:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1206 ] 
14:31:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1207 ] 
14:31:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E810>, <py_sfcl.CommandDataDefinition object at 0x0612EA80>) , Command count = 1208 ] 
14:31:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132360>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 1209 ] 
14:31:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1210 ] 
14:31:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:11: Host Frequency set to 25000 KHz
14:31:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:11: ####CSD Registe 2.0 Values####
14:31:11: CSD_STRUCTURE                                 :0x1
14:31:11: Reserv1                                       :0x0
14:31:11: Time Access 1 TAAC                            :0xe
14:31:11: Time Access 2 NSAC*100                        :0x0
14:31:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:11: Card Command Classess CCC                     :0x5b5
14:31:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:11: DSR(driver stage register)  DSR_IMP           :0x0
14:31:11: Reserv2                                       :0x0
14:31:11: Device Size C_SIZE                            :0xedc8
14:31:11: Reserv3                                       :0x0
14:31:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:11: Reserv4                                       :0x0
14:31:11: Write Speed Factor R2W_FACTOR                 :0x2
14:31:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:11: FILE_FORMAT_GRP                               :0x0
14:31:11: COPY flag                                     :0x1
14:31:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:11: File_Format                                   :0x0
14:31:11: CRC                                           :0x0
14:31:11: ####CSD Registe Values####  

14:31:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:11: [GetSCRRegisterEntry] Passed
14:31:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:11: Data_Status_After Erases          : 0
14:31:11: CPRM Security Support             : No Security
14:31:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:11: Spec. Version                     : Version 3.0X
14:31:11: Extended Security Support         : Extended_Security_Not_Supported
14:31:11: Command Support                   : COMMAND_SUPPORT
14:31:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132780>, <py_sfcl.CommandDataDefinition object at 0x0613F330>) , Command count = 1211 ] 
14:31:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 1212 ] 
14:31:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:11: [ SetBusWidth(0x4) , Command count = 1213 ] 
14:31:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1214 ] 
14:31:11: Protected Area Size 0x28000
14:31:11: Bus Width           2
14:31:11: Secure Mode         0
14:31:11: Speed  Class        4
14:31:11: Perf Move           0
14:31:11: Au Size             9
14:31:11: Erase Size          15
14:31:11: Erase Timeout       1
14:31:11: Erase offset        1
14:31:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1215 ] 
14:31:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:11: Host Frequency set to 100000 KHz
14:31:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:11: ####CSD Registe 2.0 Values####
14:31:11: CSD_STRUCTURE                                 :0x1
14:31:11: Reserv1                                       :0x0
14:31:11: Time Access 1 TAAC                            :0xe
14:31:11: Time Access 2 NSAC*100                        :0x0
14:31:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:11: Card Command Classess CCC                     :0x5b5
14:31:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:11: DSR(driver stage register)  DSR_IMP           :0x0
14:31:11: Reserv2                                       :0x0
14:31:11: Device Size C_SIZE                            :0xedc8
14:31:11: Reserv3                                       :0x0
14:31:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:11: Reserv4                                       :0x0
14:31:11: Write Speed Factor R2W_FACTOR                 :0x2
14:31:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:11: FILE_FORMAT_GRP                               :0x0
14:31:11: COPY flag                                     :0x1
14:31:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:11: File_Format                                   :0x0
14:31:11: CRC                                           :0x0
14:31:11: ####CSD Registe Values####  

14:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132990>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 1216 ] 
14:31:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x061327B0>) , Command count = 1217 ] 
14:31:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E71D to EndLba:0x3B6E79D with One's Pattern
14:31:12: [ WrLbaNoData(0x3B6E71D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1218 ] 
14:31:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E71D to EndLba:0x3B6E79D with One's Pattern 

14:31:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E79D to EndLba:0x3B6E81D with One's Pattern
14:31:12: [ WrLbaNoData(0x3B6E79D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1219 ] 
14:31:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E79D to EndLba:0x3B6E81D with One's Pattern 

14:31:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2319F to EndLba:0x25127 with Constant Pattern
14:31:12: [ RdLbaNoData(0x2319F, 0x1F88, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1220 ] 
14:31:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2319F to EndLba:0x25127 with Constant Pattern 

14:31:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4034
14:31:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061383F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061328A0>, <py_sfcl.PySEnhancedCmdData object at 0x06132B10>, <None>) , Command count = 1221 ] 
14:31:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:14: Host Frequency set to 25000 KHz
14:31:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132630>, 0x0, True) , Command count = 1222 ] 
14:31:14: [GO18_globalSetVolt]### Host voltage value is set.
14:31:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132480>, 0x0, False) , Command count = 1223 ] 
14:31:14: [GO18_globalSetVolt]### Host voltage value is set.
14:31:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1224 ] 
14:31:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1225 ] 
14:31:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1226 ] 
14:31:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320C0>, <py_sfcl.CommandDataDefinition object at 0x06132CC0>) , Command count = 1227 ] 
14:31:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 1228 ] 
14:31:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1229 ] 
14:31:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:14: Host Frequency set to 25000 KHz
14:31:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:14: ####CSD Registe 2.0 Values####
14:31:14: CSD_STRUCTURE                                 :0x1
14:31:14: Reserv1                                       :0x0
14:31:14: Time Access 1 TAAC                            :0xe
14:31:14: Time Access 2 NSAC*100                        :0x0
14:31:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:14: Card Command Classess CCC                     :0x5b5
14:31:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:14: DSR(driver stage register)  DSR_IMP           :0x0
14:31:14: Reserv2                                       :0x0
14:31:14: Device Size C_SIZE                            :0xedc8
14:31:14: Reserv3                                       :0x0
14:31:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:14: Reserv4                                       :0x0
14:31:14: Write Speed Factor R2W_FACTOR                 :0x2
14:31:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:14: FILE_FORMAT_GRP                               :0x0
14:31:14: COPY flag                                     :0x1
14:31:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:14: File_Format                                   :0x0
14:31:14: CRC                                           :0x0
14:31:14: ####CSD Registe Values####  

14:31:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:14: [GetSCRRegisterEntry] Passed
14:31:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:14: Data_Status_After Erases          : 0
14:31:14: CPRM Security Support             : No Security
14:31:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:14: Spec. Version                     : Version 3.0X
14:31:14: Extended Security Support         : Extended_Security_Not_Supported
14:31:14: Command Support                   : COMMAND_SUPPORT
14:31:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138120>, <py_sfcl.CommandDataDefinition object at 0x06132D80>) , Command count = 1230 ] 
14:31:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x06138750>) , Command count = 1231 ] 
14:31:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:14: [ SetBusWidth(0x4) , Command count = 1232 ] 
14:31:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1233 ] 
14:31:14: Protected Area Size 0x28000
14:31:14: Bus Width           2
14:31:14: Secure Mode         0
14:31:14: Speed  Class        4
14:31:14: Perf Move           0
14:31:14: Au Size             9
14:31:14: Erase Size          15
14:31:14: Erase Timeout       1
14:31:14: Erase offset        1
14:31:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1234 ] 
14:31:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:14: Host Frequency set to 100000 KHz
14:31:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:14: ####CSD Registe 2.0 Values####
14:31:14: CSD_STRUCTURE                                 :0x1
14:31:14: Reserv1                                       :0x0
14:31:14: Time Access 1 TAAC                            :0xe
14:31:14: Time Access 2 NSAC*100                        :0x0
14:31:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:14: Card Command Classess CCC                     :0x5b5
14:31:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:15: DSR(driver stage register)  DSR_IMP           :0x0
14:31:15: Reserv2                                       :0x0
14:31:15: Device Size C_SIZE                            :0xedc8
14:31:15: Reserv3                                       :0x0
14:31:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:15: Reserv4                                       :0x0
14:31:15: Write Speed Factor R2W_FACTOR                 :0x2
14:31:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:15: FILE_FORMAT_GRP                               :0x0
14:31:15: COPY flag                                     :0x1
14:31:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:15: File_Format                                   :0x0
14:31:15: CRC                                           :0x0
14:31:15: ####CSD Registe Values####  

14:31:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138360>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 1235 ] 
14:31:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061382A0>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 1236 ] 
14:31:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FC92 to EndLba:0x3B6FD12 with One's Pattern
14:31:15: [ WrLbaNoData(0x3B6FC92, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1237 ] 
14:31:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FC92 to EndLba:0x3B6FD12 with One's Pattern 

14:31:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FD12 to EndLba:0x3B6FD92 with One's Pattern
14:31:15: [ WrLbaNoData(0x3B6FD12, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1238 ] 
14:31:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FD12 to EndLba:0x3B6FD92 with One's Pattern 

14:31:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A1 to EndLba:0x25127 with Constant Pattern
14:31:15: [ RdLbaNoData(0x231A1, 0x1F86, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1239 ] 
14:31:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A1 to EndLba:0x25127 with Constant Pattern 

14:31:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4033
14:31:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138240>, <py_sfcl.PySEnhancedCmdData object at 0x06138270>, <None>) , Command count = 1240 ] 
14:31:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:17: Host Frequency set to 25000 KHz
14:31:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EDE0>, 0x0, True) , Command count = 1241 ] 
14:31:17: [GO18_globalSetVolt]### Host voltage value is set.
14:31:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138450>, 0x0, False) , Command count = 1242 ] 
14:31:17: [GO18_globalSetVolt]### Host voltage value is set.
14:31:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1243 ] 
14:31:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1244 ] 
14:31:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1245 ] 
14:31:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132690>, <py_sfcl.CommandDataDefinition object at 0x06132C60>) , Command count = 1246 ] 
14:31:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06132DE0>) , Command count = 1247 ] 
14:31:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1248 ] 
14:31:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:18: Host Frequency set to 25000 KHz
14:31:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:18: ####CSD Registe 2.0 Values####
14:31:18: CSD_STRUCTURE                                 :0x1
14:31:18: Reserv1                                       :0x0
14:31:18: Time Access 1 TAAC                            :0xe
14:31:18: Time Access 2 NSAC*100                        :0x0
14:31:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:18: Card Command Classess CCC                     :0x5b5
14:31:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:18: DSR(driver stage register)  DSR_IMP           :0x0
14:31:18: Reserv2                                       :0x0
14:31:18: Device Size C_SIZE                            :0xedc8
14:31:18: Reserv3                                       :0x0
14:31:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:18: Reserv4                                       :0x0
14:31:18: Write Speed Factor R2W_FACTOR                 :0x2
14:31:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:18: FILE_FORMAT_GRP                               :0x0
14:31:18: COPY flag                                     :0x1
14:31:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:18: File_Format                                   :0x0
14:31:18: CRC                                           :0x0
14:31:18: ####CSD Registe Values####  

14:31:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:18: [GetSCRRegisterEntry] Passed
14:31:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:18: Data_Status_After Erases          : 0
14:31:18: CPRM Security Support             : No Security
14:31:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:18: Spec. Version                     : Version 3.0X
14:31:18: Extended Security Support         : Extended_Security_Not_Supported
14:31:18: Command Support                   : COMMAND_SUPPORT
14:31:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138600>, <py_sfcl.CommandDataDefinition object at 0x06145300>) , Command count = 1249 ] 
14:31:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x061382D0>) , Command count = 1250 ] 
14:31:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:18: [ SetBusWidth(0x4) , Command count = 1251 ] 
14:31:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1252 ] 
14:31:18: Protected Area Size 0x28000
14:31:18: Bus Width           2
14:31:18: Secure Mode         0
14:31:18: Speed  Class        4
14:31:18: Perf Move           0
14:31:18: Au Size             9
14:31:18: Erase Size          15
14:31:18: Erase Timeout       1
14:31:18: Erase offset        1
14:31:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1253 ] 
14:31:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:18: Host Frequency set to 100000 KHz
14:31:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:18: ####CSD Registe 2.0 Values####
14:31:18: CSD_STRUCTURE                                 :0x1
14:31:18: Reserv1                                       :0x0
14:31:18: Time Access 1 TAAC                            :0xe
14:31:18: Time Access 2 NSAC*100                        :0x0
14:31:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:18: Card Command Classess CCC                     :0x5b5
14:31:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:18: DSR(driver stage register)  DSR_IMP           :0x0
14:31:18: Reserv2                                       :0x0
14:31:18: Device Size C_SIZE                            :0xedc8
14:31:18: Reserv3                                       :0x0
14:31:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:18: Reserv4                                       :0x0
14:31:18: Write Speed Factor R2W_FACTOR                 :0x2
14:31:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:18: FILE_FORMAT_GRP                               :0x0
14:31:18: COPY flag                                     :0x1
14:31:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:18: File_Format                                   :0x0
14:31:18: CRC                                           :0x0
14:31:18: ####CSD Registe Values####  

14:31:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138720>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 1254 ] 
14:31:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061389C0>, <py_sfcl.CommandDataDefinition object at 0x061386F0>) , Command count = 1255 ] 
14:31:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F6EB to EndLba:0x3B6F76B with One's Pattern
14:31:18: [ WrLbaNoData(0x3B6F6EB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1256 ] 
14:31:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F6EB to EndLba:0x3B6F76B with One's Pattern 

14:31:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F76B to EndLba:0x3B6F7EB with One's Pattern
14:31:18: [ WrLbaNoData(0x3B6F76B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1257 ] 
14:31:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F76B to EndLba:0x3B6F7EB with One's Pattern 

14:31:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A1 to EndLba:0x25125 with Constant Pattern
14:31:18: [ RdLbaNoData(0x231A1, 0x1F84, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1258 ] 
14:31:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A1 to EndLba:0x25125 with Constant Pattern 

14:31:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4032
14:31:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138AE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138AB0>, <py_sfcl.PySEnhancedCmdData object at 0x06138BD0>, <None>) , Command count = 1259 ] 
14:31:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:21: Host Frequency set to 25000 KHz
14:31:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x061384B0>, 0x0, True) , Command count = 1260 ] 
14:31:21: [GO18_globalSetVolt]### Host voltage value is set.
14:31:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138300>, 0x0, False) , Command count = 1261 ] 
14:31:21: [GO18_globalSetVolt]### Host voltage value is set.
14:31:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1262 ] 
14:31:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1263 ] 
14:31:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1264 ] 
14:31:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x06138C00>) , Command count = 1265 ] 
14:31:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138900>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 1266 ] 
14:31:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1267 ] 
14:31:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:21: Host Frequency set to 25000 KHz
14:31:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:21: ####CSD Registe 2.0 Values####
14:31:21: CSD_STRUCTURE                                 :0x1
14:31:21: Reserv1                                       :0x0
14:31:21: Time Access 1 TAAC                            :0xe
14:31:21: Time Access 2 NSAC*100                        :0x0
14:31:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:21: Card Command Classess CCC                     :0x5b5
14:31:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:21: DSR(driver stage register)  DSR_IMP           :0x0
14:31:21: Reserv2                                       :0x0
14:31:21: Device Size C_SIZE                            :0xedc8
14:31:21: Reserv3                                       :0x0
14:31:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:21: Reserv4                                       :0x0
14:31:21: Write Speed Factor R2W_FACTOR                 :0x2
14:31:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:21: FILE_FORMAT_GRP                               :0x0
14:31:21: COPY flag                                     :0x1
14:31:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:21: File_Format                                   :0x0
14:31:21: CRC                                           :0x0
14:31:21: ####CSD Registe Values####  

14:31:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:21: [GetSCRRegisterEntry] Passed
14:31:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:21: Data_Status_After Erases          : 0
14:31:21: CPRM Security Support             : No Security
14:31:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:21: Spec. Version                     : Version 3.0X
14:31:21: Extended Security Support         : Extended_Security_Not_Supported
14:31:21: Command Support                   : COMMAND_SUPPORT
14:31:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC00>, <py_sfcl.CommandDataDefinition object at 0x061450F0>) , Command count = 1268 ] 
14:31:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A20>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 1269 ] 
14:31:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:21: [ SetBusWidth(0x4) , Command count = 1270 ] 
14:31:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1271 ] 
14:31:21: Protected Area Size 0x28000
14:31:21: Bus Width           2
14:31:21: Secure Mode         0
14:31:21: Speed  Class        4
14:31:21: Perf Move           0
14:31:21: Au Size             9
14:31:21: Erase Size          15
14:31:21: Erase Timeout       1
14:31:21: Erase offset        1
14:31:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1272 ] 
14:31:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:21: Host Frequency set to 100000 KHz
14:31:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:21: ####CSD Registe 2.0 Values####
14:31:21: CSD_STRUCTURE                                 :0x1
14:31:21: Reserv1                                       :0x0
14:31:21: Time Access 1 TAAC                            :0xe
14:31:21: Time Access 2 NSAC*100                        :0x0
14:31:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:21: Card Command Classess CCC                     :0x5b5
14:31:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:21: DSR(driver stage register)  DSR_IMP           :0x0
14:31:21: Reserv2                                       :0x0
14:31:21: Device Size C_SIZE                            :0xedc8
14:31:21: Reserv3                                       :0x0
14:31:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:21: Reserv4                                       :0x0
14:31:21: Write Speed Factor R2W_FACTOR                 :0x2
14:31:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:21: FILE_FORMAT_GRP                               :0x0
14:31:21: COPY flag                                     :0x1
14:31:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:21: File_Format                                   :0x0
14:31:22: CRC                                           :0x0
14:31:22: ####CSD Registe Values####  

14:31:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py_sfcl.CommandDataDefinition object at 0x06138F30>) , Command count = 1273 ] 
14:31:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138DE0>, <py_sfcl.CommandDataDefinition object at 0x06138E10>) , Command count = 1274 ] 
14:31:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71418 to EndLba:0x3B71498 with One's Pattern
14:31:22: [ WrLbaNoData(0x3B71418, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1275 ] 
14:31:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71418 to EndLba:0x3B71498 with One's Pattern 

14:31:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71498 to EndLba:0x3B71518 with One's Pattern
14:31:22: [ WrLbaNoData(0x3B71498, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1276 ] 
14:31:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71498 to EndLba:0x3B71518 with One's Pattern 

14:31:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A3 to EndLba:0x25125 with Constant Pattern
14:31:22: [ RdLbaNoData(0x231A3, 0x1F82, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1277 ] 
14:31:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A3 to EndLba:0x25125 with Constant Pattern 

14:31:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4031
14:31:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052577E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F120>, <py_sfcl.PySEnhancedCmdData object at 0x0613F450>, <None>) , Command count = 1278 ] 
14:31:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:24: Host Frequency set to 25000 KHz
14:31:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132BA0>, 0x0, True) , Command count = 1279 ] 
14:31:24: [GO18_globalSetVolt]### Host voltage value is set.
14:31:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138B40>, 0x0, False) , Command count = 1280 ] 
14:31:24: [GO18_globalSetVolt]### Host voltage value is set.
14:31:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1281 ] 
14:31:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1282 ] 
14:31:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1283 ] 
14:31:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138510>, <py_sfcl.CommandDataDefinition object at 0x0613FDE0>) , Command count = 1284 ] 
14:31:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EED0>, <py_sfcl.CommandDataDefinition object at 0x0613F210>) , Command count = 1285 ] 
14:31:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1286 ] 
14:31:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:25: Host Frequency set to 25000 KHz
14:31:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:25: ####CSD Registe 2.0 Values####
14:31:25: CSD_STRUCTURE                                 :0x1
14:31:25: Reserv1                                       :0x0
14:31:25: Time Access 1 TAAC                            :0xe
14:31:25: Time Access 2 NSAC*100                        :0x0
14:31:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:25: Card Command Classess CCC                     :0x5b5
14:31:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:25: DSR(driver stage register)  DSR_IMP           :0x0
14:31:25: Reserv2                                       :0x0
14:31:25: Device Size C_SIZE                            :0xedc8
14:31:25: Reserv3                                       :0x0
14:31:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:25: Reserv4                                       :0x0
14:31:25: Write Speed Factor R2W_FACTOR                 :0x2
14:31:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:25: FILE_FORMAT_GRP                               :0x0
14:31:25: COPY flag                                     :0x1
14:31:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:25: File_Format                                   :0x0
14:31:25: CRC                                           :0x0
14:31:25: ####CSD Registe Values####  

14:31:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:25: [GetSCRRegisterEntry] Passed
14:31:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:25: Data_Status_After Erases          : 0
14:31:25: CPRM Security Support             : No Security
14:31:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:25: Spec. Version                     : Version 3.0X
14:31:25: Extended Security Support         : Extended_Security_Not_Supported
14:31:25: Command Support                   : COMMAND_SUPPORT
14:31:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138ED0>, <py_sfcl.CommandDataDefinition object at 0x0613FFC0>) , Command count = 1287 ] 
14:31:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 1288 ] 
14:31:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:25: [ SetBusWidth(0x4) , Command count = 1289 ] 
14:31:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1290 ] 
14:31:25: Protected Area Size 0x28000
14:31:25: Bus Width           2
14:31:25: Secure Mode         0
14:31:25: Speed  Class        4
14:31:25: Perf Move           0
14:31:25: Au Size             9
14:31:25: Erase Size          15
14:31:25: Erase Timeout       1
14:31:25: Erase offset        1
14:31:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1291 ] 
14:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:25: Host Frequency set to 100000 KHz
14:31:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:25: ####CSD Registe 2.0 Values####
14:31:25: CSD_STRUCTURE                                 :0x1
14:31:25: Reserv1                                       :0x0
14:31:25: Time Access 1 TAAC                            :0xe
14:31:25: Time Access 2 NSAC*100                        :0x0
14:31:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:25: Card Command Classess CCC                     :0x5b5
14:31:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:25: DSR(driver stage register)  DSR_IMP           :0x0
14:31:25: Reserv2                                       :0x0
14:31:25: Device Size C_SIZE                            :0xedc8
14:31:25: Reserv3                                       :0x0
14:31:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:25: Reserv4                                       :0x0
14:31:25: Write Speed Factor R2W_FACTOR                 :0x2
14:31:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:25: FILE_FORMAT_GRP                               :0x0
14:31:25: COPY flag                                     :0x1
14:31:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:25: File_Format                                   :0x0
14:31:25: CRC                                           :0x0
14:31:25: ####CSD Registe Values####  

14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F630>, <py_sfcl.CommandDataDefinition object at 0x052AFC60>) , Command count = 1292 ] 
14:31:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x052AF240>) , Command count = 1293 ] 
14:31:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DCA9 to EndLba:0x3B6DD29 with One's Pattern
14:31:25: [ WrLbaNoData(0x3B6DCA9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1294 ] 
14:31:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DCA9 to EndLba:0x3B6DD29 with One's Pattern 

14:31:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DD29 to EndLba:0x3B6DDA9 with One's Pattern
14:31:25: [ WrLbaNoData(0x3B6DD29, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1295 ] 
14:31:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DD29 to EndLba:0x3B6DDA9 with One's Pattern 

14:31:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A3 to EndLba:0x25123 with Constant Pattern
14:31:25: [ RdLbaNoData(0x231A3, 0x1F80, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1296 ] 
14:31:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A3 to EndLba:0x25123 with Constant Pattern 

14:31:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4030
14:31:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052AFEA0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F4B0>, <None>) , Command count = 1297 ] 
14:31:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:27: Host Frequency set to 25000 KHz
14:31:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138B70>, 0x0, True) , Command count = 1298 ] 
14:31:28: [GO18_globalSetVolt]### Host voltage value is set.
14:31:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0529EE40>, 0x0, False) , Command count = 1299 ] 
14:31:28: [GO18_globalSetVolt]### Host voltage value is set.
14:31:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1300 ] 
14:31:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1301 ] 
14:31:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1302 ] 
14:31:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C30>, <py_sfcl.CommandDataDefinition object at 0x0613FB10>) , Command count = 1303 ] 
14:31:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x0613F240>) , Command count = 1304 ] 
14:31:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1305 ] 
14:31:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:28: Host Frequency set to 25000 KHz
14:31:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:28: ####CSD Registe 2.0 Values####
14:31:28: CSD_STRUCTURE                                 :0x1
14:31:28: Reserv1                                       :0x0
14:31:28: Time Access 1 TAAC                            :0xe
14:31:28: Time Access 2 NSAC*100                        :0x0
14:31:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:28: Card Command Classess CCC                     :0x5b5
14:31:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:28: DSR(driver stage register)  DSR_IMP           :0x0
14:31:28: Reserv2                                       :0x0
14:31:28: Device Size C_SIZE                            :0xedc8
14:31:28: Reserv3                                       :0x0
14:31:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:28: Reserv4                                       :0x0
14:31:28: Write Speed Factor R2W_FACTOR                 :0x2
14:31:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:28: FILE_FORMAT_GRP                               :0x0
14:31:28: COPY flag                                     :0x1
14:31:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:28: File_Format                                   :0x0
14:31:28: CRC                                           :0x0
14:31:28: ####CSD Registe Values####  

14:31:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:28: [GetSCRRegisterEntry] Passed
14:31:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:28: Data_Status_After Erases          : 0
14:31:28: CPRM Security Support             : No Security
14:31:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:28: Spec. Version                     : Version 3.0X
14:31:28: Extended Security Support         : Extended_Security_Not_Supported
14:31:28: Command Support                   : COMMAND_SUPPORT
14:31:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFC30>, <py_sfcl.CommandDataDefinition object at 0x0613F510>) , Command count = 1306 ] 
14:31:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 1307 ] 
14:31:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:28: [ SetBusWidth(0x4) , Command count = 1308 ] 
14:31:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1309 ] 
14:31:28: Protected Area Size 0x28000
14:31:28: Bus Width           2
14:31:28: Secure Mode         0
14:31:28: Speed  Class        4
14:31:28: Perf Move           0
14:31:28: Au Size             9
14:31:28: Erase Size          15
14:31:28: Erase Timeout       1
14:31:28: Erase offset        1
14:31:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1310 ] 
14:31:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:28: Host Frequency set to 100000 KHz
14:31:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:28: ####CSD Registe 2.0 Values####
14:31:28: CSD_STRUCTURE                                 :0x1
14:31:28: Reserv1                                       :0x0
14:31:28: Time Access 1 TAAC                            :0xe
14:31:28: Time Access 2 NSAC*100                        :0x0
14:31:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:28: Card Command Classess CCC                     :0x5b5
14:31:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:28: DSR(driver stage register)  DSR_IMP           :0x0
14:31:28: Reserv2                                       :0x0
14:31:28: Device Size C_SIZE                            :0xedc8
14:31:28: Reserv3                                       :0x0
14:31:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:29: Reserv4                                       :0x0
14:31:29: Write Speed Factor R2W_FACTOR                 :0x2
14:31:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:29: FILE_FORMAT_GRP                               :0x0
14:31:29: COPY flag                                     :0x1
14:31:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:29: File_Format                                   :0x0
14:31:29: CRC                                           :0x0
14:31:29: ####CSD Registe Values####  

14:31:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529B4B0>, <py_sfcl.CommandDataDefinition object at 0x0613F720>) , Command count = 1311 ] 
14:31:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x0613FF60>) , Command count = 1312 ] 
14:31:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72094 to EndLba:0x3B72114 with One's Pattern
14:31:29: [ WrLbaNoData(0x3B72094, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1313 ] 
14:31:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72094 to EndLba:0x3B72114 with One's Pattern 

14:31:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72114 to EndLba:0x3B72194 with One's Pattern
14:31:29: [ WrLbaNoData(0x3B72114, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1314 ] 
14:31:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72114 to EndLba:0x3B72194 with One's Pattern 

14:31:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:29: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A5 to EndLba:0x25123 with Constant Pattern
14:31:29: [ RdLbaNoData(0x231A5, 0x1F7E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1315 ] 
14:31:29: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A5 to EndLba:0x25123 with Constant Pattern 

14:31:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4029
14:31:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E37B0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F840>, <None>) , Command count = 1316 ] 
14:31:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:31: Host Frequency set to 25000 KHz
14:31:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C19F0>, 0x0, True) , Command count = 1317 ] 
14:31:31: [GO18_globalSetVolt]### Host voltage value is set.
14:31:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F570>, 0x0, False) , Command count = 1318 ] 
14:31:31: [GO18_globalSetVolt]### Host voltage value is set.
14:31:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1319 ] 
14:31:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1320 ] 
14:31:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1321 ] 
14:31:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x0613F5A0>) , Command count = 1322 ] 
14:31:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0613F420>) , Command count = 1323 ] 
14:31:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1324 ] 
14:31:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:31: Host Frequency set to 25000 KHz
14:31:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:31: ####CSD Registe 2.0 Values####
14:31:31: CSD_STRUCTURE                                 :0x1
14:31:31: Reserv1                                       :0x0
14:31:31: Time Access 1 TAAC                            :0xe
14:31:31: Time Access 2 NSAC*100                        :0x0
14:31:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:31: Card Command Classess CCC                     :0x5b5
14:31:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:31: DSR(driver stage register)  DSR_IMP           :0x0
14:31:31: Reserv2                                       :0x0
14:31:31: Device Size C_SIZE                            :0xedc8
14:31:31: Reserv3                                       :0x0
14:31:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:31: Reserv4                                       :0x0
14:31:31: Write Speed Factor R2W_FACTOR                 :0x2
14:31:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:31: FILE_FORMAT_GRP                               :0x0
14:31:31: COPY flag                                     :0x1
14:31:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:31: File_Format                                   :0x0
14:31:31: CRC                                           :0x0
14:31:31: ####CSD Registe Values####  

14:31:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:31: [GetSCRRegisterEntry] Passed
14:31:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:31: Data_Status_After Erases          : 0
14:31:31: CPRM Security Support             : No Security
14:31:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:31: Spec. Version                     : Version 3.0X
14:31:31: Extended Security Support         : Extended_Security_Not_Supported
14:31:31: Command Support                   : COMMAND_SUPPORT
14:31:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F00>, <py_sfcl.CommandDataDefinition object at 0x06145210>) , Command count = 1325 ] 
14:31:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x0613F300>) , Command count = 1326 ] 
14:31:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:31: [ SetBusWidth(0x4) , Command count = 1327 ] 
14:31:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1328 ] 
14:31:31: Protected Area Size 0x28000
14:31:31: Bus Width           2
14:31:31: Secure Mode         0
14:31:31: Speed  Class        4
14:31:31: Perf Move           0
14:31:31: Au Size             9
14:31:31: Erase Size          15
14:31:31: Erase Timeout       1
14:31:31: Erase offset        1
14:31:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1329 ] 
14:31:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:31: Host Frequency set to 100000 KHz
14:31:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:32: ####CSD Registe 2.0 Values####
14:31:32: CSD_STRUCTURE                                 :0x1
14:31:32: Reserv1                                       :0x0
14:31:32: Time Access 1 TAAC                            :0xe
14:31:32: Time Access 2 NSAC*100                        :0x0
14:31:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:32: Card Command Classess CCC                     :0x5b5
14:31:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:32: DSR(driver stage register)  DSR_IMP           :0x0
14:31:32: Reserv2                                       :0x0
14:31:32: Device Size C_SIZE                            :0xedc8
14:31:32: Reserv3                                       :0x0
14:31:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:32: Reserv4                                       :0x0
14:31:32: Write Speed Factor R2W_FACTOR                 :0x2
14:31:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:32: FILE_FORMAT_GRP                               :0x0
14:31:32: COPY flag                                     :0x1
14:31:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:32: File_Format                                   :0x0
14:31:32: CRC                                           :0x0
14:31:32: ####CSD Registe Values####  

14:31:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x060E3780>) , Command count = 1330 ] 
14:31:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E34E0>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 1331 ] 
14:31:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71822 to EndLba:0x3B718A2 with One's Pattern
14:31:32: [ WrLbaNoData(0x3B71822, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1332 ] 
14:31:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71822 to EndLba:0x3B718A2 with One's Pattern 

14:31:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B718A2 to EndLba:0x3B71922 with One's Pattern
14:31:32: [ WrLbaNoData(0x3B718A2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1333 ] 
14:31:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B718A2 to EndLba:0x3B71922 with One's Pattern 

14:31:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A5 to EndLba:0x25121 with Constant Pattern
14:31:32: [ RdLbaNoData(0x231A5, 0x1F7C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1334 ] 
14:31:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A5 to EndLba:0x25121 with Constant Pattern 

14:31:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4028
14:31:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C060>, <py_sfcl.PySEnhancedCmdData object at 0x060E3EA0>, <None>) , Command count = 1335 ] 
14:31:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:34: Host Frequency set to 25000 KHz
14:31:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F7B0>, 0x0, True) , Command count = 1336 ] 
14:31:34: [GO18_globalSetVolt]### Host voltage value is set.
14:31:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C240>, 0x0, False) , Command count = 1337 ] 
14:31:34: [GO18_globalSetVolt]### Host voltage value is set.
14:31:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1338 ] 
14:31:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1339 ] 
14:31:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1340 ] 
14:31:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA20>, <py_sfcl.CommandDataDefinition object at 0x0613F540>) , Command count = 1341 ] 
14:31:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3D80>, <py_sfcl.CommandDataDefinition object at 0x060E38A0>) , Command count = 1342 ] 
14:31:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1343 ] 
14:31:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:35: Host Frequency set to 25000 KHz
14:31:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:35: ####CSD Registe 2.0 Values####
14:31:35: CSD_STRUCTURE                                 :0x1
14:31:35: Reserv1                                       :0x0
14:31:35: Time Access 1 TAAC                            :0xe
14:31:35: Time Access 2 NSAC*100                        :0x0
14:31:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:35: Card Command Classess CCC                     :0x5b5
14:31:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:35: DSR(driver stage register)  DSR_IMP           :0x0
14:31:35: Reserv2                                       :0x0
14:31:35: Device Size C_SIZE                            :0xedc8
14:31:35: Reserv3                                       :0x0
14:31:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:35: Reserv4                                       :0x0
14:31:35: Write Speed Factor R2W_FACTOR                 :0x2
14:31:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:35: FILE_FORMAT_GRP                               :0x0
14:31:35: COPY flag                                     :0x1
14:31:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:35: File_Format                                   :0x0
14:31:35: CRC                                           :0x0
14:31:35: ####CSD Registe Values####  

14:31:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:35: [GetSCRRegisterEntry] Passed
14:31:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:35: Data_Status_After Erases          : 0
14:31:35: CPRM Security Support             : No Security
14:31:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:35: Spec. Version                     : Version 3.0X
14:31:35: Extended Security Support         : Extended_Security_Not_Supported
14:31:35: Command Support                   : COMMAND_SUPPORT
14:31:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3540>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 1344 ] 
14:31:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF90>, <py_sfcl.CommandDataDefinition object at 0x0611CB40>) , Command count = 1345 ] 
14:31:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:35: [ SetBusWidth(0x4) , Command count = 1346 ] 
14:31:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1347 ] 
14:31:35: Protected Area Size 0x28000
14:31:35: Bus Width           2
14:31:35: Secure Mode         0
14:31:35: Speed  Class        4
14:31:35: Perf Move           0
14:31:35: Au Size             9
14:31:35: Erase Size          15
14:31:35: Erase Timeout       1
14:31:35: Erase offset        1
14:31:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1348 ] 
14:31:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:35: Host Frequency set to 100000 KHz
14:31:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:35: ####CSD Registe 2.0 Values####
14:31:35: CSD_STRUCTURE                                 :0x1
14:31:35: Reserv1                                       :0x0
14:31:35: Time Access 1 TAAC                            :0xe
14:31:35: Time Access 2 NSAC*100                        :0x0
14:31:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:35: Card Command Classess CCC                     :0x5b5
14:31:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:35: DSR(driver stage register)  DSR_IMP           :0x0
14:31:35: Reserv2                                       :0x0
14:31:35: Device Size C_SIZE                            :0xedc8
14:31:35: Reserv3                                       :0x0
14:31:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:35: Reserv4                                       :0x0
14:31:35: Write Speed Factor R2W_FACTOR                 :0x2
14:31:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:35: FILE_FORMAT_GRP                               :0x0
14:31:35: COPY flag                                     :0x1
14:31:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:35: File_Format                                   :0x0
14:31:35: CRC                                           :0x0
14:31:35: ####CSD Registe Values####  

14:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9C0>, <py_sfcl.CommandDataDefinition object at 0x0611C450>) , Command count = 1349 ] 
14:31:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x0613F150>) , Command count = 1350 ] 
14:31:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F083 to EndLba:0x3B6F103 with One's Pattern
14:31:36: [ WrLbaNoData(0x3B6F083, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1351 ] 
14:31:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F083 to EndLba:0x3B6F103 with One's Pattern 

14:31:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F103 to EndLba:0x3B6F183 with One's Pattern
14:31:36: [ WrLbaNoData(0x3B6F103, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1352 ] 
14:31:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F103 to EndLba:0x3B6F183 with One's Pattern 

14:31:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A7 to EndLba:0x25121 with Constant Pattern
14:31:36: [ RdLbaNoData(0x231A7, 0x1F7A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1353 ] 
14:31:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A7 to EndLba:0x25121 with Constant Pattern 

14:31:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4027
14:31:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CC30>, <None>) , Command count = 1354 ] 
14:31:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:38: Host Frequency set to 25000 KHz
14:31:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C3F0>, 0x0, True) , Command count = 1355 ] 
14:31:38: [GO18_globalSetVolt]### Host voltage value is set.
14:31:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C0C0>, 0x0, False) , Command count = 1356 ] 
14:31:38: [GO18_globalSetVolt]### Host voltage value is set.
14:31:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1357 ] 
14:31:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1358 ] 
14:31:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1359 ] 
14:31:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611CD20>) , Command count = 1360 ] 
14:31:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129030>, <py_sfcl.CommandDataDefinition object at 0x0611CAB0>) , Command count = 1361 ] 
14:31:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1362 ] 
14:31:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:38: Host Frequency set to 25000 KHz
14:31:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:38: ####CSD Registe 2.0 Values####
14:31:38: CSD_STRUCTURE                                 :0x1
14:31:38: Reserv1                                       :0x0
14:31:38: Time Access 1 TAAC                            :0xe
14:31:38: Time Access 2 NSAC*100                        :0x0
14:31:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:38: Card Command Classess CCC                     :0x5b5
14:31:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:38: DSR(driver stage register)  DSR_IMP           :0x0
14:31:38: Reserv2                                       :0x0
14:31:38: Device Size C_SIZE                            :0xedc8
14:31:38: Reserv3                                       :0x0
14:31:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:38: Reserv4                                       :0x0
14:31:38: Write Speed Factor R2W_FACTOR                 :0x2
14:31:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:38: FILE_FORMAT_GRP                               :0x0
14:31:38: COPY flag                                     :0x1
14:31:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:38: File_Format                                   :0x0
14:31:38: CRC                                           :0x0
14:31:38: ####CSD Registe Values####  

14:31:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:38: [GetSCRRegisterEntry] Passed
14:31:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:38: Data_Status_After Erases          : 0
14:31:38: CPRM Security Support             : No Security
14:31:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:38: Spec. Version                     : Version 3.0X
14:31:38: Extended Security Support         : Extended_Security_Not_Supported
14:31:38: Command Support                   : COMMAND_SUPPORT
14:31:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C810>, <py_sfcl.CommandDataDefinition object at 0x0611CEA0>) , Command count = 1363 ] 
14:31:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x06129990>) , Command count = 1364 ] 
14:31:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:38: [ SetBusWidth(0x4) , Command count = 1365 ] 
14:31:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1366 ] 
14:31:38: Protected Area Size 0x28000
14:31:38: Bus Width           2
14:31:38: Secure Mode         0
14:31:38: Speed  Class        4
14:31:38: Perf Move           0
14:31:38: Au Size             9
14:31:38: Erase Size          15
14:31:38: Erase Timeout       1
14:31:38: Erase offset        1
14:31:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1367 ] 
14:31:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:38: Host Frequency set to 100000 KHz
14:31:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:39: ####CSD Registe 2.0 Values####
14:31:39: CSD_STRUCTURE                                 :0x1
14:31:39: Reserv1                                       :0x0
14:31:39: Time Access 1 TAAC                            :0xe
14:31:39: Time Access 2 NSAC*100                        :0x0
14:31:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:39: Card Command Classess CCC                     :0x5b5
14:31:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:39: DSR(driver stage register)  DSR_IMP           :0x0
14:31:39: Reserv2                                       :0x0
14:31:39: Device Size C_SIZE                            :0xedc8
14:31:39: Reserv3                                       :0x0
14:31:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:39: Reserv4                                       :0x0
14:31:39: Write Speed Factor R2W_FACTOR                 :0x2
14:31:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:39: FILE_FORMAT_GRP                               :0x0
14:31:39: COPY flag                                     :0x1
14:31:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:39: File_Format                                   :0x0
14:31:39: CRC                                           :0x0
14:31:39: ####CSD Registe Values####  

14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BA0>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 1368 ] 
14:31:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 1369 ] 
14:31:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E7AF to EndLba:0x3B6E82F with One's Pattern
14:31:39: [ WrLbaNoData(0x3B6E7AF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1370 ] 
14:31:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E7AF to EndLba:0x3B6E82F with One's Pattern 

14:31:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E82F to EndLba:0x3B6E8AF with One's Pattern
14:31:39: [ WrLbaNoData(0x3B6E82F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1371 ] 
14:31:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E82F to EndLba:0x3B6E8AF with One's Pattern 

14:31:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A7 to EndLba:0x2511F with Constant Pattern
14:31:39: [ RdLbaNoData(0x231A7, 0x1F78, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1372 ] 
14:31:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A7 to EndLba:0x2511F with Constant Pattern 

14:31:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4026
14:31:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129360>, <py_sfcl.PySEnhancedCmdData object at 0x0611C9F0>, <None>) , Command count = 1373 ] 
14:31:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:41: Host Frequency set to 25000 KHz
14:31:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CAE0>, 0x0, True) , Command count = 1374 ] 
14:31:41: [GO18_globalSetVolt]### Host voltage value is set.
14:31:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129D50>, 0x0, False) , Command count = 1375 ] 
14:31:41: [GO18_globalSetVolt]### Host voltage value is set.
14:31:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1376 ] 
14:31:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1377 ] 
14:31:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1378 ] 
14:31:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061290F0>, <py_sfcl.CommandDataDefinition object at 0x0611C7B0>) , Command count = 1379 ] 
14:31:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 1380 ] 
14:31:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1381 ] 
14:31:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:42: Host Frequency set to 25000 KHz
14:31:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:42: ####CSD Registe 2.0 Values####
14:31:42: CSD_STRUCTURE                                 :0x1
14:31:42: Reserv1                                       :0x0
14:31:42: Time Access 1 TAAC                            :0xe
14:31:42: Time Access 2 NSAC*100                        :0x0
14:31:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:42: Card Command Classess CCC                     :0x5b5
14:31:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:42: DSR(driver stage register)  DSR_IMP           :0x0
14:31:42: Reserv2                                       :0x0
14:31:42: Device Size C_SIZE                            :0xedc8
14:31:42: Reserv3                                       :0x0
14:31:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:42: Reserv4                                       :0x0
14:31:42: Write Speed Factor R2W_FACTOR                 :0x2
14:31:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:42: FILE_FORMAT_GRP                               :0x0
14:31:42: COPY flag                                     :0x1
14:31:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:42: File_Format                                   :0x0
14:31:42: CRC                                           :0x0
14:31:42: ####CSD Registe Values####  

14:31:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:42: [GetSCRRegisterEntry] Passed
14:31:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:42: Data_Status_After Erases          : 0
14:31:42: CPRM Security Support             : No Security
14:31:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:42: Spec. Version                     : Version 3.0X
14:31:42: Extended Security Support         : Extended_Security_Not_Supported
14:31:42: Command Support                   : COMMAND_SUPPORT
14:31:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298A0>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 1382 ] 
14:31:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129660>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 1383 ] 
14:31:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:42: [ SetBusWidth(0x4) , Command count = 1384 ] 
14:31:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061291E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1385 ] 
14:31:42: Protected Area Size 0x28000
14:31:42: Bus Width           2
14:31:42: Secure Mode         0
14:31:42: Speed  Class        4
14:31:42: Perf Move           0
14:31:42: Au Size             9
14:31:42: Erase Size          15
14:31:42: Erase Timeout       1
14:31:42: Erase offset        1
14:31:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1386 ] 
14:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:42: Host Frequency set to 100000 KHz
14:31:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:42: ####CSD Registe 2.0 Values####
14:31:42: CSD_STRUCTURE                                 :0x1
14:31:42: Reserv1                                       :0x0
14:31:42: Time Access 1 TAAC                            :0xe
14:31:42: Time Access 2 NSAC*100                        :0x0
14:31:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:42: Card Command Classess CCC                     :0x5b5
14:31:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:42: DSR(driver stage register)  DSR_IMP           :0x0
14:31:42: Reserv2                                       :0x0
14:31:42: Device Size C_SIZE                            :0xedc8
14:31:42: Reserv3                                       :0x0
14:31:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:42: Reserv4                                       :0x0
14:31:42: Write Speed Factor R2W_FACTOR                 :0x2
14:31:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:42: FILE_FORMAT_GRP                               :0x0
14:31:42: COPY flag                                     :0x1
14:31:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:42: File_Format                                   :0x0
14:31:42: CRC                                           :0x0
14:31:42: ####CSD Registe Values####  

14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A50>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 1387 ] 
14:31:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CF0>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 1388 ] 
14:31:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70362 to EndLba:0x3B703E2 with One's Pattern
14:31:42: [ WrLbaNoData(0x3B70362, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1389 ] 
14:31:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70362 to EndLba:0x3B703E2 with One's Pattern 

14:31:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B703E2 to EndLba:0x3B70462 with One's Pattern
14:31:42: [ WrLbaNoData(0x3B703E2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1390 ] 
14:31:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B703E2 to EndLba:0x3B70462 with One's Pattern 

14:31:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A9 to EndLba:0x2511F with Constant Pattern
14:31:42: [ RdLbaNoData(0x231A9, 0x1F76, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1391 ] 
14:31:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A9 to EndLba:0x2511F with Constant Pattern 

14:31:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4025
14:31:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129CC0>, <py_sfcl.PySEnhancedCmdData object at 0x061293F0>, <None>) , Command count = 1392 ] 
14:31:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:44: Host Frequency set to 25000 KHz
14:31:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129750>, 0x0, True) , Command count = 1393 ] 
14:31:45: [GO18_globalSetVolt]### Host voltage value is set.
14:31:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CB10>, 0x0, False) , Command count = 1394 ] 
14:31:45: [GO18_globalSetVolt]### Host voltage value is set.
14:31:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1395 ] 
14:31:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1396 ] 
14:31:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1397 ] 
14:31:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F00>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 1398 ] 
14:31:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 1399 ] 
14:31:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1400 ] 
14:31:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:45: Host Frequency set to 25000 KHz
14:31:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:45: ####CSD Registe 2.0 Values####
14:31:45: CSD_STRUCTURE                                 :0x1
14:31:45: Reserv1                                       :0x0
14:31:45: Time Access 1 TAAC                            :0xe
14:31:45: Time Access 2 NSAC*100                        :0x0
14:31:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:45: Card Command Classess CCC                     :0x5b5
14:31:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:45: DSR(driver stage register)  DSR_IMP           :0x0
14:31:45: Reserv2                                       :0x0
14:31:45: Device Size C_SIZE                            :0xedc8
14:31:45: Reserv3                                       :0x0
14:31:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:45: Reserv4                                       :0x0
14:31:45: Write Speed Factor R2W_FACTOR                 :0x2
14:31:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:45: FILE_FORMAT_GRP                               :0x0
14:31:45: COPY flag                                     :0x1
14:31:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:45: File_Format                                   :0x0
14:31:45: CRC                                           :0x0
14:31:45: ####CSD Registe Values####  

14:31:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:45: [GetSCRRegisterEntry] Passed
14:31:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:45: Data_Status_After Erases          : 0
14:31:45: CPRM Security Support             : No Security
14:31:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:45: Spec. Version                     : Version 3.0X
14:31:45: Extended Security Support         : Extended_Security_Not_Supported
14:31:45: Command Support                   : COMMAND_SUPPORT
14:31:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E210>, <py_sfcl.CommandDataDefinition object at 0x0611CDB0>) , Command count = 1401 ] 
14:31:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E40>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 1402 ] 
14:31:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:45: [ SetBusWidth(0x4) , Command count = 1403 ] 
14:31:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061297E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1404 ] 
14:31:45: Protected Area Size 0x28000
14:31:45: Bus Width           2
14:31:45: Secure Mode         0
14:31:45: Speed  Class        4
14:31:45: Perf Move           0
14:31:45: Au Size             9
14:31:45: Erase Size          15
14:31:45: Erase Timeout       1
14:31:45: Erase offset        1
14:31:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1405 ] 
14:31:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:45: Host Frequency set to 100000 KHz
14:31:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:45: ####CSD Registe 2.0 Values####
14:31:45: CSD_STRUCTURE                                 :0x1
14:31:45: Reserv1                                       :0x0
14:31:45: Time Access 1 TAAC                            :0xe
14:31:45: Time Access 2 NSAC*100                        :0x0
14:31:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:45: Card Command Classess CCC                     :0x5b5
14:31:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:45: DSR(driver stage register)  DSR_IMP           :0x0
14:31:45: Reserv2                                       :0x0
14:31:45: Device Size C_SIZE                            :0xedc8
14:31:45: Reserv3                                       :0x0
14:31:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:45: Reserv4                                       :0x0
14:31:45: Write Speed Factor R2W_FACTOR                 :0x2
14:31:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:46: FILE_FORMAT_GRP                               :0x0
14:31:46: COPY flag                                     :0x1
14:31:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:46: File_Format                                   :0x0
14:31:46: CRC                                           :0x0
14:31:46: ####CSD Registe Values####  

14:31:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E450>, <py_sfcl.CommandDataDefinition object at 0x0612E270>) , Command count = 1406 ] 
14:31:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 1407 ] 
14:31:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70212 to EndLba:0x3B70292 with One's Pattern
14:31:46: [ WrLbaNoData(0x3B70212, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1408 ] 
14:31:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70212 to EndLba:0x3B70292 with One's Pattern 

14:31:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70292 to EndLba:0x3B70312 with One's Pattern
14:31:46: [ WrLbaNoData(0x3B70292, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1409 ] 
14:31:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70292 to EndLba:0x3B70312 with One's Pattern 

14:31:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231A9 to EndLba:0x2511D with Constant Pattern
14:31:46: [ RdLbaNoData(0x231A9, 0x1F74, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1410 ] 
14:31:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231A9 to EndLba:0x2511D with Constant Pattern 

14:31:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4024
14:31:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129960>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E570>, <py_sfcl.PySEnhancedCmdData object at 0x0612E3F0>, <None>) , Command count = 1411 ] 
14:31:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:48: Host Frequency set to 25000 KHz
14:31:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E2A0>, 0x0, True) , Command count = 1412 ] 
14:31:48: [GO18_globalSetVolt]### Host voltage value is set.
14:31:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x061297B0>, 0x0, False) , Command count = 1413 ] 
14:31:48: [GO18_globalSetVolt]### Host voltage value is set.
14:31:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1414 ] 
14:31:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1415 ] 
14:31:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1416 ] 
14:31:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x0613F750>) , Command count = 1417 ] 
14:31:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x06129B10>) , Command count = 1418 ] 
14:31:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1419 ] 
14:31:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:48: Host Frequency set to 25000 KHz
14:31:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:48: ####CSD Registe 2.0 Values####
14:31:48: CSD_STRUCTURE                                 :0x1
14:31:48: Reserv1                                       :0x0
14:31:48: Time Access 1 TAAC                            :0xe
14:31:48: Time Access 2 NSAC*100                        :0x0
14:31:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:48: Card Command Classess CCC                     :0x5b5
14:31:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:48: DSR(driver stage register)  DSR_IMP           :0x0
14:31:48: Reserv2                                       :0x0
14:31:48: Device Size C_SIZE                            :0xedc8
14:31:48: Reserv3                                       :0x0
14:31:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:48: Reserv4                                       :0x0
14:31:48: Write Speed Factor R2W_FACTOR                 :0x2
14:31:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:48: FILE_FORMAT_GRP                               :0x0
14:31:48: COPY flag                                     :0x1
14:31:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:48: File_Format                                   :0x0
14:31:48: CRC                                           :0x0
14:31:48: ####CSD Registe Values####  

14:31:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:48: [GetSCRRegisterEntry] Passed
14:31:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:48: Data_Status_After Erases          : 0
14:31:48: CPRM Security Support             : No Security
14:31:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:48: Spec. Version                     : Version 3.0X
14:31:48: Extended Security Support         : Extended_Security_Not_Supported
14:31:48: Command Support                   : COMMAND_SUPPORT
14:31:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129EA0>, <py_sfcl.CommandDataDefinition object at 0x06129840>) , Command count = 1420 ] 
14:31:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 1421 ] 
14:31:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:48: [ SetBusWidth(0x4) , Command count = 1422 ] 
14:31:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1423 ] 
14:31:48: Protected Area Size 0x28000
14:31:48: Bus Width           2
14:31:48: Secure Mode         0
14:31:48: Speed  Class        4
14:31:48: Perf Move           0
14:31:48: Au Size             9
14:31:48: Erase Size          15
14:31:49: Erase Timeout       1
14:31:49: Erase offset        1
14:31:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1424 ] 
14:31:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:49: Host Frequency set to 100000 KHz
14:31:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:49: ####CSD Registe 2.0 Values####
14:31:49: CSD_STRUCTURE                                 :0x1
14:31:49: Reserv1                                       :0x0
14:31:49: Time Access 1 TAAC                            :0xe
14:31:49: Time Access 2 NSAC*100                        :0x0
14:31:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:49: Card Command Classess CCC                     :0x5b5
14:31:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:49: DSR(driver stage register)  DSR_IMP           :0x0
14:31:49: Reserv2                                       :0x0
14:31:49: Device Size C_SIZE                            :0xedc8
14:31:49: Reserv3                                       :0x0
14:31:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:49: Reserv4                                       :0x0
14:31:49: Write Speed Factor R2W_FACTOR                 :0x2
14:31:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:49: FILE_FORMAT_GRP                               :0x0
14:31:49: COPY flag                                     :0x1
14:31:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:49: File_Format                                   :0x0
14:31:49: CRC                                           :0x0
14:31:49: ####CSD Registe Values####  

14:31:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321B0>, <py_sfcl.CommandDataDefinition object at 0x0612E900>) , Command count = 1425 ] 
14:31:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x0613F9F0>) , Command count = 1426 ] 
14:31:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F855 to EndLba:0x3B6F8D5 with One's Pattern
14:31:49: [ WrLbaNoData(0x3B6F855, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1427 ] 
14:31:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F855 to EndLba:0x3B6F8D5 with One's Pattern 

14:31:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F8D5 to EndLba:0x3B6F955 with One's Pattern
14:31:49: [ WrLbaNoData(0x3B6F8D5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1428 ] 
14:31:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F8D5 to EndLba:0x3B6F955 with One's Pattern 

14:31:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231AB to EndLba:0x2511D with Constant Pattern
14:31:49: [ RdLbaNoData(0x231AB, 0x1F72, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1429 ] 
14:31:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231AB to EndLba:0x2511D with Constant Pattern 

14:31:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4023
14:31:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EB70>, <py_sfcl.PySEnhancedCmdData object at 0x0612E510>, <None>) , Command count = 1430 ] 
14:31:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:51: Host Frequency set to 25000 KHz
14:31:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129C60>, 0x0, True) , Command count = 1431 ] 
14:31:51: [GO18_globalSetVolt]### Host voltage value is set.
14:31:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129ED0>, 0x0, False) , Command count = 1432 ] 
14:31:51: [GO18_globalSetVolt]### Host voltage value is set.
14:31:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1433 ] 
14:31:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1434 ] 
14:31:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1435 ] 
14:31:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x0611C510>) , Command count = 1436 ] 
14:31:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x0612E750>) , Command count = 1437 ] 
14:31:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1438 ] 
14:31:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:52: Host Frequency set to 25000 KHz
14:31:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:52: ####CSD Registe 2.0 Values####
14:31:52: CSD_STRUCTURE                                 :0x1
14:31:52: Reserv1                                       :0x0
14:31:52: Time Access 1 TAAC                            :0xe
14:31:52: Time Access 2 NSAC*100                        :0x0
14:31:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:52: Card Command Classess CCC                     :0x5b5
14:31:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:52: DSR(driver stage register)  DSR_IMP           :0x0
14:31:52: Reserv2                                       :0x0
14:31:52: Device Size C_SIZE                            :0xedc8
14:31:52: Reserv3                                       :0x0
14:31:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:52: Reserv4                                       :0x0
14:31:52: Write Speed Factor R2W_FACTOR                 :0x2
14:31:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:52: FILE_FORMAT_GRP                               :0x0
14:31:52: COPY flag                                     :0x1
14:31:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:52: File_Format                                   :0x0
14:31:52: CRC                                           :0x0
14:31:52: ####CSD Registe Values####  

14:31:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:52: [GetSCRRegisterEntry] Passed
14:31:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:52: Data_Status_After Erases          : 0
14:31:52: CPRM Security Support             : No Security
14:31:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:52: Spec. Version                     : Version 3.0X
14:31:52: Extended Security Support         : Extended_Security_Not_Supported
14:31:52: Command Support                   : COMMAND_SUPPORT
14:31:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED20>, <py_sfcl.CommandDataDefinition object at 0x0612E690>) , Command count = 1439 ] 
14:31:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x0612E9F0>) , Command count = 1440 ] 
14:31:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:52: [ SetBusWidth(0x4) , Command count = 1441 ] 
14:31:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1442 ] 
14:31:52: Protected Area Size 0x28000
14:31:52: Bus Width           2
14:31:52: Secure Mode         0
14:31:52: Speed  Class        4
14:31:52: Perf Move           0
14:31:52: Au Size             9
14:31:52: Erase Size          15
14:31:52: Erase Timeout       1
14:31:52: Erase offset        1
14:31:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1443 ] 
14:31:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:52: Host Frequency set to 100000 KHz
14:31:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:52: ####CSD Registe 2.0 Values####
14:31:52: CSD_STRUCTURE                                 :0x1
14:31:52: Reserv1                                       :0x0
14:31:52: Time Access 1 TAAC                            :0xe
14:31:52: Time Access 2 NSAC*100                        :0x0
14:31:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:52: Card Command Classess CCC                     :0x5b5
14:31:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:52: DSR(driver stage register)  DSR_IMP           :0x0
14:31:52: Reserv2                                       :0x0
14:31:52: Device Size C_SIZE                            :0xedc8
14:31:52: Reserv3                                       :0x0
14:31:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:52: Reserv4                                       :0x0
14:31:52: Write Speed Factor R2W_FACTOR                 :0x2
14:31:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:52: FILE_FORMAT_GRP                               :0x0
14:31:52: COPY flag                                     :0x1
14:31:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:52: File_Format                                   :0x0
14:31:52: CRC                                           :0x0
14:31:52: ####CSD Registe Values####  

14:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320F0>, <py_sfcl.CommandDataDefinition object at 0x0613F810>) , Command count = 1444 ] 
14:31:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322A0>, <py_sfcl.CommandDataDefinition object at 0x0612EAB0>) , Command count = 1445 ] 
14:31:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D5A3 to EndLba:0x3B6D623 with One's Pattern
14:31:53: [ WrLbaNoData(0x3B6D5A3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1446 ] 
14:31:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D5A3 to EndLba:0x3B6D623 with One's Pattern 

14:31:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D623 to EndLba:0x3B6D6A3 with One's Pattern
14:31:53: [ WrLbaNoData(0x3B6D623, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1447 ] 
14:31:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D623 to EndLba:0x3B6D6A3 with One's Pattern 

14:31:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231AB to EndLba:0x2511B with Constant Pattern
14:31:53: [ RdLbaNoData(0x231AB, 0x1F70, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1448 ] 
14:31:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231AB to EndLba:0x2511B with Constant Pattern 

14:31:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4022
14:31:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132120>, <py_sfcl.PySEnhancedCmdData object at 0x061323F0>, <None>) , Command count = 1449 ] 
14:31:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:55: Host Frequency set to 25000 KHz
14:31:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E5D0>, 0x0, True) , Command count = 1450 ] 
14:31:55: [GO18_globalSetVolt]### Host voltage value is set.
14:31:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E630>, 0x0, False) , Command count = 1451 ] 
14:31:55: [GO18_globalSetVolt]### Host voltage value is set.
14:31:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1452 ] 
14:31:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1453 ] 
14:31:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1454 ] 
14:31:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F60>, <py_sfcl.CommandDataDefinition object at 0x0613FD50>) , Command count = 1455 ] 
14:31:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321E0>, <py_sfcl.CommandDataDefinition object at 0x0612E600>) , Command count = 1456 ] 
14:31:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1457 ] 
14:31:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:55: Host Frequency set to 25000 KHz
14:31:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:55: ####CSD Registe 2.0 Values####
14:31:55: CSD_STRUCTURE                                 :0x1
14:31:55: Reserv1                                       :0x0
14:31:55: Time Access 1 TAAC                            :0xe
14:31:55: Time Access 2 NSAC*100                        :0x0
14:31:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:55: Card Command Classess CCC                     :0x5b5
14:31:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:55: DSR(driver stage register)  DSR_IMP           :0x0
14:31:55: Reserv2                                       :0x0
14:31:55: Device Size C_SIZE                            :0xedc8
14:31:55: Reserv3                                       :0x0
14:31:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:55: Reserv4                                       :0x0
14:31:55: Write Speed Factor R2W_FACTOR                 :0x2
14:31:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:55: FILE_FORMAT_GRP                               :0x0
14:31:55: COPY flag                                     :0x1
14:31:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:55: File_Format                                   :0x0
14:31:55: CRC                                           :0x0
14:31:55: ####CSD Registe Values####  

14:31:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:55: [GetSCRRegisterEntry] Passed
14:31:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:55: Data_Status_After Erases          : 0
14:31:55: CPRM Security Support             : No Security
14:31:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:55: Spec. Version                     : Version 3.0X
14:31:55: Extended Security Support         : Extended_Security_Not_Supported
14:31:55: Command Support                   : COMMAND_SUPPORT
14:31:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x0612E720>) , Command count = 1458 ] 
14:31:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132420>, <py_sfcl.CommandDataDefinition object at 0x061328D0>) , Command count = 1459 ] 
14:31:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:55: [ SetBusWidth(0x4) , Command count = 1460 ] 
14:31:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1461 ] 
14:31:55: Protected Area Size 0x28000
14:31:55: Bus Width           2
14:31:55: Secure Mode         0
14:31:55: Speed  Class        4
14:31:55: Perf Move           0
14:31:55: Au Size             9
14:31:55: Erase Size          15
14:31:55: Erase Timeout       1
14:31:55: Erase offset        1
14:31:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1462 ] 
14:31:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:55: Host Frequency set to 100000 KHz
14:31:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:55: ####CSD Registe 2.0 Values####
14:31:55: CSD_STRUCTURE                                 :0x1
14:31:55: Reserv1                                       :0x0
14:31:55: Time Access 1 TAAC                            :0xe
14:31:55: Time Access 2 NSAC*100                        :0x0
14:31:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:55: Card Command Classess CCC                     :0x5b5
14:31:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:56: DSR(driver stage register)  DSR_IMP           :0x0
14:31:56: Reserv2                                       :0x0
14:31:56: Device Size C_SIZE                            :0xedc8
14:31:56: Reserv3                                       :0x0
14:31:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:56: Reserv4                                       :0x0
14:31:56: Write Speed Factor R2W_FACTOR                 :0x2
14:31:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:56: FILE_FORMAT_GRP                               :0x0
14:31:56: COPY flag                                     :0x1
14:31:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:56: File_Format                                   :0x0
14:31:56: CRC                                           :0x0
14:31:56: ####CSD Registe Values####  

14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132780>, <py_sfcl.CommandDataDefinition object at 0x06132390>) , Command count = 1463 ] 
14:31:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py_sfcl.CommandDataDefinition object at 0x0613F330>) , Command count = 1464 ] 
14:31:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F1E3 to EndLba:0x3B6F263 with One's Pattern
14:31:56: [ WrLbaNoData(0x3B6F1E3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1465 ] 
14:31:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F1E3 to EndLba:0x3B6F263 with One's Pattern 

14:31:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F263 to EndLba:0x3B6F2E3 with One's Pattern
14:31:56: [ WrLbaNoData(0x3B6F263, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1466 ] 
14:31:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F263 to EndLba:0x3B6F2E3 with One's Pattern 

14:31:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231AD to EndLba:0x2511B with Constant Pattern
14:31:56: [ RdLbaNoData(0x231AD, 0x1F6E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1467 ] 
14:31:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231AD to EndLba:0x2511B with Constant Pattern 

14:31:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4021
14:31:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:31:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061329F0>, <py_sfcl.PySEnhancedCmdData object at 0x06132210>, <None>) , Command count = 1468 ] 
14:31:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:31:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:31:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:58: Host Frequency set to 25000 KHz
14:31:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:31:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:31:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129C00>, 0x0, True) , Command count = 1469 ] 
14:31:58: [GO18_globalSetVolt]### Host voltage value is set.
14:31:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:31:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612ED50>, 0x0, False) , Command count = 1470 ] 
14:31:58: [GO18_globalSetVolt]### Host voltage value is set.
14:31:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1471 ] 
14:31:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:31:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1472 ] 
14:31:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:31:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:31:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:31:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:31:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:31:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1473 ] 
14:31:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:31:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132630>, <py_sfcl.CommandDataDefinition object at 0x06132FC0>) , Command count = 1474 ] 
14:31:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:31:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x061325D0>) , Command count = 1475 ] 
14:31:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:31:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1476 ] 
14:31:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:31:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:31:59: Host Frequency set to 25000 KHz
14:31:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:31:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:59: ####CSD Registe 2.0 Values####
14:31:59: CSD_STRUCTURE                                 :0x1
14:31:59: Reserv1                                       :0x0
14:31:59: Time Access 1 TAAC                            :0xe
14:31:59: Time Access 2 NSAC*100                        :0x0
14:31:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:31:59: Card Command Classess CCC                     :0x5b5
14:31:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:59: DSR(driver stage register)  DSR_IMP           :0x0
14:31:59: Reserv2                                       :0x0
14:31:59: Device Size C_SIZE                            :0xedc8
14:31:59: Reserv3                                       :0x0
14:31:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:59: Reserv4                                       :0x0
14:31:59: Write Speed Factor R2W_FACTOR                 :0x2
14:31:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:59: FILE_FORMAT_GRP                               :0x0
14:31:59: COPY flag                                     :0x1
14:31:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:59: File_Format                                   :0x0
14:31:59: CRC                                           :0x0
14:31:59: ####CSD Registe Values####  

14:31:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:31:59: [GetSCRRegisterEntry] Passed
14:31:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:31:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:31:59: Data_Status_After Erases          : 0
14:31:59: CPRM Security Support             : No Security
14:31:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:31:59: Spec. Version                     : Version 3.0X
14:31:59: Extended Security Support         : Extended_Security_Not_Supported
14:31:59: Command Support                   : COMMAND_SUPPORT
14:31:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132720>, <py_sfcl.CommandDataDefinition object at 0x0612EE70>) , Command count = 1477 ] 
14:31:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x061327B0>) , Command count = 1478 ] 
14:31:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:31:59: [ SetBusWidth(0x4) , Command count = 1479 ] 
14:31:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:31:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1480 ] 
14:31:59: Protected Area Size 0x28000
14:31:59: Bus Width           2
14:31:59: Secure Mode         0
14:31:59: Speed  Class        4
14:31:59: Perf Move           0
14:31:59: Au Size             9
14:31:59: Erase Size          15
14:31:59: Erase Timeout       1
14:31:59: Erase offset        1
14:31:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:31:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:31:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:31:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1481 ] 
14:31:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:31:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:31:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:31:59: Host Frequency set to 100000 KHz
14:31:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:31:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:31:59: ####CSD Registe 2.0 Values####
14:31:59: CSD_STRUCTURE                                 :0x1
14:31:59: Reserv1                                       :0x0
14:31:59: Time Access 1 TAAC                            :0xe
14:31:59: Time Access 2 NSAC*100                        :0x0
14:31:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:31:59: Card Command Classess CCC                     :0x5b5
14:31:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:31:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:31:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:31:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:31:59: DSR(driver stage register)  DSR_IMP           :0x0
14:31:59: Reserv2                                       :0x0
14:31:59: Device Size C_SIZE                            :0xedc8
14:31:59: Reserv3                                       :0x0
14:31:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:31:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:31:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:31:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:31:59: Reserv4                                       :0x0
14:31:59: Write Speed Factor R2W_FACTOR                 :0x2
14:31:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:31:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:31:59: FILE_FORMAT_GRP                               :0x0
14:31:59: COPY flag                                     :0x1
14:31:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:31:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:31:59: File_Format                                   :0x0
14:31:59: CRC                                           :0x0
14:31:59: ####CSD Registe Values####  

14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138120>, <py_sfcl.CommandDataDefinition object at 0x06132D80>) , Command count = 1482 ] 
14:31:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:31:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 1483 ] 
14:31:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:31:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:31:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:31:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B707A8 to EndLba:0x3B70828 with One's Pattern
14:31:59: [ WrLbaNoData(0x3B707A8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1484 ] 
14:31:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B707A8 to EndLba:0x3B70828 with One's Pattern 

14:31:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70828 to EndLba:0x3B708A8 with One's Pattern
14:31:59: [ WrLbaNoData(0x3B70828, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1485 ] 
14:31:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70828 to EndLba:0x3B708A8 with One's Pattern 

14:31:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:31:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231AD to EndLba:0x25119 with Constant Pattern
14:32:00: [ RdLbaNoData(0x231AD, 0x1F6C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1486 ] 
14:32:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231AD to EndLba:0x25119 with Constant Pattern 

14:32:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4020
14:32:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138180>, <py_sfcl.PySEnhancedCmdData object at 0x06132EA0>, <None>) , Command count = 1487 ] 
14:32:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:02: Host Frequency set to 25000 KHz
14:32:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132F30>, 0x0, True) , Command count = 1488 ] 
14:32:02: [GO18_globalSetVolt]### Host voltage value is set.
14:32:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x061324B0>, 0x0, False) , Command count = 1489 ] 
14:32:02: [GO18_globalSetVolt]### Host voltage value is set.
14:32:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1490 ] 
14:32:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1491 ] 
14:32:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1492 ] 
14:32:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x06132B10>) , Command count = 1493 ] 
14:32:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138090>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 1494 ] 
14:32:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1495 ] 
14:32:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:02: Host Frequency set to 25000 KHz
14:32:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:02: ####CSD Registe 2.0 Values####
14:32:02: CSD_STRUCTURE                                 :0x1
14:32:02: Reserv1                                       :0x0
14:32:02: Time Access 1 TAAC                            :0xe
14:32:02: Time Access 2 NSAC*100                        :0x0
14:32:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:02: Card Command Classess CCC                     :0x5b5
14:32:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:02: DSR(driver stage register)  DSR_IMP           :0x0
14:32:02: Reserv2                                       :0x0
14:32:02: Device Size C_SIZE                            :0xedc8
14:32:02: Reserv3                                       :0x0
14:32:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:02: Reserv4                                       :0x0
14:32:02: Write Speed Factor R2W_FACTOR                 :0x2
14:32:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:02: FILE_FORMAT_GRP                               :0x0
14:32:02: COPY flag                                     :0x1
14:32:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:02: File_Format                                   :0x0
14:32:02: CRC                                           :0x0
14:32:02: ####CSD Registe Values####  

14:32:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:02: [GetSCRRegisterEntry] Passed
14:32:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:02: Data_Status_After Erases          : 0
14:32:02: CPRM Security Support             : No Security
14:32:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:02: Spec. Version                     : Version 3.0X
14:32:02: Extended Security Support         : Extended_Security_Not_Supported
14:32:02: Command Support                   : COMMAND_SUPPORT
14:32:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E40>, <py_sfcl.CommandDataDefinition object at 0x0612EDE0>) , Command count = 1496 ] 
14:32:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061382A0>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 1497 ] 
14:32:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:02: [ SetBusWidth(0x4) , Command count = 1498 ] 
14:32:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1499 ] 
14:32:02: Protected Area Size 0x28000
14:32:02: Bus Width           2
14:32:02: Secure Mode         0
14:32:02: Speed  Class        4
14:32:02: Perf Move           0
14:32:02: Au Size             9
14:32:02: Erase Size          15
14:32:02: Erase Timeout       1
14:32:02: Erase offset        1
14:32:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1500 ] 
14:32:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:02: Host Frequency set to 100000 KHz
14:32:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:02: ####CSD Registe 2.0 Values####
14:32:02: CSD_STRUCTURE                                 :0x1
14:32:02: Reserv1                                       :0x0
14:32:02: Time Access 1 TAAC                            :0xe
14:32:02: Time Access 2 NSAC*100                        :0x0
14:32:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:02: Card Command Classess CCC                     :0x5b5
14:32:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:02: DSR(driver stage register)  DSR_IMP           :0x0
14:32:02: Reserv2                                       :0x0
14:32:02: Device Size C_SIZE                            :0xedc8
14:32:02: Reserv3                                       :0x0
14:32:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:03: Reserv4                                       :0x0
14:32:03: Write Speed Factor R2W_FACTOR                 :0x2
14:32:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:03: FILE_FORMAT_GRP                               :0x0
14:32:03: COPY flag                                     :0x1
14:32:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:03: File_Format                                   :0x0
14:32:03: CRC                                           :0x0
14:32:03: ####CSD Registe Values####  

14:32:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138600>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 1501 ] 
14:32:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138840>, <py_sfcl.CommandDataDefinition object at 0x06132DE0>) , Command count = 1502 ] 
14:32:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B6B to EndLba:0x3B70BEB with One's Pattern
14:32:03: [ WrLbaNoData(0x3B70B6B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1503 ] 
14:32:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B6B to EndLba:0x3B70BEB with One's Pattern 

14:32:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70BEB to EndLba:0x3B70C6B with One's Pattern
14:32:03: [ WrLbaNoData(0x3B70BEB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1504 ] 
14:32:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70BEB to EndLba:0x3B70C6B with One's Pattern 

14:32:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231AF to EndLba:0x25119 with Constant Pattern
14:32:03: [ RdLbaNoData(0x231AF, 0x1F6A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1505 ] 
14:32:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231AF to EndLba:0x25119 with Constant Pattern 

14:32:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4019
14:32:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138870>, <py_sfcl.PySEnhancedCmdData object at 0x061380C0>, <None>) , Command count = 1506 ] 
14:32:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:05: Host Frequency set to 25000 KHz
14:32:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132180>, 0x0, True) , Command count = 1507 ] 
14:32:05: [GO18_globalSetVolt]### Host voltage value is set.
14:32:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132BD0>, 0x0, False) , Command count = 1508 ] 
14:32:05: [GO18_globalSetVolt]### Host voltage value is set.
14:32:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1509 ] 
14:32:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1510 ] 
14:32:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1511 ] 
14:32:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x061384B0>) , Command count = 1512 ] 
14:32:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B10>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 1513 ] 
14:32:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1514 ] 
14:32:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:05: Host Frequency set to 25000 KHz
14:32:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:05: ####CSD Registe 2.0 Values####
14:32:05: CSD_STRUCTURE                                 :0x1
14:32:05: Reserv1                                       :0x0
14:32:05: Time Access 1 TAAC                            :0xe
14:32:05: Time Access 2 NSAC*100                        :0x0
14:32:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:05: Card Command Classess CCC                     :0x5b5
14:32:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:05: DSR(driver stage register)  DSR_IMP           :0x0
14:32:05: Reserv2                                       :0x0
14:32:05: Device Size C_SIZE                            :0xedc8
14:32:05: Reserv3                                       :0x0
14:32:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:05: Reserv4                                       :0x0
14:32:05: Write Speed Factor R2W_FACTOR                 :0x2
14:32:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:05: FILE_FORMAT_GRP                               :0x0
14:32:05: COPY flag                                     :0x1
14:32:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:05: File_Format                                   :0x0
14:32:05: CRC                                           :0x0
14:32:05: ####CSD Registe Values####  

14:32:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:05: [GetSCRRegisterEntry] Passed
14:32:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:05: Data_Status_After Erases          : 0
14:32:05: CPRM Security Support             : No Security
14:32:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:05: Spec. Version                     : Version 3.0X
14:32:05: Extended Security Support         : Extended_Security_Not_Supported
14:32:05: Command Support                   : COMMAND_SUPPORT
14:32:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138420>, <py_sfcl.CommandDataDefinition object at 0x06138390>) , Command count = 1515 ] 
14:32:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061389C0>, <py_sfcl.CommandDataDefinition object at 0x061386F0>) , Command count = 1516 ] 
14:32:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:05: [ SetBusWidth(0x4) , Command count = 1517 ] 
14:32:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1518 ] 
14:32:05: Protected Area Size 0x28000
14:32:05: Bus Width           2
14:32:05: Secure Mode         0
14:32:05: Speed  Class        4
14:32:05: Perf Move           0
14:32:05: Au Size             9
14:32:05: Erase Size          15
14:32:05: Erase Timeout       1
14:32:05: Erase offset        1
14:32:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1519 ] 
14:32:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:06: Host Frequency set to 100000 KHz
14:32:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:06: ####CSD Registe 2.0 Values####
14:32:06: CSD_STRUCTURE                                 :0x1
14:32:06: Reserv1                                       :0x0
14:32:06: Time Access 1 TAAC                            :0xe
14:32:06: Time Access 2 NSAC*100                        :0x0
14:32:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:06: Card Command Classess CCC                     :0x5b5
14:32:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:06: DSR(driver stage register)  DSR_IMP           :0x0
14:32:06: Reserv2                                       :0x0
14:32:06: Device Size C_SIZE                            :0xedc8
14:32:06: Reserv3                                       :0x0
14:32:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:06: Reserv4                                       :0x0
14:32:06: Write Speed Factor R2W_FACTOR                 :0x2
14:32:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:06: FILE_FORMAT_GRP                               :0x0
14:32:06: COPY flag                                     :0x1
14:32:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:06: File_Format                                   :0x0
14:32:06: CRC                                           :0x0
14:32:06: ####CSD Registe Values####  

14:32:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC00>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 1520 ] 
14:32:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 1521 ] 
14:32:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ECFD to EndLba:0x3B6ED7D with One's Pattern
14:32:06: [ WrLbaNoData(0x3B6ECFD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1522 ] 
14:32:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ECFD to EndLba:0x3B6ED7D with One's Pattern 

14:32:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED7D to EndLba:0x3B6EDFD with One's Pattern
14:32:06: [ WrLbaNoData(0x3B6ED7D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1523 ] 
14:32:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED7D to EndLba:0x3B6EDFD with One's Pattern 

14:32:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231AF to EndLba:0x25117 with Constant Pattern
14:32:06: [ RdLbaNoData(0x231AF, 0x1F68, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1524 ] 
14:32:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231AF to EndLba:0x25117 with Constant Pattern 

14:32:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4018
14:32:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138F30>, <py_sfcl.PySEnhancedCmdData object at 0x06138930>, <None>) , Command count = 1525 ] 
14:32:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:08: Host Frequency set to 25000 KHz
14:32:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132930>, 0x0, True) , Command count = 1526 ] 
14:32:08: [GO18_globalSetVolt]### Host voltage value is set.
14:32:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138330>, 0x0, False) , Command count = 1527 ] 
14:32:08: [GO18_globalSetVolt]### Host voltage value is set.
14:32:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1528 ] 
14:32:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1529 ] 
14:32:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1530 ] 
14:32:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 1531 ] 
14:32:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138EA0>, <py_sfcl.CommandDataDefinition object at 0x061389F0>) , Command count = 1532 ] 
14:32:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1533 ] 
14:32:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:09: Host Frequency set to 25000 KHz
14:32:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:09: ####CSD Registe 2.0 Values####
14:32:09: CSD_STRUCTURE                                 :0x1
14:32:09: Reserv1                                       :0x0
14:32:09: Time Access 1 TAAC                            :0xe
14:32:09: Time Access 2 NSAC*100                        :0x0
14:32:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:09: Card Command Classess CCC                     :0x5b5
14:32:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:09: DSR(driver stage register)  DSR_IMP           :0x0
14:32:09: Reserv2                                       :0x0
14:32:09: Device Size C_SIZE                            :0xedc8
14:32:09: Reserv3                                       :0x0
14:32:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:09: Reserv4                                       :0x0
14:32:09: Write Speed Factor R2W_FACTOR                 :0x2
14:32:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:09: FILE_FORMAT_GRP                               :0x0
14:32:09: COPY flag                                     :0x1
14:32:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:09: File_Format                                   :0x0
14:32:09: CRC                                           :0x0
14:32:09: ####CSD Registe Values####  

14:32:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:09: [GetSCRRegisterEntry] Passed
14:32:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:09: Data_Status_After Erases          : 0
14:32:09: CPRM Security Support             : No Security
14:32:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:09: Spec. Version                     : Version 3.0X
14:32:09: Extended Security Support         : Extended_Security_Not_Supported
14:32:09: Command Support                   : COMMAND_SUPPORT
14:32:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE10>, <py_sfcl.CommandDataDefinition object at 0x06138AE0>) , Command count = 1534 ] 
14:32:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138DE0>, <py_sfcl.CommandDataDefinition object at 0x06138E10>) , Command count = 1535 ] 
14:32:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:09: [ SetBusWidth(0x4) , Command count = 1536 ] 
14:32:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1537 ] 
14:32:09: Protected Area Size 0x28000
14:32:09: Bus Width           2
14:32:09: Secure Mode         0
14:32:09: Speed  Class        4
14:32:09: Perf Move           0
14:32:09: Au Size             9
14:32:09: Erase Size          15
14:32:09: Erase Timeout       1
14:32:09: Erase offset        1
14:32:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1538 ] 
14:32:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:09: Host Frequency set to 100000 KHz
14:32:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:09: ####CSD Registe 2.0 Values####
14:32:09: CSD_STRUCTURE                                 :0x1
14:32:09: Reserv1                                       :0x0
14:32:09: Time Access 1 TAAC                            :0xe
14:32:09: Time Access 2 NSAC*100                        :0x0
14:32:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:09: Card Command Classess CCC                     :0x5b5
14:32:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:09: DSR(driver stage register)  DSR_IMP           :0x0
14:32:09: Reserv2                                       :0x0
14:32:09: Device Size C_SIZE                            :0xedc8
14:32:09: Reserv3                                       :0x0
14:32:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:09: Reserv4                                       :0x0
14:32:09: Write Speed Factor R2W_FACTOR                 :0x2
14:32:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:10: FILE_FORMAT_GRP                               :0x0
14:32:10: COPY flag                                     :0x1
14:32:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:10: File_Format                                   :0x0
14:32:10: CRC                                           :0x0
14:32:10: ####CSD Registe Values####  

14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138ED0>, <py_sfcl.CommandDataDefinition object at 0x0612EED0>) , Command count = 1539 ] 
14:32:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x0613F390>) , Command count = 1540 ] 
14:32:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EE6 to EndLba:0x3B70F66 with One's Pattern
14:32:10: [ WrLbaNoData(0x3B70EE6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1541 ] 
14:32:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EE6 to EndLba:0x3B70F66 with One's Pattern 

14:32:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70F66 to EndLba:0x3B70FE6 with One's Pattern
14:32:10: [ WrLbaNoData(0x3B70F66, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1542 ] 
14:32:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70F66 to EndLba:0x3B70FE6 with One's Pattern 

14:32:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B1 to EndLba:0x25117 with Constant Pattern
14:32:10: [ RdLbaNoData(0x231B1, 0x1F66, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1543 ] 
14:32:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B1 to EndLba:0x25117 with Constant Pattern 

14:32:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4017
14:32:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F3F0>, <py_sfcl.PySEnhancedCmdData object at 0x052AFC60>, <None>) , Command count = 1544 ] 
14:32:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:12: Host Frequency set to 25000 KHz
14:32:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138810>, 0x0, True) , Command count = 1545 ] 
14:32:12: [GO18_globalSetVolt]### Host voltage value is set.
14:32:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138A50>, 0x0, False) , Command count = 1546 ] 
14:32:12: [GO18_globalSetVolt]### Host voltage value is set.
14:32:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1547 ] 
14:32:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1548 ] 
14:32:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1549 ] 
14:32:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B70>, <py_sfcl.CommandDataDefinition object at 0x0613FB70>) , Command count = 1550 ] 
14:32:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x0613F450>) , Command count = 1551 ] 
14:32:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1552 ] 
14:32:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:12: Host Frequency set to 25000 KHz
14:32:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:12: ####CSD Registe 2.0 Values####
14:32:12: CSD_STRUCTURE                                 :0x1
14:32:12: Reserv1                                       :0x0
14:32:12: Time Access 1 TAAC                            :0xe
14:32:12: Time Access 2 NSAC*100                        :0x0
14:32:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:12: Card Command Classess CCC                     :0x5b5
14:32:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:12: DSR(driver stage register)  DSR_IMP           :0x0
14:32:12: Reserv2                                       :0x0
14:32:12: Device Size C_SIZE                            :0xedc8
14:32:12: Reserv3                                       :0x0
14:32:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:12: Reserv4                                       :0x0
14:32:12: Write Speed Factor R2W_FACTOR                 :0x2
14:32:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:12: FILE_FORMAT_GRP                               :0x0
14:32:12: COPY flag                                     :0x1
14:32:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:12: File_Format                                   :0x0
14:32:12: CRC                                           :0x0
14:32:12: ####CSD Registe Values####  

14:32:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:12: [GetSCRRegisterEntry] Passed
14:32:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:12: Data_Status_After Erases          : 0
14:32:12: CPRM Security Support             : No Security
14:32:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:12: Spec. Version                     : Version 3.0X
14:32:12: Extended Security Support         : Extended_Security_Not_Supported
14:32:12: Command Support                   : COMMAND_SUPPORT
14:32:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1B0>, <py_sfcl.CommandDataDefinition object at 0x0613F030>) , Command count = 1553 ] 
14:32:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x052AF240>) , Command count = 1554 ] 
14:32:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:12: [ SetBusWidth(0x4) , Command count = 1555 ] 
14:32:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1556 ] 
14:32:12: Protected Area Size 0x28000
14:32:12: Bus Width           2
14:32:12: Secure Mode         0
14:32:12: Speed  Class        4
14:32:12: Perf Move           0
14:32:12: Au Size             9
14:32:12: Erase Size          15
14:32:12: Erase Timeout       1
14:32:12: Erase offset        1
14:32:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1557 ] 
14:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:12: Host Frequency set to 100000 KHz
14:32:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:12: ####CSD Registe 2.0 Values####
14:32:12: CSD_STRUCTURE                                 :0x1
14:32:12: Reserv1                                       :0x0
14:32:12: Time Access 1 TAAC                            :0xe
14:32:12: Time Access 2 NSAC*100                        :0x0
14:32:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:12: Card Command Classess CCC                     :0x5b5
14:32:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:13: DSR(driver stage register)  DSR_IMP           :0x0
14:32:13: Reserv2                                       :0x0
14:32:13: Device Size C_SIZE                            :0xedc8
14:32:13: Reserv3                                       :0x0
14:32:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:13: Reserv4                                       :0x0
14:32:13: Write Speed Factor R2W_FACTOR                 :0x2
14:32:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:13: FILE_FORMAT_GRP                               :0x0
14:32:13: COPY flag                                     :0x1
14:32:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:13: File_Format                                   :0x0
14:32:13: CRC                                           :0x0
14:32:13: ####CSD Registe Values####  

14:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFC30>, <py_sfcl.CommandDataDefinition object at 0x0613F510>) , Command count = 1558 ] 
14:32:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613FDE0>) , Command count = 1559 ] 
14:32:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EF44 to EndLba:0x3B6EFC4 with One's Pattern
14:32:13: [ WrLbaNoData(0x3B6EF44, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1560 ] 
14:32:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EF44 to EndLba:0x3B6EFC4 with One's Pattern 

14:32:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EFC4 to EndLba:0x3B6F044 with One's Pattern
14:32:13: [ WrLbaNoData(0x3B6EFC4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1561 ] 
14:32:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EFC4 to EndLba:0x3B6F044 with One's Pattern 

14:32:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B1 to EndLba:0x25115 with Constant Pattern
14:32:13: [ RdLbaNoData(0x231B1, 0x1F64, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1562 ] 
14:32:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B1 to EndLba:0x25115 with Constant Pattern 

14:32:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4016
14:32:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0529B4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F720>, <py_sfcl.PySEnhancedCmdData object at 0x0613F3C0>, <None>) , Command count = 1563 ] 
14:32:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:15: Host Frequency set to 25000 KHz
14:32:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138A80>, 0x0, True) , Command count = 1564 ] 
14:32:15: [GO18_globalSetVolt]### Host voltage value is set.
14:32:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x05184030>, 0x0, False) , Command count = 1565 ] 
14:32:15: [GO18_globalSetVolt]### Host voltage value is set.
14:32:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1566 ] 
14:32:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1567 ] 
14:32:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1568 ] 
14:32:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x052AFEA0>) , Command count = 1569 ] 
14:32:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0613F6F0>) , Command count = 1570 ] 
14:32:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1571 ] 
14:32:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:16: Host Frequency set to 25000 KHz
14:32:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:16: ####CSD Registe 2.0 Values####
14:32:16: CSD_STRUCTURE                                 :0x1
14:32:16: Reserv1                                       :0x0
14:32:16: Time Access 1 TAAC                            :0xe
14:32:16: Time Access 2 NSAC*100                        :0x0
14:32:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:16: Card Command Classess CCC                     :0x5b5
14:32:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:16: DSR(driver stage register)  DSR_IMP           :0x0
14:32:16: Reserv2                                       :0x0
14:32:16: Device Size C_SIZE                            :0xedc8
14:32:16: Reserv3                                       :0x0
14:32:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:16: Reserv4                                       :0x0
14:32:16: Write Speed Factor R2W_FACTOR                 :0x2
14:32:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:16: FILE_FORMAT_GRP                               :0x0
14:32:16: COPY flag                                     :0x1
14:32:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:16: File_Format                                   :0x0
14:32:16: CRC                                           :0x0
14:32:16: ####CSD Registe Values####  

14:32:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:16: [GetSCRRegisterEntry] Passed
14:32:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:16: Data_Status_After Erases          : 0
14:32:16: CPRM Security Support             : No Security
14:32:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:16: Spec. Version                     : Version 3.0X
14:32:16: Extended Security Support         : Extended_Security_Not_Supported
14:32:16: Command Support                   : COMMAND_SUPPORT
14:32:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C90>, <py_sfcl.CommandDataDefinition object at 0x0613F4B0>) , Command count = 1572 ] 
14:32:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x0613FF60>) , Command count = 1573 ] 
14:32:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:16: [ SetBusWidth(0x4) , Command count = 1574 ] 
14:32:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F5A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1575 ] 
14:32:16: Protected Area Size 0x28000
14:32:16: Bus Width           2
14:32:16: Secure Mode         0
14:32:16: Speed  Class        4
14:32:16: Perf Move           0
14:32:16: Au Size             9
14:32:16: Erase Size          15
14:32:16: Erase Timeout       1
14:32:16: Erase offset        1
14:32:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1576 ] 
14:32:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:16: Host Frequency set to 100000 KHz
14:32:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:16: ####CSD Registe 2.0 Values####
14:32:16: CSD_STRUCTURE                                 :0x1
14:32:16: Reserv1                                       :0x0
14:32:16: Time Access 1 TAAC                            :0xe
14:32:16: Time Access 2 NSAC*100                        :0x0
14:32:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:16: Card Command Classess CCC                     :0x5b5
14:32:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:16: DSR(driver stage register)  DSR_IMP           :0x0
14:32:16: Reserv2                                       :0x0
14:32:16: Device Size C_SIZE                            :0xedc8
14:32:16: Reserv3                                       :0x0
14:32:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:16: Reserv4                                       :0x0
14:32:16: Write Speed Factor R2W_FACTOR                 :0x2
14:32:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:16: FILE_FORMAT_GRP                               :0x0
14:32:16: COPY flag                                     :0x1
14:32:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:16: File_Format                                   :0x0
14:32:16: CRC                                           :0x0
14:32:16: ####CSD Registe Values####  

14:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F00>, <py_sfcl.CommandDataDefinition object at 0x060E38D0>) , Command count = 1577 ] 
14:32:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0613F420>) , Command count = 1578 ] 
14:32:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FF2B to EndLba:0x3B6FFAB with One's Pattern
14:32:16: [ WrLbaNoData(0x3B6FF2B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1579 ] 
14:32:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FF2B to EndLba:0x3B6FFAB with One's Pattern 

14:32:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FFAB to EndLba:0x3B7002B with One's Pattern
14:32:16: [ WrLbaNoData(0x3B6FFAB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1580 ] 
14:32:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FFAB to EndLba:0x3B7002B with One's Pattern 

14:32:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B3 to EndLba:0x25115 with Constant Pattern
14:32:16: [ RdLbaNoData(0x231B3, 0x1F62, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1581 ] 
14:32:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B3 to EndLba:0x25115 with Constant Pattern 

14:32:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4015
14:32:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3780>, <py_sfcl.PySEnhancedCmdData object at 0x0613F300>, <None>) , Command count = 1582 ] 
14:32:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:19: Host Frequency set to 25000 KHz
14:32:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138FC0>, 0x0, True) , Command count = 1583 ] 
14:32:19: [GO18_globalSetVolt]### Host voltage value is set.
14:32:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBFC0>, 0x0, False) , Command count = 1584 ] 
14:32:19: [GO18_globalSetVolt]### Host voltage value is set.
14:32:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1585 ] 
14:32:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1586 ] 
14:32:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1587 ] 
14:32:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x0613F090>) , Command count = 1588 ] 
14:32:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39C0>, <py_sfcl.CommandDataDefinition object at 0x0613F990>) , Command count = 1589 ] 
14:32:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1590 ] 
14:32:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:19: Host Frequency set to 25000 KHz
14:32:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:19: ####CSD Registe 2.0 Values####
14:32:19: CSD_STRUCTURE                                 :0x1
14:32:19: Reserv1                                       :0x0
14:32:19: Time Access 1 TAAC                            :0xe
14:32:19: Time Access 2 NSAC*100                        :0x0
14:32:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:19: Card Command Classess CCC                     :0x5b5
14:32:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:19: DSR(driver stage register)  DSR_IMP           :0x0
14:32:19: Reserv2                                       :0x0
14:32:19: Device Size C_SIZE                            :0xedc8
14:32:19: Reserv3                                       :0x0
14:32:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:19: Reserv4                                       :0x0
14:32:19: Write Speed Factor R2W_FACTOR                 :0x2
14:32:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:19: FILE_FORMAT_GRP                               :0x0
14:32:19: COPY flag                                     :0x1
14:32:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:19: File_Format                                   :0x0
14:32:19: CRC                                           :0x0
14:32:19: ####CSD Registe Values####  

14:32:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:19: [GetSCRRegisterEntry] Passed
14:32:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:19: Data_Status_After Erases          : 0
14:32:19: CPRM Security Support             : No Security
14:32:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:19: Spec. Version                     : Version 3.0X
14:32:19: Extended Security Support         : Extended_Security_Not_Supported
14:32:19: Command Support                   : COMMAND_SUPPORT
14:32:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E780>, <py_sfcl.CommandDataDefinition object at 0x0613F840>) , Command count = 1591 ] 
14:32:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C4E0>, <py_sfcl.CommandDataDefinition object at 0x060E34E0>) , Command count = 1592 ] 
14:32:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:19: [ SetBusWidth(0x4) , Command count = 1593 ] 
14:32:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E3930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1594 ] 
14:32:19: Protected Area Size 0x28000
14:32:19: Bus Width           2
14:32:19: Secure Mode         0
14:32:19: Speed  Class        4
14:32:19: Perf Move           0
14:32:19: Au Size             9
14:32:19: Erase Size          15
14:32:19: Erase Timeout       1
14:32:19: Erase offset        1
14:32:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1595 ] 
14:32:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:19: Host Frequency set to 100000 KHz
14:32:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:19: ####CSD Registe 2.0 Values####
14:32:19: CSD_STRUCTURE                                 :0x1
14:32:19: Reserv1                                       :0x0
14:32:19: Time Access 1 TAAC                            :0xe
14:32:19: Time Access 2 NSAC*100                        :0x0
14:32:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:19: Card Command Classess CCC                     :0x5b5
14:32:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:19: DSR(driver stage register)  DSR_IMP           :0x0
14:32:19: Reserv2                                       :0x0
14:32:19: Device Size C_SIZE                            :0xedc8
14:32:19: Reserv3                                       :0x0
14:32:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:20: Reserv4                                       :0x0
14:32:20: Write Speed Factor R2W_FACTOR                 :0x2
14:32:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:20: FILE_FORMAT_GRP                               :0x0
14:32:20: COPY flag                                     :0x1
14:32:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:20: File_Format                                   :0x0
14:32:20: CRC                                           :0x0
14:32:20: ####CSD Registe Values####  

14:32:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CFC0>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 1596 ] 
14:32:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA20>, <py_sfcl.CommandDataDefinition object at 0x060E3D80>) , Command count = 1597 ] 
14:32:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B716B4 to EndLba:0x3B71734 with One's Pattern
14:32:20: [ WrLbaNoData(0x3B716B4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1598 ] 
14:32:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B716B4 to EndLba:0x3B71734 with One's Pattern 

14:32:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71734 to EndLba:0x3B717B4 with One's Pattern
14:32:20: [ WrLbaNoData(0x3B71734, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1599 ] 
14:32:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71734 to EndLba:0x3B717B4 with One's Pattern 

14:32:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B3 to EndLba:0x25113 with Constant Pattern
14:32:20: [ RdLbaNoData(0x231B3, 0x1F60, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1600 ] 
14:32:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B3 to EndLba:0x25113 with Constant Pattern 

14:32:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4014
14:32:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FE40>, <py_sfcl.PySEnhancedCmdData object at 0x0613F0C0>, <None>) , Command count = 1601 ] 
14:32:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:22: Host Frequency set to 25000 KHz
14:32:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1FC0>, 0x0, True) , Command count = 1602 ] 
14:32:22: [GO18_globalSetVolt]### Host voltage value is set.
14:32:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132D20>, 0x0, False) , Command count = 1603 ] 
14:32:22: [GO18_globalSetVolt]### Host voltage value is set.
14:32:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1604 ] 
14:32:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1605 ] 
14:32:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1606 ] 
14:32:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C3F0>, <py_sfcl.CommandDataDefinition object at 0x0611C090>) , Command count = 1607 ] 
14:32:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCF0>, <py_sfcl.CommandDataDefinition object at 0x060E3D80>) , Command count = 1608 ] 
14:32:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1609 ] 
14:32:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:22: Host Frequency set to 25000 KHz
14:32:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:22: ####CSD Registe 2.0 Values####
14:32:22: CSD_STRUCTURE                                 :0x1
14:32:22: Reserv1                                       :0x0
14:32:22: Time Access 1 TAAC                            :0xe
14:32:22: Time Access 2 NSAC*100                        :0x0
14:32:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:22: Card Command Classess CCC                     :0x5b5
14:32:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:22: DSR(driver stage register)  DSR_IMP           :0x0
14:32:22: Reserv2                                       :0x0
14:32:22: Device Size C_SIZE                            :0xedc8
14:32:22: Reserv3                                       :0x0
14:32:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:22: Reserv4                                       :0x0
14:32:22: Write Speed Factor R2W_FACTOR                 :0x2
14:32:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:22: FILE_FORMAT_GRP                               :0x0
14:32:22: COPY flag                                     :0x1
14:32:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:22: File_Format                                   :0x0
14:32:22: CRC                                           :0x0
14:32:22: ####CSD Registe Values####  

14:32:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:22: [GetSCRRegisterEntry] Passed
14:32:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:22: Data_Status_After Erases          : 0
14:32:22: CPRM Security Support             : No Security
14:32:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:22: Spec. Version                     : Version 3.0X
14:32:22: Extended Security Support         : Extended_Security_Not_Supported
14:32:22: Command Support                   : COMMAND_SUPPORT
14:32:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C030>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 1610 ] 
14:32:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F150>, <py_sfcl.CommandDataDefinition object at 0x0611C990>) , Command count = 1611 ] 
14:32:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:22: [ SetBusWidth(0x4) , Command count = 1612 ] 
14:32:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1613 ] 
14:32:22: Protected Area Size 0x28000
14:32:22: Bus Width           2
14:32:22: Secure Mode         0
14:32:22: Speed  Class        4
14:32:22: Perf Move           0
14:32:22: Au Size             9
14:32:22: Erase Size          15
14:32:22: Erase Timeout       1
14:32:22: Erase offset        1
14:32:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1614 ] 
14:32:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:23: Host Frequency set to 100000 KHz
14:32:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:23: ####CSD Registe 2.0 Values####
14:32:23: CSD_STRUCTURE                                 :0x1
14:32:23: Reserv1                                       :0x0
14:32:23: Time Access 1 TAAC                            :0xe
14:32:23: Time Access 2 NSAC*100                        :0x0
14:32:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:23: Card Command Classess CCC                     :0x5b5
14:32:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:23: DSR(driver stage register)  DSR_IMP           :0x0
14:32:23: Reserv2                                       :0x0
14:32:23: Device Size C_SIZE                            :0xedc8
14:32:23: Reserv3                                       :0x0
14:32:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:23: Reserv4                                       :0x0
14:32:23: Write Speed Factor R2W_FACTOR                 :0x2
14:32:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:23: FILE_FORMAT_GRP                               :0x0
14:32:23: COPY flag                                     :0x1
14:32:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:23: File_Format                                   :0x0
14:32:23: CRC                                           :0x0
14:32:23: ####CSD Registe Values####  

14:32:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129030>, <py_sfcl.CommandDataDefinition object at 0x0611C810>) , Command count = 1615 ] 
14:32:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3CF0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 1616 ] 
14:32:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704BF to EndLba:0x3B7053F with One's Pattern
14:32:23: [ WrLbaNoData(0x3B704BF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1617 ] 
14:32:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704BF to EndLba:0x3B7053F with One's Pattern 

14:32:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7053F to EndLba:0x3B705BF with One's Pattern
14:32:23: [ WrLbaNoData(0x3B7053F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1618 ] 
14:32:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7053F to EndLba:0x3B705BF with One's Pattern 

14:32:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B5 to EndLba:0x25113 with Constant Pattern
14:32:23: [ RdLbaNoData(0x231B5, 0x1F5E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1619 ] 
14:32:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B5 to EndLba:0x25113 with Constant Pattern 

14:32:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4013
14:32:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129120>, <py_sfcl.PySEnhancedCmdData object at 0x0613F2A0>, <None>) , Command count = 1620 ] 
14:32:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:25: Host Frequency set to 25000 KHz
14:32:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F030>, 0x0, True) , Command count = 1621 ] 
14:32:25: [GO18_globalSetVolt]### Host voltage value is set.
14:32:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3A20>, 0x0, False) , Command count = 1622 ] 
14:32:25: [GO18_globalSetVolt]### Host voltage value is set.
14:32:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1623 ] 
14:32:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1624 ] 
14:32:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1625 ] 
14:32:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAE0>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 1626 ] 
14:32:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 1627 ] 
14:32:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1628 ] 
14:32:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:26: Host Frequency set to 25000 KHz
14:32:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:26: ####CSD Registe 2.0 Values####
14:32:26: CSD_STRUCTURE                                 :0x1
14:32:26: Reserv1                                       :0x0
14:32:26: Time Access 1 TAAC                            :0xe
14:32:26: Time Access 2 NSAC*100                        :0x0
14:32:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:26: Card Command Classess CCC                     :0x5b5
14:32:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:26: DSR(driver stage register)  DSR_IMP           :0x0
14:32:26: Reserv2                                       :0x0
14:32:26: Device Size C_SIZE                            :0xedc8
14:32:26: Reserv3                                       :0x0
14:32:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:26: Reserv4                                       :0x0
14:32:26: Write Speed Factor R2W_FACTOR                 :0x2
14:32:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:26: FILE_FORMAT_GRP                               :0x0
14:32:26: COPY flag                                     :0x1
14:32:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:26: File_Format                                   :0x0
14:32:26: CRC                                           :0x0
14:32:26: ####CSD Registe Values####  

14:32:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:26: [GetSCRRegisterEntry] Passed
14:32:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:26: Data_Status_After Erases          : 0
14:32:26: CPRM Security Support             : No Security
14:32:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:26: Spec. Version                     : Version 3.0X
14:32:26: Extended Security Support         : Extended_Security_Not_Supported
14:32:26: Command Support                   : COMMAND_SUPPORT
14:32:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129090>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 1629 ] 
14:32:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 1630 ] 
14:32:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:26: [ SetBusWidth(0x4) , Command count = 1631 ] 
14:32:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C7B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1632 ] 
14:32:26: Protected Area Size 0x28000
14:32:26: Bus Width           2
14:32:26: Secure Mode         0
14:32:26: Speed  Class        4
14:32:26: Perf Move           0
14:32:26: Au Size             9
14:32:26: Erase Size          15
14:32:26: Erase Timeout       1
14:32:26: Erase offset        1
14:32:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1633 ] 
14:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:26: Host Frequency set to 100000 KHz
14:32:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:26: ####CSD Registe 2.0 Values####
14:32:26: CSD_STRUCTURE                                 :0x1
14:32:26: Reserv1                                       :0x0
14:32:26: Time Access 1 TAAC                            :0xe
14:32:26: Time Access 2 NSAC*100                        :0x0
14:32:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:26: Card Command Classess CCC                     :0x5b5
14:32:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:26: DSR(driver stage register)  DSR_IMP           :0x0
14:32:26: Reserv2                                       :0x0
14:32:26: Device Size C_SIZE                            :0xedc8
14:32:26: Reserv3                                       :0x0
14:32:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:26: Reserv4                                       :0x0
14:32:26: Write Speed Factor R2W_FACTOR                 :0x2
14:32:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:26: FILE_FORMAT_GRP                               :0x0
14:32:26: COPY flag                                     :0x1
14:32:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:26: File_Format                                   :0x0
14:32:26: CRC                                           :0x0
14:32:26: ####CSD Registe Values####  

14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298A0>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 1634 ] 
14:32:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129870>, <py_sfcl.CommandDataDefinition object at 0x0611CD20>) , Command count = 1635 ] 
14:32:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70AB9 to EndLba:0x3B70B39 with One's Pattern
14:32:26: [ WrLbaNoData(0x3B70AB9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1636 ] 
14:32:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70AB9 to EndLba:0x3B70B39 with One's Pattern 

14:32:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B39 to EndLba:0x3B70BB9 with One's Pattern
14:32:26: [ WrLbaNoData(0x3B70B39, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1637 ] 
14:32:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B39 to EndLba:0x3B70BB9 with One's Pattern 

14:32:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B5 to EndLba:0x25111 with Constant Pattern
14:32:26: [ RdLbaNoData(0x231B5, 0x1F5C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1638 ] 
14:32:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B5 to EndLba:0x25111 with Constant Pattern 

14:32:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4012
14:32:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061295D0>, <py_sfcl.PySEnhancedCmdData object at 0x061292A0>, <None>) , Command count = 1639 ] 
14:32:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:29: Host Frequency set to 25000 KHz
14:32:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3750>, 0x0, True) , Command count = 1640 ] 
14:32:29: [GO18_globalSetVolt]### Host voltage value is set.
14:32:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129A80>, 0x0, False) , Command count = 1641 ] 
14:32:29: [GO18_globalSetVolt]### Host voltage value is set.
14:32:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1642 ] 
14:32:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1643 ] 
14:32:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1644 ] 
14:32:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129750>, <py_sfcl.CommandDataDefinition object at 0x06129600>) , Command count = 1645 ] 
14:32:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x0611CD20>) , Command count = 1646 ] 
14:32:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1647 ] 
14:32:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:29: Host Frequency set to 25000 KHz
14:32:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:29: ####CSD Registe 2.0 Values####
14:32:29: CSD_STRUCTURE                                 :0x1
14:32:29: Reserv1                                       :0x0
14:32:29: Time Access 1 TAAC                            :0xe
14:32:29: Time Access 2 NSAC*100                        :0x0
14:32:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:29: Card Command Classess CCC                     :0x5b5
14:32:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:29: DSR(driver stage register)  DSR_IMP           :0x0
14:32:29: Reserv2                                       :0x0
14:32:29: Device Size C_SIZE                            :0xedc8
14:32:29: Reserv3                                       :0x0
14:32:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:29: Reserv4                                       :0x0
14:32:29: Write Speed Factor R2W_FACTOR                 :0x2
14:32:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:29: FILE_FORMAT_GRP                               :0x0
14:32:29: COPY flag                                     :0x1
14:32:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:29: File_Format                                   :0x0
14:32:29: CRC                                           :0x0
14:32:29: ####CSD Registe Values####  

14:32:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:29: [GetSCRRegisterEntry] Passed
14:32:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:29: Data_Status_After Erases          : 0
14:32:29: CPRM Security Support             : No Security
14:32:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:29: Spec. Version                     : Version 3.0X
14:32:29: Extended Security Support         : Extended_Security_Not_Supported
14:32:29: Command Support                   : COMMAND_SUPPORT
14:32:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129FC0>, <py_sfcl.CommandDataDefinition object at 0x0611C9F0>) , Command count = 1648 ] 
14:32:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CF0>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 1649 ] 
14:32:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:29: [ SetBusWidth(0x4) , Command count = 1650 ] 
14:32:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1651 ] 
14:32:29: Protected Area Size 0x28000
14:32:29: Bus Width           2
14:32:29: Secure Mode         0
14:32:29: Speed  Class        4
14:32:29: Perf Move           0
14:32:29: Au Size             9
14:32:29: Erase Size          15
14:32:29: Erase Timeout       1
14:32:29: Erase offset        1
14:32:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1652 ] 
14:32:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:29: Host Frequency set to 100000 KHz
14:32:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:29: ####CSD Registe 2.0 Values####
14:32:29: CSD_STRUCTURE                                 :0x1
14:32:29: Reserv1                                       :0x0
14:32:29: Time Access 1 TAAC                            :0xe
14:32:29: Time Access 2 NSAC*100                        :0x0
14:32:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:29: Card Command Classess CCC                     :0x5b5
14:32:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:29: DSR(driver stage register)  DSR_IMP           :0x0
14:32:29: Reserv2                                       :0x0
14:32:29: Device Size C_SIZE                            :0xedc8
14:32:29: Reserv3                                       :0x0
14:32:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:30: Reserv4                                       :0x0
14:32:30: Write Speed Factor R2W_FACTOR                 :0x2
14:32:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:30: FILE_FORMAT_GRP                               :0x0
14:32:30: COPY flag                                     :0x1
14:32:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:30: File_Format                                   :0x0
14:32:30: CRC                                           :0x0
14:32:30: ####CSD Registe Values####  

14:32:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E210>, <py_sfcl.CommandDataDefinition object at 0x061299F0>) , Command count = 1653 ] 
14:32:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1E0>, <py_sfcl.CommandDataDefinition object at 0x0611CDB0>) , Command count = 1654 ] 
14:32:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B713B3 to EndLba:0x3B71433 with One's Pattern
14:32:30: [ WrLbaNoData(0x3B713B3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1655 ] 
14:32:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B713B3 to EndLba:0x3B71433 with One's Pattern 

14:32:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71433 to EndLba:0x3B714B3 with One's Pattern
14:32:30: [ WrLbaNoData(0x3B71433, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1656 ] 
14:32:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71433 to EndLba:0x3B714B3 with One's Pattern 

14:32:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B7 to EndLba:0x25111 with Constant Pattern
14:32:30: [ RdLbaNoData(0x231B7, 0x1F5A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1657 ] 
14:32:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B7 to EndLba:0x25111 with Constant Pattern 

14:32:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4011
14:32:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E270>, <py_sfcl.PySEnhancedCmdData object at 0x06129330>, <None>) , Command count = 1658 ] 
14:32:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:32: Host Frequency set to 25000 KHz
14:32:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E300>, 0x0, True) , Command count = 1659 ] 
14:32:32: [GO18_globalSetVolt]### Host voltage value is set.
14:32:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129540>, 0x0, False) , Command count = 1660 ] 
14:32:32: [GO18_globalSetVolt]### Host voltage value is set.
14:32:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1661 ] 
14:32:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1662 ] 
14:32:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1663 ] 
14:32:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x06129690>) , Command count = 1664 ] 
14:32:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E180>, <py_sfcl.CommandDataDefinition object at 0x0611CDB0>) , Command count = 1665 ] 
14:32:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1666 ] 
14:32:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:32: Host Frequency set to 25000 KHz
14:32:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:32: ####CSD Registe 2.0 Values####
14:32:32: CSD_STRUCTURE                                 :0x1
14:32:32: Reserv1                                       :0x0
14:32:32: Time Access 1 TAAC                            :0xe
14:32:32: Time Access 2 NSAC*100                        :0x0
14:32:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:32: Card Command Classess CCC                     :0x5b5
14:32:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:32: DSR(driver stage register)  DSR_IMP           :0x0
14:32:32: Reserv2                                       :0x0
14:32:32: Device Size C_SIZE                            :0xedc8
14:32:32: Reserv3                                       :0x0
14:32:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:32: Reserv4                                       :0x0
14:32:32: Write Speed Factor R2W_FACTOR                 :0x2
14:32:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:32: FILE_FORMAT_GRP                               :0x0
14:32:32: COPY flag                                     :0x1
14:32:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:32: File_Format                                   :0x0
14:32:32: CRC                                           :0x0
14:32:32: ####CSD Registe Values####  

14:32:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:32: [GetSCRRegisterEntry] Passed
14:32:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:32: Data_Status_After Erases          : 0
14:32:32: CPRM Security Support             : No Security
14:32:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:32: Spec. Version                     : Version 3.0X
14:32:32: Extended Security Support         : Extended_Security_Not_Supported
14:32:32: Command Support                   : COMMAND_SUPPORT
14:32:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD80>, <py_sfcl.CommandDataDefinition object at 0x0611CB10>) , Command count = 1667 ] 
14:32:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 1668 ] 
14:32:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:33: [ SetBusWidth(0x4) , Command count = 1669 ] 
14:32:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1670 ] 
14:32:33: Protected Area Size 0x28000
14:32:33: Bus Width           2
14:32:33: Secure Mode         0
14:32:33: Speed  Class        4
14:32:33: Perf Move           0
14:32:33: Au Size             9
14:32:33: Erase Size          15
14:32:33: Erase Timeout       1
14:32:33: Erase offset        1
14:32:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1671 ] 
14:32:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:33: Host Frequency set to 100000 KHz
14:32:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:33: ####CSD Registe 2.0 Values####
14:32:33: CSD_STRUCTURE                                 :0x1
14:32:33: Reserv1                                       :0x0
14:32:33: Time Access 1 TAAC                            :0xe
14:32:33: Time Access 2 NSAC*100                        :0x0
14:32:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:33: Card Command Classess CCC                     :0x5b5
14:32:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:33: DSR(driver stage register)  DSR_IMP           :0x0
14:32:33: Reserv2                                       :0x0
14:32:33: Device Size C_SIZE                            :0xedc8
14:32:33: Reserv3                                       :0x0
14:32:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:33: Reserv4                                       :0x0
14:32:33: Write Speed Factor R2W_FACTOR                 :0x2
14:32:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:33: FILE_FORMAT_GRP                               :0x0
14:32:33: COPY flag                                     :0x1
14:32:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:33: File_Format                                   :0x0
14:32:33: CRC                                           :0x0
14:32:33: ####CSD Registe Values####  

14:32:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py_sfcl.CommandDataDefinition object at 0x06129EA0>) , Command count = 1672 ] 
14:32:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1B0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 1673 ] 
14:32:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F517 to EndLba:0x3B6F597 with One's Pattern
14:32:33: [ WrLbaNoData(0x3B6F517, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1674 ] 
14:32:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F517 to EndLba:0x3B6F597 with One's Pattern 

14:32:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F597 to EndLba:0x3B6F617 with One's Pattern
14:32:33: [ WrLbaNoData(0x3B6F597, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1675 ] 
14:32:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F597 to EndLba:0x3B6F617 with One's Pattern 

14:32:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B7 to EndLba:0x2510F with Constant Pattern
14:32:33: [ RdLbaNoData(0x231B7, 0x1F58, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1676 ] 
14:32:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B7 to EndLba:0x2510F with Constant Pattern 

14:32:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4010
14:32:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061321B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E900>, <py_sfcl.PySEnhancedCmdData object at 0x0612E2D0>, <None>) , Command count = 1677 ] 
14:32:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:35: Host Frequency set to 25000 KHz
14:32:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EA50>, 0x0, True) , Command count = 1678 ] 
14:32:35: [GO18_globalSetVolt]### Host voltage value is set.
14:32:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129D20>, 0x0, False) , Command count = 1679 ] 
14:32:35: [GO18_globalSetVolt]### Host voltage value is set.
14:32:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1680 ] 
14:32:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1681 ] 
14:32:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1682 ] 
14:32:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C60>, <py_sfcl.CommandDataDefinition object at 0x0612E390>) , Command count = 1683 ] 
14:32:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x0612E3F0>) , Command count = 1684 ] 
14:32:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1685 ] 
14:32:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:36: Host Frequency set to 25000 KHz
14:32:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:36: ####CSD Registe 2.0 Values####
14:32:36: CSD_STRUCTURE                                 :0x1
14:32:36: Reserv1                                       :0x0
14:32:36: Time Access 1 TAAC                            :0xe
14:32:36: Time Access 2 NSAC*100                        :0x0
14:32:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:36: Card Command Classess CCC                     :0x5b5
14:32:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:36: DSR(driver stage register)  DSR_IMP           :0x0
14:32:36: Reserv2                                       :0x0
14:32:36: Device Size C_SIZE                            :0xedc8
14:32:36: Reserv3                                       :0x0
14:32:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:36: Reserv4                                       :0x0
14:32:36: Write Speed Factor R2W_FACTOR                 :0x2
14:32:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:36: FILE_FORMAT_GRP                               :0x0
14:32:36: COPY flag                                     :0x1
14:32:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:36: File_Format                                   :0x0
14:32:36: CRC                                           :0x0
14:32:36: ####CSD Registe Values####  

14:32:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:36: [GetSCRRegisterEntry] Passed
14:32:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:36: Data_Status_After Erases          : 0
14:32:36: CPRM Security Support             : No Security
14:32:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:36: Spec. Version                     : Version 3.0X
14:32:36: Extended Security Support         : Extended_Security_Not_Supported
14:32:36: Command Support                   : COMMAND_SUPPORT
14:32:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB40>, <py_sfcl.CommandDataDefinition object at 0x0612E8D0>) , Command count = 1686 ] 
14:32:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x0613F9F0>) , Command count = 1687 ] 
14:32:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:36: [ SetBusWidth(0x4) , Command count = 1688 ] 
14:32:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1689 ] 
14:32:36: Protected Area Size 0x28000
14:32:36: Bus Width           2
14:32:36: Secure Mode         0
14:32:36: Speed  Class        4
14:32:36: Perf Move           0
14:32:36: Au Size             9
14:32:36: Erase Size          15
14:32:36: Erase Timeout       1
14:32:36: Erase offset        1
14:32:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1690 ] 
14:32:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:36: Host Frequency set to 100000 KHz
14:32:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:36: ####CSD Registe 2.0 Values####
14:32:36: CSD_STRUCTURE                                 :0x1
14:32:36: Reserv1                                       :0x0
14:32:36: Time Access 1 TAAC                            :0xe
14:32:36: Time Access 2 NSAC*100                        :0x0
14:32:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:36: Card Command Classess CCC                     :0x5b5
14:32:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:36: DSR(driver stage register)  DSR_IMP           :0x0
14:32:36: Reserv2                                       :0x0
14:32:36: Device Size C_SIZE                            :0xedc8
14:32:36: Reserv3                                       :0x0
14:32:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:36: Reserv4                                       :0x0
14:32:36: Write Speed Factor R2W_FACTOR                 :0x2
14:32:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:36: FILE_FORMAT_GRP                               :0x0
14:32:36: COPY flag                                     :0x1
14:32:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:36: File_Format                                   :0x0
14:32:36: CRC                                           :0x0
14:32:36: ####CSD Registe Values####  

14:32:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED20>, <py_sfcl.CommandDataDefinition object at 0x0612E690>) , Command count = 1691 ] 
14:32:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x0612E360>) , Command count = 1692 ] 
14:32:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E60C to EndLba:0x3B6E68C with One's Pattern
14:32:37: [ WrLbaNoData(0x3B6E60C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1693 ] 
14:32:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E60C to EndLba:0x3B6E68C with One's Pattern 

14:32:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E68C to EndLba:0x3B6E70C with One's Pattern
14:32:37: [ WrLbaNoData(0x3B6E68C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1694 ] 
14:32:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E68C to EndLba:0x3B6E70C with One's Pattern 

14:32:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B9 to EndLba:0x2510F with Constant Pattern
14:32:37: [ RdLbaNoData(0x231B9, 0x1F56, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1695 ] 
14:32:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B9 to EndLba:0x2510F with Constant Pattern 

14:32:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4009
14:32:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061320F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F810>, <py_sfcl.PySEnhancedCmdData object at 0x0612EC00>, <None>) , Command count = 1696 ] 
14:32:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:39: Host Frequency set to 25000 KHz
14:32:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129AB0>, 0x0, True) , Command count = 1697 ] 
14:32:39: [GO18_globalSetVolt]### Host voltage value is set.
14:32:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132060>, 0x0, False) , Command count = 1698 ] 
14:32:39: [GO18_globalSetVolt]### Host voltage value is set.
14:32:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1699 ] 
14:32:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1700 ] 
14:32:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1701 ] 
14:32:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5D0>, <py_sfcl.CommandDataDefinition object at 0x0612E4B0>) , Command count = 1702 ] 
14:32:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x0612EB70>) , Command count = 1703 ] 
14:32:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1704 ] 
14:32:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:39: Host Frequency set to 25000 KHz
14:32:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:39: ####CSD Registe 2.0 Values####
14:32:39: CSD_STRUCTURE                                 :0x1
14:32:39: Reserv1                                       :0x0
14:32:39: Time Access 1 TAAC                            :0xe
14:32:39: Time Access 2 NSAC*100                        :0x0
14:32:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:39: Card Command Classess CCC                     :0x5b5
14:32:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:39: DSR(driver stage register)  DSR_IMP           :0x0
14:32:39: Reserv2                                       :0x0
14:32:39: Device Size C_SIZE                            :0xedc8
14:32:39: Reserv3                                       :0x0
14:32:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:39: Reserv4                                       :0x0
14:32:39: Write Speed Factor R2W_FACTOR                 :0x2
14:32:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:39: FILE_FORMAT_GRP                               :0x0
14:32:39: COPY flag                                     :0x1
14:32:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:39: File_Format                                   :0x0
14:32:39: CRC                                           :0x0
14:32:39: ####CSD Registe Values####  

14:32:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:39: [GetSCRRegisterEntry] Passed
14:32:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:39: Data_Status_After Erases          : 0
14:32:39: CPRM Security Support             : No Security
14:32:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:39: Spec. Version                     : Version 3.0X
14:32:39: Extended Security Support         : Extended_Security_Not_Supported
14:32:39: Command Support                   : COMMAND_SUPPORT
14:32:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF00>, <py_sfcl.CommandDataDefinition object at 0x0612E510>) , Command count = 1705 ] 
14:32:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322A0>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 1706 ] 
14:32:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:39: [ SetBusWidth(0x4) , Command count = 1707 ] 
14:32:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EF00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1708 ] 
14:32:39: Protected Area Size 0x28000
14:32:39: Bus Width           2
14:32:39: Secure Mode         0
14:32:39: Speed  Class        4
14:32:39: Perf Move           0
14:32:39: Au Size             9
14:32:39: Erase Size          15
14:32:39: Erase Timeout       1
14:32:39: Erase offset        1
14:32:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1709 ] 
14:32:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:39: Host Frequency set to 100000 KHz
14:32:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:39: ####CSD Registe 2.0 Values####
14:32:39: CSD_STRUCTURE                                 :0x1
14:32:40: Reserv1                                       :0x0
14:32:40: Time Access 1 TAAC                            :0xe
14:32:40: Time Access 2 NSAC*100                        :0x0
14:32:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:40: Card Command Classess CCC                     :0x5b5
14:32:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:40: DSR(driver stage register)  DSR_IMP           :0x0
14:32:40: Reserv2                                       :0x0
14:32:40: Device Size C_SIZE                            :0xedc8
14:32:40: Reserv3                                       :0x0
14:32:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:40: Reserv4                                       :0x0
14:32:40: Write Speed Factor R2W_FACTOR                 :0x2
14:32:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:40: FILE_FORMAT_GRP                               :0x0
14:32:40: COPY flag                                     :0x1
14:32:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:40: File_Format                                   :0x0
14:32:40: CRC                                           :0x0
14:32:40: ####CSD Registe Values####  

14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C90>, <py_sfcl.CommandDataDefinition object at 0x061321E0>) , Command count = 1710 ] 
14:32:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x0612E720>) , Command count = 1711 ] 
14:32:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7153B to EndLba:0x3B715BB with One's Pattern
14:32:40: [ WrLbaNoData(0x3B7153B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1712 ] 
14:32:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7153B to EndLba:0x3B715BB with One's Pattern 

14:32:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B715BB to EndLba:0x3B7163B with One's Pattern
14:32:40: [ WrLbaNoData(0x3B715BB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1713 ] 
14:32:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B715BB to EndLba:0x3B7163B with One's Pattern 

14:32:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231B9 to EndLba:0x2510D with Constant Pattern
14:32:40: [ RdLbaNoData(0x231B9, 0x1F54, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1714 ] 
14:32:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231B9 to EndLba:0x2510D with Constant Pattern 

14:32:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4008
14:32:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132780>, <py_sfcl.PySEnhancedCmdData object at 0x06132390>, <None>) , Command count = 1715 ] 
14:32:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:42: Host Frequency set to 25000 KHz
14:32:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E930>, 0x0, True) , Command count = 1716 ] 
14:32:42: [GO18_globalSetVolt]### Host voltage value is set.
14:32:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132F60>, 0x0, False) , Command count = 1717 ] 
14:32:42: [GO18_globalSetVolt]### Host voltage value is set.
14:32:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1718 ] 
14:32:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1719 ] 
14:32:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1720 ] 
14:32:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C00>, <py_sfcl.CommandDataDefinition object at 0x061322D0>) , Command count = 1721 ] 
14:32:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x0612E720>) , Command count = 1722 ] 
14:32:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1723 ] 
14:32:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:43: Host Frequency set to 25000 KHz
14:32:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:43: ####CSD Registe 2.0 Values####
14:32:43: CSD_STRUCTURE                                 :0x1
14:32:43: Reserv1                                       :0x0
14:32:43: Time Access 1 TAAC                            :0xe
14:32:43: Time Access 2 NSAC*100                        :0x0
14:32:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:43: Card Command Classess CCC                     :0x5b5
14:32:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:43: DSR(driver stage register)  DSR_IMP           :0x0
14:32:43: Reserv2                                       :0x0
14:32:43: Device Size C_SIZE                            :0xedc8
14:32:43: Reserv3                                       :0x0
14:32:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:43: Reserv4                                       :0x0
14:32:43: Write Speed Factor R2W_FACTOR                 :0x2
14:32:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:43: FILE_FORMAT_GRP                               :0x0
14:32:43: COPY flag                                     :0x1
14:32:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:43: File_Format                                   :0x0
14:32:43: CRC                                           :0x0
14:32:43: ####CSD Registe Values####  

14:32:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:43: [GetSCRRegisterEntry] Passed
14:32:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:43: Data_Status_After Erases          : 0
14:32:43: CPRM Security Support             : No Security
14:32:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:43: Spec. Version                     : Version 3.0X
14:32:43: Extended Security Support         : Extended_Security_Not_Supported
14:32:43: Command Support                   : COMMAND_SUPPORT
14:32:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061326F0>, <py_sfcl.CommandDataDefinition object at 0x0612E630>) , Command count = 1724 ] 
14:32:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F330>, <py_sfcl.CommandDataDefinition object at 0x061329C0>) , Command count = 1725 ] 
14:32:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:43: [ SetBusWidth(0x4) , Command count = 1726 ] 
14:32:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1727 ] 
14:32:43: Protected Area Size 0x28000
14:32:43: Bus Width           2
14:32:43: Secure Mode         0
14:32:43: Speed  Class        4
14:32:43: Perf Move           0
14:32:43: Au Size             9
14:32:43: Erase Size          15
14:32:43: Erase Timeout       1
14:32:43: Erase offset        1
14:32:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1728 ] 
14:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:43: Host Frequency set to 100000 KHz
14:32:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:43: ####CSD Registe 2.0 Values####
14:32:43: CSD_STRUCTURE                                 :0x1
14:32:43: Reserv1                                       :0x0
14:32:43: Time Access 1 TAAC                            :0xe
14:32:43: Time Access 2 NSAC*100                        :0x0
14:32:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:43: Card Command Classess CCC                     :0x5b5
14:32:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:43: DSR(driver stage register)  DSR_IMP           :0x0
14:32:43: Reserv2                                       :0x0
14:32:43: Device Size C_SIZE                            :0xedc8
14:32:43: Reserv3                                       :0x0
14:32:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:43: Reserv4                                       :0x0
14:32:43: Write Speed Factor R2W_FACTOR                 :0x2
14:32:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:43: FILE_FORMAT_GRP                               :0x0
14:32:43: COPY flag                                     :0x1
14:32:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:43: File_Format                                   :0x0
14:32:43: CRC                                           :0x0
14:32:43: ####CSD Registe Values####  

14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132720>, <py_sfcl.CommandDataDefinition object at 0x06132D50>) , Command count = 1729 ] 
14:32:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320C0>, <py_sfcl.CommandDataDefinition object at 0x0612EE70>) , Command count = 1730 ] 
14:32:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F909 to EndLba:0x3B6F989 with One's Pattern
14:32:43: [ WrLbaNoData(0x3B6F909, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1731 ] 
14:32:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F909 to EndLba:0x3B6F989 with One's Pattern 

14:32:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F989 to EndLba:0x3B6FA09 with One's Pattern
14:32:43: [ WrLbaNoData(0x3B6F989, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1732 ] 
14:32:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F989 to EndLba:0x3B6FA09 with One's Pattern 

14:32:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231BB to EndLba:0x2510D with Constant Pattern
14:32:44: [ RdLbaNoData(0x231BB, 0x1F52, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1733 ] 
14:32:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231BB to EndLba:0x2510D with Constant Pattern 

14:32:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4007
14:32:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FEA0>, <py_sfcl.PySEnhancedCmdData object at 0x06132D80>, <None>) , Command count = 1734 ] 
14:32:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:46: Host Frequency set to 25000 KHz
14:32:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132AB0>, 0x0, True) , Command count = 1735 ] 
14:32:46: [GO18_globalSetVolt]### Host voltage value is set.
14:32:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132330>, 0x0, False) , Command count = 1736 ] 
14:32:46: [GO18_globalSetVolt]### Host voltage value is set.
14:32:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1737 ] 
14:32:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1738 ] 
14:32:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1739 ] 
14:32:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F30>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 1740 ] 
14:32:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x0612EB40>) , Command count = 1741 ] 
14:32:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1742 ] 
14:32:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:46: Host Frequency set to 25000 KHz
14:32:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:46: ####CSD Registe 2.0 Values####
14:32:46: CSD_STRUCTURE                                 :0x1
14:32:46: Reserv1                                       :0x0
14:32:46: Time Access 1 TAAC                            :0xe
14:32:46: Time Access 2 NSAC*100                        :0x0
14:32:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:46: Card Command Classess CCC                     :0x5b5
14:32:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:46: DSR(driver stage register)  DSR_IMP           :0x0
14:32:46: Reserv2                                       :0x0
14:32:46: Device Size C_SIZE                            :0xedc8
14:32:46: Reserv3                                       :0x0
14:32:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:46: Reserv4                                       :0x0
14:32:46: Write Speed Factor R2W_FACTOR                 :0x2
14:32:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:46: FILE_FORMAT_GRP                               :0x0
14:32:46: COPY flag                                     :0x1
14:32:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:46: File_Format                                   :0x0
14:32:46: CRC                                           :0x0
14:32:46: ####CSD Registe Values####  

14:32:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:46: [GetSCRRegisterEntry] Passed
14:32:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:46: Data_Status_After Erases          : 0
14:32:46: CPRM Security Support             : No Security
14:32:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:46: Spec. Version                     : Version 3.0X
14:32:46: Extended Security Support         : Extended_Security_Not_Supported
14:32:46: Command Support                   : COMMAND_SUPPORT
14:32:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061383C0>, <py_sfcl.CommandDataDefinition object at 0x0612E9C0>) , Command count = 1743 ] 
14:32:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 1744 ] 
14:32:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:46: [ SetBusWidth(0x4) , Command count = 1745 ] 
14:32:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1746 ] 
14:32:46: Protected Area Size 0x28000
14:32:46: Bus Width           2
14:32:46: Secure Mode         0
14:32:46: Speed  Class        4
14:32:46: Perf Move           0
14:32:46: Au Size             9
14:32:46: Erase Size          15
14:32:46: Erase Timeout       1
14:32:46: Erase offset        1
14:32:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1747 ] 
14:32:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:46: Host Frequency set to 100000 KHz
14:32:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:46: ####CSD Registe 2.0 Values####
14:32:46: CSD_STRUCTURE                                 :0x1
14:32:46: Reserv1                                       :0x0
14:32:46: Time Access 1 TAAC                            :0xe
14:32:46: Time Access 2 NSAC*100                        :0x0
14:32:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:46: Card Command Classess CCC                     :0x5b5
14:32:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:47: DSR(driver stage register)  DSR_IMP           :0x0
14:32:47: Reserv2                                       :0x0
14:32:47: Device Size C_SIZE                            :0xedc8
14:32:47: Reserv3                                       :0x0
14:32:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:47: Reserv4                                       :0x0
14:32:47: Write Speed Factor R2W_FACTOR                 :0x2
14:32:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:47: FILE_FORMAT_GRP                               :0x0
14:32:47: COPY flag                                     :0x1
14:32:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:47: File_Format                                   :0x0
14:32:47: CRC                                           :0x0
14:32:47: ####CSD Registe Values####  

14:32:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E40>, <py_sfcl.CommandDataDefinition object at 0x06132F00>) , Command count = 1748 ] 
14:32:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132690>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 1749 ] 
14:32:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E00 to EndLba:0x3B70E80 with One's Pattern
14:32:47: [ WrLbaNoData(0x3B70E00, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1750 ] 
14:32:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E00 to EndLba:0x3B70E80 with One's Pattern 

14:32:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E80 to EndLba:0x3B70F00 with One's Pattern
14:32:47: [ WrLbaNoData(0x3B70E80, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1751 ] 
14:32:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E80 to EndLba:0x3B70F00 with One's Pattern 

14:32:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231BB to EndLba:0x2510B with Constant Pattern
14:32:47: [ RdLbaNoData(0x231BB, 0x1F50, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1752 ] 
14:32:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231BB to EndLba:0x2510B with Constant Pattern 

14:32:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4006
14:32:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138210>, <py_sfcl.PySEnhancedCmdData object at 0x06132ED0>, <None>) , Command count = 1753 ] 
14:32:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:49: Host Frequency set to 25000 KHz
14:32:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x061381B0>, 0x0, True) , Command count = 1754 ] 
14:32:49: [GO18_globalSetVolt]### Host voltage value is set.
14:32:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138630>, 0x0, False) , Command count = 1755 ] 
14:32:49: [GO18_globalSetVolt]### Host voltage value is set.
14:32:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1756 ] 
14:32:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1757 ] 
14:32:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1758 ] 
14:32:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06132E70>) , Command count = 1759 ] 
14:32:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132CF0>, <py_sfcl.CommandDataDefinition object at 0x06138990>) , Command count = 1760 ] 
14:32:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1761 ] 
14:32:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:50: Host Frequency set to 25000 KHz
14:32:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:50: ####CSD Registe 2.0 Values####
14:32:50: CSD_STRUCTURE                                 :0x1
14:32:50: Reserv1                                       :0x0
14:32:50: Time Access 1 TAAC                            :0xe
14:32:50: Time Access 2 NSAC*100                        :0x0
14:32:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:50: Card Command Classess CCC                     :0x5b5
14:32:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:50: DSR(driver stage register)  DSR_IMP           :0x0
14:32:50: Reserv2                                       :0x0
14:32:50: Device Size C_SIZE                            :0xedc8
14:32:50: Reserv3                                       :0x0
14:32:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:50: Reserv4                                       :0x0
14:32:50: Write Speed Factor R2W_FACTOR                 :0x2
14:32:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:50: FILE_FORMAT_GRP                               :0x0
14:32:50: COPY flag                                     :0x1
14:32:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:50: File_Format                                   :0x0
14:32:50: CRC                                           :0x0
14:32:50: ####CSD Registe Values####  

14:32:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:50: [GetSCRRegisterEntry] Passed
14:32:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:50: Data_Status_After Erases          : 0
14:32:50: CPRM Security Support             : No Security
14:32:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:50: Spec. Version                     : Version 3.0X
14:32:50: Extended Security Support         : Extended_Security_Not_Supported
14:32:50: Command Support                   : COMMAND_SUPPORT
14:32:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FDB0>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 1762 ] 
14:32:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DE0>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 1763 ] 
14:32:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:50: [ SetBusWidth(0x4) , Command count = 1764 ] 
14:32:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061384B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1765 ] 
14:32:50: Protected Area Size 0x28000
14:32:50: Bus Width           2
14:32:50: Secure Mode         0
14:32:50: Speed  Class        4
14:32:50: Perf Move           0
14:32:50: Au Size             9
14:32:50: Erase Size          15
14:32:50: Erase Timeout       1
14:32:50: Erase offset        1
14:32:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1766 ] 
14:32:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:50: Host Frequency set to 100000 KHz
14:32:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:50: ####CSD Registe 2.0 Values####
14:32:50: CSD_STRUCTURE                                 :0x1
14:32:50: Reserv1                                       :0x0
14:32:50: Time Access 1 TAAC                            :0xe
14:32:50: Time Access 2 NSAC*100                        :0x0
14:32:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:50: Card Command Classess CCC                     :0x5b5
14:32:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:50: DSR(driver stage register)  DSR_IMP           :0x0
14:32:50: Reserv2                                       :0x0
14:32:50: Device Size C_SIZE                            :0xedc8
14:32:50: Reserv3                                       :0x0
14:32:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:50: Reserv4                                       :0x0
14:32:50: Write Speed Factor R2W_FACTOR                 :0x2
14:32:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:50: FILE_FORMAT_GRP                               :0x0
14:32:50: COPY flag                                     :0x1
14:32:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:50: File_Format                                   :0x0
14:32:50: CRC                                           :0x0
14:32:50: ####CSD Registe Values####  

14:32:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138420>, <py_sfcl.CommandDataDefinition object at 0x06138390>) , Command count = 1767 ] 
14:32:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 1768 ] 
14:32:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72167 to EndLba:0x3B721E7 with One's Pattern
14:32:50: [ WrLbaNoData(0x3B72167, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1769 ] 
14:32:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72167 to EndLba:0x3B721E7 with One's Pattern 

14:32:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B721E7 to EndLba:0x3B72267 with One's Pattern
14:32:50: [ WrLbaNoData(0x3B721E7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1770 ] 
14:32:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B721E7 to EndLba:0x3B72267 with One's Pattern 

14:32:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231BD to EndLba:0x2510B with Constant Pattern
14:32:50: [ RdLbaNoData(0x231BD, 0x1F4E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1771 ] 
14:32:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231BD to EndLba:0x2510B with Constant Pattern 

14:32:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4005
14:32:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FC00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138D20>, <py_sfcl.PySEnhancedCmdData object at 0x061386F0>, <None>) , Command count = 1772 ] 
14:32:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:52: Host Frequency set to 25000 KHz
14:32:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138030>, 0x0, True) , Command count = 1773 ] 
14:32:52: [GO18_globalSetVolt]### Host voltage value is set.
14:32:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132870>, 0x0, False) , Command count = 1774 ] 
14:32:52: [GO18_globalSetVolt]### Host voltage value is set.
14:32:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1775 ] 
14:32:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1776 ] 
14:32:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1777 ] 
14:32:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x061387B0>) , Command count = 1778 ] 
14:32:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C90>, <py_sfcl.CommandDataDefinition object at 0x061382D0>) , Command count = 1779 ] 
14:32:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1780 ] 
14:32:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:53: Host Frequency set to 25000 KHz
14:32:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:53: ####CSD Registe 2.0 Values####
14:32:53: CSD_STRUCTURE                                 :0x1
14:32:53: Reserv1                                       :0x0
14:32:53: Time Access 1 TAAC                            :0xe
14:32:53: Time Access 2 NSAC*100                        :0x0
14:32:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:53: Card Command Classess CCC                     :0x5b5
14:32:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:53: DSR(driver stage register)  DSR_IMP           :0x0
14:32:53: Reserv2                                       :0x0
14:32:53: Device Size C_SIZE                            :0xedc8
14:32:53: Reserv3                                       :0x0
14:32:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:53: Reserv4                                       :0x0
14:32:53: Write Speed Factor R2W_FACTOR                 :0x2
14:32:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:53: FILE_FORMAT_GRP                               :0x0
14:32:53: COPY flag                                     :0x1
14:32:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:53: File_Format                                   :0x0
14:32:53: CRC                                           :0x0
14:32:53: ####CSD Registe Values####  

14:32:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:53: [GetSCRRegisterEntry] Passed
14:32:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:53: Data_Status_After Erases          : 0
14:32:53: CPRM Security Support             : No Security
14:32:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:53: Spec. Version                     : Version 3.0X
14:32:53: Extended Security Support         : Extended_Security_Not_Supported
14:32:53: Command Support                   : COMMAND_SUPPORT
14:32:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F180>, <py_sfcl.CommandDataDefinition object at 0x06138720>) , Command count = 1781 ] 
14:32:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 1782 ] 
14:32:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:53: [ SetBusWidth(0x4) , Command count = 1783 ] 
14:32:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1784 ] 
14:32:53: Protected Area Size 0x28000
14:32:53: Bus Width           2
14:32:53: Secure Mode         0
14:32:53: Speed  Class        4
14:32:53: Perf Move           0
14:32:53: Au Size             9
14:32:53: Erase Size          15
14:32:53: Erase Timeout       1
14:32:53: Erase offset        1
14:32:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1785 ] 
14:32:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:53: Host Frequency set to 100000 KHz
14:32:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:53: ####CSD Registe 2.0 Values####
14:32:53: CSD_STRUCTURE                                 :0x1
14:32:53: Reserv1                                       :0x0
14:32:53: Time Access 1 TAAC                            :0xe
14:32:53: Time Access 2 NSAC*100                        :0x0
14:32:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:53: Card Command Classess CCC                     :0x5b5
14:32:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:53: DSR(driver stage register)  DSR_IMP           :0x0
14:32:53: Reserv2                                       :0x0
14:32:53: Device Size C_SIZE                            :0xedc8
14:32:53: Reserv3                                       :0x0
14:32:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:53: Reserv4                                       :0x0
14:32:53: Write Speed Factor R2W_FACTOR                 :0x2
14:32:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:53: FILE_FORMAT_GRP                               :0x0
14:32:53: COPY flag                                     :0x1
14:32:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:53: File_Format                                   :0x0
14:32:53: CRC                                           :0x0
14:32:53: ####CSD Registe Values####  

14:32:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE10>, <py_sfcl.CommandDataDefinition object at 0x0613F270>) , Command count = 1786 ] 
14:32:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138510>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 1787 ] 
14:32:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DD4A to EndLba:0x3B6DDCA with One's Pattern
14:32:54: [ WrLbaNoData(0x3B6DD4A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1788 ] 
14:32:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DD4A to EndLba:0x3B6DDCA with One's Pattern 

14:32:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DDCA to EndLba:0x3B6DE4A with One's Pattern
14:32:54: [ WrLbaNoData(0x3B6DDCA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1789 ] 
14:32:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DDCA to EndLba:0x3B6DE4A with One's Pattern 

14:32:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231BD to EndLba:0x25109 with Constant Pattern
14:32:54: [ RdLbaNoData(0x231BD, 0x1F4C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1790 ] 
14:32:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231BD to EndLba:0x25109 with Constant Pattern 

14:32:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4004
14:32:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138ED0>, <py_sfcl.PySEnhancedCmdData object at 0x06138E10>, <None>) , Command count = 1791 ] 
14:32:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:56: Host Frequency set to 25000 KHz
14:32:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132A50>, 0x0, True) , Command count = 1792 ] 
14:32:56: [GO18_globalSetVolt]### Host voltage value is set.
14:32:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x061388A0>, 0x0, False) , Command count = 1793 ] 
14:32:56: [GO18_globalSetVolt]### Host voltage value is set.
14:32:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1794 ] 
14:32:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1795 ] 
14:32:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1796 ] 
14:32:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138810>) , Command count = 1797 ] 
14:32:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 1798 ] 
14:32:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:32:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1799 ] 
14:32:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:32:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:56: Host Frequency set to 25000 KHz
14:32:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:56: ####CSD Registe 2.0 Values####
14:32:56: CSD_STRUCTURE                                 :0x1
14:32:56: Reserv1                                       :0x0
14:32:56: Time Access 1 TAAC                            :0xe
14:32:56: Time Access 2 NSAC*100                        :0x0
14:32:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:32:56: Card Command Classess CCC                     :0x5b5
14:32:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:56: DSR(driver stage register)  DSR_IMP           :0x0
14:32:56: Reserv2                                       :0x0
14:32:56: Device Size C_SIZE                            :0xedc8
14:32:56: Reserv3                                       :0x0
14:32:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:56: Reserv4                                       :0x0
14:32:56: Write Speed Factor R2W_FACTOR                 :0x2
14:32:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:56: FILE_FORMAT_GRP                               :0x0
14:32:56: COPY flag                                     :0x1
14:32:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:56: File_Format                                   :0x0
14:32:56: CRC                                           :0x0
14:32:56: ####CSD Registe Values####  

14:32:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:32:56: [GetSCRRegisterEntry] Passed
14:32:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:32:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:32:56: Data_Status_After Erases          : 0
14:32:56: CPRM Security Support             : No Security
14:32:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:32:56: Spec. Version                     : Version 3.0X
14:32:56: Extended Security Support         : Extended_Security_Not_Supported
14:32:56: Command Support                   : COMMAND_SUPPORT
14:32:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B40>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 1800 ] 
14:32:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:32:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x0613F390>) , Command count = 1801 ] 
14:32:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:32:56: [ SetBusWidth(0x4) , Command count = 1802 ] 
14:32:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:32:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1803 ] 
14:32:56: Protected Area Size 0x28000
14:32:56: Bus Width           2
14:32:56: Secure Mode         0
14:32:56: Speed  Class        4
14:32:56: Perf Move           0
14:32:56: Au Size             9
14:32:56: Erase Size          15
14:32:56: Erase Timeout       1
14:32:56: Erase offset        1
14:32:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:32:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:32:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:32:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1804 ] 
14:32:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:32:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:32:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:32:56: Host Frequency set to 100000 KHz
14:32:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:32:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:32:56: ####CSD Registe 2.0 Values####
14:32:56: CSD_STRUCTURE                                 :0x1
14:32:56: Reserv1                                       :0x0
14:32:56: Time Access 1 TAAC                            :0xe
14:32:56: Time Access 2 NSAC*100                        :0x0
14:32:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:32:56: Card Command Classess CCC                     :0x5b5
14:32:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:32:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:32:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:32:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:32:56: DSR(driver stage register)  DSR_IMP           :0x0
14:32:56: Reserv2                                       :0x0
14:32:56: Device Size C_SIZE                            :0xedc8
14:32:56: Reserv3                                       :0x0
14:32:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:32:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:32:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:32:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:32:57: Reserv4                                       :0x0
14:32:57: Write Speed Factor R2W_FACTOR                 :0x2
14:32:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:32:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:32:57: FILE_FORMAT_GRP                               :0x0
14:32:57: COPY flag                                     :0x1
14:32:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:32:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:32:57: File_Format                                   :0x0
14:32:57: CRC                                           :0x0
14:32:57: ####CSD Registe Values####  

14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1B0>, <py_sfcl.CommandDataDefinition object at 0x0613F030>) , Command count = 1805 ] 
14:32:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:32:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C30>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 1806 ] 
14:32:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:32:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:32:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E96B to EndLba:0x3B6E9EB with One's Pattern
14:32:57: [ WrLbaNoData(0x3B6E96B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1807 ] 
14:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E96B to EndLba:0x3B6E9EB with One's Pattern 

14:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E9EB to EndLba:0x3B6EA6B with One's Pattern
14:32:57: [ WrLbaNoData(0x3B6E9EB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1808 ] 
14:32:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E9EB to EndLba:0x3B6EA6B with One's Pattern 

14:32:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:32:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231BF to EndLba:0x25109 with Constant Pattern
14:32:57: [ RdLbaNoData(0x231BF, 0x1F4A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1809 ] 
14:32:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231BF to EndLba:0x25109 with Constant Pattern 

14:32:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4003
14:32:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:32:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AFC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052AF240>, <py_sfcl.PySEnhancedCmdData object at 0x0613F510>, <None>) , Command count = 1810 ] 
14:32:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:32:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:32:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:32:59: Host Frequency set to 25000 KHz
14:32:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:32:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:32:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:32:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138D50>, 0x0, True) , Command count = 1811 ] 
14:32:59: [GO18_globalSetVolt]### Host voltage value is set.
14:32:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:32:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138E40>, 0x0, False) , Command count = 1812 ] 
14:32:59: [GO18_globalSetVolt]### Host voltage value is set.
14:32:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1813 ] 
14:32:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:32:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1814 ] 
14:32:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:32:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:32:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:32:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:32:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:32:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1815 ] 
14:32:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:32:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:32:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A80>, <py_sfcl.CommandDataDefinition object at 0x0613F480>) , Command count = 1816 ] 
14:32:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C30>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 1817 ] 
14:33:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1818 ] 
14:33:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:00: Host Frequency set to 25000 KHz
14:33:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:00: ####CSD Registe 2.0 Values####
14:33:00: CSD_STRUCTURE                                 :0x1
14:33:00: Reserv1                                       :0x0
14:33:00: Time Access 1 TAAC                            :0xe
14:33:00: Time Access 2 NSAC*100                        :0x0
14:33:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:00: Card Command Classess CCC                     :0x5b5
14:33:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:00: DSR(driver stage register)  DSR_IMP           :0x0
14:33:00: Reserv2                                       :0x0
14:33:00: Device Size C_SIZE                            :0xedc8
14:33:00: Reserv3                                       :0x0
14:33:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:00: Reserv4                                       :0x0
14:33:00: Write Speed Factor R2W_FACTOR                 :0x2
14:33:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:00: FILE_FORMAT_GRP                               :0x0
14:33:00: COPY flag                                     :0x1
14:33:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:00: File_Format                                   :0x0
14:33:00: CRC                                           :0x0
14:33:00: ####CSD Registe Values####  

14:33:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:00: [GetSCRRegisterEntry] Passed
14:33:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:00: Data_Status_After Erases          : 0
14:33:00: CPRM Security Support             : No Security
14:33:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:00: Spec. Version                     : Version 3.0X
14:33:00: Extended Security Support         : Extended_Security_Not_Supported
14:33:00: Command Support                   : COMMAND_SUPPORT
14:33:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529EE40>, <py_sfcl.CommandDataDefinition object at 0x0613F630>) , Command count = 1819 ] 
14:33:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613FDE0>) , Command count = 1820 ] 
14:33:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:00: [ SetBusWidth(0x4) , Command count = 1821 ] 
14:33:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052AFEA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1822 ] 
14:33:00: Protected Area Size 0x28000
14:33:00: Bus Width           2
14:33:00: Secure Mode         0
14:33:00: Speed  Class        4
14:33:00: Perf Move           0
14:33:00: Au Size             9
14:33:00: Erase Size          15
14:33:00: Erase Timeout       1
14:33:00: Erase offset        1
14:33:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1823 ] 
14:33:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:00: Host Frequency set to 100000 KHz
14:33:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:00: ####CSD Registe 2.0 Values####
14:33:00: CSD_STRUCTURE                                 :0x1
14:33:00: Reserv1                                       :0x0
14:33:00: Time Access 1 TAAC                            :0xe
14:33:00: Time Access 2 NSAC*100                        :0x0
14:33:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:00: Card Command Classess CCC                     :0x5b5
14:33:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:00: DSR(driver stage register)  DSR_IMP           :0x0
14:33:00: Reserv2                                       :0x0
14:33:00: Device Size C_SIZE                            :0xedc8
14:33:00: Reserv3                                       :0x0
14:33:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:00: Reserv4                                       :0x0
14:33:00: Write Speed Factor R2W_FACTOR                 :0x2
14:33:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:00: FILE_FORMAT_GRP                               :0x0
14:33:00: COPY flag                                     :0x1
14:33:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:00: File_Format                                   :0x0
14:33:00: CRC                                           :0x0
14:33:00: ####CSD Registe Values####  

14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C90>, <py_sfcl.CommandDataDefinition object at 0x0613F4B0>) , Command count = 1824 ] 
14:33:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x0613FB70>) , Command count = 1825 ] 
14:33:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D701 to EndLba:0x3B6D781 with One's Pattern
14:33:00: [ WrLbaNoData(0x3B6D701, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1826 ] 
14:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D701 to EndLba:0x3B6D781 with One's Pattern 

14:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D781 to EndLba:0x3B6D801 with One's Pattern
14:33:00: [ WrLbaNoData(0x3B6D781, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1827 ] 
14:33:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D781 to EndLba:0x3B6D801 with One's Pattern 

14:33:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231BF to EndLba:0x25107 with Constant Pattern
14:33:00: [ RdLbaNoData(0x231BF, 0x1F48, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1828 ] 
14:33:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231BF to EndLba:0x25107 with Constant Pattern 

14:33:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4002
14:33:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E38D0>, <py_sfcl.PySEnhancedCmdData object at 0x0613FF60>, <None>) , Command count = 1829 ] 
14:33:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:03: Host Frequency set to 25000 KHz
14:33:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138F60>, 0x0, True) , Command count = 1830 ] 
14:33:03: [GO18_globalSetVolt]### Host voltage value is set.
14:33:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0518AE70>, 0x0, False) , Command count = 1831 ] 
14:33:03: [GO18_globalSetVolt]### Host voltage value is set.
14:33:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1832 ] 
14:33:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1833 ] 
14:33:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1834 ] 
14:33:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138FC0>, <py_sfcl.CommandDataDefinition object at 0x0611C8A0>) , Command count = 1835 ] 
14:33:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x0613F720>) , Command count = 1836 ] 
14:33:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1837 ] 
14:33:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:03: Host Frequency set to 25000 KHz
14:33:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:03: ####CSD Registe 2.0 Values####
14:33:03: CSD_STRUCTURE                                 :0x1
14:33:03: Reserv1                                       :0x0
14:33:03: Time Access 1 TAAC                            :0xe
14:33:03: Time Access 2 NSAC*100                        :0x0
14:33:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:03: Card Command Classess CCC                     :0x5b5
14:33:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:03: DSR(driver stage register)  DSR_IMP           :0x0
14:33:03: Reserv2                                       :0x0
14:33:03: Device Size C_SIZE                            :0xedc8
14:33:03: Reserv3                                       :0x0
14:33:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:03: Reserv4                                       :0x0
14:33:03: Write Speed Factor R2W_FACTOR                 :0x2
14:33:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:03: FILE_FORMAT_GRP                               :0x0
14:33:03: COPY flag                                     :0x1
14:33:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:03: File_Format                                   :0x0
14:33:03: CRC                                           :0x0
14:33:03: ####CSD Registe Values####  

14:33:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:03: [GetSCRRegisterEntry] Passed
14:33:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:03: Data_Status_After Erases          : 0
14:33:03: CPRM Security Support             : No Security
14:33:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:03: Spec. Version                     : Version 3.0X
14:33:03: Extended Security Support         : Extended_Security_Not_Supported
14:33:03: Command Support                   : COMMAND_SUPPORT
14:33:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E37B0>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 1838 ] 
14:33:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0613F420>) , Command count = 1839 ] 
14:33:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:03: [ SetBusWidth(0x4) , Command count = 1840 ] 
14:33:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1841 ] 
14:33:03: Protected Area Size 0x28000
14:33:03: Bus Width           2
14:33:03: Secure Mode         0
14:33:03: Speed  Class        4
14:33:03: Perf Move           0
14:33:03: Au Size             9
14:33:03: Erase Size          15
14:33:03: Erase Timeout       1
14:33:03: Erase offset        1
14:33:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1842 ] 
14:33:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:03: Host Frequency set to 100000 KHz
14:33:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:03: ####CSD Registe 2.0 Values####
14:33:03: CSD_STRUCTURE                                 :0x1
14:33:03: Reserv1                                       :0x0
14:33:03: Time Access 1 TAAC                            :0xe
14:33:03: Time Access 2 NSAC*100                        :0x0
14:33:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:03: Card Command Classess CCC                     :0x5b5
14:33:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:03: DSR(driver stage register)  DSR_IMP           :0x0
14:33:03: Reserv2                                       :0x0
14:33:03: Device Size C_SIZE                            :0xedc8
14:33:03: Reserv3                                       :0x0
14:33:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:03: Reserv4                                       :0x0
14:33:03: Write Speed Factor R2W_FACTOR                 :0x2
14:33:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:03: FILE_FORMAT_GRP                               :0x0
14:33:03: COPY flag                                     :0x1
14:33:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:03: File_Format                                   :0x0
14:33:03: CRC                                           :0x0
14:33:03: ####CSD Registe Values####  

14:33:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E780>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 1843 ] 
14:33:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA20>, <py_sfcl.CommandDataDefinition object at 0x0613F840>) , Command count = 1844 ] 
14:33:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E4D3 to EndLba:0x3B6E553 with One's Pattern
14:33:04: [ WrLbaNoData(0x3B6E4D3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1845 ] 
14:33:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E4D3 to EndLba:0x3B6E553 with One's Pattern 

14:33:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E553 to EndLba:0x3B6E5D3 with One's Pattern
14:33:04: [ WrLbaNoData(0x3B6E553, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1846 ] 
14:33:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E553 to EndLba:0x3B6E5D3 with One's Pattern 

14:33:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C1 to EndLba:0x25107 with Constant Pattern
14:33:04: [ RdLbaNoData(0x231C1, 0x1F46, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1847 ] 
14:33:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C1 to EndLba:0x25107 with Constant Pattern 

14:33:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4001
14:33:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3540>, <py_sfcl.PySEnhancedCmdData object at 0x060E38A0>, <None>) , Command count = 1848 ] 
14:33:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:06: Host Frequency set to 25000 KHz
14:33:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1DE0>, 0x0, True) , Command count = 1849 ] 
14:33:06: [GO18_globalSetVolt]### Host voltage value is set.
14:33:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1F60>, 0x0, False) , Command count = 1850 ] 
14:33:06: [GO18_globalSetVolt]### Host voltage value is set.
14:33:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1851 ] 
14:33:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1852 ] 
14:33:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1853 ] 
14:33:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x0611C1B0>) , Command count = 1854 ] 
14:33:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x060E3A50>) , Command count = 1855 ] 
14:33:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1856 ] 
14:33:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:06: Host Frequency set to 25000 KHz
14:33:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:06: ####CSD Registe 2.0 Values####
14:33:06: CSD_STRUCTURE                                 :0x1
14:33:06: Reserv1                                       :0x0
14:33:06: Time Access 1 TAAC                            :0xe
14:33:06: Time Access 2 NSAC*100                        :0x0
14:33:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:06: Card Command Classess CCC                     :0x5b5
14:33:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:06: DSR(driver stage register)  DSR_IMP           :0x0
14:33:06: Reserv2                                       :0x0
14:33:06: Device Size C_SIZE                            :0xedc8
14:33:06: Reserv3                                       :0x0
14:33:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:06: Reserv4                                       :0x0
14:33:06: Write Speed Factor R2W_FACTOR                 :0x2
14:33:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:06: FILE_FORMAT_GRP                               :0x0
14:33:06: COPY flag                                     :0x1
14:33:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:06: File_Format                                   :0x0
14:33:06: CRC                                           :0x0
14:33:06: ####CSD Registe Values####  

14:33:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:06: [GetSCRRegisterEntry] Passed
14:33:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:06: Data_Status_After Erases          : 0
14:33:06: CPRM Security Support             : No Security
14:33:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:06: Spec. Version                     : Version 3.0X
14:33:06: Extended Security Support         : Extended_Security_Not_Supported
14:33:06: Command Support                   : COMMAND_SUPPORT
14:33:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C240>, <py_sfcl.CommandDataDefinition object at 0x06145120>) , Command count = 1857 ] 
14:33:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA20>, <py_sfcl.CommandDataDefinition object at 0x0611C900>) , Command count = 1858 ] 
14:33:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:06: [ SetBusWidth(0x4) , Command count = 1859 ] 
14:33:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1860 ] 
14:33:06: Protected Area Size 0x28000
14:33:06: Bus Width           2
14:33:06: Secure Mode         0
14:33:06: Speed  Class        4
14:33:06: Perf Move           0
14:33:06: Au Size             9
14:33:06: Erase Size          15
14:33:06: Erase Timeout       1
14:33:06: Erase offset        1
14:33:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1861 ] 
14:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:06: Host Frequency set to 100000 KHz
14:33:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:06: ####CSD Registe 2.0 Values####
14:33:06: CSD_STRUCTURE                                 :0x1
14:33:07: Reserv1                                       :0x0
14:33:07: Time Access 1 TAAC                            :0xe
14:33:07: Time Access 2 NSAC*100                        :0x0
14:33:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:07: Card Command Classess CCC                     :0x5b5
14:33:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:07: DSR(driver stage register)  DSR_IMP           :0x0
14:33:07: Reserv2                                       :0x0
14:33:07: Device Size C_SIZE                            :0xedc8
14:33:07: Reserv3                                       :0x0
14:33:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:07: Reserv4                                       :0x0
14:33:07: Write Speed Factor R2W_FACTOR                 :0x2
14:33:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:07: FILE_FORMAT_GRP                               :0x0
14:33:07: COPY flag                                     :0x1
14:33:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:07: File_Format                                   :0x0
14:33:07: CRC                                           :0x0
14:33:07: ####CSD Registe Values####  

14:33:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C030>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 1862 ] 
14:33:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 1863 ] 
14:33:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F6A9 to EndLba:0x3B6F729 with One's Pattern
14:33:07: [ WrLbaNoData(0x3B6F6A9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1864 ] 
14:33:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F6A9 to EndLba:0x3B6F729 with One's Pattern 

14:33:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F729 to EndLba:0x3B6F7A9 with One's Pattern
14:33:07: [ WrLbaNoData(0x3B6F729, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1865 ] 
14:33:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F729 to EndLba:0x3B6F7A9 with One's Pattern 

14:33:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C1 to EndLba:0x25105 with Constant Pattern
14:33:07: [ RdLbaNoData(0x231C1, 0x1F44, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1866 ] 
14:33:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C1 to EndLba:0x25105 with Constant Pattern 

14:33:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 4000
14:33:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C810>, <py_sfcl.PySEnhancedCmdData object at 0x0611CAB0>, <None>) , Command count = 1867 ] 
14:33:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:09: Host Frequency set to 25000 KHz
14:33:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CF00>, 0x0, True) , Command count = 1868 ] 
14:33:09: [GO18_globalSetVolt]### Host voltage value is set.
14:33:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CE10>, 0x0, False) , Command count = 1869 ] 
14:33:09: [GO18_globalSetVolt]### Host voltage value is set.
14:33:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1870 ] 
14:33:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1871 ] 
14:33:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1872 ] 
14:33:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F030>, <py_sfcl.CommandDataDefinition object at 0x0611CCC0>) , Command count = 1873 ] 
14:33:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129210>, <py_sfcl.CommandDataDefinition object at 0x0613FE40>) , Command count = 1874 ] 
14:33:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1875 ] 
14:33:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:10: Host Frequency set to 25000 KHz
14:33:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:10: ####CSD Registe 2.0 Values####
14:33:10: CSD_STRUCTURE                                 :0x1
14:33:10: Reserv1                                       :0x0
14:33:10: Time Access 1 TAAC                            :0xe
14:33:10: Time Access 2 NSAC*100                        :0x0
14:33:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:10: Card Command Classess CCC                     :0x5b5
14:33:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:10: DSR(driver stage register)  DSR_IMP           :0x0
14:33:10: Reserv2                                       :0x0
14:33:10: Device Size C_SIZE                            :0xedc8
14:33:10: Reserv3                                       :0x0
14:33:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:10: Reserv4                                       :0x0
14:33:10: Write Speed Factor R2W_FACTOR                 :0x2
14:33:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:10: FILE_FORMAT_GRP                               :0x0
14:33:10: COPY flag                                     :0x1
14:33:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:10: File_Format                                   :0x0
14:33:10: CRC                                           :0x0
14:33:10: ####CSD Registe Values####  

14:33:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:10: [GetSCRRegisterEntry] Passed
14:33:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:10: Data_Status_After Erases          : 0
14:33:10: CPRM Security Support             : No Security
14:33:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:10: Spec. Version                     : Version 3.0X
14:33:10: Extended Security Support         : Extended_Security_Not_Supported
14:33:10: Command Support                   : COMMAND_SUPPORT
14:33:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CDE0>, <py_sfcl.CommandDataDefinition object at 0x0613F7E0>) , Command count = 1876 ] 
14:33:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3CF0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 1877 ] 
14:33:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:10: [ SetBusWidth(0x4) , Command count = 1878 ] 
14:33:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1879 ] 
14:33:10: Protected Area Size 0x28000
14:33:10: Bus Width           2
14:33:10: Secure Mode         0
14:33:10: Speed  Class        4
14:33:10: Perf Move           0
14:33:10: Au Size             9
14:33:10: Erase Size          15
14:33:10: Erase Timeout       1
14:33:10: Erase offset        1
14:33:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1880 ] 
14:33:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:10: Host Frequency set to 100000 KHz
14:33:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:10: ####CSD Registe 2.0 Values####
14:33:10: CSD_STRUCTURE                                 :0x1
14:33:10: Reserv1                                       :0x0
14:33:10: Time Access 1 TAAC                            :0xe
14:33:10: Time Access 2 NSAC*100                        :0x0
14:33:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:10: Card Command Classess CCC                     :0x5b5
14:33:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:10: DSR(driver stage register)  DSR_IMP           :0x0
14:33:10: Reserv2                                       :0x0
14:33:10: Device Size C_SIZE                            :0xedc8
14:33:10: Reserv3                                       :0x0
14:33:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:10: Reserv4                                       :0x0
14:33:10: Write Speed Factor R2W_FACTOR                 :0x2
14:33:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:10: FILE_FORMAT_GRP                               :0x0
14:33:10: COPY flag                                     :0x1
14:33:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:10: File_Format                                   :0x0
14:33:10: CRC                                           :0x0
14:33:10: ####CSD Registe Values####  

14:33:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129090>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 1881 ] 
14:33:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061290F0>, <py_sfcl.CommandDataDefinition object at 0x0611C090>) , Command count = 1882 ] 
14:33:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70472 to EndLba:0x3B704F2 with One's Pattern
14:33:10: [ WrLbaNoData(0x3B70472, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1883 ] 
14:33:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70472 to EndLba:0x3B704F2 with One's Pattern 

14:33:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704F2 to EndLba:0x3B70572 with One's Pattern
14:33:10: [ WrLbaNoData(0x3B704F2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1884 ] 
14:33:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704F2 to EndLba:0x3B70572 with One's Pattern 

14:33:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C3 to EndLba:0x25105 with Constant Pattern
14:33:10: [ RdLbaNoData(0x231C3, 0x1F42, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1885 ] 
14:33:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C3 to EndLba:0x25105 with Constant Pattern 

14:33:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3999
14:33:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061298A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129DB0>, <py_sfcl.PySEnhancedCmdData object at 0x0611C960>, <None>) , Command count = 1886 ] 
14:33:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:13: Host Frequency set to 25000 KHz
14:33:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129060>, 0x0, True) , Command count = 1887 ] 
14:33:13: [GO18_globalSetVolt]### Host voltage value is set.
14:33:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x061292D0>, 0x0, False) , Command count = 1888 ] 
14:33:13: [GO18_globalSetVolt]### Host voltage value is set.
14:33:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1889 ] 
14:33:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1890 ] 
14:33:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1891 ] 
14:33:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3750>, <py_sfcl.CommandDataDefinition object at 0x0611C480>) , Command count = 1892 ] 
14:33:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129240>, <py_sfcl.CommandDataDefinition object at 0x061290F0>) , Command count = 1893 ] 
14:33:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1894 ] 
14:33:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:13: Host Frequency set to 25000 KHz
14:33:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:13: ####CSD Registe 2.0 Values####
14:33:13: CSD_STRUCTURE                                 :0x1
14:33:13: Reserv1                                       :0x0
14:33:13: Time Access 1 TAAC                            :0xe
14:33:13: Time Access 2 NSAC*100                        :0x0
14:33:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:13: Card Command Classess CCC                     :0x5b5
14:33:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:13: DSR(driver stage register)  DSR_IMP           :0x0
14:33:13: Reserv2                                       :0x0
14:33:13: Device Size C_SIZE                            :0xedc8
14:33:13: Reserv3                                       :0x0
14:33:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:13: Reserv4                                       :0x0
14:33:13: Write Speed Factor R2W_FACTOR                 :0x2
14:33:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:13: FILE_FORMAT_GRP                               :0x0
14:33:13: COPY flag                                     :0x1
14:33:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:13: File_Format                                   :0x0
14:33:13: CRC                                           :0x0
14:33:13: ####CSD Registe Values####  

14:33:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:13: [GetSCRRegisterEntry] Passed
14:33:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:13: Data_Status_After Erases          : 0
14:33:13: CPRM Security Support             : No Security
14:33:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:13: Spec. Version                     : Version 3.0X
14:33:13: Extended Security Support         : Extended_Security_Not_Supported
14:33:13: Command Support                   : COMMAND_SUPPORT
14:33:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x06129BA0>) , Command count = 1895 ] 
14:33:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129870>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 1896 ] 
14:33:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:13: [ SetBusWidth(0x4) , Command count = 1897 ] 
14:33:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1898 ] 
14:33:13: Protected Area Size 0x28000
14:33:13: Bus Width           2
14:33:13: Secure Mode         0
14:33:13: Speed  Class        4
14:33:13: Perf Move           0
14:33:13: Au Size             9
14:33:13: Erase Size          15
14:33:13: Erase Timeout       1
14:33:13: Erase offset        1
14:33:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1899 ] 
14:33:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:13: Host Frequency set to 100000 KHz
14:33:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:13: ####CSD Registe 2.0 Values####
14:33:13: CSD_STRUCTURE                                 :0x1
14:33:13: Reserv1                                       :0x0
14:33:13: Time Access 1 TAAC                            :0xe
14:33:13: Time Access 2 NSAC*100                        :0x0
14:33:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:13: Card Command Classess CCC                     :0x5b5
14:33:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:13: DSR(driver stage register)  DSR_IMP           :0x0
14:33:13: Reserv2                                       :0x0
14:33:13: Device Size C_SIZE                            :0xedc8
14:33:13: Reserv3                                       :0x0
14:33:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:14: Reserv4                                       :0x0
14:33:14: Write Speed Factor R2W_FACTOR                 :0x2
14:33:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:14: FILE_FORMAT_GRP                               :0x0
14:33:14: COPY flag                                     :0x1
14:33:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:14: File_Format                                   :0x0
14:33:14: CRC                                           :0x0
14:33:14: ####CSD Registe Values####  

14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129FC0>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 1900 ] 
14:33:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F00>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 1901 ] 
14:33:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E3C4 to EndLba:0x3B6E444 with One's Pattern
14:33:14: [ WrLbaNoData(0x3B6E3C4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1902 ] 
14:33:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E3C4 to EndLba:0x3B6E444 with One's Pattern 

14:33:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E444 to EndLba:0x3B6E4C4 with One's Pattern
14:33:14: [ WrLbaNoData(0x3B6E444, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1903 ] 
14:33:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E444 to EndLba:0x3B6E4C4 with One's Pattern 

14:33:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C3 to EndLba:0x25103 with Constant Pattern
14:33:14: [ RdLbaNoData(0x231C3, 0x1F40, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1904 ] 
14:33:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C3 to EndLba:0x25103 with Constant Pattern 

14:33:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3998
14:33:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061299F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129930>, <None>) , Command count = 1905 ] 
14:33:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:16: Host Frequency set to 25000 KHz
14:33:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129390>, 0x0, True) , Command count = 1906 ] 
14:33:16: [GO18_globalSetVolt]### Host voltage value is set.
14:33:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x061294B0>, 0x0, False) , Command count = 1907 ] 
14:33:16: [GO18_globalSetVolt]### Host voltage value is set.
14:33:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1908 ] 
14:33:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1909 ] 
14:33:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1910 ] 
14:33:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x0613FED0>) , Command count = 1911 ] 
14:33:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129A80>) , Command count = 1912 ] 
14:33:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1913 ] 
14:33:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:16: Host Frequency set to 25000 KHz
14:33:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:16: ####CSD Registe 2.0 Values####
14:33:16: CSD_STRUCTURE                                 :0x1
14:33:16: Reserv1                                       :0x0
14:33:16: Time Access 1 TAAC                            :0xe
14:33:16: Time Access 2 NSAC*100                        :0x0
14:33:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:16: Card Command Classess CCC                     :0x5b5
14:33:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:16: DSR(driver stage register)  DSR_IMP           :0x0
14:33:16: Reserv2                                       :0x0
14:33:16: Device Size C_SIZE                            :0xedc8
14:33:16: Reserv3                                       :0x0
14:33:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:16: Reserv4                                       :0x0
14:33:16: Write Speed Factor R2W_FACTOR                 :0x2
14:33:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:16: FILE_FORMAT_GRP                               :0x0
14:33:16: COPY flag                                     :0x1
14:33:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:16: File_Format                                   :0x0
14:33:16: CRC                                           :0x0
14:33:16: ####CSD Registe Values####  

14:33:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:16: [GetSCRRegisterEntry] Passed
14:33:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:16: Data_Status_After Erases          : 0
14:33:16: CPRM Security Support             : No Security
14:33:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:16: Spec. Version                     : Version 3.0X
14:33:16: Extended Security Support         : Extended_Security_Not_Supported
14:33:16: Command Support                   : COMMAND_SUPPORT
14:33:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F930>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 1914 ] 
14:33:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1E0>, <py_sfcl.CommandDataDefinition object at 0x06129DE0>) , Command count = 1915 ] 
14:33:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:16: [ SetBusWidth(0x4) , Command count = 1916 ] 
14:33:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1917 ] 
14:33:16: Protected Area Size 0x28000
14:33:16: Bus Width           2
14:33:16: Secure Mode         0
14:33:16: Speed  Class        4
14:33:16: Perf Move           0
14:33:16: Au Size             9
14:33:16: Erase Size          15
14:33:16: Erase Timeout       1
14:33:16: Erase offset        1
14:33:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1918 ] 
14:33:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:17: Host Frequency set to 100000 KHz
14:33:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:17: ####CSD Registe 2.0 Values####
14:33:17: CSD_STRUCTURE                                 :0x1
14:33:17: Reserv1                                       :0x0
14:33:17: Time Access 1 TAAC                            :0xe
14:33:17: Time Access 2 NSAC*100                        :0x0
14:33:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:17: Card Command Classess CCC                     :0x5b5
14:33:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:17: DSR(driver stage register)  DSR_IMP           :0x0
14:33:17: Reserv2                                       :0x0
14:33:17: Device Size C_SIZE                            :0xedc8
14:33:17: Reserv3                                       :0x0
14:33:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:17: Reserv4                                       :0x0
14:33:17: Write Speed Factor R2W_FACTOR                 :0x2
14:33:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:17: FILE_FORMAT_GRP                               :0x0
14:33:17: COPY flag                                     :0x1
14:33:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:17: File_Format                                   :0x0
14:33:17: CRC                                           :0x0
14:33:17: ####CSD Registe Values####  

14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD80>, <py_sfcl.CommandDataDefinition object at 0x06129780>) , Command count = 1919 ] 
14:33:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x0611CB10>) , Command count = 1920 ] 
14:33:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F300 to EndLba:0x3B6F380 with One's Pattern
14:33:17: [ WrLbaNoData(0x3B6F300, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1921 ] 
14:33:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F300 to EndLba:0x3B6F380 with One's Pattern 

14:33:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F380 to EndLba:0x3B6F400 with One's Pattern
14:33:17: [ WrLbaNoData(0x3B6F380, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1922 ] 
14:33:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F380 to EndLba:0x3B6F400 with One's Pattern 

14:33:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:17: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C5 to EndLba:0x25103 with Constant Pattern
14:33:17: [ RdLbaNoData(0x231C5, 0x1F3E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1923 ] 
14:33:17: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C5 to EndLba:0x25103 with Constant Pattern 

14:33:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3997
14:33:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FC90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129EA0>, <py_sfcl.PySEnhancedCmdData object at 0x06129B10>, <None>) , Command count = 1924 ] 
14:33:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:20: Host Frequency set to 25000 KHz
14:33:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E330>, 0x0, True) , Command count = 1925 ] 
14:33:20: [GO18_globalSetVolt]### Host voltage value is set.
14:33:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129AE0>, 0x0, False) , Command count = 1926 ] 
14:33:20: [GO18_globalSetVolt]### Host voltage value is set.
14:33:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1927 ] 
14:33:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1928 ] 
14:33:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1929 ] 
14:33:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x0613FC60>) , Command count = 1930 ] 
14:33:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E70>, <py_sfcl.CommandDataDefinition object at 0x061291E0>) , Command count = 1931 ] 
14:33:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1932 ] 
14:33:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:20: Host Frequency set to 25000 KHz
14:33:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:20: ####CSD Registe 2.0 Values####
14:33:20: CSD_STRUCTURE                                 :0x1
14:33:20: Reserv1                                       :0x0
14:33:20: Time Access 1 TAAC                            :0xe
14:33:20: Time Access 2 NSAC*100                        :0x0
14:33:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:20: Card Command Classess CCC                     :0x5b5
14:33:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:20: DSR(driver stage register)  DSR_IMP           :0x0
14:33:20: Reserv2                                       :0x0
14:33:20: Device Size C_SIZE                            :0xedc8
14:33:20: Reserv3                                       :0x0
14:33:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:20: Reserv4                                       :0x0
14:33:20: Write Speed Factor R2W_FACTOR                 :0x2
14:33:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:20: FILE_FORMAT_GRP                               :0x0
14:33:20: COPY flag                                     :0x1
14:33:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:20: File_Format                                   :0x0
14:33:20: CRC                                           :0x0
14:33:20: ####CSD Registe Values####  

14:33:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:20: [GetSCRRegisterEntry] Passed
14:33:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:20: Data_Status_After Erases          : 0
14:33:20: CPRM Security Support             : No Security
14:33:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:20: Spec. Version                     : Version 3.0X
14:33:20: Extended Security Support         : Extended_Security_Not_Supported
14:33:20: Command Support                   : COMMAND_SUPPORT
14:33:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061297B0>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 1933 ] 
14:33:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1B0>, <py_sfcl.CommandDataDefinition object at 0x0612E570>) , Command count = 1934 ] 
14:33:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:20: [ SetBusWidth(0x4) , Command count = 1935 ] 
14:33:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1936 ] 
14:33:20: Protected Area Size 0x28000
14:33:20: Bus Width           2
14:33:20: Secure Mode         0
14:33:20: Speed  Class        4
14:33:20: Perf Move           0
14:33:20: Au Size             9
14:33:20: Erase Size          15
14:33:20: Erase Timeout       1
14:33:20: Erase offset        1
14:33:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1937 ] 
14:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:20: Host Frequency set to 100000 KHz
14:33:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:20: ####CSD Registe 2.0 Values####
14:33:20: CSD_STRUCTURE                                 :0x1
14:33:20: Reserv1                                       :0x0
14:33:20: Time Access 1 TAAC                            :0xe
14:33:20: Time Access 2 NSAC*100                        :0x0
14:33:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:20: Card Command Classess CCC                     :0x5b5
14:33:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:20: DSR(driver stage register)  DSR_IMP           :0x0
14:33:20: Reserv2                                       :0x0
14:33:20: Device Size C_SIZE                            :0xedc8
14:33:20: Reserv3                                       :0x0
14:33:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:20: Reserv4                                       :0x0
14:33:20: Write Speed Factor R2W_FACTOR                 :0x2
14:33:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:21: FILE_FORMAT_GRP                               :0x0
14:33:21: COPY flag                                     :0x1
14:33:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:21: File_Format                                   :0x0
14:33:21: CRC                                           :0x0
14:33:21: ####CSD Registe Values####  

14:33:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB40>, <py_sfcl.CommandDataDefinition object at 0x0612E8D0>) , Command count = 1938 ] 
14:33:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x0611CB70>) , Command count = 1939 ] 
14:33:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F565 to EndLba:0x3B6F5E5 with One's Pattern
14:33:21: [ WrLbaNoData(0x3B6F565, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1940 ] 
14:33:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F565 to EndLba:0x3B6F5E5 with One's Pattern 

14:33:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F5E5 to EndLba:0x3B6F665 with One's Pattern
14:33:21: [ WrLbaNoData(0x3B6F5E5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1941 ] 
14:33:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F5E5 to EndLba:0x3B6F665 with One's Pattern 

14:33:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C5 to EndLba:0x25101 with Constant Pattern
14:33:21: [ RdLbaNoData(0x231C5, 0x1F3C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1942 ] 
14:33:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C5 to EndLba:0x25101 with Constant Pattern 

14:33:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3996
14:33:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612ED20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E690>, <py_sfcl.PySEnhancedCmdData object at 0x0612E750>, <None>) , Command count = 1943 ] 
14:33:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:23: Host Frequency set to 25000 KHz
14:33:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E150>, 0x0, True) , Command count = 1944 ] 
14:33:23: [GO18_globalSetVolt]### Host voltage value is set.
14:33:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129150>, 0x0, False) , Command count = 1945 ] 
14:33:23: [GO18_globalSetVolt]### Host voltage value is set.
14:33:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1946 ] 
14:33:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1947 ] 
14:33:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1948 ] 
14:33:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8A0>, <py_sfcl.CommandDataDefinition object at 0x0612E4E0>) , Command count = 1949 ] 
14:33:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E900>, <py_sfcl.CommandDataDefinition object at 0x06129B40>) , Command count = 1950 ] 
14:33:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1951 ] 
14:33:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:23: Host Frequency set to 25000 KHz
14:33:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:23: ####CSD Registe 2.0 Values####
14:33:23: CSD_STRUCTURE                                 :0x1
14:33:23: Reserv1                                       :0x0
14:33:23: Time Access 1 TAAC                            :0xe
14:33:23: Time Access 2 NSAC*100                        :0x0
14:33:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:23: Card Command Classess CCC                     :0x5b5
14:33:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:23: DSR(driver stage register)  DSR_IMP           :0x0
14:33:23: Reserv2                                       :0x0
14:33:23: Device Size C_SIZE                            :0xedc8
14:33:23: Reserv3                                       :0x0
14:33:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:23: Reserv4                                       :0x0
14:33:23: Write Speed Factor R2W_FACTOR                 :0x2
14:33:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:23: FILE_FORMAT_GRP                               :0x0
14:33:23: COPY flag                                     :0x1
14:33:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:23: File_Format                                   :0x0
14:33:23: CRC                                           :0x0
14:33:23: ####CSD Registe Values####  

14:33:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:23: [GetSCRRegisterEntry] Passed
14:33:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:23: Data_Status_After Erases          : 0
14:33:23: CPRM Security Support             : No Security
14:33:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:23: Spec. Version                     : Version 3.0X
14:33:23: Extended Security Support         : Extended_Security_Not_Supported
14:33:23: Command Support                   : COMMAND_SUPPORT
14:33:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129ED0>, <py_sfcl.CommandDataDefinition object at 0x06129D20>) , Command count = 1952 ] 
14:33:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x0612E360>) , Command count = 1953 ] 
14:33:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:23: [ SetBusWidth(0x4) , Command count = 1954 ] 
14:33:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EE10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1955 ] 
14:33:23: Protected Area Size 0x28000
14:33:23: Bus Width           2
14:33:23: Secure Mode         0
14:33:23: Speed  Class        4
14:33:23: Perf Move           0
14:33:23: Au Size             9
14:33:23: Erase Size          15
14:33:23: Erase Timeout       1
14:33:23: Erase offset        1
14:33:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1956 ] 
14:33:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:23: Host Frequency set to 100000 KHz
14:33:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:23: ####CSD Registe 2.0 Values####
14:33:23: CSD_STRUCTURE                                 :0x1
14:33:24: Reserv1                                       :0x0
14:33:24: Time Access 1 TAAC                            :0xe
14:33:24: Time Access 2 NSAC*100                        :0x0
14:33:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:24: Card Command Classess CCC                     :0x5b5
14:33:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:24: DSR(driver stage register)  DSR_IMP           :0x0
14:33:24: Reserv2                                       :0x0
14:33:24: Device Size C_SIZE                            :0xedc8
14:33:24: Reserv3                                       :0x0
14:33:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:24: Reserv4                                       :0x0
14:33:24: Write Speed Factor R2W_FACTOR                 :0x2
14:33:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:24: FILE_FORMAT_GRP                               :0x0
14:33:24: COPY flag                                     :0x1
14:33:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:24: File_Format                                   :0x0
14:33:24: CRC                                           :0x0
14:33:24: ####CSD Registe Values####  

14:33:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF00>, <py_sfcl.CommandDataDefinition object at 0x0612E510>) , Command count = 1957 ] 
14:33:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB70>, <py_sfcl.CommandDataDefinition object at 0x0612E6C0>) , Command count = 1958 ] 
14:33:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EAD4 to EndLba:0x3B6EB54 with One's Pattern
14:33:24: [ WrLbaNoData(0x3B6EAD4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1959 ] 
14:33:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EAD4 to EndLba:0x3B6EB54 with One's Pattern 

14:33:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB54 to EndLba:0x3B6EBD4 with One's Pattern
14:33:24: [ WrLbaNoData(0x3B6EB54, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1960 ] 
14:33:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB54 to EndLba:0x3B6EBD4 with One's Pattern 

14:33:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C7 to EndLba:0x25101 with Constant Pattern
14:33:24: [ RdLbaNoData(0x231C7, 0x1F3A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1961 ] 
14:33:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C7 to EndLba:0x25101 with Constant Pattern 

14:33:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3995
14:33:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061321E0>, <py_sfcl.PySEnhancedCmdData object at 0x06132570>, <None>) , Command count = 1962 ] 
14:33:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:26: Host Frequency set to 25000 KHz
14:33:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EF60>, 0x0, True) , Command count = 1963 ] 
14:33:26: [GO18_globalSetVolt]### Host voltage value is set.
14:33:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E990>, 0x0, False) , Command count = 1964 ] 
14:33:26: [GO18_globalSetVolt]### Host voltage value is set.
14:33:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1965 ] 
14:33:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1966 ] 
14:33:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1967 ] 
14:33:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E930>, <py_sfcl.CommandDataDefinition object at 0x0612EA80>) , Command count = 1968 ] 
14:33:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132750>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 1969 ] 
14:33:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1970 ] 
14:33:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:27: Host Frequency set to 25000 KHz
14:33:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:27: ####CSD Registe 2.0 Values####
14:33:27: CSD_STRUCTURE                                 :0x1
14:33:27: Reserv1                                       :0x0
14:33:27: Time Access 1 TAAC                            :0xe
14:33:27: Time Access 2 NSAC*100                        :0x0
14:33:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:27: Card Command Classess CCC                     :0x5b5
14:33:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:27: DSR(driver stage register)  DSR_IMP           :0x0
14:33:27: Reserv2                                       :0x0
14:33:27: Device Size C_SIZE                            :0xedc8
14:33:27: Reserv3                                       :0x0
14:33:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:27: Reserv4                                       :0x0
14:33:27: Write Speed Factor R2W_FACTOR                 :0x2
14:33:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:27: FILE_FORMAT_GRP                               :0x0
14:33:27: COPY flag                                     :0x1
14:33:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:27: File_Format                                   :0x0
14:33:27: CRC                                           :0x0
14:33:27: ####CSD Registe Values####  

14:33:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:27: [GetSCRRegisterEntry] Passed
14:33:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:27: Data_Status_After Erases          : 0
14:33:27: CPRM Security Support             : No Security
14:33:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:27: Spec. Version                     : Version 3.0X
14:33:27: Extended Security Support         : Extended_Security_Not_Supported
14:33:27: Command Support                   : COMMAND_SUPPORT
14:33:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323F0>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 1971 ] 
14:33:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 1972 ] 
14:33:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:27: [ SetBusWidth(0x4) , Command count = 1973 ] 
14:33:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EBD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1974 ] 
14:33:27: Protected Area Size 0x28000
14:33:27: Bus Width           2
14:33:27: Secure Mode         0
14:33:27: Speed  Class        4
14:33:27: Perf Move           0
14:33:27: Au Size             9
14:33:27: Erase Size          15
14:33:27: Erase Timeout       1
14:33:27: Erase offset        1
14:33:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1975 ] 
14:33:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:27: Host Frequency set to 100000 KHz
14:33:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:27: ####CSD Registe 2.0 Values####
14:33:27: CSD_STRUCTURE                                 :0x1
14:33:27: Reserv1                                       :0x0
14:33:27: Time Access 1 TAAC                            :0xe
14:33:27: Time Access 2 NSAC*100                        :0x0
14:33:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:27: Card Command Classess CCC                     :0x5b5
14:33:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:27: DSR(driver stage register)  DSR_IMP           :0x0
14:33:27: Reserv2                                       :0x0
14:33:27: Device Size C_SIZE                            :0xedc8
14:33:27: Reserv3                                       :0x0
14:33:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:27: Reserv4                                       :0x0
14:33:27: Write Speed Factor R2W_FACTOR                 :0x2
14:33:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:27: FILE_FORMAT_GRP                               :0x0
14:33:27: COPY flag                                     :0x1
14:33:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:27: File_Format                                   :0x0
14:33:27: CRC                                           :0x0
14:33:27: ####CSD Registe Values####  

14:33:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061326F0>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 1976 ] 
14:33:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132630>, <py_sfcl.CommandDataDefinition object at 0x0612E120>) , Command count = 1977 ] 
14:33:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F1BD to EndLba:0x3B6F23D with One's Pattern
14:33:27: [ WrLbaNoData(0x3B6F1BD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1978 ] 
14:33:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F1BD to EndLba:0x3B6F23D with One's Pattern 

14:33:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F23D to EndLba:0x3B6F2BD with One's Pattern
14:33:27: [ WrLbaNoData(0x3B6F23D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1979 ] 
14:33:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F23D to EndLba:0x3B6F2BD with One's Pattern 

14:33:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C7 to EndLba:0x250FF with Constant Pattern
14:33:27: [ RdLbaNoData(0x231C7, 0x1F38, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1980 ] 
14:33:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C7 to EndLba:0x250FF with Constant Pattern 

14:33:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3994
14:33:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132D50>, <py_sfcl.PySEnhancedCmdData object at 0x061329C0>, <None>) , Command count = 1981 ] 
14:33:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:29: Host Frequency set to 25000 KHz
14:33:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E600>, 0x0, True) , Command count = 1982 ] 
14:33:30: [GO18_globalSetVolt]### Host voltage value is set.
14:33:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132F90>, 0x0, False) , Command count = 1983 ] 
14:33:30: [GO18_globalSetVolt]### Host voltage value is set.
14:33:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 1984 ] 
14:33:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1985 ] 
14:33:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 1986 ] 
14:33:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC30>, <py_sfcl.CommandDataDefinition object at 0x06132AB0>) , Command count = 1987 ] 
14:33:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 1988 ] 
14:33:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1989 ] 
14:33:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:30: Host Frequency set to 25000 KHz
14:33:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:30: ####CSD Registe 2.0 Values####
14:33:30: CSD_STRUCTURE                                 :0x1
14:33:30: Reserv1                                       :0x0
14:33:30: Time Access 1 TAAC                            :0xe
14:33:30: Time Access 2 NSAC*100                        :0x0
14:33:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:30: Card Command Classess CCC                     :0x5b5
14:33:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:30: DSR(driver stage register)  DSR_IMP           :0x0
14:33:30: Reserv2                                       :0x0
14:33:30: Device Size C_SIZE                            :0xedc8
14:33:30: Reserv3                                       :0x0
14:33:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:30: Reserv4                                       :0x0
14:33:30: Write Speed Factor R2W_FACTOR                 :0x2
14:33:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:30: FILE_FORMAT_GRP                               :0x0
14:33:30: COPY flag                                     :0x1
14:33:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:30: File_Format                                   :0x0
14:33:30: CRC                                           :0x0
14:33:30: ####CSD Registe Values####  

14:33:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:30: [GetSCRRegisterEntry] Passed
14:33:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:30: Data_Status_After Erases          : 0
14:33:30: CPRM Security Support             : No Security
14:33:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:30: Spec. Version                     : Version 3.0X
14:33:30: Extended Security Support         : Extended_Security_Not_Supported
14:33:30: Command Support                   : COMMAND_SUPPORT
14:33:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132210>, <py_sfcl.CommandDataDefinition object at 0x061328D0>) , Command count = 1990 ] 
14:33:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320C0>, <py_sfcl.CommandDataDefinition object at 0x06132990>) , Command count = 1991 ] 
14:33:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:30: [ SetBusWidth(0x4) , Command count = 1992 ] 
14:33:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 1993 ] 
14:33:30: Protected Area Size 0x28000
14:33:30: Bus Width           2
14:33:30: Secure Mode         0
14:33:30: Speed  Class        4
14:33:30: Perf Move           0
14:33:30: Au Size             9
14:33:30: Erase Size          15
14:33:30: Erase Timeout       1
14:33:30: Erase offset        1
14:33:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 1994 ] 
14:33:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:30: Host Frequency set to 100000 KHz
14:33:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:30: ####CSD Registe 2.0 Values####
14:33:30: CSD_STRUCTURE                                 :0x1
14:33:30: Reserv1                                       :0x0
14:33:30: Time Access 1 TAAC                            :0xe
14:33:30: Time Access 2 NSAC*100                        :0x0
14:33:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:30: Card Command Classess CCC                     :0x5b5
14:33:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:30: DSR(driver stage register)  DSR_IMP           :0x0
14:33:30: Reserv2                                       :0x0
14:33:30: Device Size C_SIZE                            :0xedc8
14:33:30: Reserv3                                       :0x0
14:33:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:30: Reserv4                                       :0x0
14:33:30: Write Speed Factor R2W_FACTOR                 :0x2
14:33:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:30: FILE_FORMAT_GRP                               :0x0
14:33:30: COPY flag                                     :0x1
14:33:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:31: File_Format                                   :0x0
14:33:31: CRC                                           :0x0
14:33:31: ####CSD Registe Values####  

14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061383C0>, <py_sfcl.CommandDataDefinition object at 0x061325A0>) , Command count = 1995 ] 
14:33:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x0612EBD0>) , Command count = 1996 ] 
14:33:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE80 to EndLba:0x3B6DF00 with One's Pattern
14:33:31: [ WrLbaNoData(0x3B6DE80, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1997 ] 
14:33:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE80 to EndLba:0x3B6DF00 with One's Pattern 

14:33:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DF00 to EndLba:0x3B6DF80 with One's Pattern
14:33:31: [ WrLbaNoData(0x3B6DF00, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 1998 ] 
14:33:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DF00 to EndLba:0x3B6DF80 with One's Pattern 

14:33:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C9 to EndLba:0x250FF with Constant Pattern
14:33:31: [ RdLbaNoData(0x231C9, 0x1F36, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 1999 ] 
14:33:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C9 to EndLba:0x250FF with Constant Pattern 

14:33:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3993
14:33:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132E40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132F00>, <py_sfcl.PySEnhancedCmdData object at 0x061327E0>, <None>) , Command count = 2000 ] 
14:33:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:33: Host Frequency set to 25000 KHz
14:33:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132360>, 0x0, True) , Command count = 2001 ] 
14:33:33: [GO18_globalSetVolt]### Host voltage value is set.
14:33:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132810>, 0x0, False) , Command count = 2002 ] 
14:33:33: [GO18_globalSetVolt]### Host voltage value is set.
14:33:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2003 ] 
14:33:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2004 ] 
14:33:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2005 ] 
14:33:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x0612E810>) , Command count = 2006 ] 
14:33:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x06129F30>) , Command count = 2007 ] 
14:33:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2008 ] 
14:33:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:34: Host Frequency set to 25000 KHz
14:33:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:34: ####CSD Registe 2.0 Values####
14:33:34: CSD_STRUCTURE                                 :0x1
14:33:34: Reserv1                                       :0x0
14:33:34: Time Access 1 TAAC                            :0xe
14:33:34: Time Access 2 NSAC*100                        :0x0
14:33:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:34: Card Command Classess CCC                     :0x5b5
14:33:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:34: DSR(driver stage register)  DSR_IMP           :0x0
14:33:34: Reserv2                                       :0x0
14:33:34: Device Size C_SIZE                            :0xedc8
14:33:34: Reserv3                                       :0x0
14:33:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:34: Reserv4                                       :0x0
14:33:34: Write Speed Factor R2W_FACTOR                 :0x2
14:33:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:34: FILE_FORMAT_GRP                               :0x0
14:33:34: COPY flag                                     :0x1
14:33:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:34: File_Format                                   :0x0
14:33:34: CRC                                           :0x0
14:33:34: ####CSD Registe Values####  

14:33:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:34: [GetSCRRegisterEntry] Passed
14:33:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:34: Data_Status_After Erases          : 0
14:33:34: CPRM Security Support             : No Security
14:33:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:34: Spec. Version                     : Version 3.0X
14:33:34: Extended Security Support         : Extended_Security_Not_Supported
14:33:34: Command Support                   : COMMAND_SUPPORT
14:33:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324B0>, <py_sfcl.CommandDataDefinition object at 0x06132D80>) , Command count = 2009 ] 
14:33:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E70>, <py_sfcl.CommandDataDefinition object at 0x06132690>) , Command count = 2010 ] 
14:33:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:34: [ SetBusWidth(0x4) , Command count = 2011 ] 
14:33:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2012 ] 
14:33:34: Protected Area Size 0x28000
14:33:34: Bus Width           2
14:33:34: Secure Mode         0
14:33:34: Speed  Class        4
14:33:34: Perf Move           0
14:33:34: Au Size             9
14:33:34: Erase Size          15
14:33:34: Erase Timeout       1
14:33:34: Erase offset        1
14:33:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2013 ] 
14:33:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:34: Host Frequency set to 100000 KHz
14:33:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:34: ####CSD Registe 2.0 Values####
14:33:34: CSD_STRUCTURE                                 :0x1
14:33:34: Reserv1                                       :0x0
14:33:34: Time Access 1 TAAC                            :0xe
14:33:34: Time Access 2 NSAC*100                        :0x0
14:33:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:34: Card Command Classess CCC                     :0x5b5
14:33:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:34: DSR(driver stage register)  DSR_IMP           :0x0
14:33:34: Reserv2                                       :0x0
14:33:34: Device Size C_SIZE                            :0xedc8
14:33:34: Reserv3                                       :0x0
14:33:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:34: Reserv4                                       :0x0
14:33:34: Write Speed Factor R2W_FACTOR                 :0x2
14:33:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:34: FILE_FORMAT_GRP                               :0x0
14:33:34: COPY flag                                     :0x1
14:33:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:34: File_Format                                   :0x0
14:33:34: CRC                                           :0x0
14:33:34: ####CSD Registe Values####  

14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FDB0>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 2014 ] 
14:33:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06132E10>) , Command count = 2015 ] 
14:33:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F316 to EndLba:0x3B6F396 with One's Pattern
14:33:34: [ WrLbaNoData(0x3B6F316, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2016 ] 
14:33:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F316 to EndLba:0x3B6F396 with One's Pattern 

14:33:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F396 to EndLba:0x3B6F416 with One's Pattern
14:33:34: [ WrLbaNoData(0x3B6F396, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2017 ] 
14:33:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F396 to EndLba:0x3B6F416 with One's Pattern 

14:33:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231C9 to EndLba:0x250FD with Constant Pattern
14:33:34: [ RdLbaNoData(0x231C9, 0x1F34, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2018 ] 
14:33:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231C9 to EndLba:0x250FD with Constant Pattern 

14:33:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3992
14:33:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138390>, <py_sfcl.PySEnhancedCmdData object at 0x06138570>, <None>) , Command count = 2019 ] 
14:33:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:36: Host Frequency set to 25000 KHz
14:33:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132A80>, 0x0, True) , Command count = 2020 ] 
14:33:36: [GO18_globalSetVolt]### Host voltage value is set.
14:33:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138060>, 0x0, False) , Command count = 2021 ] 
14:33:36: [GO18_globalSetVolt]### Host voltage value is set.
14:33:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2022 ] 
14:33:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2023 ] 
14:33:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2024 ] 
14:33:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138030>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 2025 ] 
14:33:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 2026 ] 
14:33:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:37: [ SetCardRCA(0x1, 0xD555) , Command count = 2027 ] 
14:33:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:37: Host Frequency set to 25000 KHz
14:33:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:37: ####CSD Registe 2.0 Values####
14:33:37: CSD_STRUCTURE                                 :0x1
14:33:37: Reserv1                                       :0x0
14:33:37: Time Access 1 TAAC                            :0xe
14:33:37: Time Access 2 NSAC*100                        :0x0
14:33:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:37: Card Command Classess CCC                     :0x5b5
14:33:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:37: DSR(driver stage register)  DSR_IMP           :0x0
14:33:37: Reserv2                                       :0x0
14:33:37: Device Size C_SIZE                            :0xedc8
14:33:37: Reserv3                                       :0x0
14:33:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:37: Reserv4                                       :0x0
14:33:37: Write Speed Factor R2W_FACTOR                 :0x2
14:33:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:37: FILE_FORMAT_GRP                               :0x0
14:33:37: COPY flag                                     :0x1
14:33:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:37: File_Format                                   :0x0
14:33:37: CRC                                           :0x0
14:33:37: ####CSD Registe Values####  

14:33:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:37: [GetSCRRegisterEntry] Passed
14:33:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:37: Data_Status_After Erases          : 0
14:33:37: CPRM Security Support             : No Security
14:33:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:37: Spec. Version                     : Version 3.0X
14:33:37: Extended Security Support         : Extended_Security_Not_Supported
14:33:37: Command Support                   : COMMAND_SUPPORT
14:33:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BD0>, <py_sfcl.CommandDataDefinition object at 0x06132CF0>) , Command count = 2028 ] 
14:33:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 2029 ] 
14:33:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:37: [ SetBusWidth(0x4) , Command count = 2030 ] 
14:33:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061387B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2031 ] 
14:33:37: Protected Area Size 0x28000
14:33:37: Bus Width           2
14:33:37: Secure Mode         0
14:33:37: Speed  Class        4
14:33:37: Perf Move           0
14:33:37: Au Size             9
14:33:37: Erase Size          15
14:33:37: Erase Timeout       1
14:33:37: Erase offset        1
14:33:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2032 ] 
14:33:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:37: Host Frequency set to 100000 KHz
14:33:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:37: ####CSD Registe 2.0 Values####
14:33:37: CSD_STRUCTURE                                 :0x1
14:33:37: Reserv1                                       :0x0
14:33:37: Time Access 1 TAAC                            :0xe
14:33:37: Time Access 2 NSAC*100                        :0x0
14:33:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:37: Card Command Classess CCC                     :0x5b5
14:33:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:37: DSR(driver stage register)  DSR_IMP           :0x0
14:33:37: Reserv2                                       :0x0
14:33:37: Device Size C_SIZE                            :0xedc8
14:33:37: Reserv3                                       :0x0
14:33:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:37: Reserv4                                       :0x0
14:33:37: Write Speed Factor R2W_FACTOR                 :0x2
14:33:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:37: FILE_FORMAT_GRP                               :0x0
14:33:37: COPY flag                                     :0x1
14:33:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:38: File_Format                                   :0x0
14:33:38: CRC                                           :0x0
14:33:38: ####CSD Registe Values####  

14:33:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F180>, <py_sfcl.CommandDataDefinition object at 0x06138720>) , Command count = 2033 ] 
14:33:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x06138C90>) , Command count = 2034 ] 
14:33:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EFC5 to EndLba:0x3B6F045 with One's Pattern
14:33:38: [ WrLbaNoData(0x3B6EFC5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2035 ] 
14:33:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EFC5 to EndLba:0x3B6F045 with One's Pattern 

14:33:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F045 to EndLba:0x3B6F0C5 with One's Pattern
14:33:38: [ WrLbaNoData(0x3B6F045, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2036 ] 
14:33:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F045 to EndLba:0x3B6F0C5 with One's Pattern 

14:33:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231CB to EndLba:0x250FD with Constant Pattern
14:33:38: [ RdLbaNoData(0x231CB, 0x1F32, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2037 ] 
14:33:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231CB to EndLba:0x250FD with Constant Pattern 

14:33:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3991
14:33:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FE10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F270>, <py_sfcl.PySEnhancedCmdData object at 0x061389F0>, <None>) , Command count = 2038 ] 
14:33:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:40: Host Frequency set to 25000 KHz
14:33:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x061381E0>, 0x0, True) , Command count = 2039 ] 
14:33:40: [GO18_globalSetVolt]### Host voltage value is set.
14:33:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138690>, 0x0, False) , Command count = 2040 ] 
14:33:40: [GO18_globalSetVolt]### Host voltage value is set.
14:33:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2041 ] 
14:33:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2042 ] 
14:33:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2043 ] 
14:33:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A50>, <py_sfcl.CommandDataDefinition object at 0x0613F780>) , Command count = 2044 ] 
14:33:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A20>, <py_sfcl.CommandDataDefinition object at 0x061386F0>) , Command count = 2045 ] 
14:33:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2046 ] 
14:33:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:40: Host Frequency set to 25000 KHz
14:33:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:40: ####CSD Registe 2.0 Values####
14:33:40: CSD_STRUCTURE                                 :0x1
14:33:40: Reserv1                                       :0x0
14:33:40: Time Access 1 TAAC                            :0xe
14:33:40: Time Access 2 NSAC*100                        :0x0
14:33:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:40: Card Command Classess CCC                     :0x5b5
14:33:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:40: DSR(driver stage register)  DSR_IMP           :0x0
14:33:40: Reserv2                                       :0x0
14:33:40: Device Size C_SIZE                            :0xedc8
14:33:40: Reserv3                                       :0x0
14:33:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:40: Reserv4                                       :0x0
14:33:40: Write Speed Factor R2W_FACTOR                 :0x2
14:33:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:40: FILE_FORMAT_GRP                               :0x0
14:33:40: COPY flag                                     :0x1
14:33:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:40: File_Format                                   :0x0
14:33:40: CRC                                           :0x0
14:33:40: ####CSD Registe Values####  

14:33:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:40: [GetSCRRegisterEntry] Passed
14:33:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:40: Data_Status_After Erases          : 0
14:33:40: CPRM Security Support             : No Security
14:33:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:40: Spec. Version                     : Version 3.0X
14:33:40: Extended Security Support         : Extended_Security_Not_Supported
14:33:40: Command Support                   : COMMAND_SUPPORT
14:33:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1E0>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 2047 ] 
14:33:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138510>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 2048 ] 
14:33:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:40: [ SetBusWidth(0x4) , Command count = 2049 ] 
14:33:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2050 ] 
14:33:40: Protected Area Size 0x28000
14:33:40: Bus Width           2
14:33:40: Secure Mode         0
14:33:40: Speed  Class        4
14:33:40: Perf Move           0
14:33:40: Au Size             9
14:33:40: Erase Size          15
14:33:40: Erase Timeout       1
14:33:40: Erase offset        1
14:33:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2051 ] 
14:33:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:40: Host Frequency set to 100000 KHz
14:33:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:41: ####CSD Registe 2.0 Values####
14:33:41: CSD_STRUCTURE                                 :0x1
14:33:41: Reserv1                                       :0x0
14:33:41: Time Access 1 TAAC                            :0xe
14:33:41: Time Access 2 NSAC*100                        :0x0
14:33:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:41: Card Command Classess CCC                     :0x5b5
14:33:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:41: DSR(driver stage register)  DSR_IMP           :0x0
14:33:41: Reserv2                                       :0x0
14:33:41: Device Size C_SIZE                            :0xedc8
14:33:41: Reserv3                                       :0x0
14:33:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:41: Reserv4                                       :0x0
14:33:41: Write Speed Factor R2W_FACTOR                 :0x2
14:33:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:41: FILE_FORMAT_GRP                               :0x0
14:33:41: COPY flag                                     :0x1
14:33:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:41: File_Format                                   :0x0
14:33:41: CRC                                           :0x0
14:33:41: ####CSD Registe Values####  

14:33:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F120>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 2052 ] 
14:33:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B70>, <py_sfcl.CommandDataDefinition object at 0x061387B0>) , Command count = 2053 ] 
14:33:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FBC9 to EndLba:0x3B6FC49 with One's Pattern
14:33:41: [ WrLbaNoData(0x3B6FBC9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2054 ] 
14:33:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FBC9 to EndLba:0x3B6FC49 with One's Pattern 

14:33:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FC49 to EndLba:0x3B6FCC9 with One's Pattern
14:33:41: [ WrLbaNoData(0x3B6FC49, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2055 ] 
14:33:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FC49 to EndLba:0x3B6FCC9 with One's Pattern 

14:33:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231CB to EndLba:0x250FB with Constant Pattern
14:33:41: [ RdLbaNoData(0x231CB, 0x1F30, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2056 ] 
14:33:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231CB to EndLba:0x250FB with Constant Pattern 

14:33:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3990
14:33:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F030>, <py_sfcl.PySEnhancedCmdData object at 0x0613F450>, <None>) , Command count = 2057 ] 
14:33:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:43: Host Frequency set to 25000 KHz
14:33:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132C60>, 0x0, True) , Command count = 2058 ] 
14:33:43: [GO18_globalSetVolt]### Host voltage value is set.
14:33:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138DB0>, 0x0, False) , Command count = 2059 ] 
14:33:43: [GO18_globalSetVolt]### Host voltage value is set.
14:33:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2060 ] 
14:33:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2061 ] 
14:33:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2062 ] 
14:33:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x0612EED0>) , Command count = 2063 ] 
14:33:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x061388A0>) , Command count = 2064 ] 
14:33:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:43: [ SetCardRCA(0x1, 0xD555) , Command count = 2065 ] 
14:33:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:44: Host Frequency set to 25000 KHz
14:33:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:44: ####CSD Registe 2.0 Values####
14:33:44: CSD_STRUCTURE                                 :0x1
14:33:44: Reserv1                                       :0x0
14:33:44: Time Access 1 TAAC                            :0xe
14:33:44: Time Access 2 NSAC*100                        :0x0
14:33:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:44: Card Command Classess CCC                     :0x5b5
14:33:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:44: DSR(driver stage register)  DSR_IMP           :0x0
14:33:44: Reserv2                                       :0x0
14:33:44: Device Size C_SIZE                            :0xedc8
14:33:44: Reserv3                                       :0x0
14:33:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:44: Reserv4                                       :0x0
14:33:44: Write Speed Factor R2W_FACTOR                 :0x2
14:33:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:44: FILE_FORMAT_GRP                               :0x0
14:33:44: COPY flag                                     :0x1
14:33:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:44: File_Format                                   :0x0
14:33:44: CRC                                           :0x0
14:33:44: ####CSD Registe Values####  

14:33:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:44: [GetSCRRegisterEntry] Passed
14:33:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:44: Data_Status_After Erases          : 0
14:33:44: CPRM Security Support             : No Security
14:33:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:44: Spec. Version                     : Version 3.0X
14:33:44: Extended Security Support         : Extended_Security_Not_Supported
14:33:44: Command Support                   : COMMAND_SUPPORT
14:33:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A50>, <py_sfcl.CommandDataDefinition object at 0x06138E10>) , Command count = 2066 ] 
14:33:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C30>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 2067 ] 
14:33:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:44: [ SetBusWidth(0x4) , Command count = 2068 ] 
14:33:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2069 ] 
14:33:44: Protected Area Size 0x28000
14:33:44: Bus Width           2
14:33:44: Secure Mode         0
14:33:44: Speed  Class        4
14:33:44: Perf Move           0
14:33:44: Au Size             9
14:33:44: Erase Size          15
14:33:44: Erase Timeout       1
14:33:44: Erase offset        1
14:33:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2070 ] 
14:33:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:44: Host Frequency set to 100000 KHz
14:33:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:44: ####CSD Registe 2.0 Values####
14:33:44: CSD_STRUCTURE                                 :0x1
14:33:44: Reserv1                                       :0x0
14:33:44: Time Access 1 TAAC                            :0xe
14:33:44: Time Access 2 NSAC*100                        :0x0
14:33:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:44: Card Command Classess CCC                     :0x5b5
14:33:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:44: DSR(driver stage register)  DSR_IMP           :0x0
14:33:44: Reserv2                                       :0x0
14:33:44: Device Size C_SIZE                            :0xedc8
14:33:44: Reserv3                                       :0x0
14:33:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:44: Reserv4                                       :0x0
14:33:44: Write Speed Factor R2W_FACTOR                 :0x2
14:33:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:44: FILE_FORMAT_GRP                               :0x0
14:33:44: COPY flag                                     :0x1
14:33:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:44: File_Format                                   :0x0
14:33:44: CRC                                           :0x0
14:33:44: ####CSD Registe Values####  

14:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529EE40>, <py_sfcl.CommandDataDefinition object at 0x052C1C30>) , Command count = 2071 ] 
14:33:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x0613FAE0>) , Command count = 2072 ] 
14:33:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71AA2 to EndLba:0x3B71B22 with One's Pattern
14:33:44: [ WrLbaNoData(0x3B71AA2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2073 ] 
14:33:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71AA2 to EndLba:0x3B71B22 with One's Pattern 

14:33:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71B22 to EndLba:0x3B71BA2 with One's Pattern
14:33:44: [ WrLbaNoData(0x3B71B22, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2074 ] 
14:33:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71B22 to EndLba:0x3B71BA2 with One's Pattern 

14:33:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231CD to EndLba:0x250FB with Constant Pattern
14:33:44: [ RdLbaNoData(0x231CD, 0x1F2E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2075 ] 
14:33:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231CD to EndLba:0x250FB with Constant Pattern 

14:33:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3989
14:33:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1C90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F6F0>, <None>) , Command count = 2076 ] 
14:33:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:47: Host Frequency set to 25000 KHz
14:33:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138C00>, 0x0, True) , Command count = 2077 ] 
14:33:47: [GO18_globalSetVolt]### Host voltage value is set.
14:33:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138D80>, 0x0, False) , Command count = 2078 ] 
14:33:47: [GO18_globalSetVolt]### Host voltage value is set.
14:33:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2079 ] 
14:33:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2080 ] 
14:33:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2081 ] 
14:33:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F60>, <py_sfcl.CommandDataDefinition object at 0x0613F210>) , Command count = 2082 ] 
14:33:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x0613F1B0>) , Command count = 2083 ] 
14:33:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:47: [ SetCardRCA(0x1, 0xD555) , Command count = 2084 ] 
14:33:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:47: Host Frequency set to 25000 KHz
14:33:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:47: ####CSD Registe 2.0 Values####
14:33:47: CSD_STRUCTURE                                 :0x1
14:33:47: Reserv1                                       :0x0
14:33:47: Time Access 1 TAAC                            :0xe
14:33:47: Time Access 2 NSAC*100                        :0x0
14:33:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:47: Card Command Classess CCC                     :0x5b5
14:33:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:47: DSR(driver stage register)  DSR_IMP           :0x0
14:33:47: Reserv2                                       :0x0
14:33:47: Device Size C_SIZE                            :0xedc8
14:33:47: Reserv3                                       :0x0
14:33:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:47: Reserv4                                       :0x0
14:33:47: Write Speed Factor R2W_FACTOR                 :0x2
14:33:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:47: FILE_FORMAT_GRP                               :0x0
14:33:47: COPY flag                                     :0x1
14:33:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:47: File_Format                                   :0x0
14:33:47: CRC                                           :0x0
14:33:47: ####CSD Registe Values####  

14:33:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:47: [GetSCRRegisterEntry] Passed
14:33:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:47: Data_Status_After Erases          : 0
14:33:47: CPRM Security Support             : No Security
14:33:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:47: Spec. Version                     : Version 3.0X
14:33:47: Extended Security Support         : Extended_Security_Not_Supported
14:33:47: Command Support                   : COMMAND_SUPPORT
14:33:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05184030>, <py_sfcl.CommandDataDefinition object at 0x06145210>) , Command count = 2085 ] 
14:33:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x0611CC60>) , Command count = 2086 ] 
14:33:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:47: [ SetBusWidth(0x4) , Command count = 2087 ] 
14:33:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2088 ] 
14:33:47: Protected Area Size 0x28000
14:33:47: Bus Width           2
14:33:47: Secure Mode         0
14:33:47: Speed  Class        4
14:33:47: Perf Move           0
14:33:47: Au Size             9
14:33:47: Erase Size          15
14:33:47: Erase Timeout       1
14:33:47: Erase offset        1
14:33:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2089 ] 
14:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:47: Host Frequency set to 100000 KHz
14:33:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:47: ####CSD Registe 2.0 Values####
14:33:47: CSD_STRUCTURE                                 :0x1
14:33:47: Reserv1                                       :0x0
14:33:47: Time Access 1 TAAC                            :0xe
14:33:47: Time Access 2 NSAC*100                        :0x0
14:33:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:47: Card Command Classess CCC                     :0x5b5
14:33:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:47: DSR(driver stage register)  DSR_IMP           :0x0
14:33:47: Reserv2                                       :0x0
14:33:47: Device Size C_SIZE                            :0xedc8
14:33:47: Reserv3                                       :0x0
14:33:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:47: Reserv4                                       :0x0
14:33:47: Write Speed Factor R2W_FACTOR                 :0x2
14:33:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:48: FILE_FORMAT_GRP                               :0x0
14:33:48: COPY flag                                     :0x1
14:33:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:48: File_Format                                   :0x0
14:33:48: CRC                                           :0x0
14:33:48: ####CSD Registe Values####  

14:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E37B0>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 2090 ] 
14:33:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x0613F480>) , Command count = 2091 ] 
14:33:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B34 to EndLba:0x3B70BB4 with One's Pattern
14:33:48: [ WrLbaNoData(0x3B70B34, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2092 ] 
14:33:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B34 to EndLba:0x3B70BB4 with One's Pattern 

14:33:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70BB4 to EndLba:0x3B70C34 with One's Pattern
14:33:48: [ WrLbaNoData(0x3B70BB4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2093 ] 
14:33:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70BB4 to EndLba:0x3B70C34 with One's Pattern 

14:33:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231CD to EndLba:0x250F9 with Constant Pattern
14:33:48: [ RdLbaNoData(0x231CD, 0x1F2C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2094 ] 
14:33:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231CD to EndLba:0x250F9 with Constant Pattern 

14:33:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3988
14:33:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3690>, <py_sfcl.PySEnhancedCmdData object at 0x060E39C0>, <None>) , Command count = 2095 ] 
14:33:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:50: Host Frequency set to 25000 KHz
14:33:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFCF0>, 0x0, True) , Command count = 2096 ] 
14:33:50: [GO18_globalSetVolt]### Host voltage value is set.
14:33:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1CC0>, 0x0, False) , Command count = 2097 ] 
14:33:50: [GO18_globalSetVolt]### Host voltage value is set.
14:33:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2098 ] 
14:33:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2099 ] 
14:33:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2100 ] 
14:33:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3AE0>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 2101 ] 
14:33:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB40>, <py_sfcl.CommandDataDefinition object at 0x0613F480>) , Command count = 2102 ] 
14:33:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:50: [ SetCardRCA(0x1, 0xD555) , Command count = 2103 ] 
14:33:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:51: Host Frequency set to 25000 KHz
14:33:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:51: ####CSD Registe 2.0 Values####
14:33:51: CSD_STRUCTURE                                 :0x1
14:33:51: Reserv1                                       :0x0
14:33:51: Time Access 1 TAAC                            :0xe
14:33:51: Time Access 2 NSAC*100                        :0x0
14:33:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:51: Card Command Classess CCC                     :0x5b5
14:33:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:51: DSR(driver stage register)  DSR_IMP           :0x0
14:33:51: Reserv2                                       :0x0
14:33:51: Device Size C_SIZE                            :0xedc8
14:33:51: Reserv3                                       :0x0
14:33:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:51: Reserv4                                       :0x0
14:33:51: Write Speed Factor R2W_FACTOR                 :0x2
14:33:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:51: FILE_FORMAT_GRP                               :0x0
14:33:51: COPY flag                                     :0x1
14:33:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:51: File_Format                                   :0x0
14:33:51: CRC                                           :0x0
14:33:51: ####CSD Registe Values####  

14:33:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:51: [GetSCRRegisterEntry] Passed
14:33:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:51: Data_Status_After Erases          : 0
14:33:51: CPRM Security Support             : No Security
14:33:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:51: Spec. Version                     : Version 3.0X
14:33:51: Extended Security Support         : Extended_Security_Not_Supported
14:33:51: Command Support                   : COMMAND_SUPPORT
14:33:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBFC0>, <py_sfcl.CommandDataDefinition object at 0x0613FB10>) , Command count = 2104 ] 
14:33:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA20>, <py_sfcl.CommandDataDefinition object at 0x0613F840>) , Command count = 2105 ] 
14:33:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:51: [ SetBusWidth(0x4) , Command count = 2106 ] 
14:33:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C1B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2107 ] 
14:33:51: Protected Area Size 0x28000
14:33:51: Bus Width           2
14:33:51: Secure Mode         0
14:33:51: Speed  Class        4
14:33:51: Perf Move           0
14:33:51: Au Size             9
14:33:51: Erase Size          15
14:33:51: Erase Timeout       1
14:33:51: Erase offset        1
14:33:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2108 ] 
14:33:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:51: Host Frequency set to 100000 KHz
14:33:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:51: ####CSD Registe 2.0 Values####
14:33:51: CSD_STRUCTURE                                 :0x1
14:33:51: Reserv1                                       :0x0
14:33:51: Time Access 1 TAAC                            :0xe
14:33:51: Time Access 2 NSAC*100                        :0x0
14:33:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:51: Card Command Classess CCC                     :0x5b5
14:33:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:51: DSR(driver stage register)  DSR_IMP           :0x0
14:33:51: Reserv2                                       :0x0
14:33:51: Device Size C_SIZE                            :0xedc8
14:33:51: Reserv3                                       :0x0
14:33:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:51: Reserv4                                       :0x0
14:33:51: Write Speed Factor R2W_FACTOR                 :0x2
14:33:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:51: FILE_FORMAT_GRP                               :0x0
14:33:51: COPY flag                                     :0x1
14:33:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:51: File_Format                                   :0x0
14:33:51: CRC                                           :0x0
14:33:51: ####CSD Registe Values####  

14:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C240>, <py_sfcl.CommandDataDefinition object at 0x0606F660>) , Command count = 2109 ] 
14:33:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C3F0>, <py_sfcl.CommandDataDefinition object at 0x060E3A50>) , Command count = 2110 ] 
14:33:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71BE9 to EndLba:0x3B71C69 with One's Pattern
14:33:51: [ WrLbaNoData(0x3B71BE9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2111 ] 
14:33:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71BE9 to EndLba:0x3B71C69 with One's Pattern 

14:33:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71C69 to EndLba:0x3B71CE9 with One's Pattern
14:33:51: [ WrLbaNoData(0x3B71C69, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2112 ] 
14:33:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71C69 to EndLba:0x3B71CE9 with One's Pattern 

14:33:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231CF to EndLba:0x250F9 with Constant Pattern
14:33:51: [ RdLbaNoData(0x231CF, 0x1F2A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2113 ] 
14:33:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231CF to EndLba:0x250F9 with Constant Pattern 

14:33:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3987
14:33:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C600>, <py_sfcl.PySEnhancedCmdData object at 0x0611C900>, <None>) , Command count = 2114 ] 
14:33:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:54: Host Frequency set to 25000 KHz
14:33:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1F90>, 0x0, True) , Command count = 2115 ] 
14:33:54: [GO18_globalSetVolt]### Host voltage value is set.
14:33:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F540>, 0x0, False) , Command count = 2116 ] 
14:33:54: [GO18_globalSetVolt]### Host voltage value is set.
14:33:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2117 ] 
14:33:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2118 ] 
14:33:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2119 ] 
14:33:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF00>, <py_sfcl.CommandDataDefinition object at 0x0611CC00>) , Command count = 2120 ] 
14:33:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129990>, <py_sfcl.CommandDataDefinition object at 0x060E38A0>) , Command count = 2121 ] 
14:33:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2122 ] 
14:33:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:54: Host Frequency set to 25000 KHz
14:33:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:54: ####CSD Registe 2.0 Values####
14:33:54: CSD_STRUCTURE                                 :0x1
14:33:54: Reserv1                                       :0x0
14:33:54: Time Access 1 TAAC                            :0xe
14:33:54: Time Access 2 NSAC*100                        :0x0
14:33:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:54: Card Command Classess CCC                     :0x5b5
14:33:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:54: DSR(driver stage register)  DSR_IMP           :0x0
14:33:54: Reserv2                                       :0x0
14:33:54: Device Size C_SIZE                            :0xedc8
14:33:54: Reserv3                                       :0x0
14:33:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:54: Reserv4                                       :0x0
14:33:54: Write Speed Factor R2W_FACTOR                 :0x2
14:33:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:54: FILE_FORMAT_GRP                               :0x0
14:33:54: COPY flag                                     :0x1
14:33:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:54: File_Format                                   :0x0
14:33:54: CRC                                           :0x0
14:33:54: ####CSD Registe Values####  

14:33:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:54: [GetSCRRegisterEntry] Passed
14:33:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:54: Data_Status_After Erases          : 0
14:33:54: CPRM Security Support             : No Security
14:33:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:54: Spec. Version                     : Version 3.0X
14:33:54: Extended Security Support         : Extended_Security_Not_Supported
14:33:54: Command Support                   : COMMAND_SUPPORT
14:33:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D20>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 2123 ] 
14:33:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 2124 ] 
14:33:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:54: [ SetBusWidth(0x4) , Command count = 2125 ] 
14:33:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CCC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2126 ] 
14:33:54: Protected Area Size 0x28000
14:33:54: Bus Width           2
14:33:54: Secure Mode         0
14:33:54: Speed  Class        4
14:33:54: Perf Move           0
14:33:54: Au Size             9
14:33:54: Erase Size          15
14:33:54: Erase Timeout       1
14:33:54: Erase offset        1
14:33:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2127 ] 
14:33:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:54: Host Frequency set to 100000 KHz
14:33:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:54: ####CSD Registe 2.0 Values####
14:33:54: CSD_STRUCTURE                                 :0x1
14:33:54: Reserv1                                       :0x0
14:33:54: Time Access 1 TAAC                            :0xe
14:33:54: Time Access 2 NSAC*100                        :0x0
14:33:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:54: Card Command Classess CCC                     :0x5b5
14:33:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:54: DSR(driver stage register)  DSR_IMP           :0x0
14:33:54: Reserv2                                       :0x0
14:33:54: Device Size C_SIZE                            :0xedc8
14:33:54: Reserv3                                       :0x0
14:33:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:55: Reserv4                                       :0x0
14:33:55: Write Speed Factor R2W_FACTOR                 :0x2
14:33:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:55: FILE_FORMAT_GRP                               :0x0
14:33:55: COPY flag                                     :0x1
14:33:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:55: File_Format                                   :0x0
14:33:55: CRC                                           :0x0
14:33:55: ####CSD Registe Values####  

14:33:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CDE0>, <py_sfcl.CommandDataDefinition object at 0x0611CC30>) , Command count = 2128 ] 
14:33:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAE0>, <py_sfcl.CommandDataDefinition object at 0x0613F7E0>) , Command count = 2129 ] 
14:33:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7057C to EndLba:0x3B705FC with One's Pattern
14:33:55: [ WrLbaNoData(0x3B7057C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2130 ] 
14:33:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7057C to EndLba:0x3B705FC with One's Pattern 

14:33:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B705FC to EndLba:0x3B7067C with One's Pattern
14:33:55: [ WrLbaNoData(0x3B705FC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2131 ] 
14:33:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B705FC to EndLba:0x3B7067C with One's Pattern 

14:33:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231CF to EndLba:0x250F7 with Constant Pattern
14:33:55: [ RdLbaNoData(0x231CF, 0x1F28, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2132 ] 
14:33:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231CF to EndLba:0x250F7 with Constant Pattern 

14:33:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3986
14:33:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C120>, <py_sfcl.PySEnhancedCmdData object at 0x0611C0C0>, <None>) , Command count = 2133 ] 
14:33:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:33:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:57: Host Frequency set to 25000 KHz
14:33:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:33:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:33:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F5A0>, 0x0, True) , Command count = 2134 ] 
14:33:57: [GO18_globalSetVolt]### Host voltage value is set.
14:33:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:33:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3840>, 0x0, False) , Command count = 2135 ] 
14:33:57: [GO18_globalSetVolt]### Host voltage value is set.
14:33:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2136 ] 
14:33:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:33:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2137 ] 
14:33:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:33:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:33:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:33:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:33:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:33:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2138 ] 
14:33:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:33:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129060>, <py_sfcl.CommandDataDefinition object at 0x0611C7E0>) , Command count = 2139 ] 
14:33:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x0611CE10>) , Command count = 2140 ] 
14:33:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:33:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2141 ] 
14:33:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:33:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:33:57: Host Frequency set to 25000 KHz
14:33:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:33:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:57: ####CSD Registe 2.0 Values####
14:33:57: CSD_STRUCTURE                                 :0x1
14:33:57: Reserv1                                       :0x0
14:33:57: Time Access 1 TAAC                            :0xe
14:33:57: Time Access 2 NSAC*100                        :0x0
14:33:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:33:57: Card Command Classess CCC                     :0x5b5
14:33:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:57: DSR(driver stage register)  DSR_IMP           :0x0
14:33:57: Reserv2                                       :0x0
14:33:57: Device Size C_SIZE                            :0xedc8
14:33:57: Reserv3                                       :0x0
14:33:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:57: Reserv4                                       :0x0
14:33:57: Write Speed Factor R2W_FACTOR                 :0x2
14:33:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:57: FILE_FORMAT_GRP                               :0x0
14:33:57: COPY flag                                     :0x1
14:33:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:57: File_Format                                   :0x0
14:33:57: CRC                                           :0x0
14:33:57: ####CSD Registe Values####  

14:33:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:33:57: [GetSCRRegisterEntry] Passed
14:33:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:33:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:33:57: Data_Status_After Erases          : 0
14:33:57: CPRM Security Support             : No Security
14:33:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:33:57: Spec. Version                     : Version 3.0X
14:33:57: Extended Security Support         : Extended_Security_Not_Supported
14:33:57: Command Support                   : COMMAND_SUPPORT
14:33:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A20>, <py_sfcl.CommandDataDefinition object at 0x0611C990>) , Command count = 2142 ] 
14:33:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:33:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C090>, <py_sfcl.CommandDataDefinition object at 0x0611C4B0>) , Command count = 2143 ] 
14:33:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:33:57: [ SetBusWidth(0x4) , Command count = 2144 ] 
14:33:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:33:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2145 ] 
14:33:57: Protected Area Size 0x28000
14:33:57: Bus Width           2
14:33:57: Secure Mode         0
14:33:57: Speed  Class        4
14:33:57: Perf Move           0
14:33:57: Au Size             9
14:33:57: Erase Size          15
14:33:57: Erase Timeout       1
14:33:57: Erase offset        1
14:33:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:33:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:33:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:33:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2146 ] 
14:33:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:33:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:33:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:33:57: Host Frequency set to 100000 KHz
14:33:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:33:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:33:57: ####CSD Registe 2.0 Values####
14:33:57: CSD_STRUCTURE                                 :0x1
14:33:58: Reserv1                                       :0x0
14:33:58: Time Access 1 TAAC                            :0xe
14:33:58: Time Access 2 NSAC*100                        :0x0
14:33:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:33:58: Card Command Classess CCC                     :0x5b5
14:33:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:33:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:33:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:33:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:33:58: DSR(driver stage register)  DSR_IMP           :0x0
14:33:58: Reserv2                                       :0x0
14:33:58: Device Size C_SIZE                            :0xedc8
14:33:58: Reserv3                                       :0x0
14:33:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:33:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:33:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:33:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:33:58: Reserv4                                       :0x0
14:33:58: Write Speed Factor R2W_FACTOR                 :0x2
14:33:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:33:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:33:58: FILE_FORMAT_GRP                               :0x0
14:33:58: COPY flag                                     :0x1
14:33:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:33:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:33:58: File_Format                                   :0x0
14:33:58: CRC                                           :0x0
14:33:58: ####CSD Registe Values####  

14:33:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x06129BA0>) , Command count = 2147 ] 
14:33:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:33:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129750>, <py_sfcl.CommandDataDefinition object at 0x06129240>) , Command count = 2148 ] 
14:33:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:33:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:33:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:33:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B710A9 to EndLba:0x3B71129 with One's Pattern
14:33:58: [ WrLbaNoData(0x3B710A9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2149 ] 
14:33:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B710A9 to EndLba:0x3B71129 with One's Pattern 

14:33:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71129 to EndLba:0x3B711A9 with One's Pattern
14:33:58: [ WrLbaNoData(0x3B71129, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2150 ] 
14:33:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71129 to EndLba:0x3B711A9 with One's Pattern 

14:33:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:33:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D1 to EndLba:0x250F7 with Constant Pattern
14:33:58: [ RdLbaNoData(0x231D1, 0x1F26, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2151 ] 
14:33:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D1 to EndLba:0x250F7 with Constant Pattern 

14:33:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3985
14:33:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:33:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129FC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129D80>, <py_sfcl.PySEnhancedCmdData object at 0x06129D50>, <None>) , Command count = 2152 ] 
14:33:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:33:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:00: Host Frequency set to 25000 KHz
14:34:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3930>, 0x0, True) , Command count = 2153 ] 
14:34:00: [GO18_globalSetVolt]### Host voltage value is set.
14:34:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129180>, 0x0, False) , Command count = 2154 ] 
14:34:00: [GO18_globalSetVolt]### Host voltage value is set.
14:34:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2155 ] 
14:34:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2156 ] 
14:34:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2157 ] 
14:34:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129390>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 2158 ] 
14:34:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129660>, <py_sfcl.CommandDataDefinition object at 0x0611C7B0>) , Command count = 2159 ] 
14:34:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:00: [ SetCardRCA(0x1, 0xD555) , Command count = 2160 ] 
14:34:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:01: Host Frequency set to 25000 KHz
14:34:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:01: ####CSD Registe 2.0 Values####
14:34:01: CSD_STRUCTURE                                 :0x1
14:34:01: Reserv1                                       :0x0
14:34:01: Time Access 1 TAAC                            :0xe
14:34:01: Time Access 2 NSAC*100                        :0x0
14:34:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:01: Card Command Classess CCC                     :0x5b5
14:34:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:01: DSR(driver stage register)  DSR_IMP           :0x0
14:34:01: Reserv2                                       :0x0
14:34:01: Device Size C_SIZE                            :0xedc8
14:34:01: Reserv3                                       :0x0
14:34:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:01: Reserv4                                       :0x0
14:34:01: Write Speed Factor R2W_FACTOR                 :0x2
14:34:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:01: FILE_FORMAT_GRP                               :0x0
14:34:01: COPY flag                                     :0x1
14:34:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:01: File_Format                                   :0x0
14:34:01: CRC                                           :0x0
14:34:01: ####CSD Registe Values####  

14:34:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:01: [GetSCRRegisterEntry] Passed
14:34:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:01: Data_Status_After Erases          : 0
14:34:01: CPRM Security Support             : No Security
14:34:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:01: Spec. Version                     : Version 3.0X
14:34:01: Extended Security Support         : Extended_Security_Not_Supported
14:34:01: Command Support                   : COMMAND_SUPPORT
14:34:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCC0>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 2161 ] 
14:34:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F00>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 2162 ] 
14:34:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:01: [ SetBusWidth(0x4) , Command count = 2163 ] 
14:34:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2164 ] 
14:34:01: Protected Area Size 0x28000
14:34:01: Bus Width           2
14:34:01: Secure Mode         0
14:34:01: Speed  Class        4
14:34:01: Perf Move           0
14:34:01: Au Size             9
14:34:01: Erase Size          15
14:34:01: Erase Timeout       1
14:34:01: Erase offset        1
14:34:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2165 ] 
14:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:01: Host Frequency set to 100000 KHz
14:34:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:01: ####CSD Registe 2.0 Values####
14:34:01: CSD_STRUCTURE                                 :0x1
14:34:01: Reserv1                                       :0x0
14:34:01: Time Access 1 TAAC                            :0xe
14:34:01: Time Access 2 NSAC*100                        :0x0
14:34:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:01: Card Command Classess CCC                     :0x5b5
14:34:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:01: DSR(driver stage register)  DSR_IMP           :0x0
14:34:01: Reserv2                                       :0x0
14:34:01: Device Size C_SIZE                            :0xedc8
14:34:01: Reserv3                                       :0x0
14:34:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:01: Reserv4                                       :0x0
14:34:01: Write Speed Factor R2W_FACTOR                 :0x2
14:34:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:01: FILE_FORMAT_GRP                               :0x0
14:34:01: COPY flag                                     :0x1
14:34:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:01: File_Format                                   :0x0
14:34:01: CRC                                           :0x0
14:34:01: ####CSD Registe Values####  

14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F930>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 2166 ] 
14:34:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 2167 ] 
14:34:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FCA6 to EndLba:0x3B6FD26 with One's Pattern
14:34:01: [ WrLbaNoData(0x3B6FCA6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2168 ] 
14:34:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FCA6 to EndLba:0x3B6FD26 with One's Pattern 

14:34:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FD26 to EndLba:0x3B6FDA6 with One's Pattern
14:34:01: [ WrLbaNoData(0x3B6FD26, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2169 ] 
14:34:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FD26 to EndLba:0x3B6FDA6 with One's Pattern 

14:34:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D1 to EndLba:0x250F5 with Constant Pattern
14:34:01: [ RdLbaNoData(0x231D1, 0x1F24, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2170 ] 
14:34:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D1 to EndLba:0x250F5 with Constant Pattern 

14:34:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3984
14:34:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E180>, <py_sfcl.PySEnhancedCmdData object at 0x0611CE40>, <None>) , Command count = 2171 ] 
14:34:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:03: Host Frequency set to 25000 KHz
14:34:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x061293C0>, 0x0, True) , Command count = 2172 ] 
14:34:04: [GO18_globalSetVolt]### Host voltage value is set.
14:34:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138480>, 0x0, False) , Command count = 2173 ] 
14:34:04: [GO18_globalSetVolt]### Host voltage value is set.
14:34:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2174 ] 
14:34:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2175 ] 
14:34:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2176 ] 
14:34:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x06129300>) , Command count = 2177 ] 
14:34:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C840>, <py_sfcl.CommandDataDefinition object at 0x061294B0>) , Command count = 2178 ] 
14:34:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:04: [ SetCardRCA(0x1, 0xD555) , Command count = 2179 ] 
14:34:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:04: Host Frequency set to 25000 KHz
14:34:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:04: ####CSD Registe 2.0 Values####
14:34:04: CSD_STRUCTURE                                 :0x1
14:34:04: Reserv1                                       :0x0
14:34:04: Time Access 1 TAAC                            :0xe
14:34:04: Time Access 2 NSAC*100                        :0x0
14:34:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:04: Card Command Classess CCC                     :0x5b5
14:34:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:04: DSR(driver stage register)  DSR_IMP           :0x0
14:34:04: Reserv2                                       :0x0
14:34:04: Device Size C_SIZE                            :0xedc8
14:34:04: Reserv3                                       :0x0
14:34:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:04: Reserv4                                       :0x0
14:34:04: Write Speed Factor R2W_FACTOR                 :0x2
14:34:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:04: FILE_FORMAT_GRP                               :0x0
14:34:04: COPY flag                                     :0x1
14:34:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:04: File_Format                                   :0x0
14:34:04: CRC                                           :0x0
14:34:04: ####CSD Registe Values####  

14:34:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:04: [GetSCRRegisterEntry] Passed
14:34:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:04: Data_Status_After Erases          : 0
14:34:04: CPRM Security Support             : No Security
14:34:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:04: Spec. Version                     : Version 3.0X
14:34:04: Extended Security Support         : Extended_Security_Not_Supported
14:34:04: Command Support                   : COMMAND_SUPPORT
14:34:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F690>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 2180 ] 
14:34:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x0611CB10>) , Command count = 2181 ] 
14:34:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:04: [ SetBusWidth(0x4) , Command count = 2182 ] 
14:34:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2183 ] 
14:34:04: Protected Area Size 0x28000
14:34:04: Bus Width           2
14:34:04: Secure Mode         0
14:34:04: Speed  Class        4
14:34:04: Perf Move           0
14:34:04: Au Size             9
14:34:04: Erase Size          15
14:34:04: Erase Timeout       1
14:34:04: Erase offset        1
14:34:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2184 ] 
14:34:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:04: Host Frequency set to 100000 KHz
14:34:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:04: ####CSD Registe 2.0 Values####
14:34:04: CSD_STRUCTURE                                 :0x1
14:34:04: Reserv1                                       :0x0
14:34:04: Time Access 1 TAAC                            :0xe
14:34:04: Time Access 2 NSAC*100                        :0x0
14:34:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:04: Card Command Classess CCC                     :0x5b5
14:34:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:04: DSR(driver stage register)  DSR_IMP           :0x0
14:34:04: Reserv2                                       :0x0
14:34:04: Device Size C_SIZE                            :0xedc8
14:34:04: Reserv3                                       :0x0
14:34:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:04: Reserv4                                       :0x0
14:34:04: Write Speed Factor R2W_FACTOR                 :0x2
14:34:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:05: FILE_FORMAT_GRP                               :0x0
14:34:05: COPY flag                                     :0x1
14:34:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:05: File_Format                                   :0x0
14:34:05: CRC                                           :0x0
14:34:05: ####CSD Registe Values####  

14:34:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061297B0>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 2185 ] 
14:34:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E390>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 2186 ] 
14:34:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F67B to EndLba:0x3B6F6FB with One's Pattern
14:34:05: [ WrLbaNoData(0x3B6F67B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2187 ] 
14:34:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F67B to EndLba:0x3B6F6FB with One's Pattern 

14:34:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F6FB to EndLba:0x3B6F77B with One's Pattern
14:34:05: [ WrLbaNoData(0x3B6F6FB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2188 ] 
14:34:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F6FB to EndLba:0x3B6F77B with One's Pattern 

14:34:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D3 to EndLba:0x250F5 with Constant Pattern
14:34:05: [ RdLbaNoData(0x231D3, 0x1F22, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2189 ] 
14:34:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D3 to EndLba:0x250F5 with Constant Pattern 

14:34:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3983
14:34:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E8D0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E7B0>, <None>) , Command count = 2190 ] 
14:34:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:07: Host Frequency set to 25000 KHz
14:34:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E6F0>, 0x0, True) , Command count = 2191 ] 
14:34:07: [GO18_globalSetVolt]### Host voltage value is set.
14:34:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E0F0>, 0x0, False) , Command count = 2192 ] 
14:34:07: [GO18_globalSetVolt]### Host voltage value is set.
14:34:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2193 ] 
14:34:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2194 ] 
14:34:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2195 ] 
14:34:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x0612E030>) , Command count = 2196 ] 
14:34:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 2197 ] 
14:34:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:07: [ SetCardRCA(0x1, 0xD555) , Command count = 2198 ] 
14:34:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:07: Host Frequency set to 25000 KHz
14:34:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:07: ####CSD Registe 2.0 Values####
14:34:07: CSD_STRUCTURE                                 :0x1
14:34:07: Reserv1                                       :0x0
14:34:07: Time Access 1 TAAC                            :0xe
14:34:07: Time Access 2 NSAC*100                        :0x0
14:34:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:07: Card Command Classess CCC                     :0x5b5
14:34:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:07: DSR(driver stage register)  DSR_IMP           :0x0
14:34:07: Reserv2                                       :0x0
14:34:07: Device Size C_SIZE                            :0xedc8
14:34:07: Reserv3                                       :0x0
14:34:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:07: Reserv4                                       :0x0
14:34:07: Write Speed Factor R2W_FACTOR                 :0x2
14:34:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:07: FILE_FORMAT_GRP                               :0x0
14:34:07: COPY flag                                     :0x1
14:34:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:07: File_Format                                   :0x0
14:34:07: CRC                                           :0x0
14:34:07: ####CSD Registe Values####  

14:34:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:07: [GetSCRRegisterEntry] Passed
14:34:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:07: Data_Status_After Erases          : 0
14:34:07: CPRM Security Support             : No Security
14:34:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:07: Spec. Version                     : Version 3.0X
14:34:07: Extended Security Support         : Extended_Security_Not_Supported
14:34:07: Command Support                   : COMMAND_SUPPORT
14:34:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2D0>, <py_sfcl.CommandDataDefinition object at 0x06129EA0>) , Command count = 2199 ] 
14:34:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x0611CB70>) , Command count = 2200 ] 
14:34:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:07: [ SetBusWidth(0x4) , Command count = 2201 ] 
14:34:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2202 ] 
14:34:07: Protected Area Size 0x28000
14:34:07: Bus Width           2
14:34:07: Secure Mode         0
14:34:07: Speed  Class        4
14:34:07: Perf Move           0
14:34:07: Au Size             9
14:34:07: Erase Size          15
14:34:07: Erase Timeout       1
14:34:07: Erase offset        1
14:34:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2203 ] 
14:34:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:07: Host Frequency set to 100000 KHz
14:34:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:07: ####CSD Registe 2.0 Values####
14:34:07: CSD_STRUCTURE                                 :0x1
14:34:08: Reserv1                                       :0x0
14:34:08: Time Access 1 TAAC                            :0xe
14:34:08: Time Access 2 NSAC*100                        :0x0
14:34:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:08: Card Command Classess CCC                     :0x5b5
14:34:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:08: DSR(driver stage register)  DSR_IMP           :0x0
14:34:08: Reserv2                                       :0x0
14:34:08: Device Size C_SIZE                            :0xedc8
14:34:08: Reserv3                                       :0x0
14:34:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:08: Reserv4                                       :0x0
14:34:08: Write Speed Factor R2W_FACTOR                 :0x2
14:34:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:08: FILE_FORMAT_GRP                               :0x0
14:34:08: COPY flag                                     :0x1
14:34:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:08: File_Format                                   :0x0
14:34:08: CRC                                           :0x0
14:34:08: ####CSD Registe Values####  

14:34:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x06129ED0>) , Command count = 2204 ] 
14:34:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5D0>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 2205 ] 
14:34:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE0F to EndLba:0x3B6DE8F with One's Pattern
14:34:08: [ WrLbaNoData(0x3B6DE0F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2206 ] 
14:34:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE0F to EndLba:0x3B6DE8F with One's Pattern 

14:34:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE8F to EndLba:0x3B6DF0F with One's Pattern
14:34:08: [ WrLbaNoData(0x3B6DE8F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2207 ] 
14:34:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE8F to EndLba:0x3B6DF0F with One's Pattern 

14:34:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D3 to EndLba:0x250F3 with Constant Pattern
14:34:08: [ RdLbaNoData(0x231D3, 0x1F20, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2208 ] 
14:34:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D3 to EndLba:0x250F3 with Constant Pattern 

14:34:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3982
14:34:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E510>, <py_sfcl.PySEnhancedCmdData object at 0x0612E360>, <None>) , Command count = 2209 ] 
14:34:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:10: Host Frequency set to 25000 KHz
14:34:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132030>, 0x0, True) , Command count = 2210 ] 
14:34:10: [GO18_globalSetVolt]### Host voltage value is set.
14:34:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612ECF0>, 0x0, False) , Command count = 2211 ] 
14:34:10: [GO18_globalSetVolt]### Host voltage value is set.
14:34:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2212 ] 
14:34:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2213 ] 
14:34:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2214 ] 
14:34:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x0612E420>) , Command count = 2215 ] 
14:34:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F5D0>, <py_sfcl.CommandDataDefinition object at 0x06129BD0>) , Command count = 2216 ] 
14:34:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:11: [ SetCardRCA(0x1, 0xD555) , Command count = 2217 ] 
14:34:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:11: Host Frequency set to 25000 KHz
14:34:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:11: ####CSD Registe 2.0 Values####
14:34:11: CSD_STRUCTURE                                 :0x1
14:34:11: Reserv1                                       :0x0
14:34:11: Time Access 1 TAAC                            :0xe
14:34:11: Time Access 2 NSAC*100                        :0x0
14:34:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:11: Card Command Classess CCC                     :0x5b5
14:34:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:11: DSR(driver stage register)  DSR_IMP           :0x0
14:34:11: Reserv2                                       :0x0
14:34:11: Device Size C_SIZE                            :0xedc8
14:34:11: Reserv3                                       :0x0
14:34:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:11: Reserv4                                       :0x0
14:34:11: Write Speed Factor R2W_FACTOR                 :0x2
14:34:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:11: FILE_FORMAT_GRP                               :0x0
14:34:11: COPY flag                                     :0x1
14:34:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:11: File_Format                                   :0x0
14:34:11: CRC                                           :0x0
14:34:11: ####CSD Registe Values####  

14:34:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:11: [GetSCRRegisterEntry] Passed
14:34:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:11: Data_Status_After Erases          : 0
14:34:11: CPRM Security Support             : No Security
14:34:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:11: Spec. Version                     : Version 3.0X
14:34:11: Extended Security Support         : Extended_Security_Not_Supported
14:34:11: Command Support                   : COMMAND_SUPPORT
14:34:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x061297E0>) , Command count = 2218 ] 
14:34:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB70>, <py_sfcl.CommandDataDefinition object at 0x0612E6C0>) , Command count = 2219 ] 
14:34:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:11: [ SetBusWidth(0x4) , Command count = 2220 ] 
14:34:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2221 ] 
14:34:11: Protected Area Size 0x28000
14:34:11: Bus Width           2
14:34:11: Secure Mode         0
14:34:11: Speed  Class        4
14:34:11: Perf Move           0
14:34:11: Au Size             9
14:34:11: Erase Size          15
14:34:11: Erase Timeout       1
14:34:11: Erase offset        1
14:34:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2222 ] 
14:34:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:11: Host Frequency set to 100000 KHz
14:34:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:11: ####CSD Registe 2.0 Values####
14:34:11: CSD_STRUCTURE                                 :0x1
14:34:11: Reserv1                                       :0x0
14:34:11: Time Access 1 TAAC                            :0xe
14:34:11: Time Access 2 NSAC*100                        :0x0
14:34:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:11: Card Command Classess CCC                     :0x5b5
14:34:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:11: DSR(driver stage register)  DSR_IMP           :0x0
14:34:11: Reserv2                                       :0x0
14:34:11: Device Size C_SIZE                            :0xedc8
14:34:11: Reserv3                                       :0x0
14:34:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:11: Reserv4                                       :0x0
14:34:11: Write Speed Factor R2W_FACTOR                 :0x2
14:34:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:11: FILE_FORMAT_GRP                               :0x0
14:34:11: COPY flag                                     :0x1
14:34:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:11: File_Format                                   :0x0
14:34:11: CRC                                           :0x0
14:34:11: ####CSD Registe Values####  

14:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323F0>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 2223 ] 
14:34:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322D0>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 2224 ] 
14:34:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F74C to EndLba:0x3B6F7CC with One's Pattern
14:34:11: [ WrLbaNoData(0x3B6F74C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2225 ] 
14:34:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F74C to EndLba:0x3B6F7CC with One's Pattern 

14:34:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F7CC to EndLba:0x3B6F84C with One's Pattern
14:34:11: [ WrLbaNoData(0x3B6F7CC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2226 ] 
14:34:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F7CC to EndLba:0x3B6F84C with One's Pattern 

14:34:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D5 to EndLba:0x250F3 with Constant Pattern
14:34:12: [ RdLbaNoData(0x231D5, 0x1F1E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2227 ] 
14:34:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D5 to EndLba:0x250F3 with Constant Pattern 

14:34:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3981
14:34:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061326F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132450>, <py_sfcl.PySEnhancedCmdData object at 0x06132840>, <None>) , Command count = 2228 ] 
14:34:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:14: Host Frequency set to 25000 KHz
14:34:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F750>, 0x0, True) , Command count = 2229 ] 
14:34:14: [GO18_globalSetVolt]### Host voltage value is set.
14:34:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FD50>, 0x0, False) , Command count = 2230 ] 
14:34:14: [GO18_globalSetVolt]### Host voltage value is set.
14:34:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2231 ] 
14:34:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2232 ] 
14:34:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2233 ] 
14:34:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E600>, <py_sfcl.CommandDataDefinition object at 0x0612E870>) , Command count = 2234 ] 
14:34:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132420>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 2235 ] 
14:34:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:14: [ SetCardRCA(0x1, 0xD555) , Command count = 2236 ] 
14:34:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:14: Host Frequency set to 25000 KHz
14:34:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:14: ####CSD Registe 2.0 Values####
14:34:14: CSD_STRUCTURE                                 :0x1
14:34:14: Reserv1                                       :0x0
14:34:14: Time Access 1 TAAC                            :0xe
14:34:14: Time Access 2 NSAC*100                        :0x0
14:34:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:14: Card Command Classess CCC                     :0x5b5
14:34:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:14: DSR(driver stage register)  DSR_IMP           :0x0
14:34:14: Reserv2                                       :0x0
14:34:14: Device Size C_SIZE                            :0xedc8
14:34:14: Reserv3                                       :0x0
14:34:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:14: Reserv4                                       :0x0
14:34:14: Write Speed Factor R2W_FACTOR                 :0x2
14:34:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:14: FILE_FORMAT_GRP                               :0x0
14:34:14: COPY flag                                     :0x1
14:34:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:14: File_Format                                   :0x0
14:34:14: CRC                                           :0x0
14:34:14: ####CSD Registe Values####  

14:34:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:14: [GetSCRRegisterEntry] Passed
14:34:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:14: Data_Status_After Erases          : 0
14:34:14: CPRM Security Support             : No Security
14:34:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:14: Spec. Version                     : Version 3.0X
14:34:14: Extended Security Support         : Extended_Security_Not_Supported
14:34:14: Command Support                   : COMMAND_SUPPORT
14:34:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132780>, <py_sfcl.CommandDataDefinition object at 0x06132C90>) , Command count = 2237 ] 
14:34:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x06132630>) , Command count = 2238 ] 
14:34:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:14: [ SetBusWidth(0x4) , Command count = 2239 ] 
14:34:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2240 ] 
14:34:14: Protected Area Size 0x28000
14:34:14: Bus Width           2
14:34:14: Secure Mode         0
14:34:14: Speed  Class        4
14:34:14: Perf Move           0
14:34:14: Au Size             9
14:34:14: Erase Size          15
14:34:14: Erase Timeout       1
14:34:14: Erase offset        1
14:34:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2241 ] 
14:34:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:14: Host Frequency set to 100000 KHz
14:34:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:14: ####CSD Registe 2.0 Values####
14:34:14: CSD_STRUCTURE                                 :0x1
14:34:14: Reserv1                                       :0x0
14:34:14: Time Access 1 TAAC                            :0xe
14:34:14: Time Access 2 NSAC*100                        :0x0
14:34:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:14: Card Command Classess CCC                     :0x5b5
14:34:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:15: DSR(driver stage register)  DSR_IMP           :0x0
14:34:15: Reserv2                                       :0x0
14:34:15: Device Size C_SIZE                            :0xedc8
14:34:15: Reserv3                                       :0x0
14:34:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:15: Reserv4                                       :0x0
14:34:15: Write Speed Factor R2W_FACTOR                 :0x2
14:34:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:15: FILE_FORMAT_GRP                               :0x0
14:34:15: COPY flag                                     :0x1
14:34:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:15: File_Format                                   :0x0
14:34:15: CRC                                           :0x0
14:34:15: ####CSD Registe Values####  

14:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE70>, <py_sfcl.CommandDataDefinition object at 0x06132210>) , Command count = 2242 ] 
14:34:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F30>, <py_sfcl.CommandDataDefinition object at 0x06132150>) , Command count = 2243 ] 
14:34:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E6E9 to EndLba:0x3B6E769 with One's Pattern
14:34:15: [ WrLbaNoData(0x3B6E6E9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2244 ] 
14:34:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E6E9 to EndLba:0x3B6E769 with One's Pattern 

14:34:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E769 to EndLba:0x3B6E7E9 with One's Pattern
14:34:15: [ WrLbaNoData(0x3B6E769, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2245 ] 
14:34:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E769 to EndLba:0x3B6E7E9 with One's Pattern 

14:34:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D5 to EndLba:0x250F1 with Constant Pattern
14:34:15: [ RdLbaNoData(0x231D5, 0x1F1C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2246 ] 
14:34:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D5 to EndLba:0x250F1 with Constant Pattern 

14:34:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3980
14:34:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061383C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061325A0>, <py_sfcl.PySEnhancedCmdData object at 0x06132990>, <None>) , Command count = 2247 ] 
14:34:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:17: Host Frequency set to 25000 KHz
14:34:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C510>, 0x0, True) , Command count = 2248 ] 
14:34:17: [GO18_globalSetVolt]### Host voltage value is set.
14:34:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132510>, 0x0, False) , Command count = 2249 ] 
14:34:17: [GO18_globalSetVolt]### Host voltage value is set.
14:34:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2250 ] 
14:34:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2251 ] 
14:34:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2252 ] 
14:34:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDE0>, <py_sfcl.CommandDataDefinition object at 0x06132360>) , Command count = 2253 ] 
14:34:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x06132F90>) , Command count = 2254 ] 
14:34:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:17: [ SetCardRCA(0x1, 0xD555) , Command count = 2255 ] 
14:34:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:17: Host Frequency set to 25000 KHz
14:34:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:17: ####CSD Registe 2.0 Values####
14:34:17: CSD_STRUCTURE                                 :0x1
14:34:17: Reserv1                                       :0x0
14:34:17: Time Access 1 TAAC                            :0xe
14:34:17: Time Access 2 NSAC*100                        :0x0
14:34:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:17: Card Command Classess CCC                     :0x5b5
14:34:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:17: DSR(driver stage register)  DSR_IMP           :0x0
14:34:17: Reserv2                                       :0x0
14:34:17: Device Size C_SIZE                            :0xedc8
14:34:17: Reserv3                                       :0x0
14:34:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:17: Reserv4                                       :0x0
14:34:17: Write Speed Factor R2W_FACTOR                 :0x2
14:34:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:17: FILE_FORMAT_GRP                               :0x0
14:34:17: COPY flag                                     :0x1
14:34:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:17: File_Format                                   :0x0
14:34:17: CRC                                           :0x0
14:34:17: ####CSD Registe Values####  

14:34:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:17: [GetSCRRegisterEntry] Passed
14:34:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:17: Data_Status_After Erases          : 0
14:34:17: CPRM Security Support             : No Security
14:34:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:17: Spec. Version                     : Version 3.0X
14:34:17: Extended Security Support         : Extended_Security_Not_Supported
14:34:17: Command Support                   : COMMAND_SUPPORT
14:34:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F900>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 2256 ] 
14:34:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x0612EBD0>) , Command count = 2257 ] 
14:34:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:17: [ SetBusWidth(0x4) , Command count = 2258 ] 
14:34:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061329F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2259 ] 
14:34:17: Protected Area Size 0x28000
14:34:17: Bus Width           2
14:34:17: Secure Mode         0
14:34:17: Speed  Class        4
14:34:17: Perf Move           0
14:34:17: Au Size             9
14:34:17: Erase Size          15
14:34:17: Erase Timeout       1
14:34:17: Erase offset        1
14:34:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2260 ] 
14:34:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:18: Host Frequency set to 100000 KHz
14:34:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:18: ####CSD Registe 2.0 Values####
14:34:18: CSD_STRUCTURE                                 :0x1
14:34:18: Reserv1                                       :0x0
14:34:18: Time Access 1 TAAC                            :0xe
14:34:18: Time Access 2 NSAC*100                        :0x0
14:34:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:18: Card Command Classess CCC                     :0x5b5
14:34:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:18: DSR(driver stage register)  DSR_IMP           :0x0
14:34:18: Reserv2                                       :0x0
14:34:18: Device Size C_SIZE                            :0xedc8
14:34:18: Reserv3                                       :0x0
14:34:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:18: Reserv4                                       :0x0
14:34:18: Write Speed Factor R2W_FACTOR                 :0x2
14:34:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:18: FILE_FORMAT_GRP                               :0x0
14:34:18: COPY flag                                     :0x1
14:34:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:18: File_Format                                   :0x0
14:34:18: CRC                                           :0x0
14:34:18: ####CSD Registe Values####  

14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F30>, <py_sfcl.CommandDataDefinition object at 0x061324B0>) , Command count = 2261 ] 
14:34:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138180>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 2262 ] 
14:34:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E62F to EndLba:0x3B6E6AF with One's Pattern
14:34:18: [ WrLbaNoData(0x3B6E62F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2263 ] 
14:34:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E62F to EndLba:0x3B6E6AF with One's Pattern 

14:34:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E6AF to EndLba:0x3B6E72F with One's Pattern
14:34:18: [ WrLbaNoData(0x3B6E6AF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2264 ] 
14:34:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E6AF to EndLba:0x3B6E72F with One's Pattern 

14:34:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D7 to EndLba:0x250F1 with Constant Pattern
14:34:18: [ RdLbaNoData(0x231D7, 0x1F1A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2265 ] 
14:34:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D7 to EndLba:0x250F1 with Constant Pattern 

14:34:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3979
14:34:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138360>, <py_sfcl.PySEnhancedCmdData object at 0x06132270>, <None>) , Command count = 2266 ] 
14:34:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:21: Host Frequency set to 25000 KHz
14:34:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138450>, 0x0, True) , Command count = 2267 ] 
14:34:21: [GO18_globalSetVolt]### Host voltage value is set.
14:34:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138540>, 0x0, False) , Command count = 2268 ] 
14:34:21: [GO18_globalSetVolt]### Host voltage value is set.
14:34:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2269 ] 
14:34:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2270 ] 
14:34:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2271 ] 
14:34:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x06132900>) , Command count = 2272 ] 
14:34:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061382A0>, <py_sfcl.CommandDataDefinition object at 0x06132810>) , Command count = 2273 ] 
14:34:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:21: [ SetCardRCA(0x1, 0xD555) , Command count = 2274 ] 
14:34:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:21: Host Frequency set to 25000 KHz
14:34:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:21: ####CSD Registe 2.0 Values####
14:34:21: CSD_STRUCTURE                                 :0x1
14:34:21: Reserv1                                       :0x0
14:34:21: Time Access 1 TAAC                            :0xe
14:34:21: Time Access 2 NSAC*100                        :0x0
14:34:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:21: Card Command Classess CCC                     :0x5b5
14:34:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:21: DSR(driver stage register)  DSR_IMP           :0x0
14:34:21: Reserv2                                       :0x0
14:34:21: Device Size C_SIZE                            :0xedc8
14:34:21: Reserv3                                       :0x0
14:34:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:21: Reserv4                                       :0x0
14:34:21: Write Speed Factor R2W_FACTOR                 :0x2
14:34:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:21: FILE_FORMAT_GRP                               :0x0
14:34:21: COPY flag                                     :0x1
14:34:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:21: File_Format                                   :0x0
14:34:21: CRC                                           :0x0
14:34:21: ####CSD Registe Values####  

14:34:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:21: [GetSCRRegisterEntry] Passed
14:34:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:21: Data_Status_After Erases          : 0
14:34:21: CPRM Security Support             : No Security
14:34:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:21: Spec. Version                     : Version 3.0X
14:34:21: Extended Security Support         : Extended_Security_Not_Supported
14:34:21: Command Support                   : COMMAND_SUPPORT
14:34:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138630>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 2275 ] 
14:34:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06132E10>) , Command count = 2276 ] 
14:34:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:21: [ SetBusWidth(0x4) , Command count = 2277 ] 
14:34:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2278 ] 
14:34:21: Protected Area Size 0x28000
14:34:21: Bus Width           2
14:34:21: Secure Mode         0
14:34:21: Speed  Class        4
14:34:21: Perf Move           0
14:34:21: Au Size             9
14:34:21: Erase Size          15
14:34:21: Erase Timeout       1
14:34:21: Erase offset        1
14:34:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2279 ] 
14:34:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:21: Host Frequency set to 100000 KHz
14:34:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:21: ####CSD Registe 2.0 Values####
14:34:21: CSD_STRUCTURE                                 :0x1
14:34:21: Reserv1                                       :0x0
14:34:21: Time Access 1 TAAC                            :0xe
14:34:21: Time Access 2 NSAC*100                        :0x0
14:34:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:21: Card Command Classess CCC                     :0x5b5
14:34:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:21: DSR(driver stage register)  DSR_IMP           :0x0
14:34:21: Reserv2                                       :0x0
14:34:21: Device Size C_SIZE                            :0xedc8
14:34:21: Reserv3                                       :0x0
14:34:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:21: Reserv4                                       :0x0
14:34:21: Write Speed Factor R2W_FACTOR                 :0x2
14:34:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:21: FILE_FORMAT_GRP                               :0x0
14:34:21: COPY flag                                     :0x1
14:34:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:21: File_Format                                   :0x0
14:34:21: CRC                                           :0x0
14:34:21: ####CSD Registe Values####  

14:34:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061380C0>, <py_sfcl.CommandDataDefinition object at 0x06132BD0>) , Command count = 2280 ] 
14:34:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 2281 ] 
14:34:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E201 to EndLba:0x3B6E281 with One's Pattern
14:34:22: [ WrLbaNoData(0x3B6E201, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2282 ] 
14:34:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E201 to EndLba:0x3B6E281 with One's Pattern 

14:34:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E281 to EndLba:0x3B6E301 with One's Pattern
14:34:22: [ WrLbaNoData(0x3B6E281, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2283 ] 
14:34:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E281 to EndLba:0x3B6E301 with One's Pattern 

14:34:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D7 to EndLba:0x250EF with Constant Pattern
14:34:22: [ RdLbaNoData(0x231D7, 0x1F18, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2284 ] 
14:34:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D7 to EndLba:0x250EF with Constant Pattern 

14:34:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3978
14:34:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138720>, <py_sfcl.PySEnhancedCmdData object at 0x061382D0>, <None>) , Command count = 2285 ] 
14:34:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:24: Host Frequency set to 25000 KHz
14:34:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138090>, 0x0, True) , Command count = 2286 ] 
14:34:24: [GO18_globalSetVolt]### Host voltage value is set.
14:34:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x061384E0>, 0x0, False) , Command count = 2287 ] 
14:34:24: [GO18_globalSetVolt]### Host voltage value is set.
14:34:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2288 ] 
14:34:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2289 ] 
14:34:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2290 ] 
14:34:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138300>) , Command count = 2291 ] 
14:34:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061389C0>, <py_sfcl.CommandDataDefinition object at 0x06138060>) , Command count = 2292 ] 
14:34:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:24: [ SetCardRCA(0x1, 0xD555) , Command count = 2293 ] 
14:34:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:24: Host Frequency set to 25000 KHz
14:34:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:24: ####CSD Registe 2.0 Values####
14:34:24: CSD_STRUCTURE                                 :0x1
14:34:24: Reserv1                                       :0x0
14:34:24: Time Access 1 TAAC                            :0xe
14:34:24: Time Access 2 NSAC*100                        :0x0
14:34:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:24: Card Command Classess CCC                     :0x5b5
14:34:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:24: DSR(driver stage register)  DSR_IMP           :0x0
14:34:24: Reserv2                                       :0x0
14:34:24: Device Size C_SIZE                            :0xedc8
14:34:24: Reserv3                                       :0x0
14:34:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:24: Reserv4                                       :0x0
14:34:24: Write Speed Factor R2W_FACTOR                 :0x2
14:34:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:24: FILE_FORMAT_GRP                               :0x0
14:34:24: COPY flag                                     :0x1
14:34:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:24: File_Format                                   :0x0
14:34:24: CRC                                           :0x0
14:34:24: ####CSD Registe Values####  

14:34:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:24: [GetSCRRegisterEntry] Passed
14:34:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:24: Data_Status_After Erases          : 0
14:34:24: CPRM Security Support             : No Security
14:34:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:24: Spec. Version                     : Version 3.0X
14:34:24: Extended Security Support         : Extended_Security_Not_Supported
14:34:24: Command Support                   : COMMAND_SUPPORT
14:34:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132870>, <py_sfcl.CommandDataDefinition object at 0x06138420>) , Command count = 2294 ] 
14:34:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x0613FFC0>) , Command count = 2295 ] 
14:34:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:24: [ SetBusWidth(0x4) , Command count = 2296 ] 
14:34:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2297 ] 
14:34:24: Protected Area Size 0x28000
14:34:24: Bus Width           2
14:34:24: Secure Mode         0
14:34:24: Speed  Class        4
14:34:24: Perf Move           0
14:34:24: Au Size             9
14:34:24: Erase Size          15
14:34:24: Erase Timeout       1
14:34:24: Erase offset        1
14:34:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2298 ] 
14:34:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:24: Host Frequency set to 100000 KHz
14:34:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:24: ####CSD Registe 2.0 Values####
14:34:24: CSD_STRUCTURE                                 :0x1
14:34:25: Reserv1                                       :0x0
14:34:25: Time Access 1 TAAC                            :0xe
14:34:25: Time Access 2 NSAC*100                        :0x0
14:34:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:25: Card Command Classess CCC                     :0x5b5
14:34:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:25: DSR(driver stage register)  DSR_IMP           :0x0
14:34:25: Reserv2                                       :0x0
14:34:25: Device Size C_SIZE                            :0xedc8
14:34:25: Reserv3                                       :0x0
14:34:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:25: Reserv4                                       :0x0
14:34:25: Write Speed Factor R2W_FACTOR                 :0x2
14:34:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:25: FILE_FORMAT_GRP                               :0x0
14:34:25: COPY flag                                     :0x1
14:34:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:25: File_Format                                   :0x0
14:34:25: CRC                                           :0x0
14:34:25: ####CSD Registe Values####  

14:34:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1E0>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 2299 ] 
14:34:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 2300 ] 
14:34:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71FAB to EndLba:0x3B7202B with One's Pattern
14:34:25: [ WrLbaNoData(0x3B71FAB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2301 ] 
14:34:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71FAB to EndLba:0x3B7202B with One's Pattern 

14:34:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7202B to EndLba:0x3B720AB with One's Pattern
14:34:25: [ WrLbaNoData(0x3B7202B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2302 ] 
14:34:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7202B to EndLba:0x3B720AB with One's Pattern 

14:34:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D9 to EndLba:0x250EF with Constant Pattern
14:34:25: [ RdLbaNoData(0x231D9, 0x1F16, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2303 ] 
14:34:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D9 to EndLba:0x250EF with Constant Pattern 

14:34:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3977
14:34:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F120>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138B40>, <py_sfcl.PySEnhancedCmdData object at 0x06138930>, <None>) , Command count = 2304 ] 
14:34:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:27: Host Frequency set to 25000 KHz
14:34:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132B10>, 0x0, True) , Command count = 2305 ] 
14:34:27: [GO18_globalSetVolt]### Host voltage value is set.
14:34:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF90>, 0x0, False) , Command count = 2306 ] 
14:34:27: [GO18_globalSetVolt]### Host voltage value is set.
14:34:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2307 ] 
14:34:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2308 ] 
14:34:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2309 ] 
14:34:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 2310 ] 
14:34:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138DE0>, <py_sfcl.CommandDataDefinition object at 0x0613F6C0>) , Command count = 2311 ] 
14:34:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2312 ] 
14:34:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:28: Host Frequency set to 25000 KHz
14:34:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:28: ####CSD Registe 2.0 Values####
14:34:28: CSD_STRUCTURE                                 :0x1
14:34:28: Reserv1                                       :0x0
14:34:28: Time Access 1 TAAC                            :0xe
14:34:28: Time Access 2 NSAC*100                        :0x0
14:34:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:28: Card Command Classess CCC                     :0x5b5
14:34:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:28: DSR(driver stage register)  DSR_IMP           :0x0
14:34:28: Reserv2                                       :0x0
14:34:28: Device Size C_SIZE                            :0xedc8
14:34:28: Reserv3                                       :0x0
14:34:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:28: Reserv4                                       :0x0
14:34:28: Write Speed Factor R2W_FACTOR                 :0x2
14:34:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:28: FILE_FORMAT_GRP                               :0x0
14:34:28: COPY flag                                     :0x1
14:34:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:28: File_Format                                   :0x0
14:34:28: CRC                                           :0x0
14:34:28: ####CSD Registe Values####  

14:34:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:28: [GetSCRRegisterEntry] Passed
14:34:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:28: Data_Status_After Erases          : 0
14:34:28: CPRM Security Support             : No Security
14:34:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:28: Spec. Version                     : Version 3.0X
14:34:28: Extended Security Support         : Extended_Security_Not_Supported
14:34:28: Command Support                   : COMMAND_SUPPORT
14:34:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC30>, <py_sfcl.CommandDataDefinition object at 0x0613FE10>) , Command count = 2313 ] 
14:34:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B70>, <py_sfcl.CommandDataDefinition object at 0x061387B0>) , Command count = 2314 ] 
14:34:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:28: [ SetBusWidth(0x4) , Command count = 2315 ] 
14:34:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2316 ] 
14:34:28: Protected Area Size 0x28000
14:34:28: Bus Width           2
14:34:28: Secure Mode         0
14:34:28: Speed  Class        4
14:34:28: Perf Move           0
14:34:28: Au Size             9
14:34:28: Erase Size          15
14:34:28: Erase Timeout       1
14:34:28: Erase offset        1
14:34:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2317 ] 
14:34:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:28: Host Frequency set to 100000 KHz
14:34:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:28: ####CSD Registe 2.0 Values####
14:34:28: CSD_STRUCTURE                                 :0x1
14:34:28: Reserv1                                       :0x0
14:34:28: Time Access 1 TAAC                            :0xe
14:34:28: Time Access 2 NSAC*100                        :0x0
14:34:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:28: Card Command Classess CCC                     :0x5b5
14:34:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:28: DSR(driver stage register)  DSR_IMP           :0x0
14:34:28: Reserv2                                       :0x0
14:34:28: Device Size C_SIZE                            :0xedc8
14:34:28: Reserv3                                       :0x0
14:34:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:28: Reserv4                                       :0x0
14:34:28: Write Speed Factor R2W_FACTOR                 :0x2
14:34:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:28: FILE_FORMAT_GRP                               :0x0
14:34:28: COPY flag                                     :0x1
14:34:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:28: File_Format                                   :0x0
14:34:28: CRC                                           :0x0
14:34:28: ####CSD Registe Values####  

14:34:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 2318 ] 
14:34:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A80>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 2319 ] 
14:34:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ECC4 to EndLba:0x3B6ED44 with One's Pattern
14:34:28: [ WrLbaNoData(0x3B6ECC4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2320 ] 
14:34:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ECC4 to EndLba:0x3B6ED44 with One's Pattern 

14:34:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED44 to EndLba:0x3B6EDC4 with One's Pattern
14:34:28: [ WrLbaNoData(0x3B6ED44, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2321 ] 
14:34:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED44 to EndLba:0x3B6EDC4 with One's Pattern 

14:34:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231D9 to EndLba:0x250ED with Constant Pattern
14:34:28: [ RdLbaNoData(0x231D9, 0x1F14, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2322 ] 
14:34:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231D9 to EndLba:0x250ED with Constant Pattern 

14:34:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3976
14:34:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0529EE40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052C1C30>, <py_sfcl.PySEnhancedCmdData object at 0x0613F3F0>, <None>) , Command count = 2323 ] 
14:34:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:30: Host Frequency set to 25000 KHz
14:34:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x061384B0>, 0x0, True) , Command count = 2324 ] 
14:34:30: [GO18_globalSetVolt]### Host voltage value is set.
14:34:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138CC0>, 0x0, False) , Command count = 2325 ] 
14:34:30: [GO18_globalSetVolt]### Host voltage value is set.
14:34:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2326 ] 
14:34:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2327 ] 
14:34:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2328 ] 
14:34:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C00>, <py_sfcl.CommandDataDefinition object at 0x0613F660>) , Command count = 2329 ] 
14:34:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x0613F450>) , Command count = 2330 ] 
14:34:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:31: [ SetCardRCA(0x1, 0xD555) , Command count = 2331 ] 
14:34:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:31: Host Frequency set to 25000 KHz
14:34:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:31: ####CSD Registe 2.0 Values####
14:34:31: CSD_STRUCTURE                                 :0x1
14:34:31: Reserv1                                       :0x0
14:34:31: Time Access 1 TAAC                            :0xe
14:34:31: Time Access 2 NSAC*100                        :0x0
14:34:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:31: Card Command Classess CCC                     :0x5b5
14:34:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:31: DSR(driver stage register)  DSR_IMP           :0x0
14:34:31: Reserv2                                       :0x0
14:34:31: Device Size C_SIZE                            :0xedc8
14:34:31: Reserv3                                       :0x0
14:34:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:31: Reserv4                                       :0x0
14:34:31: Write Speed Factor R2W_FACTOR                 :0x2
14:34:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:31: FILE_FORMAT_GRP                               :0x0
14:34:31: COPY flag                                     :0x1
14:34:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:31: File_Format                                   :0x0
14:34:31: CRC                                           :0x0
14:34:31: ####CSD Registe Values####  

14:34:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:31: [GetSCRRegisterEntry] Passed
14:34:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:31: Data_Status_After Erases          : 0
14:34:31: CPRM Security Support             : No Security
14:34:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:31: Spec. Version                     : Version 3.0X
14:34:31: Extended Security Support         : Extended_Security_Not_Supported
14:34:31: Command Support                   : COMMAND_SUPPORT
14:34:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E40>, <py_sfcl.CommandDataDefinition object at 0x0613F390>) , Command count = 2332 ] 
14:34:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x0613FAE0>) , Command count = 2333 ] 
14:34:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:31: [ SetBusWidth(0x4) , Command count = 2334 ] 
14:34:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2335 ] 
14:34:31: Protected Area Size 0x28000
14:34:31: Bus Width           2
14:34:31: Secure Mode         0
14:34:31: Speed  Class        4
14:34:31: Perf Move           0
14:34:31: Au Size             9
14:34:31: Erase Size          15
14:34:31: Erase Timeout       1
14:34:31: Erase offset        1
14:34:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2336 ] 
14:34:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:31: Host Frequency set to 100000 KHz
14:34:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:31: ####CSD Registe 2.0 Values####
14:34:31: CSD_STRUCTURE                                 :0x1
14:34:31: Reserv1                                       :0x0
14:34:31: Time Access 1 TAAC                            :0xe
14:34:31: Time Access 2 NSAC*100                        :0x0
14:34:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:31: Card Command Classess CCC                     :0x5b5
14:34:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:31: DSR(driver stage register)  DSR_IMP           :0x0
14:34:31: Reserv2                                       :0x0
14:34:31: Device Size C_SIZE                            :0xedc8
14:34:31: Reserv3                                       :0x0
14:34:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:31: Reserv4                                       :0x0
14:34:31: Write Speed Factor R2W_FACTOR                 :0x2
14:34:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:32: FILE_FORMAT_GRP                               :0x0
14:34:32: COPY flag                                     :0x1
14:34:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:32: File_Format                                   :0x0
14:34:32: CRC                                           :0x0
14:34:32: ####CSD Registe Values####  

14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05184030>, <py_sfcl.CommandDataDefinition object at 0x0606F2D0>) , Command count = 2337 ] 
14:34:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F1B0>) , Command count = 2338 ] 
14:34:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA0A to EndLba:0x3B6FA8A with One's Pattern
14:34:32: [ WrLbaNoData(0x3B6FA0A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2339 ] 
14:34:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA0A to EndLba:0x3B6FA8A with One's Pattern 

14:34:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA8A to EndLba:0x3B6FB0A with One's Pattern
14:34:32: [ WrLbaNoData(0x3B6FA8A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2340 ] 
14:34:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA8A to EndLba:0x3B6FB0A with One's Pattern 

14:34:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231DB to EndLba:0x250ED with Constant Pattern
14:34:32: [ RdLbaNoData(0x231DB, 0x1F12, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2341 ] 
14:34:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231DB to EndLba:0x250ED with Constant Pattern 

14:34:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3975
14:34:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E37B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CC60>, <py_sfcl.PySEnhancedCmdData object at 0x0613F4E0>, <None>) , Command count = 2342 ] 
14:34:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:34: Host Frequency set to 25000 KHz
14:34:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF420>, 0x0, True) , Command count = 2343 ] 
14:34:34: [GO18_globalSetVolt]### Host voltage value is set.
14:34:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB930>, 0x0, False) , Command count = 2344 ] 
14:34:34: [GO18_globalSetVolt]### Host voltage value is set.
14:34:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2345 ] 
14:34:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2346 ] 
14:34:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2347 ] 
14:34:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x0613F570>) , Command count = 2348 ] 
14:34:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x0613F6F0>) , Command count = 2349 ] 
14:34:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:34: [ SetCardRCA(0x1, 0xD555) , Command count = 2350 ] 
14:34:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:34: Host Frequency set to 25000 KHz
14:34:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:34: ####CSD Registe 2.0 Values####
14:34:34: CSD_STRUCTURE                                 :0x1
14:34:34: Reserv1                                       :0x0
14:34:34: Time Access 1 TAAC                            :0xe
14:34:34: Time Access 2 NSAC*100                        :0x0
14:34:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:34: Card Command Classess CCC                     :0x5b5
14:34:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:34: DSR(driver stage register)  DSR_IMP           :0x0
14:34:34: Reserv2                                       :0x0
14:34:34: Device Size C_SIZE                            :0xedc8
14:34:34: Reserv3                                       :0x0
14:34:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:34: Reserv4                                       :0x0
14:34:34: Write Speed Factor R2W_FACTOR                 :0x2
14:34:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:34: FILE_FORMAT_GRP                               :0x0
14:34:34: COPY flag                                     :0x1
14:34:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:34: File_Format                                   :0x0
14:34:34: CRC                                           :0x0
14:34:34: ####CSD Registe Values####  

14:34:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:34: [GetSCRRegisterEntry] Passed
14:34:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:34: Data_Status_After Erases          : 0
14:34:34: CPRM Security Support             : No Security
14:34:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:34: Spec. Version                     : Version 3.0X
14:34:34: Extended Security Support         : Extended_Security_Not_Supported
14:34:34: Command Support                   : COMMAND_SUPPORT
14:34:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0518AE70>, <py_sfcl.CommandDataDefinition object at 0x0613FDE0>) , Command count = 2351 ] 
14:34:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x052C1DE0>) , Command count = 2352 ] 
14:34:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:34: [ SetBusWidth(0x4) , Command count = 2353 ] 
14:34:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E39F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2354 ] 
14:34:34: Protected Area Size 0x28000
14:34:34: Bus Width           2
14:34:34: Secure Mode         0
14:34:34: Speed  Class        4
14:34:34: Perf Move           0
14:34:34: Au Size             9
14:34:34: Erase Size          15
14:34:34: Erase Timeout       1
14:34:34: Erase offset        1
14:34:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2355 ] 
14:34:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:35: Host Frequency set to 100000 KHz
14:34:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:35: ####CSD Registe 2.0 Values####
14:34:35: CSD_STRUCTURE                                 :0x1
14:34:35: Reserv1                                       :0x0
14:34:35: Time Access 1 TAAC                            :0xe
14:34:35: Time Access 2 NSAC*100                        :0x0
14:34:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:35: Card Command Classess CCC                     :0x5b5
14:34:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:35: DSR(driver stage register)  DSR_IMP           :0x0
14:34:35: Reserv2                                       :0x0
14:34:35: Device Size C_SIZE                            :0xedc8
14:34:35: Reserv3                                       :0x0
14:34:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:35: Reserv4                                       :0x0
14:34:35: Write Speed Factor R2W_FACTOR                 :0x2
14:34:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:35: FILE_FORMAT_GRP                               :0x0
14:34:35: COPY flag                                     :0x1
14:34:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:35: File_Format                                   :0x0
14:34:35: CRC                                           :0x0
14:34:35: ####CSD Registe Values####  

14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBFC0>, <py_sfcl.CommandDataDefinition object at 0x060E3780>) , Command count = 2356 ] 
14:34:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F210>) , Command count = 2357 ] 
14:34:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA5E to EndLba:0x3B6EADE with One's Pattern
14:34:35: [ WrLbaNoData(0x3B6EA5E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2358 ] 
14:34:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA5E to EndLba:0x3B6EADE with One's Pattern 

14:34:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EADE to EndLba:0x3B6EB5E with One's Pattern
14:34:35: [ WrLbaNoData(0x3B6EADE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2359 ] 
14:34:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EADE to EndLba:0x3B6EB5E with One's Pattern 

14:34:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231DB to EndLba:0x250EB with Constant Pattern
14:34:35: [ RdLbaNoData(0x231DB, 0x1F10, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2360 ] 
14:34:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231DB to EndLba:0x250EB with Constant Pattern 

14:34:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3974
14:34:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0606F660>, <py_sfcl.PySEnhancedCmdData object at 0x0613F840>, <None>) , Command count = 2361 ] 
14:34:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:37: Host Frequency set to 25000 KHz
14:34:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1E70>, 0x0, True) , Command count = 2362 ] 
14:34:37: [GO18_globalSetVolt]### Host voltage value is set.
14:34:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FA80>, 0x0, False) , Command count = 2363 ] 
14:34:38: [GO18_globalSetVolt]### Host voltage value is set.
14:34:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2364 ] 
14:34:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2365 ] 
14:34:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2366 ] 
14:34:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0613F990>) , Command count = 2367 ] 
14:34:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C4E0>, <py_sfcl.CommandDataDefinition object at 0x060E3D80>) , Command count = 2368 ] 
14:34:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:38: [ SetCardRCA(0x1, 0xD555) , Command count = 2369 ] 
14:34:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:38: Host Frequency set to 25000 KHz
14:34:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:38: ####CSD Registe 2.0 Values####
14:34:38: CSD_STRUCTURE                                 :0x1
14:34:38: Reserv1                                       :0x0
14:34:38: Time Access 1 TAAC                            :0xe
14:34:38: Time Access 2 NSAC*100                        :0x0
14:34:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:38: Card Command Classess CCC                     :0x5b5
14:34:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:38: DSR(driver stage register)  DSR_IMP           :0x0
14:34:38: Reserv2                                       :0x0
14:34:38: Device Size C_SIZE                            :0xedc8
14:34:38: Reserv3                                       :0x0
14:34:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:38: Reserv4                                       :0x0
14:34:38: Write Speed Factor R2W_FACTOR                 :0x2
14:34:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:38: FILE_FORMAT_GRP                               :0x0
14:34:38: COPY flag                                     :0x1
14:34:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:38: File_Format                                   :0x0
14:34:38: CRC                                           :0x0
14:34:38: ####CSD Registe Values####  

14:34:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:38: [GetSCRRegisterEntry] Passed
14:34:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:38: Data_Status_After Erases          : 0
14:34:38: CPRM Security Support             : No Security
14:34:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:38: Spec. Version                     : Version 3.0X
14:34:38: Extended Security Support         : Extended_Security_Not_Supported
14:34:38: Command Support                   : COMMAND_SUPPORT
14:34:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F60>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 2370 ] 
14:34:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C3F0>, <py_sfcl.CommandDataDefinition object at 0x0611CEA0>) , Command count = 2371 ] 
14:34:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:38: [ SetBusWidth(0x4) , Command count = 2372 ] 
14:34:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2373 ] 
14:34:38: Protected Area Size 0x28000
14:34:38: Bus Width           2
14:34:38: Secure Mode         0
14:34:38: Speed  Class        4
14:34:38: Perf Move           0
14:34:38: Au Size             9
14:34:38: Erase Size          15
14:34:38: Erase Timeout       1
14:34:38: Erase offset        1
14:34:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2374 ] 
14:34:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:38: Host Frequency set to 100000 KHz
14:34:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:38: ####CSD Registe 2.0 Values####
14:34:38: CSD_STRUCTURE                                 :0x1
14:34:38: Reserv1                                       :0x0
14:34:38: Time Access 1 TAAC                            :0xe
14:34:38: Time Access 2 NSAC*100                        :0x0
14:34:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:38: Card Command Classess CCC                     :0x5b5
14:34:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:38: DSR(driver stage register)  DSR_IMP           :0x0
14:34:38: Reserv2                                       :0x0
14:34:38: Device Size C_SIZE                            :0xedc8
14:34:38: Reserv3                                       :0x0
14:34:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:38: Reserv4                                       :0x0
14:34:38: Write Speed Factor R2W_FACTOR                 :0x2
14:34:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:39: FILE_FORMAT_GRP                               :0x0
14:34:39: COPY flag                                     :0x1
14:34:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:39: File_Format                                   :0x0
14:34:39: CRC                                           :0x0
14:34:39: ####CSD Registe Values####  

14:34:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D20>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 2375 ] 
14:34:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F030>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 2376 ] 
14:34:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D6E4 to EndLba:0x3B6D764 with One's Pattern
14:34:39: [ WrLbaNoData(0x3B6D6E4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2377 ] 
14:34:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D6E4 to EndLba:0x3B6D764 with One's Pattern 

14:34:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D764 to EndLba:0x3B6D7E4 with One's Pattern
14:34:39: [ WrLbaNoData(0x3B6D764, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2378 ] 
14:34:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D764 to EndLba:0x3B6D7E4 with One's Pattern 

14:34:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231DD to EndLba:0x250EB with Constant Pattern
14:34:39: [ RdLbaNoData(0x231DD, 0x1F0E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2379 ] 
14:34:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231DD to EndLba:0x250EB with Constant Pattern 

14:34:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3973
14:34:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CDE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CC30>, <py_sfcl.PySEnhancedCmdData object at 0x06129210>, <None>) , Command count = 2380 ] 
14:34:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:41: Host Frequency set to 25000 KHz
14:34:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFEA0>, 0x0, True) , Command count = 2381 ] 
14:34:41: [GO18_globalSetVolt]### Host voltage value is set.
14:34:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CA80>, 0x0, False) , Command count = 2382 ] 
14:34:41: [GO18_globalSetVolt]### Host voltage value is set.
14:34:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2383 ] 
14:34:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2384 ] 
14:34:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2385 ] 
14:34:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F5A0>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 2386 ] 
14:34:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F150>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 2387 ] 
14:34:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:41: [ SetCardRCA(0x1, 0xD555) , Command count = 2388 ] 
14:34:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:41: Host Frequency set to 25000 KHz
14:34:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:41: ####CSD Registe 2.0 Values####
14:34:41: CSD_STRUCTURE                                 :0x1
14:34:41: Reserv1                                       :0x0
14:34:41: Time Access 1 TAAC                            :0xe
14:34:41: Time Access 2 NSAC*100                        :0x0
14:34:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:41: Card Command Classess CCC                     :0x5b5
14:34:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:41: DSR(driver stage register)  DSR_IMP           :0x0
14:34:41: Reserv2                                       :0x0
14:34:41: Device Size C_SIZE                            :0xedc8
14:34:41: Reserv3                                       :0x0
14:34:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:41: Reserv4                                       :0x0
14:34:41: Write Speed Factor R2W_FACTOR                 :0x2
14:34:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:41: FILE_FORMAT_GRP                               :0x0
14:34:41: COPY flag                                     :0x1
14:34:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:41: File_Format                                   :0x0
14:34:41: CRC                                           :0x0
14:34:41: ####CSD Registe Values####  

14:34:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:41: [GetSCRRegisterEntry] Passed
14:34:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:41: Data_Status_After Erases          : 0
14:34:41: CPRM Security Support             : No Security
14:34:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:41: Spec. Version                     : Version 3.0X
14:34:41: Extended Security Support         : Extended_Security_Not_Supported
14:34:41: Command Support                   : COMMAND_SUPPORT
14:34:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C810>, <py_sfcl.CommandDataDefinition object at 0x0611C900>) , Command count = 2389 ] 
14:34:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611CAE0>) , Command count = 2390 ] 
14:34:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:41: [ SetBusWidth(0x4) , Command count = 2391 ] 
14:34:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2392 ] 
14:34:41: Protected Area Size 0x28000
14:34:41: Bus Width           2
14:34:41: Secure Mode         0
14:34:41: Speed  Class        4
14:34:41: Perf Move           0
14:34:41: Au Size             9
14:34:41: Erase Size          15
14:34:41: Erase Timeout       1
14:34:41: Erase offset        1
14:34:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2393 ] 
14:34:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:41: Host Frequency set to 100000 KHz
14:34:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:41: ####CSD Registe 2.0 Values####
14:34:41: CSD_STRUCTURE                                 :0x1
14:34:42: Reserv1                                       :0x0
14:34:42: Time Access 1 TAAC                            :0xe
14:34:42: Time Access 2 NSAC*100                        :0x0
14:34:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:42: Card Command Classess CCC                     :0x5b5
14:34:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:42: DSR(driver stage register)  DSR_IMP           :0x0
14:34:42: Reserv2                                       :0x0
14:34:42: Device Size C_SIZE                            :0xedc8
14:34:42: Reserv3                                       :0x0
14:34:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:42: Reserv4                                       :0x0
14:34:42: Write Speed Factor R2W_FACTOR                 :0x2
14:34:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:42: FILE_FORMAT_GRP                               :0x0
14:34:42: COPY flag                                     :0x1
14:34:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:42: File_Format                                   :0x0
14:34:42: CRC                                           :0x0
14:34:42: ####CSD Registe Values####  

14:34:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A20>, <py_sfcl.CommandDataDefinition object at 0x0611C990>) , Command count = 2394 ] 
14:34:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3750>, <py_sfcl.CommandDataDefinition object at 0x0611CC00>) , Command count = 2395 ] 
14:34:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D53D to EndLba:0x3B6D5BD with One's Pattern
14:34:42: [ WrLbaNoData(0x3B6D53D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2396 ] 
14:34:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D53D to EndLba:0x3B6D5BD with One's Pattern 

14:34:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D5BD to EndLba:0x3B6D63D with One's Pattern
14:34:42: [ WrLbaNoData(0x3B6D5BD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2397 ] 
14:34:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D5BD to EndLba:0x3B6D63D with One's Pattern 

14:34:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231DD to EndLba:0x250E9 with Constant Pattern
14:34:42: [ RdLbaNoData(0x231DD, 0x1F0C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2398 ] 
14:34:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231DD to EndLba:0x250E9 with Constant Pattern 

14:34:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3972
14:34:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061295A0>, <py_sfcl.PySEnhancedCmdData object at 0x06129BA0>, <None>) , Command count = 2399 ] 
14:34:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:44: Host Frequency set to 25000 KHz
14:34:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F090>, 0x0, True) , Command count = 2400 ] 
14:34:44: [GO18_globalSetVolt]### Host voltage value is set.
14:34:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3570>, 0x0, False) , Command count = 2401 ] 
14:34:44: [GO18_globalSetVolt]### Host voltage value is set.
14:34:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2402 ] 
14:34:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2403 ] 
14:34:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2404 ] 
14:34:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3930>, <py_sfcl.CommandDataDefinition object at 0x0611C8D0>) , Command count = 2405 ] 
14:34:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 2406 ] 
14:34:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2407 ] 
14:34:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:45: Host Frequency set to 25000 KHz
14:34:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:45: ####CSD Registe 2.0 Values####
14:34:45: CSD_STRUCTURE                                 :0x1
14:34:45: Reserv1                                       :0x0
14:34:45: Time Access 1 TAAC                            :0xe
14:34:45: Time Access 2 NSAC*100                        :0x0
14:34:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:45: Card Command Classess CCC                     :0x5b5
14:34:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:45: DSR(driver stage register)  DSR_IMP           :0x0
14:34:45: Reserv2                                       :0x0
14:34:45: Device Size C_SIZE                            :0xedc8
14:34:45: Reserv3                                       :0x0
14:34:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:45: Reserv4                                       :0x0
14:34:45: Write Speed Factor R2W_FACTOR                 :0x2
14:34:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:45: FILE_FORMAT_GRP                               :0x0
14:34:45: COPY flag                                     :0x1
14:34:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:45: File_Format                                   :0x0
14:34:45: CRC                                           :0x0
14:34:45: ####CSD Registe Values####  

14:34:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:45: [GetSCRRegisterEntry] Passed
14:34:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:45: Data_Status_After Erases          : 0
14:34:45: CPRM Security Support             : No Security
14:34:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:45: Spec. Version                     : Version 3.0X
14:34:45: Extended Security Support         : Extended_Security_Not_Supported
14:34:45: Command Support                   : COMMAND_SUPPORT
14:34:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061292D0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 2408 ] 
14:34:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129750>, <py_sfcl.CommandDataDefinition object at 0x06129240>) , Command count = 2409 ] 
14:34:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:45: [ SetBusWidth(0x4) , Command count = 2410 ] 
14:34:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2411 ] 
14:34:45: Protected Area Size 0x28000
14:34:45: Bus Width           2
14:34:45: Secure Mode         0
14:34:45: Speed  Class        4
14:34:45: Perf Move           0
14:34:45: Au Size             9
14:34:45: Erase Size          15
14:34:45: Erase Timeout       1
14:34:45: Erase offset        1
14:34:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2412 ] 
14:34:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:45: Host Frequency set to 100000 KHz
14:34:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:45: ####CSD Registe 2.0 Values####
14:34:45: CSD_STRUCTURE                                 :0x1
14:34:45: Reserv1                                       :0x0
14:34:45: Time Access 1 TAAC                            :0xe
14:34:45: Time Access 2 NSAC*100                        :0x0
14:34:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:45: Card Command Classess CCC                     :0x5b5
14:34:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:45: DSR(driver stage register)  DSR_IMP           :0x0
14:34:45: Reserv2                                       :0x0
14:34:45: Device Size C_SIZE                            :0xedc8
14:34:45: Reserv3                                       :0x0
14:34:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:45: Reserv4                                       :0x0
14:34:45: Write Speed Factor R2W_FACTOR                 :0x2
14:34:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:45: FILE_FORMAT_GRP                               :0x0
14:34:45: COPY flag                                     :0x1
14:34:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:45: File_Format                                   :0x0
14:34:45: CRC                                           :0x0
14:34:45: ####CSD Registe Values####  

14:34:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCC0>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 2413 ] 
14:34:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x0611C7E0>) , Command count = 2414 ] 
14:34:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FF28 to EndLba:0x3B6FFA8 with One's Pattern
14:34:45: [ WrLbaNoData(0x3B6FF28, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2415 ] 
14:34:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FF28 to EndLba:0x3B6FFA8 with One's Pattern 

14:34:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FFA8 to EndLba:0x3B70028 with One's Pattern
14:34:45: [ WrLbaNoData(0x3B6FFA8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2416 ] 
14:34:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FFA8 to EndLba:0x3B70028 with One's Pattern 

14:34:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231DF to EndLba:0x250E9 with Constant Pattern
14:34:45: [ RdLbaNoData(0x231DF, 0x1F0A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2417 ] 
14:34:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231DF to EndLba:0x250E9 with Constant Pattern 

14:34:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3971
14:34:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CCC0>, <py_sfcl.PySEnhancedCmdData object at 0x061293F0>, <None>) , Command count = 2418 ] 
14:34:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:47: Host Frequency set to 25000 KHz
14:34:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x061291B0>, 0x0, True) , Command count = 2419 ] 
14:34:47: [GO18_globalSetVolt]### Host voltage value is set.
14:34:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129A20>, 0x0, False) , Command count = 2420 ] 
14:34:47: [GO18_globalSetVolt]### Host voltage value is set.
14:34:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2421 ] 
14:34:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2422 ] 
14:34:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2423 ] 
14:34:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x06129FC0>) , Command count = 2424 ] 
14:34:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CF0>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 2425 ] 
14:34:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:48: [ SetCardRCA(0x1, 0xD555) , Command count = 2426 ] 
14:34:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:48: Host Frequency set to 25000 KHz
14:34:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:48: ####CSD Registe 2.0 Values####
14:34:48: CSD_STRUCTURE                                 :0x1
14:34:48: Reserv1                                       :0x0
14:34:48: Time Access 1 TAAC                            :0xe
14:34:48: Time Access 2 NSAC*100                        :0x0
14:34:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:48: Card Command Classess CCC                     :0x5b5
14:34:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:48: DSR(driver stage register)  DSR_IMP           :0x0
14:34:48: Reserv2                                       :0x0
14:34:48: Device Size C_SIZE                            :0xedc8
14:34:48: Reserv3                                       :0x0
14:34:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:48: Reserv4                                       :0x0
14:34:48: Write Speed Factor R2W_FACTOR                 :0x2
14:34:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:48: FILE_FORMAT_GRP                               :0x0
14:34:48: COPY flag                                     :0x1
14:34:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:48: File_Format                                   :0x0
14:34:48: CRC                                           :0x0
14:34:48: ####CSD Registe Values####  

14:34:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:48: [GetSCRRegisterEntry] Passed
14:34:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:48: Data_Status_After Erases          : 0
14:34:48: CPRM Security Support             : No Security
14:34:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:48: Spec. Version                     : Version 3.0X
14:34:48: Extended Security Support         : Extended_Security_Not_Supported
14:34:48: Command Support                   : COMMAND_SUPPORT
14:34:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299F0>, <py_sfcl.CommandDataDefinition object at 0x06145030>) , Command count = 2427 ] 
14:34:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 2428 ] 
14:34:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:48: [ SetBusWidth(0x4) , Command count = 2429 ] 
14:34:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2430 ] 
14:34:48: Protected Area Size 0x28000
14:34:48: Bus Width           2
14:34:48: Secure Mode         0
14:34:48: Speed  Class        4
14:34:48: Perf Move           0
14:34:48: Au Size             9
14:34:48: Erase Size          15
14:34:48: Erase Timeout       1
14:34:48: Erase offset        1
14:34:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2431 ] 
14:34:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:48: Host Frequency set to 100000 KHz
14:34:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:48: ####CSD Registe 2.0 Values####
14:34:48: CSD_STRUCTURE                                 :0x1
14:34:48: Reserv1                                       :0x0
14:34:48: Time Access 1 TAAC                            :0xe
14:34:48: Time Access 2 NSAC*100                        :0x0
14:34:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:48: Card Command Classess CCC                     :0x5b5
14:34:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:48: DSR(driver stage register)  DSR_IMP           :0x0
14:34:48: Reserv2                                       :0x0
14:34:48: Device Size C_SIZE                            :0xedc8
14:34:48: Reserv3                                       :0x0
14:34:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:48: Reserv4                                       :0x0
14:34:48: Write Speed Factor R2W_FACTOR                 :0x2
14:34:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:48: FILE_FORMAT_GRP                               :0x0
14:34:48: COPY flag                                     :0x1
14:34:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:48: File_Format                                   :0x0
14:34:48: CRC                                           :0x0
14:34:48: ####CSD Registe Values####  

14:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F690>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 2432 ] 
14:34:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 2433 ] 
14:34:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D646 to EndLba:0x3B6D6C6 with One's Pattern
14:34:49: [ WrLbaNoData(0x3B6D646, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2434 ] 
14:34:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D646 to EndLba:0x3B6D6C6 with One's Pattern 

14:34:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D6C6 to EndLba:0x3B6D746 with One's Pattern
14:34:49: [ WrLbaNoData(0x3B6D6C6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2435 ] 
14:34:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D6C6 to EndLba:0x3B6D746 with One's Pattern 

14:34:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231DF to EndLba:0x250E7 with Constant Pattern
14:34:49: [ RdLbaNoData(0x231DF, 0x1F08, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2436 ] 
14:34:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231DF to EndLba:0x250E7 with Constant Pattern 

14:34:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3970
14:34:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061297B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129330>, <py_sfcl.PySEnhancedCmdData object at 0x061291E0>, <None>) , Command count = 2437 ] 
14:34:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:51: Host Frequency set to 25000 KHz
14:34:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x061299C0>, 0x0, True) , Command count = 2438 ] 
14:34:51: [GO18_globalSetVolt]### Host voltage value is set.
14:34:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129630>, 0x0, False) , Command count = 2439 ] 
14:34:51: [GO18_globalSetVolt]### Host voltage value is set.
14:34:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2440 ] 
14:34:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2441 ] 
14:34:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2442 ] 
14:34:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 2443 ] 
14:34:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py_sfcl.CommandDataDefinition object at 0x0611CD20>) , Command count = 2444 ] 
14:34:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:51: [ SetCardRCA(0x1, 0xD555) , Command count = 2445 ] 
14:34:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:51: Host Frequency set to 25000 KHz
14:34:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:51: ####CSD Registe 2.0 Values####
14:34:51: CSD_STRUCTURE                                 :0x1
14:34:51: Reserv1                                       :0x0
14:34:51: Time Access 1 TAAC                            :0xe
14:34:51: Time Access 2 NSAC*100                        :0x0
14:34:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:51: Card Command Classess CCC                     :0x5b5
14:34:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:51: DSR(driver stage register)  DSR_IMP           :0x0
14:34:51: Reserv2                                       :0x0
14:34:51: Device Size C_SIZE                            :0xedc8
14:34:51: Reserv3                                       :0x0
14:34:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:51: Reserv4                                       :0x0
14:34:51: Write Speed Factor R2W_FACTOR                 :0x2
14:34:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:51: FILE_FORMAT_GRP                               :0x0
14:34:51: COPY flag                                     :0x1
14:34:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:51: File_Format                                   :0x0
14:34:51: CRC                                           :0x0
14:34:51: ####CSD Registe Values####  

14:34:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:51: [GetSCRRegisterEntry] Passed
14:34:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:51: Data_Status_After Erases          : 0
14:34:51: CPRM Security Support             : No Security
14:34:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:51: Spec. Version                     : Version 3.0X
14:34:51: Extended Security Support         : Extended_Security_Not_Supported
14:34:51: Command Support                   : COMMAND_SUPPORT
14:34:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDB0>, <py_sfcl.CommandDataDefinition object at 0x0611CE40>) , Command count = 2446 ] 
14:34:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E390>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 2447 ] 
14:34:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:51: [ SetBusWidth(0x4) , Command count = 2448 ] 
14:34:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2449 ] 
14:34:51: Protected Area Size 0x28000
14:34:51: Bus Width           2
14:34:51: Secure Mode         0
14:34:51: Speed  Class        4
14:34:51: Perf Move           0
14:34:51: Au Size             9
14:34:51: Erase Size          15
14:34:51: Erase Timeout       1
14:34:51: Erase offset        1
14:34:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2450 ] 
14:34:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:51: Host Frequency set to 100000 KHz
14:34:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:51: ####CSD Registe 2.0 Values####
14:34:51: CSD_STRUCTURE                                 :0x1
14:34:51: Reserv1                                       :0x0
14:34:51: Time Access 1 TAAC                            :0xe
14:34:51: Time Access 2 NSAC*100                        :0x0
14:34:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:51: Card Command Classess CCC                     :0x5b5
14:34:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:52: DSR(driver stage register)  DSR_IMP           :0x0
14:34:52: Reserv2                                       :0x0
14:34:52: Device Size C_SIZE                            :0xedc8
14:34:52: Reserv3                                       :0x0
14:34:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:52: Reserv4                                       :0x0
14:34:52: Write Speed Factor R2W_FACTOR                 :0x2
14:34:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:52: FILE_FORMAT_GRP                               :0x0
14:34:52: COPY flag                                     :0x1
14:34:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:52: File_Format                                   :0x0
14:34:52: CRC                                           :0x0
14:34:52: ####CSD Registe Values####  

14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2D0>, <py_sfcl.CommandDataDefinition object at 0x0612E9F0>) , Command count = 2451 ] 
14:34:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8A0>, <py_sfcl.CommandDataDefinition object at 0x06129300>) , Command count = 2452 ] 
14:34:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7187C to EndLba:0x3B718FC with One's Pattern
14:34:52: [ WrLbaNoData(0x3B7187C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2453 ] 
14:34:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7187C to EndLba:0x3B718FC with One's Pattern 

14:34:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B718FC to EndLba:0x3B7197C with One's Pattern
14:34:52: [ WrLbaNoData(0x3B718FC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2454 ] 
14:34:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B718FC to EndLba:0x3B7197C with One's Pattern 

14:34:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:52: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E1 to EndLba:0x250E7 with Constant Pattern
14:34:52: [ RdLbaNoData(0x231E1, 0x1F06, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2455 ] 
14:34:52: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E1 to EndLba:0x250E7 with Constant Pattern 

14:34:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3969
14:34:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CB70>, <py_sfcl.PySEnhancedCmdData object at 0x06129ED0>, <None>) , Command count = 2456 ] 
14:34:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:54: Host Frequency set to 25000 KHz
14:34:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E3F0>, 0x0, True) , Command count = 2457 ] 
14:34:54: [GO18_globalSetVolt]### Host voltage value is set.
14:34:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EA20>, 0x0, False) , Command count = 2458 ] 
14:34:54: [GO18_globalSetVolt]### Host voltage value is set.
14:34:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2459 ] 
14:34:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2460 ] 
14:34:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2461 ] 
14:34:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x0612E8D0>) , Command count = 2462 ] 
14:34:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x06129F90>) , Command count = 2463 ] 
14:34:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:55: [ SetCardRCA(0x1, 0xD555) , Command count = 2464 ] 
14:34:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:55: Host Frequency set to 25000 KHz
14:34:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:55: ####CSD Registe 2.0 Values####
14:34:55: CSD_STRUCTURE                                 :0x1
14:34:55: Reserv1                                       :0x0
14:34:55: Time Access 1 TAAC                            :0xe
14:34:55: Time Access 2 NSAC*100                        :0x0
14:34:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:55: Card Command Classess CCC                     :0x5b5
14:34:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:55: DSR(driver stage register)  DSR_IMP           :0x0
14:34:55: Reserv2                                       :0x0
14:34:55: Device Size C_SIZE                            :0xedc8
14:34:55: Reserv3                                       :0x0
14:34:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:55: Reserv4                                       :0x0
14:34:55: Write Speed Factor R2W_FACTOR                 :0x2
14:34:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:55: FILE_FORMAT_GRP                               :0x0
14:34:55: COPY flag                                     :0x1
14:34:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:55: File_Format                                   :0x0
14:34:55: CRC                                           :0x0
14:34:55: ####CSD Registe Values####  

14:34:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:55: [GetSCRRegisterEntry] Passed
14:34:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:55: Data_Status_After Erases          : 0
14:34:55: CPRM Security Support             : No Security
14:34:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:55: Spec. Version                     : Version 3.0X
14:34:55: Extended Security Support         : Extended_Security_Not_Supported
14:34:55: Command Support                   : COMMAND_SUPPORT
14:34:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E750>, <py_sfcl.CommandDataDefinition object at 0x06129600>) , Command count = 2465 ] 
14:34:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5D0>, <py_sfcl.CommandDataDefinition object at 0x0612ED20>) , Command count = 2466 ] 
14:34:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:55: [ SetBusWidth(0x4) , Command count = 2467 ] 
14:34:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E420>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2468 ] 
14:34:55: Protected Area Size 0x28000
14:34:55: Bus Width           2
14:34:55: Secure Mode         0
14:34:55: Speed  Class        4
14:34:55: Perf Move           0
14:34:55: Au Size             9
14:34:55: Erase Size          15
14:34:55: Erase Timeout       1
14:34:55: Erase offset        1
14:34:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2469 ] 
14:34:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:55: Host Frequency set to 100000 KHz
14:34:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:55: ####CSD Registe 2.0 Values####
14:34:55: CSD_STRUCTURE                                 :0x1
14:34:55: Reserv1                                       :0x0
14:34:55: Time Access 1 TAAC                            :0xe
14:34:55: Time Access 2 NSAC*100                        :0x0
14:34:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:55: Card Command Classess CCC                     :0x5b5
14:34:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:55: DSR(driver stage register)  DSR_IMP           :0x0
14:34:55: Reserv2                                       :0x0
14:34:55: Device Size C_SIZE                            :0xedc8
14:34:55: Reserv3                                       :0x0
14:34:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:55: Reserv4                                       :0x0
14:34:55: Write Speed Factor R2W_FACTOR                 :0x2
14:34:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:55: FILE_FORMAT_GRP                               :0x0
14:34:55: COPY flag                                     :0x1
14:34:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:55: File_Format                                   :0x0
14:34:55: CRC                                           :0x0
14:34:55: ####CSD Registe Values####  

14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x061321B0>) , Command count = 2470 ] 
14:34:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BA0>, <py_sfcl.CommandDataDefinition object at 0x0612E930>) , Command count = 2471 ] 
14:34:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7154A to EndLba:0x3B715CA with One's Pattern
14:34:55: [ WrLbaNoData(0x3B7154A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2472 ] 
14:34:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7154A to EndLba:0x3B715CA with One's Pattern 

14:34:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B715CA to EndLba:0x3B7164A with One's Pattern
14:34:55: [ WrLbaNoData(0x3B715CA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2473 ] 
14:34:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B715CA to EndLba:0x3B7164A with One's Pattern 

14:34:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E1 to EndLba:0x250E5 with Constant Pattern
14:34:56: [ RdLbaNoData(0x231E1, 0x1F04, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2474 ] 
14:34:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E1 to EndLba:0x250E5 with Constant Pattern 

14:34:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3968
14:34:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061323F0>, <py_sfcl.PySEnhancedCmdData object at 0x061326C0>, <None>) , Command count = 2475 ] 
14:34:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:34:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:58: Host Frequency set to 25000 KHz
14:34:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:34:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:34:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F7B0>, 0x0, True) , Command count = 2476 ] 
14:34:58: [GO18_globalSetVolt]### Host voltage value is set.
14:34:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:34:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E4B0>, 0x0, False) , Command count = 2477 ] 
14:34:58: [GO18_globalSetVolt]### Host voltage value is set.
14:34:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2478 ] 
14:34:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:34:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2479 ] 
14:34:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:34:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:34:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:34:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:34:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:34:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2480 ] 
14:34:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:34:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x0612E360>) , Command count = 2481 ] 
14:34:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322A0>, <py_sfcl.CommandDataDefinition object at 0x0612E630>) , Command count = 2482 ] 
14:34:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:34:58: [ SetCardRCA(0x1, 0xD555) , Command count = 2483 ] 
14:34:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:34:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:34:58: Host Frequency set to 25000 KHz
14:34:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:34:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:58: ####CSD Registe 2.0 Values####
14:34:58: CSD_STRUCTURE                                 :0x1
14:34:58: Reserv1                                       :0x0
14:34:58: Time Access 1 TAAC                            :0xe
14:34:58: Time Access 2 NSAC*100                        :0x0
14:34:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:34:58: Card Command Classess CCC                     :0x5b5
14:34:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:58: DSR(driver stage register)  DSR_IMP           :0x0
14:34:58: Reserv2                                       :0x0
14:34:58: Device Size C_SIZE                            :0xedc8
14:34:58: Reserv3                                       :0x0
14:34:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:58: Reserv4                                       :0x0
14:34:58: Write Speed Factor R2W_FACTOR                 :0x2
14:34:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:58: FILE_FORMAT_GRP                               :0x0
14:34:58: COPY flag                                     :0x1
14:34:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:58: File_Format                                   :0x0
14:34:58: CRC                                           :0x0
14:34:58: ####CSD Registe Values####  

14:34:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:34:58: [GetSCRRegisterEntry] Passed
14:34:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:34:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:34:58: Data_Status_After Erases          : 0
14:34:58: CPRM Security Support             : No Security
14:34:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:34:58: Spec. Version                     : Version 3.0X
14:34:58: Extended Security Support         : Extended_Security_Not_Supported
14:34:58: Command Support                   : COMMAND_SUPPORT
14:34:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E990>, <py_sfcl.CommandDataDefinition object at 0x06129C00>) , Command count = 2484 ] 
14:34:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:34:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF00>, <py_sfcl.CommandDataDefinition object at 0x061322D0>) , Command count = 2485 ] 
14:34:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:34:58: [ SetBusWidth(0x4) , Command count = 2486 ] 
14:34:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:34:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2487 ] 
14:34:58: Protected Area Size 0x28000
14:34:58: Bus Width           2
14:34:58: Secure Mode         0
14:34:58: Speed  Class        4
14:34:58: Perf Move           0
14:34:58: Au Size             9
14:34:58: Erase Size          15
14:34:58: Erase Timeout       1
14:34:58: Erase offset        1
14:34:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:34:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:34:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2488 ] 
14:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:34:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:34:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:34:58: Host Frequency set to 100000 KHz
14:34:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:34:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:34:58: ####CSD Registe 2.0 Values####
14:34:58: CSD_STRUCTURE                                 :0x1
14:34:59: Reserv1                                       :0x0
14:34:59: Time Access 1 TAAC                            :0xe
14:34:59: Time Access 2 NSAC*100                        :0x0
14:34:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:34:59: Card Command Classess CCC                     :0x5b5
14:34:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:34:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:34:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:34:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:34:59: DSR(driver stage register)  DSR_IMP           :0x0
14:34:59: Reserv2                                       :0x0
14:34:59: Device Size C_SIZE                            :0xedc8
14:34:59: Reserv3                                       :0x0
14:34:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:34:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:34:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:34:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:34:59: Reserv4                                       :0x0
14:34:59: Write Speed Factor R2W_FACTOR                 :0x2
14:34:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:34:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:34:59: FILE_FORMAT_GRP                               :0x0
14:34:59: COPY flag                                     :0x1
14:34:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:34:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:34:59: File_Format                                   :0x0
14:34:59: CRC                                           :0x0
14:34:59: ####CSD Registe Values####  

14:34:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132780>, <py_sfcl.CommandDataDefinition object at 0x06132C90>) , Command count = 2489 ] 
14:34:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:34:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC30>, <py_sfcl.CommandDataDefinition object at 0x06132420>) , Command count = 2490 ] 
14:34:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:34:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:34:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:34:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71DF5 to EndLba:0x3B71E75 with One's Pattern
14:34:59: [ WrLbaNoData(0x3B71DF5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2491 ] 
14:34:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71DF5 to EndLba:0x3B71E75 with One's Pattern 

14:34:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71E75 to EndLba:0x3B71EF5 with One's Pattern
14:34:59: [ WrLbaNoData(0x3B71E75, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2492 ] 
14:34:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71E75 to EndLba:0x3B71EF5 with One's Pattern 

14:34:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:34:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E3 to EndLba:0x250E5 with Constant Pattern
14:34:59: [ RdLbaNoData(0x231E3, 0x1F02, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2493 ] 
14:34:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E3 to EndLba:0x250E5 with Constant Pattern 

14:34:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3967
14:34:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:34:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132210>, <py_sfcl.PySEnhancedCmdData object at 0x06132F60>, <None>) , Command count = 2494 ] 
14:34:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:34:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:01: Host Frequency set to 25000 KHz
14:35:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EE40>, 0x0, True) , Command count = 2495 ] 
14:35:01: [GO18_globalSetVolt]### Host voltage value is set.
14:35:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E35A0>, 0x0, False) , Command count = 2496 ] 
14:35:01: [GO18_globalSetVolt]### Host voltage value is set.
14:35:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2497 ] 
14:35:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2498 ] 
14:35:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2499 ] 
14:35:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x0612ED50>) , Command count = 2500 ] 
14:35:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F330>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 2501 ] 
14:35:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:01: [ SetCardRCA(0x1, 0xD555) , Command count = 2502 ] 
14:35:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:02: Host Frequency set to 25000 KHz
14:35:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:02: ####CSD Registe 2.0 Values####
14:35:02: CSD_STRUCTURE                                 :0x1
14:35:02: Reserv1                                       :0x0
14:35:02: Time Access 1 TAAC                            :0xe
14:35:02: Time Access 2 NSAC*100                        :0x0
14:35:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:02: Card Command Classess CCC                     :0x5b5
14:35:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:02: DSR(driver stage register)  DSR_IMP           :0x0
14:35:02: Reserv2                                       :0x0
14:35:02: Device Size C_SIZE                            :0xedc8
14:35:02: Reserv3                                       :0x0
14:35:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:02: Reserv4                                       :0x0
14:35:02: Write Speed Factor R2W_FACTOR                 :0x2
14:35:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:02: FILE_FORMAT_GRP                               :0x0
14:35:02: COPY flag                                     :0x1
14:35:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:02: File_Format                                   :0x0
14:35:02: CRC                                           :0x0
14:35:02: ####CSD Registe Values####  

14:35:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:02: [GetSCRRegisterEntry] Passed
14:35:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:02: Data_Status_After Erases          : 0
14:35:02: CPRM Security Support             : No Security
14:35:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:02: Spec. Version                     : Version 3.0X
14:35:02: Extended Security Support         : Extended_Security_Not_Supported
14:35:02: Command Support                   : COMMAND_SUPPORT
14:35:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 2503 ] 
14:35:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F30>, <py_sfcl.CommandDataDefinition object at 0x06132150>) , Command count = 2504 ] 
14:35:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:02: [ SetBusWidth(0x4) , Command count = 2505 ] 
14:35:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2506 ] 
14:35:02: Protected Area Size 0x28000
14:35:02: Bus Width           2
14:35:02: Secure Mode         0
14:35:02: Speed  Class        4
14:35:02: Perf Move           0
14:35:02: Au Size             9
14:35:02: Erase Size          15
14:35:02: Erase Timeout       1
14:35:02: Erase offset        1
14:35:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2507 ] 
14:35:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:02: Host Frequency set to 100000 KHz
14:35:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:02: ####CSD Registe 2.0 Values####
14:35:02: CSD_STRUCTURE                                 :0x1
14:35:02: Reserv1                                       :0x0
14:35:02: Time Access 1 TAAC                            :0xe
14:35:02: Time Access 2 NSAC*100                        :0x0
14:35:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:02: Card Command Classess CCC                     :0x5b5
14:35:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:02: DSR(driver stage register)  DSR_IMP           :0x0
14:35:02: Reserv2                                       :0x0
14:35:02: Device Size C_SIZE                            :0xedc8
14:35:02: Reserv3                                       :0x0
14:35:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:02: Reserv4                                       :0x0
14:35:02: Write Speed Factor R2W_FACTOR                 :0x2
14:35:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:02: FILE_FORMAT_GRP                               :0x0
14:35:02: COPY flag                                     :0x1
14:35:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:02: File_Format                                   :0x0
14:35:02: CRC                                           :0x0
14:35:02: ####CSD Registe Values####  

14:35:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F900>, <py_sfcl.CommandDataDefinition object at 0x0613FEA0>) , Command count = 2508 ] 
14:35:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 2509 ] 
14:35:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F871 to EndLba:0x3B6F8F1 with One's Pattern
14:35:02: [ WrLbaNoData(0x3B6F871, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2510 ] 
14:35:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F871 to EndLba:0x3B6F8F1 with One's Pattern 

14:35:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F8F1 to EndLba:0x3B6F971 with One's Pattern
14:35:02: [ WrLbaNoData(0x3B6F8F1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2511 ] 
14:35:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F8F1 to EndLba:0x3B6F971 with One's Pattern 

14:35:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E3 to EndLba:0x250E3 with Constant Pattern
14:35:02: [ RdLbaNoData(0x231E3, 0x1F00, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2512 ] 
14:35:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E3 to EndLba:0x250E3 with Constant Pattern 

14:35:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3966
14:35:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EBD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061324B0>, <py_sfcl.PySEnhancedCmdData object at 0x06132AB0>, <None>) , Command count = 2513 ] 
14:35:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:05: Host Frequency set to 25000 KHz
14:35:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EE10>, 0x0, True) , Command count = 2514 ] 
14:35:05: [GO18_globalSetVolt]### Host voltage value is set.
14:35:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132540>, 0x0, False) , Command count = 2515 ] 
14:35:05: [GO18_globalSetVolt]### Host voltage value is set.
14:35:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2516 ] 
14:35:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2517 ] 
14:35:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2518 ] 
14:35:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138450>, <py_sfcl.CommandDataDefinition object at 0x06132E70>) , Command count = 2519 ] 
14:35:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06132990>) , Command count = 2520 ] 
14:35:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:05: [ SetCardRCA(0x1, 0xD555) , Command count = 2521 ] 
14:35:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:05: Host Frequency set to 25000 KHz
14:35:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:05: ####CSD Registe 2.0 Values####
14:35:05: CSD_STRUCTURE                                 :0x1
14:35:05: Reserv1                                       :0x0
14:35:05: Time Access 1 TAAC                            :0xe
14:35:05: Time Access 2 NSAC*100                        :0x0
14:35:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:05: Card Command Classess CCC                     :0x5b5
14:35:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:05: DSR(driver stage register)  DSR_IMP           :0x0
14:35:05: Reserv2                                       :0x0
14:35:05: Device Size C_SIZE                            :0xedc8
14:35:05: Reserv3                                       :0x0
14:35:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:05: Reserv4                                       :0x0
14:35:05: Write Speed Factor R2W_FACTOR                 :0x2
14:35:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:05: FILE_FORMAT_GRP                               :0x0
14:35:05: COPY flag                                     :0x1
14:35:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:05: File_Format                                   :0x0
14:35:05: CRC                                           :0x0
14:35:05: ####CSD Registe Values####  

14:35:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:05: [GetSCRRegisterEntry] Passed
14:35:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:05: Data_Status_After Erases          : 0
14:35:05: CPRM Security Support             : No Security
14:35:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:05: Spec. Version                     : Version 3.0X
14:35:05: Extended Security Support         : Extended_Security_Not_Supported
14:35:05: Command Support                   : COMMAND_SUPPORT
14:35:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327E0>, <py_sfcl.CommandDataDefinition object at 0x061325A0>) , Command count = 2522 ] 
14:35:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138180>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 2523 ] 
14:35:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:05: [ SetBusWidth(0x4) , Command count = 2524 ] 
14:35:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132900>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2525 ] 
14:35:05: Protected Area Size 0x28000
14:35:05: Bus Width           2
14:35:05: Secure Mode         0
14:35:05: Speed  Class        4
14:35:05: Perf Move           0
14:35:05: Au Size             9
14:35:05: Erase Size          15
14:35:05: Erase Timeout       1
14:35:05: Erase offset        1
14:35:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2526 ] 
14:35:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:05: Host Frequency set to 100000 KHz
14:35:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:05: ####CSD Registe 2.0 Values####
14:35:05: CSD_STRUCTURE                                 :0x1
14:35:05: Reserv1                                       :0x0
14:35:05: Time Access 1 TAAC                            :0xe
14:35:05: Time Access 2 NSAC*100                        :0x0
14:35:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:05: Card Command Classess CCC                     :0x5b5
14:35:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:05: DSR(driver stage register)  DSR_IMP           :0x0
14:35:05: Reserv2                                       :0x0
14:35:05: Device Size C_SIZE                            :0xedc8
14:35:05: Reserv3                                       :0x0
14:35:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:06: Reserv4                                       :0x0
14:35:06: Write Speed Factor R2W_FACTOR                 :0x2
14:35:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:06: FILE_FORMAT_GRP                               :0x0
14:35:06: COPY flag                                     :0x1
14:35:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:06: File_Format                                   :0x0
14:35:06: CRC                                           :0x0
14:35:06: ####CSD Registe Values####  

14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138630>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 2527 ] 
14:35:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138030>, <py_sfcl.CommandDataDefinition object at 0x06132360>) , Command count = 2528 ] 
14:35:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B7B to EndLba:0x3B70BFB with One's Pattern
14:35:06: [ WrLbaNoData(0x3B70B7B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2529 ] 
14:35:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B7B to EndLba:0x3B70BFB with One's Pattern 

14:35:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70BFB to EndLba:0x3B70C7B with One's Pattern
14:35:06: [ WrLbaNoData(0x3B70BFB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2530 ] 
14:35:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70BFB to EndLba:0x3B70C7B with One's Pattern 

14:35:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E5 to EndLba:0x250E3 with Constant Pattern
14:35:06: [ RdLbaNoData(0x231E5, 0x1EFE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2531 ] 
14:35:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E5 to EndLba:0x250E3 with Constant Pattern 

14:35:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3965
14:35:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061380C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132BD0>, <py_sfcl.PySEnhancedCmdData object at 0x06132ED0>, <None>) , Command count = 2532 ] 
14:35:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:08: Host Frequency set to 25000 KHz
14:35:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EEA0>, 0x0, True) , Command count = 2533 ] 
14:35:08: [GO18_globalSetVolt]### Host voltage value is set.
14:35:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x061383F0>, 0x0, False) , Command count = 2534 ] 
14:35:08: [GO18_globalSetVolt]### Host voltage value is set.
14:35:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2535 ] 
14:35:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2536 ] 
14:35:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2537 ] 
14:35:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320C0>, <py_sfcl.CommandDataDefinition object at 0x06138090>) , Command count = 2538 ] 
14:35:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138840>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 2539 ] 
14:35:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:08: [ SetCardRCA(0x1, 0xD555) , Command count = 2540 ] 
14:35:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:09: Host Frequency set to 25000 KHz
14:35:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:09: ####CSD Registe 2.0 Values####
14:35:09: CSD_STRUCTURE                                 :0x1
14:35:09: Reserv1                                       :0x0
14:35:09: Time Access 1 TAAC                            :0xe
14:35:09: Time Access 2 NSAC*100                        :0x0
14:35:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:09: Card Command Classess CCC                     :0x5b5
14:35:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:09: DSR(driver stage register)  DSR_IMP           :0x0
14:35:09: Reserv2                                       :0x0
14:35:09: Device Size C_SIZE                            :0xedc8
14:35:09: Reserv3                                       :0x0
14:35:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:09: Reserv4                                       :0x0
14:35:09: Write Speed Factor R2W_FACTOR                 :0x2
14:35:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:09: FILE_FORMAT_GRP                               :0x0
14:35:09: COPY flag                                     :0x1
14:35:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:09: File_Format                                   :0x0
14:35:09: CRC                                           :0x0
14:35:09: ####CSD Registe Values####  

14:35:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:09: [GetSCRRegisterEntry] Passed
14:35:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:09: Data_Status_After Erases          : 0
14:35:09: CPRM Security Support             : No Security
14:35:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:09: Spec. Version                     : Version 3.0X
14:35:09: Extended Security Support         : Extended_Security_Not_Supported
14:35:09: Command Support                   : COMMAND_SUPPORT
14:35:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138570>, <py_sfcl.CommandDataDefinition object at 0x061383C0>) , Command count = 2541 ] 
14:35:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 2542 ] 
14:35:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:09: [ SetBusWidth(0x4) , Command count = 2543 ] 
14:35:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138300>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2544 ] 
14:35:09: Protected Area Size 0x28000
14:35:09: Bus Width           2
14:35:09: Secure Mode         0
14:35:09: Speed  Class        4
14:35:09: Perf Move           0
14:35:09: Au Size             9
14:35:09: Erase Size          15
14:35:09: Erase Timeout       1
14:35:09: Erase offset        1
14:35:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2545 ] 
14:35:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:09: Host Frequency set to 100000 KHz
14:35:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:09: ####CSD Registe 2.0 Values####
14:35:09: CSD_STRUCTURE                                 :0x1
14:35:09: Reserv1                                       :0x0
14:35:09: Time Access 1 TAAC                            :0xe
14:35:09: Time Access 2 NSAC*100                        :0x0
14:35:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:09: Card Command Classess CCC                     :0x5b5
14:35:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:09: DSR(driver stage register)  DSR_IMP           :0x0
14:35:09: Reserv2                                       :0x0
14:35:09: Device Size C_SIZE                            :0xedc8
14:35:09: Reserv3                                       :0x0
14:35:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:09: Reserv4                                       :0x0
14:35:09: Write Speed Factor R2W_FACTOR                 :0x2
14:35:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:09: FILE_FORMAT_GRP                               :0x0
14:35:09: COPY flag                                     :0x1
14:35:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:09: File_Format                                   :0x0
14:35:09: CRC                                           :0x0
14:35:09: ####CSD Registe Values####  

14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132870>, <py_sfcl.CommandDataDefinition object at 0x06138420>) , Command count = 2546 ] 
14:35:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A50>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 2547 ] 
14:35:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7068D to EndLba:0x3B7070D with One's Pattern
14:35:09: [ WrLbaNoData(0x3B7068D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2548 ] 
14:35:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7068D to EndLba:0x3B7070D with One's Pattern 

14:35:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7070D to EndLba:0x3B7078D with One's Pattern
14:35:09: [ WrLbaNoData(0x3B7070D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2549 ] 
14:35:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7070D to EndLba:0x3B7078D with One's Pattern 

14:35:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E5 to EndLba:0x250E1 with Constant Pattern
14:35:09: [ RdLbaNoData(0x231E5, 0x1EFC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2550 ] 
14:35:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E5 to EndLba:0x250E1 with Constant Pattern 

14:35:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3964
14:35:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FFC0>, <py_sfcl.PySEnhancedCmdData object at 0x06138D20>, <None>) , Command count = 2551 ] 
14:35:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:11: Host Frequency set to 25000 KHz
14:35:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138990>, 0x0, True) , Command count = 2552 ] 
14:35:11: [GO18_globalSetVolt]### Host voltage value is set.
14:35:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138240>, 0x0, False) , Command count = 2553 ] 
14:35:11: [GO18_globalSetVolt]### Host voltage value is set.
14:35:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2554 ] 
14:35:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2555 ] 
14:35:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2556 ] 
14:35:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x06138330>) , Command count = 2557 ] 
14:35:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x061384E0>) , Command count = 2558 ] 
14:35:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2559 ] 
14:35:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:12: Host Frequency set to 25000 KHz
14:35:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:12: ####CSD Registe 2.0 Values####
14:35:12: CSD_STRUCTURE                                 :0x1
14:35:12: Reserv1                                       :0x0
14:35:12: Time Access 1 TAAC                            :0xe
14:35:12: Time Access 2 NSAC*100                        :0x0
14:35:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:12: Card Command Classess CCC                     :0x5b5
14:35:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:12: DSR(driver stage register)  DSR_IMP           :0x0
14:35:12: Reserv2                                       :0x0
14:35:12: Device Size C_SIZE                            :0xedc8
14:35:12: Reserv3                                       :0x0
14:35:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:12: Reserv4                                       :0x0
14:35:12: Write Speed Factor R2W_FACTOR                 :0x2
14:35:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:12: FILE_FORMAT_GRP                               :0x0
14:35:12: COPY flag                                     :0x1
14:35:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:12: File_Format                                   :0x0
14:35:12: CRC                                           :0x0
14:35:12: ####CSD Registe Values####  

14:35:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:12: [GetSCRRegisterEntry] Passed
14:35:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:12: Data_Status_After Erases          : 0
14:35:12: CPRM Security Support             : No Security
14:35:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:12: Spec. Version                     : Version 3.0X
14:35:12: Extended Security Support         : Extended_Security_Not_Supported
14:35:12: Command Support                   : COMMAND_SUPPORT
14:35:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138690>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 2560 ] 
14:35:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 2561 ] 
14:35:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:12: [ SetBusWidth(0x4) , Command count = 2562 ] 
14:35:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2563 ] 
14:35:12: Protected Area Size 0x28000
14:35:12: Bus Width           2
14:35:12: Secure Mode         0
14:35:12: Speed  Class        4
14:35:12: Perf Move           0
14:35:12: Au Size             9
14:35:12: Erase Size          15
14:35:12: Erase Timeout       1
14:35:12: Erase offset        1
14:35:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2564 ] 
14:35:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:12: Host Frequency set to 100000 KHz
14:35:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:12: ####CSD Registe 2.0 Values####
14:35:12: CSD_STRUCTURE                                 :0x1
14:35:12: Reserv1                                       :0x0
14:35:12: Time Access 1 TAAC                            :0xe
14:35:12: Time Access 2 NSAC*100                        :0x0
14:35:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:12: Card Command Classess CCC                     :0x5b5
14:35:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:12: DSR(driver stage register)  DSR_IMP           :0x0
14:35:12: Reserv2                                       :0x0
14:35:12: Device Size C_SIZE                            :0xedc8
14:35:12: Reserv3                                       :0x0
14:35:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:12: Reserv4                                       :0x0
14:35:12: Write Speed Factor R2W_FACTOR                 :0x2
14:35:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:12: FILE_FORMAT_GRP                               :0x0
14:35:12: COPY flag                                     :0x1
14:35:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:12: File_Format                                   :0x0
14:35:12: CRC                                           :0x0
14:35:12: ####CSD Registe Values####  

14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D50>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 2565 ] 
14:35:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x0613FE10>) , Command count = 2566 ] 
14:35:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA19 to EndLba:0x3B6EA99 with One's Pattern
14:35:13: [ WrLbaNoData(0x3B6EA19, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2567 ] 
14:35:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA19 to EndLba:0x3B6EA99 with One's Pattern 

14:35:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA99 to EndLba:0x3B6EB19 with One's Pattern
14:35:13: [ WrLbaNoData(0x3B6EA99, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2568 ] 
14:35:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA99 to EndLba:0x3B6EB19 with One's Pattern 

14:35:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E7 to EndLba:0x250E1 with Constant Pattern
14:35:13: [ RdLbaNoData(0x231E7, 0x1EFA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2569 ] 
14:35:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E7 to EndLba:0x250E1 with Constant Pattern 

14:35:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3963
14:35:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138A50>, <py_sfcl.PySEnhancedCmdData object at 0x061388A0>, <None>) , Command count = 2570 ] 
14:35:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:15: Host Frequency set to 25000 KHz
14:35:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132180>, 0x0, True) , Command count = 2571 ] 
14:35:15: [GO18_globalSetVolt]### Host voltage value is set.
14:35:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138AB0>, 0x0, False) , Command count = 2572 ] 
14:35:15: [GO18_globalSetVolt]### Host voltage value is set.
14:35:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2573 ] 
14:35:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2574 ] 
14:35:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2575 ] 
14:35:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x0613F630>) , Command count = 2576 ] 
14:35:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 2577 ] 
14:35:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:15: [ SetCardRCA(0x1, 0xD555) , Command count = 2578 ] 
14:35:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:15: Host Frequency set to 25000 KHz
14:35:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:15: ####CSD Registe 2.0 Values####
14:35:15: CSD_STRUCTURE                                 :0x1
14:35:15: Reserv1                                       :0x0
14:35:15: Time Access 1 TAAC                            :0xe
14:35:15: Time Access 2 NSAC*100                        :0x0
14:35:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:15: Card Command Classess CCC                     :0x5b5
14:35:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:15: DSR(driver stage register)  DSR_IMP           :0x0
14:35:15: Reserv2                                       :0x0
14:35:15: Device Size C_SIZE                            :0xedc8
14:35:15: Reserv3                                       :0x0
14:35:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:15: Reserv4                                       :0x0
14:35:15: Write Speed Factor R2W_FACTOR                 :0x2
14:35:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:15: FILE_FORMAT_GRP                               :0x0
14:35:15: COPY flag                                     :0x1
14:35:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:15: File_Format                                   :0x0
14:35:15: CRC                                           :0x0
14:35:15: ####CSD Registe Values####  

14:35:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:15: [GetSCRRegisterEntry] Passed
14:35:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:15: Data_Status_After Erases          : 0
14:35:15: CPRM Security Support             : No Security
14:35:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:15: Spec. Version                     : Version 3.0X
14:35:15: Extended Security Support         : Extended_Security_Not_Supported
14:35:15: Command Support                   : COMMAND_SUPPORT
14:35:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138DB0>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 2579 ] 
14:35:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A80>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 2580 ] 
14:35:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:15: [ SetBusWidth(0x4) , Command count = 2581 ] 
14:35:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2582 ] 
14:35:15: Protected Area Size 0x28000
14:35:15: Bus Width           2
14:35:15: Secure Mode         0
14:35:15: Speed  Class        4
14:35:15: Perf Move           0
14:35:15: Au Size             9
14:35:15: Erase Size          15
14:35:15: Erase Timeout       1
14:35:15: Erase offset        1
14:35:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2583 ] 
14:35:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:15: Host Frequency set to 100000 KHz
14:35:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:15: ####CSD Registe 2.0 Values####
14:35:15: CSD_STRUCTURE                                 :0x1
14:35:15: Reserv1                                       :0x0
14:35:15: Time Access 1 TAAC                            :0xe
14:35:15: Time Access 2 NSAC*100                        :0x0
14:35:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:15: Card Command Classess CCC                     :0x5b5
14:35:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:16: DSR(driver stage register)  DSR_IMP           :0x0
14:35:16: Reserv2                                       :0x0
14:35:16: Device Size C_SIZE                            :0xedc8
14:35:16: Reserv3                                       :0x0
14:35:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:16: Reserv4                                       :0x0
14:35:16: Write Speed Factor R2W_FACTOR                 :0x2
14:35:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:16: FILE_FORMAT_GRP                               :0x0
14:35:16: COPY flag                                     :0x1
14:35:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:16: File_Format                                   :0x0
14:35:16: CRC                                           :0x0
14:35:16: ####CSD Registe Values####  

14:35:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E40>, <py_sfcl.CommandDataDefinition object at 0x0613F390>) , Command count = 2584 ] 
14:35:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F60>, <py_sfcl.CommandDataDefinition object at 0x0613FC00>) , Command count = 2585 ] 
14:35:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B716F0 to EndLba:0x3B71770 with One's Pattern
14:35:16: [ WrLbaNoData(0x3B716F0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2586 ] 
14:35:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B716F0 to EndLba:0x3B71770 with One's Pattern 

14:35:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71770 to EndLba:0x3B717F0 with One's Pattern
14:35:16: [ WrLbaNoData(0x3B71770, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2587 ] 
14:35:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71770 to EndLba:0x3B717F0 with One's Pattern 

14:35:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E7 to EndLba:0x250DF with Constant Pattern
14:35:16: [ RdLbaNoData(0x231E7, 0x1EF8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2588 ] 
14:35:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E7 to EndLba:0x250DF with Constant Pattern 

14:35:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3962
14:35:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05184030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0606F2D0>, <py_sfcl.PySEnhancedCmdData object at 0x0613FAE0>, <None>) , Command count = 2589 ] 
14:35:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:18: Host Frequency set to 25000 KHz
14:35:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x052ADED0>, 0x0, True) , Command count = 2590 ] 
14:35:18: [GO18_globalSetVolt]### Host voltage value is set.
14:35:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x052577E0>, 0x0, False) , Command count = 2591 ] 
14:35:18: [GO18_globalSetVolt]### Host voltage value is set.
14:35:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2592 ] 
14:35:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2593 ] 
14:35:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2594 ] 
14:35:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 2595 ] 
14:35:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 2596 ] 
14:35:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2597 ] 
14:35:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:19: Host Frequency set to 25000 KHz
14:35:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:19: ####CSD Registe 2.0 Values####
14:35:19: CSD_STRUCTURE                                 :0x1
14:35:19: Reserv1                                       :0x0
14:35:19: Time Access 1 TAAC                            :0xe
14:35:19: Time Access 2 NSAC*100                        :0x0
14:35:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:19: Card Command Classess CCC                     :0x5b5
14:35:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:19: DSR(driver stage register)  DSR_IMP           :0x0
14:35:19: Reserv2                                       :0x0
14:35:19: Device Size C_SIZE                            :0xedc8
14:35:19: Reserv3                                       :0x0
14:35:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:19: Reserv4                                       :0x0
14:35:19: Write Speed Factor R2W_FACTOR                 :0x2
14:35:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:19: FILE_FORMAT_GRP                               :0x0
14:35:19: COPY flag                                     :0x1
14:35:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:19: File_Format                                   :0x0
14:35:19: CRC                                           :0x0
14:35:19: ####CSD Registe Values####  

14:35:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:19: [GetSCRRegisterEntry] Passed
14:35:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:19: Data_Status_After Erases          : 0
14:35:19: CPRM Security Support             : No Security
14:35:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:19: Spec. Version                     : Version 3.0X
14:35:19: Extended Security Support         : Extended_Security_Not_Supported
14:35:19: Command Support                   : COMMAND_SUPPORT
14:35:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D80>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 2598 ] 
14:35:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F1B0>) , Command count = 2599 ] 
14:35:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:19: [ SetBusWidth(0x4) , Command count = 2600 ] 
14:35:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2601 ] 
14:35:19: Protected Area Size 0x28000
14:35:19: Bus Width           2
14:35:19: Secure Mode         0
14:35:19: Speed  Class        4
14:35:19: Perf Move           0
14:35:19: Au Size             9
14:35:19: Erase Size          15
14:35:19: Erase Timeout       1
14:35:19: Erase offset        1
14:35:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2602 ] 
14:35:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:19: Host Frequency set to 100000 KHz
14:35:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:19: ####CSD Registe 2.0 Values####
14:35:19: CSD_STRUCTURE                                 :0x1
14:35:19: Reserv1                                       :0x0
14:35:19: Time Access 1 TAAC                            :0xe
14:35:19: Time Access 2 NSAC*100                        :0x0
14:35:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:19: Card Command Classess CCC                     :0x5b5
14:35:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:19: DSR(driver stage register)  DSR_IMP           :0x0
14:35:19: Reserv2                                       :0x0
14:35:19: Device Size C_SIZE                            :0xedc8
14:35:19: Reserv3                                       :0x0
14:35:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:19: Reserv4                                       :0x0
14:35:19: Write Speed Factor R2W_FACTOR                 :0x2
14:35:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:19: FILE_FORMAT_GRP                               :0x0
14:35:19: COPY flag                                     :0x1
14:35:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:19: File_Format                                   :0x0
14:35:19: CRC                                           :0x0
14:35:19: ####CSD Registe Values####  

14:35:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0518AE70>, <py_sfcl.CommandDataDefinition object at 0x052C1F00>) , Command count = 2603 ] 
14:35:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132600>, <py_sfcl.CommandDataDefinition object at 0x060E3AE0>) , Command count = 2604 ] 
14:35:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E6FB to EndLba:0x3B6E77B with One's Pattern
14:35:19: [ WrLbaNoData(0x3B6E6FB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2605 ] 
14:35:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E6FB to EndLba:0x3B6E77B with One's Pattern 

14:35:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E77B to EndLba:0x3B6E7FB with One's Pattern
14:35:19: [ WrLbaNoData(0x3B6E77B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2606 ] 
14:35:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E77B to EndLba:0x3B6E7FB with One's Pattern 

14:35:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E9 to EndLba:0x250DF with Constant Pattern
14:35:19: [ RdLbaNoData(0x231E9, 0x1EF6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2607 ] 
14:35:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E9 to EndLba:0x250DF with Constant Pattern 

14:35:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3961
14:35:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BBFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3780>, <py_sfcl.PySEnhancedCmdData object at 0x052C1DE0>, <None>) , Command count = 2608 ] 
14:35:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:22: Host Frequency set to 25000 KHz
14:35:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138810>, 0x0, True) , Command count = 2609 ] 
14:35:22: [GO18_globalSetVolt]### Host voltage value is set.
14:35:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1A50>, 0x0, False) , Command count = 2610 ] 
14:35:22: [GO18_globalSetVolt]### Host voltage value is set.
14:35:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2611 ] 
14:35:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2612 ] 
14:35:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2613 ] 
14:35:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0611CC60>) , Command count = 2614 ] 
14:35:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 2615 ] 
14:35:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:22: [ SetCardRCA(0x1, 0xD555) , Command count = 2616 ] 
14:35:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:22: Host Frequency set to 25000 KHz
14:35:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:22: ####CSD Registe 2.0 Values####
14:35:22: CSD_STRUCTURE                                 :0x1
14:35:22: Reserv1                                       :0x0
14:35:22: Time Access 1 TAAC                            :0xe
14:35:22: Time Access 2 NSAC*100                        :0x0
14:35:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:22: Card Command Classess CCC                     :0x5b5
14:35:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:22: DSR(driver stage register)  DSR_IMP           :0x0
14:35:22: Reserv2                                       :0x0
14:35:22: Device Size C_SIZE                            :0xedc8
14:35:22: Reserv3                                       :0x0
14:35:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:22: Reserv4                                       :0x0
14:35:22: Write Speed Factor R2W_FACTOR                 :0x2
14:35:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:22: FILE_FORMAT_GRP                               :0x0
14:35:22: COPY flag                                     :0x1
14:35:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:22: File_Format                                   :0x0
14:35:22: CRC                                           :0x0
14:35:22: ####CSD Registe Values####  

14:35:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:22: [GetSCRRegisterEntry] Passed
14:35:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:22: Data_Status_After Erases          : 0
14:35:22: CPRM Security Support             : No Security
14:35:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:22: Spec. Version                     : Version 3.0X
14:35:22: Extended Security Support         : Extended_Security_Not_Supported
14:35:22: Command Support                   : COMMAND_SUPPORT
14:35:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1CC0>, <py_sfcl.CommandDataDefinition object at 0x06145090>) , Command count = 2617 ] 
14:35:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F210>) , Command count = 2618 ] 
14:35:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:22: [ SetBusWidth(0x4) , Command count = 2619 ] 
14:35:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E38D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2620 ] 
14:35:22: Protected Area Size 0x28000
14:35:22: Bus Width           2
14:35:22: Secure Mode         0
14:35:22: Speed  Class        4
14:35:22: Perf Move           0
14:35:22: Au Size             9
14:35:22: Erase Size          15
14:35:22: Erase Timeout       1
14:35:22: Erase offset        1
14:35:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2621 ] 
14:35:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:22: Host Frequency set to 100000 KHz
14:35:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:22: ####CSD Registe 2.0 Values####
14:35:22: CSD_STRUCTURE                                 :0x1
14:35:22: Reserv1                                       :0x0
14:35:22: Time Access 1 TAAC                            :0xe
14:35:22: Time Access 2 NSAC*100                        :0x0
14:35:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:22: Card Command Classess CCC                     :0x5b5
14:35:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:22: DSR(driver stage register)  DSR_IMP           :0x0
14:35:22: Reserv2                                       :0x0
14:35:22: Device Size C_SIZE                            :0xedc8
14:35:22: Reserv3                                       :0x0
14:35:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:23: Reserv4                                       :0x0
14:35:23: Write Speed Factor R2W_FACTOR                 :0x2
14:35:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:23: FILE_FORMAT_GRP                               :0x0
14:35:23: COPY flag                                     :0x1
14:35:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:23: File_Format                                   :0x0
14:35:23: CRC                                           :0x0
14:35:23: ####CSD Registe Values####  

14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F60>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 2622 ] 
14:35:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CF00>, <py_sfcl.CommandDataDefinition object at 0x060E3A50>) , Command count = 2623 ] 
14:35:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E36 to EndLba:0x3B70EB6 with One's Pattern
14:35:23: [ WrLbaNoData(0x3B70E36, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2624 ] 
14:35:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E36 to EndLba:0x3B70EB6 with One's Pattern 

14:35:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EB6 to EndLba:0x3B70F36 with One's Pattern
14:35:23: [ WrLbaNoData(0x3B70EB6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2625 ] 
14:35:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EB6 to EndLba:0x3B70F36 with One's Pattern 

14:35:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231E9 to EndLba:0x250DD with Constant Pattern
14:35:23: [ RdLbaNoData(0x231E9, 0x1EF4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2626 ] 
14:35:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231E9 to EndLba:0x250DD with Constant Pattern 

14:35:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3960
14:35:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CF30>, <py_sfcl.PySEnhancedCmdData object at 0x0611CEA0>, <None>) , Command count = 2627 ] 
14:35:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:25: Host Frequency set to 25000 KHz
14:35:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C1E0>, 0x0, True) , Command count = 2628 ] 
14:35:25: [GO18_globalSetVolt]### Host voltage value is set.
14:35:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F4E0>, 0x0, False) , Command count = 2629 ] 
14:35:25: [GO18_globalSetVolt]### Host voltage value is set.
14:35:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2630 ] 
14:35:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2631 ] 
14:35:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2632 ] 
14:35:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x0613F0C0>) , Command count = 2633 ] 
14:35:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA80>, <py_sfcl.CommandDataDefinition object at 0x0611CA20>) , Command count = 2634 ] 
14:35:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:25: [ SetCardRCA(0x1, 0xD555) , Command count = 2635 ] 
14:35:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:25: Host Frequency set to 25000 KHz
14:35:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:25: ####CSD Registe 2.0 Values####
14:35:25: CSD_STRUCTURE                                 :0x1
14:35:25: Reserv1                                       :0x0
14:35:25: Time Access 1 TAAC                            :0xe
14:35:25: Time Access 2 NSAC*100                        :0x0
14:35:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:25: Card Command Classess CCC                     :0x5b5
14:35:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:25: DSR(driver stage register)  DSR_IMP           :0x0
14:35:25: Reserv2                                       :0x0
14:35:25: Device Size C_SIZE                            :0xedc8
14:35:25: Reserv3                                       :0x0
14:35:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:25: Reserv4                                       :0x0
14:35:25: Write Speed Factor R2W_FACTOR                 :0x2
14:35:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:25: FILE_FORMAT_GRP                               :0x0
14:35:25: COPY flag                                     :0x1
14:35:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:25: File_Format                                   :0x0
14:35:25: CRC                                           :0x0
14:35:25: ####CSD Registe Values####  

14:35:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:25: [GetSCRRegisterEntry] Passed
14:35:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:25: Data_Status_After Erases          : 0
14:35:25: CPRM Security Support             : No Security
14:35:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:25: Spec. Version                     : Version 3.0X
14:35:25: Extended Security Support         : Extended_Security_Not_Supported
14:35:25: Command Support                   : COMMAND_SUPPORT
14:35:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F540>, <py_sfcl.CommandDataDefinition object at 0x0611C240>) , Command count = 2636 ] 
14:35:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F030>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 2637 ] 
14:35:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:26: [ SetBusWidth(0x4) , Command count = 2638 ] 
14:35:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2639 ] 
14:35:26: Protected Area Size 0x28000
14:35:26: Bus Width           2
14:35:26: Secure Mode         0
14:35:26: Speed  Class        4
14:35:26: Perf Move           0
14:35:26: Au Size             9
14:35:26: Erase Size          15
14:35:26: Erase Timeout       1
14:35:26: Erase offset        1
14:35:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2640 ] 
14:35:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:26: Host Frequency set to 100000 KHz
14:35:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:26: ####CSD Registe 2.0 Values####
14:35:26: CSD_STRUCTURE                                 :0x1
14:35:26: Reserv1                                       :0x0
14:35:26: Time Access 1 TAAC                            :0xe
14:35:26: Time Access 2 NSAC*100                        :0x0
14:35:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:26: Card Command Classess CCC                     :0x5b5
14:35:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:26: DSR(driver stage register)  DSR_IMP           :0x0
14:35:26: Reserv2                                       :0x0
14:35:26: Device Size C_SIZE                            :0xedc8
14:35:26: Reserv3                                       :0x0
14:35:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:26: Reserv4                                       :0x0
14:35:26: Write Speed Factor R2W_FACTOR                 :0x2
14:35:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:26: FILE_FORMAT_GRP                               :0x0
14:35:26: COPY flag                                     :0x1
14:35:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:26: File_Format                                   :0x0
14:35:26: CRC                                           :0x0
14:35:26: ####CSD Registe Values####  

14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F150>, <py_sfcl.CommandDataDefinition object at 0x0611C810>) , Command count = 2641 ] 
14:35:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129060>, <py_sfcl.CommandDataDefinition object at 0x0611CAB0>) , Command count = 2642 ] 
14:35:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7044F to EndLba:0x3B704CF with One's Pattern
14:35:26: [ WrLbaNoData(0x3B7044F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2643 ] 
14:35:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7044F to EndLba:0x3B704CF with One's Pattern 

14:35:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704CF to EndLba:0x3B7054F with One's Pattern
14:35:26: [ WrLbaNoData(0x3B704CF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2644 ] 
14:35:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704CF to EndLba:0x3B7054F with One's Pattern 

14:35:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231EB to EndLba:0x250DD with Constant Pattern
14:35:26: [ RdLbaNoData(0x231EB, 0x1EF2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2645 ] 
14:35:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231EB to EndLba:0x250DD with Constant Pattern 

14:35:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3959
14:35:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3A20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C990>, <py_sfcl.PySEnhancedCmdData object at 0x0611CE10>, <None>) , Command count = 2646 ] 
14:35:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:28: Host Frequency set to 25000 KHz
14:35:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C8A0>, 0x0, True) , Command count = 2647 ] 
14:35:28: [GO18_globalSetVolt]### Host voltage value is set.
14:35:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C060>, 0x0, False) , Command count = 2648 ] 
14:35:28: [GO18_globalSetVolt]### Host voltage value is set.
14:35:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2649 ] 
14:35:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2650 ] 
14:35:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2651 ] 
14:35:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F090>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 2652 ] 
14:35:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3CF0>, <py_sfcl.CommandDataDefinition object at 0x0611CA80>) , Command count = 2653 ] 
14:35:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:29: [ SetCardRCA(0x1, 0xD555) , Command count = 2654 ] 
14:35:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:29: Host Frequency set to 25000 KHz
14:35:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:29: ####CSD Registe 2.0 Values####
14:35:29: CSD_STRUCTURE                                 :0x1
14:35:29: Reserv1                                       :0x0
14:35:29: Time Access 1 TAAC                            :0xe
14:35:29: Time Access 2 NSAC*100                        :0x0
14:35:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:29: Card Command Classess CCC                     :0x5b5
14:35:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:29: DSR(driver stage register)  DSR_IMP           :0x0
14:35:29: Reserv2                                       :0x0
14:35:29: Device Size C_SIZE                            :0xedc8
14:35:29: Reserv3                                       :0x0
14:35:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:29: Reserv4                                       :0x0
14:35:29: Write Speed Factor R2W_FACTOR                 :0x2
14:35:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:29: FILE_FORMAT_GRP                               :0x0
14:35:29: COPY flag                                     :0x1
14:35:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:29: File_Format                                   :0x0
14:35:29: CRC                                           :0x0
14:35:29: ####CSD Registe Values####  

14:35:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:29: [GetSCRRegisterEntry] Passed
14:35:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:29: Data_Status_After Erases          : 0
14:35:29: CPRM Security Support             : No Security
14:35:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:29: Spec. Version                     : Version 3.0X
14:35:29: Extended Security Support         : Extended_Security_Not_Supported
14:35:29: Command Support                   : COMMAND_SUPPORT
14:35:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3840>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 2655 ] 
14:35:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3750>, <py_sfcl.CommandDataDefinition object at 0x0611CC00>) , Command count = 2656 ] 
14:35:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:29: [ SetBusWidth(0x4) , Command count = 2657 ] 
14:35:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2658 ] 
14:35:29: Protected Area Size 0x28000
14:35:29: Bus Width           2
14:35:29: Secure Mode         0
14:35:29: Speed  Class        4
14:35:29: Perf Move           0
14:35:29: Au Size             9
14:35:29: Erase Size          15
14:35:29: Erase Timeout       1
14:35:29: Erase offset        1
14:35:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2659 ] 
14:35:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:29: Host Frequency set to 100000 KHz
14:35:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:29: ####CSD Registe 2.0 Values####
14:35:29: CSD_STRUCTURE                                 :0x1
14:35:29: Reserv1                                       :0x0
14:35:29: Time Access 1 TAAC                            :0xe
14:35:29: Time Access 2 NSAC*100                        :0x0
14:35:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:29: Card Command Classess CCC                     :0x5b5
14:35:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:29: DSR(driver stage register)  DSR_IMP           :0x0
14:35:29: Reserv2                                       :0x0
14:35:29: Device Size C_SIZE                            :0xedc8
14:35:29: Reserv3                                       :0x0
14:35:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:29: Reserv4                                       :0x0
14:35:29: Write Speed Factor R2W_FACTOR                 :0x2
14:35:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:29: FILE_FORMAT_GRP                               :0x0
14:35:29: COPY flag                                     :0x1
14:35:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:29: File_Format                                   :0x0
14:35:29: CRC                                           :0x0
14:35:29: ####CSD Registe Values####  

14:35:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061292D0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 2660 ] 
14:35:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129390>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 2661 ] 
14:35:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704C9 to EndLba:0x3B70549 with One's Pattern
14:35:30: [ WrLbaNoData(0x3B704C9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2662 ] 
14:35:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704C9 to EndLba:0x3B70549 with One's Pattern 

14:35:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70549 to EndLba:0x3B705C9 with One's Pattern
14:35:30: [ WrLbaNoData(0x3B70549, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2663 ] 
14:35:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70549 to EndLba:0x3B705C9 with One's Pattern 

14:35:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231EB to EndLba:0x250DB with Constant Pattern
14:35:30: [ RdLbaNoData(0x231EB, 0x1EF0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2664 ] 
14:35:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231EB to EndLba:0x250DB with Constant Pattern 

14:35:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3958
14:35:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FCC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129270>, <py_sfcl.PySEnhancedCmdData object at 0x06129240>, <None>) , Command count = 2665 ] 
14:35:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:32: Host Frequency set to 25000 KHz
14:35:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C1B0>, 0x0, True) , Command count = 2666 ] 
14:35:32: [GO18_globalSetVolt]### Host voltage value is set.
14:35:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C480>, 0x0, False) , Command count = 2667 ] 
14:35:32: [GO18_globalSetVolt]### Host voltage value is set.
14:35:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2668 ] 
14:35:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2669 ] 
14:35:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2670 ] 
14:35:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 2671 ] 
14:35:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129870>, <py_sfcl.CommandDataDefinition object at 0x06129BA0>) , Command count = 2672 ] 
14:35:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:32: [ SetCardRCA(0x1, 0xD555) , Command count = 2673 ] 
14:35:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:32: Host Frequency set to 25000 KHz
14:35:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:32: ####CSD Registe 2.0 Values####
14:35:32: CSD_STRUCTURE                                 :0x1
14:35:32: Reserv1                                       :0x0
14:35:32: Time Access 1 TAAC                            :0xe
14:35:32: Time Access 2 NSAC*100                        :0x0
14:35:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:32: Card Command Classess CCC                     :0x5b5
14:35:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:32: DSR(driver stage register)  DSR_IMP           :0x0
14:35:32: Reserv2                                       :0x0
14:35:32: Device Size C_SIZE                            :0xedc8
14:35:32: Reserv3                                       :0x0
14:35:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:32: Reserv4                                       :0x0
14:35:32: Write Speed Factor R2W_FACTOR                 :0x2
14:35:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:32: FILE_FORMAT_GRP                               :0x0
14:35:32: COPY flag                                     :0x1
14:35:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:32: File_Format                                   :0x0
14:35:32: CRC                                           :0x0
14:35:32: ####CSD Registe Values####  

14:35:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:32: [GetSCRRegisterEntry] Passed
14:35:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:32: Data_Status_After Erases          : 0
14:35:32: CPRM Security Support             : No Security
14:35:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:32: Spec. Version                     : Version 3.0X
14:35:32: Extended Security Support         : Extended_Security_Not_Supported
14:35:32: Command Support                   : COMMAND_SUPPORT
14:35:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129D50>, <py_sfcl.CommandDataDefinition object at 0x061290F0>) , Command count = 2674 ] 
14:35:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x0611C7E0>) , Command count = 2675 ] 
14:35:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:32: [ SetBusWidth(0x4) , Command count = 2676 ] 
14:35:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2677 ] 
14:35:32: Protected Area Size 0x28000
14:35:32: Bus Width           2
14:35:32: Secure Mode         0
14:35:32: Speed  Class        4
14:35:32: Perf Move           0
14:35:32: Au Size             9
14:35:32: Erase Size          15
14:35:32: Erase Timeout       1
14:35:32: Erase offset        1
14:35:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2678 ] 
14:35:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:32: Host Frequency set to 100000 KHz
14:35:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:32: ####CSD Registe 2.0 Values####
14:35:32: CSD_STRUCTURE                                 :0x1
14:35:33: Reserv1                                       :0x0
14:35:33: Time Access 1 TAAC                            :0xe
14:35:33: Time Access 2 NSAC*100                        :0x0
14:35:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:33: Card Command Classess CCC                     :0x5b5
14:35:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:33: DSR(driver stage register)  DSR_IMP           :0x0
14:35:33: Reserv2                                       :0x0
14:35:33: Device Size C_SIZE                            :0xedc8
14:35:33: Reserv3                                       :0x0
14:35:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:33: Reserv4                                       :0x0
14:35:33: Write Speed Factor R2W_FACTOR                 :0x2
14:35:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:33: FILE_FORMAT_GRP                               :0x0
14:35:33: COPY flag                                     :0x1
14:35:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:33: File_Format                                   :0x0
14:35:33: CRC                                           :0x0
14:35:33: ####CSD Registe Values####  

14:35:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299F0>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 2679 ] 
14:35:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 2680 ] 
14:35:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D5F9 to EndLba:0x3B6D679 with One's Pattern
14:35:33: [ WrLbaNoData(0x3B6D5F9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2681 ] 
14:35:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D5F9 to EndLba:0x3B6D679 with One's Pattern 

14:35:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D679 to EndLba:0x3B6D6F9 with One's Pattern
14:35:33: [ WrLbaNoData(0x3B6D679, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2682 ] 
14:35:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D679 to EndLba:0x3B6D6F9 with One's Pattern 

14:35:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231ED to EndLba:0x250DB with Constant Pattern
14:35:33: [ RdLbaNoData(0x231ED, 0x1EEE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2683 ] 
14:35:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231ED to EndLba:0x250DB with Constant Pattern 

14:35:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3957
14:35:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129900>, <py_sfcl.PySEnhancedCmdData object at 0x061294B0>, <None>) , Command count = 2684 ] 
14:35:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:35: Host Frequency set to 25000 KHz
14:35:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129570>, 0x0, True) , Command count = 2685 ] 
14:35:35: [GO18_globalSetVolt]### Host voltage value is set.
14:35:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FED0>, 0x0, False) , Command count = 2686 ] 
14:35:35: [GO18_globalSetVolt]### Host voltage value is set.
14:35:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2687 ] 
14:35:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2688 ] 
14:35:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2689 ] 
14:35:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 2690 ] 
14:35:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 2691 ] 
14:35:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:35: [ SetCardRCA(0x1, 0xD555) , Command count = 2692 ] 
14:35:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:36: Host Frequency set to 25000 KHz
14:35:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:36: ####CSD Registe 2.0 Values####
14:35:36: CSD_STRUCTURE                                 :0x1
14:35:36: Reserv1                                       :0x0
14:35:36: Time Access 1 TAAC                            :0xe
14:35:36: Time Access 2 NSAC*100                        :0x0
14:35:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:36: Card Command Classess CCC                     :0x5b5
14:35:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:36: DSR(driver stage register)  DSR_IMP           :0x0
14:35:36: Reserv2                                       :0x0
14:35:36: Device Size C_SIZE                            :0xedc8
14:35:36: Reserv3                                       :0x0
14:35:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:36: Reserv4                                       :0x0
14:35:36: Write Speed Factor R2W_FACTOR                 :0x2
14:35:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:36: FILE_FORMAT_GRP                               :0x0
14:35:36: COPY flag                                     :0x1
14:35:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:36: File_Format                                   :0x0
14:35:36: CRC                                           :0x0
14:35:36: ####CSD Registe Values####  

14:35:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:36: [GetSCRRegisterEntry] Passed
14:35:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:36: Data_Status_After Erases          : 0
14:35:36: CPRM Security Support             : No Security
14:35:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:36: Spec. Version                     : Version 3.0X
14:35:36: Extended Security Support         : Extended_Security_Not_Supported
14:35:36: Command Support                   : COMMAND_SUPPORT
14:35:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138480>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 2693 ] 
14:35:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 2694 ] 
14:35:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:36: [ SetBusWidth(0x4) , Command count = 2695 ] 
14:35:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129C60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2696 ] 
14:35:36: Protected Area Size 0x28000
14:35:36: Bus Width           2
14:35:36: Secure Mode         0
14:35:36: Speed  Class        4
14:35:36: Perf Move           0
14:35:36: Au Size             9
14:35:36: Erase Size          15
14:35:36: Erase Timeout       1
14:35:36: Erase offset        1
14:35:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2697 ] 
14:35:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:36: Host Frequency set to 100000 KHz
14:35:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:36: ####CSD Registe 2.0 Values####
14:35:36: CSD_STRUCTURE                                 :0x1
14:35:36: Reserv1                                       :0x0
14:35:36: Time Access 1 TAAC                            :0xe
14:35:36: Time Access 2 NSAC*100                        :0x0
14:35:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:36: Card Command Classess CCC                     :0x5b5
14:35:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:36: DSR(driver stage register)  DSR_IMP           :0x0
14:35:36: Reserv2                                       :0x0
14:35:36: Device Size C_SIZE                            :0xedc8
14:35:36: Reserv3                                       :0x0
14:35:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:36: Reserv4                                       :0x0
14:35:36: Write Speed Factor R2W_FACTOR                 :0x2
14:35:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:36: FILE_FORMAT_GRP                               :0x0
14:35:36: COPY flag                                     :0x1
14:35:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:36: File_Format                                   :0x0
14:35:36: CRC                                           :0x0
14:35:36: ####CSD Registe Values####  

14:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDB0>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 2698 ] 
14:35:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x0611C8D0>) , Command count = 2699 ] 
14:35:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7062C to EndLba:0x3B706AC with One's Pattern
14:35:36: [ WrLbaNoData(0x3B7062C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2700 ] 
14:35:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7062C to EndLba:0x3B706AC with One's Pattern 

14:35:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B706AC to EndLba:0x3B7072C with One's Pattern
14:35:36: [ WrLbaNoData(0x3B706AC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2701 ] 
14:35:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B706AC to EndLba:0x3B7072C with One's Pattern 

14:35:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231ED to EndLba:0x250D9 with Constant Pattern
14:35:36: [ RdLbaNoData(0x231ED, 0x1EEC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2702 ] 
14:35:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231ED to EndLba:0x250D9 with Constant Pattern 

14:35:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3956
14:35:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E2D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E9F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129AE0>, <None>) , Command count = 2703 ] 
14:35:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:39: Host Frequency set to 25000 KHz
14:35:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E060>, 0x0, True) , Command count = 2704 ] 
14:35:39: [GO18_globalSetVolt]### Host voltage value is set.
14:35:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FC60>, 0x0, False) , Command count = 2705 ] 
14:35:39: [GO18_globalSetVolt]### Host voltage value is set.
14:35:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2706 ] 
14:35:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2707 ] 
14:35:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2708 ] 
14:35:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E3F0>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 2709 ] 
14:35:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1B0>, <py_sfcl.CommandDataDefinition object at 0x06129630>) , Command count = 2710 ] 
14:35:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:39: [ SetCardRCA(0x1, 0xD555) , Command count = 2711 ] 
14:35:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:39: Host Frequency set to 25000 KHz
14:35:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:39: ####CSD Registe 2.0 Values####
14:35:39: CSD_STRUCTURE                                 :0x1
14:35:39: Reserv1                                       :0x0
14:35:39: Time Access 1 TAAC                            :0xe
14:35:39: Time Access 2 NSAC*100                        :0x0
14:35:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:39: Card Command Classess CCC                     :0x5b5
14:35:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:39: DSR(driver stage register)  DSR_IMP           :0x0
14:35:39: Reserv2                                       :0x0
14:35:39: Device Size C_SIZE                            :0xedc8
14:35:39: Reserv3                                       :0x0
14:35:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:39: Reserv4                                       :0x0
14:35:39: Write Speed Factor R2W_FACTOR                 :0x2
14:35:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:39: FILE_FORMAT_GRP                               :0x0
14:35:39: COPY flag                                     :0x1
14:35:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:39: File_Format                                   :0x0
14:35:39: CRC                                           :0x0
14:35:39: ####CSD Registe Values####  

14:35:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:39: [GetSCRRegisterEntry] Passed
14:35:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:39: Data_Status_After Erases          : 0
14:35:39: CPRM Security Support             : No Security
14:35:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:39: Spec. Version                     : Version 3.0X
14:35:39: Extended Security Support         : Extended_Security_Not_Supported
14:35:39: Command Support                   : COMMAND_SUPPORT
14:35:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0F0>, <py_sfcl.CommandDataDefinition object at 0x061297B0>) , Command count = 2712 ] 
14:35:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8A0>, <py_sfcl.CommandDataDefinition object at 0x0612E7B0>) , Command count = 2713 ] 
14:35:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:39: [ SetBusWidth(0x4) , Command count = 2714 ] 
14:35:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2715 ] 
14:35:39: Protected Area Size 0x28000
14:35:39: Bus Width           2
14:35:39: Secure Mode         0
14:35:39: Speed  Class        4
14:35:39: Perf Move           0
14:35:39: Au Size             9
14:35:39: Erase Size          15
14:35:39: Erase Timeout       1
14:35:39: Erase offset        1
14:35:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2716 ] 
14:35:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:39: Host Frequency set to 100000 KHz
14:35:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:39: ####CSD Registe 2.0 Values####
14:35:39: CSD_STRUCTURE                                 :0x1
14:35:39: Reserv1                                       :0x0
14:35:39: Time Access 1 TAAC                            :0xe
14:35:39: Time Access 2 NSAC*100                        :0x0
14:35:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:39: Card Command Classess CCC                     :0x5b5
14:35:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:39: DSR(driver stage register)  DSR_IMP           :0x0
14:35:39: Reserv2                                       :0x0
14:35:39: Device Size C_SIZE                            :0xedc8
14:35:39: Reserv3                                       :0x0
14:35:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:40: Reserv4                                       :0x0
14:35:40: Write Speed Factor R2W_FACTOR                 :0x2
14:35:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:40: FILE_FORMAT_GRP                               :0x0
14:35:40: COPY flag                                     :0x1
14:35:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:40: File_Format                                   :0x0
14:35:40: CRC                                           :0x0
14:35:40: ####CSD Registe Values####  

14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E750>, <py_sfcl.CommandDataDefinition object at 0x06129600>) , Command count = 2717 ] 
14:35:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 2718 ] 
14:35:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA7F to EndLba:0x3B6EAFF with One's Pattern
14:35:40: [ WrLbaNoData(0x3B6EA7F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2719 ] 
14:35:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA7F to EndLba:0x3B6EAFF with One's Pattern 

14:35:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EAFF to EndLba:0x3B6EB7F with One's Pattern
14:35:40: [ WrLbaNoData(0x3B6EAFF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2720 ] 
14:35:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EAFF to EndLba:0x3B6EB7F with One's Pattern 

14:35:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231EF to EndLba:0x250D9 with Constant Pattern
14:35:40: [ RdLbaNoData(0x231EF, 0x1EEA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2721 ] 
14:35:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231EF to EndLba:0x250D9 with Constant Pattern 

14:35:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3955
14:35:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612ECC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061321B0>, <py_sfcl.PySEnhancedCmdData object at 0x061297E0>, <None>) , Command count = 2722 ] 
14:35:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:42: Host Frequency set to 25000 KHz
14:35:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132060>, 0x0, True) , Command count = 2723 ] 
14:35:42: [GO18_globalSetVolt]### Host voltage value is set.
14:35:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E4E0>, 0x0, False) , Command count = 2724 ] 
14:35:42: [GO18_globalSetVolt]### Host voltage value is set.
14:35:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2725 ] 
14:35:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2726 ] 
14:35:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2727 ] 
14:35:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x06129360>) , Command count = 2728 ] 
14:35:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x06129B40>) , Command count = 2729 ] 
14:35:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:42: [ SetCardRCA(0x1, 0xD555) , Command count = 2730 ] 
14:35:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:42: Host Frequency set to 25000 KHz
14:35:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:42: ####CSD Registe 2.0 Values####
14:35:42: CSD_STRUCTURE                                 :0x1
14:35:42: Reserv1                                       :0x0
14:35:42: Time Access 1 TAAC                            :0xe
14:35:42: Time Access 2 NSAC*100                        :0x0
14:35:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:42: Card Command Classess CCC                     :0x5b5
14:35:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:42: DSR(driver stage register)  DSR_IMP           :0x0
14:35:42: Reserv2                                       :0x0
14:35:42: Device Size C_SIZE                            :0xedc8
14:35:42: Reserv3                                       :0x0
14:35:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:42: Reserv4                                       :0x0
14:35:42: Write Speed Factor R2W_FACTOR                 :0x2
14:35:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:42: FILE_FORMAT_GRP                               :0x0
14:35:42: COPY flag                                     :0x1
14:35:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:42: File_Format                                   :0x0
14:35:42: CRC                                           :0x0
14:35:42: ####CSD Registe Values####  

14:35:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:42: [GetSCRRegisterEntry] Passed
14:35:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:42: Data_Status_After Erases          : 0
14:35:42: CPRM Security Support             : No Security
14:35:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:42: Spec. Version                     : Version 3.0X
14:35:42: Extended Security Support         : Extended_Security_Not_Supported
14:35:42: Command Support                   : COMMAND_SUPPORT
14:35:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E510>, <py_sfcl.CommandDataDefinition object at 0x06129ED0>) , Command count = 2731 ] 
14:35:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BA0>, <py_sfcl.CommandDataDefinition object at 0x0612E930>) , Command count = 2732 ] 
14:35:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:42: [ SetBusWidth(0x4) , Command count = 2733 ] 
14:35:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2734 ] 
14:35:43: Protected Area Size 0x28000
14:35:43: Bus Width           2
14:35:43: Secure Mode         0
14:35:43: Speed  Class        4
14:35:43: Perf Move           0
14:35:43: Au Size             9
14:35:43: Erase Size          15
14:35:43: Erase Timeout       1
14:35:43: Erase offset        1
14:35:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2735 ] 
14:35:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:43: Host Frequency set to 100000 KHz
14:35:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:43: ####CSD Registe 2.0 Values####
14:35:43: CSD_STRUCTURE                                 :0x1
14:35:43: Reserv1                                       :0x0
14:35:43: Time Access 1 TAAC                            :0xe
14:35:43: Time Access 2 NSAC*100                        :0x0
14:35:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:43: Card Command Classess CCC                     :0x5b5
14:35:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:43: DSR(driver stage register)  DSR_IMP           :0x0
14:35:43: Reserv2                                       :0x0
14:35:43: Device Size C_SIZE                            :0xedc8
14:35:43: Reserv3                                       :0x0
14:35:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:43: Reserv4                                       :0x0
14:35:43: Write Speed Factor R2W_FACTOR                 :0x2
14:35:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:43: FILE_FORMAT_GRP                               :0x0
14:35:43: COPY flag                                     :0x1
14:35:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:43: File_Format                                   :0x0
14:35:43: CRC                                           :0x0
14:35:43: ####CSD Registe Values####  

14:35:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320F0>, <py_sfcl.CommandDataDefinition object at 0x0612E990>) , Command count = 2736 ] 
14:35:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E600>, <py_sfcl.CommandDataDefinition object at 0x0612E630>) , Command count = 2737 ] 
14:35:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F51E to EndLba:0x3B6F59E with One's Pattern
14:35:43: [ WrLbaNoData(0x3B6F51E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2738 ] 
14:35:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F51E to EndLba:0x3B6F59E with One's Pattern 

14:35:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F59E to EndLba:0x3B6F61E with One's Pattern
14:35:43: [ WrLbaNoData(0x3B6F59E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2739 ] 
14:35:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F59E to EndLba:0x3B6F61E with One's Pattern 

14:35:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231EF to EndLba:0x250D7 with Constant Pattern
14:35:43: [ RdLbaNoData(0x231EF, 0x1EE8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2740 ] 
14:35:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231EF to EndLba:0x250D7 with Constant Pattern 

14:35:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3954
14:35:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132C90>, <py_sfcl.PySEnhancedCmdData object at 0x06132570>, <None>) , Command count = 2741 ] 
14:35:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:46: Host Frequency set to 25000 KHz
14:35:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E900>, 0x0, True) , Command count = 2742 ] 
14:35:46: [GO18_globalSetVolt]### Host voltage value is set.
14:35:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EA80>, 0x0, False) , Command count = 2743 ] 
14:35:46: [GO18_globalSetVolt]### Host voltage value is set.
14:35:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2744 ] 
14:35:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2745 ] 
14:35:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2746 ] 
14:35:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x06132B70>) , Command count = 2747 ] 
14:35:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 2748 ] 
14:35:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:46: [ SetCardRCA(0x1, 0xD555) , Command count = 2749 ] 
14:35:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:46: Host Frequency set to 25000 KHz
14:35:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:46: ####CSD Registe 2.0 Values####
14:35:46: CSD_STRUCTURE                                 :0x1
14:35:46: Reserv1                                       :0x0
14:35:46: Time Access 1 TAAC                            :0xe
14:35:46: Time Access 2 NSAC*100                        :0x0
14:35:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:46: Card Command Classess CCC                     :0x5b5
14:35:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:46: DSR(driver stage register)  DSR_IMP           :0x0
14:35:46: Reserv2                                       :0x0
14:35:46: Device Size C_SIZE                            :0xedc8
14:35:46: Reserv3                                       :0x0
14:35:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:46: Reserv4                                       :0x0
14:35:46: Write Speed Factor R2W_FACTOR                 :0x2
14:35:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:46: FILE_FORMAT_GRP                               :0x0
14:35:46: COPY flag                                     :0x1
14:35:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:46: File_Format                                   :0x0
14:35:46: CRC                                           :0x0
14:35:46: ####CSD Registe Values####  

14:35:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:46: [GetSCRRegisterEntry] Passed
14:35:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:46: Data_Status_After Erases          : 0
14:35:46: CPRM Security Support             : No Security
14:35:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:46: Spec. Version                     : Version 3.0X
14:35:46: Extended Security Support         : Extended_Security_Not_Supported
14:35:46: Command Support                   : COMMAND_SUPPORT
14:35:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD50>, <py_sfcl.CommandDataDefinition object at 0x06132120>) , Command count = 2750 ] 
14:35:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC30>, <py_sfcl.CommandDataDefinition object at 0x0612E9C0>) , Command count = 2751 ] 
14:35:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:46: [ SetBusWidth(0x4) , Command count = 2752 ] 
14:35:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061321E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2753 ] 
14:35:46: Protected Area Size 0x28000
14:35:46: Bus Width           2
14:35:46: Secure Mode         0
14:35:46: Speed  Class        4
14:35:46: Perf Move           0
14:35:46: Au Size             9
14:35:46: Erase Size          15
14:35:46: Erase Timeout       1
14:35:46: Erase offset        1
14:35:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2754 ] 
14:35:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:46: Host Frequency set to 100000 KHz
14:35:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:46: ####CSD Registe 2.0 Values####
14:35:46: CSD_STRUCTURE                                 :0x1
14:35:46: Reserv1                                       :0x0
14:35:46: Time Access 1 TAAC                            :0xe
14:35:46: Time Access 2 NSAC*100                        :0x0
14:35:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:46: Card Command Classess CCC                     :0x5b5
14:35:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:46: DSR(driver stage register)  DSR_IMP           :0x0
14:35:46: Reserv2                                       :0x0
14:35:46: Device Size C_SIZE                            :0xedc8
14:35:46: Reserv3                                       :0x0
14:35:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:47: Reserv4                                       :0x0
14:35:47: Write Speed Factor R2W_FACTOR                 :0x2
14:35:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:47: FILE_FORMAT_GRP                               :0x0
14:35:47: COPY flag                                     :0x1
14:35:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:47: File_Format                                   :0x0
14:35:47: CRC                                           :0x0
14:35:47: ####CSD Registe Values####  

14:35:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 2755 ] 
14:35:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDE0>, <py_sfcl.CommandDataDefinition object at 0x061322A0>) , Command count = 2756 ] 
14:35:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B706A9 to EndLba:0x3B70729 with One's Pattern
14:35:47: [ WrLbaNoData(0x3B706A9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2757 ] 
14:35:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B706A9 to EndLba:0x3B70729 with One's Pattern 

14:35:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70729 to EndLba:0x3B707A9 with One's Pattern
14:35:47: [ WrLbaNoData(0x3B70729, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2758 ] 
14:35:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70729 to EndLba:0x3B707A9 with One's Pattern 

14:35:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F1 to EndLba:0x250D7 with Constant Pattern
14:35:47: [ RdLbaNoData(0x231F1, 0x1EE6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2759 ] 
14:35:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F1 to EndLba:0x250D7 with Constant Pattern 

14:35:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3953
14:35:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FEA0>, <py_sfcl.PySEnhancedCmdData object at 0x06132F90>, <None>) , Command count = 2760 ] 
14:35:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:49: Host Frequency set to 25000 KHz
14:35:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132750>, 0x0, True) , Command count = 2761 ] 
14:35:49: [GO18_globalSetVolt]### Host voltage value is set.
14:35:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FE70>, 0x0, False) , Command count = 2762 ] 
14:35:49: [GO18_globalSetVolt]### Host voltage value is set.
14:35:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2763 ] 
14:35:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2764 ] 
14:35:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2765 ] 
14:35:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x06132210>) , Command count = 2766 ] 
14:35:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138270>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 2767 ] 
14:35:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:49: [ SetCardRCA(0x1, 0xD555) , Command count = 2768 ] 
14:35:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:49: Host Frequency set to 25000 KHz
14:35:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:49: ####CSD Registe 2.0 Values####
14:35:49: CSD_STRUCTURE                                 :0x1
14:35:49: Reserv1                                       :0x0
14:35:49: Time Access 1 TAAC                            :0xe
14:35:49: Time Access 2 NSAC*100                        :0x0
14:35:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:49: Card Command Classess CCC                     :0x5b5
14:35:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:49: DSR(driver stage register)  DSR_IMP           :0x0
14:35:49: Reserv2                                       :0x0
14:35:49: Device Size C_SIZE                            :0xedc8
14:35:49: Reserv3                                       :0x0
14:35:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:49: Reserv4                                       :0x0
14:35:49: Write Speed Factor R2W_FACTOR                 :0x2
14:35:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:49: FILE_FORMAT_GRP                               :0x0
14:35:49: COPY flag                                     :0x1
14:35:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:49: File_Format                                   :0x0
14:35:49: CRC                                           :0x0
14:35:49: ####CSD Registe Values####  

14:35:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:49: [GetSCRRegisterEntry] Passed
14:35:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:49: Data_Status_After Erases          : 0
14:35:49: CPRM Security Support             : No Security
14:35:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:49: Spec. Version                     : Version 3.0X
14:35:49: Extended Security Support         : Extended_Security_Not_Supported
14:35:49: Command Support                   : COMMAND_SUPPORT
14:35:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB40>, <py_sfcl.CommandDataDefinition object at 0x06129F30>) , Command count = 2769 ] 
14:35:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 2770 ] 
14:35:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:49: [ SetBusWidth(0x4) , Command count = 2771 ] 
14:35:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2772 ] 
14:35:49: Protected Area Size 0x28000
14:35:49: Bus Width           2
14:35:49: Secure Mode         0
14:35:49: Speed  Class        4
14:35:49: Perf Move           0
14:35:49: Au Size             9
14:35:49: Erase Size          15
14:35:49: Erase Timeout       1
14:35:49: Erase offset        1
14:35:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2773 ] 
14:35:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:49: Host Frequency set to 100000 KHz
14:35:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:49: ####CSD Registe 2.0 Values####
14:35:49: CSD_STRUCTURE                                 :0x1
14:35:49: Reserv1                                       :0x0
14:35:49: Time Access 1 TAAC                            :0xe
14:35:49: Time Access 2 NSAC*100                        :0x0
14:35:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:49: Card Command Classess CCC                     :0x5b5
14:35:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:50: DSR(driver stage register)  DSR_IMP           :0x0
14:35:50: Reserv2                                       :0x0
14:35:50: Device Size C_SIZE                            :0xedc8
14:35:50: Reserv3                                       :0x0
14:35:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:50: Reserv4                                       :0x0
14:35:50: Write Speed Factor R2W_FACTOR                 :0x2
14:35:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:50: FILE_FORMAT_GRP                               :0x0
14:35:50: COPY flag                                     :0x1
14:35:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:50: File_Format                                   :0x0
14:35:50: CRC                                           :0x0
14:35:50: ####CSD Registe Values####  

14:35:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327E0>, <py_sfcl.CommandDataDefinition object at 0x061325A0>) , Command count = 2774 ] 
14:35:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x061321E0>) , Command count = 2775 ] 
14:35:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B716E0 to EndLba:0x3B71760 with One's Pattern
14:35:50: [ WrLbaNoData(0x3B716E0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2776 ] 
14:35:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B716E0 to EndLba:0x3B71760 with One's Pattern 

14:35:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71760 to EndLba:0x3B717E0 with One's Pattern
14:35:50: [ WrLbaNoData(0x3B71760, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2777 ] 
14:35:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71760 to EndLba:0x3B717E0 with One's Pattern 

14:35:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F1 to EndLba:0x250D5 with Constant Pattern
14:35:50: [ RdLbaNoData(0x231F1, 0x1EE4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2778 ] 
14:35:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F1 to EndLba:0x250D5 with Constant Pattern 

14:35:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3952
14:35:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132E40>, <py_sfcl.PySEnhancedCmdData object at 0x06132810>, <None>) , Command count = 2779 ] 
14:35:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:52: Host Frequency set to 25000 KHz
14:35:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138750>, 0x0, True) , Command count = 2780 ] 
14:35:52: [GO18_globalSetVolt]### Host voltage value is set.
14:35:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E810>, 0x0, False) , Command count = 2781 ] 
14:35:52: [GO18_globalSetVolt]### Host voltage value is set.
14:35:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2782 ] 
14:35:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2783 ] 
14:35:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2784 ] 
14:35:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x06132B40>) , Command count = 2785 ] 
14:35:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327B0>, <py_sfcl.CommandDataDefinition object at 0x06132540>) , Command count = 2786 ] 
14:35:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:52: [ SetCardRCA(0x1, 0xD555) , Command count = 2787 ] 
14:35:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:53: Host Frequency set to 25000 KHz
14:35:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:53: ####CSD Registe 2.0 Values####
14:35:53: CSD_STRUCTURE                                 :0x1
14:35:53: Reserv1                                       :0x0
14:35:53: Time Access 1 TAAC                            :0xe
14:35:53: Time Access 2 NSAC*100                        :0x0
14:35:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:53: Card Command Classess CCC                     :0x5b5
14:35:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:53: DSR(driver stage register)  DSR_IMP           :0x0
14:35:53: Reserv2                                       :0x0
14:35:53: Device Size C_SIZE                            :0xedc8
14:35:53: Reserv3                                       :0x0
14:35:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:53: Reserv4                                       :0x0
14:35:53: Write Speed Factor R2W_FACTOR                 :0x2
14:35:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:53: FILE_FORMAT_GRP                               :0x0
14:35:53: COPY flag                                     :0x1
14:35:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:53: File_Format                                   :0x0
14:35:53: CRC                                           :0x0
14:35:53: ####CSD Registe Values####  

14:35:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:53: [GetSCRRegisterEntry] Passed
14:35:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:53: Data_Status_After Erases          : 0
14:35:53: CPRM Security Support             : No Security
14:35:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:53: Spec. Version                     : Version 3.0X
14:35:53: Extended Security Support         : Extended_Security_Not_Supported
14:35:53: Command Support                   : COMMAND_SUPPORT
14:35:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132270>, <py_sfcl.CommandDataDefinition object at 0x06132D80>) , Command count = 2788 ] 
14:35:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132360>, <py_sfcl.CommandDataDefinition object at 0x06138030>) , Command count = 2789 ] 
14:35:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:53: [ SetBusWidth(0x4) , Command count = 2790 ] 
14:35:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2791 ] 
14:35:53: Protected Area Size 0x28000
14:35:53: Bus Width           2
14:35:53: Secure Mode         0
14:35:53: Speed  Class        4
14:35:53: Perf Move           0
14:35:53: Au Size             9
14:35:53: Erase Size          15
14:35:53: Erase Timeout       1
14:35:53: Erase offset        1
14:35:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2792 ] 
14:35:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:53: Host Frequency set to 100000 KHz
14:35:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:53: ####CSD Registe 2.0 Values####
14:35:53: CSD_STRUCTURE                                 :0x1
14:35:53: Reserv1                                       :0x0
14:35:53: Time Access 1 TAAC                            :0xe
14:35:53: Time Access 2 NSAC*100                        :0x0
14:35:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:53: Card Command Classess CCC                     :0x5b5
14:35:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:53: DSR(driver stage register)  DSR_IMP           :0x0
14:35:53: Reserv2                                       :0x0
14:35:53: Device Size C_SIZE                            :0xedc8
14:35:53: Reserv3                                       :0x0
14:35:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:53: Reserv4                                       :0x0
14:35:53: Write Speed Factor R2W_FACTOR                 :0x2
14:35:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:53: FILE_FORMAT_GRP                               :0x0
14:35:53: COPY flag                                     :0x1
14:35:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:53: File_Format                                   :0x0
14:35:53: CRC                                           :0x0
14:35:53: ####CSD Registe Values####  

14:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138570>, <py_sfcl.CommandDataDefinition object at 0x061383C0>) , Command count = 2793 ] 
14:35:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 2794 ] 
14:35:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FE57 to EndLba:0x3B6FED7 with One's Pattern
14:35:53: [ WrLbaNoData(0x3B6FE57, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2795 ] 
14:35:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FE57 to EndLba:0x3B6FED7 with One's Pattern 

14:35:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FED7 to EndLba:0x3B6FF57 with One's Pattern
14:35:53: [ WrLbaNoData(0x3B6FED7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2796 ] 
14:35:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FED7 to EndLba:0x3B6FF57 with One's Pattern 

14:35:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F3 to EndLba:0x250D5 with Constant Pattern
14:35:53: [ RdLbaNoData(0x231F3, 0x1EE2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2797 ] 
14:35:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F3 to EndLba:0x250D5 with Constant Pattern 

14:35:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3951
14:35:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138420>, <py_sfcl.PySEnhancedCmdData object at 0x06138060>, <None>) , Command count = 2798 ] 
14:35:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:55: Host Frequency set to 25000 KHz
14:35:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x061385D0>, 0x0, True) , Command count = 2799 ] 
14:35:56: [GO18_globalSetVolt]### Host voltage value is set.
14:35:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138210>, 0x0, False) , Command count = 2800 ] 
14:35:56: [GO18_globalSetVolt]### Host voltage value is set.
14:35:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2801 ] 
14:35:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2802 ] 
14:35:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2803 ] 
14:35:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06138990>) , Command count = 2804 ] 
14:35:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x061383F0>) , Command count = 2805 ] 
14:35:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:56: [ SetCardRCA(0x1, 0xD555) , Command count = 2806 ] 
14:35:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:56: Host Frequency set to 25000 KHz
14:35:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:56: ####CSD Registe 2.0 Values####
14:35:56: CSD_STRUCTURE                                 :0x1
14:35:56: Reserv1                                       :0x0
14:35:56: Time Access 1 TAAC                            :0xe
14:35:56: Time Access 2 NSAC*100                        :0x0
14:35:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:35:56: Card Command Classess CCC                     :0x5b5
14:35:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:56: DSR(driver stage register)  DSR_IMP           :0x0
14:35:56: Reserv2                                       :0x0
14:35:56: Device Size C_SIZE                            :0xedc8
14:35:56: Reserv3                                       :0x0
14:35:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:56: Reserv4                                       :0x0
14:35:56: Write Speed Factor R2W_FACTOR                 :0x2
14:35:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:56: FILE_FORMAT_GRP                               :0x0
14:35:56: COPY flag                                     :0x1
14:35:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:56: File_Format                                   :0x0
14:35:56: CRC                                           :0x0
14:35:56: ####CSD Registe Values####  

14:35:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:35:56: [GetSCRRegisterEntry] Passed
14:35:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:35:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:35:56: Data_Status_After Erases          : 0
14:35:56: CPRM Security Support             : No Security
14:35:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:35:56: Spec. Version                     : Version 3.0X
14:35:56: Extended Security Support         : Extended_Security_Not_Supported
14:35:56: Command Support                   : COMMAND_SUPPORT
14:35:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138720>, <py_sfcl.CommandDataDefinition object at 0x061380C0>) , Command count = 2807 ] 
14:35:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:35:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A50>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 2808 ] 
14:35:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:35:56: [ SetBusWidth(0x4) , Command count = 2809 ] 
14:35:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:35:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2810 ] 
14:35:56: Protected Area Size 0x28000
14:35:56: Bus Width           2
14:35:56: Secure Mode         0
14:35:56: Speed  Class        4
14:35:56: Perf Move           0
14:35:56: Au Size             9
14:35:56: Erase Size          15
14:35:56: Erase Timeout       1
14:35:56: Erase offset        1
14:35:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:35:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:35:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2811 ] 
14:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:35:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:35:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:35:56: Host Frequency set to 100000 KHz
14:35:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:35:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:35:56: ####CSD Registe 2.0 Values####
14:35:56: CSD_STRUCTURE                                 :0x1
14:35:56: Reserv1                                       :0x0
14:35:56: Time Access 1 TAAC                            :0xe
14:35:56: Time Access 2 NSAC*100                        :0x0
14:35:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:35:56: Card Command Classess CCC                     :0x5b5
14:35:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:35:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:35:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:35:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:35:56: DSR(driver stage register)  DSR_IMP           :0x0
14:35:56: Reserv2                                       :0x0
14:35:56: Device Size C_SIZE                            :0xedc8
14:35:56: Reserv3                                       :0x0
14:35:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:35:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:35:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:35:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:35:57: Reserv4                                       :0x0
14:35:57: Write Speed Factor R2W_FACTOR                 :0x2
14:35:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:35:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:35:57: FILE_FORMAT_GRP                               :0x0
14:35:57: COPY flag                                     :0x1
14:35:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:35:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:35:57: File_Format                                   :0x0
14:35:57: CRC                                           :0x0
14:35:57: ####CSD Registe Values####  

14:35:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F360>, <py_sfcl.CommandDataDefinition object at 0x06138690>) , Command count = 2812 ] 
14:35:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:35:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x06138090>) , Command count = 2813 ] 
14:35:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:35:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:35:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:35:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B709EE to EndLba:0x3B70A6E with One's Pattern
14:35:57: [ WrLbaNoData(0x3B709EE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2814 ] 
14:35:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B709EE to EndLba:0x3B70A6E with One's Pattern 

14:35:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A6E to EndLba:0x3B70AEE with One's Pattern
14:35:57: [ WrLbaNoData(0x3B70A6E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2815 ] 
14:35:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A6E to EndLba:0x3B70AEE with One's Pattern 

14:35:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:35:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F3 to EndLba:0x250D3 with Constant Pattern
14:35:57: [ RdLbaNoData(0x231F3, 0x1EE0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2816 ] 
14:35:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F3 to EndLba:0x250D3 with Constant Pattern 

14:35:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3950
14:35:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:35:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FC30>, <py_sfcl.PySEnhancedCmdData object at 0x0613F960>, <None>) , Command count = 2817 ] 
14:35:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:35:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:35:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:35:59: Host Frequency set to 25000 KHz
14:35:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:35:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:35:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:35:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138CF0>, 0x0, True) , Command count = 2818 ] 
14:35:59: [GO18_globalSetVolt]### Host voltage value is set.
14:35:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:35:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F780>, 0x0, False) , Command count = 2819 ] 
14:35:59: [GO18_globalSetVolt]### Host voltage value is set.
14:35:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2820 ] 
14:35:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:35:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2821 ] 
14:35:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:35:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:35:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:35:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:35:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:35:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2822 ] 
14:35:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:35:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06138ED0>) , Command count = 2823 ] 
14:35:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:35:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138510>, <py_sfcl.CommandDataDefinition object at 0x061386F0>) , Command count = 2824 ] 
14:35:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:35:59: [ SetCardRCA(0x1, 0xD555) , Command count = 2825 ] 
14:35:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:35:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:00: Host Frequency set to 25000 KHz
14:36:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:00: ####CSD Registe 2.0 Values####
14:36:00: CSD_STRUCTURE                                 :0x1
14:36:00: Reserv1                                       :0x0
14:36:00: Time Access 1 TAAC                            :0xe
14:36:00: Time Access 2 NSAC*100                        :0x0
14:36:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:00: Card Command Classess CCC                     :0x5b5
14:36:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:00: DSR(driver stage register)  DSR_IMP           :0x0
14:36:00: Reserv2                                       :0x0
14:36:00: Device Size C_SIZE                            :0xedc8
14:36:00: Reserv3                                       :0x0
14:36:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:00: Reserv4                                       :0x0
14:36:00: Write Speed Factor R2W_FACTOR                 :0x2
14:36:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:00: FILE_FORMAT_GRP                               :0x0
14:36:00: COPY flag                                     :0x1
14:36:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:00: File_Format                                   :0x0
14:36:00: CRC                                           :0x0
14:36:00: ####CSD Registe Values####  

14:36:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:00: [GetSCRRegisterEntry] Passed
14:36:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:00: Data_Status_After Erases          : 0
14:36:00: CPRM Security Support             : No Security
14:36:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:00: Spec. Version                     : Version 3.0X
14:36:00: Extended Security Support         : Extended_Security_Not_Supported
14:36:00: Command Support                   : COMMAND_SUPPORT
14:36:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF90>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 2826 ] 
14:36:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x0613FE10>) , Command count = 2827 ] 
14:36:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:00: [ SetBusWidth(0x4) , Command count = 2828 ] 
14:36:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061389F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2829 ] 
14:36:00: Protected Area Size 0x28000
14:36:00: Bus Width           2
14:36:00: Secure Mode         0
14:36:00: Speed  Class        4
14:36:00: Perf Move           0
14:36:00: Au Size             9
14:36:00: Erase Size          15
14:36:00: Erase Timeout       1
14:36:00: Erase offset        1
14:36:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2830 ] 
14:36:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:00: Host Frequency set to 100000 KHz
14:36:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:00: ####CSD Registe 2.0 Values####
14:36:00: CSD_STRUCTURE                                 :0x1
14:36:00: Reserv1                                       :0x0
14:36:00: Time Access 1 TAAC                            :0xe
14:36:00: Time Access 2 NSAC*100                        :0x0
14:36:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:00: Card Command Classess CCC                     :0x5b5
14:36:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:00: DSR(driver stage register)  DSR_IMP           :0x0
14:36:00: Reserv2                                       :0x0
14:36:00: Device Size C_SIZE                            :0xedc8
14:36:00: Reserv3                                       :0x0
14:36:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:00: Reserv4                                       :0x0
14:36:00: Write Speed Factor R2W_FACTOR                 :0x2
14:36:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:00: FILE_FORMAT_GRP                               :0x0
14:36:00: COPY flag                                     :0x1
14:36:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:00: File_Format                                   :0x0
14:36:00: CRC                                           :0x0
14:36:00: ####CSD Registe Values####  

14:36:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F030>, <py_sfcl.CommandDataDefinition object at 0x06138DB0>) , Command count = 2831 ] 
14:36:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C00>, <py_sfcl.CommandDataDefinition object at 0x06138330>) , Command count = 2832 ] 
14:36:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71D55 to EndLba:0x3B71DD5 with One's Pattern
14:36:00: [ WrLbaNoData(0x3B71D55, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2833 ] 
14:36:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71D55 to EndLba:0x3B71DD5 with One's Pattern 

14:36:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71DD5 to EndLba:0x3B71E55 with One's Pattern
14:36:00: [ WrLbaNoData(0x3B71DD5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2834 ] 
14:36:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71DD5 to EndLba:0x3B71E55 with One's Pattern 

14:36:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F5 to EndLba:0x250D3 with Constant Pattern
14:36:00: [ RdLbaNoData(0x231F5, 0x1EDE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2835 ] 
14:36:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F5 to EndLba:0x250D3 with Constant Pattern 

14:36:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3949
14:36:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F450>, <py_sfcl.PySEnhancedCmdData object at 0x06138E40>, <None>) , Command count = 2836 ] 
14:36:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:02: Host Frequency set to 25000 KHz
14:36:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132EA0>, 0x0, True) , Command count = 2837 ] 
14:36:02: [GO18_globalSetVolt]### Host voltage value is set.
14:36:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF270>, 0x0, False) , Command count = 2838 ] 
14:36:02: [GO18_globalSetVolt]### Host voltage value is set.
14:36:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2839 ] 
14:36:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2840 ] 
14:36:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2841 ] 
14:36:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 2842 ] 
14:36:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C30>, <py_sfcl.CommandDataDefinition object at 0x06138AB0>) , Command count = 2843 ] 
14:36:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:03: [ SetCardRCA(0x1, 0xD555) , Command count = 2844 ] 
14:36:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:03: Host Frequency set to 25000 KHz
14:36:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:03: ####CSD Registe 2.0 Values####
14:36:03: CSD_STRUCTURE                                 :0x1
14:36:03: Reserv1                                       :0x0
14:36:03: Time Access 1 TAAC                            :0xe
14:36:03: Time Access 2 NSAC*100                        :0x0
14:36:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:03: Card Command Classess CCC                     :0x5b5
14:36:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:03: DSR(driver stage register)  DSR_IMP           :0x0
14:36:03: Reserv2                                       :0x0
14:36:03: Device Size C_SIZE                            :0xedc8
14:36:03: Reserv3                                       :0x0
14:36:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:03: Reserv4                                       :0x0
14:36:03: Write Speed Factor R2W_FACTOR                 :0x2
14:36:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:03: FILE_FORMAT_GRP                               :0x0
14:36:03: COPY flag                                     :0x1
14:36:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:03: File_Format                                   :0x0
14:36:03: CRC                                           :0x0
14:36:03: ####CSD Registe Values####  

14:36:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:03: [GetSCRRegisterEntry] Passed
14:36:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:03: Data_Status_After Erases          : 0
14:36:03: CPRM Security Support             : No Security
14:36:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:03: Spec. Version                     : Version 3.0X
14:36:03: Extended Security Support         : Extended_Security_Not_Supported
14:36:03: Command Support                   : COMMAND_SUPPORT
14:36:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CC0>, <py_sfcl.CommandDataDefinition object at 0x06138600>) , Command count = 2845 ] 
14:36:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC00>, <py_sfcl.CommandDataDefinition object at 0x0613F120>) , Command count = 2846 ] 
14:36:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:03: [ SetBusWidth(0x4) , Command count = 2847 ] 
14:36:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2848 ] 
14:36:03: Protected Area Size 0x28000
14:36:03: Bus Width           2
14:36:03: Secure Mode         0
14:36:03: Speed  Class        4
14:36:03: Perf Move           0
14:36:03: Au Size             9
14:36:03: Erase Size          15
14:36:03: Erase Timeout       1
14:36:03: Erase offset        1
14:36:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2849 ] 
14:36:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:03: Host Frequency set to 100000 KHz
14:36:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:03: ####CSD Registe 2.0 Values####
14:36:03: CSD_STRUCTURE                                 :0x1
14:36:03: Reserv1                                       :0x0
14:36:03: Time Access 1 TAAC                            :0xe
14:36:03: Time Access 2 NSAC*100                        :0x0
14:36:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:03: Card Command Classess CCC                     :0x5b5
14:36:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:03: DSR(driver stage register)  DSR_IMP           :0x0
14:36:03: Reserv2                                       :0x0
14:36:03: Device Size C_SIZE                            :0xedc8
14:36:03: Reserv3                                       :0x0
14:36:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:03: Reserv4                                       :0x0
14:36:03: Write Speed Factor R2W_FACTOR                 :0x2
14:36:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:03: FILE_FORMAT_GRP                               :0x0
14:36:03: COPY flag                                     :0x1
14:36:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:03: File_Format                                   :0x0
14:36:03: CRC                                           :0x0
14:36:03: ####CSD Registe Values####  

14:36:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F3F0>, <py_sfcl.CommandDataDefinition object at 0x0613F4B0>) , Command count = 2850 ] 
14:36:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x06138D80>) , Command count = 2851 ] 
14:36:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7154D to EndLba:0x3B715CD with One's Pattern
14:36:03: [ WrLbaNoData(0x3B7154D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2852 ] 
14:36:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7154D to EndLba:0x3B715CD with One's Pattern 

14:36:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B715CD to EndLba:0x3B7164D with One's Pattern
14:36:03: [ WrLbaNoData(0x3B715CD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2853 ] 
14:36:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B715CD to EndLba:0x3B7164D with One's Pattern 

14:36:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F5 to EndLba:0x250D1 with Constant Pattern
14:36:04: [ RdLbaNoData(0x231F5, 0x1EDC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2854 ] 
14:36:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F5 to EndLba:0x250D1 with Constant Pattern 

14:36:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3948
14:36:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0518AE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052C1F00>, <py_sfcl.PySEnhancedCmdData object at 0x0613F660>, <None>) , Command count = 2855 ] 
14:36:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:06: Host Frequency set to 25000 KHz
14:36:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C19C0>, 0x0, True) , Command count = 2856 ] 
14:36:06: [GO18_globalSetVolt]### Host voltage value is set.
14:36:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFC60>, 0x0, False) , Command count = 2857 ] 
14:36:06: [GO18_globalSetVolt]### Host voltage value is set.
14:36:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2858 ] 
14:36:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2859 ] 
14:36:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2860 ] 
14:36:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138810>, <py_sfcl.CommandDataDefinition object at 0x0613FF60>) , Command count = 2861 ] 
14:36:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x0613FB70>) , Command count = 2862 ] 
14:36:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2863 ] 
14:36:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:06: Host Frequency set to 25000 KHz
14:36:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:06: ####CSD Registe 2.0 Values####
14:36:06: CSD_STRUCTURE                                 :0x1
14:36:06: Reserv1                                       :0x0
14:36:06: Time Access 1 TAAC                            :0xe
14:36:06: Time Access 2 NSAC*100                        :0x0
14:36:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:06: Card Command Classess CCC                     :0x5b5
14:36:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:06: DSR(driver stage register)  DSR_IMP           :0x0
14:36:06: Reserv2                                       :0x0
14:36:06: Device Size C_SIZE                            :0xedc8
14:36:06: Reserv3                                       :0x0
14:36:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:06: Reserv4                                       :0x0
14:36:06: Write Speed Factor R2W_FACTOR                 :0x2
14:36:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:06: FILE_FORMAT_GRP                               :0x0
14:36:06: COPY flag                                     :0x1
14:36:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:06: File_Format                                   :0x0
14:36:06: CRC                                           :0x0
14:36:06: ####CSD Registe Values####  

14:36:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:06: [GetSCRRegisterEntry] Passed
14:36:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:06: Data_Status_After Erases          : 0
14:36:06: CPRM Security Support             : No Security
14:36:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:06: Spec. Version                     : Version 3.0X
14:36:06: Extended Security Support         : Extended_Security_Not_Supported
14:36:06: Command Support                   : COMMAND_SUPPORT
14:36:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB930>, <py_sfcl.CommandDataDefinition object at 0x0613FAE0>) , Command count = 2864 ] 
14:36:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132600>, <py_sfcl.CommandDataDefinition object at 0x060E3AE0>) , Command count = 2865 ] 
14:36:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:06: [ SetBusWidth(0x4) , Command count = 2866 ] 
14:36:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2867 ] 
14:36:06: Protected Area Size 0x28000
14:36:06: Bus Width           2
14:36:06: Secure Mode         0
14:36:06: Speed  Class        4
14:36:06: Perf Move           0
14:36:06: Au Size             9
14:36:06: Erase Size          15
14:36:06: Erase Timeout       1
14:36:06: Erase offset        1
14:36:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2868 ] 
14:36:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:06: Host Frequency set to 100000 KHz
14:36:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:06: ####CSD Registe 2.0 Values####
14:36:06: CSD_STRUCTURE                                 :0x1
14:36:06: Reserv1                                       :0x0
14:36:06: Time Access 1 TAAC                            :0xe
14:36:06: Time Access 2 NSAC*100                        :0x0
14:36:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:06: Card Command Classess CCC                     :0x5b5
14:36:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:06: DSR(driver stage register)  DSR_IMP           :0x0
14:36:06: Reserv2                                       :0x0
14:36:06: Device Size C_SIZE                            :0xedc8
14:36:06: Reserv3                                       :0x0
14:36:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:07: Reserv4                                       :0x0
14:36:07: Write Speed Factor R2W_FACTOR                 :0x2
14:36:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:07: FILE_FORMAT_GRP                               :0x0
14:36:07: COPY flag                                     :0x1
14:36:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:07: File_Format                                   :0x0
14:36:07: CRC                                           :0x0
14:36:07: ####CSD Registe Values####  

14:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1CC0>, <py_sfcl.CommandDataDefinition object at 0x060E3EA0>) , Command count = 2869 ] 
14:36:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 2870 ] 
14:36:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EC71 to EndLba:0x3B6ECF1 with One's Pattern
14:36:07: [ WrLbaNoData(0x3B6EC71, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2871 ] 
14:36:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EC71 to EndLba:0x3B6ECF1 with One's Pattern 

14:36:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ECF1 to EndLba:0x3B6ED71 with One's Pattern
14:36:07: [ WrLbaNoData(0x3B6ECF1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2872 ] 
14:36:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ECF1 to EndLba:0x3B6ED71 with One's Pattern 

14:36:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F7 to EndLba:0x250D1 with Constant Pattern
14:36:07: [ RdLbaNoData(0x231F7, 0x1EDA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2873 ] 
14:36:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F7 to EndLba:0x250D1 with Constant Pattern 

14:36:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3947
14:36:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1F60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F210>, <None>) , Command count = 2874 ] 
14:36:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:09: Host Frequency set to 25000 KHz
14:36:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EED0>, 0x0, True) , Command count = 2875 ] 
14:36:09: [GO18_globalSetVolt]### Host voltage value is set.
14:36:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0529B4B0>, 0x0, False) , Command count = 2876 ] 
14:36:09: [GO18_globalSetVolt]### Host voltage value is set.
14:36:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2877 ] 
14:36:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2878 ] 
14:36:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2879 ] 
14:36:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x052C1DE0>) , Command count = 2880 ] 
14:36:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3C30>, <py_sfcl.CommandDataDefinition object at 0x060E34E0>) , Command count = 2881 ] 
14:36:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:10: [ SetCardRCA(0x1, 0xD555) , Command count = 2882 ] 
14:36:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:10: Host Frequency set to 25000 KHz
14:36:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:10: ####CSD Registe 2.0 Values####
14:36:10: CSD_STRUCTURE                                 :0x1
14:36:10: Reserv1                                       :0x0
14:36:10: Time Access 1 TAAC                            :0xe
14:36:10: Time Access 2 NSAC*100                        :0x0
14:36:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:10: Card Command Classess CCC                     :0x5b5
14:36:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:10: DSR(driver stage register)  DSR_IMP           :0x0
14:36:10: Reserv2                                       :0x0
14:36:10: Device Size C_SIZE                            :0xedc8
14:36:10: Reserv3                                       :0x0
14:36:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:10: Reserv4                                       :0x0
14:36:10: Write Speed Factor R2W_FACTOR                 :0x2
14:36:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:10: FILE_FORMAT_GRP                               :0x0
14:36:10: COPY flag                                     :0x1
14:36:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:10: File_Format                                   :0x0
14:36:10: CRC                                           :0x0
14:36:10: ####CSD Registe Values####  

14:36:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:10: [GetSCRRegisterEntry] Passed
14:36:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:10: Data_Status_After Erases          : 0
14:36:10: CPRM Security Support             : No Security
14:36:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:10: Spec. Version                     : Version 3.0X
14:36:10: Extended Security Support         : Extended_Security_Not_Supported
14:36:10: Command Support                   : COMMAND_SUPPORT
14:36:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x060E3780>) , Command count = 2883 ] 
14:36:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x0613FA20>) , Command count = 2884 ] 
14:36:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:10: [ SetBusWidth(0x4) , Command count = 2885 ] 
14:36:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F0C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2886 ] 
14:36:10: Protected Area Size 0x28000
14:36:10: Bus Width           2
14:36:10: Secure Mode         0
14:36:10: Speed  Class        4
14:36:10: Perf Move           0
14:36:10: Au Size             9
14:36:10: Erase Size          15
14:36:10: Erase Timeout       1
14:36:10: Erase offset        1
14:36:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2887 ] 
14:36:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:10: Host Frequency set to 100000 KHz
14:36:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:10: ####CSD Registe 2.0 Values####
14:36:10: CSD_STRUCTURE                                 :0x1
14:36:10: Reserv1                                       :0x0
14:36:10: Time Access 1 TAAC                            :0xe
14:36:10: Time Access 2 NSAC*100                        :0x0
14:36:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:10: Card Command Classess CCC                     :0x5b5
14:36:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:10: DSR(driver stage register)  DSR_IMP           :0x0
14:36:10: Reserv2                                       :0x0
14:36:10: Device Size C_SIZE                            :0xedc8
14:36:10: Reserv3                                       :0x0
14:36:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:10: Reserv4                                       :0x0
14:36:10: Write Speed Factor R2W_FACTOR                 :0x2
14:36:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:10: FILE_FORMAT_GRP                               :0x0
14:36:10: COPY flag                                     :0x1
14:36:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:10: File_Format                                   :0x0
14:36:10: CRC                                           :0x0
14:36:10: ####CSD Registe Values####  

14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F540>, <py_sfcl.CommandDataDefinition object at 0x0611C240>) , Command count = 2888 ] 
14:36:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F5A0>, <py_sfcl.CommandDataDefinition object at 0x0611CC60>) , Command count = 2889 ] 
14:36:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E57E to EndLba:0x3B6E5FE with One's Pattern
14:36:10: [ WrLbaNoData(0x3B6E57E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2890 ] 
14:36:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E57E to EndLba:0x3B6E5FE with One's Pattern 

14:36:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E5FE to EndLba:0x3B6E67E with One's Pattern
14:36:10: [ WrLbaNoData(0x3B6E5FE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2891 ] 
14:36:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E5FE to EndLba:0x3B6E67E with One's Pattern 

14:36:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F7 to EndLba:0x250CF with Constant Pattern
14:36:10: [ RdLbaNoData(0x231F7, 0x1ED8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2892 ] 
14:36:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F7 to EndLba:0x250CF with Constant Pattern 

14:36:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3946
14:36:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E39F0>, <py_sfcl.PySEnhancedCmdData object at 0x0611C810>, <None>) , Command count = 2893 ] 
14:36:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:13: Host Frequency set to 25000 KHz
14:36:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CB40>, 0x0, True) , Command count = 2894 ] 
14:36:13: [GO18_globalSetVolt]### Host voltage value is set.
14:36:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F300>, 0x0, False) , Command count = 2895 ] 
14:36:13: [GO18_globalSetVolt]### Host voltage value is set.
14:36:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2896 ] 
14:36:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2897 ] 
14:36:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2898 ] 
14:36:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E38A0>, <py_sfcl.CommandDataDefinition object at 0x0611C8A0>) , Command count = 2899 ] 
14:36:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 2900 ] 
14:36:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2901 ] 
14:36:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:13: Host Frequency set to 25000 KHz
14:36:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:13: ####CSD Registe 2.0 Values####
14:36:13: CSD_STRUCTURE                                 :0x1
14:36:13: Reserv1                                       :0x0
14:36:13: Time Access 1 TAAC                            :0xe
14:36:13: Time Access 2 NSAC*100                        :0x0
14:36:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:13: Card Command Classess CCC                     :0x5b5
14:36:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:13: DSR(driver stage register)  DSR_IMP           :0x0
14:36:13: Reserv2                                       :0x0
14:36:13: Device Size C_SIZE                            :0xedc8
14:36:13: Reserv3                                       :0x0
14:36:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:13: Reserv4                                       :0x0
14:36:13: Write Speed Factor R2W_FACTOR                 :0x2
14:36:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:13: FILE_FORMAT_GRP                               :0x0
14:36:13: COPY flag                                     :0x1
14:36:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:13: File_Format                                   :0x0
14:36:13: CRC                                           :0x0
14:36:13: ####CSD Registe Values####  

14:36:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:13: [GetSCRRegisterEntry] Passed
14:36:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:13: Data_Status_After Erases          : 0
14:36:13: CPRM Security Support             : No Security
14:36:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:13: Spec. Version                     : Version 3.0X
14:36:13: Extended Security Support         : Extended_Security_Not_Supported
14:36:13: Command Support                   : COMMAND_SUPPORT
14:36:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E10>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 2902 ] 
14:36:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129060>, <py_sfcl.CommandDataDefinition object at 0x06129210>) , Command count = 2903 ] 
14:36:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:13: [ SetBusWidth(0x4) , Command count = 2904 ] 
14:36:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2905 ] 
14:36:13: Protected Area Size 0x28000
14:36:13: Bus Width           2
14:36:13: Secure Mode         0
14:36:13: Speed  Class        4
14:36:13: Perf Move           0
14:36:13: Au Size             9
14:36:13: Erase Size          15
14:36:13: Erase Timeout       1
14:36:13: Erase offset        1
14:36:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2906 ] 
14:36:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:13: Host Frequency set to 100000 KHz
14:36:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:13: ####CSD Registe 2.0 Values####
14:36:13: CSD_STRUCTURE                                 :0x1
14:36:13: Reserv1                                       :0x0
14:36:13: Time Access 1 TAAC                            :0xe
14:36:13: Time Access 2 NSAC*100                        :0x0
14:36:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:13: Card Command Classess CCC                     :0x5b5
14:36:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:13: DSR(driver stage register)  DSR_IMP           :0x0
14:36:13: Reserv2                                       :0x0
14:36:13: Device Size C_SIZE                            :0xedc8
14:36:13: Reserv3                                       :0x0
14:36:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:14: Reserv4                                       :0x0
14:36:14: Write Speed Factor R2W_FACTOR                 :0x2
14:36:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:14: FILE_FORMAT_GRP                               :0x0
14:36:14: COPY flag                                     :0x1
14:36:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:14: File_Format                                   :0x0
14:36:14: CRC                                           :0x0
14:36:14: ####CSD Registe Values####  

14:36:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3840>, <py_sfcl.CommandDataDefinition object at 0x060E3CF0>) , Command count = 2907 ] 
14:36:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3930>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 2908 ] 
14:36:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A75 to EndLba:0x3B70AF5 with One's Pattern
14:36:14: [ WrLbaNoData(0x3B70A75, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2909 ] 
14:36:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A75 to EndLba:0x3B70AF5 with One's Pattern 

14:36:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70AF5 to EndLba:0x3B70B75 with One's Pattern
14:36:14: [ WrLbaNoData(0x3B70AF5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2910 ] 
14:36:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70AF5 to EndLba:0x3B70B75 with One's Pattern 

14:36:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F9 to EndLba:0x250CF with Constant Pattern
14:36:14: [ RdLbaNoData(0x231F9, 0x1ED6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2911 ] 
14:36:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F9 to EndLba:0x250CF with Constant Pattern 

14:36:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3945
14:36:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061292D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C540>, <py_sfcl.PySEnhancedCmdData object at 0x0611C0C0>, <None>) , Command count = 2912 ] 
14:36:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:16: Host Frequency set to 25000 KHz
14:36:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129990>, 0x0, True) , Command count = 2913 ] 
14:36:16: [GO18_globalSetVolt]### Host voltage value is set.
14:36:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CF90>, 0x0, False) , Command count = 2914 ] 
14:36:16: [GO18_globalSetVolt]### Host voltage value is set.
14:36:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2915 ] 
14:36:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2916 ] 
14:36:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2917 ] 
14:36:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1B0>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 2918 ] 
14:36:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C090>, <py_sfcl.CommandDataDefinition object at 0x0611C060>) , Command count = 2919 ] 
14:36:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:16: [ SetCardRCA(0x1, 0xD555) , Command count = 2920 ] 
14:36:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:16: Host Frequency set to 25000 KHz
14:36:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:16: ####CSD Registe 2.0 Values####
14:36:16: CSD_STRUCTURE                                 :0x1
14:36:16: Reserv1                                       :0x0
14:36:16: Time Access 1 TAAC                            :0xe
14:36:16: Time Access 2 NSAC*100                        :0x0
14:36:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:16: Card Command Classess CCC                     :0x5b5
14:36:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:16: DSR(driver stage register)  DSR_IMP           :0x0
14:36:16: Reserv2                                       :0x0
14:36:16: Device Size C_SIZE                            :0xedc8
14:36:16: Reserv3                                       :0x0
14:36:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:16: Reserv4                                       :0x0
14:36:16: Write Speed Factor R2W_FACTOR                 :0x2
14:36:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:16: FILE_FORMAT_GRP                               :0x0
14:36:16: COPY flag                                     :0x1
14:36:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:16: File_Format                                   :0x0
14:36:16: CRC                                           :0x0
14:36:16: ####CSD Registe Values####  

14:36:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:16: [GetSCRRegisterEntry] Passed
14:36:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:16: Data_Status_After Erases          : 0
14:36:16: CPRM Security Support             : No Security
14:36:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:16: Spec. Version                     : Version 3.0X
14:36:16: Extended Security Support         : Extended_Security_Not_Supported
14:36:16: Command Support                   : COMMAND_SUPPORT
14:36:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3570>, <py_sfcl.CommandDataDefinition object at 0x0611CAE0>) , Command count = 2921 ] 
14:36:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C780>, <py_sfcl.CommandDataDefinition object at 0x06129390>) , Command count = 2922 ] 
14:36:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:16: [ SetBusWidth(0x4) , Command count = 2923 ] 
14:36:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2924 ] 
14:36:16: Protected Area Size 0x28000
14:36:16: Bus Width           2
14:36:16: Secure Mode         0
14:36:16: Speed  Class        4
14:36:16: Perf Move           0
14:36:16: Au Size             9
14:36:16: Erase Size          15
14:36:16: Erase Timeout       1
14:36:16: Erase offset        1
14:36:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2925 ] 
14:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:17: Host Frequency set to 100000 KHz
14:36:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:17: ####CSD Registe 2.0 Values####
14:36:17: CSD_STRUCTURE                                 :0x1
14:36:17: Reserv1                                       :0x0
14:36:17: Time Access 1 TAAC                            :0xe
14:36:17: Time Access 2 NSAC*100                        :0x0
14:36:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:17: Card Command Classess CCC                     :0x5b5
14:36:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:17: DSR(driver stage register)  DSR_IMP           :0x0
14:36:17: Reserv2                                       :0x0
14:36:17: Device Size C_SIZE                            :0xedc8
14:36:17: Reserv3                                       :0x0
14:36:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:17: Reserv4                                       :0x0
14:36:17: Write Speed Factor R2W_FACTOR                 :0x2
14:36:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:17: FILE_FORMAT_GRP                               :0x0
14:36:17: COPY flag                                     :0x1
14:36:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:17: File_Format                                   :0x0
14:36:17: CRC                                           :0x0
14:36:17: ####CSD Registe Values####  

14:36:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129D50>, <py_sfcl.CommandDataDefinition object at 0x061290F0>) , Command count = 2926 ] 
14:36:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 2927 ] 
14:36:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EDF to EndLba:0x3B70F5F with One's Pattern
14:36:17: [ WrLbaNoData(0x3B70EDF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2928 ] 
14:36:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EDF to EndLba:0x3B70F5F with One's Pattern 

14:36:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70F5F to EndLba:0x3B70FDF with One's Pattern
14:36:17: [ WrLbaNoData(0x3B70F5F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2929 ] 
14:36:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70F5F to EndLba:0x3B70FDF with One's Pattern 

14:36:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:17: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231F9 to EndLba:0x250CD with Constant Pattern
14:36:17: [ RdLbaNoData(0x231F9, 0x1ED4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2930 ] 
14:36:17: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231F9 to EndLba:0x250CD with Constant Pattern 

14:36:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3944
14:36:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061299F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129930>, <None>) , Command count = 2931 ] 
14:36:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:19: Host Frequency set to 25000 KHz
14:36:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129450>, 0x0, True) , Command count = 2932 ] 
14:36:19: [GO18_globalSetVolt]### Host voltage value is set.
14:36:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F2A0>, 0x0, False) , Command count = 2933 ] 
14:36:19: [GO18_globalSetVolt]### Host voltage value is set.
14:36:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2934 ] 
14:36:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2935 ] 
14:36:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2936 ] 
14:36:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7B0>, <py_sfcl.CommandDataDefinition object at 0x06129570>) , Command count = 2937 ] 
14:36:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB10>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 2938 ] 
14:36:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:20: [ SetCardRCA(0x1, 0xD555) , Command count = 2939 ] 
14:36:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:20: Host Frequency set to 25000 KHz
14:36:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:20: ####CSD Registe 2.0 Values####
14:36:20: CSD_STRUCTURE                                 :0x1
14:36:20: Reserv1                                       :0x0
14:36:20: Time Access 1 TAAC                            :0xe
14:36:20: Time Access 2 NSAC*100                        :0x0
14:36:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:20: Card Command Classess CCC                     :0x5b5
14:36:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:20: DSR(driver stage register)  DSR_IMP           :0x0
14:36:20: Reserv2                                       :0x0
14:36:20: Device Size C_SIZE                            :0xedc8
14:36:20: Reserv3                                       :0x0
14:36:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:20: Reserv4                                       :0x0
14:36:20: Write Speed Factor R2W_FACTOR                 :0x2
14:36:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:20: FILE_FORMAT_GRP                               :0x0
14:36:20: COPY flag                                     :0x1
14:36:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:20: File_Format                                   :0x0
14:36:20: CRC                                           :0x0
14:36:20: ####CSD Registe Values####  

14:36:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:20: [GetSCRRegisterEntry] Passed
14:36:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:20: Data_Status_After Erases          : 0
14:36:20: CPRM Security Support             : No Security
14:36:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:20: Spec. Version                     : Version 3.0X
14:36:20: Extended Security Support         : Extended_Security_Not_Supported
14:36:20: Command Support                   : COMMAND_SUPPORT
14:36:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CCC0>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 2940 ] 
14:36:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 2941 ] 
14:36:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:20: [ SetBusWidth(0x4) , Command count = 2942 ] 
14:36:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2943 ] 
14:36:20: Protected Area Size 0x28000
14:36:20: Bus Width           2
14:36:20: Secure Mode         0
14:36:20: Speed  Class        4
14:36:20: Perf Move           0
14:36:20: Au Size             9
14:36:20: Erase Size          15
14:36:20: Erase Timeout       1
14:36:20: Erase offset        1
14:36:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2944 ] 
14:36:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:20: Host Frequency set to 100000 KHz
14:36:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:20: ####CSD Registe 2.0 Values####
14:36:20: CSD_STRUCTURE                                 :0x1
14:36:20: Reserv1                                       :0x0
14:36:20: Time Access 1 TAAC                            :0xe
14:36:20: Time Access 2 NSAC*100                        :0x0
14:36:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:20: Card Command Classess CCC                     :0x5b5
14:36:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:20: DSR(driver stage register)  DSR_IMP           :0x0
14:36:20: Reserv2                                       :0x0
14:36:20: Device Size C_SIZE                            :0xedc8
14:36:20: Reserv3                                       :0x0
14:36:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:20: Reserv4                                       :0x0
14:36:20: Write Speed Factor R2W_FACTOR                 :0x2
14:36:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:20: FILE_FORMAT_GRP                               :0x0
14:36:20: COPY flag                                     :0x1
14:36:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:20: File_Format                                   :0x0
14:36:20: CRC                                           :0x0
14:36:20: ####CSD Registe Values####  

14:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138480>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 2945 ] 
14:36:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 2946 ] 
14:36:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B712DF to EndLba:0x3B7135F with One's Pattern
14:36:20: [ WrLbaNoData(0x3B712DF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2947 ] 
14:36:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B712DF to EndLba:0x3B7135F with One's Pattern 

14:36:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7135F to EndLba:0x3B713DF with One's Pattern
14:36:20: [ WrLbaNoData(0x3B7135F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2948 ] 
14:36:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7135F to EndLba:0x3B713DF with One's Pattern 

14:36:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231FB to EndLba:0x250CD with Constant Pattern
14:36:21: [ RdLbaNoData(0x231FB, 0x1ED2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2949 ] 
14:36:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231FB to EndLba:0x250CD with Constant Pattern 

14:36:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3943
14:36:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129810>, <py_sfcl.PySEnhancedCmdData object at 0x06129DB0>, <None>) , Command count = 2950 ] 
14:36:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:23: Host Frequency set to 25000 KHz
14:36:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129660>, 0x0, True) , Command count = 2951 ] 
14:36:23: [GO18_globalSetVolt]### Host voltage value is set.
14:36:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E270>, 0x0, False) , Command count = 2952 ] 
14:36:23: [GO18_globalSetVolt]### Host voltage value is set.
14:36:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2953 ] 
14:36:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2954 ] 
14:36:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2955 ] 
14:36:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129B10>) , Command count = 2956 ] 
14:36:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x061294B0>) , Command count = 2957 ] 
14:36:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:23: [ SetCardRCA(0x1, 0xD555) , Command count = 2958 ] 
14:36:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:23: Host Frequency set to 25000 KHz
14:36:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:23: ####CSD Registe 2.0 Values####
14:36:23: CSD_STRUCTURE                                 :0x1
14:36:23: Reserv1                                       :0x0
14:36:23: Time Access 1 TAAC                            :0xe
14:36:23: Time Access 2 NSAC*100                        :0x0
14:36:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:23: Card Command Classess CCC                     :0x5b5
14:36:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:23: DSR(driver stage register)  DSR_IMP           :0x0
14:36:23: Reserv2                                       :0x0
14:36:23: Device Size C_SIZE                            :0xedc8
14:36:23: Reserv3                                       :0x0
14:36:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:23: Reserv4                                       :0x0
14:36:23: Write Speed Factor R2W_FACTOR                 :0x2
14:36:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:23: FILE_FORMAT_GRP                               :0x0
14:36:23: COPY flag                                     :0x1
14:36:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:23: File_Format                                   :0x0
14:36:23: CRC                                           :0x0
14:36:23: ####CSD Registe Values####  

14:36:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:23: [GetSCRRegisterEntry] Passed
14:36:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:23: Data_Status_After Erases          : 0
14:36:23: CPRM Security Support             : No Security
14:36:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:23: Spec. Version                     : Version 3.0X
14:36:23: Extended Security Support         : Extended_Security_Not_Supported
14:36:23: Command Support                   : COMMAND_SUPPORT
14:36:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291E0>, <py_sfcl.CommandDataDefinition object at 0x06129750>) , Command count = 2959 ] 
14:36:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x0611C8D0>) , Command count = 2960 ] 
14:36:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:23: [ SetBusWidth(0x4) , Command count = 2961 ] 
14:36:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2962 ] 
14:36:23: Protected Area Size 0x28000
14:36:23: Bus Width           2
14:36:23: Secure Mode         0
14:36:23: Speed  Class        4
14:36:23: Perf Move           0
14:36:23: Au Size             9
14:36:23: Erase Size          15
14:36:23: Erase Timeout       1
14:36:23: Erase offset        1
14:36:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2963 ] 
14:36:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:23: Host Frequency set to 100000 KHz
14:36:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:23: ####CSD Registe 2.0 Values####
14:36:23: CSD_STRUCTURE                                 :0x1
14:36:23: Reserv1                                       :0x0
14:36:23: Time Access 1 TAAC                            :0xe
14:36:23: Time Access 2 NSAC*100                        :0x0
14:36:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:23: Card Command Classess CCC                     :0x5b5
14:36:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:23: DSR(driver stage register)  DSR_IMP           :0x0
14:36:23: Reserv2                                       :0x0
14:36:23: Device Size C_SIZE                            :0xedc8
14:36:23: Reserv3                                       :0x0
14:36:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:24: Reserv4                                       :0x0
14:36:24: Write Speed Factor R2W_FACTOR                 :0x2
14:36:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:24: FILE_FORMAT_GRP                               :0x0
14:36:24: COPY flag                                     :0x1
14:36:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:24: File_Format                                   :0x0
14:36:24: CRC                                           :0x0
14:36:24: ####CSD Registe Values####  

14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0F0>, <py_sfcl.CommandDataDefinition object at 0x061297B0>) , Command count = 2964 ] 
14:36:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 2965 ] 
14:36:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EAB8 to EndLba:0x3B6EB38 with One's Pattern
14:36:24: [ WrLbaNoData(0x3B6EAB8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2966 ] 
14:36:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EAB8 to EndLba:0x3B6EB38 with One's Pattern 

14:36:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB38 to EndLba:0x3B6EBB8 with One's Pattern
14:36:24: [ WrLbaNoData(0x3B6EB38, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2967 ] 
14:36:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB38 to EndLba:0x3B6EBB8 with One's Pattern 

14:36:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231FB to EndLba:0x250CB with Constant Pattern
14:36:24: [ RdLbaNoData(0x231FB, 0x1ED0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2968 ] 
14:36:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231FB to EndLba:0x250CB with Constant Pattern 

14:36:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3942
14:36:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E7B0>, <py_sfcl.PySEnhancedCmdData object at 0x06129600>, <None>) , Command count = 2969 ] 
14:36:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:26: Host Frequency set to 25000 KHz
14:36:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C840>, 0x0, True) , Command count = 2970 ] 
14:36:26: [GO18_globalSetVolt]### Host voltage value is set.
14:36:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E450>, 0x0, False) , Command count = 2971 ] 
14:36:26: [GO18_globalSetVolt]### Host voltage value is set.
14:36:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2972 ] 
14:36:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2973 ] 
14:36:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2974 ] 
14:36:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132060>, <py_sfcl.CommandDataDefinition object at 0x0612E9F0>) , Command count = 2975 ] 
14:36:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 2976 ] 
14:36:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2977 ] 
14:36:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:26: Host Frequency set to 25000 KHz
14:36:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:26: ####CSD Registe 2.0 Values####
14:36:26: CSD_STRUCTURE                                 :0x1
14:36:26: Reserv1                                       :0x0
14:36:26: Time Access 1 TAAC                            :0xe
14:36:26: Time Access 2 NSAC*100                        :0x0
14:36:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:26: Card Command Classess CCC                     :0x5b5
14:36:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:26: DSR(driver stage register)  DSR_IMP           :0x0
14:36:26: Reserv2                                       :0x0
14:36:26: Device Size C_SIZE                            :0xedc8
14:36:26: Reserv3                                       :0x0
14:36:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:26: Reserv4                                       :0x0
14:36:26: Write Speed Factor R2W_FACTOR                 :0x2
14:36:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:26: FILE_FORMAT_GRP                               :0x0
14:36:26: COPY flag                                     :0x1
14:36:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:26: File_Format                                   :0x0
14:36:26: CRC                                           :0x0
14:36:26: ####CSD Registe Values####  

14:36:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:27: [GetSCRRegisterEntry] Passed
14:36:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:27: Data_Status_After Erases          : 0
14:36:27: CPRM Security Support             : No Security
14:36:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:27: Spec. Version                     : Version 3.0X
14:36:27: Extended Security Support         : Extended_Security_Not_Supported
14:36:27: Command Support                   : COMMAND_SUPPORT
14:36:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA20>, <py_sfcl.CommandDataDefinition object at 0x06145180>) , Command count = 2978 ] 
14:36:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 2979 ] 
14:36:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:27: [ SetBusWidth(0x4) , Command count = 2980 ] 
14:36:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2981 ] 
14:36:27: Protected Area Size 0x28000
14:36:27: Bus Width           2
14:36:27: Secure Mode         0
14:36:27: Speed  Class        4
14:36:27: Perf Move           0
14:36:27: Au Size             9
14:36:27: Erase Size          15
14:36:27: Erase Timeout       1
14:36:27: Erase offset        1
14:36:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2982 ] 
14:36:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:27: Host Frequency set to 100000 KHz
14:36:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:27: ####CSD Registe 2.0 Values####
14:36:27: CSD_STRUCTURE                                 :0x1
14:36:27: Reserv1                                       :0x0
14:36:27: Time Access 1 TAAC                            :0xe
14:36:27: Time Access 2 NSAC*100                        :0x0
14:36:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:27: Card Command Classess CCC                     :0x5b5
14:36:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:27: DSR(driver stage register)  DSR_IMP           :0x0
14:36:27: Reserv2                                       :0x0
14:36:27: Device Size C_SIZE                            :0xedc8
14:36:27: Reserv3                                       :0x0
14:36:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:27: Reserv4                                       :0x0
14:36:27: Write Speed Factor R2W_FACTOR                 :0x2
14:36:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:27: FILE_FORMAT_GRP                               :0x0
14:36:27: COPY flag                                     :0x1
14:36:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:27: File_Format                                   :0x0
14:36:27: CRC                                           :0x0
14:36:27: ####CSD Registe Values####  

14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E510>, <py_sfcl.CommandDataDefinition object at 0x0612ECF0>) , Command count = 2983 ] 
14:36:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 2984 ] 
14:36:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70D46 to EndLba:0x3B70DC6 with One's Pattern
14:36:27: [ WrLbaNoData(0x3B70D46, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2985 ] 
14:36:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70D46 to EndLba:0x3B70DC6 with One's Pattern 

14:36:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70DC6 to EndLba:0x3B70E46 with One's Pattern
14:36:27: [ WrLbaNoData(0x3B70DC6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 2986 ] 
14:36:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70DC6 to EndLba:0x3B70E46 with One's Pattern 

14:36:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231FD to EndLba:0x250CB with Constant Pattern
14:36:27: [ RdLbaNoData(0x231FD, 0x1ECE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 2987 ] 
14:36:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231FD to EndLba:0x250CB with Constant Pattern 

14:36:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3941
14:36:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061320F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129C00>, <py_sfcl.PySEnhancedCmdData object at 0x0612E990>, <None>) , Command count = 2988 ] 
14:36:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:30: Host Frequency set to 25000 KHz
14:36:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E5A0>, 0x0, True) , Command count = 2989 ] 
14:36:30: [GO18_globalSetVolt]### Host voltage value is set.
14:36:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F810>, 0x0, False) , Command count = 2990 ] 
14:36:30: [GO18_globalSetVolt]### Host voltage value is set.
14:36:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2991 ] 
14:36:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2992 ] 
14:36:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2993 ] 
14:36:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129150>, <py_sfcl.CommandDataDefinition object at 0x061297E0>) , Command count = 2994 ] 
14:36:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB70>, <py_sfcl.CommandDataDefinition object at 0x0612E4E0>) , Command count = 2995 ] 
14:36:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2996 ] 
14:36:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:30: Host Frequency set to 25000 KHz
14:36:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:30: ####CSD Registe 2.0 Values####
14:36:30: CSD_STRUCTURE                                 :0x1
14:36:30: Reserv1                                       :0x0
14:36:30: Time Access 1 TAAC                            :0xe
14:36:30: Time Access 2 NSAC*100                        :0x0
14:36:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:30: Card Command Classess CCC                     :0x5b5
14:36:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:30: DSR(driver stage register)  DSR_IMP           :0x0
14:36:30: Reserv2                                       :0x0
14:36:30: Device Size C_SIZE                            :0xedc8
14:36:30: Reserv3                                       :0x0
14:36:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:30: Reserv4                                       :0x0
14:36:30: Write Speed Factor R2W_FACTOR                 :0x2
14:36:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:30: FILE_FORMAT_GRP                               :0x0
14:36:30: COPY flag                                     :0x1
14:36:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:30: File_Format                                   :0x0
14:36:30: CRC                                           :0x0
14:36:30: ####CSD Registe Values####  

14:36:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:30: [GetSCRRegisterEntry] Passed
14:36:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:30: Data_Status_After Erases          : 0
14:36:30: CPRM Security Support             : No Security
14:36:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:30: Spec. Version                     : Version 3.0X
14:36:30: Extended Security Support         : Extended_Security_Not_Supported
14:36:30: Command Support                   : COMMAND_SUPPORT
14:36:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4B0>, <py_sfcl.CommandDataDefinition object at 0x0612ECC0>) , Command count = 2997 ] 
14:36:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E600>, <py_sfcl.CommandDataDefinition object at 0x0612E630>) , Command count = 2998 ] 
14:36:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:30: [ SetBusWidth(0x4) , Command count = 2999 ] 
14:36:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3000 ] 
14:36:30: Protected Area Size 0x28000
14:36:30: Bus Width           2
14:36:30: Secure Mode         0
14:36:30: Speed  Class        4
14:36:30: Perf Move           0
14:36:30: Au Size             9
14:36:30: Erase Size          15
14:36:30: Erase Timeout       1
14:36:30: Erase offset        1
14:36:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3001 ] 
14:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:30: Host Frequency set to 100000 KHz
14:36:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:30: ####CSD Registe 2.0 Values####
14:36:30: CSD_STRUCTURE                                 :0x1
14:36:30: Reserv1                                       :0x0
14:36:30: Time Access 1 TAAC                            :0xe
14:36:30: Time Access 2 NSAC*100                        :0x0
14:36:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:30: Card Command Classess CCC                     :0x5b5
14:36:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:30: DSR(driver stage register)  DSR_IMP           :0x0
14:36:30: Reserv2                                       :0x0
14:36:30: Device Size C_SIZE                            :0xedc8
14:36:30: Reserv3                                       :0x0
14:36:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:31: Reserv4                                       :0x0
14:36:31: Write Speed Factor R2W_FACTOR                 :0x2
14:36:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:31: FILE_FORMAT_GRP                               :0x0
14:36:31: COPY flag                                     :0x1
14:36:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:31: File_Format                                   :0x0
14:36:31: CRC                                           :0x0
14:36:31: ####CSD Registe Values####  

14:36:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD50>, <py_sfcl.CommandDataDefinition object at 0x06132120>) , Command count = 3002 ] 
14:36:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 3003 ] 
14:36:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E76C to EndLba:0x3B6E7EC with One's Pattern
14:36:31: [ WrLbaNoData(0x3B6E76C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3004 ] 
14:36:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E76C to EndLba:0x3B6E7EC with One's Pattern 

14:36:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E7EC to EndLba:0x3B6E86C with One's Pattern
14:36:31: [ WrLbaNoData(0x3B6E7EC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3005 ] 
14:36:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E7EC to EndLba:0x3B6E86C with One's Pattern 

14:36:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231FD to EndLba:0x250C9 with Constant Pattern
14:36:31: [ RdLbaNoData(0x231FD, 0x1ECC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3006 ] 
14:36:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231FD to EndLba:0x250C9 with Constant Pattern 

14:36:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3940
14:36:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061329C0>, <py_sfcl.PySEnhancedCmdData object at 0x061326F0>, <None>) , Command count = 3007 ] 
14:36:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:33: Host Frequency set to 25000 KHz
14:36:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E030>, 0x0, True) , Command count = 3008 ] 
14:36:33: [GO18_globalSetVolt]### Host voltage value is set.
14:36:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EC00>, 0x0, False) , Command count = 3009 ] 
14:36:33: [GO18_globalSetVolt]### Host voltage value is set.
14:36:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3010 ] 
14:36:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3011 ] 
14:36:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3012 ] 
14:36:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132750>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 3013 ] 
14:36:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x06132390>) , Command count = 3014 ] 
14:36:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:33: [ SetCardRCA(0x1, 0xD555) , Command count = 3015 ] 
14:36:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:33: Host Frequency set to 25000 KHz
14:36:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:33: ####CSD Registe 2.0 Values####
14:36:33: CSD_STRUCTURE                                 :0x1
14:36:33: Reserv1                                       :0x0
14:36:33: Time Access 1 TAAC                            :0xe
14:36:33: Time Access 2 NSAC*100                        :0x0
14:36:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:33: Card Command Classess CCC                     :0x5b5
14:36:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:33: DSR(driver stage register)  DSR_IMP           :0x0
14:36:33: Reserv2                                       :0x0
14:36:33: Device Size C_SIZE                            :0xedc8
14:36:33: Reserv3                                       :0x0
14:36:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:33: Reserv4                                       :0x0
14:36:33: Write Speed Factor R2W_FACTOR                 :0x2
14:36:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:33: FILE_FORMAT_GRP                               :0x0
14:36:33: COPY flag                                     :0x1
14:36:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:33: File_Format                                   :0x0
14:36:33: CRC                                           :0x0
14:36:33: ####CSD Registe Values####  

14:36:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:33: [GetSCRRegisterEntry] Passed
14:36:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:33: Data_Status_After Erases          : 0
14:36:33: CPRM Security Support             : No Security
14:36:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:33: Spec. Version                     : Version 3.0X
14:36:33: Extended Security Support         : Extended_Security_Not_Supported
14:36:33: Command Support                   : COMMAND_SUPPORT
14:36:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E35A0>, <py_sfcl.CommandDataDefinition object at 0x06132780>) , Command count = 3016 ] 
14:36:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDE0>, <py_sfcl.CommandDataDefinition object at 0x061322A0>) , Command count = 3017 ] 
14:36:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:33: [ SetBusWidth(0x4) , Command count = 3018 ] 
14:36:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3019 ] 
14:36:33: Protected Area Size 0x28000
14:36:33: Bus Width           2
14:36:33: Secure Mode         0
14:36:33: Speed  Class        4
14:36:33: Perf Move           0
14:36:33: Au Size             9
14:36:33: Erase Size          15
14:36:33: Erase Timeout       1
14:36:33: Erase offset        1
14:36:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3020 ] 
14:36:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:33: Host Frequency set to 100000 KHz
14:36:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:33: ####CSD Registe 2.0 Values####
14:36:33: CSD_STRUCTURE                                 :0x1
14:36:34: Reserv1                                       :0x0
14:36:34: Time Access 1 TAAC                            :0xe
14:36:34: Time Access 2 NSAC*100                        :0x0
14:36:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:34: Card Command Classess CCC                     :0x5b5
14:36:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:34: DSR(driver stage register)  DSR_IMP           :0x0
14:36:34: Reserv2                                       :0x0
14:36:34: Device Size C_SIZE                            :0xedc8
14:36:34: Reserv3                                       :0x0
14:36:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:34: Reserv4                                       :0x0
14:36:34: Write Speed Factor R2W_FACTOR                 :0x2
14:36:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:34: FILE_FORMAT_GRP                               :0x0
14:36:34: COPY flag                                     :0x1
14:36:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:34: File_Format                                   :0x0
14:36:34: CRC                                           :0x0
14:36:34: ####CSD Registe Values####  

14:36:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB40>, <py_sfcl.CommandDataDefinition object at 0x06132690>) , Command count = 3021 ] 
14:36:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138450>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 3022 ] 
14:36:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71F63 to EndLba:0x3B71FE3 with One's Pattern
14:36:34: [ WrLbaNoData(0x3B71F63, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3023 ] 
14:36:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71F63 to EndLba:0x3B71FE3 with One's Pattern 

14:36:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71FE3 to EndLba:0x3B72063 with One's Pattern
14:36:34: [ WrLbaNoData(0x3B71FE3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3024 ] 
14:36:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71FE3 to EndLba:0x3B72063 with One's Pattern 

14:36:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231FF to EndLba:0x250C9 with Constant Pattern
14:36:34: [ RdLbaNoData(0x231FF, 0x1ECA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3025 ] 
14:36:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231FF to EndLba:0x250C9 with Constant Pattern 

14:36:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3939
14:36:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061327E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061325A0>, <py_sfcl.PySEnhancedCmdData object at 0x06132990>, <None>) , Command count = 3026 ] 
14:36:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:36: Host Frequency set to 25000 KHz
14:36:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E420>, 0x0, True) , Command count = 3027 ] 
14:36:36: [GO18_globalSetVolt]### Host voltage value is set.
14:36:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F870>, 0x0, False) , Command count = 3028 ] 
14:36:36: [GO18_globalSetVolt]### Host voltage value is set.
14:36:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3029 ] 
14:36:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3030 ] 
14:36:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3031 ] 
14:36:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x06132DE0>) , Command count = 3032 ] 
14:36:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x06132F30>) , Command count = 3033 ] 
14:36:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:37: [ SetCardRCA(0x1, 0xD555) , Command count = 3034 ] 
14:36:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:37: Host Frequency set to 25000 KHz
14:36:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:37: ####CSD Registe 2.0 Values####
14:36:37: CSD_STRUCTURE                                 :0x1
14:36:37: Reserv1                                       :0x0
14:36:37: Time Access 1 TAAC                            :0xe
14:36:37: Time Access 2 NSAC*100                        :0x0
14:36:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:37: Card Command Classess CCC                     :0x5b5
14:36:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:37: DSR(driver stage register)  DSR_IMP           :0x0
14:36:37: Reserv2                                       :0x0
14:36:37: Device Size C_SIZE                            :0xedc8
14:36:37: Reserv3                                       :0x0
14:36:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:37: Reserv4                                       :0x0
14:36:37: Write Speed Factor R2W_FACTOR                 :0x2
14:36:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:37: FILE_FORMAT_GRP                               :0x0
14:36:37: COPY flag                                     :0x1
14:36:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:37: File_Format                                   :0x0
14:36:37: CRC                                           :0x0
14:36:37: ####CSD Registe Values####  

14:36:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:37: [GetSCRRegisterEntry] Passed
14:36:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:37: Data_Status_After Erases          : 0
14:36:37: CPRM Security Support             : No Security
14:36:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:37: Spec. Version                     : Version 3.0X
14:36:37: Extended Security Support         : Extended_Security_Not_Supported
14:36:37: Command Support                   : COMMAND_SUPPORT
14:36:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324B0>, <py_sfcl.CommandDataDefinition object at 0x06132F90>) , Command count = 3035 ] 
14:36:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x061321E0>) , Command count = 3036 ] 
14:36:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:37: [ SetBusWidth(0x4) , Command count = 3037 ] 
14:36:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3038 ] 
14:36:37: Protected Area Size 0x28000
14:36:37: Bus Width           2
14:36:37: Secure Mode         0
14:36:37: Speed  Class        4
14:36:37: Perf Move           0
14:36:37: Au Size             9
14:36:37: Erase Size          15
14:36:37: Erase Timeout       1
14:36:37: Erase offset        1
14:36:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3039 ] 
14:36:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:37: Host Frequency set to 100000 KHz
14:36:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:37: ####CSD Registe 2.0 Values####
14:36:37: CSD_STRUCTURE                                 :0x1
14:36:37: Reserv1                                       :0x0
14:36:37: Time Access 1 TAAC                            :0xe
14:36:37: Time Access 2 NSAC*100                        :0x0
14:36:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:37: Card Command Classess CCC                     :0x5b5
14:36:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:37: DSR(driver stage register)  DSR_IMP           :0x0
14:36:37: Reserv2                                       :0x0
14:36:37: Device Size C_SIZE                            :0xedc8
14:36:37: Reserv3                                       :0x0
14:36:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:37: Reserv4                                       :0x0
14:36:37: Write Speed Factor R2W_FACTOR                 :0x2
14:36:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:37: FILE_FORMAT_GRP                               :0x0
14:36:37: COPY flag                                     :0x1
14:36:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:37: File_Format                                   :0x0
14:36:37: CRC                                           :0x0
14:36:37: ####CSD Registe Values####  

14:36:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F90>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 3040 ] 
14:36:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061320C0>, <py_sfcl.CommandDataDefinition object at 0x061327B0>) , Command count = 3041 ] 
14:36:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E9A4 to EndLba:0x3B6EA24 with One's Pattern
14:36:37: [ WrLbaNoData(0x3B6E9A4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3042 ] 
14:36:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E9A4 to EndLba:0x3B6EA24 with One's Pattern 

14:36:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA24 to EndLba:0x3B6EAA4 with One's Pattern
14:36:37: [ WrLbaNoData(0x3B6EA24, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3043 ] 
14:36:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA24 to EndLba:0x3B6EAA4 with One's Pattern 

14:36:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x231FF to EndLba:0x250C7 with Constant Pattern
14:36:38: [ RdLbaNoData(0x231FF, 0x1EC8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3044 ] 
14:36:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x231FF to EndLba:0x250C7 with Constant Pattern 

14:36:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3938
14:36:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061383C0>, <py_sfcl.PySEnhancedCmdData object at 0x06138540>, <None>) , Command count = 3045 ] 
14:36:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:40: Host Frequency set to 25000 KHz
14:36:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E870>, 0x0, True) , Command count = 3046 ] 
14:36:40: [GO18_globalSetVolt]### Host voltage value is set.
14:36:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138120>, 0x0, False) , Command count = 3047 ] 
14:36:40: [GO18_globalSetVolt]### Host voltage value is set.
14:36:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3048 ] 
14:36:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3049 ] 
14:36:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3050 ] 
14:36:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x06138AE0>) , Command count = 3051 ] 
14:36:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06132810>) , Command count = 3052 ] 
14:36:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:40: [ SetCardRCA(0x1, 0xD555) , Command count = 3053 ] 
14:36:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:40: Host Frequency set to 25000 KHz
14:36:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:40: ####CSD Registe 2.0 Values####
14:36:40: CSD_STRUCTURE                                 :0x1
14:36:40: Reserv1                                       :0x0
14:36:40: Time Access 1 TAAC                            :0xe
14:36:40: Time Access 2 NSAC*100                        :0x0
14:36:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:40: Card Command Classess CCC                     :0x5b5
14:36:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:40: DSR(driver stage register)  DSR_IMP           :0x0
14:36:40: Reserv2                                       :0x0
14:36:40: Device Size C_SIZE                            :0xedc8
14:36:40: Reserv3                                       :0x0
14:36:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:40: Reserv4                                       :0x0
14:36:40: Write Speed Factor R2W_FACTOR                 :0x2
14:36:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:40: FILE_FORMAT_GRP                               :0x0
14:36:40: COPY flag                                     :0x1
14:36:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:40: File_Format                                   :0x0
14:36:40: CRC                                           :0x0
14:36:40: ####CSD Registe Values####  

14:36:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:40: [GetSCRRegisterEntry] Passed
14:36:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:40: Data_Status_After Erases          : 0
14:36:40: CPRM Security Support             : No Security
14:36:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:40: Spec. Version                     : Version 3.0X
14:36:40: Extended Security Support         : Extended_Security_Not_Supported
14:36:40: Command Support                   : COMMAND_SUPPORT
14:36:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132ED0>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 3054 ] 
14:36:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 3055 ] 
14:36:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:40: [ SetBusWidth(0x4) , Command count = 3056 ] 
14:36:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3057 ] 
14:36:40: Protected Area Size 0x28000
14:36:40: Bus Width           2
14:36:40: Secure Mode         0
14:36:40: Speed  Class        4
14:36:40: Perf Move           0
14:36:40: Au Size             9
14:36:40: Erase Size          15
14:36:40: Erase Timeout       1
14:36:40: Erase offset        1
14:36:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3058 ] 
14:36:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:40: Host Frequency set to 100000 KHz
14:36:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:40: ####CSD Registe 2.0 Values####
14:36:40: CSD_STRUCTURE                                 :0x1
14:36:40: Reserv1                                       :0x0
14:36:40: Time Access 1 TAAC                            :0xe
14:36:40: Time Access 2 NSAC*100                        :0x0
14:36:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:40: Card Command Classess CCC                     :0x5b5
14:36:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:40: DSR(driver stage register)  DSR_IMP           :0x0
14:36:40: Reserv2                                       :0x0
14:36:40: Device Size C_SIZE                            :0xedc8
14:36:40: Reserv3                                       :0x0
14:36:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:41: Reserv4                                       :0x0
14:36:41: Write Speed Factor R2W_FACTOR                 :0x2
14:36:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:41: FILE_FORMAT_GRP                               :0x0
14:36:41: COPY flag                                     :0x1
14:36:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:41: File_Format                                   :0x0
14:36:41: CRC                                           :0x0
14:36:41: ####CSD Registe Values####  

14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x06138720>) , Command count = 3059 ] 
14:36:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x061382D0>) , Command count = 3060 ] 
14:36:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FF25 to EndLba:0x3B6FFA5 with One's Pattern
14:36:41: [ WrLbaNoData(0x3B6FF25, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3061 ] 
14:36:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FF25 to EndLba:0x3B6FFA5 with One's Pattern 

14:36:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FFA5 to EndLba:0x3B70025 with One's Pattern
14:36:41: [ WrLbaNoData(0x3B6FFA5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3062 ] 
14:36:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FFA5 to EndLba:0x3B70025 with One's Pattern 

14:36:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23201 to EndLba:0x250C7 with Constant Pattern
14:36:41: [ RdLbaNoData(0x23201, 0x1EC6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3063 ] 
14:36:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23201 to EndLba:0x250C7 with Constant Pattern 

14:36:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3937
14:36:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061389C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138B10>, <py_sfcl.PySEnhancedCmdData object at 0x06138960>, <None>) , Command count = 3064 ] 
14:36:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:43: Host Frequency set to 25000 KHz
14:36:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C450>, 0x0, True) , Command count = 3065 ] 
14:36:43: [GO18_globalSetVolt]### Host voltage value is set.
14:36:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C9C0>, 0x0, False) , Command count = 3066 ] 
14:36:43: [GO18_globalSetVolt]### Host voltage value is set.
14:36:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3067 ] 
14:36:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3068 ] 
14:36:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3069 ] 
14:36:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 3070 ] 
14:36:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 3071 ] 
14:36:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3072 ] 
14:36:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:43: Host Frequency set to 25000 KHz
14:36:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:43: ####CSD Registe 2.0 Values####
14:36:43: CSD_STRUCTURE                                 :0x1
14:36:43: Reserv1                                       :0x0
14:36:43: Time Access 1 TAAC                            :0xe
14:36:43: Time Access 2 NSAC*100                        :0x0
14:36:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:43: Card Command Classess CCC                     :0x5b5
14:36:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:43: DSR(driver stage register)  DSR_IMP           :0x0
14:36:43: Reserv2                                       :0x0
14:36:43: Device Size C_SIZE                            :0xedc8
14:36:43: Reserv3                                       :0x0
14:36:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:43: Reserv4                                       :0x0
14:36:43: Write Speed Factor R2W_FACTOR                 :0x2
14:36:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:43: FILE_FORMAT_GRP                               :0x0
14:36:43: COPY flag                                     :0x1
14:36:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:43: File_Format                                   :0x0
14:36:43: CRC                                           :0x0
14:36:43: ####CSD Registe Values####  

14:36:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:43: [GetSCRRegisterEntry] Passed
14:36:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:43: Data_Status_After Erases          : 0
14:36:43: CPRM Security Support             : No Security
14:36:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:43: Spec. Version                     : Version 3.0X
14:36:43: Extended Security Support         : Extended_Security_Not_Supported
14:36:43: Command Support                   : COMMAND_SUPPORT
14:36:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FFC0>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 3073 ] 
14:36:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x06138090>) , Command count = 3074 ] 
14:36:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:43: [ SetBusWidth(0x4) , Command count = 3075 ] 
14:36:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3076 ] 
14:36:43: Protected Area Size 0x28000
14:36:43: Bus Width           2
14:36:43: Secure Mode         0
14:36:43: Speed  Class        4
14:36:43: Perf Move           0
14:36:43: Au Size             9
14:36:43: Erase Size          15
14:36:43: Erase Timeout       1
14:36:43: Erase offset        1
14:36:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3077 ] 
14:36:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:44: Host Frequency set to 100000 KHz
14:36:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:44: ####CSD Registe 2.0 Values####
14:36:44: CSD_STRUCTURE                                 :0x1
14:36:44: Reserv1                                       :0x0
14:36:44: Time Access 1 TAAC                            :0xe
14:36:44: Time Access 2 NSAC*100                        :0x0
14:36:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:44: Card Command Classess CCC                     :0x5b5
14:36:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:44: DSR(driver stage register)  DSR_IMP           :0x0
14:36:44: Reserv2                                       :0x0
14:36:44: Device Size C_SIZE                            :0xedc8
14:36:44: Reserv3                                       :0x0
14:36:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:44: Reserv4                                       :0x0
14:36:44: Write Speed Factor R2W_FACTOR                 :0x2
14:36:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:44: FILE_FORMAT_GRP                               :0x0
14:36:44: COPY flag                                     :0x1
14:36:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:44: File_Format                                   :0x0
14:36:44: CRC                                           :0x0
14:36:44: ####CSD Registe Values####  

14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF90>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 3078 ] 
14:36:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x06138510>) , Command count = 3079 ] 
14:36:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA4C to EndLba:0x3B6FACC with One's Pattern
14:36:44: [ WrLbaNoData(0x3B6FA4C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3080 ] 
14:36:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA4C to EndLba:0x3B6FACC with One's Pattern 

14:36:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FACC to EndLba:0x3B6FB4C with One's Pattern
14:36:44: [ WrLbaNoData(0x3B6FACC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3081 ] 
14:36:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FACC to EndLba:0x3B6FB4C with One's Pattern 

14:36:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23201 to EndLba:0x250C5 with Constant Pattern
14:36:44: [ RdLbaNoData(0x23201, 0x1EC4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3082 ] 
14:36:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23201 to EndLba:0x250C5 with Constant Pattern 

14:36:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3936
14:36:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FE10>, <py_sfcl.PySEnhancedCmdData object at 0x06138DB0>, <None>) , Command count = 3083 ] 
14:36:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:46: Host Frequency set to 25000 KHz
14:36:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132900>, 0x0, True) , Command count = 3084 ] 
14:36:46: [GO18_globalSetVolt]### Host voltage value is set.
14:36:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F8A0>, 0x0, False) , Command count = 3085 ] 
14:36:47: [GO18_globalSetVolt]### Host voltage value is set.
14:36:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3086 ] 
14:36:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3087 ] 
14:36:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3088 ] 
14:36:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132EA0>, <py_sfcl.CommandDataDefinition object at 0x0613F6C0>) , Command count = 3089 ] 
14:36:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138A20>, <py_sfcl.CommandDataDefinition object at 0x06138510>) , Command count = 3090 ] 
14:36:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:47: [ SetCardRCA(0x1, 0xD555) , Command count = 3091 ] 
14:36:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:47: Host Frequency set to 25000 KHz
14:36:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:47: ####CSD Registe 2.0 Values####
14:36:47: CSD_STRUCTURE                                 :0x1
14:36:47: Reserv1                                       :0x0
14:36:47: Time Access 1 TAAC                            :0xe
14:36:47: Time Access 2 NSAC*100                        :0x0
14:36:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:47: Card Command Classess CCC                     :0x5b5
14:36:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:47: DSR(driver stage register)  DSR_IMP           :0x0
14:36:47: Reserv2                                       :0x0
14:36:47: Device Size C_SIZE                            :0xedc8
14:36:47: Reserv3                                       :0x0
14:36:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:47: Reserv4                                       :0x0
14:36:47: Write Speed Factor R2W_FACTOR                 :0x2
14:36:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:47: FILE_FORMAT_GRP                               :0x0
14:36:47: COPY flag                                     :0x1
14:36:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:47: File_Format                                   :0x0
14:36:47: CRC                                           :0x0
14:36:47: ####CSD Registe Values####  

14:36:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:47: [GetSCRRegisterEntry] Passed
14:36:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:47: Data_Status_After Erases          : 0
14:36:47: CPRM Security Support             : No Security
14:36:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:47: Spec. Version                     : Version 3.0X
14:36:47: Extended Security Support         : Extended_Security_Not_Supported
14:36:47: Command Support                   : COMMAND_SUPPORT
14:36:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F510>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 3092 ] 
14:36:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C00>, <py_sfcl.CommandDataDefinition object at 0x06138330>) , Command count = 3093 ] 
14:36:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:47: [ SetBusWidth(0x4) , Command count = 3094 ] 
14:36:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3095 ] 
14:36:47: Protected Area Size 0x28000
14:36:47: Bus Width           2
14:36:47: Secure Mode         0
14:36:47: Speed  Class        4
14:36:47: Perf Move           0
14:36:47: Au Size             9
14:36:47: Erase Size          15
14:36:47: Erase Timeout       1
14:36:47: Erase offset        1
14:36:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3096 ] 
14:36:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:47: Host Frequency set to 100000 KHz
14:36:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:47: ####CSD Registe 2.0 Values####
14:36:47: CSD_STRUCTURE                                 :0x1
14:36:47: Reserv1                                       :0x0
14:36:47: Time Access 1 TAAC                            :0xe
14:36:47: Time Access 2 NSAC*100                        :0x0
14:36:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:47: Card Command Classess CCC                     :0x5b5
14:36:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:47: DSR(driver stage register)  DSR_IMP           :0x0
14:36:47: Reserv2                                       :0x0
14:36:47: Device Size C_SIZE                            :0xedc8
14:36:47: Reserv3                                       :0x0
14:36:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:47: Reserv4                                       :0x0
14:36:47: Write Speed Factor R2W_FACTOR                 :0x2
14:36:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:47: FILE_FORMAT_GRP                               :0x0
14:36:47: COPY flag                                     :0x1
14:36:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:47: File_Format                                   :0x0
14:36:47: CRC                                           :0x0
14:36:47: ####CSD Registe Values####  

14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CC0>, <py_sfcl.CommandDataDefinition object at 0x06138600>) , Command count = 3097 ] 
14:36:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x06138C30>) , Command count = 3098 ] 
14:36:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D83E to EndLba:0x3B6D8BE with One's Pattern
14:36:48: [ WrLbaNoData(0x3B6D83E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3099 ] 
14:36:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D83E to EndLba:0x3B6D8BE with One's Pattern 

14:36:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D8BE to EndLba:0x3B6D93E with One's Pattern
14:36:48: [ WrLbaNoData(0x3B6D8BE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3100 ] 
14:36:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D8BE to EndLba:0x3B6D93E with One's Pattern 

14:36:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23203 to EndLba:0x250C5 with Constant Pattern
14:36:48: [ RdLbaNoData(0x23203, 0x1EC2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3101 ] 
14:36:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23203 to EndLba:0x250C5 with Constant Pattern 

14:36:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3935
14:36:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F3F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F120>, <None>) , Command count = 3102 ] 
14:36:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:50: Host Frequency set to 25000 KHz
14:36:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F420>, 0x0, True) , Command count = 3103 ] 
14:36:50: [GO18_globalSetVolt]### Host voltage value is set.
14:36:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF240>, 0x0, False) , Command count = 3104 ] 
14:36:50: [GO18_globalSetVolt]### Host voltage value is set.
14:36:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3105 ] 
14:36:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3106 ] 
14:36:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3107 ] 
14:36:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x0613F450>) , Command count = 3108 ] 
14:36:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x06138E40>) , Command count = 3109 ] 
14:36:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:50: [ SetCardRCA(0x1, 0xD555) , Command count = 3110 ] 
14:36:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:50: Host Frequency set to 25000 KHz
14:36:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:50: ####CSD Registe 2.0 Values####
14:36:50: CSD_STRUCTURE                                 :0x1
14:36:50: Reserv1                                       :0x0
14:36:50: Time Access 1 TAAC                            :0xe
14:36:50: Time Access 2 NSAC*100                        :0x0
14:36:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:50: Card Command Classess CCC                     :0x5b5
14:36:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:50: DSR(driver stage register)  DSR_IMP           :0x0
14:36:50: Reserv2                                       :0x0
14:36:50: Device Size C_SIZE                            :0xedc8
14:36:50: Reserv3                                       :0x0
14:36:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:50: Reserv4                                       :0x0
14:36:50: Write Speed Factor R2W_FACTOR                 :0x2
14:36:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:50: FILE_FORMAT_GRP                               :0x0
14:36:50: COPY flag                                     :0x1
14:36:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:50: File_Format                                   :0x0
14:36:50: CRC                                           :0x0
14:36:50: ####CSD Registe Values####  

14:36:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:50: [GetSCRRegisterEntry] Passed
14:36:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:50: Data_Status_After Erases          : 0
14:36:50: CPRM Security Support             : No Security
14:36:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:50: Spec. Version                     : Version 3.0X
14:36:50: Extended Security Support         : Extended_Security_Not_Supported
14:36:50: Command Support                   : COMMAND_SUPPORT
14:36:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052577E0>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 3111 ] 
14:36:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x0613FF30>) , Command count = 3112 ] 
14:36:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:50: [ SetBusWidth(0x4) , Command count = 3113 ] 
14:36:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3114 ] 
14:36:50: Protected Area Size 0x28000
14:36:50: Bus Width           2
14:36:50: Secure Mode         0
14:36:50: Speed  Class        4
14:36:50: Perf Move           0
14:36:50: Au Size             9
14:36:50: Erase Size          15
14:36:50: Erase Timeout       1
14:36:50: Erase offset        1
14:36:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3115 ] 
14:36:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:51: Host Frequency set to 100000 KHz
14:36:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:51: ####CSD Registe 2.0 Values####
14:36:51: CSD_STRUCTURE                                 :0x1
14:36:51: Reserv1                                       :0x0
14:36:51: Time Access 1 TAAC                            :0xe
14:36:51: Time Access 2 NSAC*100                        :0x0
14:36:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:51: Card Command Classess CCC                     :0x5b5
14:36:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:51: DSR(driver stage register)  DSR_IMP           :0x0
14:36:51: Reserv2                                       :0x0
14:36:51: Device Size C_SIZE                            :0xedc8
14:36:51: Reserv3                                       :0x0
14:36:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:51: Reserv4                                       :0x0
14:36:51: Write Speed Factor R2W_FACTOR                 :0x2
14:36:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:51: FILE_FORMAT_GRP                               :0x0
14:36:51: COPY flag                                     :0x1
14:36:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:51: File_Format                                   :0x0
14:36:51: CRC                                           :0x0
14:36:51: ####CSD Registe Values####  

14:36:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB930>, <py_sfcl.CommandDataDefinition object at 0x0613FAE0>) , Command count = 3116 ] 
14:36:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x06138ED0>) , Command count = 3117 ] 
14:36:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FB1D to EndLba:0x3B6FB9D with One's Pattern
14:36:51: [ WrLbaNoData(0x3B6FB1D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3118 ] 
14:36:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FB1D to EndLba:0x3B6FB9D with One's Pattern 

14:36:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FB9D to EndLba:0x3B6FC1D with One's Pattern
14:36:51: [ WrLbaNoData(0x3B6FB9D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3119 ] 
14:36:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FB9D to EndLba:0x3B6FC1D with One's Pattern 

14:36:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23203 to EndLba:0x250C3 with Constant Pattern
14:36:51: [ RdLbaNoData(0x23203, 0x1EC0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3120 ] 
14:36:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23203 to EndLba:0x250C3 with Constant Pattern 

14:36:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3934
14:36:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FC00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F3C0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F6F0>, <None>) , Command count = 3121 ] 
14:36:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:53: Host Frequency set to 25000 KHz
14:36:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFF60>, 0x0, True) , Command count = 3122 ] 
14:36:53: [GO18_globalSetVolt]### Host voltage value is set.
14:36:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB4E0>, 0x0, False) , Command count = 3123 ] 
14:36:53: [GO18_globalSetVolt]### Host voltage value is set.
14:36:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3124 ] 
14:36:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3125 ] 
14:36:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3126 ] 
14:36:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EED0>, <py_sfcl.CommandDataDefinition object at 0x06138E70>) , Command count = 3127 ] 
14:36:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 3128 ] 
14:36:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:54: [ SetCardRCA(0x1, 0xD555) , Command count = 3129 ] 
14:36:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:54: Host Frequency set to 25000 KHz
14:36:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:54: ####CSD Registe 2.0 Values####
14:36:54: CSD_STRUCTURE                                 :0x1
14:36:54: Reserv1                                       :0x0
14:36:54: Time Access 1 TAAC                            :0xe
14:36:54: Time Access 2 NSAC*100                        :0x0
14:36:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:54: Card Command Classess CCC                     :0x5b5
14:36:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:54: DSR(driver stage register)  DSR_IMP           :0x0
14:36:54: Reserv2                                       :0x0
14:36:54: Device Size C_SIZE                            :0xedc8
14:36:54: Reserv3                                       :0x0
14:36:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:54: Reserv4                                       :0x0
14:36:54: Write Speed Factor R2W_FACTOR                 :0x2
14:36:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:54: FILE_FORMAT_GRP                               :0x0
14:36:54: COPY flag                                     :0x1
14:36:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:54: File_Format                                   :0x0
14:36:54: CRC                                           :0x0
14:36:54: ####CSD Registe Values####  

14:36:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:54: [GetSCRRegisterEntry] Passed
14:36:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:54: Data_Status_After Erases          : 0
14:36:54: CPRM Security Support             : No Security
14:36:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:54: Spec. Version                     : Version 3.0X
14:36:54: Extended Security Support         : Extended_Security_Not_Supported
14:36:54: Command Support                   : COMMAND_SUPPORT
14:36:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1A50>, <py_sfcl.CommandDataDefinition object at 0x0518AE70>) , Command count = 3130 ] 
14:36:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 3131 ] 
14:36:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:54: [ SetBusWidth(0x4) , Command count = 3132 ] 
14:36:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E37B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3133 ] 
14:36:54: Protected Area Size 0x28000
14:36:54: Bus Width           2
14:36:54: Secure Mode         0
14:36:54: Speed  Class        4
14:36:54: Perf Move           0
14:36:54: Au Size             9
14:36:54: Erase Size          15
14:36:54: Erase Timeout       1
14:36:54: Erase offset        1
14:36:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3134 ] 
14:36:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:54: Host Frequency set to 100000 KHz
14:36:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:54: ####CSD Registe 2.0 Values####
14:36:54: CSD_STRUCTURE                                 :0x1
14:36:54: Reserv1                                       :0x0
14:36:54: Time Access 1 TAAC                            :0xe
14:36:54: Time Access 2 NSAC*100                        :0x0
14:36:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:54: Card Command Classess CCC                     :0x5b5
14:36:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:54: DSR(driver stage register)  DSR_IMP           :0x0
14:36:54: Reserv2                                       :0x0
14:36:54: Device Size C_SIZE                            :0xedc8
14:36:54: Reserv3                                       :0x0
14:36:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:54: Reserv4                                       :0x0
14:36:54: Write Speed Factor R2W_FACTOR                 :0x2
14:36:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:54: FILE_FORMAT_GRP                               :0x0
14:36:54: COPY flag                                     :0x1
14:36:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:54: File_Format                                   :0x0
14:36:54: CRC                                           :0x0
14:36:54: ####CSD Registe Values####  

14:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F840>, <py_sfcl.CommandDataDefinition object at 0x060E3E40>) , Command count = 3135 ] 
14:36:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 3136 ] 
14:36:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E12 to EndLba:0x3B70E92 with One's Pattern
14:36:54: [ WrLbaNoData(0x3B70E12, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3137 ] 
14:36:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E12 to EndLba:0x3B70E92 with One's Pattern 

14:36:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E92 to EndLba:0x3B70F12 with One's Pattern
14:36:54: [ WrLbaNoData(0x3B70E92, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3138 ] 
14:36:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E92 to EndLba:0x3B70F12 with One's Pattern 

14:36:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23205 to EndLba:0x250C3 with Constant Pattern
14:36:55: [ RdLbaNoData(0x23205, 0x1EBE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3139 ] 
14:36:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23205 to EndLba:0x250C3 with Constant Pattern 

14:36:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3933
14:36:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C240>, <py_sfcl.PySEnhancedCmdData object at 0x0611CA20>, <None>) , Command count = 3140 ] 
14:36:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:36:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:57: Host Frequency set to 25000 KHz
14:36:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:36:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:36:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F060>, 0x0, True) , Command count = 3141 ] 
14:36:57: [GO18_globalSetVolt]### Host voltage value is set.
14:36:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:36:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F990>, 0x0, False) , Command count = 3142 ] 
14:36:57: [GO18_globalSetVolt]### Host voltage value is set.
14:36:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3143 ] 
14:36:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:36:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3144 ] 
14:36:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:36:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:36:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:36:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:36:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:36:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3145 ] 
14:36:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:36:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:36:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB40>, <py_sfcl.CommandDataDefinition object at 0x0611CBA0>) , Command count = 3146 ] 
14:36:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:36:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C3F0>, <py_sfcl.CommandDataDefinition object at 0x052C1F00>) , Command count = 3147 ] 
14:36:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:36:57: [ SetCardRCA(0x1, 0xD555) , Command count = 3148 ] 
14:36:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:36:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:36:57: Host Frequency set to 25000 KHz
14:36:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:36:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:57: ####CSD Registe 2.0 Values####
14:36:57: CSD_STRUCTURE                                 :0x1
14:36:57: Reserv1                                       :0x0
14:36:57: Time Access 1 TAAC                            :0xe
14:36:57: Time Access 2 NSAC*100                        :0x0
14:36:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:36:57: Card Command Classess CCC                     :0x5b5
14:36:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:57: DSR(driver stage register)  DSR_IMP           :0x0
14:36:57: Reserv2                                       :0x0
14:36:57: Device Size C_SIZE                            :0xedc8
14:36:57: Reserv3                                       :0x0
14:36:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:57: Reserv4                                       :0x0
14:36:57: Write Speed Factor R2W_FACTOR                 :0x2
14:36:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:57: FILE_FORMAT_GRP                               :0x0
14:36:57: COPY flag                                     :0x1
14:36:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:57: File_Format                                   :0x0
14:36:57: CRC                                           :0x0
14:36:57: ####CSD Registe Values####  

14:36:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:36:57: [GetSCRRegisterEntry] Passed
14:36:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:36:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:36:57: Data_Status_After Erases          : 0
14:36:57: CPRM Security Support             : No Security
14:36:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:36:57: Spec. Version                     : Version 3.0X
14:36:57: Extended Security Support         : Extended_Security_Not_Supported
14:36:57: Command Support                   : COMMAND_SUPPORT
14:36:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:36:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F4E0>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 3149 ] 
14:36:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:36:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F5A0>, <py_sfcl.CommandDataDefinition object at 0x0611CC60>) , Command count = 3150 ] 
14:36:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:36:57: [ SetBusWidth(0x4) , Command count = 3151 ] 
14:36:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:36:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3152 ] 
14:36:57: Protected Area Size 0x28000
14:36:57: Bus Width           2
14:36:57: Secure Mode         0
14:36:57: Speed  Class        4
14:36:57: Perf Move           0
14:36:57: Au Size             9
14:36:57: Erase Size          15
14:36:57: Erase Timeout       1
14:36:57: Erase offset        1
14:36:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:36:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:36:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:36:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3153 ] 
14:36:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:36:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:36:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:36:57: Host Frequency set to 100000 KHz
14:36:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:36:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:36:57: ####CSD Registe 2.0 Values####
14:36:57: CSD_STRUCTURE                                 :0x1
14:36:57: Reserv1                                       :0x0
14:36:57: Time Access 1 TAAC                            :0xe
14:36:57: Time Access 2 NSAC*100                        :0x0
14:36:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:36:57: Card Command Classess CCC                     :0x5b5
14:36:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:36:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:36:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:36:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:36:57: DSR(driver stage register)  DSR_IMP           :0x0
14:36:57: Reserv2                                       :0x0
14:36:57: Device Size C_SIZE                            :0xedc8
14:36:57: Reserv3                                       :0x0
14:36:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:36:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:36:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:36:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:36:58: Reserv4                                       :0x0
14:36:58: Write Speed Factor R2W_FACTOR                 :0x2
14:36:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:36:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:36:58: FILE_FORMAT_GRP                               :0x0
14:36:58: COPY flag                                     :0x1
14:36:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:36:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:36:58: File_Format                                   :0x0
14:36:58: CRC                                           :0x0
14:36:58: ####CSD Registe Values####  

14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E10>, <py_sfcl.CommandDataDefinition object at 0x0606F7E0>) , Command count = 3154 ] 
14:36:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:36:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F090>, <py_sfcl.CommandDataDefinition object at 0x0611CAB0>) , Command count = 3155 ] 
14:36:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:36:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:36:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:36:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA26 to EndLba:0x3B6FAA6 with One's Pattern
14:36:58: [ WrLbaNoData(0x3B6FA26, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3156 ] 
14:36:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA26 to EndLba:0x3B6FAA6 with One's Pattern 

14:36:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FAA6 to EndLba:0x3B6FB26 with One's Pattern
14:36:58: [ WrLbaNoData(0x3B6FAA6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3157 ] 
14:36:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FAA6 to EndLba:0x3B6FB26 with One's Pattern 

14:36:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:36:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23205 to EndLba:0x250C1 with Constant Pattern
14:36:58: [ RdLbaNoData(0x23205, 0x1EBC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3158 ] 
14:36:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23205 to EndLba:0x250C1 with Constant Pattern 

14:36:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3932
14:36:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:36:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3CF0>, <py_sfcl.PySEnhancedCmdData object at 0x06129210>, <None>) , Command count = 3159 ] 
14:36:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:36:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:00: Host Frequency set to 25000 KHz
14:37:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F570>, 0x0, True) , Command count = 3160 ] 
14:37:00: [GO18_globalSetVolt]### Host voltage value is set.
14:37:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CFC0>, 0x0, False) , Command count = 3161 ] 
14:37:00: [GO18_globalSetVolt]### Host voltage value is set.
14:37:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3162 ] 
14:37:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3163 ] 
14:37:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3164 ] 
14:37:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129990>, <py_sfcl.CommandDataDefinition object at 0x060E39F0>) , Command count = 3165 ] 
14:37:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611C870>) , Command count = 3166 ] 
14:37:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:00: [ SetCardRCA(0x1, 0xD555) , Command count = 3167 ] 
14:37:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:01: Host Frequency set to 25000 KHz
14:37:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:01: ####CSD Registe 2.0 Values####
14:37:01: CSD_STRUCTURE                                 :0x1
14:37:01: Reserv1                                       :0x0
14:37:01: Time Access 1 TAAC                            :0xe
14:37:01: Time Access 2 NSAC*100                        :0x0
14:37:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:01: Card Command Classess CCC                     :0x5b5
14:37:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:01: DSR(driver stage register)  DSR_IMP           :0x0
14:37:01: Reserv2                                       :0x0
14:37:01: Device Size C_SIZE                            :0xedc8
14:37:01: Reserv3                                       :0x0
14:37:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:01: Reserv4                                       :0x0
14:37:01: Write Speed Factor R2W_FACTOR                 :0x2
14:37:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:01: FILE_FORMAT_GRP                               :0x0
14:37:01: COPY flag                                     :0x1
14:37:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:01: File_Format                                   :0x0
14:37:01: CRC                                           :0x0
14:37:01: ####CSD Registe Values####  

14:37:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:01: [GetSCRRegisterEntry] Passed
14:37:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:01: Data_Status_After Erases          : 0
14:37:01: CPRM Security Support             : No Security
14:37:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:01: Spec. Version                     : Version 3.0X
14:37:01: Extended Security Support         : Extended_Security_Not_Supported
14:37:01: Command Support                   : COMMAND_SUPPORT
14:37:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x0611C810>) , Command count = 3168 ] 
14:37:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3930>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 3169 ] 
14:37:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:01: [ SetBusWidth(0x4) , Command count = 3170 ] 
14:37:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3171 ] 
14:37:01: Protected Area Size 0x28000
14:37:01: Bus Width           2
14:37:01: Secure Mode         0
14:37:01: Speed  Class        4
14:37:01: Perf Move           0
14:37:01: Au Size             9
14:37:01: Erase Size          15
14:37:01: Erase Timeout       1
14:37:01: Erase offset        1
14:37:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3172 ] 
14:37:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:01: Host Frequency set to 100000 KHz
14:37:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:01: ####CSD Registe 2.0 Values####
14:37:01: CSD_STRUCTURE                                 :0x1
14:37:01: Reserv1                                       :0x0
14:37:01: Time Access 1 TAAC                            :0xe
14:37:01: Time Access 2 NSAC*100                        :0x0
14:37:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:01: Card Command Classess CCC                     :0x5b5
14:37:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:01: DSR(driver stage register)  DSR_IMP           :0x0
14:37:01: Reserv2                                       :0x0
14:37:01: Device Size C_SIZE                            :0xedc8
14:37:01: Reserv3                                       :0x0
14:37:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:01: Reserv4                                       :0x0
14:37:01: Write Speed Factor R2W_FACTOR                 :0x2
14:37:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:01: FILE_FORMAT_GRP                               :0x0
14:37:01: COPY flag                                     :0x1
14:37:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:01: File_Format                                   :0x0
14:37:01: CRC                                           :0x0
14:37:01: ####CSD Registe Values####  

14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3570>, <py_sfcl.CommandDataDefinition object at 0x061295A0>) , Command count = 3173 ] 
14:37:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611C090>) , Command count = 3174 ] 
14:37:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E867 to EndLba:0x3B6E8E7 with One's Pattern
14:37:01: [ WrLbaNoData(0x3B6E867, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3175 ] 
14:37:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E867 to EndLba:0x3B6E8E7 with One's Pattern 

14:37:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E8E7 to EndLba:0x3B6E967 with One's Pattern
14:37:01: [ WrLbaNoData(0x3B6E8E7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3176 ] 
14:37:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E8E7 to EndLba:0x3B6E967 with One's Pattern 

14:37:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23207 to EndLba:0x250C1 with Constant Pattern
14:37:01: [ RdLbaNoData(0x23207, 0x1EBA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3177 ] 
14:37:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23207 to EndLba:0x250C1 with Constant Pattern 

14:37:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3931
14:37:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129D50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061290F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129BA0>, <None>) , Command count = 3178 ] 
14:37:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:04: Host Frequency set to 25000 KHz
14:37:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E38D0>, 0x0, True) , Command count = 3179 ] 
14:37:04: [GO18_globalSetVolt]### Host voltage value is set.
14:37:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129030>, 0x0, False) , Command count = 3180 ] 
14:37:04: [GO18_globalSetVolt]### Host voltage value is set.
14:37:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3181 ] 
14:37:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3182 ] 
14:37:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3183 ] 
14:37:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x0611CC00>) , Command count = 3184 ] 
14:37:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C930>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 3185 ] 
14:37:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:04: [ SetCardRCA(0x1, 0xD555) , Command count = 3186 ] 
14:37:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:04: Host Frequency set to 25000 KHz
14:37:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:04: ####CSD Registe 2.0 Values####
14:37:04: CSD_STRUCTURE                                 :0x1
14:37:04: Reserv1                                       :0x0
14:37:04: Time Access 1 TAAC                            :0xe
14:37:04: Time Access 2 NSAC*100                        :0x0
14:37:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:04: Card Command Classess CCC                     :0x5b5
14:37:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:04: DSR(driver stage register)  DSR_IMP           :0x0
14:37:04: Reserv2                                       :0x0
14:37:04: Device Size C_SIZE                            :0xedc8
14:37:04: Reserv3                                       :0x0
14:37:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:04: Reserv4                                       :0x0
14:37:04: Write Speed Factor R2W_FACTOR                 :0x2
14:37:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:04: FILE_FORMAT_GRP                               :0x0
14:37:04: COPY flag                                     :0x1
14:37:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:04: File_Format                                   :0x0
14:37:04: CRC                                           :0x0
14:37:04: ####CSD Registe Values####  

14:37:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:04: [GetSCRRegisterEntry] Passed
14:37:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:04: Data_Status_After Erases          : 0
14:37:04: CPRM Security Support             : No Security
14:37:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:04: Spec. Version                     : Version 3.0X
14:37:04: Extended Security Support         : Extended_Security_Not_Supported
14:37:04: Command Support                   : COMMAND_SUPPORT
14:37:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C480>, <py_sfcl.CommandDataDefinition object at 0x06145030>) , Command count = 3187 ] 
14:37:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 3188 ] 
14:37:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:04: [ SetBusWidth(0x4) , Command count = 3189 ] 
14:37:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3190 ] 
14:37:04: Protected Area Size 0x28000
14:37:04: Bus Width           2
14:37:04: Secure Mode         0
14:37:04: Speed  Class        4
14:37:04: Perf Move           0
14:37:04: Au Size             9
14:37:04: Erase Size          15
14:37:04: Erase Timeout       1
14:37:04: Erase offset        1
14:37:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3191 ] 
14:37:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:04: Host Frequency set to 100000 KHz
14:37:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:04: ####CSD Registe 2.0 Values####
14:37:04: CSD_STRUCTURE                                 :0x1
14:37:04: Reserv1                                       :0x0
14:37:04: Time Access 1 TAAC                            :0xe
14:37:04: Time Access 2 NSAC*100                        :0x0
14:37:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:04: Card Command Classess CCC                     :0x5b5
14:37:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:04: DSR(driver stage register)  DSR_IMP           :0x0
14:37:04: Reserv2                                       :0x0
14:37:04: Device Size C_SIZE                            :0xedc8
14:37:04: Reserv3                                       :0x0
14:37:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:04: Reserv4                                       :0x0
14:37:04: Write Speed Factor R2W_FACTOR                 :0x2
14:37:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:05: FILE_FORMAT_GRP                               :0x0
14:37:05: COPY flag                                     :0x1
14:37:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:05: File_Format                                   :0x0
14:37:05: CRC                                           :0x0
14:37:05: ####CSD Registe Values####  

14:37:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CCC0>, <py_sfcl.CommandDataDefinition object at 0x0611CB10>) , Command count = 3192 ] 
14:37:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 3193 ] 
14:37:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B713B0 to EndLba:0x3B71430 with One's Pattern
14:37:05: [ WrLbaNoData(0x3B713B0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3194 ] 
14:37:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B713B0 to EndLba:0x3B71430 with One's Pattern 

14:37:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71430 to EndLba:0x3B714B0 with One's Pattern
14:37:05: [ WrLbaNoData(0x3B71430, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3195 ] 
14:37:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71430 to EndLba:0x3B714B0 with One's Pattern 

14:37:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23207 to EndLba:0x250BF with Constant Pattern
14:37:05: [ RdLbaNoData(0x23207, 0x1EB8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3196 ] 
14:37:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23207 to EndLba:0x250BF with Constant Pattern 

14:37:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3930
14:37:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138480>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061293F0>, <py_sfcl.PySEnhancedCmdData object at 0x061292A0>, <None>) , Command count = 3197 ] 
14:37:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:07: Host Frequency set to 25000 KHz
14:37:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129510>, 0x0, True) , Command count = 3198 ] 
14:37:07: [GO18_globalSetVolt]### Host voltage value is set.
14:37:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061298A0>, 0x0, False) , Command count = 3199 ] 
14:37:07: [GO18_globalSetVolt]### Host voltage value is set.
14:37:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3200 ] 
14:37:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3201 ] 
14:37:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3202 ] 
14:37:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x0611CE40>) , Command count = 3203 ] 
14:37:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 3204 ] 
14:37:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:07: [ SetCardRCA(0x1, 0xD555) , Command count = 3205 ] 
14:37:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:07: Host Frequency set to 25000 KHz
14:37:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:07: ####CSD Registe 2.0 Values####
14:37:07: CSD_STRUCTURE                                 :0x1
14:37:07: Reserv1                                       :0x0
14:37:07: Time Access 1 TAAC                            :0xe
14:37:07: Time Access 2 NSAC*100                        :0x0
14:37:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:07: Card Command Classess CCC                     :0x5b5
14:37:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:07: DSR(driver stage register)  DSR_IMP           :0x0
14:37:07: Reserv2                                       :0x0
14:37:07: Device Size C_SIZE                            :0xedc8
14:37:07: Reserv3                                       :0x0
14:37:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:07: Reserv4                                       :0x0
14:37:07: Write Speed Factor R2W_FACTOR                 :0x2
14:37:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:07: FILE_FORMAT_GRP                               :0x0
14:37:07: COPY flag                                     :0x1
14:37:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:07: File_Format                                   :0x0
14:37:07: CRC                                           :0x0
14:37:07: ####CSD Registe Values####  

14:37:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:07: [GetSCRRegisterEntry] Passed
14:37:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:07: Data_Status_After Erases          : 0
14:37:07: CPRM Security Support             : No Security
14:37:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:07: Spec. Version                     : Version 3.0X
14:37:07: Extended Security Support         : Extended_Security_Not_Supported
14:37:07: Command Support                   : COMMAND_SUPPORT
14:37:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FED0>, <py_sfcl.CommandDataDefinition object at 0x061299F0>) , Command count = 3206 ] 
14:37:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 3207 ] 
14:37:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:07: [ SetBusWidth(0x4) , Command count = 3208 ] 
14:37:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3209 ] 
14:37:07: Protected Area Size 0x28000
14:37:07: Bus Width           2
14:37:07: Secure Mode         0
14:37:07: Speed  Class        4
14:37:07: Perf Move           0
14:37:07: Au Size             9
14:37:07: Erase Size          15
14:37:07: Erase Timeout       1
14:37:07: Erase offset        1
14:37:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3210 ] 
14:37:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:08: Host Frequency set to 100000 KHz
14:37:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:08: ####CSD Registe 2.0 Values####
14:37:08: CSD_STRUCTURE                                 :0x1
14:37:08: Reserv1                                       :0x0
14:37:08: Time Access 1 TAAC                            :0xe
14:37:08: Time Access 2 NSAC*100                        :0x0
14:37:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:08: Card Command Classess CCC                     :0x5b5
14:37:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:08: DSR(driver stage register)  DSR_IMP           :0x0
14:37:08: Reserv2                                       :0x0
14:37:08: Device Size C_SIZE                            :0xedc8
14:37:08: Reserv3                                       :0x0
14:37:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:08: Reserv4                                       :0x0
14:37:08: Write Speed Factor R2W_FACTOR                 :0x2
14:37:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:08: FILE_FORMAT_GRP                               :0x0
14:37:08: COPY flag                                     :0x1
14:37:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:08: File_Format                                   :0x0
14:37:08: CRC                                           :0x0
14:37:08: ####CSD Registe Values####  

14:37:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291E0>, <py_sfcl.CommandDataDefinition object at 0x06129750>) , Command count = 3211 ] 
14:37:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E3F0>, <py_sfcl.CommandDataDefinition object at 0x06129570>) , Command count = 3212 ] 
14:37:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B705A6 to EndLba:0x3B70626 with One's Pattern
14:37:08: [ WrLbaNoData(0x3B705A6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3213 ] 
14:37:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B705A6 to EndLba:0x3B70626 with One's Pattern 

14:37:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70626 to EndLba:0x3B706A6 with One's Pattern
14:37:08: [ WrLbaNoData(0x3B70626, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3214 ] 
14:37:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70626 to EndLba:0x3B706A6 with One's Pattern 

14:37:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23209 to EndLba:0x250BF with Constant Pattern
14:37:08: [ RdLbaNoData(0x23209, 0x1EB6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3215 ] 
14:37:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23209 to EndLba:0x250BF with Constant Pattern 

14:37:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3929
14:37:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E0F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C8D0>, <py_sfcl.PySEnhancedCmdData object at 0x061297B0>, <None>) , Command count = 3216 ] 
14:37:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:10: Host Frequency set to 25000 KHz
14:37:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F9F0>, 0x0, True) , Command count = 3217 ] 
14:37:10: [GO18_globalSetVolt]### Host voltage value is set.
14:37:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E210>, 0x0, False) , Command count = 3218 ] 
14:37:10: [GO18_globalSetVolt]### Host voltage value is set.
14:37:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3219 ] 
14:37:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3220 ] 
14:37:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3221 ] 
14:37:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C840>, <py_sfcl.CommandDataDefinition object at 0x0611CD20>) , Command count = 3222 ] 
14:37:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E390>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 3223 ] 
14:37:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:11: [ SetCardRCA(0x1, 0xD555) , Command count = 3224 ] 
14:37:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:11: Host Frequency set to 25000 KHz
14:37:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:11: ####CSD Registe 2.0 Values####
14:37:11: CSD_STRUCTURE                                 :0x1
14:37:11: Reserv1                                       :0x0
14:37:11: Time Access 1 TAAC                            :0xe
14:37:11: Time Access 2 NSAC*100                        :0x0
14:37:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:11: Card Command Classess CCC                     :0x5b5
14:37:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:11: DSR(driver stage register)  DSR_IMP           :0x0
14:37:11: Reserv2                                       :0x0
14:37:11: Device Size C_SIZE                            :0xedc8
14:37:11: Reserv3                                       :0x0
14:37:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:11: Reserv4                                       :0x0
14:37:11: Write Speed Factor R2W_FACTOR                 :0x2
14:37:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:11: FILE_FORMAT_GRP                               :0x0
14:37:11: COPY flag                                     :0x1
14:37:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:11: File_Format                                   :0x0
14:37:11: CRC                                           :0x0
14:37:11: ####CSD Registe Values####  

14:37:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:11: [GetSCRRegisterEntry] Passed
14:37:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:11: Data_Status_After Erases          : 0
14:37:11: CPRM Security Support             : No Security
14:37:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:11: Spec. Version                     : Version 3.0X
14:37:11: Extended Security Support         : Extended_Security_Not_Supported
14:37:11: Command Support                   : COMMAND_SUPPORT
14:37:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC60>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 3225 ] 
14:37:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 3226 ] 
14:37:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:11: [ SetBusWidth(0x4) , Command count = 3227 ] 
14:37:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3228 ] 
14:37:11: Protected Area Size 0x28000
14:37:11: Bus Width           2
14:37:11: Secure Mode         0
14:37:11: Speed  Class        4
14:37:11: Perf Move           0
14:37:11: Au Size             9
14:37:11: Erase Size          15
14:37:11: Erase Timeout       1
14:37:11: Erase offset        1
14:37:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3229 ] 
14:37:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:11: Host Frequency set to 100000 KHz
14:37:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:11: ####CSD Registe 2.0 Values####
14:37:11: CSD_STRUCTURE                                 :0x1
14:37:11: Reserv1                                       :0x0
14:37:11: Time Access 1 TAAC                            :0xe
14:37:11: Time Access 2 NSAC*100                        :0x0
14:37:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:11: Card Command Classess CCC                     :0x5b5
14:37:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:11: DSR(driver stage register)  DSR_IMP           :0x0
14:37:11: Reserv2                                       :0x0
14:37:11: Device Size C_SIZE                            :0xedc8
14:37:11: Reserv3                                       :0x0
14:37:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:11: Reserv4                                       :0x0
14:37:11: Write Speed Factor R2W_FACTOR                 :0x2
14:37:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:11: FILE_FORMAT_GRP                               :0x0
14:37:11: COPY flag                                     :0x1
14:37:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:11: File_Format                                   :0x0
14:37:11: CRC                                           :0x0
14:37:11: ####CSD Registe Values####  

14:37:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA20>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 3230 ] 
14:37:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 3231 ] 
14:37:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D75B to EndLba:0x3B6D7DB with One's Pattern
14:37:11: [ WrLbaNoData(0x3B6D75B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3232 ] 
14:37:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D75B to EndLba:0x3B6D7DB with One's Pattern 

14:37:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D7DB to EndLba:0x3B6D85B with One's Pattern
14:37:11: [ WrLbaNoData(0x3B6D7DB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3233 ] 
14:37:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D7DB to EndLba:0x3B6D85B with One's Pattern 

14:37:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23209 to EndLba:0x250BD with Constant Pattern
14:37:12: [ RdLbaNoData(0x23209, 0x1EB4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3234 ] 
14:37:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23209 to EndLba:0x250BD with Constant Pattern 

14:37:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3928
14:37:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129ED0>, <py_sfcl.PySEnhancedCmdData object at 0x06129960>, <None>) , Command count = 3235 ] 
14:37:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:14: Host Frequency set to 25000 KHz
14:37:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129FC0>, 0x0, True) , Command count = 3236 ] 
14:37:14: [GO18_globalSetVolt]### Host voltage value is set.
14:37:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606FB10>, 0x0, False) , Command count = 3237 ] 
14:37:14: [GO18_globalSetVolt]### Host voltage value is set.
14:37:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3238 ] 
14:37:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3239 ] 
14:37:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3240 ] 
14:37:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x0612E8D0>) , Command count = 3241 ] 
14:37:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322D0>, <py_sfcl.CommandDataDefinition object at 0x0612E450>) , Command count = 3242 ] 
14:37:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:14: [ SetCardRCA(0x1, 0xD555) , Command count = 3243 ] 
14:37:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:14: Host Frequency set to 25000 KHz
14:37:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:14: ####CSD Registe 2.0 Values####
14:37:14: CSD_STRUCTURE                                 :0x1
14:37:14: Reserv1                                       :0x0
14:37:14: Time Access 1 TAAC                            :0xe
14:37:14: Time Access 2 NSAC*100                        :0x0
14:37:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:14: Card Command Classess CCC                     :0x5b5
14:37:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:14: DSR(driver stage register)  DSR_IMP           :0x0
14:37:14: Reserv2                                       :0x0
14:37:14: Device Size C_SIZE                            :0xedc8
14:37:14: Reserv3                                       :0x0
14:37:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:14: Reserv4                                       :0x0
14:37:14: Write Speed Factor R2W_FACTOR                 :0x2
14:37:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:14: FILE_FORMAT_GRP                               :0x0
14:37:14: COPY flag                                     :0x1
14:37:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:14: File_Format                                   :0x0
14:37:14: CRC                                           :0x0
14:37:14: ####CSD Registe Values####  

14:37:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:14: [GetSCRRegisterEntry] Passed
14:37:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:14: Data_Status_After Erases          : 0
14:37:14: CPRM Security Support             : No Security
14:37:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:14: Spec. Version                     : Version 3.0X
14:37:14: Extended Security Support         : Extended_Security_Not_Supported
14:37:14: Command Support                   : COMMAND_SUPPORT
14:37:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298D0>, <py_sfcl.CommandDataDefinition object at 0x0612E750>) , Command count = 3244 ] 
14:37:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 3245 ] 
14:37:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:14: [ SetBusWidth(0x4) , Command count = 3246 ] 
14:37:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3247 ] 
14:37:14: Protected Area Size 0x28000
14:37:14: Bus Width           2
14:37:14: Secure Mode         0
14:37:14: Speed  Class        4
14:37:14: Perf Move           0
14:37:14: Au Size             9
14:37:14: Erase Size          15
14:37:14: Erase Timeout       1
14:37:14: Erase offset        1
14:37:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3248 ] 
14:37:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:14: Host Frequency set to 100000 KHz
14:37:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:14: ####CSD Registe 2.0 Values####
14:37:14: CSD_STRUCTURE                                 :0x1
14:37:14: Reserv1                                       :0x0
14:37:14: Time Access 1 TAAC                            :0xe
14:37:14: Time Access 2 NSAC*100                        :0x0
14:37:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:14: Card Command Classess CCC                     :0x5b5
14:37:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:14: DSR(driver stage register)  DSR_IMP           :0x0
14:37:14: Reserv2                                       :0x0
14:37:14: Device Size C_SIZE                            :0xedc8
14:37:14: Reserv3                                       :0x0
14:37:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:15: Reserv4                                       :0x0
14:37:15: Write Speed Factor R2W_FACTOR                 :0x2
14:37:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:15: FILE_FORMAT_GRP                               :0x0
14:37:15: COPY flag                                     :0x1
14:37:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:15: File_Format                                   :0x0
14:37:15: CRC                                           :0x0
14:37:15: ####CSD Registe Values####  

14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323F0>, <py_sfcl.CommandDataDefinition object at 0x0612E4B0>) , Command count = 3249 ] 
14:37:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x0612EB70>) , Command count = 3250 ] 
14:37:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E0AB to EndLba:0x3B6E12B with One's Pattern
14:37:15: [ WrLbaNoData(0x3B6E0AB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3251 ] 
14:37:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E0AB to EndLba:0x3B6E12B with One's Pattern 

14:37:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E12B to EndLba:0x3B6E1AB with One's Pattern
14:37:15: [ WrLbaNoData(0x3B6E12B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3252 ] 
14:37:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E12B to EndLba:0x3B6E1AB with One's Pattern 

14:37:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2320B to EndLba:0x250BD with Constant Pattern
14:37:15: [ RdLbaNoData(0x2320B, 0x1EB2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3253 ] 
14:37:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2320B to EndLba:0x250BD with Constant Pattern 

14:37:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3927
14:37:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FD50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132120>, <py_sfcl.PySEnhancedCmdData object at 0x06129360>, <None>) , Command count = 3254 ] 
14:37:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:17: Host Frequency set to 25000 KHz
14:37:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132090>, 0x0, True) , Command count = 3255 ] 
14:37:17: [GO18_globalSetVolt]### Host voltage value is set.
14:37:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E690>, 0x0, False) , Command count = 3256 ] 
14:37:17: [GO18_globalSetVolt]### Host voltage value is set.
14:37:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3257 ] 
14:37:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3258 ] 
14:37:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3259 ] 
14:37:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C00>, <py_sfcl.CommandDataDefinition object at 0x0612E030>) , Command count = 3260 ] 
14:37:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF00>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 3261 ] 
14:37:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3262 ] 
14:37:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:17: Host Frequency set to 25000 KHz
14:37:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:17: ####CSD Registe 2.0 Values####
14:37:17: CSD_STRUCTURE                                 :0x1
14:37:17: Reserv1                                       :0x0
14:37:17: Time Access 1 TAAC                            :0xe
14:37:17: Time Access 2 NSAC*100                        :0x0
14:37:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:17: Card Command Classess CCC                     :0x5b5
14:37:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:17: DSR(driver stage register)  DSR_IMP           :0x0
14:37:17: Reserv2                                       :0x0
14:37:17: Device Size C_SIZE                            :0xedc8
14:37:17: Reserv3                                       :0x0
14:37:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:17: Reserv4                                       :0x0
14:37:17: Write Speed Factor R2W_FACTOR                 :0x2
14:37:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:17: FILE_FORMAT_GRP                               :0x0
14:37:17: COPY flag                                     :0x1
14:37:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:17: File_Format                                   :0x0
14:37:17: CRC                                           :0x0
14:37:17: ####CSD Registe Values####  

14:37:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:17: [GetSCRRegisterEntry] Passed
14:37:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:17: Data_Status_After Erases          : 0
14:37:17: CPRM Security Support             : No Security
14:37:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:17: Spec. Version                     : Version 3.0X
14:37:17: Extended Security Support         : Extended_Security_Not_Supported
14:37:17: Command Support                   : COMMAND_SUPPORT
14:37:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA80>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 3263 ] 
14:37:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 3264 ] 
14:37:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:18: [ SetBusWidth(0x4) , Command count = 3265 ] 
14:37:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061328A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3266 ] 
14:37:18: Protected Area Size 0x28000
14:37:18: Bus Width           2
14:37:18: Secure Mode         0
14:37:18: Speed  Class        4
14:37:18: Perf Move           0
14:37:18: Au Size             9
14:37:18: Erase Size          15
14:37:18: Erase Timeout       1
14:37:18: Erase offset        1
14:37:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3267 ] 
14:37:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:18: Host Frequency set to 100000 KHz
14:37:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:18: ####CSD Registe 2.0 Values####
14:37:18: CSD_STRUCTURE                                 :0x1
14:37:18: Reserv1                                       :0x0
14:37:18: Time Access 1 TAAC                            :0xe
14:37:18: Time Access 2 NSAC*100                        :0x0
14:37:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:18: Card Command Classess CCC                     :0x5b5
14:37:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:18: DSR(driver stage register)  DSR_IMP           :0x0
14:37:18: Reserv2                                       :0x0
14:37:18: Device Size C_SIZE                            :0xedc8
14:37:18: Reserv3                                       :0x0
14:37:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:18: Reserv4                                       :0x0
14:37:18: Write Speed Factor R2W_FACTOR                 :0x2
14:37:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:18: FILE_FORMAT_GRP                               :0x0
14:37:18: COPY flag                                     :0x1
14:37:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:18: File_Format                                   :0x0
14:37:18: CRC                                           :0x0
14:37:18: ####CSD Registe Values####  

14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E35A0>, <py_sfcl.CommandDataDefinition object at 0x0612E120>) , Command count = 3268 ] 
14:37:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 3269 ] 
14:37:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70276 to EndLba:0x3B702F6 with One's Pattern
14:37:18: [ WrLbaNoData(0x3B70276, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3270 ] 
14:37:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70276 to EndLba:0x3B702F6 with One's Pattern 

14:37:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B702F6 to EndLba:0x3B70376 with One's Pattern
14:37:18: [ WrLbaNoData(0x3B702F6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3271 ] 
14:37:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B702F6 to EndLba:0x3B70376 with One's Pattern 

14:37:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2320B to EndLba:0x250BB with Constant Pattern
14:37:18: [ RdLbaNoData(0x2320B, 0x1EB0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3272 ] 
14:37:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2320B to EndLba:0x250BB with Constant Pattern 

14:37:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3926
14:37:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132690>, <py_sfcl.PySEnhancedCmdData object at 0x061322A0>, <None>) , Command count = 3273 ] 
14:37:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:21: Host Frequency set to 25000 KHz
14:37:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F330>, 0x0, True) , Command count = 3274 ] 
14:37:21: [GO18_globalSetVolt]### Host voltage value is set.
14:37:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612ED50>, 0x0, False) , Command count = 3275 ] 
14:37:21: [GO18_globalSetVolt]### Host voltage value is set.
14:37:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3276 ] 
14:37:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3277 ] 
14:37:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3278 ] 
14:37:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x06132510>) , Command count = 3279 ] 
14:37:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 3280 ] 
14:37:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:21: [ SetCardRCA(0x1, 0xD555) , Command count = 3281 ] 
14:37:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:21: Host Frequency set to 25000 KHz
14:37:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:21: ####CSD Registe 2.0 Values####
14:37:21: CSD_STRUCTURE                                 :0x1
14:37:21: Reserv1                                       :0x0
14:37:21: Time Access 1 TAAC                            :0xe
14:37:21: Time Access 2 NSAC*100                        :0x0
14:37:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:21: Card Command Classess CCC                     :0x5b5
14:37:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:21: DSR(driver stage register)  DSR_IMP           :0x0
14:37:21: Reserv2                                       :0x0
14:37:21: Device Size C_SIZE                            :0xedc8
14:37:21: Reserv3                                       :0x0
14:37:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:21: Reserv4                                       :0x0
14:37:21: Write Speed Factor R2W_FACTOR                 :0x2
14:37:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:21: FILE_FORMAT_GRP                               :0x0
14:37:21: COPY flag                                     :0x1
14:37:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:21: File_Format                                   :0x0
14:37:21: CRC                                           :0x0
14:37:21: ####CSD Registe Values####  

14:37:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:21: [GetSCRRegisterEntry] Passed
14:37:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:21: Data_Status_After Erases          : 0
14:37:21: CPRM Security Support             : No Security
14:37:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:21: Spec. Version                     : Version 3.0X
14:37:21: Extended Security Support         : Extended_Security_Not_Supported
14:37:21: Command Support                   : COMMAND_SUPPORT
14:37:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE70>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 3282 ] 
14:37:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138450>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 3283 ] 
14:37:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:21: [ SetBusWidth(0x4) , Command count = 3284 ] 
14:37:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3285 ] 
14:37:21: Protected Area Size 0x28000
14:37:21: Bus Width           2
14:37:21: Secure Mode         0
14:37:21: Speed  Class        4
14:37:21: Perf Move           0
14:37:21: Au Size             9
14:37:21: Erase Size          15
14:37:21: Erase Timeout       1
14:37:21: Erase offset        1
14:37:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3286 ] 
14:37:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:21: Host Frequency set to 100000 KHz
14:37:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:21: ####CSD Registe 2.0 Values####
14:37:21: CSD_STRUCTURE                                 :0x1
14:37:21: Reserv1                                       :0x0
14:37:21: Time Access 1 TAAC                            :0xe
14:37:21: Time Access 2 NSAC*100                        :0x0
14:37:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:21: Card Command Classess CCC                     :0x5b5
14:37:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:21: DSR(driver stage register)  DSR_IMP           :0x0
14:37:21: Reserv2                                       :0x0
14:37:21: Device Size C_SIZE                            :0xedc8
14:37:21: Reserv3                                       :0x0
14:37:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:22: Reserv4                                       :0x0
14:37:22: Write Speed Factor R2W_FACTOR                 :0x2
14:37:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:22: FILE_FORMAT_GRP                               :0x0
14:37:22: COPY flag                                     :0x1
14:37:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:22: File_Format                                   :0x0
14:37:22: CRC                                           :0x0
14:37:22: ####CSD Registe Values####  

14:37:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324B0>, <py_sfcl.CommandDataDefinition object at 0x06132F90>) , Command count = 3287 ] 
14:37:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 3288 ] 
14:37:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7100E to EndLba:0x3B7108E with One's Pattern
14:37:22: [ WrLbaNoData(0x3B7100E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3289 ] 
14:37:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7100E to EndLba:0x3B7108E with One's Pattern 

14:37:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7108E to EndLba:0x3B7110E with One's Pattern
14:37:22: [ WrLbaNoData(0x3B7108E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3290 ] 
14:37:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7108E to EndLba:0x3B7110E with One's Pattern 

14:37:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2320D to EndLba:0x250BB with Constant Pattern
14:37:22: [ RdLbaNoData(0x2320D, 0x1EAE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3291 ] 
14:37:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2320D to EndLba:0x250BB with Constant Pattern 

14:37:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3925
14:37:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138F90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132270>, <py_sfcl.PySEnhancedCmdData object at 0x06132540>, <None>) , Command count = 3292 ] 
14:37:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:24: Host Frequency set to 25000 KHz
14:37:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E360>, 0x0, True) , Command count = 3293 ] 
14:37:24: [GO18_globalSetVolt]### Host voltage value is set.
14:37:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132D50>, 0x0, False) , Command count = 3294 ] 
14:37:24: [GO18_globalSetVolt]### Host voltage value is set.
14:37:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3295 ] 
14:37:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3296 ] 
14:37:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3297 ] 
14:37:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 3298 ] 
14:37:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329F0>, <py_sfcl.CommandDataDefinition object at 0x06132990>) , Command count = 3299 ] 
14:37:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:24: [ SetCardRCA(0x1, 0xD555) , Command count = 3300 ] 
14:37:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:24: Host Frequency set to 25000 KHz
14:37:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:24: ####CSD Registe 2.0 Values####
14:37:24: CSD_STRUCTURE                                 :0x1
14:37:24: Reserv1                                       :0x0
14:37:24: Time Access 1 TAAC                            :0xe
14:37:24: Time Access 2 NSAC*100                        :0x0
14:37:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:24: Card Command Classess CCC                     :0x5b5
14:37:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:24: DSR(driver stage register)  DSR_IMP           :0x0
14:37:24: Reserv2                                       :0x0
14:37:24: Device Size C_SIZE                            :0xedc8
14:37:24: Reserv3                                       :0x0
14:37:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:24: Reserv4                                       :0x0
14:37:24: Write Speed Factor R2W_FACTOR                 :0x2
14:37:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:24: FILE_FORMAT_GRP                               :0x0
14:37:24: COPY flag                                     :0x1
14:37:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:24: File_Format                                   :0x0
14:37:24: CRC                                           :0x0
14:37:24: ####CSD Registe Values####  

14:37:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:24: [GetSCRRegisterEntry] Passed
14:37:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:24: Data_Status_After Erases          : 0
14:37:24: CPRM Security Support             : No Security
14:37:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:24: Spec. Version                     : Version 3.0X
14:37:24: Extended Security Support         : Extended_Security_Not_Supported
14:37:24: Command Support                   : COMMAND_SUPPORT
14:37:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E810>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 3301 ] 
14:37:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C90>, <py_sfcl.CommandDataDefinition object at 0x061320C0>) , Command count = 3302 ] 
14:37:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:24: [ SetBusWidth(0x4) , Command count = 3303 ] 
14:37:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3304 ] 
14:37:24: Protected Area Size 0x28000
14:37:24: Bus Width           2
14:37:24: Secure Mode         0
14:37:24: Speed  Class        4
14:37:24: Perf Move           0
14:37:24: Au Size             9
14:37:24: Erase Size          15
14:37:24: Erase Timeout       1
14:37:24: Erase offset        1
14:37:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3305 ] 
14:37:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:25: Host Frequency set to 100000 KHz
14:37:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:25: ####CSD Registe 2.0 Values####
14:37:25: CSD_STRUCTURE                                 :0x1
14:37:25: Reserv1                                       :0x0
14:37:25: Time Access 1 TAAC                            :0xe
14:37:25: Time Access 2 NSAC*100                        :0x0
14:37:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:25: Card Command Classess CCC                     :0x5b5
14:37:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:25: DSR(driver stage register)  DSR_IMP           :0x0
14:37:25: Reserv2                                       :0x0
14:37:25: Device Size C_SIZE                            :0xedc8
14:37:25: Reserv3                                       :0x0
14:37:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:25: Reserv4                                       :0x0
14:37:25: Write Speed Factor R2W_FACTOR                 :0x2
14:37:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:25: FILE_FORMAT_GRP                               :0x0
14:37:25: COPY flag                                     :0x1
14:37:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:25: File_Format                                   :0x0
14:37:25: CRC                                           :0x0
14:37:25: ####CSD Registe Values####  

14:37:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138900>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 3306 ] 
14:37:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06132DE0>) , Command count = 3307 ] 
14:37:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D755 to EndLba:0x3B6D7D5 with One's Pattern
14:37:25: [ WrLbaNoData(0x3B6D755, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3308 ] 
14:37:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D755 to EndLba:0x3B6D7D5 with One's Pattern 

14:37:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D7D5 to EndLba:0x3B6D855 with One's Pattern
14:37:25: [ WrLbaNoData(0x3B6D7D5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3309 ] 
14:37:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D7D5 to EndLba:0x3B6D855 with One's Pattern 

14:37:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2320D to EndLba:0x250B9 with Constant Pattern
14:37:25: [ RdLbaNoData(0x2320D, 0x1EAC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3310 ] 
14:37:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2320D to EndLba:0x250B9 with Constant Pattern 

14:37:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3924
14:37:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138720>, <py_sfcl.PySEnhancedCmdData object at 0x061383F0>, <None>) , Command count = 3311 ] 
14:37:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:27: Host Frequency set to 25000 KHz
14:37:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138150>, 0x0, True) , Command count = 3312 ] 
14:37:27: [GO18_globalSetVolt]### Host voltage value is set.
14:37:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132F00>, 0x0, False) , Command count = 3313 ] 
14:37:27: [GO18_globalSetVolt]### Host voltage value is set.
14:37:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3314 ] 
14:37:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3315 ] 
14:37:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3316 ] 
14:37:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C450>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 3317 ] 
14:37:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 3318 ] 
14:37:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:28: [ SetCardRCA(0x1, 0xD555) , Command count = 3319 ] 
14:37:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:28: Host Frequency set to 25000 KHz
14:37:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:28: ####CSD Registe 2.0 Values####
14:37:28: CSD_STRUCTURE                                 :0x1
14:37:28: Reserv1                                       :0x0
14:37:28: Time Access 1 TAAC                            :0xe
14:37:28: Time Access 2 NSAC*100                        :0x0
14:37:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:28: Card Command Classess CCC                     :0x5b5
14:37:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:28: DSR(driver stage register)  DSR_IMP           :0x0
14:37:28: Reserv2                                       :0x0
14:37:28: Device Size C_SIZE                            :0xedc8
14:37:28: Reserv3                                       :0x0
14:37:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:28: Reserv4                                       :0x0
14:37:28: Write Speed Factor R2W_FACTOR                 :0x2
14:37:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:28: FILE_FORMAT_GRP                               :0x0
14:37:28: COPY flag                                     :0x1
14:37:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:28: File_Format                                   :0x0
14:37:28: CRC                                           :0x0
14:37:28: ####CSD Registe Values####  

14:37:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:28: [GetSCRRegisterEntry] Passed
14:37:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:28: Data_Status_After Erases          : 0
14:37:28: CPRM Security Support             : No Security
14:37:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:28: Spec. Version                     : Version 3.0X
14:37:28: Extended Security Support         : Extended_Security_Not_Supported
14:37:28: Command Support                   : COMMAND_SUPPORT
14:37:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138420>, <py_sfcl.CommandDataDefinition object at 0x06145090>) , Command count = 3320 ] 
14:37:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x061382D0>) , Command count = 3321 ] 
14:37:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:28: [ SetBusWidth(0x4) , Command count = 3322 ] 
14:37:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3323 ] 
14:37:28: Protected Area Size 0x28000
14:37:28: Bus Width           2
14:37:28: Secure Mode         0
14:37:28: Speed  Class        4
14:37:28: Perf Move           0
14:37:28: Au Size             9
14:37:28: Erase Size          15
14:37:28: Erase Timeout       1
14:37:28: Erase offset        1
14:37:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3324 ] 
14:37:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:28: Host Frequency set to 100000 KHz
14:37:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:28: ####CSD Registe 2.0 Values####
14:37:28: CSD_STRUCTURE                                 :0x1
14:37:28: Reserv1                                       :0x0
14:37:28: Time Access 1 TAAC                            :0xe
14:37:28: Time Access 2 NSAC*100                        :0x0
14:37:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:28: Card Command Classess CCC                     :0x5b5
14:37:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:28: DSR(driver stage register)  DSR_IMP           :0x0
14:37:28: Reserv2                                       :0x0
14:37:28: Device Size C_SIZE                            :0xedc8
14:37:28: Reserv3                                       :0x0
14:37:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:28: Reserv4                                       :0x0
14:37:28: Write Speed Factor R2W_FACTOR                 :0x2
14:37:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:28: FILE_FORMAT_GRP                               :0x0
14:37:28: COPY flag                                     :0x1
14:37:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:28: File_Format                                   :0x0
14:37:28: CRC                                           :0x0
14:37:28: ####CSD Registe Values####  

14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FFC0>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 3325 ] 
14:37:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06138AE0>) , Command count = 3326 ] 
14:37:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71201 to EndLba:0x3B71281 with One's Pattern
14:37:28: [ WrLbaNoData(0x3B71201, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3327 ] 
14:37:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71201 to EndLba:0x3B71281 with One's Pattern 

14:37:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71281 to EndLba:0x3B71301 with One's Pattern
14:37:28: [ WrLbaNoData(0x3B71281, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3328 ] 
14:37:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71281 to EndLba:0x3B71301 with One's Pattern 

14:37:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2320F to EndLba:0x250B9 with Constant Pattern
14:37:28: [ RdLbaNoData(0x2320F, 0x1EAA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3329 ] 
14:37:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2320F to EndLba:0x250B9 with Constant Pattern 

14:37:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3923
14:37:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138D20>, <py_sfcl.PySEnhancedCmdData object at 0x061386F0>, <None>) , Command count = 3330 ] 
14:37:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:31: Host Frequency set to 25000 KHz
14:37:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132E70>, 0x0, True) , Command count = 3331 ] 
14:37:31: [GO18_globalSetVolt]### Host voltage value is set.
14:37:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138390>, 0x0, False) , Command count = 3332 ] 
14:37:31: [GO18_globalSetVolt]### Host voltage value is set.
14:37:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3333 ] 
14:37:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3334 ] 
14:37:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3335 ] 
14:37:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 3336 ] 
14:37:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 3337 ] 
14:37:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:31: [ SetCardRCA(0x1, 0xD555) , Command count = 3338 ] 
14:37:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:31: Host Frequency set to 25000 KHz
14:37:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:31: ####CSD Registe 2.0 Values####
14:37:31: CSD_STRUCTURE                                 :0x1
14:37:31: Reserv1                                       :0x0
14:37:31: Time Access 1 TAAC                            :0xe
14:37:31: Time Access 2 NSAC*100                        :0x0
14:37:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:31: Card Command Classess CCC                     :0x5b5
14:37:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:31: DSR(driver stage register)  DSR_IMP           :0x0
14:37:31: Reserv2                                       :0x0
14:37:31: Device Size C_SIZE                            :0xedc8
14:37:31: Reserv3                                       :0x0
14:37:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:31: Reserv4                                       :0x0
14:37:31: Write Speed Factor R2W_FACTOR                 :0x2
14:37:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:31: FILE_FORMAT_GRP                               :0x0
14:37:31: COPY flag                                     :0x1
14:37:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:31: File_Format                                   :0x0
14:37:31: CRC                                           :0x0
14:37:31: ####CSD Registe Values####  

14:37:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:31: [GetSCRRegisterEntry] Passed
14:37:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:31: Data_Status_After Erases          : 0
14:37:31: CPRM Security Support             : No Security
14:37:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:31: Spec. Version                     : Version 3.0X
14:37:31: Extended Security Support         : Extended_Security_Not_Supported
14:37:31: Command Support                   : COMMAND_SUPPORT
14:37:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F270>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 3339 ] 
14:37:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x0613F780>) , Command count = 3340 ] 
14:37:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:31: [ SetBusWidth(0x4) , Command count = 3341 ] 
14:37:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3342 ] 
14:37:31: Protected Area Size 0x28000
14:37:31: Bus Width           2
14:37:31: Secure Mode         0
14:37:31: Speed  Class        4
14:37:31: Perf Move           0
14:37:31: Au Size             9
14:37:31: Erase Size          15
14:37:31: Erase Timeout       1
14:37:31: Erase offset        1
14:37:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3343 ] 
14:37:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:31: Host Frequency set to 100000 KHz
14:37:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:31: ####CSD Registe 2.0 Values####
14:37:31: CSD_STRUCTURE                                 :0x1
14:37:31: Reserv1                                       :0x0
14:37:31: Time Access 1 TAAC                            :0xe
14:37:31: Time Access 2 NSAC*100                        :0x0
14:37:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:31: Card Command Classess CCC                     :0x5b5
14:37:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:31: DSR(driver stage register)  DSR_IMP           :0x0
14:37:31: Reserv2                                       :0x0
14:37:31: Device Size C_SIZE                            :0xedc8
14:37:31: Reserv3                                       :0x0
14:37:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:32: Reserv4                                       :0x0
14:37:32: Write Speed Factor R2W_FACTOR                 :0x2
14:37:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:32: FILE_FORMAT_GRP                               :0x0
14:37:32: COPY flag                                     :0x1
14:37:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:32: File_Format                                   :0x0
14:37:32: CRC                                           :0x0
14:37:32: ####CSD Registe Values####  

14:37:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F510>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 3344 ] 
14:37:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 3345 ] 
14:37:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DF87 to EndLba:0x3B6E007 with One's Pattern
14:37:32: [ WrLbaNoData(0x3B6DF87, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3346 ] 
14:37:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DF87 to EndLba:0x3B6E007 with One's Pattern 

14:37:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E007 to EndLba:0x3B6E087 with One's Pattern
14:37:32: [ WrLbaNoData(0x3B6E007, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3347 ] 
14:37:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E007 to EndLba:0x3B6E087 with One's Pattern 

14:37:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2320F to EndLba:0x250B7 with Constant Pattern
14:37:32: [ RdLbaNoData(0x2320F, 0x1EA8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3348 ] 
14:37:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2320F to EndLba:0x250B7 with Constant Pattern 

14:37:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3922
14:37:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138C00>, <py_sfcl.PySEnhancedCmdData object at 0x06138330>, <None>) , Command count = 3349 ] 
14:37:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:34: Host Frequency set to 25000 KHz
14:37:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F060>, 0x0, True) , Command count = 3350 ] 
14:37:34: [GO18_globalSetVolt]### Host voltage value is set.
14:37:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F1B0>, 0x0, False) , Command count = 3351 ] 
14:37:34: [GO18_globalSetVolt]### Host voltage value is set.
14:37:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3352 ] 
14:37:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3353 ] 
14:37:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3354 ] 
14:37:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F420>, <py_sfcl.CommandDataDefinition object at 0x0613F030>) , Command count = 3355 ] 
14:37:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F240>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 3356 ] 
14:37:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:34: [ SetCardRCA(0x1, 0xD555) , Command count = 3357 ] 
14:37:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:35: Host Frequency set to 25000 KHz
14:37:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:35: ####CSD Registe 2.0 Values####
14:37:35: CSD_STRUCTURE                                 :0x1
14:37:35: Reserv1                                       :0x0
14:37:35: Time Access 1 TAAC                            :0xe
14:37:35: Time Access 2 NSAC*100                        :0x0
14:37:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:35: Card Command Classess CCC                     :0x5b5
14:37:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:35: DSR(driver stage register)  DSR_IMP           :0x0
14:37:35: Reserv2                                       :0x0
14:37:35: Device Size C_SIZE                            :0xedc8
14:37:35: Reserv3                                       :0x0
14:37:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:35: Reserv4                                       :0x0
14:37:35: Write Speed Factor R2W_FACTOR                 :0x2
14:37:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:35: FILE_FORMAT_GRP                               :0x0
14:37:35: COPY flag                                     :0x1
14:37:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:35: File_Format                                   :0x0
14:37:35: CRC                                           :0x0
14:37:35: ####CSD Registe Values####  

14:37:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:35: [GetSCRRegisterEntry] Passed
14:37:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:35: Data_Status_After Erases          : 0
14:37:35: CPRM Security Support             : No Security
14:37:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:35: Spec. Version                     : Version 3.0X
14:37:35: Extended Security Support         : Extended_Security_Not_Supported
14:37:35: Command Support                   : COMMAND_SUPPORT
14:37:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF270>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 3358 ] 
14:37:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x06138C30>) , Command count = 3359 ] 
14:37:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:35: [ SetBusWidth(0x4) , Command count = 3360 ] 
14:37:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3361 ] 
14:37:35: Protected Area Size 0x28000
14:37:35: Bus Width           2
14:37:35: Secure Mode         0
14:37:35: Speed  Class        4
14:37:35: Perf Move           0
14:37:35: Au Size             9
14:37:35: Erase Size          15
14:37:35: Erase Timeout       1
14:37:35: Erase offset        1
14:37:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3362 ] 
14:37:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:35: Host Frequency set to 100000 KHz
14:37:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:35: ####CSD Registe 2.0 Values####
14:37:35: CSD_STRUCTURE                                 :0x1
14:37:35: Reserv1                                       :0x0
14:37:35: Time Access 1 TAAC                            :0xe
14:37:35: Time Access 2 NSAC*100                        :0x0
14:37:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:35: Card Command Classess CCC                     :0x5b5
14:37:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:35: DSR(driver stage register)  DSR_IMP           :0x0
14:37:35: Reserv2                                       :0x0
14:37:35: Device Size C_SIZE                            :0xedc8
14:37:35: Reserv3                                       :0x0
14:37:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:35: Reserv4                                       :0x0
14:37:35: Write Speed Factor R2W_FACTOR                 :0x2
14:37:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:35: FILE_FORMAT_GRP                               :0x0
14:37:35: COPY flag                                     :0x1
14:37:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:35: File_Format                                   :0x0
14:37:35: CRC                                           :0x0
14:37:35: ####CSD Registe Values####  

14:37:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052577E0>, <py_sfcl.CommandDataDefinition object at 0x06138930>) , Command count = 3363 ] 
14:37:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF60>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 3364 ] 
14:37:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71947 to EndLba:0x3B719C7 with One's Pattern
14:37:35: [ WrLbaNoData(0x3B71947, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3365 ] 
14:37:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71947 to EndLba:0x3B719C7 with One's Pattern 

14:37:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B719C7 to EndLba:0x3B71A47 with One's Pattern
14:37:35: [ WrLbaNoData(0x3B719C7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3366 ] 
14:37:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B719C7 to EndLba:0x3B71A47 with One's Pattern 

14:37:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23211 to EndLba:0x250B7 with Constant Pattern
14:37:35: [ RdLbaNoData(0x23211, 0x1EA6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3367 ] 
14:37:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23211 to EndLba:0x250B7 with Constant Pattern 

14:37:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3921
14:37:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BB930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FAE0>, <py_sfcl.PySEnhancedCmdData object at 0x0613FF30>, <None>) , Command count = 3368 ] 
14:37:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:38: Host Frequency set to 25000 KHz
14:37:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FBD0>, 0x0, True) , Command count = 3369 ] 
14:37:38: [GO18_globalSetVolt]### Host voltage value is set.
14:37:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF1B0>, 0x0, False) , Command count = 3370 ] 
14:37:38: [GO18_globalSetVolt]### Host voltage value is set.
14:37:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3371 ] 
14:37:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3372 ] 
14:37:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3373 ] 
14:37:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 3374 ] 
14:37:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138300>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 3375 ] 
14:37:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:38: [ SetCardRCA(0x1, 0xD555) , Command count = 3376 ] 
14:37:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:38: Host Frequency set to 25000 KHz
14:37:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:38: ####CSD Registe 2.0 Values####
14:37:38: CSD_STRUCTURE                                 :0x1
14:37:38: Reserv1                                       :0x0
14:37:38: Time Access 1 TAAC                            :0xe
14:37:38: Time Access 2 NSAC*100                        :0x0
14:37:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:38: Card Command Classess CCC                     :0x5b5
14:37:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:38: DSR(driver stage register)  DSR_IMP           :0x0
14:37:38: Reserv2                                       :0x0
14:37:38: Device Size C_SIZE                            :0xedc8
14:37:38: Reserv3                                       :0x0
14:37:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:38: Reserv4                                       :0x0
14:37:38: Write Speed Factor R2W_FACTOR                 :0x2
14:37:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:38: FILE_FORMAT_GRP                               :0x0
14:37:38: COPY flag                                     :0x1
14:37:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:38: File_Format                                   :0x0
14:37:38: CRC                                           :0x0
14:37:38: ####CSD Registe Values####  

14:37:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:38: [GetSCRRegisterEntry] Passed
14:37:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:38: Data_Status_After Erases          : 0
14:37:38: CPRM Security Support             : No Security
14:37:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:38: Spec. Version                     : Version 3.0X
14:37:38: Extended Security Support         : Extended_Security_Not_Supported
14:37:38: Command Support                   : COMMAND_SUPPORT
14:37:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F660>, <py_sfcl.CommandDataDefinition object at 0x061452A0>) , Command count = 3377 ] 
14:37:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x06138ED0>) , Command count = 3378 ] 
14:37:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:38: [ SetBusWidth(0x4) , Command count = 3379 ] 
14:37:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3380 ] 
14:37:38: Protected Area Size 0x28000
14:37:38: Bus Width           2
14:37:38: Secure Mode         0
14:37:38: Speed  Class        4
14:37:38: Perf Move           0
14:37:38: Au Size             9
14:37:38: Erase Size          15
14:37:38: Erase Timeout       1
14:37:38: Erase offset        1
14:37:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3381 ] 
14:37:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:38: Host Frequency set to 100000 KHz
14:37:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:38: ####CSD Registe 2.0 Values####
14:37:38: CSD_STRUCTURE                                 :0x1
14:37:38: Reserv1                                       :0x0
14:37:38: Time Access 1 TAAC                            :0xe
14:37:38: Time Access 2 NSAC*100                        :0x0
14:37:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:38: Card Command Classess CCC                     :0x5b5
14:37:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:38: DSR(driver stage register)  DSR_IMP           :0x0
14:37:38: Reserv2                                       :0x0
14:37:38: Device Size C_SIZE                            :0xedc8
14:37:38: Reserv3                                       :0x0
14:37:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:38: Reserv4                                       :0x0
14:37:38: Write Speed Factor R2W_FACTOR                 :0x2
14:37:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:39: FILE_FORMAT_GRP                               :0x0
14:37:39: COPY flag                                     :0x1
14:37:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:39: File_Format                                   :0x0
14:37:39: CRC                                           :0x0
14:37:39: ####CSD Registe Values####  

14:37:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1A50>, <py_sfcl.CommandDataDefinition object at 0x0518AE70>) , Command count = 3382 ] 
14:37:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x0606F7B0>) , Command count = 3383 ] 
14:37:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70BE5 to EndLba:0x3B70C65 with One's Pattern
14:37:39: [ WrLbaNoData(0x3B70BE5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3384 ] 
14:37:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70BE5 to EndLba:0x3B70C65 with One's Pattern 

14:37:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70C65 to EndLba:0x3B70CE5 with One's Pattern
14:37:39: [ WrLbaNoData(0x3B70C65, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3385 ] 
14:37:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70C65 to EndLba:0x3B70CE5 with One's Pattern 

14:37:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23211 to EndLba:0x250B5 with Constant Pattern
14:37:39: [ RdLbaNoData(0x23211, 0x1EA4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3386 ] 
14:37:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23211 to EndLba:0x250B5 with Constant Pattern 

14:37:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3920
14:37:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F4E0>, <py_sfcl.PySEnhancedCmdData object at 0x060E3E40>, <None>) , Command count = 3387 ] 
14:37:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:41: Host Frequency set to 25000 KHz
14:37:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C60>, 0x0, True) , Command count = 3388 ] 
14:37:41: [GO18_globalSetVolt]### Host voltage value is set.
14:37:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C90>, 0x0, False) , Command count = 3389 ] 
14:37:41: [GO18_globalSetVolt]### Host voltage value is set.
14:37:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3390 ] 
14:37:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3391 ] 
14:37:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3392 ] 
14:37:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x060E3A50>) , Command count = 3393 ] 
14:37:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 3394 ] 
14:37:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:41: [ SetCardRCA(0x1, 0xD555) , Command count = 3395 ] 
14:37:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:41: Host Frequency set to 25000 KHz
14:37:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:41: ####CSD Registe 2.0 Values####
14:37:41: CSD_STRUCTURE                                 :0x1
14:37:41: Reserv1                                       :0x0
14:37:41: Time Access 1 TAAC                            :0xe
14:37:41: Time Access 2 NSAC*100                        :0x0
14:37:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:41: Card Command Classess CCC                     :0x5b5
14:37:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:41: DSR(driver stage register)  DSR_IMP           :0x0
14:37:41: Reserv2                                       :0x0
14:37:41: Device Size C_SIZE                            :0xedc8
14:37:41: Reserv3                                       :0x0
14:37:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:41: Reserv4                                       :0x0
14:37:41: Write Speed Factor R2W_FACTOR                 :0x2
14:37:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:41: FILE_FORMAT_GRP                               :0x0
14:37:41: COPY flag                                     :0x1
14:37:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:41: File_Format                                   :0x0
14:37:41: CRC                                           :0x0
14:37:41: ####CSD Registe Values####  

14:37:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:41: [GetSCRRegisterEntry] Passed
14:37:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:41: Data_Status_After Erases          : 0
14:37:41: CPRM Security Support             : No Security
14:37:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:41: Spec. Version                     : Version 3.0X
14:37:41: Extended Security Support         : Extended_Security_Not_Supported
14:37:41: Command Support                   : COMMAND_SUPPORT
14:37:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529B4B0>, <py_sfcl.CommandDataDefinition object at 0x0613FC00>) , Command count = 3396 ] 
14:37:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x0611C900>) , Command count = 3397 ] 
14:37:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:41: [ SetBusWidth(0x4) , Command count = 3398 ] 
14:37:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CBA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3399 ] 
14:37:41: Protected Area Size 0x28000
14:37:41: Bus Width           2
14:37:41: Secure Mode         0
14:37:41: Speed  Class        4
14:37:41: Perf Move           0
14:37:41: Au Size             9
14:37:41: Erase Size          15
14:37:41: Erase Timeout       1
14:37:41: Erase offset        1
14:37:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3400 ] 
14:37:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:42: Host Frequency set to 100000 KHz
14:37:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:42: ####CSD Registe 2.0 Values####
14:37:42: CSD_STRUCTURE                                 :0x1
14:37:42: Reserv1                                       :0x0
14:37:42: Time Access 1 TAAC                            :0xe
14:37:42: Time Access 2 NSAC*100                        :0x0
14:37:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:42: Card Command Classess CCC                     :0x5b5
14:37:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:42: DSR(driver stage register)  DSR_IMP           :0x0
14:37:42: Reserv2                                       :0x0
14:37:42: Device Size C_SIZE                            :0xedc8
14:37:42: Reserv3                                       :0x0
14:37:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:42: Reserv4                                       :0x0
14:37:42: Write Speed Factor R2W_FACTOR                 :0x2
14:37:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:42: FILE_FORMAT_GRP                               :0x0
14:37:42: COPY flag                                     :0x1
14:37:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:42: File_Format                                   :0x0
14:37:42: CRC                                           :0x0
14:37:42: ####CSD Registe Values####  

14:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F4E0>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 3401 ] 
14:37:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F00>, <py_sfcl.CommandDataDefinition object at 0x060E38A0>) , Command count = 3402 ] 
14:37:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DA92 to EndLba:0x3B6DB12 with One's Pattern
14:37:42: [ WrLbaNoData(0x3B6DA92, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3403 ] 
14:37:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DA92 to EndLba:0x3B6DB12 with One's Pattern 

14:37:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DB12 to EndLba:0x3B6DB92 with One's Pattern
14:37:42: [ WrLbaNoData(0x3B6DB12, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3404 ] 
14:37:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DB12 to EndLba:0x3B6DB92 with One's Pattern 

14:37:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23213 to EndLba:0x250B5 with Constant Pattern
14:37:42: [ RdLbaNoData(0x23213, 0x1EA2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3405 ] 
14:37:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23213 to EndLba:0x250B5 with Constant Pattern 

14:37:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3919
14:37:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0606F7E0>, <py_sfcl.PySEnhancedCmdData object at 0x0611C0F0>, <None>) , Command count = 3406 ] 
14:37:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:44: Host Frequency set to 25000 KHz
14:37:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1F30>, 0x0, True) , Command count = 3407 ] 
14:37:44: [GO18_globalSetVolt]### Host voltage value is set.
14:37:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E780>, 0x0, False) , Command count = 3408 ] 
14:37:44: [GO18_globalSetVolt]### Host voltage value is set.
14:37:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3409 ] 
14:37:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3410 ] 
14:37:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3411 ] 
14:37:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F570>, <py_sfcl.CommandDataDefinition object at 0x0611CC30>) , Command count = 3412 ] 
14:37:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F030>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 3413 ] 
14:37:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:45: [ SetCardRCA(0x1, 0xD555) , Command count = 3414 ] 
14:37:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:45: Host Frequency set to 25000 KHz
14:37:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:45: ####CSD Registe 2.0 Values####
14:37:45: CSD_STRUCTURE                                 :0x1
14:37:45: Reserv1                                       :0x0
14:37:45: Time Access 1 TAAC                            :0xe
14:37:45: Time Access 2 NSAC*100                        :0x0
14:37:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:45: Card Command Classess CCC                     :0x5b5
14:37:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:45: DSR(driver stage register)  DSR_IMP           :0x0
14:37:45: Reserv2                                       :0x0
14:37:45: Device Size C_SIZE                            :0xedc8
14:37:45: Reserv3                                       :0x0
14:37:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:45: Reserv4                                       :0x0
14:37:45: Write Speed Factor R2W_FACTOR                 :0x2
14:37:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:45: FILE_FORMAT_GRP                               :0x0
14:37:45: COPY flag                                     :0x1
14:37:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:45: File_Format                                   :0x0
14:37:45: CRC                                           :0x0
14:37:45: ####CSD Registe Values####  

14:37:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:45: [GetSCRRegisterEntry] Passed
14:37:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:45: Data_Status_After Erases          : 0
14:37:45: CPRM Security Support             : No Security
14:37:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:45: Spec. Version                     : Version 3.0X
14:37:45: Extended Security Support         : Extended_Security_Not_Supported
14:37:45: Command Support                   : COMMAND_SUPPORT
14:37:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F300>, <py_sfcl.CommandDataDefinition object at 0x060E38A0>) , Command count = 3415 ] 
14:37:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F090>, <py_sfcl.CommandDataDefinition object at 0x0611CAB0>) , Command count = 3416 ] 
14:37:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:45: [ SetBusWidth(0x4) , Command count = 3417 ] 
14:37:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E39F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3418 ] 
14:37:45: Protected Area Size 0x28000
14:37:45: Bus Width           2
14:37:45: Secure Mode         0
14:37:45: Speed  Class        4
14:37:45: Perf Move           0
14:37:45: Au Size             9
14:37:45: Erase Size          15
14:37:45: Erase Timeout       1
14:37:45: Erase offset        1
14:37:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3419 ] 
14:37:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:45: Host Frequency set to 100000 KHz
14:37:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:45: ####CSD Registe 2.0 Values####
14:37:45: CSD_STRUCTURE                                 :0x1
14:37:45: Reserv1                                       :0x0
14:37:45: Time Access 1 TAAC                            :0xe
14:37:45: Time Access 2 NSAC*100                        :0x0
14:37:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:45: Card Command Classess CCC                     :0x5b5
14:37:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:45: DSR(driver stage register)  DSR_IMP           :0x0
14:37:45: Reserv2                                       :0x0
14:37:45: Device Size C_SIZE                            :0xedc8
14:37:45: Reserv3                                       :0x0
14:37:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:45: Reserv4                                       :0x0
14:37:45: Write Speed Factor R2W_FACTOR                 :0x2
14:37:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:45: FILE_FORMAT_GRP                               :0x0
14:37:45: COPY flag                                     :0x1
14:37:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:45: File_Format                                   :0x0
14:37:45: CRC                                           :0x0
14:37:45: ####CSD Registe Values####  

14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x0611C810>) , Command count = 3420 ] 
14:37:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1B0>, <py_sfcl.CommandDataDefinition object at 0x0611CBA0>) , Command count = 3421 ] 
14:37:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F197 to EndLba:0x3B6F217 with One's Pattern
14:37:46: [ WrLbaNoData(0x3B6F197, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3422 ] 
14:37:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F197 to EndLba:0x3B6F217 with One's Pattern 

14:37:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F217 to EndLba:0x3B6F297 with One's Pattern
14:37:46: [ WrLbaNoData(0x3B6F217, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3423 ] 
14:37:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F217 to EndLba:0x3B6F297 with One's Pattern 

14:37:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23213 to EndLba:0x250B3 with Constant Pattern
14:37:46: [ RdLbaNoData(0x23213, 0x1EA0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3424 ] 
14:37:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23213 to EndLba:0x250B3 with Constant Pattern 

14:37:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3918
14:37:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061295A0>, <py_sfcl.PySEnhancedCmdData object at 0x0611C060>, <None>) , Command count = 3425 ] 
14:37:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:48: Host Frequency set to 25000 KHz
14:37:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FA80>, 0x0, True) , Command count = 3426 ] 
14:37:48: [GO18_globalSetVolt]### Host voltage value is set.
14:37:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FCF0>, 0x0, False) , Command count = 3427 ] 
14:37:48: [GO18_globalSetVolt]### Host voltage value is set.
14:37:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3428 ] 
14:37:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3429 ] 
14:37:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3430 ] 
14:37:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A80>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 3431 ] 
14:37:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3750>, <py_sfcl.CommandDataDefinition object at 0x060E38D0>) , Command count = 3432 ] 
14:37:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:48: [ SetCardRCA(0x1, 0xD555) , Command count = 3433 ] 
14:37:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:48: Host Frequency set to 25000 KHz
14:37:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:48: ####CSD Registe 2.0 Values####
14:37:48: CSD_STRUCTURE                                 :0x1
14:37:48: Reserv1                                       :0x0
14:37:48: Time Access 1 TAAC                            :0xe
14:37:48: Time Access 2 NSAC*100                        :0x0
14:37:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:48: Card Command Classess CCC                     :0x5b5
14:37:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:48: DSR(driver stage register)  DSR_IMP           :0x0
14:37:48: Reserv2                                       :0x0
14:37:48: Device Size C_SIZE                            :0xedc8
14:37:48: Reserv3                                       :0x0
14:37:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:48: Reserv4                                       :0x0
14:37:48: Write Speed Factor R2W_FACTOR                 :0x2
14:37:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:48: FILE_FORMAT_GRP                               :0x0
14:37:48: COPY flag                                     :0x1
14:37:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:48: File_Format                                   :0x0
14:37:48: CRC                                           :0x0
14:37:48: ####CSD Registe Values####  

14:37:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:48: [GetSCRRegisterEntry] Passed
14:37:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:48: Data_Status_After Erases          : 0
14:37:48: CPRM Security Support             : No Security
14:37:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:48: Spec. Version                     : Version 3.0X
14:37:48: Extended Security Support         : Extended_Security_Not_Supported
14:37:48: Command Support                   : COMMAND_SUPPORT
14:37:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C0C0>, <py_sfcl.CommandDataDefinition object at 0x060E3840>) , Command count = 3434 ] 
14:37:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611C090>) , Command count = 3435 ] 
14:37:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:48: [ SetBusWidth(0x4) , Command count = 3436 ] 
14:37:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CC00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3437 ] 
14:37:48: Protected Area Size 0x28000
14:37:48: Bus Width           2
14:37:48: Secure Mode         0
14:37:48: Speed  Class        4
14:37:48: Perf Move           0
14:37:48: Au Size             9
14:37:48: Erase Size          15
14:37:48: Erase Timeout       1
14:37:48: Erase offset        1
14:37:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3438 ] 
14:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:48: Host Frequency set to 100000 KHz
14:37:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:48: ####CSD Registe 2.0 Values####
14:37:48: CSD_STRUCTURE                                 :0x1
14:37:49: Reserv1                                       :0x0
14:37:49: Time Access 1 TAAC                            :0xe
14:37:49: Time Access 2 NSAC*100                        :0x0
14:37:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:49: Card Command Classess CCC                     :0x5b5
14:37:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:49: DSR(driver stage register)  DSR_IMP           :0x0
14:37:49: Reserv2                                       :0x0
14:37:49: Device Size C_SIZE                            :0xedc8
14:37:49: Reserv3                                       :0x0
14:37:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:49: Reserv4                                       :0x0
14:37:49: Write Speed Factor R2W_FACTOR                 :0x2
14:37:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:49: FILE_FORMAT_GRP                               :0x0
14:37:49: COPY flag                                     :0x1
14:37:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:49: File_Format                                   :0x0
14:37:49: CRC                                           :0x0
14:37:49: ####CSD Registe Values####  

14:37:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129840>, <py_sfcl.CommandDataDefinition object at 0x0611C480>) , Command count = 3439 ] 
14:37:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7B0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 3440 ] 
14:37:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F234 to EndLba:0x3B6F2B4 with One's Pattern
14:37:49: [ WrLbaNoData(0x3B6F234, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3441 ] 
14:37:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F234 to EndLba:0x3B6F2B4 with One's Pattern 

14:37:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F2B4 to EndLba:0x3B6F334 with One's Pattern
14:37:49: [ WrLbaNoData(0x3B6F2B4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3442 ] 
14:37:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F2B4 to EndLba:0x3B6F334 with One's Pattern 

14:37:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23215 to EndLba:0x250B3 with Constant Pattern
14:37:49: [ RdLbaNoData(0x23215, 0x1E9E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3443 ] 
14:37:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23215 to EndLba:0x250B3 with Constant Pattern 

14:37:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3917
14:37:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CCC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CB10>, <py_sfcl.PySEnhancedCmdData object at 0x061295D0>, <None>) , Command count = 3444 ] 
14:37:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:51: Host Frequency set to 25000 KHz
14:37:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F0C0>, 0x0, True) , Command count = 3445 ] 
14:37:51: [GO18_globalSetVolt]### Host voltage value is set.
14:37:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129090>, 0x0, False) , Command count = 3446 ] 
14:37:51: [GO18_globalSetVolt]### Host voltage value is set.
14:37:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3447 ] 
14:37:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3448 ] 
14:37:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3449 ] 
14:37:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x06129A20>) , Command count = 3450 ] 
14:37:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x06129030>) , Command count = 3451 ] 
14:37:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:52: [ SetCardRCA(0x1, 0xD555) , Command count = 3452 ] 
14:37:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:52: Host Frequency set to 25000 KHz
14:37:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:52: ####CSD Registe 2.0 Values####
14:37:52: CSD_STRUCTURE                                 :0x1
14:37:52: Reserv1                                       :0x0
14:37:52: Time Access 1 TAAC                            :0xe
14:37:52: Time Access 2 NSAC*100                        :0x0
14:37:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:52: Card Command Classess CCC                     :0x5b5
14:37:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:52: DSR(driver stage register)  DSR_IMP           :0x0
14:37:52: Reserv2                                       :0x0
14:37:52: Device Size C_SIZE                            :0xedc8
14:37:52: Reserv3                                       :0x0
14:37:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:52: Reserv4                                       :0x0
14:37:52: Write Speed Factor R2W_FACTOR                 :0x2
14:37:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:52: FILE_FORMAT_GRP                               :0x0
14:37:52: COPY flag                                     :0x1
14:37:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:52: File_Format                                   :0x0
14:37:52: CRC                                           :0x0
14:37:52: ####CSD Registe Values####  

14:37:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:52: [GetSCRRegisterEntry] Passed
14:37:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:52: Data_Status_After Erases          : 0
14:37:52: CPRM Security Support             : No Security
14:37:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:52: Spec. Version                     : Version 3.0X
14:37:52: Extended Security Support         : Extended_Security_Not_Supported
14:37:52: Command Support                   : COMMAND_SUPPORT
14:37:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F2A0>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 3453 ] 
14:37:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 3454 ] 
14:37:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:52: [ SetBusWidth(0x4) , Command count = 3455 ] 
14:37:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CE40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3456 ] 
14:37:52: Protected Area Size 0x28000
14:37:52: Bus Width           2
14:37:52: Secure Mode         0
14:37:52: Speed  Class        4
14:37:52: Perf Move           0
14:37:52: Au Size             9
14:37:52: Erase Size          15
14:37:52: Erase Timeout       1
14:37:52: Erase offset        1
14:37:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3457 ] 
14:37:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:52: Host Frequency set to 100000 KHz
14:37:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:52: ####CSD Registe 2.0 Values####
14:37:52: CSD_STRUCTURE                                 :0x1
14:37:52: Reserv1                                       :0x0
14:37:52: Time Access 1 TAAC                            :0xe
14:37:52: Time Access 2 NSAC*100                        :0x0
14:37:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:52: Card Command Classess CCC                     :0x5b5
14:37:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:52: DSR(driver stage register)  DSR_IMP           :0x0
14:37:52: Reserv2                                       :0x0
14:37:52: Device Size C_SIZE                            :0xedc8
14:37:52: Reserv3                                       :0x0
14:37:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:52: Reserv4                                       :0x0
14:37:52: Write Speed Factor R2W_FACTOR                 :0x2
14:37:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:52: FILE_FORMAT_GRP                               :0x0
14:37:52: COPY flag                                     :0x1
14:37:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:52: File_Format                                   :0x0
14:37:52: CRC                                           :0x0
14:37:52: ####CSD Registe Values####  

14:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FED0>, <py_sfcl.CommandDataDefinition object at 0x0612E2A0>) , Command count = 3458 ] 
14:37:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 3459 ] 
14:37:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71ACD to EndLba:0x3B71B4D with One's Pattern
14:37:52: [ WrLbaNoData(0x3B71ACD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3460 ] 
14:37:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71ACD to EndLba:0x3B71B4D with One's Pattern 

14:37:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71B4D to EndLba:0x3B71BCD with One's Pattern
14:37:52: [ WrLbaNoData(0x3B71B4D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3461 ] 
14:37:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71B4D to EndLba:0x3B71BCD with One's Pattern 

14:37:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:52: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23215 to EndLba:0x250B1 with Constant Pattern
14:37:53: [ RdLbaNoData(0x23215, 0x1E9C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3462 ] 
14:37:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23215 to EndLba:0x250B1 with Constant Pattern 

14:37:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3916
14:37:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061291E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129750>, <py_sfcl.PySEnhancedCmdData object at 0x061294B0>, <None>) , Command count = 3463 ] 
14:37:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:55: Host Frequency set to 25000 KHz
14:37:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129120>, 0x0, True) , Command count = 3464 ] 
14:37:55: [GO18_globalSetVolt]### Host voltage value is set.
14:37:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E180>, 0x0, False) , Command count = 3465 ] 
14:37:55: [GO18_globalSetVolt]### Host voltage value is set.
14:37:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3466 ] 
14:37:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3467 ] 
14:37:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3468 ] 
14:37:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py_sfcl.CommandDataDefinition object at 0x06129D20>) , Command count = 3469 ] 
14:37:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 3470 ] 
14:37:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:55: [ SetCardRCA(0x1, 0xD555) , Command count = 3471 ] 
14:37:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:55: Host Frequency set to 25000 KHz
14:37:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:55: ####CSD Registe 2.0 Values####
14:37:55: CSD_STRUCTURE                                 :0x1
14:37:55: Reserv1                                       :0x0
14:37:55: Time Access 1 TAAC                            :0xe
14:37:55: Time Access 2 NSAC*100                        :0x0
14:37:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:55: Card Command Classess CCC                     :0x5b5
14:37:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:55: DSR(driver stage register)  DSR_IMP           :0x0
14:37:55: Reserv2                                       :0x0
14:37:55: Device Size C_SIZE                            :0xedc8
14:37:55: Reserv3                                       :0x0
14:37:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:55: Reserv4                                       :0x0
14:37:55: Write Speed Factor R2W_FACTOR                 :0x2
14:37:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:55: FILE_FORMAT_GRP                               :0x0
14:37:55: COPY flag                                     :0x1
14:37:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:55: File_Format                                   :0x0
14:37:55: CRC                                           :0x0
14:37:55: ####CSD Registe Values####  

14:37:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:55: [GetSCRRegisterEntry] Passed
14:37:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:55: Data_Status_After Erases          : 0
14:37:55: CPRM Security Support             : No Security
14:37:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:55: Spec. Version                     : Version 3.0X
14:37:55: Extended Security Support         : Extended_Security_Not_Supported
14:37:55: Command Support                   : COMMAND_SUPPORT
14:37:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E270>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 3472 ] 
14:37:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E3F0>, <py_sfcl.CommandDataDefinition object at 0x06129570>) , Command count = 3473 ] 
14:37:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:55: [ SetBusWidth(0x4) , Command count = 3474 ] 
14:37:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CD20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3475 ] 
14:37:55: Protected Area Size 0x28000
14:37:55: Bus Width           2
14:37:55: Secure Mode         0
14:37:55: Speed  Class        4
14:37:55: Perf Move           0
14:37:55: Au Size             9
14:37:55: Erase Size          15
14:37:55: Erase Timeout       1
14:37:55: Erase offset        1
14:37:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3476 ] 
14:37:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:55: Host Frequency set to 100000 KHz
14:37:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:55: ####CSD Registe 2.0 Values####
14:37:55: CSD_STRUCTURE                                 :0x1
14:37:55: Reserv1                                       :0x0
14:37:55: Time Access 1 TAAC                            :0xe
14:37:55: Time Access 2 NSAC*100                        :0x0
14:37:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:55: Card Command Classess CCC                     :0x5b5
14:37:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:56: DSR(driver stage register)  DSR_IMP           :0x0
14:37:56: Reserv2                                       :0x0
14:37:56: Device Size C_SIZE                            :0xedc8
14:37:56: Reserv3                                       :0x0
14:37:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:56: Reserv4                                       :0x0
14:37:56: Write Speed Factor R2W_FACTOR                 :0x2
14:37:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:56: FILE_FORMAT_GRP                               :0x0
14:37:56: COPY flag                                     :0x1
14:37:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:56: File_Format                                   :0x0
14:37:56: CRC                                           :0x0
14:37:56: ####CSD Registe Values####  

14:37:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC60>, <py_sfcl.CommandDataDefinition object at 0x0612E390>) , Command count = 3477 ] 
14:37:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132060>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 3478 ] 
14:37:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D966 to EndLba:0x3B6D9E6 with One's Pattern
14:37:56: [ WrLbaNoData(0x3B6D966, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3479 ] 
14:37:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D966 to EndLba:0x3B6D9E6 with One's Pattern 

14:37:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D9E6 to EndLba:0x3B6DA66 with One's Pattern
14:37:56: [ WrLbaNoData(0x3B6D9E6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3480 ] 
14:37:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D9E6 to EndLba:0x3B6DA66 with One's Pattern 

14:37:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23217 to EndLba:0x250B1 with Constant Pattern
14:37:56: [ RdLbaNoData(0x23217, 0x1E9A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3481 ] 
14:37:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23217 to EndLba:0x250B1 with Constant Pattern 

14:37:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3915
14:37:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EA20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129330>, <py_sfcl.PySEnhancedCmdData object at 0x06129540>, <None>) , Command count = 3482 ] 
14:37:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:37:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:58: Host Frequency set to 25000 KHz
14:37:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:37:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:37:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E570>, 0x0, True) , Command count = 3483 ] 
14:37:58: [GO18_globalSetVolt]### Host voltage value is set.
14:37:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:37:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E1E0>, 0x0, False) , Command count = 3484 ] 
14:37:58: [GO18_globalSetVolt]### Host voltage value is set.
14:37:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3485 ] 
14:37:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:37:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3486 ] 
14:37:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:37:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:37:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:37:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:37:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:37:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3487 ] 
14:37:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:37:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:37:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C8D0>, <py_sfcl.CommandDataDefinition object at 0x06129FC0>) , Command count = 3488 ] 
14:37:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:37:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py_sfcl.CommandDataDefinition object at 0x061297B0>) , Command count = 3489 ] 
14:37:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:37:58: [ SetCardRCA(0x1, 0xD555) , Command count = 3490 ] 
14:37:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:37:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:37:59: Host Frequency set to 25000 KHz
14:37:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:37:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:59: ####CSD Registe 2.0 Values####
14:37:59: CSD_STRUCTURE                                 :0x1
14:37:59: Reserv1                                       :0x0
14:37:59: Time Access 1 TAAC                            :0xe
14:37:59: Time Access 2 NSAC*100                        :0x0
14:37:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:37:59: Card Command Classess CCC                     :0x5b5
14:37:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:59: DSR(driver stage register)  DSR_IMP           :0x0
14:37:59: Reserv2                                       :0x0
14:37:59: Device Size C_SIZE                            :0xedc8
14:37:59: Reserv3                                       :0x0
14:37:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:59: Reserv4                                       :0x0
14:37:59: Write Speed Factor R2W_FACTOR                 :0x2
14:37:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:59: FILE_FORMAT_GRP                               :0x0
14:37:59: COPY flag                                     :0x1
14:37:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:59: File_Format                                   :0x0
14:37:59: CRC                                           :0x0
14:37:59: ####CSD Registe Values####  

14:37:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:37:59: [GetSCRRegisterEntry] Passed
14:37:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:37:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:37:59: Data_Status_After Erases          : 0
14:37:59: CPRM Security Support             : No Security
14:37:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:37:59: Spec. Version                     : Version 3.0X
14:37:59: Extended Security Support         : Extended_Security_Not_Supported
14:37:59: Command Support                   : COMMAND_SUPPORT
14:37:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDB0>, <py_sfcl.CommandDataDefinition object at 0x06145210>) , Command count = 3491 ] 
14:37:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 3492 ] 
14:37:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:37:59: [ SetBusWidth(0x4) , Command count = 3493 ] 
14:37:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:37:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E8D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3494 ] 
14:37:59: Protected Area Size 0x28000
14:37:59: Bus Width           2
14:37:59: Secure Mode         0
14:37:59: Speed  Class        4
14:37:59: Perf Move           0
14:37:59: Au Size             9
14:37:59: Erase Size          15
14:37:59: Erase Timeout       1
14:37:59: Erase offset        1
14:37:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:37:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:37:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:37:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3495 ] 
14:37:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:37:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:37:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:37:59: Host Frequency set to 100000 KHz
14:37:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:37:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:37:59: ####CSD Registe 2.0 Values####
14:37:59: CSD_STRUCTURE                                 :0x1
14:37:59: Reserv1                                       :0x0
14:37:59: Time Access 1 TAAC                            :0xe
14:37:59: Time Access 2 NSAC*100                        :0x0
14:37:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:37:59: Card Command Classess CCC                     :0x5b5
14:37:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:37:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:37:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:37:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:37:59: DSR(driver stage register)  DSR_IMP           :0x0
14:37:59: Reserv2                                       :0x0
14:37:59: Device Size C_SIZE                            :0xedc8
14:37:59: Reserv3                                       :0x0
14:37:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:37:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:37:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:37:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:37:59: Reserv4                                       :0x0
14:37:59: Write Speed Factor R2W_FACTOR                 :0x2
14:37:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:37:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:37:59: FILE_FORMAT_GRP                               :0x0
14:37:59: COPY flag                                     :0x1
14:37:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:37:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:37:59: File_Format                                   :0x0
14:37:59: CRC                                           :0x0
14:37:59: ####CSD Registe Values####  

14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298D0>, <py_sfcl.CommandDataDefinition object at 0x061322D0>) , Command count = 3496 ] 
14:37:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:37:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129150>, <py_sfcl.CommandDataDefinition object at 0x0612E900>) , Command count = 3497 ] 
14:37:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:37:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:37:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:37:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70BA1 to EndLba:0x3B70C21 with One's Pattern
14:37:59: [ WrLbaNoData(0x3B70BA1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3498 ] 
14:37:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70BA1 to EndLba:0x3B70C21 with One's Pattern 

14:37:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70C21 to EndLba:0x3B70CA1 with One's Pattern
14:37:59: [ WrLbaNoData(0x3B70C21, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3499 ] 
14:37:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70C21 to EndLba:0x3B70CA1 with One's Pattern 

14:37:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:37:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23217 to EndLba:0x250AF with Constant Pattern
14:37:59: [ RdLbaNoData(0x23217, 0x1E98, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3500 ] 
14:37:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23217 to EndLba:0x250AF with Constant Pattern 

14:37:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3914
14:37:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:37:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061323F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129AB0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E4B0>, <None>) , Command count = 3501 ] 
14:37:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:37:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:01: Host Frequency set to 25000 KHz
14:38:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x061328D0>, 0x0, True) , Command count = 3502 ] 
14:38:02: [GO18_globalSetVolt]### Host voltage value is set.
14:38:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FB40>, 0x0, False) , Command count = 3503 ] 
14:38:02: [GO18_globalSetVolt]### Host voltage value is set.
14:38:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3504 ] 
14:38:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3505 ] 
14:38:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3506 ] 
14:38:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x0612EAB0>) , Command count = 3507 ] 
14:38:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BA0>, <py_sfcl.CommandDataDefinition object at 0x06129ED0>) , Command count = 3508 ] 
14:38:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:02: [ SetCardRCA(0x1, 0xD555) , Command count = 3509 ] 
14:38:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:02: Host Frequency set to 25000 KHz
14:38:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:02: ####CSD Registe 2.0 Values####
14:38:02: CSD_STRUCTURE                                 :0x1
14:38:02: Reserv1                                       :0x0
14:38:02: Time Access 1 TAAC                            :0xe
14:38:02: Time Access 2 NSAC*100                        :0x0
14:38:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:02: Card Command Classess CCC                     :0x5b5
14:38:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:02: DSR(driver stage register)  DSR_IMP           :0x0
14:38:02: Reserv2                                       :0x0
14:38:02: Device Size C_SIZE                            :0xedc8
14:38:02: Reserv3                                       :0x0
14:38:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:02: Reserv4                                       :0x0
14:38:02: Write Speed Factor R2W_FACTOR                 :0x2
14:38:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:02: FILE_FORMAT_GRP                               :0x0
14:38:02: COPY flag                                     :0x1
14:38:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:02: File_Format                                   :0x0
14:38:02: CRC                                           :0x0
14:38:02: ####CSD Registe Values####  

14:38:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:02: [GetSCRRegisterEntry] Passed
14:38:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:02: Data_Status_After Erases          : 0
14:38:02: CPRM Security Support             : No Security
14:38:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:02: Spec. Version                     : Version 3.0X
14:38:02: Extended Security Support         : Extended_Security_Not_Supported
14:38:02: Command Support                   : COMMAND_SUPPORT
14:38:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F810>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 3510 ] 
14:38:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x0612EB70>) , Command count = 3511 ] 
14:38:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:02: [ SetBusWidth(0x4) , Command count = 3512 ] 
14:38:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061321B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3513 ] 
14:38:02: Protected Area Size 0x28000
14:38:02: Bus Width           2
14:38:02: Secure Mode         0
14:38:02: Speed  Class        4
14:38:02: Perf Move           0
14:38:02: Au Size             9
14:38:02: Erase Size          15
14:38:02: Erase Timeout       1
14:38:02: Erase offset        1
14:38:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3514 ] 
14:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:02: Host Frequency set to 100000 KHz
14:38:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:02: ####CSD Registe 2.0 Values####
14:38:02: CSD_STRUCTURE                                 :0x1
14:38:02: Reserv1                                       :0x0
14:38:02: Time Access 1 TAAC                            :0xe
14:38:02: Time Access 2 NSAC*100                        :0x0
14:38:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:02: Card Command Classess CCC                     :0x5b5
14:38:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:02: DSR(driver stage register)  DSR_IMP           :0x0
14:38:02: Reserv2                                       :0x0
14:38:02: Device Size C_SIZE                            :0xedc8
14:38:02: Reserv3                                       :0x0
14:38:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:03: Reserv4                                       :0x0
14:38:03: Write Speed Factor R2W_FACTOR                 :0x2
14:38:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:03: FILE_FORMAT_GRP                               :0x0
14:38:03: COPY flag                                     :0x1
14:38:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:03: File_Format                                   :0x0
14:38:03: CRC                                           :0x0
14:38:03: ####CSD Registe Values####  

14:38:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA80>, <py_sfcl.CommandDataDefinition object at 0x0612EF00>) , Command count = 3515 ] 
14:38:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132750>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 3516 ] 
14:38:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E27 to EndLba:0x3B70EA7 with One's Pattern
14:38:03: [ WrLbaNoData(0x3B70E27, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3517 ] 
14:38:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E27 to EndLba:0x3B70EA7 with One's Pattern 

14:38:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EA7 to EndLba:0x3B70F27 with One's Pattern
14:38:03: [ WrLbaNoData(0x3B70EA7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3518 ] 
14:38:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EA7 to EndLba:0x3B70F27 with One's Pattern 

14:38:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23219 to EndLba:0x250AF with Constant Pattern
14:38:03: [ RdLbaNoData(0x23219, 0x1E96, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3519 ] 
14:38:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23219 to EndLba:0x250AF with Constant Pattern 

14:38:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3913
14:38:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E35A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E120>, <py_sfcl.PySEnhancedCmdData object at 0x06132390>, <None>) , Command count = 3520 ] 
14:38:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:05: Host Frequency set to 25000 KHz
14:38:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FD20>, 0x0, True) , Command count = 3521 ] 
14:38:05: [GO18_globalSetVolt]### Host voltage value is set.
14:38:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF00>, 0x0, False) , Command count = 3522 ] 
14:38:05: [GO18_globalSetVolt]### Host voltage value is set.
14:38:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3523 ] 
14:38:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3524 ] 
14:38:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3525 ] 
14:38:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F330>, <py_sfcl.CommandDataDefinition object at 0x06129F30>) , Command count = 3526 ] 
14:38:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC30>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 3527 ] 
14:38:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:05: [ SetCardRCA(0x1, 0xD555) , Command count = 3528 ] 
14:38:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:05: Host Frequency set to 25000 KHz
14:38:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:05: ####CSD Registe 2.0 Values####
14:38:05: CSD_STRUCTURE                                 :0x1
14:38:05: Reserv1                                       :0x0
14:38:05: Time Access 1 TAAC                            :0xe
14:38:05: Time Access 2 NSAC*100                        :0x0
14:38:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:05: Card Command Classess CCC                     :0x5b5
14:38:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:05: DSR(driver stage register)  DSR_IMP           :0x0
14:38:05: Reserv2                                       :0x0
14:38:05: Device Size C_SIZE                            :0xedc8
14:38:05: Reserv3                                       :0x0
14:38:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:05: Reserv4                                       :0x0
14:38:05: Write Speed Factor R2W_FACTOR                 :0x2
14:38:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:05: FILE_FORMAT_GRP                               :0x0
14:38:05: COPY flag                                     :0x1
14:38:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:05: File_Format                                   :0x0
14:38:05: CRC                                           :0x0
14:38:05: ####CSD Registe Values####  

14:38:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:05: [GetSCRRegisterEntry] Passed
14:38:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:05: Data_Status_After Erases          : 0
14:38:05: CPRM Security Support             : No Security
14:38:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:05: Spec. Version                     : Version 3.0X
14:38:05: Extended Security Support         : Extended_Security_Not_Supported
14:38:05: Command Support                   : COMMAND_SUPPORT
14:38:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC00>, <py_sfcl.CommandDataDefinition object at 0x06132120>) , Command count = 3529 ] 
14:38:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 3530 ] 
14:38:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:05: [ SetBusWidth(0x4) , Command count = 3531 ] 
14:38:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3532 ] 
14:38:05: Protected Area Size 0x28000
14:38:05: Bus Width           2
14:38:05: Secure Mode         0
14:38:05: Speed  Class        4
14:38:05: Perf Move           0
14:38:05: Au Size             9
14:38:05: Erase Size          15
14:38:05: Erase Timeout       1
14:38:05: Erase offset        1
14:38:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3533 ] 
14:38:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:06: Host Frequency set to 100000 KHz
14:38:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:06: ####CSD Registe 2.0 Values####
14:38:06: CSD_STRUCTURE                                 :0x1
14:38:06: Reserv1                                       :0x0
14:38:06: Time Access 1 TAAC                            :0xe
14:38:06: Time Access 2 NSAC*100                        :0x0
14:38:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:06: Card Command Classess CCC                     :0x5b5
14:38:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:06: DSR(driver stage register)  DSR_IMP           :0x0
14:38:06: Reserv2                                       :0x0
14:38:06: Device Size C_SIZE                            :0xedc8
14:38:06: Reserv3                                       :0x0
14:38:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:06: Reserv4                                       :0x0
14:38:06: Write Speed Factor R2W_FACTOR                 :0x2
14:38:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:06: FILE_FORMAT_GRP                               :0x0
14:38:06: COPY flag                                     :0x1
14:38:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:06: File_Format                                   :0x0
14:38:06: CRC                                           :0x0
14:38:06: ####CSD Registe Values####  

14:38:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE70>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 3534 ] 
14:38:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x061321B0>) , Command count = 3535 ] 
14:38:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7062C to EndLba:0x3B706AC with One's Pattern
14:38:06: [ WrLbaNoData(0x3B7062C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3536 ] 
14:38:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7062C to EndLba:0x3B706AC with One's Pattern 

14:38:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B706AC to EndLba:0x3B7072C with One's Pattern
14:38:06: [ WrLbaNoData(0x3B706AC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3537 ] 
14:38:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B706AC to EndLba:0x3B7072C with One's Pattern 

14:38:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23219 to EndLba:0x250AD with Constant Pattern
14:38:06: [ RdLbaNoData(0x23219, 0x1E94, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3538 ] 
14:38:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23219 to EndLba:0x250AD with Constant Pattern 

14:38:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3912
14:38:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061324B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132F90>, <py_sfcl.PySEnhancedCmdData object at 0x06132F30>, <None>) , Command count = 3539 ] 
14:38:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:09: Host Frequency set to 25000 KHz
14:38:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132660>, 0x0, True) , Command count = 3540 ] 
14:38:09: [GO18_globalSetVolt]### Host voltage value is set.
14:38:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E720>, 0x0, False) , Command count = 3541 ] 
14:38:09: [GO18_globalSetVolt]### Host voltage value is set.
14:38:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3542 ] 
14:38:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3543 ] 
14:38:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3544 ] 
14:38:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x06132CF0>) , Command count = 3545 ] 
14:38:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x061322A0>) , Command count = 3546 ] 
14:38:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:09: [ SetCardRCA(0x1, 0xD555) , Command count = 3547 ] 
14:38:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:09: Host Frequency set to 25000 KHz
14:38:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:09: ####CSD Registe 2.0 Values####
14:38:09: CSD_STRUCTURE                                 :0x1
14:38:09: Reserv1                                       :0x0
14:38:09: Time Access 1 TAAC                            :0xe
14:38:09: Time Access 2 NSAC*100                        :0x0
14:38:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:09: Card Command Classess CCC                     :0x5b5
14:38:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:09: DSR(driver stage register)  DSR_IMP           :0x0
14:38:09: Reserv2                                       :0x0
14:38:09: Device Size C_SIZE                            :0xedc8
14:38:09: Reserv3                                       :0x0
14:38:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:09: Reserv4                                       :0x0
14:38:09: Write Speed Factor R2W_FACTOR                 :0x2
14:38:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:09: FILE_FORMAT_GRP                               :0x0
14:38:09: COPY flag                                     :0x1
14:38:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:09: File_Format                                   :0x0
14:38:09: CRC                                           :0x0
14:38:09: ####CSD Registe Values####  

14:38:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:09: [GetSCRRegisterEntry] Passed
14:38:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:09: Data_Status_After Erases          : 0
14:38:09: CPRM Security Support             : No Security
14:38:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:09: Spec. Version                     : Version 3.0X
14:38:09: Extended Security Support         : Extended_Security_Not_Supported
14:38:09: Command Support                   : COMMAND_SUPPORT
14:38:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F870>, <py_sfcl.CommandDataDefinition object at 0x06132B70>) , Command count = 3548 ] 
14:38:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x06138660>) , Command count = 3549 ] 
14:38:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:09: [ SetBusWidth(0x4) , Command count = 3550 ] 
14:38:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3551 ] 
14:38:09: Protected Area Size 0x28000
14:38:09: Bus Width           2
14:38:09: Secure Mode         0
14:38:09: Speed  Class        4
14:38:09: Perf Move           0
14:38:09: Au Size             9
14:38:09: Erase Size          15
14:38:09: Erase Timeout       1
14:38:09: Erase offset        1
14:38:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3552 ] 
14:38:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:09: Host Frequency set to 100000 KHz
14:38:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:09: ####CSD Registe 2.0 Values####
14:38:09: CSD_STRUCTURE                                 :0x1
14:38:09: Reserv1                                       :0x0
14:38:09: Time Access 1 TAAC                            :0xe
14:38:09: Time Access 2 NSAC*100                        :0x0
14:38:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:09: Card Command Classess CCC                     :0x5b5
14:38:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:09: DSR(driver stage register)  DSR_IMP           :0x0
14:38:09: Reserv2                                       :0x0
14:38:09: Device Size C_SIZE                            :0xedc8
14:38:09: Reserv3                                       :0x0
14:38:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:09: Reserv4                                       :0x0
14:38:09: Write Speed Factor R2W_FACTOR                 :0x2
14:38:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:09: FILE_FORMAT_GRP                               :0x0
14:38:09: COPY flag                                     :0x1
14:38:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:09: File_Format                                   :0x0
14:38:09: CRC                                           :0x0
14:38:09: ####CSD Registe Values####  

14:38:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E810>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 3553 ] 
14:38:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 3554 ] 
14:38:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E6B8 to EndLba:0x3B6E738 with One's Pattern
14:38:09: [ WrLbaNoData(0x3B6E6B8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3555 ] 
14:38:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E6B8 to EndLba:0x3B6E738 with One's Pattern 

14:38:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E738 to EndLba:0x3B6E7B8 with One's Pattern
14:38:09: [ WrLbaNoData(0x3B6E738, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3556 ] 
14:38:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E738 to EndLba:0x3B6E7B8 with One's Pattern 

14:38:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2321B to EndLba:0x250AD with Constant Pattern
14:38:10: [ RdLbaNoData(0x2321B, 0x1E92, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3557 ] 
14:38:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2321B to EndLba:0x250AD with Constant Pattern 

14:38:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3911
14:38:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132ED0>, <py_sfcl.PySEnhancedCmdData object at 0x06132810>, <None>) , Command count = 3558 ] 
14:38:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:12: Host Frequency set to 25000 KHz
14:38:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138270>, 0x0, True) , Command count = 3559 ] 
14:38:12: [GO18_globalSetVolt]### Host voltage value is set.
14:38:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FDB0>, 0x0, False) , Command count = 3560 ] 
14:38:12: [GO18_globalSetVolt]### Host voltage value is set.
14:38:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3561 ] 
14:38:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3562 ] 
14:38:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3563 ] 
14:38:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06138F30>) , Command count = 3564 ] 
14:38:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132360>, <py_sfcl.CommandDataDefinition object at 0x061321E0>) , Command count = 3565 ] 
14:38:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:12: [ SetCardRCA(0x1, 0xD555) , Command count = 3566 ] 
14:38:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:12: Host Frequency set to 25000 KHz
14:38:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:12: ####CSD Registe 2.0 Values####
14:38:12: CSD_STRUCTURE                                 :0x1
14:38:12: Reserv1                                       :0x0
14:38:12: Time Access 1 TAAC                            :0xe
14:38:12: Time Access 2 NSAC*100                        :0x0
14:38:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:12: Card Command Classess CCC                     :0x5b5
14:38:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:12: DSR(driver stage register)  DSR_IMP           :0x0
14:38:12: Reserv2                                       :0x0
14:38:12: Device Size C_SIZE                            :0xedc8
14:38:12: Reserv3                                       :0x0
14:38:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:12: Reserv4                                       :0x0
14:38:12: Write Speed Factor R2W_FACTOR                 :0x2
14:38:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:12: FILE_FORMAT_GRP                               :0x0
14:38:12: COPY flag                                     :0x1
14:38:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:12: File_Format                                   :0x0
14:38:12: CRC                                           :0x0
14:38:12: ####CSD Registe Values####  

14:38:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:12: [GetSCRRegisterEntry] Passed
14:38:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:12: Data_Status_After Erases          : 0
14:38:12: CPRM Security Support             : No Security
14:38:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:12: Spec. Version                     : Version 3.0X
14:38:12: Extended Security Support         : Extended_Security_Not_Supported
14:38:12: Command Support                   : COMMAND_SUPPORT
14:38:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138030>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 3567 ] 
14:38:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06132DE0>) , Command count = 3568 ] 
14:38:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:12: [ SetBusWidth(0x4) , Command count = 3569 ] 
14:38:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3570 ] 
14:38:12: Protected Area Size 0x28000
14:38:12: Bus Width           2
14:38:12: Secure Mode         0
14:38:12: Speed  Class        4
14:38:12: Perf Move           0
14:38:12: Au Size             9
14:38:12: Erase Size          15
14:38:12: Erase Timeout       1
14:38:12: Erase offset        1
14:38:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3571 ] 
14:38:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:12: Host Frequency set to 100000 KHz
14:38:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:12: ####CSD Registe 2.0 Values####
14:38:12: CSD_STRUCTURE                                 :0x1
14:38:12: Reserv1                                       :0x0
14:38:12: Time Access 1 TAAC                            :0xe
14:38:12: Time Access 2 NSAC*100                        :0x0
14:38:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:12: Card Command Classess CCC                     :0x5b5
14:38:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:12: DSR(driver stage register)  DSR_IMP           :0x0
14:38:12: Reserv2                                       :0x0
14:38:12: Device Size C_SIZE                            :0xedc8
14:38:12: Reserv3                                       :0x0
14:38:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:13: Reserv4                                       :0x0
14:38:13: Write Speed Factor R2W_FACTOR                 :0x2
14:38:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:13: FILE_FORMAT_GRP                               :0x0
14:38:13: COPY flag                                     :0x1
14:38:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:13: File_Format                                   :0x0
14:38:13: CRC                                           :0x0
14:38:13: ####CSD Registe Values####  

14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138420>, <py_sfcl.CommandDataDefinition object at 0x06138060>) , Command count = 3572 ] 
14:38:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 3573 ] 
14:38:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71907 to EndLba:0x3B71987 with One's Pattern
14:38:13: [ WrLbaNoData(0x3B71907, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3574 ] 
14:38:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71907 to EndLba:0x3B71987 with One's Pattern 

14:38:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71987 to EndLba:0x3B71A07 with One's Pattern
14:38:13: [ WrLbaNoData(0x3B71987, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3575 ] 
14:38:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71987 to EndLba:0x3B71A07 with One's Pattern 

14:38:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2321B to EndLba:0x250AB with Constant Pattern
14:38:13: [ RdLbaNoData(0x2321B, 0x1E90, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3576 ] 
14:38:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2321B to EndLba:0x250AB with Constant Pattern 

14:38:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3910
14:38:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138180>, <py_sfcl.PySEnhancedCmdData object at 0x06138210>, <None>) , Command count = 3577 ] 
14:38:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:15: Host Frequency set to 25000 KHz
14:38:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132210>, 0x0, True) , Command count = 3578 ] 
14:38:15: [GO18_globalSetVolt]### Host voltage value is set.
14:38:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129B70>, 0x0, False) , Command count = 3579 ] 
14:38:15: [GO18_globalSetVolt]### Host voltage value is set.
14:38:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3580 ] 
14:38:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3581 ] 
14:38:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3582 ] 
14:38:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 3583 ] 
14:38:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A50>, <py_sfcl.CommandDataDefinition object at 0x061383F0>) , Command count = 3584 ] 
14:38:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:15: [ SetCardRCA(0x1, 0xD555) , Command count = 3585 ] 
14:38:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:16: Host Frequency set to 25000 KHz
14:38:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:16: ####CSD Registe 2.0 Values####
14:38:16: CSD_STRUCTURE                                 :0x1
14:38:16: Reserv1                                       :0x0
14:38:16: Time Access 1 TAAC                            :0xe
14:38:16: Time Access 2 NSAC*100                        :0x0
14:38:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:16: Card Command Classess CCC                     :0x5b5
14:38:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:16: DSR(driver stage register)  DSR_IMP           :0x0
14:38:16: Reserv2                                       :0x0
14:38:16: Device Size C_SIZE                            :0xedc8
14:38:16: Reserv3                                       :0x0
14:38:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:16: Reserv4                                       :0x0
14:38:16: Write Speed Factor R2W_FACTOR                 :0x2
14:38:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:16: FILE_FORMAT_GRP                               :0x0
14:38:16: COPY flag                                     :0x1
14:38:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:16: File_Format                                   :0x0
14:38:16: CRC                                           :0x0
14:38:16: ####CSD Registe Values####  

14:38:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:16: [GetSCRRegisterEntry] Passed
14:38:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:16: Data_Status_After Erases          : 0
14:38:16: CPRM Security Support             : No Security
14:38:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:16: Spec. Version                     : Version 3.0X
14:38:16: Extended Security Support         : Extended_Security_Not_Supported
14:38:16: Command Support                   : COMMAND_SUPPORT
14:38:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9C0>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 3586 ] 
14:38:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06138AE0>) , Command count = 3587 ] 
14:38:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:16: [ SetBusWidth(0x4) , Command count = 3588 ] 
14:38:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3589 ] 
14:38:16: Protected Area Size 0x28000
14:38:16: Bus Width           2
14:38:16: Secure Mode         0
14:38:16: Speed  Class        4
14:38:16: Perf Move           0
14:38:16: Au Size             9
14:38:16: Erase Size          15
14:38:16: Erase Timeout       1
14:38:16: Erase offset        1
14:38:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3590 ] 
14:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:16: Host Frequency set to 100000 KHz
14:38:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:16: ####CSD Registe 2.0 Values####
14:38:16: CSD_STRUCTURE                                 :0x1
14:38:16: Reserv1                                       :0x0
14:38:16: Time Access 1 TAAC                            :0xe
14:38:16: Time Access 2 NSAC*100                        :0x0
14:38:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:16: Card Command Classess CCC                     :0x5b5
14:38:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:16: DSR(driver stage register)  DSR_IMP           :0x0
14:38:16: Reserv2                                       :0x0
14:38:16: Device Size C_SIZE                            :0xedc8
14:38:16: Reserv3                                       :0x0
14:38:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:16: Reserv4                                       :0x0
14:38:16: Write Speed Factor R2W_FACTOR                 :0x2
14:38:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:16: FILE_FORMAT_GRP                               :0x0
14:38:16: COPY flag                                     :0x1
14:38:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:16: File_Format                                   :0x0
14:38:16: CRC                                           :0x0
14:38:16: ####CSD Registe Values####  

14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F270>, <py_sfcl.CommandDataDefinition object at 0x0613F960>) , Command count = 3591 ] 
14:38:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132EA0>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 3592 ] 
14:38:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7188F to EndLba:0x3B7190F with One's Pattern
14:38:16: [ WrLbaNoData(0x3B7188F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3593 ] 
14:38:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7188F to EndLba:0x3B7190F with One's Pattern 

14:38:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7190F to EndLba:0x3B7198F with One's Pattern
14:38:16: [ WrLbaNoData(0x3B7190F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3594 ] 
14:38:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7190F to EndLba:0x3B7198F with One's Pattern 

14:38:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2321D to EndLba:0x250AB with Constant Pattern
14:38:16: [ RdLbaNoData(0x2321D, 0x1E8E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3595 ] 
14:38:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2321D to EndLba:0x250AB with Constant Pattern 

14:38:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3909
14:38:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061388A0>, <py_sfcl.PySEnhancedCmdData object at 0x061386C0>, <None>) , Command count = 3596 ] 
14:38:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:18: Host Frequency set to 25000 KHz
14:38:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132B40>, 0x0, True) , Command count = 3597 ] 
14:38:18: [GO18_globalSetVolt]### Host voltage value is set.
14:38:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x061324E0>, 0x0, False) , Command count = 3598 ] 
14:38:18: [GO18_globalSetVolt]### Host voltage value is set.
14:38:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3599 ] 
14:38:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3600 ] 
14:38:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3601 ] 
14:38:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x061387B0>) , Command count = 3602 ] 
14:38:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x06138390>) , Command count = 3603 ] 
14:38:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:19: [ SetCardRCA(0x1, 0xD555) , Command count = 3604 ] 
14:38:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:19: Host Frequency set to 25000 KHz
14:38:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:19: ####CSD Registe 2.0 Values####
14:38:19: CSD_STRUCTURE                                 :0x1
14:38:19: Reserv1                                       :0x0
14:38:19: Time Access 1 TAAC                            :0xe
14:38:19: Time Access 2 NSAC*100                        :0x0
14:38:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:19: Card Command Classess CCC                     :0x5b5
14:38:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:19: DSR(driver stage register)  DSR_IMP           :0x0
14:38:19: Reserv2                                       :0x0
14:38:19: Device Size C_SIZE                            :0xedc8
14:38:19: Reserv3                                       :0x0
14:38:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:19: Reserv4                                       :0x0
14:38:19: Write Speed Factor R2W_FACTOR                 :0x2
14:38:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:19: FILE_FORMAT_GRP                               :0x0
14:38:19: COPY flag                                     :0x1
14:38:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:19: File_Format                                   :0x0
14:38:19: CRC                                           :0x0
14:38:19: ####CSD Registe Values####  

14:38:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:19: [GetSCRRegisterEntry] Passed
14:38:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:19: Data_Status_After Erases          : 0
14:38:19: CPRM Security Support             : No Security
14:38:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:19: Spec. Version                     : Version 3.0X
14:38:19: Extended Security Support         : Extended_Security_Not_Supported
14:38:19: Command Support                   : COMMAND_SUPPORT
14:38:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F630>, <py_sfcl.CommandDataDefinition object at 0x06138090>) , Command count = 3605 ] 
14:38:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 3606 ] 
14:38:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:19: [ SetBusWidth(0x4) , Command count = 3607 ] 
14:38:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3608 ] 
14:38:19: Protected Area Size 0x28000
14:38:19: Bus Width           2
14:38:19: Secure Mode         0
14:38:19: Speed  Class        4
14:38:19: Perf Move           0
14:38:19: Au Size             9
14:38:19: Erase Size          15
14:38:19: Erase Timeout       1
14:38:19: Erase offset        1
14:38:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3609 ] 
14:38:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:19: Host Frequency set to 100000 KHz
14:38:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:19: ####CSD Registe 2.0 Values####
14:38:19: CSD_STRUCTURE                                 :0x1
14:38:19: Reserv1                                       :0x0
14:38:19: Time Access 1 TAAC                            :0xe
14:38:19: Time Access 2 NSAC*100                        :0x0
14:38:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:19: Card Command Classess CCC                     :0x5b5
14:38:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:19: DSR(driver stage register)  DSR_IMP           :0x0
14:38:19: Reserv2                                       :0x0
14:38:19: Device Size C_SIZE                            :0xedc8
14:38:19: Reserv3                                       :0x0
14:38:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:19: Reserv4                                       :0x0
14:38:19: Write Speed Factor R2W_FACTOR                 :0x2
14:38:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:19: FILE_FORMAT_GRP                               :0x0
14:38:19: COPY flag                                     :0x1
14:38:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:20: File_Format                                   :0x0
14:38:20: CRC                                           :0x0
14:38:20: ####CSD Registe Values####  

14:38:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF270>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 3610 ] 
14:38:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 3611 ] 
14:38:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DA5F to EndLba:0x3B6DADF with One's Pattern
14:38:20: [ WrLbaNoData(0x3B6DA5F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3612 ] 
14:38:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DA5F to EndLba:0x3B6DADF with One's Pattern 

14:38:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DADF to EndLba:0x3B6DB5F with One's Pattern
14:38:20: [ WrLbaNoData(0x3B6DADF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3613 ] 
14:38:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DADF to EndLba:0x3B6DB5F with One's Pattern 

14:38:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2321D to EndLba:0x250A9 with Constant Pattern
14:38:20: [ RdLbaNoData(0x2321D, 0x1E8C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3614 ] 
14:38:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2321D to EndLba:0x250A9 with Constant Pattern 

14:38:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3908
14:38:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052577E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138930>, <py_sfcl.PySEnhancedCmdData object at 0x06138E40>, <None>) , Command count = 3615 ] 
14:38:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:22: Host Frequency set to 25000 KHz
14:38:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132300>, 0x0, True) , Command count = 3616 ] 
14:38:22: [GO18_globalSetVolt]### Host voltage value is set.
14:38:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C30>, 0x0, False) , Command count = 3617 ] 
14:38:22: [GO18_globalSetVolt]### Host voltage value is set.
14:38:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3618 ] 
14:38:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3619 ] 
14:38:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3620 ] 
14:38:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x06138810>) , Command count = 3621 ] 
14:38:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3AE0>, <py_sfcl.CommandDataDefinition object at 0x06138330>) , Command count = 3622 ] 
14:38:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:22: [ SetCardRCA(0x1, 0xD555) , Command count = 3623 ] 
14:38:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:22: Host Frequency set to 25000 KHz
14:38:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:22: ####CSD Registe 2.0 Values####
14:38:22: CSD_STRUCTURE                                 :0x1
14:38:22: Reserv1                                       :0x0
14:38:22: Time Access 1 TAAC                            :0xe
14:38:22: Time Access 2 NSAC*100                        :0x0
14:38:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:22: Card Command Classess CCC                     :0x5b5
14:38:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:22: DSR(driver stage register)  DSR_IMP           :0x0
14:38:22: Reserv2                                       :0x0
14:38:22: Device Size C_SIZE                            :0xedc8
14:38:22: Reserv3                                       :0x0
14:38:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:22: Reserv4                                       :0x0
14:38:22: Write Speed Factor R2W_FACTOR                 :0x2
14:38:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:22: FILE_FORMAT_GRP                               :0x0
14:38:22: COPY flag                                     :0x1
14:38:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:22: File_Format                                   :0x0
14:38:22: CRC                                           :0x0
14:38:22: ####CSD Registe Values####  

14:38:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:22: [GetSCRRegisterEntry] Passed
14:38:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:22: Data_Status_After Erases          : 0
14:38:22: CPRM Security Support             : No Security
14:38:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:22: Spec. Version                     : Version 3.0X
14:38:22: Extended Security Support         : Extended_Security_Not_Supported
14:38:22: Command Support                   : COMMAND_SUPPORT
14:38:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF240>, <py_sfcl.CommandDataDefinition object at 0x06138F60>) , Command count = 3624 ] 
14:38:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF60>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 3625 ] 
14:38:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:22: [ SetBusWidth(0x4) , Command count = 3626 ] 
14:38:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F0F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3627 ] 
14:38:22: Protected Area Size 0x28000
14:38:22: Bus Width           2
14:38:22: Secure Mode         0
14:38:22: Speed  Class        4
14:38:22: Perf Move           0
14:38:22: Au Size             9
14:38:22: Erase Size          15
14:38:22: Erase Timeout       1
14:38:22: Erase offset        1
14:38:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3628 ] 
14:38:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:22: Host Frequency set to 100000 KHz
14:38:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:22: ####CSD Registe 2.0 Values####
14:38:22: CSD_STRUCTURE                                 :0x1
14:38:23: Reserv1                                       :0x0
14:38:23: Time Access 1 TAAC                            :0xe
14:38:23: Time Access 2 NSAC*100                        :0x0
14:38:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:23: Card Command Classess CCC                     :0x5b5
14:38:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:23: DSR(driver stage register)  DSR_IMP           :0x0
14:38:23: Reserv2                                       :0x0
14:38:23: Device Size C_SIZE                            :0xedc8
14:38:23: Reserv3                                       :0x0
14:38:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:23: Reserv4                                       :0x0
14:38:23: Write Speed Factor R2W_FACTOR                 :0x2
14:38:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:23: FILE_FORMAT_GRP                               :0x0
14:38:23: COPY flag                                     :0x1
14:38:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:23: File_Format                                   :0x0
14:38:23: CRC                                           :0x0
14:38:23: ####CSD Registe Values####  

14:38:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F660>, <py_sfcl.CommandDataDefinition object at 0x052AFC60>) , Command count = 3629 ] 
14:38:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EED0>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 3630 ] 
14:38:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71EE0 to EndLba:0x3B71F60 with One's Pattern
14:38:23: [ WrLbaNoData(0x3B71EE0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3631 ] 
14:38:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71EE0 to EndLba:0x3B71F60 with One's Pattern 

14:38:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71F60 to EndLba:0x3B71FE0 with One's Pattern
14:38:23: [ WrLbaNoData(0x3B71F60, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3632 ] 
14:38:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71F60 to EndLba:0x3B71FE0 with One's Pattern 

14:38:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2321F to EndLba:0x250A9 with Constant Pattern
14:38:23: [ RdLbaNoData(0x2321F, 0x1E8A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3633 ] 
14:38:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2321F to EndLba:0x250A9 with Constant Pattern 

14:38:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3907
14:38:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0518AE70>, <py_sfcl.PySEnhancedCmdData object at 0x0613F480>, <None>) , Command count = 3634 ] 
14:38:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:25: Host Frequency set to 25000 KHz
14:38:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FB70>, 0x0, True) , Command count = 3635 ] 
14:38:25: [GO18_globalSetVolt]### Host voltage value is set.
14:38:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0529EE40>, 0x0, False) , Command count = 3636 ] 
14:38:25: [GO18_globalSetVolt]### Host voltage value is set.
14:38:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3637 ] 
14:38:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3638 ] 
14:38:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3639 ] 
14:38:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613FF30>) , Command count = 3640 ] 
14:38:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132600>, <py_sfcl.CommandDataDefinition object at 0x0613FAE0>) , Command count = 3641 ] 
14:38:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:26: [ SetCardRCA(0x1, 0xD555) , Command count = 3642 ] 
14:38:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:26: Host Frequency set to 25000 KHz
14:38:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:26: ####CSD Registe 2.0 Values####
14:38:26: CSD_STRUCTURE                                 :0x1
14:38:26: Reserv1                                       :0x0
14:38:26: Time Access 1 TAAC                            :0xe
14:38:26: Time Access 2 NSAC*100                        :0x0
14:38:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:26: Card Command Classess CCC                     :0x5b5
14:38:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:26: DSR(driver stage register)  DSR_IMP           :0x0
14:38:26: Reserv2                                       :0x0
14:38:26: Device Size C_SIZE                            :0xedc8
14:38:26: Reserv3                                       :0x0
14:38:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:26: Reserv4                                       :0x0
14:38:26: Write Speed Factor R2W_FACTOR                 :0x2
14:38:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:26: FILE_FORMAT_GRP                               :0x0
14:38:26: COPY flag                                     :0x1
14:38:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:26: File_Format                                   :0x0
14:38:26: CRC                                           :0x0
14:38:26: ####CSD Registe Values####  

14:38:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:26: [GetSCRRegisterEntry] Passed
14:38:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:26: Data_Status_After Erases          : 0
14:38:26: CPRM Security Support             : No Security
14:38:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:26: Spec. Version                     : Version 3.0X
14:38:26: Extended Security Support         : Extended_Security_Not_Supported
14:38:26: Command Support                   : COMMAND_SUPPORT
14:38:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB4E0>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 3643 ] 
14:38:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x0611C1E0>) , Command count = 3644 ] 
14:38:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:26: [ SetBusWidth(0x4) , Command count = 3645 ] 
14:38:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F6F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3646 ] 
14:38:26: Protected Area Size 0x28000
14:38:26: Bus Width           2
14:38:26: Secure Mode         0
14:38:26: Speed  Class        4
14:38:26: Perf Move           0
14:38:26: Au Size             9
14:38:26: Erase Size          15
14:38:26: Erase Timeout       1
14:38:26: Erase offset        1
14:38:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3647 ] 
14:38:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:26: Host Frequency set to 100000 KHz
14:38:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:26: ####CSD Registe 2.0 Values####
14:38:26: CSD_STRUCTURE                                 :0x1
14:38:26: Reserv1                                       :0x0
14:38:26: Time Access 1 TAAC                            :0xe
14:38:26: Time Access 2 NSAC*100                        :0x0
14:38:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:26: Card Command Classess CCC                     :0x5b5
14:38:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:26: DSR(driver stage register)  DSR_IMP           :0x0
14:38:26: Reserv2                                       :0x0
14:38:26: Device Size C_SIZE                            :0xedc8
14:38:26: Reserv3                                       :0x0
14:38:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:26: Reserv4                                       :0x0
14:38:26: Write Speed Factor R2W_FACTOR                 :0x2
14:38:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:26: FILE_FORMAT_GRP                               :0x0
14:38:26: COPY flag                                     :0x1
14:38:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:26: File_Format                                   :0x0
14:38:26: CRC                                           :0x0
14:38:26: ####CSD Registe Values####  

14:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529B4B0>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 3648 ] 
14:38:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB40>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 3649 ] 
14:38:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B721E3 to EndLba:0x3B72263 with One's Pattern
14:38:26: [ WrLbaNoData(0x3B721E3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3650 ] 
14:38:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B721E3 to EndLba:0x3B72263 with One's Pattern 

14:38:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72263 to EndLba:0x3B722E3 with One's Pattern
14:38:26: [ WrLbaNoData(0x3B72263, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3651 ] 
14:38:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72263 to EndLba:0x3B722E3 with One's Pattern 

14:38:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2321F to EndLba:0x250A7 with Constant Pattern
14:38:26: [ RdLbaNoData(0x2321F, 0x1E88, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3652 ] 
14:38:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2321F to EndLba:0x250A7 with Constant Pattern 

14:38:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3906
14:38:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C570>, <py_sfcl.PySEnhancedCmdData object at 0x0611C3F0>, <None>) , Command count = 3653 ] 
14:38:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:29: Host Frequency set to 25000 KHz
14:38:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0525E180>, 0x0, True) , Command count = 3654 ] 
14:38:29: [GO18_globalSetVolt]### Host voltage value is set.
14:38:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1DE0>, 0x0, False) , Command count = 3655 ] 
14:38:29: [GO18_globalSetVolt]### Host voltage value is set.
14:38:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3656 ] 
14:38:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3657 ] 
14:38:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3658 ] 
14:38:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0613F4E0>) , Command count = 3659 ] 
14:38:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA20>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 3660 ] 
14:38:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:29: [ SetCardRCA(0x1, 0xD555) , Command count = 3661 ] 
14:38:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:29: Host Frequency set to 25000 KHz
14:38:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:29: ####CSD Registe 2.0 Values####
14:38:29: CSD_STRUCTURE                                 :0x1
14:38:29: Reserv1                                       :0x0
14:38:29: Time Access 1 TAAC                            :0xe
14:38:29: Time Access 2 NSAC*100                        :0x0
14:38:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:29: Card Command Classess CCC                     :0x5b5
14:38:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:29: DSR(driver stage register)  DSR_IMP           :0x0
14:38:29: Reserv2                                       :0x0
14:38:29: Device Size C_SIZE                            :0xedc8
14:38:29: Reserv3                                       :0x0
14:38:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:29: Reserv4                                       :0x0
14:38:29: Write Speed Factor R2W_FACTOR                 :0x2
14:38:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:29: FILE_FORMAT_GRP                               :0x0
14:38:29: COPY flag                                     :0x1
14:38:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:29: File_Format                                   :0x0
14:38:29: CRC                                           :0x0
14:38:29: ####CSD Registe Values####  

14:38:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:29: [GetSCRRegisterEntry] Passed
14:38:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:29: Data_Status_After Erases          : 0
14:38:29: CPRM Security Support             : No Security
14:38:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:29: Spec. Version                     : Version 3.0X
14:38:29: Extended Security Support         : Extended_Security_Not_Supported
14:38:29: Command Support                   : COMMAND_SUPPORT
14:38:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F990>, <py_sfcl.CommandDataDefinition object at 0x060E3E40>) , Command count = 3662 ] 
14:38:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F00>, <py_sfcl.CommandDataDefinition object at 0x0611C240>) , Command count = 3663 ] 
14:38:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:29: [ SetBusWidth(0x4) , Command count = 3664 ] 
14:38:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CC30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3665 ] 
14:38:29: Protected Area Size 0x28000
14:38:29: Bus Width           2
14:38:29: Secure Mode         0
14:38:29: Speed  Class        4
14:38:29: Perf Move           0
14:38:29: Au Size             9
14:38:29: Erase Size          15
14:38:29: Erase Timeout       1
14:38:29: Erase offset        1
14:38:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3666 ] 
14:38:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:29: Host Frequency set to 100000 KHz
14:38:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:29: ####CSD Registe 2.0 Values####
14:38:29: CSD_STRUCTURE                                 :0x1
14:38:29: Reserv1                                       :0x0
14:38:29: Time Access 1 TAAC                            :0xe
14:38:29: Time Access 2 NSAC*100                        :0x0
14:38:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:29: Card Command Classess CCC                     :0x5b5
14:38:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:29: DSR(driver stage register)  DSR_IMP           :0x0
14:38:29: Reserv2                                       :0x0
14:38:29: Device Size C_SIZE                            :0xedc8
14:38:29: Reserv3                                       :0x0
14:38:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:30: Reserv4                                       :0x0
14:38:30: Write Speed Factor R2W_FACTOR                 :0x2
14:38:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:30: FILE_FORMAT_GRP                               :0x0
14:38:30: COPY flag                                     :0x1
14:38:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:30: File_Format                                   :0x0
14:38:30: CRC                                           :0x0
14:38:30: ####CSD Registe Values####  

14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F300>, <py_sfcl.CommandDataDefinition object at 0x0606F030>) , Command count = 3667 ] 
14:38:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129990>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 3668 ] 
14:38:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B711CD to EndLba:0x3B7124D with One's Pattern
14:38:30: [ WrLbaNoData(0x3B711CD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3669 ] 
14:38:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B711CD to EndLba:0x3B7124D with One's Pattern 

14:38:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7124D to EndLba:0x3B712CD with One's Pattern
14:38:30: [ WrLbaNoData(0x3B7124D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3670 ] 
14:38:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7124D to EndLba:0x3B712CD with One's Pattern 

14:38:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23221 to EndLba:0x250A7 with Constant Pattern
14:38:30: [ RdLbaNoData(0x23221, 0x1E86, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3671 ] 
14:38:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23221 to EndLba:0x250A7 with Constant Pattern 

14:38:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3905
14:38:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C810>, <py_sfcl.PySEnhancedCmdData object at 0x0611C870>, <None>) , Command count = 3672 ] 
14:38:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:32: Host Frequency set to 25000 KHz
14:38:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FB10>, 0x0, True) , Command count = 3673 ] 
14:38:32: [GO18_globalSetVolt]### Host voltage value is set.
14:38:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F660>, 0x0, False) , Command count = 3674 ] 
14:38:32: [GO18_globalSetVolt]### Host voltage value is set.
14:38:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3675 ] 
14:38:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3676 ] 
14:38:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3677 ] 
14:38:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA80>, <py_sfcl.CommandDataDefinition object at 0x0606F7E0>) , Command count = 3678 ] 
14:38:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129060>, <py_sfcl.CommandDataDefinition object at 0x0611CAE0>) , Command count = 3679 ] 
14:38:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:32: [ SetCardRCA(0x1, 0xD555) , Command count = 3680 ] 
14:38:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:33: Host Frequency set to 25000 KHz
14:38:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:33: ####CSD Registe 2.0 Values####
14:38:33: CSD_STRUCTURE                                 :0x1
14:38:33: Reserv1                                       :0x0
14:38:33: Time Access 1 TAAC                            :0xe
14:38:33: Time Access 2 NSAC*100                        :0x0
14:38:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:33: Card Command Classess CCC                     :0x5b5
14:38:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:33: DSR(driver stage register)  DSR_IMP           :0x0
14:38:33: Reserv2                                       :0x0
14:38:33: Device Size C_SIZE                            :0xedc8
14:38:33: Reserv3                                       :0x0
14:38:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:33: Reserv4                                       :0x0
14:38:33: Write Speed Factor R2W_FACTOR                 :0x2
14:38:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:33: FILE_FORMAT_GRP                               :0x0
14:38:33: COPY flag                                     :0x1
14:38:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:33: File_Format                                   :0x0
14:38:33: CRC                                           :0x0
14:38:33: ####CSD Registe Values####  

14:38:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:33: [GetSCRRegisterEntry] Passed
14:38:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:33: Data_Status_After Erases          : 0
14:38:33: CPRM Security Support             : No Security
14:38:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:33: Spec. Version                     : Version 3.0X
14:38:33: Extended Security Support         : Extended_Security_Not_Supported
14:38:33: Command Support                   : COMMAND_SUPPORT
14:38:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CFC0>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 3681 ] 
14:38:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1B0>, <py_sfcl.CommandDataDefinition object at 0x0611CBA0>) , Command count = 3682 ] 
14:38:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:33: [ SetBusWidth(0x4) , Command count = 3683 ] 
14:38:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3684 ] 
14:38:33: Protected Area Size 0x28000
14:38:33: Bus Width           2
14:38:33: Secure Mode         0
14:38:33: Speed  Class        4
14:38:33: Perf Move           0
14:38:33: Au Size             9
14:38:33: Erase Size          15
14:38:33: Erase Timeout       1
14:38:33: Erase offset        1
14:38:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3685 ] 
14:38:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:33: Host Frequency set to 100000 KHz
14:38:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:33: ####CSD Registe 2.0 Values####
14:38:33: CSD_STRUCTURE                                 :0x1
14:38:33: Reserv1                                       :0x0
14:38:33: Time Access 1 TAAC                            :0xe
14:38:33: Time Access 2 NSAC*100                        :0x0
14:38:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:33: Card Command Classess CCC                     :0x5b5
14:38:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:33: DSR(driver stage register)  DSR_IMP           :0x0
14:38:33: Reserv2                                       :0x0
14:38:33: Device Size C_SIZE                            :0xedc8
14:38:33: Reserv3                                       :0x0
14:38:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:33: Reserv4                                       :0x0
14:38:33: Write Speed Factor R2W_FACTOR                 :0x2
14:38:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:33: FILE_FORMAT_GRP                               :0x0
14:38:33: COPY flag                                     :0x1
14:38:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:33: File_Format                                   :0x0
14:38:33: CRC                                           :0x0
14:38:33: ####CSD Registe Values####  

14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C0C0>, <py_sfcl.CommandDataDefinition object at 0x0611CF90>) , Command count = 3686 ] 
14:38:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x060E3750>) , Command count = 3687 ] 
14:38:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E0AD to EndLba:0x3B6E12D with One's Pattern
14:38:33: [ WrLbaNoData(0x3B6E0AD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3688 ] 
14:38:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E0AD to EndLba:0x3B6E12D with One's Pattern 

14:38:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E12D to EndLba:0x3B6E1AD with One's Pattern
14:38:33: [ WrLbaNoData(0x3B6E12D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3689 ] 
14:38:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E12D to EndLba:0x3B6E1AD with One's Pattern 

14:38:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23221 to EndLba:0x250A5 with Constant Pattern
14:38:33: [ RdLbaNoData(0x23221, 0x1E84, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3690 ] 
14:38:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23221 to EndLba:0x250A5 with Constant Pattern 

14:38:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3904
14:38:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C480>, <py_sfcl.PySEnhancedCmdData object at 0x0611C090>, <None>) , Command count = 3691 ] 
14:38:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:35: Host Frequency set to 25000 KHz
14:38:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E37B0>, 0x0, True) , Command count = 3692 ] 
14:38:35: [GO18_globalSetVolt]### Host voltage value is set.
14:38:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FE40>, 0x0, False) , Command count = 3693 ] 
14:38:36: [GO18_globalSetVolt]### Host voltage value is set.
14:38:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3694 ] 
14:38:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3695 ] 
14:38:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3696 ] 
14:38:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0C0>, <py_sfcl.CommandDataDefinition object at 0x06129240>) , Command count = 3697 ] 
14:38:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3570>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 3698 ] 
14:38:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:36: [ SetCardRCA(0x1, 0xD555) , Command count = 3699 ] 
14:38:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:36: Host Frequency set to 25000 KHz
14:38:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:36: ####CSD Registe 2.0 Values####
14:38:36: CSD_STRUCTURE                                 :0x1
14:38:36: Reserv1                                       :0x0
14:38:36: Time Access 1 TAAC                            :0xe
14:38:36: Time Access 2 NSAC*100                        :0x0
14:38:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:36: Card Command Classess CCC                     :0x5b5
14:38:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:36: DSR(driver stage register)  DSR_IMP           :0x0
14:38:36: Reserv2                                       :0x0
14:38:36: Device Size C_SIZE                            :0xedc8
14:38:36: Reserv3                                       :0x0
14:38:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:36: Reserv4                                       :0x0
14:38:36: Write Speed Factor R2W_FACTOR                 :0x2
14:38:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:36: FILE_FORMAT_GRP                               :0x0
14:38:36: COPY flag                                     :0x1
14:38:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:36: File_Format                                   :0x0
14:38:36: CRC                                           :0x0
14:38:36: ####CSD Registe Values####  

14:38:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:36: [GetSCRRegisterEntry] Passed
14:38:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:36: Data_Status_After Erases          : 0
14:38:36: CPRM Security Support             : No Security
14:38:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:36: Spec. Version                     : Version 3.0X
14:38:36: Extended Security Support         : Extended_Security_Not_Supported
14:38:36: Command Support                   : COMMAND_SUPPORT
14:38:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BA0>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 3700 ] 
14:38:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7B0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 3701 ] 
14:38:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:36: [ SetBusWidth(0x4) , Command count = 3702 ] 
14:38:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3703 ] 
14:38:36: Protected Area Size 0x28000
14:38:36: Bus Width           2
14:38:36: Secure Mode         0
14:38:36: Speed  Class        4
14:38:36: Perf Move           0
14:38:36: Au Size             9
14:38:36: Erase Size          15
14:38:36: Erase Timeout       1
14:38:36: Erase offset        1
14:38:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3704 ] 
14:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:36: Host Frequency set to 100000 KHz
14:38:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:36: ####CSD Registe 2.0 Values####
14:38:36: CSD_STRUCTURE                                 :0x1
14:38:36: Reserv1                                       :0x0
14:38:36: Time Access 1 TAAC                            :0xe
14:38:36: Time Access 2 NSAC*100                        :0x0
14:38:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:36: Card Command Classess CCC                     :0x5b5
14:38:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:36: DSR(driver stage register)  DSR_IMP           :0x0
14:38:36: Reserv2                                       :0x0
14:38:36: Device Size C_SIZE                            :0xedc8
14:38:36: Reserv3                                       :0x0
14:38:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:36: Reserv4                                       :0x0
14:38:36: Write Speed Factor R2W_FACTOR                 :0x2
14:38:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:36: FILE_FORMAT_GRP                               :0x0
14:38:36: COPY flag                                     :0x1
14:38:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:36: File_Format                                   :0x0
14:38:36: CRC                                           :0x0
14:38:36: ####CSD Registe Values####  

14:38:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F2A0>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 3705 ] 
14:38:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 3706 ] 
14:38:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F451 to EndLba:0x3B6F4D1 with One's Pattern
14:38:37: [ WrLbaNoData(0x3B6F451, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3707 ] 
14:38:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F451 to EndLba:0x3B6F4D1 with One's Pattern 

14:38:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F4D1 to EndLba:0x3B6F551 with One's Pattern
14:38:37: [ WrLbaNoData(0x3B6F4D1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3708 ] 
14:38:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F4D1 to EndLba:0x3B6F551 with One's Pattern 

14:38:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23223 to EndLba:0x250A5 with Constant Pattern
14:38:37: [ RdLbaNoData(0x23223, 0x1E82, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3709 ] 
14:38:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23223 to EndLba:0x250A5 with Constant Pattern 

14:38:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3903
14:38:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E2A0>, <py_sfcl.PySEnhancedCmdData object at 0x06129930>, <None>) , Command count = 3710 ] 
14:38:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:39: Host Frequency set to 25000 KHz
14:38:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C8A0>, 0x0, True) , Command count = 3711 ] 
14:38:39: [GO18_globalSetVolt]### Host voltage value is set.
14:38:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C4B0>, 0x0, False) , Command count = 3712 ] 
14:38:39: [GO18_globalSetVolt]### Host voltage value is set.
14:38:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3713 ] 
14:38:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3714 ] 
14:38:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3715 ] 
14:38:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129120>, <py_sfcl.CommandDataDefinition object at 0x06129EA0>) , Command count = 3716 ] 
14:38:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x06129090>) , Command count = 3717 ] 
14:38:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:39: [ SetCardRCA(0x1, 0xD555) , Command count = 3718 ] 
14:38:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:39: Host Frequency set to 25000 KHz
14:38:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:39: ####CSD Registe 2.0 Values####
14:38:39: CSD_STRUCTURE                                 :0x1
14:38:39: Reserv1                                       :0x0
14:38:39: Time Access 1 TAAC                            :0xe
14:38:39: Time Access 2 NSAC*100                        :0x0
14:38:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:39: Card Command Classess CCC                     :0x5b5
14:38:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:39: DSR(driver stage register)  DSR_IMP           :0x0
14:38:39: Reserv2                                       :0x0
14:38:39: Device Size C_SIZE                            :0xedc8
14:38:39: Reserv3                                       :0x0
14:38:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:39: Reserv4                                       :0x0
14:38:39: Write Speed Factor R2W_FACTOR                 :0x2
14:38:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:39: FILE_FORMAT_GRP                               :0x0
14:38:39: COPY flag                                     :0x1
14:38:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:39: File_Format                                   :0x0
14:38:39: CRC                                           :0x0
14:38:39: ####CSD Registe Values####  

14:38:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:39: [GetSCRRegisterEntry] Passed
14:38:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:39: Data_Status_After Erases          : 0
14:38:39: CPRM Security Support             : No Security
14:38:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:39: Spec. Version                     : Version 3.0X
14:38:39: Extended Security Support         : Extended_Security_Not_Supported
14:38:39: Command Support                   : COMMAND_SUPPORT
14:38:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293F0>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 3719 ] 
14:38:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 3720 ] 
14:38:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:39: [ SetBusWidth(0x4) , Command count = 3721 ] 
14:38:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129D20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3722 ] 
14:38:39: Protected Area Size 0x28000
14:38:39: Bus Width           2
14:38:39: Secure Mode         0
14:38:39: Speed  Class        4
14:38:39: Perf Move           0
14:38:39: Au Size             9
14:38:39: Erase Size          15
14:38:39: Erase Timeout       1
14:38:39: Erase offset        1
14:38:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3723 ] 
14:38:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:39: Host Frequency set to 100000 KHz
14:38:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:39: ####CSD Registe 2.0 Values####
14:38:39: CSD_STRUCTURE                                 :0x1
14:38:40: Reserv1                                       :0x0
14:38:40: Time Access 1 TAAC                            :0xe
14:38:40: Time Access 2 NSAC*100                        :0x0
14:38:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:40: Card Command Classess CCC                     :0x5b5
14:38:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:40: DSR(driver stage register)  DSR_IMP           :0x0
14:38:40: Reserv2                                       :0x0
14:38:40: Device Size C_SIZE                            :0xedc8
14:38:40: Reserv3                                       :0x0
14:38:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:40: Reserv4                                       :0x0
14:38:40: Write Speed Factor R2W_FACTOR                 :0x2
14:38:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:40: FILE_FORMAT_GRP                               :0x0
14:38:40: COPY flag                                     :0x1
14:38:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:40: File_Format                                   :0x0
14:38:40: CRC                                           :0x0
14:38:40: ####CSD Registe Values####  

14:38:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E270>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 3724 ] 
14:38:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C840>, <py_sfcl.CommandDataDefinition object at 0x06129A20>) , Command count = 3725 ] 
14:38:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA70 to EndLba:0x3B6EAF0 with One's Pattern
14:38:40: [ WrLbaNoData(0x3B6EA70, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3726 ] 
14:38:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA70 to EndLba:0x3B6EAF0 with One's Pattern 

14:38:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EAF0 to EndLba:0x3B6EB70 with One's Pattern
14:38:40: [ WrLbaNoData(0x3B6EAF0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3727 ] 
14:38:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EAF0 to EndLba:0x3B6EB70 with One's Pattern 

14:38:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23223 to EndLba:0x250A3 with Constant Pattern
14:38:40: [ RdLbaNoData(0x23223, 0x1E80, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3728 ] 
14:38:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23223 to EndLba:0x250A3 with Constant Pattern 

14:38:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3902
14:38:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FC60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E390>, <py_sfcl.PySEnhancedCmdData object at 0x06129CC0>, <None>) , Command count = 3729 ] 
14:38:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:42: Host Frequency set to 25000 KHz
14:38:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CED0>, 0x0, True) , Command count = 3730 ] 
14:38:42: [GO18_globalSetVolt]### Host voltage value is set.
14:38:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F930>, 0x0, False) , Command count = 3731 ] 
14:38:42: [GO18_globalSetVolt]### Host voltage value is set.
14:38:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3732 ] 
14:38:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3733 ] 
14:38:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3734 ] 
14:38:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 3735 ] 
14:38:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x061294B0>) , Command count = 3736 ] 
14:38:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:43: [ SetCardRCA(0x1, 0xD555) , Command count = 3737 ] 
14:38:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:43: Host Frequency set to 25000 KHz
14:38:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:43: ####CSD Registe 2.0 Values####
14:38:43: CSD_STRUCTURE                                 :0x1
14:38:43: Reserv1                                       :0x0
14:38:43: Time Access 1 TAAC                            :0xe
14:38:43: Time Access 2 NSAC*100                        :0x0
14:38:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:43: Card Command Classess CCC                     :0x5b5
14:38:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:43: DSR(driver stage register)  DSR_IMP           :0x0
14:38:43: Reserv2                                       :0x0
14:38:43: Device Size C_SIZE                            :0xedc8
14:38:43: Reserv3                                       :0x0
14:38:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:43: Reserv4                                       :0x0
14:38:43: Write Speed Factor R2W_FACTOR                 :0x2
14:38:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:43: FILE_FORMAT_GRP                               :0x0
14:38:43: COPY flag                                     :0x1
14:38:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:43: File_Format                                   :0x0
14:38:43: CRC                                           :0x0
14:38:43: ####CSD Registe Values####  

14:38:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:43: [GetSCRRegisterEntry] Passed
14:38:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:43: Data_Status_After Erases          : 0
14:38:43: CPRM Security Support             : No Security
14:38:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:43: Spec. Version                     : Version 3.0X
14:38:43: Extended Security Support         : Extended_Security_Not_Supported
14:38:43: Command Support                   : COMMAND_SUPPORT
14:38:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E210>, <py_sfcl.CommandDataDefinition object at 0x06145360>) , Command count = 3738 ] 
14:38:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132060>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 3739 ] 
14:38:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:43: [ SetBusWidth(0x4) , Command count = 3740 ] 
14:38:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3741 ] 
14:38:43: Protected Area Size 0x28000
14:38:43: Bus Width           2
14:38:43: Secure Mode         0
14:38:43: Speed  Class        4
14:38:43: Perf Move           0
14:38:43: Au Size             9
14:38:43: Erase Size          15
14:38:43: Erase Timeout       1
14:38:43: Erase offset        1
14:38:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3742 ] 
14:38:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:43: Host Frequency set to 100000 KHz
14:38:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:43: ####CSD Registe 2.0 Values####
14:38:43: CSD_STRUCTURE                                 :0x1
14:38:43: Reserv1                                       :0x0
14:38:43: Time Access 1 TAAC                            :0xe
14:38:43: Time Access 2 NSAC*100                        :0x0
14:38:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:43: Card Command Classess CCC                     :0x5b5
14:38:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:43: DSR(driver stage register)  DSR_IMP           :0x0
14:38:43: Reserv2                                       :0x0
14:38:43: Device Size C_SIZE                            :0xedc8
14:38:43: Reserv3                                       :0x0
14:38:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:43: Reserv4                                       :0x0
14:38:43: Write Speed Factor R2W_FACTOR                 :0x2
14:38:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:43: FILE_FORMAT_GRP                               :0x0
14:38:43: COPY flag                                     :0x1
14:38:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:43: File_Format                                   :0x0
14:38:43: CRC                                           :0x0
14:38:43: ####CSD Registe Values####  

14:38:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDB0>, <py_sfcl.CommandDataDefinition object at 0x0612E7B0>) , Command count = 3743 ] 
14:38:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x061297B0>) , Command count = 3744 ] 
14:38:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71195 to EndLba:0x3B71215 with One's Pattern
14:38:43: [ WrLbaNoData(0x3B71195, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3745 ] 
14:38:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71195 to EndLba:0x3B71215 with One's Pattern 

14:38:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71215 to EndLba:0x3B71295 with One's Pattern
14:38:43: [ WrLbaNoData(0x3B71215, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3746 ] 
14:38:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71215 to EndLba:0x3B71295 with One's Pattern 

14:38:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23225 to EndLba:0x250A3 with Constant Pattern
14:38:43: [ RdLbaNoData(0x23225, 0x1E7E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3747 ] 
14:38:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23225 to EndLba:0x250A3 with Constant Pattern 

14:38:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3901
14:38:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061298D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061322D0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E450>, <None>) , Command count = 3748 ] 
14:38:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:46: Host Frequency set to 25000 KHz
14:38:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E0C0>, 0x0, True) , Command count = 3749 ] 
14:38:46: [GO18_globalSetVolt]### Host voltage value is set.
14:38:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CB70>, 0x0, False) , Command count = 3750 ] 
14:38:46: [GO18_globalSetVolt]### Host voltage value is set.
14:38:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3751 ] 
14:38:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3752 ] 
14:38:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3753 ] 
14:38:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061328D0>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 3754 ] 
14:38:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 3755 ] 
14:38:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:46: [ SetCardRCA(0x1, 0xD555) , Command count = 3756 ] 
14:38:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:46: Host Frequency set to 25000 KHz
14:38:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:46: ####CSD Registe 2.0 Values####
14:38:46: CSD_STRUCTURE                                 :0x1
14:38:46: Reserv1                                       :0x0
14:38:46: Time Access 1 TAAC                            :0xe
14:38:46: Time Access 2 NSAC*100                        :0x0
14:38:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:46: Card Command Classess CCC                     :0x5b5
14:38:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:46: DSR(driver stage register)  DSR_IMP           :0x0
14:38:46: Reserv2                                       :0x0
14:38:46: Device Size C_SIZE                            :0xedc8
14:38:46: Reserv3                                       :0x0
14:38:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:46: Reserv4                                       :0x0
14:38:46: Write Speed Factor R2W_FACTOR                 :0x2
14:38:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:46: FILE_FORMAT_GRP                               :0x0
14:38:46: COPY flag                                     :0x1
14:38:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:46: File_Format                                   :0x0
14:38:46: CRC                                           :0x0
14:38:46: ####CSD Registe Values####  

14:38:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:46: [GetSCRRegisterEntry] Passed
14:38:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:46: Data_Status_After Erases          : 0
14:38:46: CPRM Security Support             : No Security
14:38:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:46: Spec. Version                     : Version 3.0X
14:38:46: Extended Security Support         : Extended_Security_Not_Supported
14:38:46: Command Support                   : COMMAND_SUPPORT
14:38:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606FB10>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 3757 ] 
14:38:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E900>, <py_sfcl.CommandDataDefinition object at 0x0612E1B0>) , Command count = 3758 ] 
14:38:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:46: [ SetBusWidth(0x4) , Command count = 3759 ] 
14:38:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3760 ] 
14:38:46: Protected Area Size 0x28000
14:38:46: Bus Width           2
14:38:46: Secure Mode         0
14:38:46: Speed  Class        4
14:38:46: Perf Move           0
14:38:46: Au Size             9
14:38:46: Erase Size          15
14:38:46: Erase Timeout       1
14:38:46: Erase offset        1
14:38:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3761 ] 
14:38:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:46: Host Frequency set to 100000 KHz
14:38:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:46: ####CSD Registe 2.0 Values####
14:38:46: CSD_STRUCTURE                                 :0x1
14:38:46: Reserv1                                       :0x0
14:38:46: Time Access 1 TAAC                            :0xe
14:38:46: Time Access 2 NSAC*100                        :0x0
14:38:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:46: Card Command Classess CCC                     :0x5b5
14:38:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:46: DSR(driver stage register)  DSR_IMP           :0x0
14:38:46: Reserv2                                       :0x0
14:38:46: Device Size C_SIZE                            :0xedc8
14:38:46: Reserv3                                       :0x0
14:38:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:47: Reserv4                                       :0x0
14:38:47: Write Speed Factor R2W_FACTOR                 :0x2
14:38:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:47: FILE_FORMAT_GRP                               :0x0
14:38:47: COPY flag                                     :0x1
14:38:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:47: File_Format                                   :0x0
14:38:47: CRC                                           :0x0
14:38:47: ####CSD Registe Values####  

14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F810>, <py_sfcl.CommandDataDefinition object at 0x0612E8A0>) , Command count = 3762 ] 
14:38:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C00>, <py_sfcl.CommandDataDefinition object at 0x06129FC0>) , Command count = 3763 ] 
14:38:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EE55 to EndLba:0x3B6EED5 with One's Pattern
14:38:47: [ WrLbaNoData(0x3B6EE55, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3764 ] 
14:38:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EE55 to EndLba:0x3B6EED5 with One's Pattern 

14:38:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EED5 to EndLba:0x3B6EF55 with One's Pattern
14:38:47: [ WrLbaNoData(0x3B6EED5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3765 ] 
14:38:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EED5 to EndLba:0x3B6EF55 with One's Pattern 

14:38:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23225 to EndLba:0x250A1 with Constant Pattern
14:38:47: [ RdLbaNoData(0x23225, 0x1E7C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3766 ] 
14:38:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23225 to EndLba:0x250A1 with Constant Pattern 

14:38:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3900
14:38:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EF00>, <py_sfcl.PySEnhancedCmdData object at 0x0612EB70>, <None>) , Command count = 3767 ] 
14:38:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:49: Host Frequency set to 25000 KHz
14:38:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F8D0>, 0x0, True) , Command count = 3768 ] 
14:38:49: [GO18_globalSetVolt]### Host voltage value is set.
14:38:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x061297E0>, 0x0, False) , Command count = 3769 ] 
14:38:49: [GO18_globalSetVolt]### Host voltage value is set.
14:38:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3770 ] 
14:38:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3771 ] 
14:38:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3772 ] 
14:38:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x06132150>) , Command count = 3773 ] 
14:38:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132420>, <py_sfcl.CommandDataDefinition object at 0x0612EA20>) , Command count = 3774 ] 
14:38:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:49: [ SetCardRCA(0x1, 0xD555) , Command count = 3775 ] 
14:38:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:49: Host Frequency set to 25000 KHz
14:38:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:49: ####CSD Registe 2.0 Values####
14:38:49: CSD_STRUCTURE                                 :0x1
14:38:49: Reserv1                                       :0x0
14:38:49: Time Access 1 TAAC                            :0xe
14:38:49: Time Access 2 NSAC*100                        :0x0
14:38:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:49: Card Command Classess CCC                     :0x5b5
14:38:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:49: DSR(driver stage register)  DSR_IMP           :0x0
14:38:49: Reserv2                                       :0x0
14:38:49: Device Size C_SIZE                            :0xedc8
14:38:49: Reserv3                                       :0x0
14:38:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:49: Reserv4                                       :0x0
14:38:49: Write Speed Factor R2W_FACTOR                 :0x2
14:38:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:49: FILE_FORMAT_GRP                               :0x0
14:38:49: COPY flag                                     :0x1
14:38:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:49: File_Format                                   :0x0
14:38:49: CRC                                           :0x0
14:38:49: ####CSD Registe Values####  

14:38:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:49: [GetSCRRegisterEntry] Passed
14:38:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:49: Data_Status_After Erases          : 0
14:38:49: CPRM Security Support             : No Security
14:38:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:49: Spec. Version                     : Version 3.0X
14:38:49: Extended Security Support         : Extended_Security_Not_Supported
14:38:49: Command Support                   : COMMAND_SUPPORT
14:38:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129360>, <py_sfcl.CommandDataDefinition object at 0x0612E4E0>) , Command count = 3776 ] 
14:38:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E690>, <py_sfcl.CommandDataDefinition object at 0x0612E600>) , Command count = 3777 ] 
14:38:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:49: [ SetBusWidth(0x4) , Command count = 3778 ] 
14:38:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3779 ] 
14:38:49: Protected Area Size 0x28000
14:38:49: Bus Width           2
14:38:49: Secure Mode         0
14:38:49: Speed  Class        4
14:38:49: Perf Move           0
14:38:49: Au Size             9
14:38:49: Erase Size          15
14:38:49: Erase Timeout       1
14:38:49: Erase offset        1
14:38:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3780 ] 
14:38:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:49: Host Frequency set to 100000 KHz
14:38:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:50: ####CSD Registe 2.0 Values####
14:38:50: CSD_STRUCTURE                                 :0x1
14:38:50: Reserv1                                       :0x0
14:38:50: Time Access 1 TAAC                            :0xe
14:38:50: Time Access 2 NSAC*100                        :0x0
14:38:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:50: Card Command Classess CCC                     :0x5b5
14:38:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:50: DSR(driver stage register)  DSR_IMP           :0x0
14:38:50: Reserv2                                       :0x0
14:38:50: Device Size C_SIZE                            :0xedc8
14:38:50: Reserv3                                       :0x0
14:38:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:50: Reserv4                                       :0x0
14:38:50: Write Speed Factor R2W_FACTOR                 :0x2
14:38:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:50: FILE_FORMAT_GRP                               :0x0
14:38:50: COPY flag                                     :0x1
14:38:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:50: File_Format                                   :0x0
14:38:50: CRC                                           :0x0
14:38:50: ####CSD Registe Values####  

14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC00>, <py_sfcl.CommandDataDefinition object at 0x0612EC30>) , Command count = 3781 ] 
14:38:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x061329C0>) , Command count = 3782 ] 
14:38:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FDC5 to EndLba:0x3B6FE45 with One's Pattern
14:38:50: [ WrLbaNoData(0x3B6FDC5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3783 ] 
14:38:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FDC5 to EndLba:0x3B6FE45 with One's Pattern 

14:38:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FE45 to EndLba:0x3B6FEC5 with One's Pattern
14:38:50: [ WrLbaNoData(0x3B6FE45, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3784 ] 
14:38:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FE45 to EndLba:0x3B6FEC5 with One's Pattern 

14:38:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23227 to EndLba:0x250A1 with Constant Pattern
14:38:50: [ RdLbaNoData(0x23227, 0x1E7A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3785 ] 
14:38:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23227 to EndLba:0x250A1 with Constant Pattern 

14:38:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3899
14:38:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132450>, <py_sfcl.PySEnhancedCmdData object at 0x061326F0>, <None>) , Command count = 3786 ] 
14:38:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:52: Host Frequency set to 25000 KHz
14:38:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E9F0>, 0x0, True) , Command count = 3787 ] 
14:38:52: [GO18_globalSetVolt]### Host voltage value is set.
14:38:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E6C0>, 0x0, False) , Command count = 3788 ] 
14:38:52: [GO18_globalSetVolt]### Host voltage value is set.
14:38:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3789 ] 
14:38:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3790 ] 
14:38:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3791 ] 
14:38:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x06132CC0>) , Command count = 3792 ] 
14:38:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDE0>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 3793 ] 
14:38:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:53: [ SetCardRCA(0x1, 0xD555) , Command count = 3794 ] 
14:38:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:53: Host Frequency set to 25000 KHz
14:38:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:53: ####CSD Registe 2.0 Values####
14:38:53: CSD_STRUCTURE                                 :0x1
14:38:53: Reserv1                                       :0x0
14:38:53: Time Access 1 TAAC                            :0xe
14:38:53: Time Access 2 NSAC*100                        :0x0
14:38:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:53: Card Command Classess CCC                     :0x5b5
14:38:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:53: DSR(driver stage register)  DSR_IMP           :0x0
14:38:53: Reserv2                                       :0x0
14:38:53: Device Size C_SIZE                            :0xedc8
14:38:53: Reserv3                                       :0x0
14:38:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:53: Reserv4                                       :0x0
14:38:53: Write Speed Factor R2W_FACTOR                 :0x2
14:38:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:53: FILE_FORMAT_GRP                               :0x0
14:38:53: COPY flag                                     :0x1
14:38:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:53: File_Format                                   :0x0
14:38:53: CRC                                           :0x0
14:38:53: ####CSD Registe Values####  

14:38:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:53: [GetSCRRegisterEntry] Passed
14:38:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:53: Data_Status_After Erases          : 0
14:38:53: CPRM Security Support             : No Security
14:38:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:53: Spec. Version                     : Version 3.0X
14:38:53: Extended Security Support         : Extended_Security_Not_Supported
14:38:53: Command Support                   : COMMAND_SUPPORT
14:38:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED50>, <py_sfcl.CommandDataDefinition object at 0x06132390>) , Command count = 3795 ] 
14:38:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x061321B0>) , Command count = 3796 ] 
14:38:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:53: [ SetBusWidth(0x4) , Command count = 3797 ] 
14:38:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3798 ] 
14:38:53: Protected Area Size 0x28000
14:38:53: Bus Width           2
14:38:53: Secure Mode         0
14:38:53: Speed  Class        4
14:38:53: Perf Move           0
14:38:53: Au Size             9
14:38:53: Erase Size          15
14:38:53: Erase Timeout       1
14:38:53: Erase offset        1
14:38:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3799 ] 
14:38:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:53: Host Frequency set to 100000 KHz
14:38:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:53: ####CSD Registe 2.0 Values####
14:38:53: CSD_STRUCTURE                                 :0x1
14:38:53: Reserv1                                       :0x0
14:38:53: Time Access 1 TAAC                            :0xe
14:38:53: Time Access 2 NSAC*100                        :0x0
14:38:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:53: Card Command Classess CCC                     :0x5b5
14:38:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:53: DSR(driver stage register)  DSR_IMP           :0x0
14:38:53: Reserv2                                       :0x0
14:38:53: Device Size C_SIZE                            :0xedc8
14:38:53: Reserv3                                       :0x0
14:38:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:53: Reserv4                                       :0x0
14:38:53: Write Speed Factor R2W_FACTOR                 :0x2
14:38:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:53: FILE_FORMAT_GRP                               :0x0
14:38:53: COPY flag                                     :0x1
14:38:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:53: File_Format                                   :0x0
14:38:53: CRC                                           :0x0
14:38:53: ####CSD Registe Values####  

14:38:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F870>, <py_sfcl.CommandDataDefinition object at 0x06132B70>) , Command count = 3800 ] 
14:38:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x06129600>) , Command count = 3801 ] 
14:38:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70290 to EndLba:0x3B70310 with One's Pattern
14:38:54: [ WrLbaNoData(0x3B70290, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3802 ] 
14:38:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70290 to EndLba:0x3B70310 with One's Pattern 

14:38:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70310 to EndLba:0x3B70390 with One's Pattern
14:38:54: [ WrLbaNoData(0x3B70310, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3803 ] 
14:38:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70310 to EndLba:0x3B70390 with One's Pattern 

14:38:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23227 to EndLba:0x2509F with Constant Pattern
14:38:54: [ RdLbaNoData(0x23227, 0x1E78, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3804 ] 
14:38:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23227 to EndLba:0x2509F with Constant Pattern 

14:38:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3898
14:38:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138660>, <py_sfcl.PySEnhancedCmdData object at 0x061327E0>, <None>) , Command count = 3805 ] 
14:38:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:56: Host Frequency set to 25000 KHz
14:38:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EB10>, 0x0, True) , Command count = 3806 ] 
14:38:56: [GO18_globalSetVolt]### Host voltage value is set.
14:38:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EE70>, 0x0, False) , Command count = 3807 ] 
14:38:56: [GO18_globalSetVolt]### Host voltage value is set.
14:38:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3808 ] 
14:38:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3809 ] 
14:38:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3810 ] 
14:38:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138270>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 3811 ] 
14:38:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A80>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 3812 ] 
14:38:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:56: [ SetCardRCA(0x1, 0xD555) , Command count = 3813 ] 
14:38:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:38:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:56: Host Frequency set to 25000 KHz
14:38:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:56: ####CSD Registe 2.0 Values####
14:38:56: CSD_STRUCTURE                                 :0x1
14:38:56: Reserv1                                       :0x0
14:38:56: Time Access 1 TAAC                            :0xe
14:38:56: Time Access 2 NSAC*100                        :0x0
14:38:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:38:56: Card Command Classess CCC                     :0x5b5
14:38:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:56: DSR(driver stage register)  DSR_IMP           :0x0
14:38:56: Reserv2                                       :0x0
14:38:56: Device Size C_SIZE                            :0xedc8
14:38:56: Reserv3                                       :0x0
14:38:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:56: Reserv4                                       :0x0
14:38:56: Write Speed Factor R2W_FACTOR                 :0x2
14:38:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:56: FILE_FORMAT_GRP                               :0x0
14:38:56: COPY flag                                     :0x1
14:38:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:56: File_Format                                   :0x0
14:38:56: CRC                                           :0x0
14:38:56: ####CSD Registe Values####  

14:38:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:38:56: [GetSCRRegisterEntry] Passed
14:38:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:38:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:38:56: Data_Status_After Erases          : 0
14:38:56: CPRM Security Support             : No Security
14:38:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:38:56: Spec. Version                     : Version 3.0X
14:38:56: Extended Security Support         : Extended_Security_Not_Supported
14:38:56: Command Support                   : COMMAND_SUPPORT
14:38:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061380C0>, <py_sfcl.CommandDataDefinition object at 0x06129600>) , Command count = 3814 ] 
14:38:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:38:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 3815 ] 
14:38:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:38:56: [ SetBusWidth(0x4) , Command count = 3816 ] 
14:38:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:38:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061325A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3817 ] 
14:38:56: Protected Area Size 0x28000
14:38:56: Bus Width           2
14:38:56: Secure Mode         0
14:38:56: Speed  Class        4
14:38:56: Perf Move           0
14:38:56: Au Size             9
14:38:56: Erase Size          15
14:38:56: Erase Timeout       1
14:38:56: Erase offset        1
14:38:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:38:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:38:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:38:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3818 ] 
14:38:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:38:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:38:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:38:56: Host Frequency set to 100000 KHz
14:38:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:38:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:38:56: ####CSD Registe 2.0 Values####
14:38:56: CSD_STRUCTURE                                 :0x1
14:38:57: Reserv1                                       :0x0
14:38:57: Time Access 1 TAAC                            :0xe
14:38:57: Time Access 2 NSAC*100                        :0x0
14:38:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:38:57: Card Command Classess CCC                     :0x5b5
14:38:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:38:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:38:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:38:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:38:57: DSR(driver stage register)  DSR_IMP           :0x0
14:38:57: Reserv2                                       :0x0
14:38:57: Device Size C_SIZE                            :0xedc8
14:38:57: Reserv3                                       :0x0
14:38:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:38:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:38:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:38:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:38:57: Reserv4                                       :0x0
14:38:57: Write Speed Factor R2W_FACTOR                 :0x2
14:38:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:38:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:38:57: FILE_FORMAT_GRP                               :0x0
14:38:57: COPY flag                                     :0x1
14:38:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:38:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:38:57: File_Format                                   :0x0
14:38:57: CRC                                           :0x0
14:38:57: ####CSD Registe Values####  

14:38:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138030>, <py_sfcl.CommandDataDefinition object at 0x06138120>) , Command count = 3819 ] 
14:38:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:38:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C450>, <py_sfcl.CommandDataDefinition object at 0x06132360>) , Command count = 3820 ] 
14:38:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:38:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:38:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:38:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D8D1 to EndLba:0x3B6D951 with One's Pattern
14:38:57: [ WrLbaNoData(0x3B6D8D1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3821 ] 
14:38:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D8D1 to EndLba:0x3B6D951 with One's Pattern 

14:38:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D951 to EndLba:0x3B6D9D1 with One's Pattern
14:38:57: [ WrLbaNoData(0x3B6D951, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3822 ] 
14:38:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D951 to EndLba:0x3B6D9D1 with One's Pattern 

14:38:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:38:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23229 to EndLba:0x2509F with Constant Pattern
14:38:57: [ RdLbaNoData(0x23229, 0x1E76, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3823 ] 
14:38:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23229 to EndLba:0x2509F with Constant Pattern 

14:38:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3897
14:38:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:38:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138420>, <py_sfcl.PySEnhancedCmdData object at 0x06138060>, <None>) , Command count = 3824 ] 
14:38:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:38:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:38:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:38:59: Host Frequency set to 25000 KHz
14:38:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:38:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:38:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:38:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x061388D0>, 0x0, True) , Command count = 3825 ] 
14:38:59: [GO18_globalSetVolt]### Host voltage value is set.
14:38:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:38:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EBD0>, 0x0, False) , Command count = 3826 ] 
14:38:59: [GO18_globalSetVolt]### Host voltage value is set.
14:38:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3827 ] 
14:38:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:38:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3828 ] 
14:38:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:38:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:38:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:38:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:38:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:38:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3829 ] 
14:38:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:38:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:38:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D50>, <py_sfcl.CommandDataDefinition object at 0x06138E10>) , Command count = 3830 ] 
14:38:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:38:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06132810>) , Command count = 3831 ] 
14:38:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:38:59: [ SetCardRCA(0x1, 0xD555) , Command count = 3832 ] 
14:39:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:00: Host Frequency set to 25000 KHz
14:39:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:00: ####CSD Registe 2.0 Values####
14:39:00: CSD_STRUCTURE                                 :0x1
14:39:00: Reserv1                                       :0x0
14:39:00: Time Access 1 TAAC                            :0xe
14:39:00: Time Access 2 NSAC*100                        :0x0
14:39:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:00: Card Command Classess CCC                     :0x5b5
14:39:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:00: DSR(driver stage register)  DSR_IMP           :0x0
14:39:00: Reserv2                                       :0x0
14:39:00: Device Size C_SIZE                            :0xedc8
14:39:00: Reserv3                                       :0x0
14:39:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:00: Reserv4                                       :0x0
14:39:00: Write Speed Factor R2W_FACTOR                 :0x2
14:39:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:00: FILE_FORMAT_GRP                               :0x0
14:39:00: COPY flag                                     :0x1
14:39:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:00: File_Format                                   :0x0
14:39:00: CRC                                           :0x0
14:39:00: ####CSD Registe Values####  

14:39:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:00: [GetSCRRegisterEntry] Passed
14:39:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:00: Data_Status_After Erases          : 0
14:39:00: CPRM Security Support             : No Security
14:39:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:00: Spec. Version                     : Version 3.0X
14:39:00: Extended Security Support         : Extended_Security_Not_Supported
14:39:00: Command Support                   : COMMAND_SUPPORT
14:39:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F00>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 3833 ] 
14:39:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 3834 ] 
14:39:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:00: [ SetBusWidth(0x4) , Command count = 3835 ] 
14:39:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3836 ] 
14:39:00: Protected Area Size 0x28000
14:39:00: Bus Width           2
14:39:00: Secure Mode         0
14:39:00: Speed  Class        4
14:39:00: Perf Move           0
14:39:00: Au Size             9
14:39:00: Erase Size          15
14:39:00: Erase Timeout       1
14:39:00: Erase offset        1
14:39:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3837 ] 
14:39:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:00: Host Frequency set to 100000 KHz
14:39:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:00: ####CSD Registe 2.0 Values####
14:39:00: CSD_STRUCTURE                                 :0x1
14:39:00: Reserv1                                       :0x0
14:39:00: Time Access 1 TAAC                            :0xe
14:39:00: Time Access 2 NSAC*100                        :0x0
14:39:00: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:00: Card Command Classess CCC                     :0x5b5
14:39:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:00: DSR(driver stage register)  DSR_IMP           :0x0
14:39:00: Reserv2                                       :0x0
14:39:00: Device Size C_SIZE                            :0xedc8
14:39:00: Reserv3                                       :0x0
14:39:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:00: Reserv4                                       :0x0
14:39:00: Write Speed Factor R2W_FACTOR                 :0x2
14:39:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:00: FILE_FORMAT_GRP                               :0x0
14:39:00: COPY flag                                     :0x1
14:39:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:00: File_Format                                   :0x0
14:39:00: CRC                                           :0x0
14:39:00: ####CSD Registe Values####  

14:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9C0>, <py_sfcl.CommandDataDefinition object at 0x06132A50>) , Command count = 3838 ] 
14:39:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 3839 ] 
14:39:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A62 to EndLba:0x3B70AE2 with One's Pattern
14:39:00: [ WrLbaNoData(0x3B70A62, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3840 ] 
14:39:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A62 to EndLba:0x3B70AE2 with One's Pattern 

14:39:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70AE2 to EndLba:0x3B70B62 with One's Pattern
14:39:00: [ WrLbaNoData(0x3B70AE2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3841 ] 
14:39:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70AE2 to EndLba:0x3B70B62 with One's Pattern 

14:39:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23229 to EndLba:0x2509D with Constant Pattern
14:39:00: [ RdLbaNoData(0x23229, 0x1E74, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3842 ] 
14:39:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23229 to EndLba:0x2509D with Constant Pattern 

14:39:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3896
14:39:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F960>, <py_sfcl.PySEnhancedCmdData object at 0x06138360>, <None>) , Command count = 3843 ] 
14:39:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:03: Host Frequency set to 25000 KHz
14:39:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F1E0>, 0x0, True) , Command count = 3844 ] 
14:39:03: [GO18_globalSetVolt]### Host voltage value is set.
14:39:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132BD0>, 0x0, False) , Command count = 3845 ] 
14:39:03: [GO18_globalSetVolt]### Host voltage value is set.
14:39:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3846 ] 
14:39:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3847 ] 
14:39:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3848 ] 
14:39:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 3849 ] 
14:39:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 3850 ] 
14:39:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:03: [ SetCardRCA(0x1, 0xD555) , Command count = 3851 ] 
14:39:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:03: Host Frequency set to 25000 KHz
14:39:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:03: ####CSD Registe 2.0 Values####
14:39:03: CSD_STRUCTURE                                 :0x1
14:39:03: Reserv1                                       :0x0
14:39:03: Time Access 1 TAAC                            :0xe
14:39:03: Time Access 2 NSAC*100                        :0x0
14:39:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:03: Card Command Classess CCC                     :0x5b5
14:39:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:03: DSR(driver stage register)  DSR_IMP           :0x0
14:39:03: Reserv2                                       :0x0
14:39:03: Device Size C_SIZE                            :0xedc8
14:39:03: Reserv3                                       :0x0
14:39:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:03: Reserv4                                       :0x0
14:39:03: Write Speed Factor R2W_FACTOR                 :0x2
14:39:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:03: FILE_FORMAT_GRP                               :0x0
14:39:03: COPY flag                                     :0x1
14:39:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:03: File_Format                                   :0x0
14:39:03: CRC                                           :0x0
14:39:03: ####CSD Registe Values####  

14:39:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:03: [GetSCRRegisterEntry] Passed
14:39:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:03: Data_Status_After Erases          : 0
14:39:03: CPRM Security Support             : No Security
14:39:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:03: Spec. Version                     : Version 3.0X
14:39:03: Extended Security Support         : Extended_Security_Not_Supported
14:39:03: Command Support                   : COMMAND_SUPPORT
14:39:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D20>, <py_sfcl.CommandDataDefinition object at 0x061452D0>) , Command count = 3852 ] 
14:39:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132EA0>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 3853 ] 
14:39:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:03: [ SetBusWidth(0x4) , Command count = 3854 ] 
14:39:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061387B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3855 ] 
14:39:03: Protected Area Size 0x28000
14:39:03: Bus Width           2
14:39:03: Secure Mode         0
14:39:03: Speed  Class        4
14:39:03: Perf Move           0
14:39:03: Au Size             9
14:39:03: Erase Size          15
14:39:03: Erase Timeout       1
14:39:03: Erase offset        1
14:39:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3856 ] 
14:39:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:03: Host Frequency set to 100000 KHz
14:39:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:03: ####CSD Registe 2.0 Values####
14:39:03: CSD_STRUCTURE                                 :0x1
14:39:03: Reserv1                                       :0x0
14:39:03: Time Access 1 TAAC                            :0xe
14:39:03: Time Access 2 NSAC*100                        :0x0
14:39:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:03: Card Command Classess CCC                     :0x5b5
14:39:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:03: DSR(driver stage register)  DSR_IMP           :0x0
14:39:03: Reserv2                                       :0x0
14:39:03: Device Size C_SIZE                            :0xedc8
14:39:03: Reserv3                                       :0x0
14:39:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:04: Reserv4                                       :0x0
14:39:04: Write Speed Factor R2W_FACTOR                 :0x2
14:39:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:04: FILE_FORMAT_GRP                               :0x0
14:39:04: COPY flag                                     :0x1
14:39:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:04: File_Format                                   :0x0
14:39:04: CRC                                           :0x0
14:39:04: ####CSD Registe Values####  

14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F630>, <py_sfcl.CommandDataDefinition object at 0x0613FAB0>) , Command count = 3857 ] 
14:39:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F420>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 3858 ] 
14:39:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F9E9 to EndLba:0x3B6FA69 with One's Pattern
14:39:04: [ WrLbaNoData(0x3B6F9E9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3859 ] 
14:39:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F9E9 to EndLba:0x3B6FA69 with One's Pattern 

14:39:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA69 to EndLba:0x3B6FAE9 with One's Pattern
14:39:04: [ WrLbaNoData(0x3B6FA69, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3860 ] 
14:39:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA69 to EndLba:0x3B6FAE9 with One's Pattern 

14:39:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2322B to EndLba:0x2509D with Constant Pattern
14:39:04: [ RdLbaNoData(0x2322B, 0x1E72, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3861 ] 
14:39:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2322B to EndLba:0x2509D with Constant Pattern 

14:39:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3895
14:39:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F8A0>, <py_sfcl.PySEnhancedCmdData object at 0x06138B10>, <None>) , Command count = 3862 ] 
14:39:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:06: Host Frequency set to 25000 KHz
14:39:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132BA0>, 0x0, True) , Command count = 3863 ] 
14:39:06: [GO18_globalSetVolt]### Host voltage value is set.
14:39:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF1E0>, 0x0, False) , Command count = 3864 ] 
14:39:06: [GO18_globalSetVolt]### Host voltage value is set.
14:39:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3865 ] 
14:39:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3866 ] 
14:39:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3867 ] 
14:39:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132300>, <py_sfcl.CommandDataDefinition object at 0x061382A0>) , Command count = 3868 ] 
14:39:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323C0>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 3869 ] 
14:39:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:06: [ SetCardRCA(0x1, 0xD555) , Command count = 3870 ] 
14:39:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:06: Host Frequency set to 25000 KHz
14:39:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:06: ####CSD Registe 2.0 Values####
14:39:06: CSD_STRUCTURE                                 :0x1
14:39:06: Reserv1                                       :0x0
14:39:06: Time Access 1 TAAC                            :0xe
14:39:06: Time Access 2 NSAC*100                        :0x0
14:39:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:06: Card Command Classess CCC                     :0x5b5
14:39:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:06: DSR(driver stage register)  DSR_IMP           :0x0
14:39:06: Reserv2                                       :0x0
14:39:06: Device Size C_SIZE                            :0xedc8
14:39:06: Reserv3                                       :0x0
14:39:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:06: Reserv4                                       :0x0
14:39:06: Write Speed Factor R2W_FACTOR                 :0x2
14:39:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:06: FILE_FORMAT_GRP                               :0x0
14:39:06: COPY flag                                     :0x1
14:39:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:06: File_Format                                   :0x0
14:39:06: CRC                                           :0x0
14:39:06: ####CSD Registe Values####  

14:39:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:06: [GetSCRRegisterEntry] Passed
14:39:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:06: Data_Status_After Erases          : 0
14:39:06: CPRM Security Support             : No Security
14:39:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:06: Spec. Version                     : Version 3.0X
14:39:06: Extended Security Support         : Extended_Security_Not_Supported
14:39:06: Command Support                   : COMMAND_SUPPORT
14:39:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1B0>, <py_sfcl.CommandDataDefinition object at 0x06138D80>) , Command count = 3871 ] 
14:39:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 3872 ] 
14:39:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:06: [ SetBusWidth(0x4) , Command count = 3873 ] 
14:39:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3874 ] 
14:39:06: Protected Area Size 0x28000
14:39:06: Bus Width           2
14:39:06: Secure Mode         0
14:39:06: Speed  Class        4
14:39:06: Perf Move           0
14:39:06: Au Size             9
14:39:06: Erase Size          15
14:39:06: Erase Timeout       1
14:39:06: Erase offset        1
14:39:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3875 ] 
14:39:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:07: Host Frequency set to 100000 KHz
14:39:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:07: ####CSD Registe 2.0 Values####
14:39:07: CSD_STRUCTURE                                 :0x1
14:39:07: Reserv1                                       :0x0
14:39:07: Time Access 1 TAAC                            :0xe
14:39:07: Time Access 2 NSAC*100                        :0x0
14:39:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:07: Card Command Classess CCC                     :0x5b5
14:39:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:07: DSR(driver stage register)  DSR_IMP           :0x0
14:39:07: Reserv2                                       :0x0
14:39:07: Device Size C_SIZE                            :0xedc8
14:39:07: Reserv3                                       :0x0
14:39:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:07: Reserv4                                       :0x0
14:39:07: Write Speed Factor R2W_FACTOR                 :0x2
14:39:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:07: FILE_FORMAT_GRP                               :0x0
14:39:07: COPY flag                                     :0x1
14:39:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:07: File_Format                                   :0x0
14:39:07: CRC                                           :0x0
14:39:07: ####CSD Registe Values####  

14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF240>, <py_sfcl.CommandDataDefinition object at 0x0613F120>) , Command count = 3876 ] 
14:39:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x061387B0>) , Command count = 3877 ] 
14:39:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B714B6 to EndLba:0x3B71536 with One's Pattern
14:39:07: [ WrLbaNoData(0x3B714B6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3878 ] 
14:39:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B714B6 to EndLba:0x3B71536 with One's Pattern 

14:39:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71536 to EndLba:0x3B715B6 with One's Pattern
14:39:07: [ WrLbaNoData(0x3B71536, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3879 ] 
14:39:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71536 to EndLba:0x3B715B6 with One's Pattern 

14:39:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2322B to EndLba:0x2509B with Constant Pattern
14:39:07: [ RdLbaNoData(0x2322B, 0x1E70, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3880 ] 
14:39:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2322B to EndLba:0x2509B with Constant Pattern 

14:39:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3894
14:39:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AFC60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F660>, <py_sfcl.PySEnhancedCmdData object at 0x0613F3F0>, <None>) , Command count = 3881 ] 
14:39:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:10: Host Frequency set to 25000 KHz
14:39:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C19F0>, 0x0, True) , Command count = 3882 ] 
14:39:10: [GO18_globalSetVolt]### Host voltage value is set.
14:39:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F510>, 0x0, False) , Command count = 3883 ] 
14:39:10: [GO18_globalSetVolt]### Host voltage value is set.
14:39:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3884 ] 
14:39:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3885 ] 
14:39:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3886 ] 
14:39:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB70>, <py_sfcl.CommandDataDefinition object at 0x06138510>) , Command count = 3887 ] 
14:39:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x06138E40>) , Command count = 3888 ] 
14:39:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:10: [ SetCardRCA(0x1, 0xD555) , Command count = 3889 ] 
14:39:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:10: Host Frequency set to 25000 KHz
14:39:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:10: ####CSD Registe 2.0 Values####
14:39:10: CSD_STRUCTURE                                 :0x1
14:39:10: Reserv1                                       :0x0
14:39:10: Time Access 1 TAAC                            :0xe
14:39:10: Time Access 2 NSAC*100                        :0x0
14:39:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:10: Card Command Classess CCC                     :0x5b5
14:39:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:10: DSR(driver stage register)  DSR_IMP           :0x0
14:39:10: Reserv2                                       :0x0
14:39:10: Device Size C_SIZE                            :0xedc8
14:39:10: Reserv3                                       :0x0
14:39:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:10: Reserv4                                       :0x0
14:39:10: Write Speed Factor R2W_FACTOR                 :0x2
14:39:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:10: FILE_FORMAT_GRP                               :0x0
14:39:10: COPY flag                                     :0x1
14:39:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:10: File_Format                                   :0x0
14:39:10: CRC                                           :0x0
14:39:10: ####CSD Registe Values####  

14:39:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:10: [GetSCRRegisterEntry] Passed
14:39:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:10: Data_Status_After Erases          : 0
14:39:10: CPRM Security Support             : No Security
14:39:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:10: Spec. Version                     : Version 3.0X
14:39:10: Extended Security Support         : Extended_Security_Not_Supported
14:39:10: Command Support                   : COMMAND_SUPPORT
14:39:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1B0>, <py_sfcl.CommandDataDefinition object at 0x06138C30>) , Command count = 3890 ] 
14:39:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EED0>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 3891 ] 
14:39:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:10: [ SetBusWidth(0x4) , Command count = 3892 ] 
14:39:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3893 ] 
14:39:10: Protected Area Size 0x28000
14:39:10: Bus Width           2
14:39:10: Secure Mode         0
14:39:10: Speed  Class        4
14:39:10: Perf Move           0
14:39:10: Au Size             9
14:39:10: Erase Size          15
14:39:10: Erase Timeout       1
14:39:10: Erase offset        1
14:39:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3894 ] 
14:39:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:10: Host Frequency set to 100000 KHz
14:39:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:10: ####CSD Registe 2.0 Values####
14:39:10: CSD_STRUCTURE                                 :0x1
14:39:10: Reserv1                                       :0x0
14:39:10: Time Access 1 TAAC                            :0xe
14:39:10: Time Access 2 NSAC*100                        :0x0
14:39:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:10: Card Command Classess CCC                     :0x5b5
14:39:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:10: DSR(driver stage register)  DSR_IMP           :0x0
14:39:10: Reserv2                                       :0x0
14:39:10: Device Size C_SIZE                            :0xedc8
14:39:10: Reserv3                                       :0x0
14:39:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:11: Reserv4                                       :0x0
14:39:11: Write Speed Factor R2W_FACTOR                 :0x2
14:39:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:11: FILE_FORMAT_GRP                               :0x0
14:39:11: COPY flag                                     :0x1
14:39:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:11: File_Format                                   :0x0
14:39:11: CRC                                           :0x0
14:39:11: ####CSD Registe Values####  

14:39:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB4E0>, <py_sfcl.CommandDataDefinition object at 0x0611CF00>) , Command count = 3895 ] 
14:39:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 3896 ] 
14:39:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DB83 to EndLba:0x3B6DC03 with One's Pattern
14:39:11: [ WrLbaNoData(0x3B6DB83, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3897 ] 
14:39:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DB83 to EndLba:0x3B6DC03 with One's Pattern 

14:39:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DC03 to EndLba:0x3B6DC83 with One's Pattern
14:39:11: [ WrLbaNoData(0x3B6DC03, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3898 ] 
14:39:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DC03 to EndLba:0x3B6DC83 with One's Pattern 

14:39:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2322D to EndLba:0x2509B with Constant Pattern
14:39:11: [ RdLbaNoData(0x2322D, 0x1E6E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3899 ] 
14:39:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2322D to EndLba:0x2509B with Constant Pattern 

14:39:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3893
14:39:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0529B4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F3C0>, <None>) , Command count = 3900 ] 
14:39:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:13: Host Frequency set to 25000 KHz
14:39:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F6C0>, 0x0, True) , Command count = 3901 ] 
14:39:13: [GO18_globalSetVolt]### Host voltage value is set.
14:39:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x05184030>, 0x0, False) , Command count = 3902 ] 
14:39:13: [GO18_globalSetVolt]### Host voltage value is set.
14:39:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3903 ] 
14:39:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3904 ] 
14:39:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3905 ] 
14:39:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x06138ED0>) , Command count = 3906 ] 
14:39:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x0518AE70>) , Command count = 3907 ] 
14:39:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:13: [ SetCardRCA(0x1, 0xD555) , Command count = 3908 ] 
14:39:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:13: Host Frequency set to 25000 KHz
14:39:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:13: ####CSD Registe 2.0 Values####
14:39:13: CSD_STRUCTURE                                 :0x1
14:39:13: Reserv1                                       :0x0
14:39:13: Time Access 1 TAAC                            :0xe
14:39:13: Time Access 2 NSAC*100                        :0x0
14:39:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:13: Card Command Classess CCC                     :0x5b5
14:39:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:13: DSR(driver stage register)  DSR_IMP           :0x0
14:39:13: Reserv2                                       :0x0
14:39:13: Device Size C_SIZE                            :0xedc8
14:39:13: Reserv3                                       :0x0
14:39:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:13: Reserv4                                       :0x0
14:39:13: Write Speed Factor R2W_FACTOR                 :0x2
14:39:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:13: FILE_FORMAT_GRP                               :0x0
14:39:13: COPY flag                                     :0x1
14:39:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:13: File_Format                                   :0x0
14:39:13: CRC                                           :0x0
14:39:13: ####CSD Registe Values####  

14:39:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:13: [GetSCRRegisterEntry] Passed
14:39:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:13: Data_Status_After Erases          : 0
14:39:13: CPRM Security Support             : No Security
14:39:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:13: Spec. Version                     : Version 3.0X
14:39:13: Extended Security Support         : Extended_Security_Not_Supported
14:39:13: Command Support                   : COMMAND_SUPPORT
14:39:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C90>, <py_sfcl.CommandDataDefinition object at 0x060E3C30>) , Command count = 3909 ] 
14:39:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0F0>, <py_sfcl.CommandDataDefinition object at 0x0611CB40>) , Command count = 3910 ] 
14:39:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:13: [ SetBusWidth(0x4) , Command count = 3911 ] 
14:39:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F4E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3912 ] 
14:39:13: Protected Area Size 0x28000
14:39:13: Bus Width           2
14:39:13: Secure Mode         0
14:39:13: Speed  Class        4
14:39:13: Perf Move           0
14:39:13: Au Size             9
14:39:13: Erase Size          15
14:39:13: Erase Timeout       1
14:39:13: Erase offset        1
14:39:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3913 ] 
14:39:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:13: Host Frequency set to 100000 KHz
14:39:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:13: ####CSD Registe 2.0 Values####
14:39:13: CSD_STRUCTURE                                 :0x1
14:39:14: Reserv1                                       :0x0
14:39:14: Time Access 1 TAAC                            :0xe
14:39:14: Time Access 2 NSAC*100                        :0x0
14:39:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:14: Card Command Classess CCC                     :0x5b5
14:39:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:14: DSR(driver stage register)  DSR_IMP           :0x0
14:39:14: Reserv2                                       :0x0
14:39:14: Device Size C_SIZE                            :0xedc8
14:39:14: Reserv3                                       :0x0
14:39:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:14: Reserv4                                       :0x0
14:39:14: Write Speed Factor R2W_FACTOR                 :0x2
14:39:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:14: FILE_FORMAT_GRP                               :0x0
14:39:14: COPY flag                                     :0x1
14:39:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:14: File_Format                                   :0x0
14:39:14: CRC                                           :0x0
14:39:14: ####CSD Registe Values####  

14:39:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F990>, <py_sfcl.CommandDataDefinition object at 0x0613FA20>) , Command count = 3914 ] 
14:39:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F570>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 3915 ] 
14:39:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7002A to EndLba:0x3B700AA with One's Pattern
14:39:14: [ WrLbaNoData(0x3B7002A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3916 ] 
14:39:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7002A to EndLba:0x3B700AA with One's Pattern 

14:39:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B700AA to EndLba:0x3B7012A with One's Pattern
14:39:14: [ WrLbaNoData(0x3B700AA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3917 ] 
14:39:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B700AA to EndLba:0x3B7012A with One's Pattern 

14:39:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2322D to EndLba:0x25099 with Constant Pattern
14:39:14: [ RdLbaNoData(0x2322D, 0x1E6C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3918 ] 
14:39:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2322D to EndLba:0x25099 with Constant Pattern 

14:39:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3892
14:39:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F300>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0606F030>, <py_sfcl.PySEnhancedCmdData object at 0x0611C240>, <None>) , Command count = 3919 ] 
14:39:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:16: Host Frequency set to 25000 KHz
14:39:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F450>, 0x0, True) , Command count = 3920 ] 
14:39:16: [GO18_globalSetVolt]### Host voltage value is set.
14:39:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BBFC0>, 0x0, False) , Command count = 3921 ] 
14:39:16: [GO18_globalSetVolt]### Host voltage value is set.
14:39:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3922 ] 
14:39:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3923 ] 
14:39:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3924 ] 
14:39:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB10>, <py_sfcl.CommandDataDefinition object at 0x052C1E70>) , Command count = 3925 ] 
14:39:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F5A0>, <py_sfcl.CommandDataDefinition object at 0x0611CE10>) , Command count = 3926 ] 
14:39:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:17: [ SetCardRCA(0x1, 0xD555) , Command count = 3927 ] 
14:39:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:17: Host Frequency set to 25000 KHz
14:39:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:17: ####CSD Registe 2.0 Values####
14:39:17: CSD_STRUCTURE                                 :0x1
14:39:17: Reserv1                                       :0x0
14:39:17: Time Access 1 TAAC                            :0xe
14:39:17: Time Access 2 NSAC*100                        :0x0
14:39:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:17: Card Command Classess CCC                     :0x5b5
14:39:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:17: DSR(driver stage register)  DSR_IMP           :0x0
14:39:17: Reserv2                                       :0x0
14:39:17: Device Size C_SIZE                            :0xedc8
14:39:17: Reserv3                                       :0x0
14:39:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:17: Reserv4                                       :0x0
14:39:17: Write Speed Factor R2W_FACTOR                 :0x2
14:39:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:17: FILE_FORMAT_GRP                               :0x0
14:39:17: COPY flag                                     :0x1
14:39:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:17: File_Format                                   :0x0
14:39:17: CRC                                           :0x0
14:39:17: ####CSD Registe Values####  

14:39:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:17: [GetSCRRegisterEntry] Passed
14:39:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:17: Data_Status_After Erases          : 0
14:39:17: CPRM Security Support             : No Security
14:39:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:17: Spec. Version                     : Version 3.0X
14:39:17: Extended Security Support         : Extended_Security_Not_Supported
14:39:17: Command Support                   : COMMAND_SUPPORT
14:39:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E780>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 3928 ] 
14:39:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129990>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 3929 ] 
14:39:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:17: [ SetBusWidth(0x4) , Command count = 3930 ] 
14:39:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0606F7E0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3931 ] 
14:39:17: Protected Area Size 0x28000
14:39:17: Bus Width           2
14:39:17: Secure Mode         0
14:39:17: Speed  Class        4
14:39:17: Perf Move           0
14:39:17: Au Size             9
14:39:17: Erase Size          15
14:39:17: Erase Timeout       1
14:39:17: Erase offset        1
14:39:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3932 ] 
14:39:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:17: Host Frequency set to 100000 KHz
14:39:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:17: ####CSD Registe 2.0 Values####
14:39:17: CSD_STRUCTURE                                 :0x1
14:39:17: Reserv1                                       :0x0
14:39:17: Time Access 1 TAAC                            :0xe
14:39:17: Time Access 2 NSAC*100                        :0x0
14:39:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:17: Card Command Classess CCC                     :0x5b5
14:39:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:17: DSR(driver stage register)  DSR_IMP           :0x0
14:39:17: Reserv2                                       :0x0
14:39:17: Device Size C_SIZE                            :0xedc8
14:39:17: Reserv3                                       :0x0
14:39:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:17: Reserv4                                       :0x0
14:39:17: Write Speed Factor R2W_FACTOR                 :0x2
14:39:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:17: FILE_FORMAT_GRP                               :0x0
14:39:17: COPY flag                                     :0x1
14:39:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:17: File_Format                                   :0x0
14:39:17: CRC                                           :0x0
14:39:17: ####CSD Registe Values####  

14:39:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129210>, <py_sfcl.CommandDataDefinition object at 0x06129060>) , Command count = 3933 ] 
14:39:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A80>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 3934 ] 
14:39:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F705 to EndLba:0x3B6F785 with One's Pattern
14:39:18: [ WrLbaNoData(0x3B6F705, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3935 ] 
14:39:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F705 to EndLba:0x3B6F785 with One's Pattern 

14:39:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F785 to EndLba:0x3B6F805 with One's Pattern
14:39:18: [ WrLbaNoData(0x3B6F785, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3936 ] 
14:39:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F785 to EndLba:0x3B6F805 with One's Pattern 

14:39:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2322F to EndLba:0x25099 with Constant Pattern
14:39:18: [ RdLbaNoData(0x2322F, 0x1E6A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3937 ] 
14:39:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2322F to EndLba:0x25099 with Constant Pattern 

14:39:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3891
14:39:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C0C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CF90>, <py_sfcl.PySEnhancedCmdData object at 0x0611CBA0>, <None>) , Command count = 3938 ] 
14:39:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:20: Host Frequency set to 25000 KHz
14:39:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138E70>, 0x0, True) , Command count = 3939 ] 
14:39:20: [GO18_globalSetVolt]### Host voltage value is set.
14:39:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132D20>, 0x0, False) , Command count = 3940 ] 
14:39:20: [GO18_globalSetVolt]### Host voltage value is set.
14:39:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3941 ] 
14:39:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3942 ] 
14:39:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3943 ] 
14:39:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAB0>, <py_sfcl.CommandDataDefinition object at 0x0611C990>) , Command count = 3944 ] 
14:39:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3930>, <py_sfcl.CommandDataDefinition object at 0x060E37B0>) , Command count = 3945 ] 
14:39:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:20: [ SetCardRCA(0x1, 0xD555) , Command count = 3946 ] 
14:39:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:20: Host Frequency set to 25000 KHz
14:39:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:20: ####CSD Registe 2.0 Values####
14:39:20: CSD_STRUCTURE                                 :0x1
14:39:20: Reserv1                                       :0x0
14:39:20: Time Access 1 TAAC                            :0xe
14:39:20: Time Access 2 NSAC*100                        :0x0
14:39:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:20: Card Command Classess CCC                     :0x5b5
14:39:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:20: DSR(driver stage register)  DSR_IMP           :0x0
14:39:20: Reserv2                                       :0x0
14:39:20: Device Size C_SIZE                            :0xedc8
14:39:20: Reserv3                                       :0x0
14:39:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:20: Reserv4                                       :0x0
14:39:20: Write Speed Factor R2W_FACTOR                 :0x2
14:39:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:20: FILE_FORMAT_GRP                               :0x0
14:39:20: COPY flag                                     :0x1
14:39:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:20: File_Format                                   :0x0
14:39:20: CRC                                           :0x0
14:39:20: ####CSD Registe Values####  

14:39:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:20: [GetSCRRegisterEntry] Passed
14:39:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:20: Data_Status_After Erases          : 0
14:39:20: CPRM Security Support             : No Security
14:39:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:20: Spec. Version                     : Version 3.0X
14:39:20: Extended Security Support         : Extended_Security_Not_Supported
14:39:20: Command Support                   : COMMAND_SUPPORT
14:39:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCF0>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 3947 ] 
14:39:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 3948 ] 
14:39:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:20: [ SetBusWidth(0x4) , Command count = 3949 ] 
14:39:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3950 ] 
14:39:20: Protected Area Size 0x28000
14:39:20: Bus Width           2
14:39:20: Secure Mode         0
14:39:20: Speed  Class        4
14:39:20: Perf Move           0
14:39:20: Au Size             9
14:39:20: Erase Size          15
14:39:20: Erase Timeout       1
14:39:20: Erase offset        1
14:39:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3951 ] 
14:39:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:20: Host Frequency set to 100000 KHz
14:39:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:20: ####CSD Registe 2.0 Values####
14:39:20: CSD_STRUCTURE                                 :0x1
14:39:20: Reserv1                                       :0x0
14:39:20: Time Access 1 TAAC                            :0xe
14:39:20: Time Access 2 NSAC*100                        :0x0
14:39:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:20: Card Command Classess CCC                     :0x5b5
14:39:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:20: DSR(driver stage register)  DSR_IMP           :0x0
14:39:20: Reserv2                                       :0x0
14:39:20: Device Size C_SIZE                            :0xedc8
14:39:20: Reserv3                                       :0x0
14:39:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:21: Reserv4                                       :0x0
14:39:21: Write Speed Factor R2W_FACTOR                 :0x2
14:39:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:21: FILE_FORMAT_GRP                               :0x0
14:39:21: COPY flag                                     :0x1
14:39:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:21: File_Format                                   :0x0
14:39:21: CRC                                           :0x0
14:39:21: ####CSD Registe Values####  

14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BA0>, <py_sfcl.CommandDataDefinition object at 0x06129390>) , Command count = 3952 ] 
14:39:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 3953 ] 
14:39:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FAD4 to EndLba:0x3B6FB54 with One's Pattern
14:39:21: [ WrLbaNoData(0x3B6FAD4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3954 ] 
14:39:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FAD4 to EndLba:0x3B6FB54 with One's Pattern 

14:39:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FB54 to EndLba:0x3B6FBD4 with One's Pattern
14:39:21: [ WrLbaNoData(0x3B6FB54, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3955 ] 
14:39:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FB54 to EndLba:0x3B6FBD4 with One's Pattern 

14:39:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2322F to EndLba:0x25097 with Constant Pattern
14:39:21: [ RdLbaNoData(0x2322F, 0x1E68, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3956 ] 
14:39:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2322F to EndLba:0x25097 with Constant Pattern 

14:39:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3890
14:39:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F2A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C540>, <py_sfcl.PySEnhancedCmdData object at 0x06129D50>, <None>) , Command count = 3957 ] 
14:39:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:23: Host Frequency set to 25000 KHz
14:39:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F7E0>, 0x0, True) , Command count = 3958 ] 
14:39:23: [GO18_globalSetVolt]### Host voltage value is set.
14:39:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3A20>, 0x0, False) , Command count = 3959 ] 
14:39:23: [GO18_globalSetVolt]### Host voltage value is set.
14:39:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3960 ] 
14:39:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3961 ] 
14:39:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3962 ] 
14:39:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CF0>, <py_sfcl.CommandDataDefinition object at 0x061299F0>) , Command count = 3963 ] 
14:39:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061293C0>, <py_sfcl.CommandDataDefinition object at 0x0611C090>) , Command count = 3964 ] 
14:39:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:23: [ SetCardRCA(0x1, 0xD555) , Command count = 3965 ] 
14:39:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:24: Host Frequency set to 25000 KHz
14:39:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:24: ####CSD Registe 2.0 Values####
14:39:24: CSD_STRUCTURE                                 :0x1
14:39:24: Reserv1                                       :0x0
14:39:24: Time Access 1 TAAC                            :0xe
14:39:24: Time Access 2 NSAC*100                        :0x0
14:39:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:24: Card Command Classess CCC                     :0x5b5
14:39:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:24: DSR(driver stage register)  DSR_IMP           :0x0
14:39:24: Reserv2                                       :0x0
14:39:24: Device Size C_SIZE                            :0xedc8
14:39:24: Reserv3                                       :0x0
14:39:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:24: Reserv4                                       :0x0
14:39:24: Write Speed Factor R2W_FACTOR                 :0x2
14:39:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:24: FILE_FORMAT_GRP                               :0x0
14:39:24: COPY flag                                     :0x1
14:39:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:24: File_Format                                   :0x0
14:39:24: CRC                                           :0x0
14:39:24: ####CSD Registe Values####  

14:39:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:24: [GetSCRRegisterEntry] Passed
14:39:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:24: Data_Status_After Erases          : 0
14:39:24: CPRM Security Support             : No Security
14:39:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:24: Spec. Version                     : Version 3.0X
14:39:24: Extended Security Support         : Extended_Security_Not_Supported
14:39:24: Command Support                   : COMMAND_SUPPORT
14:39:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x0611C480>) , Command count = 3966 ] 
14:39:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 3967 ] 
14:39:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:24: [ SetBusWidth(0x4) , Command count = 3968 ] 
14:39:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3969 ] 
14:39:24: Protected Area Size 0x28000
14:39:24: Bus Width           2
14:39:24: Secure Mode         0
14:39:24: Speed  Class        4
14:39:24: Perf Move           0
14:39:24: Au Size             9
14:39:24: Erase Size          15
14:39:24: Erase Timeout       1
14:39:24: Erase offset        1
14:39:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3970 ] 
14:39:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:24: Host Frequency set to 100000 KHz
14:39:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:24: ####CSD Registe 2.0 Values####
14:39:24: CSD_STRUCTURE                                 :0x1
14:39:24: Reserv1                                       :0x0
14:39:24: Time Access 1 TAAC                            :0xe
14:39:24: Time Access 2 NSAC*100                        :0x0
14:39:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:24: Card Command Classess CCC                     :0x5b5
14:39:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:24: DSR(driver stage register)  DSR_IMP           :0x0
14:39:24: Reserv2                                       :0x0
14:39:24: Device Size C_SIZE                            :0xedc8
14:39:24: Reserv3                                       :0x0
14:39:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:24: Reserv4                                       :0x0
14:39:24: Write Speed Factor R2W_FACTOR                 :0x2
14:39:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:24: FILE_FORMAT_GRP                               :0x0
14:39:24: COPY flag                                     :0x1
14:39:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:24: File_Format                                   :0x0
14:39:24: CRC                                           :0x0
14:39:24: ####CSD Registe Values####  

14:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 3971 ] 
14:39:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 3972 ] 
14:39:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DFBD to EndLba:0x3B6E03D with One's Pattern
14:39:24: [ WrLbaNoData(0x3B6DFBD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3973 ] 
14:39:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DFBD to EndLba:0x3B6E03D with One's Pattern 

14:39:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E03D to EndLba:0x3B6E0BD with One's Pattern
14:39:24: [ WrLbaNoData(0x3B6E03D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3974 ] 
14:39:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E03D to EndLba:0x3B6E0BD with One's Pattern 

14:39:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23231 to EndLba:0x25097 with Constant Pattern
14:39:24: [ RdLbaNoData(0x23231, 0x1E66, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3975 ] 
14:39:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23231 to EndLba:0x25097 with Constant Pattern 

14:39:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3889
14:39:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129D80>, <py_sfcl.PySEnhancedCmdData object at 0x061298A0>, <None>) , Command count = 3976 ] 
14:39:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:26: Host Frequency set to 25000 KHz
14:39:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E39F0>, 0x0, True) , Command count = 3977 ] 
14:39:26: [GO18_globalSetVolt]### Host voltage value is set.
14:39:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FCC0>, 0x0, False) , Command count = 3978 ] 
14:39:27: [GO18_globalSetVolt]### Host voltage value is set.
14:39:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3979 ] 
14:39:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3980 ] 
14:39:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 3981 ] 
14:39:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CED0>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 3982 ] 
14:39:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 3983 ] 
14:39:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:27: [ SetCardRCA(0x1, 0xD555) , Command count = 3984 ] 
14:39:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:27: Host Frequency set to 25000 KHz
14:39:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:27: ####CSD Registe 2.0 Values####
14:39:27: CSD_STRUCTURE                                 :0x1
14:39:27: Reserv1                                       :0x0
14:39:27: Time Access 1 TAAC                            :0xe
14:39:27: Time Access 2 NSAC*100                        :0x0
14:39:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:27: Card Command Classess CCC                     :0x5b5
14:39:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:27: DSR(driver stage register)  DSR_IMP           :0x0
14:39:27: Reserv2                                       :0x0
14:39:27: Device Size C_SIZE                            :0xedc8
14:39:27: Reserv3                                       :0x0
14:39:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:27: Reserv4                                       :0x0
14:39:27: Write Speed Factor R2W_FACTOR                 :0x2
14:39:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:27: FILE_FORMAT_GRP                               :0x0
14:39:27: COPY flag                                     :0x1
14:39:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:27: File_Format                                   :0x0
14:39:27: CRC                                           :0x0
14:39:27: ####CSD Registe Values####  

14:39:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:27: [GetSCRRegisterEntry] Passed
14:39:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:27: Data_Status_After Erases          : 0
14:39:27: CPRM Security Support             : No Security
14:39:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:27: Spec. Version                     : Version 3.0X
14:39:27: Extended Security Support         : Extended_Security_Not_Supported
14:39:27: Command Support                   : COMMAND_SUPPORT
14:39:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E180>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 3985 ] 
14:39:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C840>, <py_sfcl.CommandDataDefinition object at 0x06129A20>) , Command count = 3986 ] 
14:39:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:27: [ SetBusWidth(0x4) , Command count = 3987 ] 
14:39:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 3988 ] 
14:39:27: Protected Area Size 0x28000
14:39:27: Bus Width           2
14:39:27: Secure Mode         0
14:39:27: Speed  Class        4
14:39:27: Perf Move           0
14:39:27: Au Size             9
14:39:27: Erase Size          15
14:39:27: Erase Timeout       1
14:39:27: Erase offset        1
14:39:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 3989 ] 
14:39:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:27: Host Frequency set to 100000 KHz
14:39:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:27: ####CSD Registe 2.0 Values####
14:39:27: CSD_STRUCTURE                                 :0x1
14:39:27: Reserv1                                       :0x0
14:39:27: Time Access 1 TAAC                            :0xe
14:39:27: Time Access 2 NSAC*100                        :0x0
14:39:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:27: Card Command Classess CCC                     :0x5b5
14:39:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:27: DSR(driver stage register)  DSR_IMP           :0x0
14:39:27: Reserv2                                       :0x0
14:39:27: Device Size C_SIZE                            :0xedc8
14:39:27: Reserv3                                       :0x0
14:39:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:27: Reserv4                                       :0x0
14:39:27: Write Speed Factor R2W_FACTOR                 :0x2
14:39:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:28: FILE_FORMAT_GRP                               :0x0
14:39:28: COPY flag                                     :0x1
14:39:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:28: File_Format                                   :0x0
14:39:28: CRC                                           :0x0
14:39:28: ####CSD Registe Values####  

14:39:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E210>, <py_sfcl.CommandDataDefinition object at 0x06129630>) , Command count = 3990 ] 
14:39:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C8D0>, <py_sfcl.CommandDataDefinition object at 0x061294B0>) , Command count = 3991 ] 
14:39:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FEA9 to EndLba:0x3B6FF29 with One's Pattern
14:39:28: [ WrLbaNoData(0x3B6FEA9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3992 ] 
14:39:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FEA9 to EndLba:0x3B6FF29 with One's Pattern 

14:39:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FF29 to EndLba:0x3B6FFA9 with One's Pattern
14:39:28: [ WrLbaNoData(0x3B6FF29, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 3993 ] 
14:39:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FF29 to EndLba:0x3B6FFA9 with One's Pattern 

14:39:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23231 to EndLba:0x25095 with Constant Pattern
14:39:28: [ RdLbaNoData(0x23231, 0x1E64, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 3994 ] 
14:39:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23231 to EndLba:0x25095 with Constant Pattern 

14:39:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3888
14:39:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E7B0>, <py_sfcl.PySEnhancedCmdData object at 0x06129E70>, <None>) , Command count = 3995 ] 
14:39:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:30: Host Frequency set to 25000 KHz
14:39:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CC00>, 0x0, True) , Command count = 3996 ] 
14:39:30: [GO18_globalSetVolt]### Host voltage value is set.
14:39:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F690>, 0x0, False) , Command count = 3997 ] 
14:39:30: [GO18_globalSetVolt]### Host voltage value is set.
14:39:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 3998 ] 
14:39:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 3999 ] 
14:39:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:30: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4000 ] 
14:39:30: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x0612E930>) , Command count = 4001 ] 
14:39:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x061294B0>) , Command count = 4002 ] 
14:39:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:30: [ SetCardRCA(0x1, 0xD555) , Command count = 4003 ] 
14:39:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:30: Host Frequency set to 25000 KHz
14:39:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:30: ####CSD Registe 2.0 Values####
14:39:30: CSD_STRUCTURE                                 :0x1
14:39:30: Reserv1                                       :0x0
14:39:30: Time Access 1 TAAC                            :0xe
14:39:30: Time Access 2 NSAC*100                        :0x0
14:39:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:30: Card Command Classess CCC                     :0x5b5
14:39:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:30: DSR(driver stage register)  DSR_IMP           :0x0
14:39:30: Reserv2                                       :0x0
14:39:30: Device Size C_SIZE                            :0xedc8
14:39:30: Reserv3                                       :0x0
14:39:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:30: Reserv4                                       :0x0
14:39:30: Write Speed Factor R2W_FACTOR                 :0x2
14:39:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:30: FILE_FORMAT_GRP                               :0x0
14:39:30: COPY flag                                     :0x1
14:39:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:30: File_Format                                   :0x0
14:39:30: CRC                                           :0x0
14:39:30: ####CSD Registe Values####  

14:39:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:30: [GetSCRRegisterEntry] Passed
14:39:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:30: Data_Status_After Erases          : 0
14:39:30: CPRM Security Support             : No Security
14:39:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:30: Spec. Version                     : Version 3.0X
14:39:30: Extended Security Support         : Extended_Security_Not_Supported
14:39:30: Command Support                   : COMMAND_SUPPORT
14:39:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1E0>, <py_sfcl.CommandDataDefinition object at 0x06129570>) , Command count = 4004 ] 
14:39:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x0612ECC0>) , Command count = 4005 ] 
14:39:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:30: [ SetBusWidth(0x4) , Command count = 4006 ] 
14:39:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4007 ] 
14:39:30: Protected Area Size 0x28000
14:39:30: Bus Width           2
14:39:30: Secure Mode         0
14:39:30: Speed  Class        4
14:39:30: Perf Move           0
14:39:30: Au Size             9
14:39:30: Erase Size          15
14:39:30: Erase Timeout       1
14:39:30: Erase offset        1
14:39:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4008 ] 
14:39:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:30: Host Frequency set to 100000 KHz
14:39:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:30: ####CSD Registe 2.0 Values####
14:39:30: CSD_STRUCTURE                                 :0x1
14:39:31: Reserv1                                       :0x0
14:39:31: Time Access 1 TAAC                            :0xe
14:39:31: Time Access 2 NSAC*100                        :0x0
14:39:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:31: Card Command Classess CCC                     :0x5b5
14:39:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:31: DSR(driver stage register)  DSR_IMP           :0x0
14:39:31: Reserv2                                       :0x0
14:39:31: Device Size C_SIZE                            :0xedc8
14:39:31: Reserv3                                       :0x0
14:39:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:31: Reserv4                                       :0x0
14:39:31: Write Speed Factor R2W_FACTOR                 :0x2
14:39:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:31: FILE_FORMAT_GRP                               :0x0
14:39:31: COPY flag                                     :0x1
14:39:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:31: File_Format                                   :0x0
14:39:31: CRC                                           :0x0
14:39:31: ####CSD Registe Values####  

14:39:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606FB10>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 4009 ] 
14:39:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 4010 ] 
14:39:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D719 to EndLba:0x3B6D799 with One's Pattern
14:39:31: [ WrLbaNoData(0x3B6D719, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4011 ] 
14:39:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D719 to EndLba:0x3B6D799 with One's Pattern 

14:39:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D799 to EndLba:0x3B6D819 with One's Pattern
14:39:31: [ WrLbaNoData(0x3B6D799, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4012 ] 
14:39:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D799 to EndLba:0x3B6D819 with One's Pattern 

14:39:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23233 to EndLba:0x25095 with Constant Pattern
14:39:31: [ RdLbaNoData(0x23233, 0x1E62, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4013 ] 
14:39:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23233 to EndLba:0x25095 with Constant Pattern 

14:39:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3887
14:39:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F810>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E8A0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E1B0>, <None>) , Command count = 4014 ] 
14:39:31: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:33: Host Frequency set to 25000 KHz
14:39:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CE40>, 0x0, True) , Command count = 4015 ] 
14:39:33: [GO18_globalSetVolt]### Host voltage value is set.
14:39:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132C30>, 0x0, False) , Command count = 4016 ] 
14:39:33: [GO18_globalSetVolt]### Host voltage value is set.
14:39:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4017 ] 
14:39:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4018 ] 
14:39:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4019 ] 
14:39:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x061325D0>) , Command count = 4020 ] 
14:39:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x0612E390>) , Command count = 4021 ] 
14:39:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:34: [ SetCardRCA(0x1, 0xD555) , Command count = 4022 ] 
14:39:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:34: Host Frequency set to 25000 KHz
14:39:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:34: ####CSD Registe 2.0 Values####
14:39:34: CSD_STRUCTURE                                 :0x1
14:39:34: Reserv1                                       :0x0
14:39:34: Time Access 1 TAAC                            :0xe
14:39:34: Time Access 2 NSAC*100                        :0x0
14:39:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:34: Card Command Classess CCC                     :0x5b5
14:39:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:34: DSR(driver stage register)  DSR_IMP           :0x0
14:39:34: Reserv2                                       :0x0
14:39:34: Device Size C_SIZE                            :0xedc8
14:39:34: Reserv3                                       :0x0
14:39:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:34: Reserv4                                       :0x0
14:39:34: Write Speed Factor R2W_FACTOR                 :0x2
14:39:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:34: FILE_FORMAT_GRP                               :0x0
14:39:34: COPY flag                                     :0x1
14:39:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:34: File_Format                                   :0x0
14:39:34: CRC                                           :0x0
14:39:34: ####CSD Registe Values####  

14:39:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:34: [GetSCRRegisterEntry] Passed
14:39:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:34: Data_Status_After Erases          : 0
14:39:34: CPRM Security Support             : No Security
14:39:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:34: Spec. Version                     : Version 3.0X
14:39:34: Extended Security Support         : Extended_Security_Not_Supported
14:39:34: Command Support                   : COMMAND_SUPPORT
14:39:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB40>, <py_sfcl.CommandDataDefinition object at 0x0612E3F0>) , Command count = 4023 ] 
14:39:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C00>, <py_sfcl.CommandDataDefinition object at 0x06129FC0>) , Command count = 4024 ] 
14:39:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:34: [ SetBusWidth(0x4) , Command count = 4025 ] 
14:39:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E630>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4026 ] 
14:39:34: Protected Area Size 0x28000
14:39:34: Bus Width           2
14:39:34: Secure Mode         0
14:39:34: Speed  Class        4
14:39:34: Perf Move           0
14:39:34: Au Size             9
14:39:34: Erase Size          15
14:39:34: Erase Timeout       1
14:39:34: Erase offset        1
14:39:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4027 ] 
14:39:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:34: Host Frequency set to 100000 KHz
14:39:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:34: ####CSD Registe 2.0 Values####
14:39:34: CSD_STRUCTURE                                 :0x1
14:39:34: Reserv1                                       :0x0
14:39:34: Time Access 1 TAAC                            :0xe
14:39:34: Time Access 2 NSAC*100                        :0x0
14:39:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:34: Card Command Classess CCC                     :0x5b5
14:39:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:34: DSR(driver stage register)  DSR_IMP           :0x0
14:39:34: Reserv2                                       :0x0
14:39:34: Device Size C_SIZE                            :0xedc8
14:39:34: Reserv3                                       :0x0
14:39:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:34: Reserv4                                       :0x0
14:39:34: Write Speed Factor R2W_FACTOR                 :0x2
14:39:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:34: FILE_FORMAT_GRP                               :0x0
14:39:34: COPY flag                                     :0x1
14:39:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:34: File_Format                                   :0x0
14:39:34: CRC                                           :0x0
14:39:34: ####CSD Registe Values####  

14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129360>, <py_sfcl.CommandDataDefinition object at 0x06132750>) , Command count = 4028 ] 
14:39:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F330>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 4029 ] 
14:39:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72254 to EndLba:0x3B722D4 with One's Pattern
14:39:35: [ WrLbaNoData(0x3B72254, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4030 ] 
14:39:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72254 to EndLba:0x3B722D4 with One's Pattern 

14:39:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B722D4 to EndLba:0x3B72354 with One's Pattern
14:39:35: [ WrLbaNoData(0x3B722D4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4031 ] 
14:39:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B722D4 to EndLba:0x3B72354 with One's Pattern 

14:39:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23233 to EndLba:0x25093 with Constant Pattern
14:39:35: [ RdLbaNoData(0x23233, 0x1E60, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4032 ] 
14:39:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23233 to EndLba:0x25093 with Constant Pattern 

14:39:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3886
14:39:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EC00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EC30>, <py_sfcl.PySEnhancedCmdData object at 0x06132570>, <None>) , Command count = 4033 ] 
14:39:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:37: Host Frequency set to 25000 KHz
14:39:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CD20>, 0x0, True) , Command count = 4034 ] 
14:39:37: [GO18_globalSetVolt]### Host voltage value is set.
14:39:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E030>, 0x0, False) , Command count = 4035 ] 
14:39:37: [GO18_globalSetVolt]### Host voltage value is set.
14:39:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4036 ] 
14:39:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4037 ] 
14:39:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4038 ] 
14:39:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132FC0>, <py_sfcl.CommandDataDefinition object at 0x06132C90>) , Command count = 4039 ] 
14:39:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x0612EF00>) , Command count = 4040 ] 
14:39:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:37: [ SetCardRCA(0x1, 0xD555) , Command count = 4041 ] 
14:39:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:37: Host Frequency set to 25000 KHz
14:39:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:37: ####CSD Registe 2.0 Values####
14:39:37: CSD_STRUCTURE                                 :0x1
14:39:37: Reserv1                                       :0x0
14:39:37: Time Access 1 TAAC                            :0xe
14:39:37: Time Access 2 NSAC*100                        :0x0
14:39:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:37: Card Command Classess CCC                     :0x5b5
14:39:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:37: DSR(driver stage register)  DSR_IMP           :0x0
14:39:37: Reserv2                                       :0x0
14:39:37: Device Size C_SIZE                            :0xedc8
14:39:37: Reserv3                                       :0x0
14:39:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:37: Reserv4                                       :0x0
14:39:37: Write Speed Factor R2W_FACTOR                 :0x2
14:39:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:37: FILE_FORMAT_GRP                               :0x0
14:39:37: COPY flag                                     :0x1
14:39:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:37: File_Format                                   :0x0
14:39:37: CRC                                           :0x0
14:39:37: ####CSD Registe Values####  

14:39:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:37: [GetSCRRegisterEntry] Passed
14:39:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:37: Data_Status_After Erases          : 0
14:39:37: CPRM Security Support             : No Security
14:39:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:37: Spec. Version                     : Version 3.0X
14:39:37: Extended Security Support         : Extended_Security_Not_Supported
14:39:37: Command Support                   : COMMAND_SUPPORT
14:39:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF00>, <py_sfcl.CommandDataDefinition object at 0x0612EA80>) , Command count = 4042 ] 
14:39:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x061329C0>) , Command count = 4043 ] 
14:39:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:37: [ SetBusWidth(0x4) , Command count = 4044 ] 
14:39:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4045 ] 
14:39:37: Protected Area Size 0x28000
14:39:37: Bus Width           2
14:39:37: Secure Mode         0
14:39:37: Speed  Class        4
14:39:37: Perf Move           0
14:39:37: Au Size             9
14:39:37: Erase Size          15
14:39:37: Erase Timeout       1
14:39:37: Erase offset        1
14:39:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4046 ] 
14:39:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:37: Host Frequency set to 100000 KHz
14:39:37: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:37: ####CSD Registe 2.0 Values####
14:39:37: CSD_STRUCTURE                                 :0x1
14:39:37: Reserv1                                       :0x0
14:39:37: Time Access 1 TAAC                            :0xe
14:39:37: Time Access 2 NSAC*100                        :0x0
14:39:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:37: Card Command Classess CCC                     :0x5b5
14:39:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:38: DSR(driver stage register)  DSR_IMP           :0x0
14:39:38: Reserv2                                       :0x0
14:39:38: Device Size C_SIZE                            :0xedc8
14:39:38: Reserv3                                       :0x0
14:39:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:38: Reserv4                                       :0x0
14:39:38: Write Speed Factor R2W_FACTOR                 :0x2
14:39:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:38: FILE_FORMAT_GRP                               :0x0
14:39:38: COPY flag                                     :0x1
14:39:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:38: File_Format                                   :0x0
14:39:38: CRC                                           :0x0
14:39:38: ####CSD Registe Values####  

14:39:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED50>, <py_sfcl.CommandDataDefinition object at 0x06132390>) , Command count = 4047 ] 
14:39:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x06132420>) , Command count = 4048 ] 
14:39:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EF09 to EndLba:0x3B6EF89 with One's Pattern
14:39:38: [ WrLbaNoData(0x3B6EF09, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4049 ] 
14:39:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EF09 to EndLba:0x3B6EF89 with One's Pattern 

14:39:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EF89 to EndLba:0x3B6F009 with One's Pattern
14:39:38: [ WrLbaNoData(0x3B6EF89, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4050 ] 
14:39:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EF89 to EndLba:0x3B6F009 with One's Pattern 

14:39:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23235 to EndLba:0x25093 with Constant Pattern
14:39:38: [ RdLbaNoData(0x23235, 0x1E5E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4051 ] 
14:39:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23235 to EndLba:0x25093 with Constant Pattern 

14:39:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3885
14:39:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129F30>, <py_sfcl.PySEnhancedCmdData object at 0x06132B70>, <None>) , Command count = 4052 ] 
14:39:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:38: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:40: Host Frequency set to 25000 KHz
14:39:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:40: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:40: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E8D0>, 0x0, True) , Command count = 4053 ] 
14:39:40: [GO18_globalSetVolt]### Host voltage value is set.
14:39:40: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:40: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FEA0>, 0x0, False) , Command count = 4054 ] 
14:39:40: [GO18_globalSetVolt]### Host voltage value is set.
14:39:40: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4055 ] 
14:39:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4056 ] 
14:39:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4057 ] 
14:39:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 4058 ] 
14:39:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138450>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 4059 ] 
14:39:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:40: [ SetCardRCA(0x1, 0xD555) , Command count = 4060 ] 
14:39:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:40: Host Frequency set to 25000 KHz
14:39:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:40: ####CSD Registe 2.0 Values####
14:39:40: CSD_STRUCTURE                                 :0x1
14:39:40: Reserv1                                       :0x0
14:39:40: Time Access 1 TAAC                            :0xe
14:39:40: Time Access 2 NSAC*100                        :0x0
14:39:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:40: Card Command Classess CCC                     :0x5b5
14:39:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:40: DSR(driver stage register)  DSR_IMP           :0x0
14:39:40: Reserv2                                       :0x0
14:39:40: Device Size C_SIZE                            :0xedc8
14:39:40: Reserv3                                       :0x0
14:39:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:40: Reserv4                                       :0x0
14:39:40: Write Speed Factor R2W_FACTOR                 :0x2
14:39:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:40: FILE_FORMAT_GRP                               :0x0
14:39:40: COPY flag                                     :0x1
14:39:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:40: File_Format                                   :0x0
14:39:40: CRC                                           :0x0
14:39:40: ####CSD Registe Values####  

14:39:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:41: [GetSCRRegisterEntry] Passed
14:39:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:41: Data_Status_After Erases          : 0
14:39:41: CPRM Security Support             : No Security
14:39:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:41: Spec. Version                     : Version 3.0X
14:39:41: Extended Security Support         : Extended_Security_Not_Supported
14:39:41: Command Support                   : COMMAND_SUPPORT
14:39:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E720>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 4061 ] 
14:39:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x06132F30>) , Command count = 4062 ] 
14:39:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:41: [ SetBusWidth(0x4) , Command count = 4063 ] 
14:39:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4064 ] 
14:39:41: Protected Area Size 0x28000
14:39:41: Bus Width           2
14:39:41: Secure Mode         0
14:39:41: Speed  Class        4
14:39:41: Perf Move           0
14:39:41: Au Size             9
14:39:41: Erase Size          15
14:39:41: Erase Timeout       1
14:39:41: Erase offset        1
14:39:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4065 ] 
14:39:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:41: Host Frequency set to 100000 KHz
14:39:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:41: ####CSD Registe 2.0 Values####
14:39:41: CSD_STRUCTURE                                 :0x1
14:39:41: Reserv1                                       :0x0
14:39:41: Time Access 1 TAAC                            :0xe
14:39:41: Time Access 2 NSAC*100                        :0x0
14:39:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:41: Card Command Classess CCC                     :0x5b5
14:39:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:41: DSR(driver stage register)  DSR_IMP           :0x0
14:39:41: Reserv2                                       :0x0
14:39:41: Device Size C_SIZE                            :0xedc8
14:39:41: Reserv3                                       :0x0
14:39:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:41: Reserv4                                       :0x0
14:39:41: Write Speed Factor R2W_FACTOR                 :0x2
14:39:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:41: FILE_FORMAT_GRP                               :0x0
14:39:41: COPY flag                                     :0x1
14:39:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:41: File_Format                                   :0x0
14:39:41: CRC                                           :0x0
14:39:41: ####CSD Registe Values####  

14:39:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061380C0>, <py_sfcl.CommandDataDefinition object at 0x06132540>) , Command count = 4066 ] 
14:39:41: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 4067 ] 
14:39:41: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:41: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E02E to EndLba:0x3B6E0AE with One's Pattern
14:39:41: [ WrLbaNoData(0x3B6E02E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4068 ] 
14:39:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E02E to EndLba:0x3B6E0AE with One's Pattern 

14:39:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E0AE to EndLba:0x3B6E12E with One's Pattern
14:39:41: [ WrLbaNoData(0x3B6E0AE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4069 ] 
14:39:41: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E0AE to EndLba:0x3B6E12E with One's Pattern 

14:39:41: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23235 to EndLba:0x25091 with Constant Pattern
14:39:41: [ RdLbaNoData(0x23235, 0x1E5C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4070 ] 
14:39:41: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23235 to EndLba:0x25091 with Constant Pattern 

14:39:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3884
14:39:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138120>, <py_sfcl.PySEnhancedCmdData object at 0x061321E0>, <None>) , Command count = 4071 ] 
14:39:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:44: Host Frequency set to 25000 KHz
14:39:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EFC0>, 0x0, True) , Command count = 4072 ] 
14:39:44: [GO18_globalSetVolt]### Host voltage value is set.
14:39:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F900>, 0x0, False) , Command count = 4073 ] 
14:39:44: [GO18_globalSetVolt]### Host voltage value is set.
14:39:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4074 ] 
14:39:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4075 ] 
14:39:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4076 ] 
14:39:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x06138660>) , Command count = 4077 ] 
14:39:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138C90>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 4078 ] 
14:39:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:44: [ SetCardRCA(0x1, 0xD555) , Command count = 4079 ] 
14:39:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:44: Host Frequency set to 25000 KHz
14:39:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:44: ####CSD Registe 2.0 Values####
14:39:44: CSD_STRUCTURE                                 :0x1
14:39:44: Reserv1                                       :0x0
14:39:44: Time Access 1 TAAC                            :0xe
14:39:44: Time Access 2 NSAC*100                        :0x0
14:39:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:44: Card Command Classess CCC                     :0x5b5
14:39:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:44: DSR(driver stage register)  DSR_IMP           :0x0
14:39:44: Reserv2                                       :0x0
14:39:44: Device Size C_SIZE                            :0xedc8
14:39:44: Reserv3                                       :0x0
14:39:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:44: Reserv4                                       :0x0
14:39:44: Write Speed Factor R2W_FACTOR                 :0x2
14:39:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:44: FILE_FORMAT_GRP                               :0x0
14:39:44: COPY flag                                     :0x1
14:39:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:44: File_Format                                   :0x0
14:39:44: CRC                                           :0x0
14:39:44: ####CSD Registe Values####  

14:39:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:44: [GetSCRRegisterEntry] Passed
14:39:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:44: Data_Status_After Erases          : 0
14:39:44: CPRM Security Support             : No Security
14:39:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:44: Spec. Version                     : Version 3.0X
14:39:44: Extended Security Support         : Extended_Security_Not_Supported
14:39:44: Command Support                   : COMMAND_SUPPORT
14:39:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FDB0>, <py_sfcl.CommandDataDefinition object at 0x06129690>) , Command count = 4080 ] 
14:39:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C450>, <py_sfcl.CommandDataDefinition object at 0x06132360>) , Command count = 4081 ] 
14:39:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:44: [ SetBusWidth(0x4) , Command count = 4082 ] 
14:39:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138E10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4083 ] 
14:39:44: Protected Area Size 0x28000
14:39:44: Bus Width           2
14:39:44: Secure Mode         0
14:39:44: Speed  Class        4
14:39:44: Perf Move           0
14:39:44: Au Size             9
14:39:44: Erase Size          15
14:39:44: Erase Timeout       1
14:39:44: Erase offset        1
14:39:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4084 ] 
14:39:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:44: Host Frequency set to 100000 KHz
14:39:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:44: ####CSD Registe 2.0 Values####
14:39:44: CSD_STRUCTURE                                 :0x1
14:39:44: Reserv1                                       :0x0
14:39:44: Time Access 1 TAAC                            :0xe
14:39:44: Time Access 2 NSAC*100                        :0x0
14:39:44: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:44: Card Command Classess CCC                     :0x5b5
14:39:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:44: DSR(driver stage register)  DSR_IMP           :0x0
14:39:44: Reserv2                                       :0x0
14:39:44: Device Size C_SIZE                            :0xedc8
14:39:44: Reserv3                                       :0x0
14:39:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:45: Reserv4                                       :0x0
14:39:45: Write Speed Factor R2W_FACTOR                 :0x2
14:39:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:45: FILE_FORMAT_GRP                               :0x0
14:39:45: COPY flag                                     :0x1
14:39:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:45: File_Format                                   :0x0
14:39:45: CRC                                           :0x0
14:39:45: ####CSD Registe Values####  

14:39:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138720>, <py_sfcl.CommandDataDefinition object at 0x06132F00>) , Command count = 4085 ] 
14:39:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 4086 ] 
14:39:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D8AF to EndLba:0x3B6D92F with One's Pattern
14:39:45: [ WrLbaNoData(0x3B6D8AF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4087 ] 
14:39:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D8AF to EndLba:0x3B6D92F with One's Pattern 

14:39:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D92F to EndLba:0x3B6D9AF with One's Pattern
14:39:45: [ WrLbaNoData(0x3B6D92F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4088 ] 
14:39:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D92F to EndLba:0x3B6D9AF with One's Pattern 

14:39:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23237 to EndLba:0x25091 with Constant Pattern
14:39:45: [ RdLbaNoData(0x23237, 0x1E5A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4089 ] 
14:39:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23237 to EndLba:0x25091 with Constant Pattern 

14:39:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3883
14:39:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132A50>, <py_sfcl.PySEnhancedCmdData object at 0x061383F0>, <None>) , Command count = 4090 ] 
14:39:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:47: Host Frequency set to 25000 KHz
14:39:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132510>, 0x0, True) , Command count = 4091 ] 
14:39:47: [GO18_globalSetVolt]### Host voltage value is set.
14:39:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138630>, 0x0, False) , Command count = 4092 ] 
14:39:47: [GO18_globalSetVolt]### Host voltage value is set.
14:39:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4093 ] 
14:39:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4094 ] 
14:39:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4095 ] 
14:39:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 4096 ] 
14:39:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x06138060>) , Command count = 4097 ] 
14:39:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:47: [ SetCardRCA(0x1, 0xD555) , Command count = 4098 ] 
14:39:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:47: Host Frequency set to 25000 KHz
14:39:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:47: ####CSD Registe 2.0 Values####
14:39:47: CSD_STRUCTURE                                 :0x1
14:39:47: Reserv1                                       :0x0
14:39:47: Time Access 1 TAAC                            :0xe
14:39:47: Time Access 2 NSAC*100                        :0x0
14:39:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:47: Card Command Classess CCC                     :0x5b5
14:39:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:47: DSR(driver stage register)  DSR_IMP           :0x0
14:39:47: Reserv2                                       :0x0
14:39:47: Device Size C_SIZE                            :0xedc8
14:39:47: Reserv3                                       :0x0
14:39:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:47: Reserv4                                       :0x0
14:39:47: Write Speed Factor R2W_FACTOR                 :0x2
14:39:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:47: FILE_FORMAT_GRP                               :0x0
14:39:47: COPY flag                                     :0x1
14:39:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:47: File_Format                                   :0x0
14:39:47: CRC                                           :0x0
14:39:47: ####CSD Registe Values####  

14:39:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:47: [GetSCRRegisterEntry] Passed
14:39:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:47: Data_Status_After Erases          : 0
14:39:47: CPRM Security Support             : No Security
14:39:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:47: Spec. Version                     : Version 3.0X
14:39:47: Extended Security Support         : Extended_Security_Not_Supported
14:39:47: Command Support                   : COMMAND_SUPPORT
14:39:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B70>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 4099 ] 
14:39:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 4100 ] 
14:39:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:47: [ SetBusWidth(0x4) , Command count = 4101 ] 
14:39:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138210>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4102 ] 
14:39:47: Protected Area Size 0x28000
14:39:47: Bus Width           2
14:39:47: Secure Mode         0
14:39:47: Speed  Class        4
14:39:47: Perf Move           0
14:39:47: Au Size             9
14:39:47: Erase Size          15
14:39:47: Erase Timeout       1
14:39:47: Erase offset        1
14:39:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4103 ] 
14:39:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:47: Host Frequency set to 100000 KHz
14:39:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:47: ####CSD Registe 2.0 Values####
14:39:47: CSD_STRUCTURE                                 :0x1
14:39:48: Reserv1                                       :0x0
14:39:48: Time Access 1 TAAC                            :0xe
14:39:48: Time Access 2 NSAC*100                        :0x0
14:39:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:48: Card Command Classess CCC                     :0x5b5
14:39:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:48: DSR(driver stage register)  DSR_IMP           :0x0
14:39:48: Reserv2                                       :0x0
14:39:48: Device Size C_SIZE                            :0xedc8
14:39:48: Reserv3                                       :0x0
14:39:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:48: Reserv4                                       :0x0
14:39:48: Write Speed Factor R2W_FACTOR                 :0x2
14:39:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:48: FILE_FORMAT_GRP                               :0x0
14:39:48: COPY flag                                     :0x1
14:39:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:48: File_Format                                   :0x0
14:39:48: CRC                                           :0x0
14:39:48: ####CSD Registe Values####  

14:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D20>, <py_sfcl.CommandDataDefinition object at 0x061386F0>) , Command count = 4104 ] 
14:39:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 4105 ] 
14:39:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70D09 to EndLba:0x3B70D89 with One's Pattern
14:39:48: [ WrLbaNoData(0x3B70D09, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4106 ] 
14:39:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70D09 to EndLba:0x3B70D89 with One's Pattern 

14:39:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70D89 to EndLba:0x3B70E09 with One's Pattern
14:39:48: [ WrLbaNoData(0x3B70D89, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4107 ] 
14:39:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70D89 to EndLba:0x3B70E09 with One's Pattern 

14:39:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23237 to EndLba:0x2508F with Constant Pattern
14:39:48: [ RdLbaNoData(0x23237, 0x1E58, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4108 ] 
14:39:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23237 to EndLba:0x2508F with Constant Pattern 

14:39:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3882
14:39:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:48: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FAB0>, <py_sfcl.PySEnhancedCmdData object at 0x06138390>, <None>) , Command count = 4109 ] 
14:39:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:50: Host Frequency set to 25000 KHz
14:39:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132930>, 0x0, True) , Command count = 4110 ] 
14:39:50: [GO18_globalSetVolt]### Host voltage value is set.
14:39:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132870>, 0x0, False) , Command count = 4111 ] 
14:39:50: [GO18_globalSetVolt]### Host voltage value is set.
14:39:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4112 ] 
14:39:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4113 ] 
14:39:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4114 ] 
14:39:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x0613F960>) , Command count = 4115 ] 
14:39:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x06138A80>) , Command count = 4116 ] 
14:39:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:50: [ SetCardRCA(0x1, 0xD555) , Command count = 4117 ] 
14:39:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:51: Host Frequency set to 25000 KHz
14:39:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:51: ####CSD Registe 2.0 Values####
14:39:51: CSD_STRUCTURE                                 :0x1
14:39:51: Reserv1                                       :0x0
14:39:51: Time Access 1 TAAC                            :0xe
14:39:51: Time Access 2 NSAC*100                        :0x0
14:39:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:51: Card Command Classess CCC                     :0x5b5
14:39:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:51: DSR(driver stage register)  DSR_IMP           :0x0
14:39:51: Reserv2                                       :0x0
14:39:51: Device Size C_SIZE                            :0xedc8
14:39:51: Reserv3                                       :0x0
14:39:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:51: Reserv4                                       :0x0
14:39:51: Write Speed Factor R2W_FACTOR                 :0x2
14:39:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:51: FILE_FORMAT_GRP                               :0x0
14:39:51: COPY flag                                     :0x1
14:39:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:51: File_Format                                   :0x0
14:39:51: CRC                                           :0x0
14:39:51: ####CSD Registe Values####  

14:39:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:51: [GetSCRRegisterEntry] Passed
14:39:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:51: Data_Status_After Erases          : 0
14:39:51: CPRM Security Support             : No Security
14:39:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:51: Spec. Version                     : Version 3.0X
14:39:51: Extended Security Support         : Extended_Security_Not_Supported
14:39:51: Command Support                   : COMMAND_SUPPORT
14:39:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324E0>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 4118 ] 
14:39:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F420>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 4119 ] 
14:39:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:51: [ SetBusWidth(0x4) , Command count = 4120 ] 
14:39:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061382A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4121 ] 
14:39:51: Protected Area Size 0x28000
14:39:51: Bus Width           2
14:39:51: Secure Mode         0
14:39:51: Speed  Class        4
14:39:51: Perf Move           0
14:39:51: Au Size             9
14:39:51: Erase Size          15
14:39:51: Erase Timeout       1
14:39:51: Erase offset        1
14:39:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4122 ] 
14:39:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:51: Host Frequency set to 100000 KHz
14:39:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:51: ####CSD Registe 2.0 Values####
14:39:51: CSD_STRUCTURE                                 :0x1
14:39:51: Reserv1                                       :0x0
14:39:51: Time Access 1 TAAC                            :0xe
14:39:51: Time Access 2 NSAC*100                        :0x0
14:39:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:51: Card Command Classess CCC                     :0x5b5
14:39:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:51: DSR(driver stage register)  DSR_IMP           :0x0
14:39:51: Reserv2                                       :0x0
14:39:51: Device Size C_SIZE                            :0xedc8
14:39:51: Reserv3                                       :0x0
14:39:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:51: Reserv4                                       :0x0
14:39:51: Write Speed Factor R2W_FACTOR                 :0x2
14:39:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:51: FILE_FORMAT_GRP                               :0x0
14:39:51: COPY flag                                     :0x1
14:39:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:51: File_Format                                   :0x0
14:39:51: CRC                                           :0x0
14:39:51: ####CSD Registe Values####  

14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1B0>, <py_sfcl.CommandDataDefinition object at 0x06138D80>) , Command count = 4123 ] 
14:39:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 4124 ] 
14:39:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B717F7 to EndLba:0x3B71877 with One's Pattern
14:39:51: [ WrLbaNoData(0x3B717F7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4125 ] 
14:39:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B717F7 to EndLba:0x3B71877 with One's Pattern 

14:39:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71877 to EndLba:0x3B718F7 with One's Pattern
14:39:51: [ WrLbaNoData(0x3B71877, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4126 ] 
14:39:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71877 to EndLba:0x3B718F7 with One's Pattern 

14:39:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23239 to EndLba:0x2508F with Constant Pattern
14:39:51: [ RdLbaNoData(0x23239, 0x1E56, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4127 ] 
14:39:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23239 to EndLba:0x2508F with Constant Pattern 

14:39:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3881
14:39:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF240>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F120>, <py_sfcl.PySEnhancedCmdData object at 0x06138330>, <None>) , Command count = 4128 ] 
14:39:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:53: Host Frequency set to 25000 KHz
14:39:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF120>, 0x0, True) , Command count = 4129 ] 
14:39:54: [GO18_globalSetVolt]### Host voltage value is set.
14:39:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FC30>, 0x0, False) , Command count = 4130 ] 
14:39:54: [GO18_globalSetVolt]### Host voltage value is set.
14:39:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4131 ] 
14:39:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4132 ] 
14:39:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4133 ] 
14:39:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 4134 ] 
14:39:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF420>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 4135 ] 
14:39:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:54: [ SetCardRCA(0x1, 0xD555) , Command count = 4136 ] 
14:39:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:54: Host Frequency set to 25000 KHz
14:39:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:54: ####CSD Registe 2.0 Values####
14:39:54: CSD_STRUCTURE                                 :0x1
14:39:54: Reserv1                                       :0x0
14:39:54: Time Access 1 TAAC                            :0xe
14:39:54: Time Access 2 NSAC*100                        :0x0
14:39:54: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:54: Card Command Classess CCC                     :0x5b5
14:39:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:54: DSR(driver stage register)  DSR_IMP           :0x0
14:39:54: Reserv2                                       :0x0
14:39:54: Device Size C_SIZE                            :0xedc8
14:39:54: Reserv3                                       :0x0
14:39:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:54: Reserv4                                       :0x0
14:39:54: Write Speed Factor R2W_FACTOR                 :0x2
14:39:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:54: FILE_FORMAT_GRP                               :0x0
14:39:54: COPY flag                                     :0x1
14:39:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:54: File_Format                                   :0x0
14:39:54: CRC                                           :0x0
14:39:54: ####CSD Registe Values####  

14:39:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:54: [GetSCRRegisterEntry] Passed
14:39:54: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:54: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:54: Data_Status_After Erases          : 0
14:39:54: CPRM Security Support             : No Security
14:39:54: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:54: Spec. Version                     : Version 3.0X
14:39:54: Extended Security Support         : Extended_Security_Not_Supported
14:39:54: Command Support                   : COMMAND_SUPPORT
14:39:54: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C30>, <py_sfcl.CommandDataDefinition object at 0x061455A0>) , Command count = 4137 ] 
14:39:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x061387B0>) , Command count = 4138 ] 
14:39:54: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:54: [ SetBusWidth(0x4) , Command count = 4139 ] 
14:39:54: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:54: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4140 ] 
14:39:54: Protected Area Size 0x28000
14:39:54: Bus Width           2
14:39:54: Secure Mode         0
14:39:54: Speed  Class        4
14:39:54: Perf Move           0
14:39:54: Au Size             9
14:39:54: Erase Size          15
14:39:54: Erase Timeout       1
14:39:54: Erase offset        1
14:39:54: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:54: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4141 ] 
14:39:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:54: Host Frequency set to 100000 KHz
14:39:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:54: ####CSD Registe 2.0 Values####
14:39:54: CSD_STRUCTURE                                 :0x1
14:39:54: Reserv1                                       :0x0
14:39:54: Time Access 1 TAAC                            :0xe
14:39:54: Time Access 2 NSAC*100                        :0x0
14:39:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:54: Card Command Classess CCC                     :0x5b5
14:39:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:54: DSR(driver stage register)  DSR_IMP           :0x0
14:39:54: Reserv2                                       :0x0
14:39:54: Device Size C_SIZE                            :0xedc8
14:39:54: Reserv3                                       :0x0
14:39:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:54: Reserv4                                       :0x0
14:39:54: Write Speed Factor R2W_FACTOR                 :0x2
14:39:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:55: FILE_FORMAT_GRP                               :0x0
14:39:55: COPY flag                                     :0x1
14:39:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:55: File_Format                                   :0x0
14:39:55: CRC                                           :0x0
14:39:55: ####CSD Registe Values####  

14:39:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1B0>, <py_sfcl.CommandDataDefinition object at 0x0613F720>) , Command count = 4142 ] 
14:39:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x061382A0>) , Command count = 4143 ] 
14:39:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D625 to EndLba:0x3B6D6A5 with One's Pattern
14:39:55: [ WrLbaNoData(0x3B6D625, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4144 ] 
14:39:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D625 to EndLba:0x3B6D6A5 with One's Pattern 

14:39:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D6A5 to EndLba:0x3B6D725 with One's Pattern
14:39:55: [ WrLbaNoData(0x3B6D6A5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4145 ] 
14:39:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D6A5 to EndLba:0x3B6D725 with One's Pattern 

14:39:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23239 to EndLba:0x2508D with Constant Pattern
14:39:55: [ RdLbaNoData(0x23239, 0x1E54, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4146 ] 
14:39:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23239 to EndLba:0x2508D with Constant Pattern 

14:39:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3880
14:39:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BB4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CF00>, <py_sfcl.PySEnhancedCmdData object at 0x060E3AE0>, <None>) , Command count = 4147 ] 
14:39:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:39:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:57: Host Frequency set to 25000 KHz
14:39:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:39:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:39:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F240>, 0x0, True) , Command count = 4148 ] 
14:39:57: [GO18_globalSetVolt]### Host voltage value is set.
14:39:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:39:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F390>, 0x0, False) , Command count = 4149 ] 
14:39:57: [GO18_globalSetVolt]### Host voltage value is set.
14:39:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4150 ] 
14:39:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:39:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4151 ] 
14:39:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:39:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:39:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:39:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:39:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:39:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4152 ] 
14:39:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:39:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x0613F6C0>) , Command count = 4153 ] 
14:39:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C900>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 4154 ] 
14:39:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:39:57: [ SetCardRCA(0x1, 0xD555) , Command count = 4155 ] 
14:39:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:39:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:39:57: Host Frequency set to 25000 KHz
14:39:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:39:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:57: ####CSD Registe 2.0 Values####
14:39:57: CSD_STRUCTURE                                 :0x1
14:39:57: Reserv1                                       :0x0
14:39:57: Time Access 1 TAAC                            :0xe
14:39:57: Time Access 2 NSAC*100                        :0x0
14:39:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:39:57: Card Command Classess CCC                     :0x5b5
14:39:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:57: DSR(driver stage register)  DSR_IMP           :0x0
14:39:57: Reserv2                                       :0x0
14:39:57: Device Size C_SIZE                            :0xedc8
14:39:57: Reserv3                                       :0x0
14:39:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:57: Reserv4                                       :0x0
14:39:57: Write Speed Factor R2W_FACTOR                 :0x2
14:39:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:57: FILE_FORMAT_GRP                               :0x0
14:39:57: COPY flag                                     :0x1
14:39:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:57: File_Format                                   :0x0
14:39:57: CRC                                           :0x0
14:39:57: ####CSD Registe Values####  

14:39:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:39:57: [GetSCRRegisterEntry] Passed
14:39:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:39:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:39:57: Data_Status_After Erases          : 0
14:39:57: CPRM Security Support             : No Security
14:39:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:39:57: Spec. Version                     : Version 3.0X
14:39:57: Extended Security Support         : Extended_Security_Not_Supported
14:39:57: Command Support                   : COMMAND_SUPPORT
14:39:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529EE40>, <py_sfcl.CommandDataDefinition object at 0x0613F660>) , Command count = 4156 ] 
14:39:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:39:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x052C1F60>) , Command count = 4157 ] 
14:39:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:39:57: [ SetBusWidth(0x4) , Command count = 4158 ] 
14:39:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:39:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4159 ] 
14:39:57: Protected Area Size 0x28000
14:39:57: Bus Width           2
14:39:57: Secure Mode         0
14:39:57: Speed  Class        4
14:39:57: Perf Move           0
14:39:57: Au Size             9
14:39:57: Erase Size          15
14:39:57: Erase Timeout       1
14:39:57: Erase offset        1
14:39:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:39:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:39:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:39:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4160 ] 
14:39:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:39:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:39:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:39:57: Host Frequency set to 100000 KHz
14:39:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:39:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:39:57: ####CSD Registe 2.0 Values####
14:39:57: CSD_STRUCTURE                                 :0x1
14:39:58: Reserv1                                       :0x0
14:39:58: Time Access 1 TAAC                            :0xe
14:39:58: Time Access 2 NSAC*100                        :0x0
14:39:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:39:58: Card Command Classess CCC                     :0x5b5
14:39:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:39:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:39:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:39:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:39:58: DSR(driver stage register)  DSR_IMP           :0x0
14:39:58: Reserv2                                       :0x0
14:39:58: Device Size C_SIZE                            :0xedc8
14:39:58: Reserv3                                       :0x0
14:39:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:39:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:39:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:39:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:39:58: Reserv4                                       :0x0
14:39:58: Write Speed Factor R2W_FACTOR                 :0x2
14:39:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:39:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:39:58: FILE_FORMAT_GRP                               :0x0
14:39:58: COPY flag                                     :0x1
14:39:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:39:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:39:58: File_Format                                   :0x0
14:39:58: CRC                                           :0x0
14:39:58: ####CSD Registe Values####  

14:39:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CEA0>, <py_sfcl.CommandDataDefinition object at 0x052C1C90>) , Command count = 4161 ] 
14:39:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:39:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0518AE70>) , Command count = 4162 ] 
14:39:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:39:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:39:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:39:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F0E8 to EndLba:0x3B6F168 with One's Pattern
14:39:58: [ WrLbaNoData(0x3B6F0E8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4163 ] 
14:39:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F0E8 to EndLba:0x3B6F168 with One's Pattern 

14:39:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F168 to EndLba:0x3B6F1E8 with One's Pattern
14:39:58: [ WrLbaNoData(0x3B6F168, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4164 ] 
14:39:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F168 to EndLba:0x3B6F1E8 with One's Pattern 

14:39:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:39:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2323B to EndLba:0x2508D with Constant Pattern
14:39:58: [ RdLbaNoData(0x2323B, 0x1E52, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4165 ] 
14:39:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2323B to EndLba:0x2508D with Constant Pattern 

14:39:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3879
14:39:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:39:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F990>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FA20>, <py_sfcl.PySEnhancedCmdData object at 0x0611CB40>, <None>) , Command count = 4166 ] 
14:39:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:39:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:00: Host Frequency set to 25000 KHz
14:40:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F030>, 0x0, True) , Command count = 4167 ] 
14:40:00: [GO18_globalSetVolt]### Host voltage value is set.
14:40:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFC30>, 0x0, False) , Command count = 4168 ] 
14:40:00: [GO18_globalSetVolt]### Host voltage value is set.
14:40:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4169 ] 
14:40:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4170 ] 
14:40:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4171 ] 
14:40:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C030>, <py_sfcl.CommandDataDefinition object at 0x0529B4B0>) , Command count = 4172 ] 
14:40:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 4173 ] 
14:40:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:01: [ SetCardRCA(0x1, 0xD555) , Command count = 4174 ] 
14:40:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:01: Host Frequency set to 25000 KHz
14:40:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:01: ####CSD Registe 2.0 Values####
14:40:01: CSD_STRUCTURE                                 :0x1
14:40:01: Reserv1                                       :0x0
14:40:01: Time Access 1 TAAC                            :0xe
14:40:01: Time Access 2 NSAC*100                        :0x0
14:40:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:01: Card Command Classess CCC                     :0x5b5
14:40:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:01: DSR(driver stage register)  DSR_IMP           :0x0
14:40:01: Reserv2                                       :0x0
14:40:01: Device Size C_SIZE                            :0xedc8
14:40:01: Reserv3                                       :0x0
14:40:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:01: Reserv4                                       :0x0
14:40:01: Write Speed Factor R2W_FACTOR                 :0x2
14:40:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:01: FILE_FORMAT_GRP                               :0x0
14:40:01: COPY flag                                     :0x1
14:40:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:01: File_Format                                   :0x0
14:40:01: CRC                                           :0x0
14:40:01: ####CSD Registe Values####  

14:40:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:01: [GetSCRRegisterEntry] Passed
14:40:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:01: Data_Status_After Erases          : 0
14:40:01: CPRM Security Support             : No Security
14:40:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:01: Spec. Version                     : Version 3.0X
14:40:01: Extended Security Support         : Extended_Security_Not_Supported
14:40:01: Command Support                   : COMMAND_SUPPORT
14:40:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1DE0>, <py_sfcl.CommandDataDefinition object at 0x060E38A0>) , Command count = 4175 ] 
14:40:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F570>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 4176 ] 
14:40:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:01: [ SetBusWidth(0x4) , Command count = 4177 ] 
14:40:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052C1E70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4178 ] 
14:40:01: Protected Area Size 0x28000
14:40:01: Bus Width           2
14:40:01: Secure Mode         0
14:40:01: Speed  Class        4
14:40:01: Perf Move           0
14:40:01: Au Size             9
14:40:01: Erase Size          15
14:40:01: Erase Timeout       1
14:40:01: Erase offset        1
14:40:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4179 ] 
14:40:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:01: Host Frequency set to 100000 KHz
14:40:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:01: ####CSD Registe 2.0 Values####
14:40:01: CSD_STRUCTURE                                 :0x1
14:40:01: Reserv1                                       :0x0
14:40:01: Time Access 1 TAAC                            :0xe
14:40:01: Time Access 2 NSAC*100                        :0x0
14:40:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:01: Card Command Classess CCC                     :0x5b5
14:40:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:01: DSR(driver stage register)  DSR_IMP           :0x0
14:40:01: Reserv2                                       :0x0
14:40:01: Device Size C_SIZE                            :0xedc8
14:40:01: Reserv3                                       :0x0
14:40:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:01: Reserv4                                       :0x0
14:40:01: Write Speed Factor R2W_FACTOR                 :0x2
14:40:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:01: FILE_FORMAT_GRP                               :0x0
14:40:01: COPY flag                                     :0x1
14:40:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:01: File_Format                                   :0x0
14:40:01: CRC                                           :0x0
14:40:01: ####CSD Registe Values####  

14:40:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E780>, <py_sfcl.CommandDataDefinition object at 0x0613F5A0>) , Command count = 4180 ] 
14:40:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA80>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 4181 ] 
14:40:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7186D to EndLba:0x3B718ED with One's Pattern
14:40:01: [ WrLbaNoData(0x3B7186D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4182 ] 
14:40:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7186D to EndLba:0x3B718ED with One's Pattern 

14:40:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B718ED to EndLba:0x3B7196D with One's Pattern
14:40:01: [ WrLbaNoData(0x3B718ED, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4183 ] 
14:40:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B718ED to EndLba:0x3B7196D with One's Pattern 

14:40:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2323B to EndLba:0x2508B with Constant Pattern
14:40:02: [ RdLbaNoData(0x2323B, 0x1E50, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4184 ] 
14:40:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2323B to EndLba:0x2508B with Constant Pattern 

14:40:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3878
14:40:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129060>, <py_sfcl.PySEnhancedCmdData object at 0x0611CAE0>, <None>) , Command count = 4185 ] 
14:40:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:04: Host Frequency set to 25000 KHz
14:40:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1FC0>, 0x0, True) , Command count = 4186 ] 
14:40:04: [GO18_globalSetVolt]### Host voltage value is set.
14:40:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F210>, 0x0, False) , Command count = 4187 ] 
14:40:04: [GO18_globalSetVolt]### Host voltage value is set.
14:40:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4188 ] 
14:40:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4189 ] 
14:40:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:04: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4190 ] 
14:40:04: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E70>, <py_sfcl.CommandDataDefinition object at 0x0611C9F0>) , Command count = 4191 ] 
14:40:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F090>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 4192 ] 
14:40:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:04: [ SetCardRCA(0x1, 0xD555) , Command count = 4193 ] 
14:40:04: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:04: Host Frequency set to 25000 KHz
14:40:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:04: ####CSD Registe 2.0 Values####
14:40:04: CSD_STRUCTURE                                 :0x1
14:40:04: Reserv1                                       :0x0
14:40:04: Time Access 1 TAAC                            :0xe
14:40:04: Time Access 2 NSAC*100                        :0x0
14:40:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:04: Card Command Classess CCC                     :0x5b5
14:40:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:04: DSR(driver stage register)  DSR_IMP           :0x0
14:40:04: Reserv2                                       :0x0
14:40:04: Device Size C_SIZE                            :0xedc8
14:40:04: Reserv3                                       :0x0
14:40:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:04: Reserv4                                       :0x0
14:40:04: Write Speed Factor R2W_FACTOR                 :0x2
14:40:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:04: FILE_FORMAT_GRP                               :0x0
14:40:04: COPY flag                                     :0x1
14:40:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:04: File_Format                                   :0x0
14:40:04: CRC                                           :0x0
14:40:04: ####CSD Registe Values####  

14:40:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:04: [GetSCRRegisterEntry] Passed
14:40:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:04: Data_Status_After Erases          : 0
14:40:04: CPRM Security Support             : No Security
14:40:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:04: Spec. Version                     : Version 3.0X
14:40:04: Extended Security Support         : Extended_Security_Not_Supported
14:40:04: Command Support                   : COMMAND_SUPPORT
14:40:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F660>, <py_sfcl.CommandDataDefinition object at 0x060E3840>) , Command count = 4194 ] 
14:40:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A80>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 4195 ] 
14:40:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:04: [ SetBusWidth(0x4) , Command count = 4196 ] 
14:40:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4197 ] 
14:40:04: Protected Area Size 0x28000
14:40:04: Bus Width           2
14:40:04: Secure Mode         0
14:40:04: Speed  Class        4
14:40:04: Perf Move           0
14:40:04: Au Size             9
14:40:04: Erase Size          15
14:40:04: Erase Timeout       1
14:40:04: Erase offset        1
14:40:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4198 ] 
14:40:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:04: Host Frequency set to 100000 KHz
14:40:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:04: ####CSD Registe 2.0 Values####
14:40:04: CSD_STRUCTURE                                 :0x1
14:40:04: Reserv1                                       :0x0
14:40:04: Time Access 1 TAAC                            :0xe
14:40:04: Time Access 2 NSAC*100                        :0x0
14:40:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:04: Card Command Classess CCC                     :0x5b5
14:40:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:04: DSR(driver stage register)  DSR_IMP           :0x0
14:40:04: Reserv2                                       :0x0
14:40:04: Device Size C_SIZE                            :0xedc8
14:40:04: Reserv3                                       :0x0
14:40:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:05: Reserv4                                       :0x0
14:40:05: Write Speed Factor R2W_FACTOR                 :0x2
14:40:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:05: FILE_FORMAT_GRP                               :0x0
14:40:05: COPY flag                                     :0x1
14:40:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:05: File_Format                                   :0x0
14:40:05: CRC                                           :0x0
14:40:05: ####CSD Registe Values####  

14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCF0>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 4199 ] 
14:40:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0C0>, <py_sfcl.CommandDataDefinition object at 0x060E3930>) , Command count = 4200 ] 
14:40:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70207 to EndLba:0x3B70287 with One's Pattern
14:40:05: [ WrLbaNoData(0x3B70207, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4201 ] 
14:40:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70207 to EndLba:0x3B70287 with One's Pattern 

14:40:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70287 to EndLba:0x3B70307 with One's Pattern
14:40:05: [ WrLbaNoData(0x3B70287, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4202 ] 
14:40:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70287 to EndLba:0x3B70307 with One's Pattern 

14:40:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2323D to EndLba:0x2508B with Constant Pattern
14:40:05: [ RdLbaNoData(0x2323D, 0x1E4E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4203 ] 
14:40:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2323D to EndLba:0x2508B with Constant Pattern 

14:40:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3877
14:40:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:05: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129BA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129390>, <py_sfcl.PySEnhancedCmdData object at 0x06129270>, <None>) , Command count = 4204 ] 
14:40:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:05: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:07: Host Frequency set to 25000 KHz
14:40:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:07: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F6F0>, 0x0, True) , Command count = 4205 ] 
14:40:07: [GO18_globalSetVolt]### Host voltage value is set.
14:40:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F150>, 0x0, False) , Command count = 4206 ] 
14:40:07: [GO18_globalSetVolt]### Host voltage value is set.
14:40:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4207 ] 
14:40:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4208 ] 
14:40:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4209 ] 
14:40:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x06129DE0>) , Command count = 4210 ] 
14:40:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611CF90>) , Command count = 4211 ] 
14:40:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:07: [ SetCardRCA(0x1, 0xD555) , Command count = 4212 ] 
14:40:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:08: Host Frequency set to 25000 KHz
14:40:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:08: ####CSD Registe 2.0 Values####
14:40:08: CSD_STRUCTURE                                 :0x1
14:40:08: Reserv1                                       :0x0
14:40:08: Time Access 1 TAAC                            :0xe
14:40:08: Time Access 2 NSAC*100                        :0x0
14:40:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:08: Card Command Classess CCC                     :0x5b5
14:40:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:08: DSR(driver stage register)  DSR_IMP           :0x0
14:40:08: Reserv2                                       :0x0
14:40:08: Device Size C_SIZE                            :0xedc8
14:40:08: Reserv3                                       :0x0
14:40:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:08: Reserv4                                       :0x0
14:40:08: Write Speed Factor R2W_FACTOR                 :0x2
14:40:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:08: FILE_FORMAT_GRP                               :0x0
14:40:08: COPY flag                                     :0x1
14:40:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:08: File_Format                                   :0x0
14:40:08: CRC                                           :0x0
14:40:08: ####CSD Registe Values####  

14:40:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:08: [GetSCRRegisterEntry] Passed
14:40:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:08: Data_Status_After Erases          : 0
14:40:08: CPRM Security Support             : No Security
14:40:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:08: Spec. Version                     : Version 3.0X
14:40:08: Extended Security Support         : Extended_Security_Not_Supported
14:40:08: Command Support                   : COMMAND_SUPPORT
14:40:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE40>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 4213 ] 
14:40:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 4214 ] 
14:40:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:08: [ SetBusWidth(0x4) , Command count = 4215 ] 
14:40:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CB10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4216 ] 
14:40:08: Protected Area Size 0x28000
14:40:08: Bus Width           2
14:40:08: Secure Mode         0
14:40:08: Speed  Class        4
14:40:08: Perf Move           0
14:40:08: Au Size             9
14:40:08: Erase Size          15
14:40:08: Erase Timeout       1
14:40:08: Erase offset        1
14:40:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4217 ] 
14:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:08: Host Frequency set to 100000 KHz
14:40:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:08: ####CSD Registe 2.0 Values####
14:40:08: CSD_STRUCTURE                                 :0x1
14:40:08: Reserv1                                       :0x0
14:40:08: Time Access 1 TAAC                            :0xe
14:40:08: Time Access 2 NSAC*100                        :0x0
14:40:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:08: Card Command Classess CCC                     :0x5b5
14:40:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:08: DSR(driver stage register)  DSR_IMP           :0x0
14:40:08: Reserv2                                       :0x0
14:40:08: Device Size C_SIZE                            :0xedc8
14:40:08: Reserv3                                       :0x0
14:40:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:08: Reserv4                                       :0x0
14:40:08: Write Speed Factor R2W_FACTOR                 :0x2
14:40:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:08: FILE_FORMAT_GRP                               :0x0
14:40:08: COPY flag                                     :0x1
14:40:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:08: File_Format                                   :0x0
14:40:08: CRC                                           :0x0
14:40:08: ####CSD Registe Values####  

14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 4218 ] 
14:40:08: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129120>, <py_sfcl.CommandDataDefinition object at 0x0611C990>) , Command count = 4219 ] 
14:40:08: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:08: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7210D to EndLba:0x3B7218D with One's Pattern
14:40:08: [ WrLbaNoData(0x3B7210D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4220 ] 
14:40:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7210D to EndLba:0x3B7218D with One's Pattern 

14:40:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7218D to EndLba:0x3B7220D with One's Pattern
14:40:08: [ WrLbaNoData(0x3B7218D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4221 ] 
14:40:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7218D to EndLba:0x3B7220D with One's Pattern 

14:40:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2323D to EndLba:0x25089 with Constant Pattern
14:40:08: [ RdLbaNoData(0x2323D, 0x1E4C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4222 ] 
14:40:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2323D to EndLba:0x25089 with Constant Pattern 

14:40:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3876
14:40:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061293F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129090>, <None>) , Command count = 4223 ] 
14:40:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:10: Host Frequency set to 25000 KHz
14:40:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CC30>, 0x0, True) , Command count = 4224 ] 
14:40:10: [GO18_globalSetVolt]### Host voltage value is set.
14:40:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x061292D0>, 0x0, False) , Command count = 4225 ] 
14:40:11: [GO18_globalSetVolt]### Host voltage value is set.
14:40:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4226 ] 
14:40:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4227 ] 
14:40:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4228 ] 
14:40:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39F0>, <py_sfcl.CommandDataDefinition object at 0x0611C540>) , Command count = 4229 ] 
14:40:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061299C0>, <py_sfcl.CommandDataDefinition object at 0x06129F60>) , Command count = 4230 ] 
14:40:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:11: [ SetCardRCA(0x1, 0xD555) , Command count = 4231 ] 
14:40:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:11: Host Frequency set to 25000 KHz
14:40:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:11: ####CSD Registe 2.0 Values####
14:40:11: CSD_STRUCTURE                                 :0x1
14:40:11: Reserv1                                       :0x0
14:40:11: Time Access 1 TAAC                            :0xe
14:40:11: Time Access 2 NSAC*100                        :0x0
14:40:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:11: Card Command Classess CCC                     :0x5b5
14:40:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:11: DSR(driver stage register)  DSR_IMP           :0x0
14:40:11: Reserv2                                       :0x0
14:40:11: Device Size C_SIZE                            :0xedc8
14:40:11: Reserv3                                       :0x0
14:40:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:11: Reserv4                                       :0x0
14:40:11: Write Speed Factor R2W_FACTOR                 :0x2
14:40:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:11: FILE_FORMAT_GRP                               :0x0
14:40:11: COPY flag                                     :0x1
14:40:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:11: File_Format                                   :0x0
14:40:11: CRC                                           :0x0
14:40:11: ####CSD Registe Values####  

14:40:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:11: [GetSCRRegisterEntry] Passed
14:40:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:11: Data_Status_After Erases          : 0
14:40:11: CPRM Security Support             : No Security
14:40:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:11: Spec. Version                     : Version 3.0X
14:40:11: Extended Security Support         : Extended_Security_Not_Supported
14:40:11: Command Support                   : COMMAND_SUPPORT
14:40:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C4B0>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 4232 ] 
14:40:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 4233 ] 
14:40:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:11: [ SetBusWidth(0x4) , Command count = 4234 ] 
14:40:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129DB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4235 ] 
14:40:11: Protected Area Size 0x28000
14:40:11: Bus Width           2
14:40:11: Secure Mode         0
14:40:11: Speed  Class        4
14:40:11: Perf Move           0
14:40:11: Au Size             9
14:40:11: Erase Size          15
14:40:11: Erase Timeout       1
14:40:11: Erase offset        1
14:40:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4236 ] 
14:40:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:11: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:11: Host Frequency set to 100000 KHz
14:40:11: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:11: ####CSD Registe 2.0 Values####
14:40:11: CSD_STRUCTURE                                 :0x1
14:40:11: Reserv1                                       :0x0
14:40:11: Time Access 1 TAAC                            :0xe
14:40:11: Time Access 2 NSAC*100                        :0x0
14:40:11: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:11: Card Command Classess CCC                     :0x5b5
14:40:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:11: DSR(driver stage register)  DSR_IMP           :0x0
14:40:11: Reserv2                                       :0x0
14:40:11: Device Size C_SIZE                            :0xedc8
14:40:11: Reserv3                                       :0x0
14:40:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:11: Reserv4                                       :0x0
14:40:11: Write Speed Factor R2W_FACTOR                 :0x2
14:40:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:12: FILE_FORMAT_GRP                               :0x0
14:40:12: COPY flag                                     :0x1
14:40:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:12: File_Format                                   :0x0
14:40:12: CRC                                           :0x0
14:40:12: ####CSD Registe Values####  

14:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E180>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 4237 ] 
14:40:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x061293C0>) , Command count = 4238 ] 
14:40:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F9F7 to EndLba:0x3B6FA77 with One's Pattern
14:40:12: [ WrLbaNoData(0x3B6F9F7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4239 ] 
14:40:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F9F7 to EndLba:0x3B6FA77 with One's Pattern 

14:40:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA77 to EndLba:0x3B6FAF7 with One's Pattern
14:40:12: [ WrLbaNoData(0x3B6FA77, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4240 ] 
14:40:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA77 to EndLba:0x3B6FAF7 with One's Pattern 

14:40:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2323F to EndLba:0x25089 with Constant Pattern
14:40:12: [ RdLbaNoData(0x2323F, 0x1E4A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4241 ] 
14:40:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2323F to EndLba:0x25089 with Constant Pattern 

14:40:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3875
14:40:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129630>, <py_sfcl.PySEnhancedCmdData object at 0x06129A20>, <None>) , Command count = 4242 ] 
14:40:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:14: Host Frequency set to 25000 KHz
14:40:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E300>, 0x0, True) , Command count = 4243 ] 
14:40:14: [GO18_globalSetVolt]### Host voltage value is set.
14:40:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C7E0>, 0x0, False) , Command count = 4244 ] 
14:40:14: [GO18_globalSetVolt]### Host voltage value is set.
14:40:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4245 ] 
14:40:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4246 ] 
14:40:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:14: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4247 ] 
14:40:14: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC00>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 4248 ] 
14:40:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129AE0>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 4249 ] 
14:40:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:14: [ SetCardRCA(0x1, 0xD555) , Command count = 4250 ] 
14:40:14: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:14: Host Frequency set to 25000 KHz
14:40:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:14: ####CSD Registe 2.0 Values####
14:40:14: CSD_STRUCTURE                                 :0x1
14:40:14: Reserv1                                       :0x0
14:40:14: Time Access 1 TAAC                            :0xe
14:40:14: Time Access 2 NSAC*100                        :0x0
14:40:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:14: Card Command Classess CCC                     :0x5b5
14:40:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:14: DSR(driver stage register)  DSR_IMP           :0x0
14:40:14: Reserv2                                       :0x0
14:40:14: Device Size C_SIZE                            :0xedc8
14:40:14: Reserv3                                       :0x0
14:40:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:14: Reserv4                                       :0x0
14:40:14: Write Speed Factor R2W_FACTOR                 :0x2
14:40:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:14: FILE_FORMAT_GRP                               :0x0
14:40:14: COPY flag                                     :0x1
14:40:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:14: File_Format                                   :0x0
14:40:14: CRC                                           :0x0
14:40:14: ####CSD Registe Values####  

14:40:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:14: [GetSCRRegisterEntry] Passed
14:40:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:14: Data_Status_After Erases          : 0
14:40:14: CPRM Security Support             : No Security
14:40:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:14: Spec. Version                     : Version 3.0X
14:40:14: Extended Security Support         : Extended_Security_Not_Supported
14:40:14: Command Support                   : COMMAND_SUPPORT
14:40:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E750>, <py_sfcl.CommandDataDefinition object at 0x06145330>) , Command count = 4251 ] 
14:40:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C8D0>, <py_sfcl.CommandDataDefinition object at 0x0613F930>) , Command count = 4252 ] 
14:40:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:14: [ SetBusWidth(0x4) , Command count = 4253 ] 
14:40:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129750>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4254 ] 
14:40:14: Protected Area Size 0x28000
14:40:14: Bus Width           2
14:40:14: Secure Mode         0
14:40:14: Speed  Class        4
14:40:14: Perf Move           0
14:40:14: Au Size             9
14:40:14: Erase Size          15
14:40:14: Erase Timeout       1
14:40:14: Erase offset        1
14:40:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4255 ] 
14:40:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:14: Host Frequency set to 100000 KHz
14:40:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:14: ####CSD Registe 2.0 Values####
14:40:14: CSD_STRUCTURE                                 :0x1
14:40:15: Reserv1                                       :0x0
14:40:15: Time Access 1 TAAC                            :0xe
14:40:15: Time Access 2 NSAC*100                        :0x0
14:40:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:15: Card Command Classess CCC                     :0x5b5
14:40:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:15: DSR(driver stage register)  DSR_IMP           :0x0
14:40:15: Reserv2                                       :0x0
14:40:15: Device Size C_SIZE                            :0xedc8
14:40:15: Reserv3                                       :0x0
14:40:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:15: Reserv4                                       :0x0
14:40:15: Write Speed Factor R2W_FACTOR                 :0x2
14:40:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:15: FILE_FORMAT_GRP                               :0x0
14:40:15: COPY flag                                     :0x1
14:40:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:15: File_Format                                   :0x0
14:40:15: CRC                                           :0x0
14:40:15: ####CSD Registe Values####  

14:40:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1E0>, <py_sfcl.CommandDataDefinition object at 0x06129570>) , Command count = 4256 ] 
14:40:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061328D0>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 4257 ] 
14:40:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B709BE to EndLba:0x3B70A3E with One's Pattern
14:40:15: [ WrLbaNoData(0x3B709BE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4258 ] 
14:40:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B709BE to EndLba:0x3B70A3E with One's Pattern 

14:40:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A3E to EndLba:0x3B70ABE with One's Pattern
14:40:15: [ WrLbaNoData(0x3B70A3E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4259 ] 
14:40:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A3E to EndLba:0x3B70ABE with One's Pattern 

14:40:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2323F to EndLba:0x25087 with Constant Pattern
14:40:15: [ RdLbaNoData(0x2323F, 0x1E48, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4260 ] 
14:40:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2323F to EndLba:0x25087 with Constant Pattern 

14:40:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3874
14:40:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606FB10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612ECC0>, <py_sfcl.PySEnhancedCmdData object at 0x06138600>, <None>) , Command count = 4261 ] 
14:40:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:17: Host Frequency set to 25000 KHz
14:40:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EA50>, 0x0, True) , Command count = 4262 ] 
14:40:17: [GO18_globalSetVolt]### Host voltage value is set.
14:40:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129F90>, 0x0, False) , Command count = 4263 ] 
14:40:17: [GO18_globalSetVolt]### Host voltage value is set.
14:40:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4264 ] 
14:40:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4265 ] 
14:40:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4266 ] 
14:40:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE40>, <py_sfcl.CommandDataDefinition object at 0x0612E7B0>) , Command count = 4267 ] 
14:40:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 4268 ] 
14:40:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:18: [ SetCardRCA(0x1, 0xD555) , Command count = 4269 ] 
14:40:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:18: Host Frequency set to 25000 KHz
14:40:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:18: ####CSD Registe 2.0 Values####
14:40:18: CSD_STRUCTURE                                 :0x1
14:40:18: Reserv1                                       :0x0
14:40:18: Time Access 1 TAAC                            :0xe
14:40:18: Time Access 2 NSAC*100                        :0x0
14:40:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:18: Card Command Classess CCC                     :0x5b5
14:40:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:18: DSR(driver stage register)  DSR_IMP           :0x0
14:40:18: Reserv2                                       :0x0
14:40:18: Device Size C_SIZE                            :0xedc8
14:40:18: Reserv3                                       :0x0
14:40:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:18: Reserv4                                       :0x0
14:40:18: Write Speed Factor R2W_FACTOR                 :0x2
14:40:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:18: FILE_FORMAT_GRP                               :0x0
14:40:18: COPY flag                                     :0x1
14:40:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:18: File_Format                                   :0x0
14:40:18: CRC                                           :0x0
14:40:18: ####CSD Registe Values####  

14:40:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:18: [GetSCRRegisterEntry] Passed
14:40:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:18: Data_Status_After Erases          : 0
14:40:18: CPRM Security Support             : No Security
14:40:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:18: Spec. Version                     : Version 3.0X
14:40:18: Extended Security Support         : Extended_Security_Not_Supported
14:40:18: Command Support                   : COMMAND_SUPPORT
14:40:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB70>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 4270 ] 
14:40:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 4271 ] 
14:40:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:18: [ SetBusWidth(0x4) , Command count = 4272 ] 
14:40:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E450>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4273 ] 
14:40:18: Protected Area Size 0x28000
14:40:18: Bus Width           2
14:40:18: Secure Mode         0
14:40:18: Speed  Class        4
14:40:18: Perf Move           0
14:40:18: Au Size             9
14:40:18: Erase Size          15
14:40:18: Erase Timeout       1
14:40:18: Erase offset        1
14:40:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4274 ] 
14:40:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:18: Host Frequency set to 100000 KHz
14:40:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:18: ####CSD Registe 2.0 Values####
14:40:18: CSD_STRUCTURE                                 :0x1
14:40:18: Reserv1                                       :0x0
14:40:18: Time Access 1 TAAC                            :0xe
14:40:18: Time Access 2 NSAC*100                        :0x0
14:40:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:18: Card Command Classess CCC                     :0x5b5
14:40:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:18: DSR(driver stage register)  DSR_IMP           :0x0
14:40:18: Reserv2                                       :0x0
14:40:18: Device Size C_SIZE                            :0xedc8
14:40:18: Reserv3                                       :0x0
14:40:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:18: Reserv4                                       :0x0
14:40:18: Write Speed Factor R2W_FACTOR                 :0x2
14:40:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:18: FILE_FORMAT_GRP                               :0x0
14:40:18: COPY flag                                     :0x1
14:40:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:18: File_Format                                   :0x0
14:40:18: CRC                                           :0x0
14:40:18: ####CSD Registe Values####  

14:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB40>, <py_sfcl.CommandDataDefinition object at 0x06132780>) , Command count = 4275 ] 
14:40:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x0612E390>) , Command count = 4276 ] 
14:40:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E8E0 to EndLba:0x3B6E960 with One's Pattern
14:40:18: [ WrLbaNoData(0x3B6E8E0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4277 ] 
14:40:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E8E0 to EndLba:0x3B6E960 with One's Pattern 

14:40:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E960 to EndLba:0x3B6E9E0 with One's Pattern
14:40:18: [ WrLbaNoData(0x3B6E960, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4278 ] 
14:40:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E960 to EndLba:0x3B6E9E0 with One's Pattern 

14:40:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23241 to EndLba:0x25087 with Constant Pattern
14:40:19: [ RdLbaNoData(0x23241, 0x1E46, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4279 ] 
14:40:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23241 to EndLba:0x25087 with Constant Pattern 

14:40:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3873
14:40:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EA20>, <py_sfcl.PySEnhancedCmdData object at 0x0612E4B0>, <None>) , Command count = 4280 ] 
14:40:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:21: Host Frequency set to 25000 KHz
14:40:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FC90>, 0x0, True) , Command count = 4281 ] 
14:40:21: [GO18_globalSetVolt]### Host voltage value is set.
14:40:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EAB0>, 0x0, False) , Command count = 4282 ] 
14:40:21: [GO18_globalSetVolt]### Host voltage value is set.
14:40:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4283 ] 
14:40:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4284 ] 
14:40:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4285 ] 
14:40:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CD20>, <py_sfcl.CommandDataDefinition object at 0x0612E8A0>) , Command count = 4286 ] 
14:40:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x06129ED0>) , Command count = 4287 ] 
14:40:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:21: [ SetCardRCA(0x1, 0xD555) , Command count = 4288 ] 
14:40:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:21: Host Frequency set to 25000 KHz
14:40:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:21: ####CSD Registe 2.0 Values####
14:40:21: CSD_STRUCTURE                                 :0x1
14:40:21: Reserv1                                       :0x0
14:40:21: Time Access 1 TAAC                            :0xe
14:40:21: Time Access 2 NSAC*100                        :0x0
14:40:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:21: Card Command Classess CCC                     :0x5b5
14:40:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:21: DSR(driver stage register)  DSR_IMP           :0x0
14:40:21: Reserv2                                       :0x0
14:40:21: Device Size C_SIZE                            :0xedc8
14:40:21: Reserv3                                       :0x0
14:40:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:21: Reserv4                                       :0x0
14:40:21: Write Speed Factor R2W_FACTOR                 :0x2
14:40:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:21: FILE_FORMAT_GRP                               :0x0
14:40:21: COPY flag                                     :0x1
14:40:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:21: File_Format                                   :0x0
14:40:21: CRC                                           :0x0
14:40:21: ####CSD Registe Values####  

14:40:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:21: [GetSCRRegisterEntry] Passed
14:40:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:21: Data_Status_After Erases          : 0
14:40:21: CPRM Security Support             : No Security
14:40:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:21: Spec. Version                     : Version 3.0X
14:40:21: Extended Security Support         : Extended_Security_Not_Supported
14:40:21: Command Support                   : COMMAND_SUPPORT
14:40:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061297E0>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 4289 ] 
14:40:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F330>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 4290 ] 
14:40:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:21: [ SetBusWidth(0x4) , Command count = 4291 ] 
14:40:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4292 ] 
14:40:21: Protected Area Size 0x28000
14:40:21: Bus Width           2
14:40:21: Secure Mode         0
14:40:21: Speed  Class        4
14:40:21: Perf Move           0
14:40:21: Au Size             9
14:40:21: Erase Size          15
14:40:21: Erase Timeout       1
14:40:21: Erase offset        1
14:40:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4293 ] 
14:40:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:21: Host Frequency set to 100000 KHz
14:40:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:21: ####CSD Registe 2.0 Values####
14:40:21: CSD_STRUCTURE                                 :0x1
14:40:21: Reserv1                                       :0x0
14:40:21: Time Access 1 TAAC                            :0xe
14:40:21: Time Access 2 NSAC*100                        :0x0
14:40:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:21: Card Command Classess CCC                     :0x5b5
14:40:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:21: DSR(driver stage register)  DSR_IMP           :0x0
14:40:21: Reserv2                                       :0x0
14:40:21: Device Size C_SIZE                            :0xedc8
14:40:21: Reserv3                                       :0x0
14:40:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:21: Reserv4                                       :0x0
14:40:21: Write Speed Factor R2W_FACTOR                 :0x2
14:40:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:22: FILE_FORMAT_GRP                               :0x0
14:40:22: COPY flag                                     :0x1
14:40:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:22: File_Format                                   :0x0
14:40:22: CRC                                           :0x0
14:40:22: ####CSD Registe Values####  

14:40:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF00>, <py_sfcl.CommandDataDefinition object at 0x061323F0>) , Command count = 4294 ] 
14:40:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132660>, <py_sfcl.CommandDataDefinition object at 0x0612E450>) , Command count = 4295 ] 
14:40:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E9E4 to EndLba:0x3B6EA64 with One's Pattern
14:40:22: [ WrLbaNoData(0x3B6E9E4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4296 ] 
14:40:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E9E4 to EndLba:0x3B6EA64 with One's Pattern 

14:40:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA64 to EndLba:0x3B6EAE4 with One's Pattern
14:40:22: [ WrLbaNoData(0x3B6EA64, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4297 ] 
14:40:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA64 to EndLba:0x3B6EAE4 with One's Pattern 

14:40:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23241 to EndLba:0x25085 with Constant Pattern
14:40:22: [ RdLbaNoData(0x23241, 0x1E44, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4298 ] 
14:40:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23241 to EndLba:0x25085 with Constant Pattern 

14:40:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3872
14:40:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612ED50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132390>, <py_sfcl.PySEnhancedCmdData object at 0x061326C0>, <None>) , Command count = 4299 ] 
14:40:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:24: Host Frequency set to 25000 KHz
14:40:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138BA0>, 0x0, True) , Command count = 4300 ] 
14:40:24: [GO18_globalSetVolt]### Host voltage value is set.
14:40:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E990>, 0x0, False) , Command count = 4301 ] 
14:40:24: [GO18_globalSetVolt]### Host voltage value is set.
14:40:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4302 ] 
14:40:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4303 ] 
14:40:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4304 ] 
14:40:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8D0>, <py_sfcl.CommandDataDefinition object at 0x0612EC30>) , Command count = 4305 ] 
14:40:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 4306 ] 
14:40:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:24: [ SetCardRCA(0x1, 0xD555) , Command count = 4307 ] 
14:40:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:25: Host Frequency set to 25000 KHz
14:40:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:25: ####CSD Registe 2.0 Values####
14:40:25: CSD_STRUCTURE                                 :0x1
14:40:25: Reserv1                                       :0x0
14:40:25: Time Access 1 TAAC                            :0xe
14:40:25: Time Access 2 NSAC*100                        :0x0
14:40:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:25: Card Command Classess CCC                     :0x5b5
14:40:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:25: DSR(driver stage register)  DSR_IMP           :0x0
14:40:25: Reserv2                                       :0x0
14:40:25: Device Size C_SIZE                            :0xedc8
14:40:25: Reserv3                                       :0x0
14:40:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:25: Reserv4                                       :0x0
14:40:25: Write Speed Factor R2W_FACTOR                 :0x2
14:40:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:25: FILE_FORMAT_GRP                               :0x0
14:40:25: COPY flag                                     :0x1
14:40:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:25: File_Format                                   :0x0
14:40:25: CRC                                           :0x0
14:40:25: ####CSD Registe Values####  

14:40:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:25: [GetSCRRegisterEntry] Passed
14:40:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:25: Data_Status_After Erases          : 0
14:40:25: CPRM Security Support             : No Security
14:40:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:25: Spec. Version                     : Version 3.0X
14:40:25: Extended Security Support         : Extended_Security_Not_Supported
14:40:25: Command Support                   : COMMAND_SUPPORT
14:40:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6C0>, <py_sfcl.CommandDataDefinition object at 0x06145210>) , Command count = 4308 ] 
14:40:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x06132420>) , Command count = 4309 ] 
14:40:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:25: [ SetBusWidth(0x4) , Command count = 4310 ] 
14:40:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4311 ] 
14:40:25: Protected Area Size 0x28000
14:40:25: Bus Width           2
14:40:25: Secure Mode         0
14:40:25: Speed  Class        4
14:40:25: Perf Move           0
14:40:25: Au Size             9
14:40:25: Erase Size          15
14:40:25: Erase Timeout       1
14:40:25: Erase offset        1
14:40:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4312 ] 
14:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:25: Host Frequency set to 100000 KHz
14:40:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:25: ####CSD Registe 2.0 Values####
14:40:25: CSD_STRUCTURE                                 :0x1
14:40:25: Reserv1                                       :0x0
14:40:25: Time Access 1 TAAC                            :0xe
14:40:25: Time Access 2 NSAC*100                        :0x0
14:40:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:25: Card Command Classess CCC                     :0x5b5
14:40:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:25: DSR(driver stage register)  DSR_IMP           :0x0
14:40:25: Reserv2                                       :0x0
14:40:25: Device Size C_SIZE                            :0xedc8
14:40:25: Reserv3                                       :0x0
14:40:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:25: Reserv4                                       :0x0
14:40:25: Write Speed Factor R2W_FACTOR                 :0x2
14:40:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:25: FILE_FORMAT_GRP                               :0x0
14:40:25: COPY flag                                     :0x1
14:40:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:25: File_Format                                   :0x0
14:40:25: CRC                                           :0x0
14:40:25: ####CSD Registe Values####  

14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E720>, <py_sfcl.CommandDataDefinition object at 0x06138450>) , Command count = 4313 ] 
14:40:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138270>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 4314 ] 
14:40:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71393 to EndLba:0x3B71413 with One's Pattern
14:40:25: [ WrLbaNoData(0x3B71393, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4315 ] 
14:40:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71393 to EndLba:0x3B71413 with One's Pattern 

14:40:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71413 to EndLba:0x3B71493 with One's Pattern
14:40:25: [ WrLbaNoData(0x3B71413, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4316 ] 
14:40:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71413 to EndLba:0x3B71493 with One's Pattern 

14:40:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23243 to EndLba:0x25085 with Constant Pattern
14:40:25: [ RdLbaNoData(0x23243, 0x1E42, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4317 ] 
14:40:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23243 to EndLba:0x25085 with Constant Pattern 

14:40:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3871
14:40:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061380C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129600>, <py_sfcl.PySEnhancedCmdData object at 0x06132540>, <None>) , Command count = 4318 ] 
14:40:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:27: Host Frequency set to 25000 KHz
14:40:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x061322A0>, 0x0, True) , Command count = 4319 ] 
14:40:28: [GO18_globalSetVolt]### Host voltage value is set.
14:40:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E9C0>, 0x0, False) , Command count = 4320 ] 
14:40:28: [GO18_globalSetVolt]### Host voltage value is set.
14:40:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4321 ] 
14:40:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4322 ] 
14:40:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4323 ] 
14:40:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x06129F30>) , Command count = 4324 ] 
14:40:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x061321B0>) , Command count = 4325 ] 
14:40:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:28: [ SetCardRCA(0x1, 0xD555) , Command count = 4326 ] 
14:40:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:28: Host Frequency set to 25000 KHz
14:40:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:28: ####CSD Registe 2.0 Values####
14:40:28: CSD_STRUCTURE                                 :0x1
14:40:28: Reserv1                                       :0x0
14:40:28: Time Access 1 TAAC                            :0xe
14:40:28: Time Access 2 NSAC*100                        :0x0
14:40:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:28: Card Command Classess CCC                     :0x5b5
14:40:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:28: DSR(driver stage register)  DSR_IMP           :0x0
14:40:28: Reserv2                                       :0x0
14:40:28: Device Size C_SIZE                            :0xedc8
14:40:28: Reserv3                                       :0x0
14:40:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:28: Reserv4                                       :0x0
14:40:28: Write Speed Factor R2W_FACTOR                 :0x2
14:40:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:28: FILE_FORMAT_GRP                               :0x0
14:40:28: COPY flag                                     :0x1
14:40:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:28: File_Format                                   :0x0
14:40:28: CRC                                           :0x0
14:40:28: ####CSD Registe Values####  

14:40:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:28: [GetSCRRegisterEntry] Passed
14:40:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:28: Data_Status_After Erases          : 0
14:40:28: CPRM Security Support             : No Security
14:40:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:28: Spec. Version                     : Version 3.0X
14:40:28: Extended Security Support         : Extended_Security_Not_Supported
14:40:28: Command Support                   : COMMAND_SUPPORT
14:40:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE70>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 4327 ] 
14:40:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 4328 ] 
14:40:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:28: [ SetBusWidth(0x4) , Command count = 4329 ] 
14:40:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4330 ] 
14:40:28: Protected Area Size 0x28000
14:40:28: Bus Width           2
14:40:28: Secure Mode         0
14:40:28: Speed  Class        4
14:40:28: Perf Move           0
14:40:28: Au Size             9
14:40:28: Erase Size          15
14:40:28: Erase Timeout       1
14:40:28: Erase offset        1
14:40:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4331 ] 
14:40:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:28: Host Frequency set to 100000 KHz
14:40:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:28: ####CSD Registe 2.0 Values####
14:40:28: CSD_STRUCTURE                                 :0x1
14:40:28: Reserv1                                       :0x0
14:40:28: Time Access 1 TAAC                            :0xe
14:40:28: Time Access 2 NSAC*100                        :0x0
14:40:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:28: Card Command Classess CCC                     :0x5b5
14:40:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:28: DSR(driver stage register)  DSR_IMP           :0x0
14:40:28: Reserv2                                       :0x0
14:40:28: Device Size C_SIZE                            :0xedc8
14:40:28: Reserv3                                       :0x0
14:40:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:28: Reserv4                                       :0x0
14:40:28: Write Speed Factor R2W_FACTOR                 :0x2
14:40:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:28: FILE_FORMAT_GRP                               :0x0
14:40:28: COPY flag                                     :0x1
14:40:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:28: File_Format                                   :0x0
14:40:28: CRC                                           :0x0
14:40:28: ####CSD Registe Values####  

14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FDB0>, <py_sfcl.CommandDataDefinition object at 0x06132210>) , Command count = 4332 ] 
14:40:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D50>, <py_sfcl.CommandDataDefinition object at 0x061327E0>) , Command count = 4333 ] 
14:40:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DA08 to EndLba:0x3B6DA88 with One's Pattern
14:40:29: [ WrLbaNoData(0x3B6DA08, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4334 ] 
14:40:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DA08 to EndLba:0x3B6DA88 with One's Pattern 

14:40:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DA88 to EndLba:0x3B6DB08 with One's Pattern
14:40:29: [ WrLbaNoData(0x3B6DA88, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4335 ] 
14:40:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DA88 to EndLba:0x3B6DB08 with One's Pattern 

14:40:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:29: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23243 to EndLba:0x25083 with Constant Pattern
14:40:29: [ RdLbaNoData(0x23243, 0x1E40, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4336 ] 
14:40:29: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23243 to EndLba:0x25083 with Constant Pattern 

14:40:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3870
14:40:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132F00>, <py_sfcl.PySEnhancedCmdData object at 0x06132810>, <None>) , Command count = 4337 ] 
14:40:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:31: Host Frequency set to 25000 KHz
14:40:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x061381B0>, 0x0, True) , Command count = 4338 ] 
14:40:31: [GO18_globalSetVolt]### Host voltage value is set.
14:40:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138F30>, 0x0, False) , Command count = 4339 ] 
14:40:31: [GO18_globalSetVolt]### Host voltage value is set.
14:40:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4340 ] 
14:40:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4341 ] 
14:40:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4342 ] 
14:40:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x061329F0>) , Command count = 4343 ] 
14:40:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 4344 ] 
14:40:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:31: [ SetCardRCA(0x1, 0xD555) , Command count = 4345 ] 
14:40:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:31: Host Frequency set to 25000 KHz
14:40:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:31: ####CSD Registe 2.0 Values####
14:40:31: CSD_STRUCTURE                                 :0x1
14:40:31: Reserv1                                       :0x0
14:40:31: Time Access 1 TAAC                            :0xe
14:40:31: Time Access 2 NSAC*100                        :0x0
14:40:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:31: Card Command Classess CCC                     :0x5b5
14:40:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:31: DSR(driver stage register)  DSR_IMP           :0x0
14:40:31: Reserv2                                       :0x0
14:40:31: Device Size C_SIZE                            :0xedc8
14:40:31: Reserv3                                       :0x0
14:40:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:31: Reserv4                                       :0x0
14:40:31: Write Speed Factor R2W_FACTOR                 :0x2
14:40:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:31: FILE_FORMAT_GRP                               :0x0
14:40:31: COPY flag                                     :0x1
14:40:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:31: File_Format                                   :0x0
14:40:31: CRC                                           :0x0
14:40:31: ####CSD Registe Values####  

14:40:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:31: [GetSCRRegisterEntry] Passed
14:40:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:31: Data_Status_After Erases          : 0
14:40:31: CPRM Security Support             : No Security
14:40:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:31: Spec. Version                     : Version 3.0X
14:40:31: Extended Security Support         : Extended_Security_Not_Supported
14:40:31: Command Support                   : COMMAND_SUPPORT
14:40:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EBD0>, <py_sfcl.CommandDataDefinition object at 0x06138030>) , Command count = 4346 ] 
14:40:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 4347 ] 
14:40:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:31: [ SetBusWidth(0x4) , Command count = 4348 ] 
14:40:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138B40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4349 ] 
14:40:31: Protected Area Size 0x28000
14:40:31: Bus Width           2
14:40:31: Secure Mode         0
14:40:31: Speed  Class        4
14:40:31: Perf Move           0
14:40:31: Au Size             9
14:40:31: Erase Size          15
14:40:31: Erase Timeout       1
14:40:31: Erase offset        1
14:40:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4350 ] 
14:40:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:31: Host Frequency set to 100000 KHz
14:40:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:31: ####CSD Registe 2.0 Values####
14:40:31: CSD_STRUCTURE                                 :0x1
14:40:32: Reserv1                                       :0x0
14:40:32: Time Access 1 TAAC                            :0xe
14:40:32: Time Access 2 NSAC*100                        :0x0
14:40:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:32: Card Command Classess CCC                     :0x5b5
14:40:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:32: DSR(driver stage register)  DSR_IMP           :0x0
14:40:32: Reserv2                                       :0x0
14:40:32: Device Size C_SIZE                            :0xedc8
14:40:32: Reserv3                                       :0x0
14:40:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:32: Reserv4                                       :0x0
14:40:32: Write Speed Factor R2W_FACTOR                 :0x2
14:40:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:32: FILE_FORMAT_GRP                               :0x0
14:40:32: COPY flag                                     :0x1
14:40:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:32: File_Format                                   :0x0
14:40:32: CRC                                           :0x0
14:40:32: ####CSD Registe Values####  

14:40:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B70>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 4351 ] 
14:40:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x06138660>) , Command count = 4352 ] 
14:40:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DD2B to EndLba:0x3B6DDAB with One's Pattern
14:40:32: [ WrLbaNoData(0x3B6DD2B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4353 ] 
14:40:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DD2B to EndLba:0x3B6DDAB with One's Pattern 

14:40:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DDAB to EndLba:0x3B6DE2B with One's Pattern
14:40:32: [ WrLbaNoData(0x3B6DDAB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4354 ] 
14:40:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DDAB to EndLba:0x3B6DE2B with One's Pattern 

14:40:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23245 to EndLba:0x25083 with Constant Pattern
14:40:32: [ RdLbaNoData(0x23245, 0x1E3E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4355 ] 
14:40:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23245 to EndLba:0x25083 with Constant Pattern 

14:40:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3869
14:40:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061386F0>, <py_sfcl.PySEnhancedCmdData object at 0x06138960>, <None>) , Command count = 4356 ] 
14:40:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:34: Host Frequency set to 25000 KHz
14:40:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132CF0>, 0x0, True) , Command count = 4357 ] 
14:40:34: [GO18_globalSetVolt]### Host voltage value is set.
14:40:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x061383C0>, 0x0, False) , Command count = 4358 ] 
14:40:34: [GO18_globalSetVolt]### Host voltage value is set.
14:40:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4359 ] 
14:40:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4360 ] 
14:40:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4361 ] 
14:40:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x06138990>) , Command count = 4362 ] 
14:40:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 4363 ] 
14:40:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:35: [ SetCardRCA(0x1, 0xD555) , Command count = 4364 ] 
14:40:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:35: Host Frequency set to 25000 KHz
14:40:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:35: ####CSD Registe 2.0 Values####
14:40:35: CSD_STRUCTURE                                 :0x1
14:40:35: Reserv1                                       :0x0
14:40:35: Time Access 1 TAAC                            :0xe
14:40:35: Time Access 2 NSAC*100                        :0x0
14:40:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:35: Card Command Classess CCC                     :0x5b5
14:40:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:35: DSR(driver stage register)  DSR_IMP           :0x0
14:40:35: Reserv2                                       :0x0
14:40:35: Device Size C_SIZE                            :0xedc8
14:40:35: Reserv3                                       :0x0
14:40:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:35: Reserv4                                       :0x0
14:40:35: Write Speed Factor R2W_FACTOR                 :0x2
14:40:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:35: FILE_FORMAT_GRP                               :0x0
14:40:35: COPY flag                                     :0x1
14:40:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:35: File_Format                                   :0x0
14:40:35: CRC                                           :0x0
14:40:35: ####CSD Registe Values####  

14:40:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:35: [GetSCRRegisterEntry] Passed
14:40:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:35: Data_Status_After Erases          : 0
14:40:35: CPRM Security Support             : No Security
14:40:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:35: Spec. Version                     : Version 3.0X
14:40:35: Extended Security Support         : Extended_Security_Not_Supported
14:40:35: Command Support                   : COMMAND_SUPPORT
14:40:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BD0>, <py_sfcl.CommandDataDefinition object at 0x061383F0>) , Command count = 4365 ] 
14:40:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 4366 ] 
14:40:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:35: [ SetBusWidth(0x4) , Command count = 4367 ] 
14:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4368 ] 
14:40:35: Protected Area Size 0x28000
14:40:35: Bus Width           2
14:40:35: Secure Mode         0
14:40:35: Speed  Class        4
14:40:35: Perf Move           0
14:40:35: Au Size             9
14:40:35: Erase Size          15
14:40:35: Erase Timeout       1
14:40:35: Erase offset        1
14:40:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4369 ] 
14:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:35: Host Frequency set to 100000 KHz
14:40:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:35: ####CSD Registe 2.0 Values####
14:40:35: CSD_STRUCTURE                                 :0x1
14:40:35: Reserv1                                       :0x0
14:40:35: Time Access 1 TAAC                            :0xe
14:40:35: Time Access 2 NSAC*100                        :0x0
14:40:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:35: Card Command Classess CCC                     :0x5b5
14:40:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:35: DSR(driver stage register)  DSR_IMP           :0x0
14:40:35: Reserv2                                       :0x0
14:40:35: Device Size C_SIZE                            :0xedc8
14:40:35: Reserv3                                       :0x0
14:40:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:35: Reserv4                                       :0x0
14:40:35: Write Speed Factor R2W_FACTOR                 :0x2
14:40:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:35: FILE_FORMAT_GRP                               :0x0
14:40:35: COPY flag                                     :0x1
14:40:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:35: File_Format                                   :0x0
14:40:35: CRC                                           :0x0
14:40:35: ####CSD Registe Values####  

14:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324E0>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 4370 ] 
14:40:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132300>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 4371 ] 
14:40:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E4EF to EndLba:0x3B6E56F with One's Pattern
14:40:35: [ WrLbaNoData(0x3B6E4EF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4372 ] 
14:40:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E4EF to EndLba:0x3B6E56F with One's Pattern 

14:40:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E56F to EndLba:0x3B6E5EF with One's Pattern
14:40:35: [ WrLbaNoData(0x3B6E56F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4373 ] 
14:40:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E56F to EndLba:0x3B6E5EF with One's Pattern 

14:40:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23245 to EndLba:0x25081 with Constant Pattern
14:40:36: [ RdLbaNoData(0x23245, 0x1E3C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4374 ] 
14:40:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23245 to EndLba:0x25081 with Constant Pattern 

14:40:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3868
14:40:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138D80>, <py_sfcl.PySEnhancedCmdData object at 0x061386C0>, <None>) , Command count = 4375 ] 
14:40:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:38: Host Frequency set to 25000 KHz
14:40:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x061325A0>, 0x0, True) , Command count = 4376 ] 
14:40:38: [GO18_globalSetVolt]### Host voltage value is set.
14:40:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FDE0>, 0x0, False) , Command count = 4377 ] 
14:40:38: [GO18_globalSetVolt]### Host voltage value is set.
14:40:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4378 ] 
14:40:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4379 ] 
14:40:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4380 ] 
14:40:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x0613FAB0>) , Command count = 4381 ] 
14:40:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x06138F60>) , Command count = 4382 ] 
14:40:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:38: [ SetCardRCA(0x1, 0xD555) , Command count = 4383 ] 
14:40:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:38: Host Frequency set to 25000 KHz
14:40:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:38: ####CSD Registe 2.0 Values####
14:40:38: CSD_STRUCTURE                                 :0x1
14:40:38: Reserv1                                       :0x0
14:40:38: Time Access 1 TAAC                            :0xe
14:40:38: Time Access 2 NSAC*100                        :0x0
14:40:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:38: Card Command Classess CCC                     :0x5b5
14:40:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:38: DSR(driver stage register)  DSR_IMP           :0x0
14:40:38: Reserv2                                       :0x0
14:40:38: Device Size C_SIZE                            :0xedc8
14:40:38: Reserv3                                       :0x0
14:40:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:38: Reserv4                                       :0x0
14:40:38: Write Speed Factor R2W_FACTOR                 :0x2
14:40:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:38: FILE_FORMAT_GRP                               :0x0
14:40:38: COPY flag                                     :0x1
14:40:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:38: File_Format                                   :0x0
14:40:38: CRC                                           :0x0
14:40:38: ####CSD Registe Values####  

14:40:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:38: [GetSCRRegisterEntry] Passed
14:40:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:38: Data_Status_After Erases          : 0
14:40:38: CPRM Security Support             : No Security
14:40:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:38: Spec. Version                     : Version 3.0X
14:40:38: Extended Security Support         : Extended_Security_Not_Supported
14:40:38: Command Support                   : COMMAND_SUPPORT
14:40:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1E0>, <py_sfcl.CommandDataDefinition object at 0x06138390>) , Command count = 4384 ] 
14:40:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FBD0>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 4385 ] 
14:40:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:38: [ SetBusWidth(0x4) , Command count = 4386 ] 
14:40:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4387 ] 
14:40:38: Protected Area Size 0x28000
14:40:38: Bus Width           2
14:40:38: Secure Mode         0
14:40:38: Speed  Class        4
14:40:38: Perf Move           0
14:40:38: Au Size             9
14:40:38: Erase Size          15
14:40:38: Erase Timeout       1
14:40:38: Erase offset        1
14:40:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4388 ] 
14:40:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:38: Host Frequency set to 100000 KHz
14:40:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:38: ####CSD Registe 2.0 Values####
14:40:38: CSD_STRUCTURE                                 :0x1
14:40:38: Reserv1                                       :0x0
14:40:38: Time Access 1 TAAC                            :0xe
14:40:38: Time Access 2 NSAC*100                        :0x0
14:40:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:38: Card Command Classess CCC                     :0x5b5
14:40:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:38: DSR(driver stage register)  DSR_IMP           :0x0
14:40:38: Reserv2                                       :0x0
14:40:38: Device Size C_SIZE                            :0xedc8
14:40:38: Reserv3                                       :0x0
14:40:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:38: Reserv4                                       :0x0
14:40:38: Write Speed Factor R2W_FACTOR                 :0x2
14:40:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:39: FILE_FORMAT_GRP                               :0x0
14:40:39: COPY flag                                     :0x1
14:40:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:39: File_Format                                   :0x0
14:40:39: CRC                                           :0x0
14:40:39: ####CSD Registe Values####  

14:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C30>, <py_sfcl.CommandDataDefinition object at 0x052AF420>) , Command count = 4389 ] 
14:40:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB70>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 4390 ] 
14:40:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F0CA to EndLba:0x3B6F14A with One's Pattern
14:40:39: [ WrLbaNoData(0x3B6F0CA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4391 ] 
14:40:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F0CA to EndLba:0x3B6F14A with One's Pattern 

14:40:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F14A to EndLba:0x3B6F1CA with One's Pattern
14:40:39: [ WrLbaNoData(0x3B6F14A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4392 ] 
14:40:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F14A to EndLba:0x3B6F1CA with One's Pattern 

14:40:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23247 to EndLba:0x25081 with Constant Pattern
14:40:39: [ RdLbaNoData(0x23247, 0x1E3A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4393 ] 
14:40:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23247 to EndLba:0x25081 with Constant Pattern 

14:40:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3867
14:40:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF1B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F720>, <py_sfcl.PySEnhancedCmdData object at 0x06138E40>, <None>) , Command count = 4394 ] 
14:40:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:41: Host Frequency set to 25000 KHz
14:40:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F600>, 0x0, True) , Command count = 4395 ] 
14:40:41: [GO18_globalSetVolt]### Host voltage value is set.
14:40:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FE10>, 0x0, False) , Command count = 4396 ] 
14:40:41: [GO18_globalSetVolt]### Host voltage value is set.
14:40:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4397 ] 
14:40:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4398 ] 
14:40:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4399 ] 
14:40:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x0613F240>) , Command count = 4400 ] 
14:40:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1E0>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 4401 ] 
14:40:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:41: [ SetCardRCA(0x1, 0xD555) , Command count = 4402 ] 
14:40:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:42: Host Frequency set to 25000 KHz
14:40:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:42: ####CSD Registe 2.0 Values####
14:40:42: CSD_STRUCTURE                                 :0x1
14:40:42: Reserv1                                       :0x0
14:40:42: Time Access 1 TAAC                            :0xe
14:40:42: Time Access 2 NSAC*100                        :0x0
14:40:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:42: Card Command Classess CCC                     :0x5b5
14:40:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:42: DSR(driver stage register)  DSR_IMP           :0x0
14:40:42: Reserv2                                       :0x0
14:40:42: Device Size C_SIZE                            :0xedc8
14:40:42: Reserv3                                       :0x0
14:40:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:42: Reserv4                                       :0x0
14:40:42: Write Speed Factor R2W_FACTOR                 :0x2
14:40:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:42: FILE_FORMAT_GRP                               :0x0
14:40:42: COPY flag                                     :0x1
14:40:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:42: File_Format                                   :0x0
14:40:42: CRC                                           :0x0
14:40:42: ####CSD Registe Values####  

14:40:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:42: [GetSCRRegisterEntry] Passed
14:40:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:42: Data_Status_After Erases          : 0
14:40:42: CPRM Security Support             : No Security
14:40:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:42: Spec. Version                     : Version 3.0X
14:40:42: Extended Security Support         : Extended_Security_Not_Supported
14:40:42: Command Support                   : COMMAND_SUPPORT
14:40:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138300>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 4403 ] 
14:40:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x061382A0>) , Command count = 4404 ] 
14:40:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:42: [ SetBusWidth(0x4) , Command count = 4405 ] 
14:40:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F6C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4406 ] 
14:40:42: Protected Area Size 0x28000
14:40:42: Bus Width           2
14:40:42: Secure Mode         0
14:40:42: Speed  Class        4
14:40:42: Perf Move           0
14:40:42: Au Size             9
14:40:42: Erase Size          15
14:40:42: Erase Timeout       1
14:40:42: Erase offset        1
14:40:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4407 ] 
14:40:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:42: Host Frequency set to 100000 KHz
14:40:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:42: ####CSD Registe 2.0 Values####
14:40:42: CSD_STRUCTURE                                 :0x1
14:40:42: Reserv1                                       :0x0
14:40:42: Time Access 1 TAAC                            :0xe
14:40:42: Time Access 2 NSAC*100                        :0x0
14:40:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:42: Card Command Classess CCC                     :0x5b5
14:40:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:42: DSR(driver stage register)  DSR_IMP           :0x0
14:40:42: Reserv2                                       :0x0
14:40:42: Device Size C_SIZE                            :0xedc8
14:40:42: Reserv3                                       :0x0
14:40:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:42: Reserv4                                       :0x0
14:40:42: Write Speed Factor R2W_FACTOR                 :0x2
14:40:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:42: FILE_FORMAT_GRP                               :0x0
14:40:42: COPY flag                                     :0x1
14:40:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:42: File_Format                                   :0x0
14:40:42: CRC                                           :0x0
14:40:42: ####CSD Registe Values####  

14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529EE40>, <py_sfcl.CommandDataDefinition object at 0x052C1A50>) , Command count = 4408 ] 
14:40:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 4409 ] 
14:40:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F17A to EndLba:0x3B6F1FA with One's Pattern
14:40:42: [ WrLbaNoData(0x3B6F17A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4410 ] 
14:40:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F17A to EndLba:0x3B6F1FA with One's Pattern 

14:40:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F1FA to EndLba:0x3B6F27A with One's Pattern
14:40:42: [ WrLbaNoData(0x3B6F1FA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4411 ] 
14:40:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F1FA to EndLba:0x3B6F27A with One's Pattern 

14:40:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23247 to EndLba:0x2507F with Constant Pattern
14:40:42: [ RdLbaNoData(0x23247, 0x1E38, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4412 ] 
14:40:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23247 to EndLba:0x2507F with Constant Pattern 

14:40:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3866
14:40:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CEA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052C1C90>, <py_sfcl.PySEnhancedCmdData object at 0x052C1F60>, <None>) , Command count = 4413 ] 
14:40:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:45: Host Frequency set to 25000 KHz
14:40:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132600>, 0x0, True) , Command count = 4414 ] 
14:40:45: [GO18_globalSetVolt]### Host voltage value is set.
14:40:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F4B0>, 0x0, False) , Command count = 4415 ] 
14:40:45: [GO18_globalSetVolt]### Host voltage value is set.
14:40:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4416 ] 
14:40:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4417 ] 
14:40:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4418 ] 
14:40:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F030>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 4419 ] 
14:40:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x060E3E40>) , Command count = 4420 ] 
14:40:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:45: [ SetCardRCA(0x1, 0xD555) , Command count = 4421 ] 
14:40:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:45: Host Frequency set to 25000 KHz
14:40:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:45: ####CSD Registe 2.0 Values####
14:40:45: CSD_STRUCTURE                                 :0x1
14:40:45: Reserv1                                       :0x0
14:40:45: Time Access 1 TAAC                            :0xe
14:40:45: Time Access 2 NSAC*100                        :0x0
14:40:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:45: Card Command Classess CCC                     :0x5b5
14:40:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:45: DSR(driver stage register)  DSR_IMP           :0x0
14:40:45: Reserv2                                       :0x0
14:40:45: Device Size C_SIZE                            :0xedc8
14:40:45: Reserv3                                       :0x0
14:40:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:45: Reserv4                                       :0x0
14:40:45: Write Speed Factor R2W_FACTOR                 :0x2
14:40:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:45: FILE_FORMAT_GRP                               :0x0
14:40:45: COPY flag                                     :0x1
14:40:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:45: File_Format                                   :0x0
14:40:45: CRC                                           :0x0
14:40:45: ####CSD Registe Values####  

14:40:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:45: [GetSCRRegisterEntry] Passed
14:40:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:45: Data_Status_After Erases          : 0
14:40:45: CPRM Security Support             : No Security
14:40:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:45: Spec. Version                     : Version 3.0X
14:40:45: Extended Security Support         : Extended_Security_Not_Supported
14:40:45: Command Support                   : COMMAND_SUPPORT
14:40:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05184030>, <py_sfcl.CommandDataDefinition object at 0x052BB4E0>) , Command count = 4422 ] 
14:40:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0518AE70>) , Command count = 4423 ] 
14:40:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:45: [ SetBusWidth(0x4) , Command count = 4424 ] 
14:40:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4425 ] 
14:40:45: Protected Area Size 0x28000
14:40:45: Bus Width           2
14:40:45: Secure Mode         0
14:40:45: Speed  Class        4
14:40:45: Perf Move           0
14:40:45: Au Size             9
14:40:45: Erase Size          15
14:40:45: Erase Timeout       1
14:40:45: Erase offset        1
14:40:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4426 ] 
14:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:45: Host Frequency set to 100000 KHz
14:40:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:45: ####CSD Registe 2.0 Values####
14:40:45: CSD_STRUCTURE                                 :0x1
14:40:45: Reserv1                                       :0x0
14:40:45: Time Access 1 TAAC                            :0xe
14:40:45: Time Access 2 NSAC*100                        :0x0
14:40:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:45: Card Command Classess CCC                     :0x5b5
14:40:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:45: DSR(driver stage register)  DSR_IMP           :0x0
14:40:45: Reserv2                                       :0x0
14:40:45: Device Size C_SIZE                            :0xedc8
14:40:45: Reserv3                                       :0x0
14:40:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:46: Reserv4                                       :0x0
14:40:46: Write Speed Factor R2W_FACTOR                 :0x2
14:40:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:46: FILE_FORMAT_GRP                               :0x0
14:40:46: COPY flag                                     :0x1
14:40:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:46: File_Format                                   :0x0
14:40:46: CRC                                           :0x0
14:40:46: ####CSD Registe Values####  

14:40:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1DE0>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 4427 ] 
14:40:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB10>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 4428 ] 
14:40:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7084C to EndLba:0x3B708CC with One's Pattern
14:40:46: [ WrLbaNoData(0x3B7084C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4429 ] 
14:40:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7084C to EndLba:0x3B708CC with One's Pattern 

14:40:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B708CC to EndLba:0x3B7094C with One's Pattern
14:40:46: [ WrLbaNoData(0x3B708CC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4430 ] 
14:40:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B708CC to EndLba:0x3B7094C with One's Pattern 

14:40:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23249 to EndLba:0x2507F with Constant Pattern
14:40:46: [ RdLbaNoData(0x23249, 0x1E36, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4431 ] 
14:40:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23249 to EndLba:0x2507F with Constant Pattern 

14:40:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3865
14:40:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E780>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F5A0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CE10>, <None>) , Command count = 4432 ] 
14:40:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:48: Host Frequency set to 25000 KHz
14:40:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138810>, 0x0, True) , Command count = 4433 ] 
14:40:48: [GO18_globalSetVolt]### Host voltage value is set.
14:40:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138B70>, 0x0, False) , Command count = 4434 ] 
14:40:48: [GO18_globalSetVolt]### Host voltage value is set.
14:40:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4435 ] 
14:40:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4436 ] 
14:40:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4437 ] 
14:40:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x0611CC60>) , Command count = 4438 ] 
14:40:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F00>, <py_sfcl.CommandDataDefinition object at 0x0611CA20>) , Command count = 4439 ] 
14:40:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:48: [ SetCardRCA(0x1, 0xD555) , Command count = 4440 ] 
14:40:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:48: Host Frequency set to 25000 KHz
14:40:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:48: ####CSD Registe 2.0 Values####
14:40:48: CSD_STRUCTURE                                 :0x1
14:40:48: Reserv1                                       :0x0
14:40:48: Time Access 1 TAAC                            :0xe
14:40:48: Time Access 2 NSAC*100                        :0x0
14:40:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:48: Card Command Classess CCC                     :0x5b5
14:40:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:48: DSR(driver stage register)  DSR_IMP           :0x0
14:40:48: Reserv2                                       :0x0
14:40:48: Device Size C_SIZE                            :0xedc8
14:40:48: Reserv3                                       :0x0
14:40:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:48: Reserv4                                       :0x0
14:40:48: Write Speed Factor R2W_FACTOR                 :0x2
14:40:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:48: FILE_FORMAT_GRP                               :0x0
14:40:48: COPY flag                                     :0x1
14:40:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:48: File_Format                                   :0x0
14:40:48: CRC                                           :0x0
14:40:48: ####CSD Registe Values####  

14:40:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:48: [GetSCRRegisterEntry] Passed
14:40:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:48: Data_Status_After Erases          : 0
14:40:48: CPRM Security Support             : No Security
14:40:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:48: Spec. Version                     : Version 3.0X
14:40:48: Extended Security Support         : Extended_Security_Not_Supported
14:40:48: Command Support                   : COMMAND_SUPPORT
14:40:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBFC0>, <py_sfcl.CommandDataDefinition object at 0x0611CB40>) , Command count = 4441 ] 
14:40:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA80>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 4442 ] 
14:40:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:48: [ SetBusWidth(0x4) , Command count = 4443 ] 
14:40:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C9F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4444 ] 
14:40:48: Protected Area Size 0x28000
14:40:48: Bus Width           2
14:40:48: Secure Mode         0
14:40:48: Speed  Class        4
14:40:48: Perf Move           0
14:40:48: Au Size             9
14:40:48: Erase Size          15
14:40:48: Erase Timeout       1
14:40:48: Erase offset        1
14:40:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4445 ] 
14:40:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:49: Host Frequency set to 100000 KHz
14:40:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:49: ####CSD Registe 2.0 Values####
14:40:49: CSD_STRUCTURE                                 :0x1
14:40:49: Reserv1                                       :0x0
14:40:49: Time Access 1 TAAC                            :0xe
14:40:49: Time Access 2 NSAC*100                        :0x0
14:40:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:49: Card Command Classess CCC                     :0x5b5
14:40:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:49: DSR(driver stage register)  DSR_IMP           :0x0
14:40:49: Reserv2                                       :0x0
14:40:49: Device Size C_SIZE                            :0xedc8
14:40:49: Reserv3                                       :0x0
14:40:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:49: Reserv4                                       :0x0
14:40:49: Write Speed Factor R2W_FACTOR                 :0x2
14:40:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:49: FILE_FORMAT_GRP                               :0x0
14:40:49: COPY flag                                     :0x1
14:40:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:49: File_Format                                   :0x0
14:40:49: CRC                                           :0x0
14:40:49: ####CSD Registe Values####  

14:40:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F660>, <py_sfcl.CommandDataDefinition object at 0x0613F090>) , Command count = 4446 ] 
14:40:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAB0>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 4447 ] 
14:40:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72266 to EndLba:0x3B722E6 with One's Pattern
14:40:49: [ WrLbaNoData(0x3B72266, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4448 ] 
14:40:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72266 to EndLba:0x3B722E6 with One's Pattern 

14:40:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B722E6 to EndLba:0x3B72366 with One's Pattern
14:40:49: [ WrLbaNoData(0x3B722E6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4449 ] 
14:40:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B722E6 to EndLba:0x3B72366 with One's Pattern 

14:40:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23249 to EndLba:0x2507D with Constant Pattern
14:40:49: [ RdLbaNoData(0x23249, 0x1E34, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4450 ] 
14:40:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23249 to EndLba:0x2507D with Constant Pattern 

14:40:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3864
14:40:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FCF0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C0F0>, <py_sfcl.PySEnhancedCmdData object at 0x060E3690>, <None>) , Command count = 4451 ] 
14:40:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:51: Host Frequency set to 25000 KHz
14:40:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF30>, 0x0, True) , Command count = 4452 ] 
14:40:51: [GO18_globalSetVolt]### Host voltage value is set.
14:40:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F540>, 0x0, False) , Command count = 4453 ] 
14:40:51: [GO18_globalSetVolt]### Host voltage value is set.
14:40:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4454 ] 
14:40:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4455 ] 
14:40:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4456 ] 
14:40:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F6F0>, <py_sfcl.CommandDataDefinition object at 0x06129060>) , Command count = 4457 ] 
14:40:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C1B0>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 4458 ] 
14:40:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:52: [ SetCardRCA(0x1, 0xD555) , Command count = 4459 ] 
14:40:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:52: Host Frequency set to 25000 KHz
14:40:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:52: ####CSD Registe 2.0 Values####
14:40:52: CSD_STRUCTURE                                 :0x1
14:40:52: Reserv1                                       :0x0
14:40:52: Time Access 1 TAAC                            :0xe
14:40:52: Time Access 2 NSAC*100                        :0x0
14:40:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:52: Card Command Classess CCC                     :0x5b5
14:40:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:52: DSR(driver stage register)  DSR_IMP           :0x0
14:40:52: Reserv2                                       :0x0
14:40:52: Device Size C_SIZE                            :0xedc8
14:40:52: Reserv3                                       :0x0
14:40:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:52: Reserv4                                       :0x0
14:40:52: Write Speed Factor R2W_FACTOR                 :0x2
14:40:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:52: FILE_FORMAT_GRP                               :0x0
14:40:52: COPY flag                                     :0x1
14:40:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:52: File_Format                                   :0x0
14:40:52: CRC                                           :0x0
14:40:52: ####CSD Registe Values####  

14:40:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:52: [GetSCRRegisterEntry] Passed
14:40:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:52: Data_Status_After Erases          : 0
14:40:52: CPRM Security Support             : No Security
14:40:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:52: Spec. Version                     : Version 3.0X
14:40:52: Extended Security Support         : Extended_Security_Not_Supported
14:40:52: Command Support                   : COMMAND_SUPPORT
14:40:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D20>, <py_sfcl.CommandDataDefinition object at 0x0611CAE0>) , Command count = 4460 ] 
14:40:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0C0>, <py_sfcl.CommandDataDefinition object at 0x060E3930>) , Command count = 4461 ] 
14:40:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:52: [ SetBusWidth(0x4) , Command count = 4462 ] 
14:40:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4463 ] 
14:40:52: Protected Area Size 0x28000
14:40:52: Bus Width           2
14:40:52: Secure Mode         0
14:40:52: Speed  Class        4
14:40:52: Perf Move           0
14:40:52: Au Size             9
14:40:52: Erase Size          15
14:40:52: Erase Timeout       1
14:40:52: Erase offset        1
14:40:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4464 ] 
14:40:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:52: Host Frequency set to 100000 KHz
14:40:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:52: ####CSD Registe 2.0 Values####
14:40:52: CSD_STRUCTURE                                 :0x1
14:40:52: Reserv1                                       :0x0
14:40:52: Time Access 1 TAAC                            :0xe
14:40:52: Time Access 2 NSAC*100                        :0x0
14:40:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:52: Card Command Classess CCC                     :0x5b5
14:40:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:52: DSR(driver stage register)  DSR_IMP           :0x0
14:40:52: Reserv2                                       :0x0
14:40:52: Device Size C_SIZE                            :0xedc8
14:40:52: Reserv3                                       :0x0
14:40:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:52: Reserv4                                       :0x0
14:40:52: Write Speed Factor R2W_FACTOR                 :0x2
14:40:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:52: FILE_FORMAT_GRP                               :0x0
14:40:52: COPY flag                                     :0x1
14:40:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:52: File_Format                                   :0x0
14:40:52: CRC                                           :0x0
14:40:52: ####CSD Registe Values####  

14:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE40>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 4465 ] 
14:40:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129CF0>, <py_sfcl.CommandDataDefinition object at 0x0611C9F0>) , Command count = 4466 ] 
14:40:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71E0C to EndLba:0x3B71E8C with One's Pattern
14:40:52: [ WrLbaNoData(0x3B71E0C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4467 ] 
14:40:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71E0C to EndLba:0x3B71E8C with One's Pattern 

14:40:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71E8C to EndLba:0x3B71F0C with One's Pattern
14:40:52: [ WrLbaNoData(0x3B71E8C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4468 ] 
14:40:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71E8C to EndLba:0x3B71F0C with One's Pattern 

14:40:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:52: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2324B to EndLba:0x2507D with Constant Pattern
14:40:53: [ RdLbaNoData(0x2324B, 0x1E32, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4469 ] 
14:40:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2324B to EndLba:0x2507D with Constant Pattern 

14:40:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3863
14:40:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061295A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129870>, <py_sfcl.PySEnhancedCmdData object at 0x0611C090>, <None>) , Command count = 4470 ] 
14:40:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:55: Host Frequency set to 25000 KHz
14:40:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F4E0>, 0x0, True) , Command count = 4471 ] 
14:40:55: [GO18_globalSetVolt]### Host voltage value is set.
14:40:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129240>, 0x0, False) , Command count = 4472 ] 
14:40:55: [GO18_globalSetVolt]### Host voltage value is set.
14:40:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4473 ] 
14:40:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4474 ] 
14:40:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4475 ] 
14:40:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC30>, <py_sfcl.CommandDataDefinition object at 0x06129F00>) , Command count = 4476 ] 
14:40:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7B0>, <py_sfcl.CommandDataDefinition object at 0x06129390>) , Command count = 4477 ] 
14:40:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:55: [ SetCardRCA(0x1, 0xD555) , Command count = 4478 ] 
14:40:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:55: Host Frequency set to 25000 KHz
14:40:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:55: ####CSD Registe 2.0 Values####
14:40:55: CSD_STRUCTURE                                 :0x1
14:40:55: Reserv1                                       :0x0
14:40:55: Time Access 1 TAAC                            :0xe
14:40:55: Time Access 2 NSAC*100                        :0x0
14:40:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:55: Card Command Classess CCC                     :0x5b5
14:40:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:55: DSR(driver stage register)  DSR_IMP           :0x0
14:40:55: Reserv2                                       :0x0
14:40:55: Device Size C_SIZE                            :0xedc8
14:40:55: Reserv3                                       :0x0
14:40:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:55: Reserv4                                       :0x0
14:40:55: Write Speed Factor R2W_FACTOR                 :0x2
14:40:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:55: FILE_FORMAT_GRP                               :0x0
14:40:55: COPY flag                                     :0x1
14:40:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:55: File_Format                                   :0x0
14:40:55: CRC                                           :0x0
14:40:55: ####CSD Registe Values####  

14:40:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:55: [GetSCRRegisterEntry] Passed
14:40:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:55: Data_Status_After Erases          : 0
14:40:55: CPRM Security Support             : No Security
14:40:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:55: Spec. Version                     : Version 3.0X
14:40:55: Extended Security Support         : Extended_Security_Not_Supported
14:40:55: Command Support                   : COMMAND_SUPPORT
14:40:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A20>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 4479 ] 
14:40:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 4480 ] 
14:40:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:55: [ SetBusWidth(0x4) , Command count = 4481 ] 
14:40:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4482 ] 
14:40:55: Protected Area Size 0x28000
14:40:55: Bus Width           2
14:40:55: Secure Mode         0
14:40:55: Speed  Class        4
14:40:55: Perf Move           0
14:40:55: Au Size             9
14:40:55: Erase Size          15
14:40:55: Erase Timeout       1
14:40:55: Erase offset        1
14:40:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4483 ] 
14:40:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:55: Host Frequency set to 100000 KHz
14:40:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:55: ####CSD Registe 2.0 Values####
14:40:55: CSD_STRUCTURE                                 :0x1
14:40:55: Reserv1                                       :0x0
14:40:55: Time Access 1 TAAC                            :0xe
14:40:55: Time Access 2 NSAC*100                        :0x0
14:40:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:55: Card Command Classess CCC                     :0x5b5
14:40:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:55: DSR(driver stage register)  DSR_IMP           :0x0
14:40:55: Reserv2                                       :0x0
14:40:55: Device Size C_SIZE                            :0xedc8
14:40:55: Reserv3                                       :0x0
14:40:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:56: Reserv4                                       :0x0
14:40:56: Write Speed Factor R2W_FACTOR                 :0x2
14:40:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:56: FILE_FORMAT_GRP                               :0x0
14:40:56: COPY flag                                     :0x1
14:40:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:56: File_Format                                   :0x0
14:40:56: CRC                                           :0x0
14:40:56: ####CSD Registe Values####  

14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C4B0>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 4484 ] 
14:40:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CED0>, <py_sfcl.CommandDataDefinition object at 0x061299C0>) , Command count = 4485 ] 
14:40:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B711CF to EndLba:0x3B7124F with One's Pattern
14:40:56: [ WrLbaNoData(0x3B711CF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4486 ] 
14:40:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B711CF to EndLba:0x3B7124F with One's Pattern 

14:40:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7124F to EndLba:0x3B712CF with One's Pattern
14:40:56: [ WrLbaNoData(0x3B7124F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4487 ] 
14:40:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7124F to EndLba:0x3B712CF with One's Pattern 

14:40:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2324B to EndLba:0x2507B with Constant Pattern
14:40:56: [ RdLbaNoData(0x2324B, 0x1E30, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4488 ] 
14:40:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2324B to EndLba:0x2507B with Constant Pattern 

14:40:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3862
14:40:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129930>, <py_sfcl.PySEnhancedCmdData object at 0x06129720>, <None>) , Command count = 4489 ] 
14:40:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:40:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:58: Host Frequency set to 25000 KHz
14:40:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:40:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:40:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F7E0>, 0x0, True) , Command count = 4490 ] 
14:40:58: [GO18_globalSetVolt]### Host voltage value is set.
14:40:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:40:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x061290F0>, 0x0, False) , Command count = 4491 ] 
14:40:58: [GO18_globalSetVolt]### Host voltage value is set.
14:40:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4492 ] 
14:40:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:40:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4493 ] 
14:40:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:40:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:40:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:40:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:40:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:40:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4494 ] 
14:40:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:40:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:40:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 4495 ] 
14:40:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:40:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 4496 ] 
14:40:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:40:58: [ SetCardRCA(0x1, 0xD555) , Command count = 4497 ] 
14:40:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:40:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:40:58: Host Frequency set to 25000 KHz
14:40:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:40:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:58: ####CSD Registe 2.0 Values####
14:40:58: CSD_STRUCTURE                                 :0x1
14:40:58: Reserv1                                       :0x0
14:40:58: Time Access 1 TAAC                            :0xe
14:40:58: Time Access 2 NSAC*100                        :0x0
14:40:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:40:58: Card Command Classess CCC                     :0x5b5
14:40:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:58: DSR(driver stage register)  DSR_IMP           :0x0
14:40:58: Reserv2                                       :0x0
14:40:58: Device Size C_SIZE                            :0xedc8
14:40:58: Reserv3                                       :0x0
14:40:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:58: Reserv4                                       :0x0
14:40:58: Write Speed Factor R2W_FACTOR                 :0x2
14:40:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:58: FILE_FORMAT_GRP                               :0x0
14:40:58: COPY flag                                     :0x1
14:40:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:58: File_Format                                   :0x0
14:40:58: CRC                                           :0x0
14:40:58: ####CSD Registe Values####  

14:40:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:40:58: [GetSCRRegisterEntry] Passed
14:40:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:40:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:40:58: Data_Status_After Erases          : 0
14:40:58: CPRM Security Support             : No Security
14:40:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:40:58: Spec. Version                     : Version 3.0X
14:40:58: Extended Security Support         : Extended_Security_Not_Supported
14:40:58: Command Support                   : COMMAND_SUPPORT
14:40:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:40:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCC0>, <py_sfcl.CommandDataDefinition object at 0x06145120>) , Command count = 4498 ] 
14:40:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:40:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x061293C0>) , Command count = 4499 ] 
14:40:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:40:58: [ SetBusWidth(0x4) , Command count = 4500 ] 
14:40:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:40:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061298A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4501 ] 
14:40:58: Protected Area Size 0x28000
14:40:58: Bus Width           2
14:40:58: Secure Mode         0
14:40:58: Speed  Class        4
14:40:58: Perf Move           0
14:40:58: Au Size             9
14:40:58: Erase Size          15
14:40:58: Erase Timeout       1
14:40:58: Erase offset        1
14:40:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:40:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:40:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:40:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4502 ] 
14:40:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:40:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:40:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:40:59: Host Frequency set to 100000 KHz
14:40:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:40:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:40:59: ####CSD Registe 2.0 Values####
14:40:59: CSD_STRUCTURE                                 :0x1
14:40:59: Reserv1                                       :0x0
14:40:59: Time Access 1 TAAC                            :0xe
14:40:59: Time Access 2 NSAC*100                        :0x0
14:40:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:40:59: Card Command Classess CCC                     :0x5b5
14:40:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:40:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:40:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:40:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:40:59: DSR(driver stage register)  DSR_IMP           :0x0
14:40:59: Reserv2                                       :0x0
14:40:59: Device Size C_SIZE                            :0xedc8
14:40:59: Reserv3                                       :0x0
14:40:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:40:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:40:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:40:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:40:59: Reserv4                                       :0x0
14:40:59: Write Speed Factor R2W_FACTOR                 :0x2
14:40:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:40:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:40:59: FILE_FORMAT_GRP                               :0x0
14:40:59: COPY flag                                     :0x1
14:40:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:40:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:40:59: File_Format                                   :0x0
14:40:59: CRC                                           :0x0
14:40:59: ####CSD Registe Values####  

14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E750>, <py_sfcl.CommandDataDefinition object at 0x0613FC60>) , Command count = 4503 ] 
14:40:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:40:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 4504 ] 
14:40:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:40:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:40:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:40:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FBC0 to EndLba:0x3B6FC40 with One's Pattern
14:40:59: [ WrLbaNoData(0x3B6FBC0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4505 ] 
14:40:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FBC0 to EndLba:0x3B6FC40 with One's Pattern 

14:40:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FC40 to EndLba:0x3B6FCC0 with One's Pattern
14:40:59: [ WrLbaNoData(0x3B6FC40, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4506 ] 
14:40:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FC40 to EndLba:0x3B6FCC0 with One's Pattern 

14:40:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:40:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2324D to EndLba:0x2507B with Constant Pattern
14:40:59: [ RdLbaNoData(0x2324D, 0x1E2E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4507 ] 
14:40:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2324D to EndLba:0x2507B with Constant Pattern 

14:40:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3861
14:40:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:40:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061297B0>, <py_sfcl.PySEnhancedCmdData object at 0x06129CC0>, <None>) , Command count = 4508 ] 
14:40:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:40:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:01: Host Frequency set to 25000 KHz
14:41:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CA80>, 0x0, True) , Command count = 4509 ] 
14:41:01: [GO18_globalSetVolt]### Host voltage value is set.
14:41:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138CC0>, 0x0, False) , Command count = 4510 ] 
14:41:01: [GO18_globalSetVolt]### Host voltage value is set.
14:41:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4511 ] 
14:41:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4512 ] 
14:41:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4513 ] 
14:41:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x06138480>) , Command count = 4514 ] 
14:41:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132060>, <py_sfcl.CommandDataDefinition object at 0x06129EA0>) , Command count = 4515 ] 
14:41:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:02: [ SetCardRCA(0x1, 0xD555) , Command count = 4516 ] 
14:41:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:02: Host Frequency set to 25000 KHz
14:41:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:02: ####CSD Registe 2.0 Values####
14:41:02: CSD_STRUCTURE                                 :0x1
14:41:02: Reserv1                                       :0x0
14:41:02: Time Access 1 TAAC                            :0xe
14:41:02: Time Access 2 NSAC*100                        :0x0
14:41:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:02: Card Command Classess CCC                     :0x5b5
14:41:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:02: DSR(driver stage register)  DSR_IMP           :0x0
14:41:02: Reserv2                                       :0x0
14:41:02: Device Size C_SIZE                            :0xedc8
14:41:02: Reserv3                                       :0x0
14:41:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:02: Reserv4                                       :0x0
14:41:02: Write Speed Factor R2W_FACTOR                 :0x2
14:41:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:02: FILE_FORMAT_GRP                               :0x0
14:41:02: COPY flag                                     :0x1
14:41:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:02: File_Format                                   :0x0
14:41:02: CRC                                           :0x0
14:41:02: ####CSD Registe Values####  

14:41:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:02: [GetSCRRegisterEntry] Passed
14:41:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:02: Data_Status_After Erases          : 0
14:41:02: CPRM Security Support             : No Security
14:41:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:02: Spec. Version                     : Version 3.0X
14:41:02: Extended Security Support         : Extended_Security_Not_Supported
14:41:02: Command Support                   : COMMAND_SUPPORT
14:41:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F690>, <py_sfcl.CommandDataDefinition object at 0x06129630>) , Command count = 4517 ] 
14:41:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061328D0>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 4518 ] 
14:41:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:02: [ SetBusWidth(0x4) , Command count = 4519 ] 
14:41:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061298D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4520 ] 
14:41:02: Protected Area Size 0x28000
14:41:02: Bus Width           2
14:41:02: Secure Mode         0
14:41:02: Speed  Class        4
14:41:02: Perf Move           0
14:41:02: Au Size             9
14:41:02: Erase Size          15
14:41:02: Erase Timeout       1
14:41:02: Erase offset        1
14:41:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4521 ] 
14:41:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:02: Host Frequency set to 100000 KHz
14:41:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:02: ####CSD Registe 2.0 Values####
14:41:02: CSD_STRUCTURE                                 :0x1
14:41:02: Reserv1                                       :0x0
14:41:02: Time Access 1 TAAC                            :0xe
14:41:02: Time Access 2 NSAC*100                        :0x0
14:41:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:02: Card Command Classess CCC                     :0x5b5
14:41:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:02: DSR(driver stage register)  DSR_IMP           :0x0
14:41:02: Reserv2                                       :0x0
14:41:02: Device Size C_SIZE                            :0xedc8
14:41:02: Reserv3                                       :0x0
14:41:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:02: Reserv4                                       :0x0
14:41:02: Write Speed Factor R2W_FACTOR                 :0x2
14:41:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:02: FILE_FORMAT_GRP                               :0x0
14:41:02: COPY flag                                     :0x1
14:41:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:02: File_Format                                   :0x0
14:41:02: CRC                                           :0x0
14:41:02: ####CSD Registe Values####  

14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB70>, <py_sfcl.CommandDataDefinition object at 0x06129E70>) , Command count = 4522 ] 
14:41:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 4523 ] 
14:41:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED83 to EndLba:0x3B6EE03 with One's Pattern
14:41:03: [ WrLbaNoData(0x3B6ED83, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4524 ] 
14:41:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED83 to EndLba:0x3B6EE03 with One's Pattern 

14:41:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EE03 to EndLba:0x3B6EE83 with One's Pattern
14:41:03: [ WrLbaNoData(0x3B6EE03, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4525 ] 
14:41:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EE03 to EndLba:0x3B6EE83 with One's Pattern 

14:41:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2324D to EndLba:0x25079 with Constant Pattern
14:41:03: [ RdLbaNoData(0x2324D, 0x1E2C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4526 ] 
14:41:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2324D to EndLba:0x25079 with Constant Pattern 

14:41:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3860
14:41:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132780>, <py_sfcl.PySEnhancedCmdData object at 0x061320F0>, <None>) , Command count = 4527 ] 
14:41:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:05: Host Frequency set to 25000 KHz
14:41:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E150>, 0x0, True) , Command count = 4528 ] 
14:41:05: [GO18_globalSetVolt]### Host voltage value is set.
14:41:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E0F0>, 0x0, False) , Command count = 4529 ] 
14:41:05: [GO18_globalSetVolt]### Host voltage value is set.
14:41:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4530 ] 
14:41:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4531 ] 
14:41:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4532 ] 
14:41:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py_sfcl.CommandDataDefinition object at 0x06129FC0>) , Command count = 4533 ] 
14:41:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E900>, <py_sfcl.CommandDataDefinition object at 0x0612ECC0>) , Command count = 4534 ] 
14:41:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:05: [ SetCardRCA(0x1, 0xD555) , Command count = 4535 ] 
14:41:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:05: Host Frequency set to 25000 KHz
14:41:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:05: ####CSD Registe 2.0 Values####
14:41:05: CSD_STRUCTURE                                 :0x1
14:41:05: Reserv1                                       :0x0
14:41:05: Time Access 1 TAAC                            :0xe
14:41:05: Time Access 2 NSAC*100                        :0x0
14:41:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:05: Card Command Classess CCC                     :0x5b5
14:41:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:05: DSR(driver stage register)  DSR_IMP           :0x0
14:41:05: Reserv2                                       :0x0
14:41:05: Device Size C_SIZE                            :0xedc8
14:41:05: Reserv3                                       :0x0
14:41:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:05: Reserv4                                       :0x0
14:41:05: Write Speed Factor R2W_FACTOR                 :0x2
14:41:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:05: FILE_FORMAT_GRP                               :0x0
14:41:05: COPY flag                                     :0x1
14:41:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:05: File_Format                                   :0x0
14:41:05: CRC                                           :0x0
14:41:05: ####CSD Registe Values####  

14:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:05: [GetSCRRegisterEntry] Passed
14:41:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:05: Data_Status_After Erases          : 0
14:41:05: CPRM Security Support             : No Security
14:41:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:05: Spec. Version                     : Version 3.0X
14:41:05: Extended Security Support         : Extended_Security_Not_Supported
14:41:05: Command Support                   : COMMAND_SUPPORT
14:41:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C30>, <py_sfcl.CommandDataDefinition object at 0x06138600>) , Command count = 4536 ] 
14:41:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x0612E390>) , Command count = 4537 ] 
14:41:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:05: [ SetBusWidth(0x4) , Command count = 4538 ] 
14:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E8A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4539 ] 
14:41:05: Protected Area Size 0x28000
14:41:05: Bus Width           2
14:41:05: Secure Mode         0
14:41:05: Speed  Class        4
14:41:05: Perf Move           0
14:41:05: Au Size             9
14:41:05: Erase Size          15
14:41:05: Erase Timeout       1
14:41:05: Erase offset        1
14:41:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4540 ] 
14:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:05: Host Frequency set to 100000 KHz
14:41:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:06: ####CSD Registe 2.0 Values####
14:41:06: CSD_STRUCTURE                                 :0x1
14:41:06: Reserv1                                       :0x0
14:41:06: Time Access 1 TAAC                            :0xe
14:41:06: Time Access 2 NSAC*100                        :0x0
14:41:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:06: Card Command Classess CCC                     :0x5b5
14:41:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:06: DSR(driver stage register)  DSR_IMP           :0x0
14:41:06: Reserv2                                       :0x0
14:41:06: Device Size C_SIZE                            :0xedc8
14:41:06: Reserv3                                       :0x0
14:41:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:06: Reserv4                                       :0x0
14:41:06: Write Speed Factor R2W_FACTOR                 :0x2
14:41:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:06: FILE_FORMAT_GRP                               :0x0
14:41:06: COPY flag                                     :0x1
14:41:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:06: File_Format                                   :0x0
14:41:06: CRC                                           :0x0
14:41:06: ####CSD Registe Values####  

14:41:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E9F0>, <py_sfcl.CommandDataDefinition object at 0x061297E0>) , Command count = 4541 ] 
14:41:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132FC0>, <py_sfcl.CommandDataDefinition object at 0x061298D0>) , Command count = 4542 ] 
14:41:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FC6C to EndLba:0x3B6FCEC with One's Pattern
14:41:06: [ WrLbaNoData(0x3B6FC6C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4543 ] 
14:41:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FC6C to EndLba:0x3B6FCEC with One's Pattern 

14:41:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FCEC to EndLba:0x3B6FD6C with One's Pattern
14:41:06: [ WrLbaNoData(0x3B6FCEC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4544 ] 
14:41:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FCEC to EndLba:0x3B6FD6C with One's Pattern 

14:41:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2324F to EndLba:0x25079 with Constant Pattern
14:41:06: [ RdLbaNoData(0x2324F, 0x1E2A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4545 ] 
14:41:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2324F to EndLba:0x25079 with Constant Pattern 

14:41:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3859
14:41:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061323F0>, <py_sfcl.PySEnhancedCmdData object at 0x0612EF00>, <None>) , Command count = 4546 ] 
14:41:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:08: Host Frequency set to 25000 KHz
14:41:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EF60>, 0x0, True) , Command count = 4547 ] 
14:41:08: [GO18_globalSetVolt]### Host voltage value is set.
14:41:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132150>, 0x0, False) , Command count = 4548 ] 
14:41:08: [GO18_globalSetVolt]### Host voltage value is set.
14:41:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4549 ] 
14:41:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4550 ] 
14:41:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4551 ] 
14:41:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BA0>, <py_sfcl.CommandDataDefinition object at 0x06132AB0>) , Command count = 4552 ] 
14:41:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132630>, <py_sfcl.CommandDataDefinition object at 0x0612EAB0>) , Command count = 4553 ] 
14:41:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:08: [ SetCardRCA(0x1, 0xD555) , Command count = 4554 ] 
14:41:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:09: Host Frequency set to 25000 KHz
14:41:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:09: ####CSD Registe 2.0 Values####
14:41:09: CSD_STRUCTURE                                 :0x1
14:41:09: Reserv1                                       :0x0
14:41:09: Time Access 1 TAAC                            :0xe
14:41:09: Time Access 2 NSAC*100                        :0x0
14:41:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:09: Card Command Classess CCC                     :0x5b5
14:41:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:09: DSR(driver stage register)  DSR_IMP           :0x0
14:41:09: Reserv2                                       :0x0
14:41:09: Device Size C_SIZE                            :0xedc8
14:41:09: Reserv3                                       :0x0
14:41:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:09: Reserv4                                       :0x0
14:41:09: Write Speed Factor R2W_FACTOR                 :0x2
14:41:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:09: FILE_FORMAT_GRP                               :0x0
14:41:09: COPY flag                                     :0x1
14:41:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:09: File_Format                                   :0x0
14:41:09: CRC                                           :0x0
14:41:09: ####CSD Registe Values####  

14:41:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:09: [GetSCRRegisterEntry] Passed
14:41:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:09: Data_Status_After Erases          : 0
14:41:09: CPRM Security Support             : No Security
14:41:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:09: Spec. Version                     : Version 3.0X
14:41:09: Extended Security Support         : Extended_Security_Not_Supported
14:41:09: Command Support                   : COMMAND_SUPPORT
14:41:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E030>, <py_sfcl.CommandDataDefinition object at 0x0612EA20>) , Command count = 4555 ] 
14:41:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E450>, <py_sfcl.CommandDataDefinition object at 0x06132660>) , Command count = 4556 ] 
14:41:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:09: [ SetBusWidth(0x4) , Command count = 4557 ] 
14:41:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132840>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4558 ] 
14:41:09: Protected Area Size 0x28000
14:41:09: Bus Width           2
14:41:09: Secure Mode         0
14:41:09: Speed  Class        4
14:41:09: Perf Move           0
14:41:09: Au Size             9
14:41:09: Erase Size          15
14:41:09: Erase Timeout       1
14:41:09: Erase offset        1
14:41:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4559 ] 
14:41:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:09: Host Frequency set to 100000 KHz
14:41:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:09: ####CSD Registe 2.0 Values####
14:41:09: CSD_STRUCTURE                                 :0x1
14:41:09: Reserv1                                       :0x0
14:41:09: Time Access 1 TAAC                            :0xe
14:41:09: Time Access 2 NSAC*100                        :0x0
14:41:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:09: Card Command Classess CCC                     :0x5b5
14:41:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:09: DSR(driver stage register)  DSR_IMP           :0x0
14:41:09: Reserv2                                       :0x0
14:41:09: Device Size C_SIZE                            :0xedc8
14:41:09: Reserv3                                       :0x0
14:41:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:09: Reserv4                                       :0x0
14:41:09: Write Speed Factor R2W_FACTOR                 :0x2
14:41:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:09: FILE_FORMAT_GRP                               :0x0
14:41:09: COPY flag                                     :0x1
14:41:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:09: File_Format                                   :0x0
14:41:09: CRC                                           :0x0
14:41:09: ####CSD Registe Values####  

14:41:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6C0>, <py_sfcl.CommandDataDefinition object at 0x0612EE10>) , Command count = 4560 ] 
14:41:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 4561 ] 
14:41:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE0D to EndLba:0x3B6DE8D with One's Pattern
14:41:09: [ WrLbaNoData(0x3B6DE0D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4562 ] 
14:41:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE0D to EndLba:0x3B6DE8D with One's Pattern 

14:41:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE8D to EndLba:0x3B6DF0D with One's Pattern
14:41:09: [ WrLbaNoData(0x3B6DE8D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4563 ] 
14:41:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE8D to EndLba:0x3B6DF0D with One's Pattern 

14:41:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2324F to EndLba:0x25077 with Constant Pattern
14:41:09: [ RdLbaNoData(0x2324F, 0x1E28, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4564 ] 
14:41:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2324F to EndLba:0x25077 with Constant Pattern 

14:41:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3858
14:41:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138450>, <py_sfcl.PySEnhancedCmdData object at 0x061326F0>, <None>) , Command count = 4565 ] 
14:41:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:12: Host Frequency set to 25000 KHz
14:41:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EDE0>, 0x0, True) , Command count = 4566 ] 
14:41:12: [GO18_globalSetVolt]### Host voltage value is set.
14:41:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FD50>, 0x0, False) , Command count = 4567 ] 
14:41:12: [GO18_globalSetVolt]### Host voltage value is set.
14:41:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4568 ] 
14:41:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4569 ] 
14:41:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4570 ] 
14:41:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322A0>, <py_sfcl.CommandDataDefinition object at 0x061324B0>) , Command count = 4571 ] 
14:41:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 4572 ] 
14:41:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:12: [ SetCardRCA(0x1, 0xD555) , Command count = 4573 ] 
14:41:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:12: Host Frequency set to 25000 KHz
14:41:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:12: ####CSD Registe 2.0 Values####
14:41:12: CSD_STRUCTURE                                 :0x1
14:41:12: Reserv1                                       :0x0
14:41:12: Time Access 1 TAAC                            :0xe
14:41:12: Time Access 2 NSAC*100                        :0x0
14:41:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:12: Card Command Classess CCC                     :0x5b5
14:41:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:12: DSR(driver stage register)  DSR_IMP           :0x0
14:41:12: Reserv2                                       :0x0
14:41:12: Device Size C_SIZE                            :0xedc8
14:41:12: Reserv3                                       :0x0
14:41:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:12: Reserv4                                       :0x0
14:41:12: Write Speed Factor R2W_FACTOR                 :0x2
14:41:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:12: FILE_FORMAT_GRP                               :0x0
14:41:12: COPY flag                                     :0x1
14:41:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:12: File_Format                                   :0x0
14:41:12: CRC                                           :0x0
14:41:12: ####CSD Registe Values####  

14:41:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:12: [GetSCRRegisterEntry] Passed
14:41:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:12: Data_Status_After Erases          : 0
14:41:12: CPRM Security Support             : No Security
14:41:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:12: Spec. Version                     : Version 3.0X
14:41:12: Extended Security Support         : Extended_Security_Not_Supported
14:41:12: Command Support                   : COMMAND_SUPPORT
14:41:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FEA0>, <py_sfcl.CommandDataDefinition object at 0x061329C0>) , Command count = 4574 ] 
14:41:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138270>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 4575 ] 
14:41:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:12: [ SetBusWidth(0x4) , Command count = 4576 ] 
14:41:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129F30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4577 ] 
14:41:12: Protected Area Size 0x28000
14:41:12: Bus Width           2
14:41:12: Secure Mode         0
14:41:12: Speed  Class        4
14:41:12: Perf Move           0
14:41:12: Au Size             9
14:41:12: Erase Size          15
14:41:12: Erase Timeout       1
14:41:12: Erase offset        1
14:41:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4578 ] 
14:41:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:12: Host Frequency set to 100000 KHz
14:41:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:12: ####CSD Registe 2.0 Values####
14:41:12: CSD_STRUCTURE                                 :0x1
14:41:12: Reserv1                                       :0x0
14:41:12: Time Access 1 TAAC                            :0xe
14:41:12: Time Access 2 NSAC*100                        :0x0
14:41:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:12: Card Command Classess CCC                     :0x5b5
14:41:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:12: DSR(driver stage register)  DSR_IMP           :0x0
14:41:12: Reserv2                                       :0x0
14:41:12: Device Size C_SIZE                            :0xedc8
14:41:12: Reserv3                                       :0x0
14:41:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:13: Reserv4                                       :0x0
14:41:13: Write Speed Factor R2W_FACTOR                 :0x2
14:41:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:13: FILE_FORMAT_GRP                               :0x0
14:41:13: COPY flag                                     :0x1
14:41:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:13: File_Format                                   :0x0
14:41:13: CRC                                           :0x0
14:41:13: ####CSD Registe Values####  

14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE70>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 4579 ] 
14:41:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 4580 ] 
14:41:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70FE9 to EndLba:0x3B71069 with One's Pattern
14:41:13: [ WrLbaNoData(0x3B70FE9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4581 ] 
14:41:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70FE9 to EndLba:0x3B71069 with One's Pattern 

14:41:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71069 to EndLba:0x3B710E9 with One's Pattern
14:41:13: [ WrLbaNoData(0x3B71069, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4582 ] 
14:41:13: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71069 to EndLba:0x3B710E9 with One's Pattern 

14:41:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23251 to EndLba:0x25077 with Constant Pattern
14:41:13: [ RdLbaNoData(0x23251, 0x1E26, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4583 ] 
14:41:13: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23251 to EndLba:0x25077 with Constant Pattern 

14:41:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3857
14:41:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FDB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132210>, <py_sfcl.PySEnhancedCmdData object at 0x06132E40>, <None>) , Command count = 4584 ] 
14:41:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:15: Host Frequency set to 25000 KHz
14:41:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E630>, 0x0, True) , Command count = 4585 ] 
14:41:15: [GO18_globalSetVolt]### Host voltage value is set.
14:41:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EB40>, 0x0, False) , Command count = 4586 ] 
14:41:15: [GO18_globalSetVolt]### Host voltage value is set.
14:41:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4587 ] 
14:41:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4588 ] 
14:41:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4589 ] 
14:41:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x06129600>) , Command count = 4590 ] 
14:41:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x06132F30>) , Command count = 4591 ] 
14:41:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:15: [ SetCardRCA(0x1, 0xD555) , Command count = 4592 ] 
14:41:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:15: Host Frequency set to 25000 KHz
14:41:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:15: ####CSD Registe 2.0 Values####
14:41:15: CSD_STRUCTURE                                 :0x1
14:41:15: Reserv1                                       :0x0
14:41:15: Time Access 1 TAAC                            :0xe
14:41:15: Time Access 2 NSAC*100                        :0x0
14:41:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:15: Card Command Classess CCC                     :0x5b5
14:41:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:15: DSR(driver stage register)  DSR_IMP           :0x0
14:41:15: Reserv2                                       :0x0
14:41:15: Device Size C_SIZE                            :0xedc8
14:41:15: Reserv3                                       :0x0
14:41:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:15: Reserv4                                       :0x0
14:41:15: Write Speed Factor R2W_FACTOR                 :0x2
14:41:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:15: FILE_FORMAT_GRP                               :0x0
14:41:15: COPY flag                                     :0x1
14:41:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:15: File_Format                                   :0x0
14:41:15: CRC                                           :0x0
14:41:15: ####CSD Registe Values####  

14:41:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:15: [GetSCRRegisterEntry] Passed
14:41:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:15: Data_Status_After Erases          : 0
14:41:15: CPRM Security Support             : No Security
14:41:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:15: Spec. Version                     : Version 3.0X
14:41:15: Extended Security Support         : Extended_Security_Not_Supported
14:41:15: Command Support                   : COMMAND_SUPPORT
14:41:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F900>, <py_sfcl.CommandDataDefinition object at 0x06132ED0>) , Command count = 4593 ] 
14:41:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327E0>, <py_sfcl.CommandDataDefinition object at 0x06138D50>) , Command count = 4594 ] 
14:41:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:15: [ SetBusWidth(0x4) , Command count = 4595 ] 
14:41:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061329F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4596 ] 
14:41:15: Protected Area Size 0x28000
14:41:15: Bus Width           2
14:41:15: Secure Mode         0
14:41:15: Speed  Class        4
14:41:15: Perf Move           0
14:41:15: Au Size             9
14:41:15: Erase Size          15
14:41:15: Erase Timeout       1
14:41:15: Erase offset        1
14:41:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4597 ] 
14:41:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:16: Host Frequency set to 100000 KHz
14:41:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:16: ####CSD Registe 2.0 Values####
14:41:16: CSD_STRUCTURE                                 :0x1
14:41:16: Reserv1                                       :0x0
14:41:16: Time Access 1 TAAC                            :0xe
14:41:16: Time Access 2 NSAC*100                        :0x0
14:41:16: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:16: Card Command Classess CCC                     :0x5b5
14:41:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:16: DSR(driver stage register)  DSR_IMP           :0x0
14:41:16: Reserv2                                       :0x0
14:41:16: Device Size C_SIZE                            :0xedc8
14:41:16: Reserv3                                       :0x0
14:41:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:16: Reserv4                                       :0x0
14:41:16: Write Speed Factor R2W_FACTOR                 :0x2
14:41:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:16: FILE_FORMAT_GRP                               :0x0
14:41:16: COPY flag                                     :0x1
14:41:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:16: File_Format                                   :0x0
14:41:16: CRC                                           :0x0
14:41:16: ####CSD Registe Values####  

14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EBD0>, <py_sfcl.CommandDataDefinition object at 0x06138030>) , Command count = 4598 ] 
14:41:16: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 4599 ] 
14:41:16: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:16: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E0C4 to EndLba:0x3B6E144 with One's Pattern
14:41:16: [ WrLbaNoData(0x3B6E0C4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4600 ] 
14:41:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E0C4 to EndLba:0x3B6E144 with One's Pattern 

14:41:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E144 to EndLba:0x3B6E1C4 with One's Pattern
14:41:16: [ WrLbaNoData(0x3B6E144, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4601 ] 
14:41:16: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E144 to EndLba:0x3B6E1C4 with One's Pattern 

14:41:16: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23251 to EndLba:0x25075 with Constant Pattern
14:41:16: [ RdLbaNoData(0x23251, 0x1E24, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4602 ] 
14:41:16: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23251 to EndLba:0x25075 with Constant Pattern 

14:41:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3856
14:41:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138BD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138060>, <py_sfcl.PySEnhancedCmdData object at 0x06138150>, <None>) , Command count = 4603 ] 
14:41:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:18: Host Frequency set to 25000 KHz
14:41:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132CC0>, 0x0, True) , Command count = 4604 ] 
14:41:18: [GO18_globalSetVolt]### Host voltage value is set.
14:41:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138F90>, 0x0, False) , Command count = 4605 ] 
14:41:18: [GO18_globalSetVolt]### Host voltage value is set.
14:41:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4606 ] 
14:41:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4607 ] 
14:41:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4608 ] 
14:41:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132CF0>, <py_sfcl.CommandDataDefinition object at 0x06132810>) , Command count = 4609 ] 
14:41:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CF0>, <py_sfcl.CommandDataDefinition object at 0x06132F00>) , Command count = 4610 ] 
14:41:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:19: [ SetCardRCA(0x1, 0xD555) , Command count = 4611 ] 
14:41:19: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:19: Host Frequency set to 25000 KHz
14:41:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:19: ####CSD Registe 2.0 Values####
14:41:19: CSD_STRUCTURE                                 :0x1
14:41:19: Reserv1                                       :0x0
14:41:19: Time Access 1 TAAC                            :0xe
14:41:19: Time Access 2 NSAC*100                        :0x0
14:41:19: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:19: Card Command Classess CCC                     :0x5b5
14:41:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:19: DSR(driver stage register)  DSR_IMP           :0x0
14:41:19: Reserv2                                       :0x0
14:41:19: Device Size C_SIZE                            :0xedc8
14:41:19: Reserv3                                       :0x0
14:41:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:19: Reserv4                                       :0x0
14:41:19: Write Speed Factor R2W_FACTOR                 :0x2
14:41:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:19: FILE_FORMAT_GRP                               :0x0
14:41:19: COPY flag                                     :0x1
14:41:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:19: File_Format                                   :0x0
14:41:19: CRC                                           :0x0
14:41:19: ####CSD Registe Values####  

14:41:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:19: [GetSCRRegisterEntry] Passed
14:41:19: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:19: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:19: Data_Status_After Erases          : 0
14:41:19: CPRM Security Support             : No Security
14:41:19: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:19: Spec. Version                     : Version 3.0X
14:41:19: Extended Security Support         : Extended_Security_Not_Supported
14:41:19: Command Support                   : COMMAND_SUPPORT
14:41:19: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A50>, <py_sfcl.CommandDataDefinition object at 0x06145060>) , Command count = 4612 ] 
14:41:19: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x06138660>) , Command count = 4613 ] 
14:41:19: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:19: [ SetBusWidth(0x4) , Command count = 4614 ] 
14:41:19: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:19: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4615 ] 
14:41:19: Protected Area Size 0x28000
14:41:19: Bus Width           2
14:41:19: Secure Mode         0
14:41:19: Speed  Class        4
14:41:19: Perf Move           0
14:41:19: Au Size             9
14:41:19: Erase Size          15
14:41:19: Erase Timeout       1
14:41:19: Erase offset        1
14:41:19: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:19: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:19: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4616 ] 
14:41:19: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:19: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:19: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:19: Host Frequency set to 100000 KHz
14:41:19: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:19: ####CSD Registe 2.0 Values####
14:41:19: CSD_STRUCTURE                                 :0x1
14:41:19: Reserv1                                       :0x0
14:41:19: Time Access 1 TAAC                            :0xe
14:41:19: Time Access 2 NSAC*100                        :0x0
14:41:19: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:19: Card Command Classess CCC                     :0x5b5
14:41:19: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:19: DSR(driver stage register)  DSR_IMP           :0x0
14:41:19: Reserv2                                       :0x0
14:41:19: Device Size C_SIZE                            :0xedc8
14:41:19: Reserv3                                       :0x0
14:41:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:19: Reserv4                                       :0x0
14:41:19: Write Speed Factor R2W_FACTOR                 :0x2
14:41:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:19: FILE_FORMAT_GRP                               :0x0
14:41:19: COPY flag                                     :0x1
14:41:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:19: File_Format                                   :0x0
14:41:19: CRC                                           :0x0
14:41:19: ####CSD Registe Values####  

14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BD0>, <py_sfcl.CommandDataDefinition object at 0x06132180>) , Command count = 4617 ] 
14:41:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x06138DB0>) , Command count = 4618 ] 
14:41:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70DB2 to EndLba:0x3B70E32 with One's Pattern
14:41:20: [ WrLbaNoData(0x3B70DB2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4619 ] 
14:41:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70DB2 to EndLba:0x3B70E32 with One's Pattern 

14:41:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E32 to EndLba:0x3B70EB2 with One's Pattern
14:41:20: [ WrLbaNoData(0x3B70E32, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4620 ] 
14:41:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E32 to EndLba:0x3B70EB2 with One's Pattern 

14:41:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23253 to EndLba:0x25075 with Constant Pattern
14:41:20: [ RdLbaNoData(0x23253, 0x1E22, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4621 ] 
14:41:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23253 to EndLba:0x25075 with Constant Pattern 

14:41:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3855
14:41:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061324E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138360>, <py_sfcl.PySEnhancedCmdData object at 0x06138A80>, <None>) , Command count = 4622 ] 
14:41:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:22: Host Frequency set to 25000 KHz
14:41:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x061381E0>, 0x0, True) , Command count = 4623 ] 
14:41:22: [GO18_globalSetVolt]### Host voltage value is set.
14:41:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132DB0>, 0x0, False) , Command count = 4624 ] 
14:41:22: [GO18_globalSetVolt]### Host voltage value is set.
14:41:22: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4625 ] 
14:41:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4626 ] 
14:41:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:22: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4627 ] 
14:41:22: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061325A0>, <py_sfcl.CommandDataDefinition object at 0x061389F0>) , Command count = 4628 ] 
14:41:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132EA0>, <py_sfcl.CommandDataDefinition object at 0x061383C0>) , Command count = 4629 ] 
14:41:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:22: [ SetCardRCA(0x1, 0xD555) , Command count = 4630 ] 
14:41:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:22: Host Frequency set to 25000 KHz
14:41:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:22: ####CSD Registe 2.0 Values####
14:41:22: CSD_STRUCTURE                                 :0x1
14:41:22: Reserv1                                       :0x0
14:41:22: Time Access 1 TAAC                            :0xe
14:41:22: Time Access 2 NSAC*100                        :0x0
14:41:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:22: Card Command Classess CCC                     :0x5b5
14:41:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:22: DSR(driver stage register)  DSR_IMP           :0x0
14:41:22: Reserv2                                       :0x0
14:41:22: Device Size C_SIZE                            :0xedc8
14:41:22: Reserv3                                       :0x0
14:41:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:22: Reserv4                                       :0x0
14:41:22: Write Speed Factor R2W_FACTOR                 :0x2
14:41:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:22: FILE_FORMAT_GRP                               :0x0
14:41:22: COPY flag                                     :0x1
14:41:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:22: File_Format                                   :0x0
14:41:22: CRC                                           :0x0
14:41:22: ####CSD Registe Values####  

14:41:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:22: [GetSCRRegisterEntry] Passed
14:41:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:22: Data_Status_After Erases          : 0
14:41:22: CPRM Security Support             : No Security
14:41:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:22: Spec. Version                     : Version 3.0X
14:41:22: Extended Security Support         : Extended_Security_Not_Supported
14:41:22: Command Support                   : COMMAND_SUPPORT
14:41:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132870>, <py_sfcl.CommandDataDefinition object at 0x06138D20>) , Command count = 4631 ] 
14:41:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132300>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 4632 ] 
14:41:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:22: [ SetBusWidth(0x4) , Command count = 4633 ] 
14:41:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4634 ] 
14:41:22: Protected Area Size 0x28000
14:41:22: Bus Width           2
14:41:22: Secure Mode         0
14:41:22: Speed  Class        4
14:41:22: Perf Move           0
14:41:22: Au Size             9
14:41:22: Erase Size          15
14:41:22: Erase Timeout       1
14:41:22: Erase offset        1
14:41:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4635 ] 
14:41:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:22: Host Frequency set to 100000 KHz
14:41:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:22: ####CSD Registe 2.0 Values####
14:41:22: CSD_STRUCTURE                                 :0x1
14:41:23: Reserv1                                       :0x0
14:41:23: Time Access 1 TAAC                            :0xe
14:41:23: Time Access 2 NSAC*100                        :0x0
14:41:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:23: Card Command Classess CCC                     :0x5b5
14:41:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:23: DSR(driver stage register)  DSR_IMP           :0x0
14:41:23: Reserv2                                       :0x0
14:41:23: Device Size C_SIZE                            :0xedc8
14:41:23: Reserv3                                       :0x0
14:41:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:23: Reserv4                                       :0x0
14:41:23: Write Speed Factor R2W_FACTOR                 :0x2
14:41:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:23: FILE_FORMAT_GRP                               :0x0
14:41:23: COPY flag                                     :0x1
14:41:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:23: File_Format                                   :0x0
14:41:23: CRC                                           :0x0
14:41:23: ####CSD Registe Values####  

14:41:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1E0>, <py_sfcl.CommandDataDefinition object at 0x06138390>) , Command count = 4636 ] 
14:41:23: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x06138990>) , Command count = 4637 ] 
14:41:23: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:23: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E95A to EndLba:0x3B6E9DA with One's Pattern
14:41:23: [ WrLbaNoData(0x3B6E95A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4638 ] 
14:41:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E95A to EndLba:0x3B6E9DA with One's Pattern 

14:41:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E9DA to EndLba:0x3B6EA5A with One's Pattern
14:41:23: [ WrLbaNoData(0x3B6E9DA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4639 ] 
14:41:23: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E9DA to EndLba:0x3B6EA5A with One's Pattern 

14:41:23: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23253 to EndLba:0x25073 with Constant Pattern
14:41:23: [ RdLbaNoData(0x23253, 0x1E20, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4640 ] 
14:41:23: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23253 to EndLba:0x25073 with Constant Pattern 

14:41:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3854
14:41:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052AF420>, <py_sfcl.PySEnhancedCmdData object at 0x06138210>, <None>) , Command count = 4641 ] 
14:41:23: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:25: Host Frequency set to 25000 KHz
14:41:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132C60>, 0x0, True) , Command count = 4642 ] 
14:41:25: [GO18_globalSetVolt]### Host voltage value is set.
14:41:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF90>, 0x0, False) , Command count = 4643 ] 
14:41:25: [GO18_globalSetVolt]### Host voltage value is set.
14:41:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4644 ] 
14:41:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4645 ] 
14:41:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4646 ] 
14:41:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 4647 ] 
14:41:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 4648 ] 
14:41:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:25: [ SetCardRCA(0x1, 0xD555) , Command count = 4649 ] 
14:41:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:26: Host Frequency set to 25000 KHz
14:41:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:26: ####CSD Registe 2.0 Values####
14:41:26: CSD_STRUCTURE                                 :0x1
14:41:26: Reserv1                                       :0x0
14:41:26: Time Access 1 TAAC                            :0xe
14:41:26: Time Access 2 NSAC*100                        :0x0
14:41:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:26: Card Command Classess CCC                     :0x5b5
14:41:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:26: DSR(driver stage register)  DSR_IMP           :0x0
14:41:26: Reserv2                                       :0x0
14:41:26: Device Size C_SIZE                            :0xedc8
14:41:26: Reserv3                                       :0x0
14:41:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:26: Reserv4                                       :0x0
14:41:26: Write Speed Factor R2W_FACTOR                 :0x2
14:41:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:26: FILE_FORMAT_GRP                               :0x0
14:41:26: COPY flag                                     :0x1
14:41:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:26: File_Format                                   :0x0
14:41:26: CRC                                           :0x0
14:41:26: ####CSD Registe Values####  

14:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:26: [GetSCRRegisterEntry] Passed
14:41:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:26: Data_Status_After Erases          : 0
14:41:26: CPRM Security Support             : No Security
14:41:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:26: Spec. Version                     : Version 3.0X
14:41:26: Extended Security Support         : Extended_Security_Not_Supported
14:41:26: Command Support                   : COMMAND_SUPPORT
14:41:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC30>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 4650 ] 
14:41:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB70>, <py_sfcl.CommandDataDefinition object at 0x0613FAE0>) , Command count = 4651 ] 
14:41:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:26: [ SetBusWidth(0x4) , Command count = 4652 ] 
14:41:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F240>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4653 ] 
14:41:26: Protected Area Size 0x28000
14:41:26: Bus Width           2
14:41:26: Secure Mode         0
14:41:26: Speed  Class        4
14:41:26: Perf Move           0
14:41:26: Au Size             9
14:41:26: Erase Size          15
14:41:26: Erase Timeout       1
14:41:26: Erase offset        1
14:41:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4654 ] 
14:41:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:26: Host Frequency set to 100000 KHz
14:41:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:26: ####CSD Registe 2.0 Values####
14:41:26: CSD_STRUCTURE                                 :0x1
14:41:26: Reserv1                                       :0x0
14:41:26: Time Access 1 TAAC                            :0xe
14:41:26: Time Access 2 NSAC*100                        :0x0
14:41:26: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:26: Card Command Classess CCC                     :0x5b5
14:41:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:26: DSR(driver stage register)  DSR_IMP           :0x0
14:41:26: Reserv2                                       :0x0
14:41:26: Device Size C_SIZE                            :0xedc8
14:41:26: Reserv3                                       :0x0
14:41:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:26: Reserv4                                       :0x0
14:41:26: Write Speed Factor R2W_FACTOR                 :0x2
14:41:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:26: FILE_FORMAT_GRP                               :0x0
14:41:26: COPY flag                                     :0x1
14:41:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:26: File_Format                                   :0x0
14:41:26: CRC                                           :0x0
14:41:26: ####CSD Registe Values####  

14:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC00>, <py_sfcl.CommandDataDefinition object at 0x0611C1E0>) , Command count = 4655 ] 
14:41:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 4656 ] 
14:41:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E110 to EndLba:0x3B6E190 with One's Pattern
14:41:26: [ WrLbaNoData(0x3B6E110, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4657 ] 
14:41:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E110 to EndLba:0x3B6E190 with One's Pattern 

14:41:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E190 to EndLba:0x3B6E210 with One's Pattern
14:41:26: [ WrLbaNoData(0x3B6E190, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4658 ] 
14:41:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E190 to EndLba:0x3B6E210 with One's Pattern 

14:41:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23255 to EndLba:0x25073 with Constant Pattern
14:41:26: [ RdLbaNoData(0x23255, 0x1E1E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4659 ] 
14:41:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23255 to EndLba:0x25073 with Constant Pattern 

14:41:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3853
14:41:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0529EE40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052C1A50>, <py_sfcl.PySEnhancedCmdData object at 0x0613F3F0>, <None>) , Command count = 4660 ] 
14:41:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:29: Host Frequency set to 25000 KHz
14:41:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x061323C0>, 0x0, True) , Command count = 4661 ] 
14:41:29: [GO18_globalSetVolt]### Host voltage value is set.
14:41:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F180>, 0x0, False) , Command count = 4662 ] 
14:41:29: [GO18_globalSetVolt]### Host voltage value is set.
14:41:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4663 ] 
14:41:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4664 ] 
14:41:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4665 ] 
14:41:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132600>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 4666 ] 
14:41:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EED0>, <py_sfcl.CommandDataDefinition object at 0x06138EA0>) , Command count = 4667 ] 
14:41:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:29: [ SetCardRCA(0x1, 0xD555) , Command count = 4668 ] 
14:41:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:29: Host Frequency set to 25000 KHz
14:41:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:29: ####CSD Registe 2.0 Values####
14:41:29: CSD_STRUCTURE                                 :0x1
14:41:29: Reserv1                                       :0x0
14:41:29: Time Access 1 TAAC                            :0xe
14:41:29: Time Access 2 NSAC*100                        :0x0
14:41:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:29: Card Command Classess CCC                     :0x5b5
14:41:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:29: DSR(driver stage register)  DSR_IMP           :0x0
14:41:29: Reserv2                                       :0x0
14:41:29: Device Size C_SIZE                            :0xedc8
14:41:29: Reserv3                                       :0x0
14:41:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:29: Reserv4                                       :0x0
14:41:29: Write Speed Factor R2W_FACTOR                 :0x2
14:41:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:29: FILE_FORMAT_GRP                               :0x0
14:41:29: COPY flag                                     :0x1
14:41:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:29: File_Format                                   :0x0
14:41:29: CRC                                           :0x0
14:41:29: ####CSD Registe Values####  

14:41:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:29: [GetSCRRegisterEntry] Passed
14:41:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:29: Data_Status_After Erases          : 0
14:41:29: CPRM Security Support             : No Security
14:41:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:29: Spec. Version                     : Version 3.0X
14:41:29: Extended Security Support         : Extended_Security_Not_Supported
14:41:29: Command Support                   : COMMAND_SUPPORT
14:41:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F390>, <py_sfcl.CommandDataDefinition object at 0x06138E40>) , Command count = 4669 ] 
14:41:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 4670 ] 
14:41:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:29: [ SetBusWidth(0x4) , Command count = 4671 ] 
14:41:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138DE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4672 ] 
14:41:29: Protected Area Size 0x28000
14:41:29: Bus Width           2
14:41:29: Secure Mode         0
14:41:29: Speed  Class        4
14:41:29: Perf Move           0
14:41:29: Au Size             9
14:41:29: Erase Size          15
14:41:29: Erase Timeout       1
14:41:29: Erase offset        1
14:41:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4673 ] 
14:41:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:29: Host Frequency set to 100000 KHz
14:41:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:29: ####CSD Registe 2.0 Values####
14:41:29: CSD_STRUCTURE                                 :0x1
14:41:29: Reserv1                                       :0x0
14:41:29: Time Access 1 TAAC                            :0xe
14:41:29: Time Access 2 NSAC*100                        :0x0
14:41:29: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:29: Card Command Classess CCC                     :0x5b5
14:41:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:29: DSR(driver stage register)  DSR_IMP           :0x0
14:41:29: Reserv2                                       :0x0
14:41:29: Device Size C_SIZE                            :0xedc8
14:41:29: Reserv3                                       :0x0
14:41:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:30: Reserv4                                       :0x0
14:41:30: Write Speed Factor R2W_FACTOR                 :0x2
14:41:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:30: FILE_FORMAT_GRP                               :0x0
14:41:30: COPY flag                                     :0x1
14:41:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:30: File_Format                                   :0x0
14:41:30: CRC                                           :0x0
14:41:30: ####CSD Registe Values####  

14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05184030>, <py_sfcl.CommandDataDefinition object at 0x052BB4E0>) , Command count = 4674 ] 
14:41:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C030>, <py_sfcl.CommandDataDefinition object at 0x0606F7B0>) , Command count = 4675 ] 
14:41:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E80F to EndLba:0x3B6E88F with One's Pattern
14:41:30: [ WrLbaNoData(0x3B6E80F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4676 ] 
14:41:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E80F to EndLba:0x3B6E88F with One's Pattern 

14:41:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E88F to EndLba:0x3B6E90F with One's Pattern
14:41:30: [ WrLbaNoData(0x3B6E88F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4677 ] 
14:41:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E88F to EndLba:0x3B6E90F with One's Pattern 

14:41:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23255 to EndLba:0x25071 with Constant Pattern
14:41:30: [ RdLbaNoData(0x23255, 0x1E1C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4678 ] 
14:41:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23255 to EndLba:0x25071 with Constant Pattern 

14:41:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3852
14:41:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1DE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C600>, <py_sfcl.PySEnhancedCmdData object at 0x060E38A0>, <None>) , Command count = 4679 ] 
14:41:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:32: Host Frequency set to 25000 KHz
14:41:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:32: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:32: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFCF0>, 0x0, True) , Command count = 4680 ] 
14:41:32: [GO18_globalSetVolt]### Host voltage value is set.
14:41:32: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:32: [ SetVolt(<py_sfcl.SDVoltage object at 0x052BB930>, 0x0, False) , Command count = 4681 ] 
14:41:32: [GO18_globalSetVolt]### Host voltage value is set.
14:41:32: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4682 ] 
14:41:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4683 ] 
14:41:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4684 ] 
14:41:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138810>, <py_sfcl.CommandDataDefinition object at 0x0611C3F0>) , Command count = 4685 ] 
14:41:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0F0>, <py_sfcl.CommandDataDefinition object at 0x052C1F60>) , Command count = 4686 ] 
14:41:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:32: [ SetCardRCA(0x1, 0xD555) , Command count = 4687 ] 
14:41:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:32: Host Frequency set to 25000 KHz
14:41:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:32: ####CSD Registe 2.0 Values####
14:41:32: CSD_STRUCTURE                                 :0x1
14:41:32: Reserv1                                       :0x0
14:41:32: Time Access 1 TAAC                            :0xe
14:41:32: Time Access 2 NSAC*100                        :0x0
14:41:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:32: Card Command Classess CCC                     :0x5b5
14:41:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:32: DSR(driver stage register)  DSR_IMP           :0x0
14:41:32: Reserv2                                       :0x0
14:41:32: Device Size C_SIZE                            :0xedc8
14:41:32: Reserv3                                       :0x0
14:41:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:32: Reserv4                                       :0x0
14:41:32: Write Speed Factor R2W_FACTOR                 :0x2
14:41:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:32: FILE_FORMAT_GRP                               :0x0
14:41:32: COPY flag                                     :0x1
14:41:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:32: File_Format                                   :0x0
14:41:32: CRC                                           :0x0
14:41:32: ####CSD Registe Values####  

14:41:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:32: [GetSCRRegisterEntry] Passed
14:41:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:32: Data_Status_After Erases          : 0
14:41:32: CPRM Security Support             : No Security
14:41:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:32: Spec. Version                     : Version 3.0X
14:41:32: Extended Security Support         : Extended_Security_Not_Supported
14:41:32: Command Support                   : COMMAND_SUPPORT
14:41:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFC30>, <py_sfcl.CommandDataDefinition object at 0x052C1C90>) , Command count = 4688 ] 
14:41:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB10>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 4689 ] 
14:41:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:32: [ SetBusWidth(0x4) , Command count = 4690 ] 
14:41:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4691 ] 
14:41:32: Protected Area Size 0x28000
14:41:32: Bus Width           2
14:41:32: Secure Mode         0
14:41:32: Speed  Class        4
14:41:32: Perf Move           0
14:41:32: Au Size             9
14:41:32: Erase Size          15
14:41:32: Erase Timeout       1
14:41:32: Erase offset        1
14:41:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4692 ] 
14:41:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:32: Host Frequency set to 100000 KHz
14:41:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:33: ####CSD Registe 2.0 Values####
14:41:33: CSD_STRUCTURE                                 :0x1
14:41:33: Reserv1                                       :0x0
14:41:33: Time Access 1 TAAC                            :0xe
14:41:33: Time Access 2 NSAC*100                        :0x0
14:41:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:33: Card Command Classess CCC                     :0x5b5
14:41:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:33: DSR(driver stage register)  DSR_IMP           :0x0
14:41:33: Reserv2                                       :0x0
14:41:33: Device Size C_SIZE                            :0xedc8
14:41:33: Reserv3                                       :0x0
14:41:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:33: Reserv4                                       :0x0
14:41:33: Write Speed Factor R2W_FACTOR                 :0x2
14:41:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:33: FILE_FORMAT_GRP                               :0x0
14:41:33: COPY flag                                     :0x1
14:41:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:33: File_Format                                   :0x0
14:41:33: CRC                                           :0x0
14:41:33: ####CSD Registe Values####  

14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BBFC0>, <py_sfcl.CommandDataDefinition object at 0x052C1F00>) , Command count = 4693 ] 
14:41:33: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E70>, <py_sfcl.CommandDataDefinition object at 0x0611C240>) , Command count = 4694 ] 
14:41:33: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:33: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B701F2 to EndLba:0x3B70272 with One's Pattern
14:41:33: [ WrLbaNoData(0x3B701F2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4695 ] 
14:41:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B701F2 to EndLba:0x3B70272 with One's Pattern 

14:41:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70272 to EndLba:0x3B702F2 with One's Pattern
14:41:33: [ WrLbaNoData(0x3B70272, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4696 ] 
14:41:33: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70272 to EndLba:0x3B702F2 with One's Pattern 

14:41:33: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23257 to EndLba:0x25071 with Constant Pattern
14:41:33: [ RdLbaNoData(0x23257, 0x1E1A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4697 ] 
14:41:33: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23257 to EndLba:0x25071 with Constant Pattern 

14:41:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3851
14:41:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F090>, <py_sfcl.PySEnhancedCmdData object at 0x0611C960>, <None>) , Command count = 4698 ] 
14:41:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:35: Host Frequency set to 25000 KHz
14:41:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138510>, 0x0, True) , Command count = 4699 ] 
14:41:35: [GO18_globalSetVolt]### Host voltage value is set.
14:41:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F840>, 0x0, False) , Command count = 4700 ] 
14:41:35: [GO18_globalSetVolt]### Host voltage value is set.
14:41:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4701 ] 
14:41:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4702 ] 
14:41:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4703 ] 
14:41:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 4704 ] 
14:41:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129990>, <py_sfcl.CommandDataDefinition object at 0x0611CEA0>) , Command count = 4705 ] 
14:41:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:36: [ SetCardRCA(0x1, 0xD555) , Command count = 4706 ] 
14:41:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:36: Host Frequency set to 25000 KHz
14:41:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:36: ####CSD Registe 2.0 Values####
14:41:36: CSD_STRUCTURE                                 :0x1
14:41:36: Reserv1                                       :0x0
14:41:36: Time Access 1 TAAC                            :0xe
14:41:36: Time Access 2 NSAC*100                        :0x0
14:41:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:36: Card Command Classess CCC                     :0x5b5
14:41:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:36: DSR(driver stage register)  DSR_IMP           :0x0
14:41:36: Reserv2                                       :0x0
14:41:36: Device Size C_SIZE                            :0xedc8
14:41:36: Reserv3                                       :0x0
14:41:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:36: Reserv4                                       :0x0
14:41:36: Write Speed Factor R2W_FACTOR                 :0x2
14:41:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:36: FILE_FORMAT_GRP                               :0x0
14:41:36: COPY flag                                     :0x1
14:41:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:36: File_Format                                   :0x0
14:41:36: CRC                                           :0x0
14:41:36: ####CSD Registe Values####  

14:41:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:36: [GetSCRRegisterEntry] Passed
14:41:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:36: Data_Status_After Erases          : 0
14:41:36: CPRM Security Support             : No Security
14:41:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:36: Spec. Version                     : Version 3.0X
14:41:36: Extended Security Support         : Extended_Security_Not_Supported
14:41:36: Command Support                   : COMMAND_SUPPORT
14:41:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F210>, <py_sfcl.CommandDataDefinition object at 0x060E3750>) , Command count = 4707 ] 
14:41:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAB0>, <py_sfcl.CommandDataDefinition object at 0x0611C4E0>) , Command count = 4708 ] 
14:41:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:36: [ SetBusWidth(0x4) , Command count = 4709 ] 
14:41:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129060>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4710 ] 
14:41:36: Protected Area Size 0x28000
14:41:36: Bus Width           2
14:41:36: Secure Mode         0
14:41:36: Speed  Class        4
14:41:36: Perf Move           0
14:41:36: Au Size             9
14:41:36: Erase Size          15
14:41:36: Erase Timeout       1
14:41:36: Erase offset        1
14:41:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4711 ] 
14:41:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:36: Host Frequency set to 100000 KHz
14:41:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:36: ####CSD Registe 2.0 Values####
14:41:36: CSD_STRUCTURE                                 :0x1
14:41:36: Reserv1                                       :0x0
14:41:36: Time Access 1 TAAC                            :0xe
14:41:36: Time Access 2 NSAC*100                        :0x0
14:41:36: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:36: Card Command Classess CCC                     :0x5b5
14:41:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:36: DSR(driver stage register)  DSR_IMP           :0x0
14:41:36: Reserv2                                       :0x0
14:41:36: Device Size C_SIZE                            :0xedc8
14:41:36: Reserv3                                       :0x0
14:41:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:36: Reserv4                                       :0x0
14:41:36: Write Speed Factor R2W_FACTOR                 :0x2
14:41:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:36: FILE_FORMAT_GRP                               :0x0
14:41:36: COPY flag                                     :0x1
14:41:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:36: File_Format                                   :0x0
14:41:36: CRC                                           :0x0
14:41:36: ####CSD Registe Values####  

14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D20>, <py_sfcl.CommandDataDefinition object at 0x06129660>) , Command count = 4712 ] 
14:41:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611C1B0>) , Command count = 4713 ] 
14:41:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D6BD to EndLba:0x3B6D73D with One's Pattern
14:41:36: [ WrLbaNoData(0x3B6D6BD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4714 ] 
14:41:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D6BD to EndLba:0x3B6D73D with One's Pattern 

14:41:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D73D to EndLba:0x3B6D7BD with One's Pattern
14:41:36: [ WrLbaNoData(0x3B6D73D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4715 ] 
14:41:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D73D to EndLba:0x3B6D7BD with One's Pattern 

14:41:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23257 to EndLba:0x2506F with Constant Pattern
14:41:36: [ RdLbaNoData(0x23257, 0x1E18, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4716 ] 
14:41:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23257 to EndLba:0x2506F with Constant Pattern 

14:41:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3850
14:41:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FE40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C0C0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CF90>, <None>) , Command count = 4717 ] 
14:41:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:39: Host Frequency set to 25000 KHz
14:41:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138ED0>, 0x0, True) , Command count = 4718 ] 
14:41:39: [GO18_globalSetVolt]### Host voltage value is set.
14:41:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129E10>, 0x0, False) , Command count = 4719 ] 
14:41:39: [GO18_globalSetVolt]### Host voltage value is set.
14:41:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4720 ] 
14:41:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4721 ] 
14:41:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:39: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4722 ] 
14:41:39: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F4E0>, <py_sfcl.CommandDataDefinition object at 0x0611C930>) , Command count = 4723 ] 
14:41:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129450>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 4724 ] 
14:41:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:39: [ SetCardRCA(0x1, 0xD555) , Command count = 4725 ] 
14:41:39: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:39: Host Frequency set to 25000 KHz
14:41:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:39: ####CSD Registe 2.0 Values####
14:41:39: CSD_STRUCTURE                                 :0x1
14:41:39: Reserv1                                       :0x0
14:41:39: Time Access 1 TAAC                            :0xe
14:41:39: Time Access 2 NSAC*100                        :0x0
14:41:39: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:39: Card Command Classess CCC                     :0x5b5
14:41:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:39: DSR(driver stage register)  DSR_IMP           :0x0
14:41:39: Reserv2                                       :0x0
14:41:39: Device Size C_SIZE                            :0xedc8
14:41:39: Reserv3                                       :0x0
14:41:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:39: Reserv4                                       :0x0
14:41:39: Write Speed Factor R2W_FACTOR                 :0x2
14:41:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:39: FILE_FORMAT_GRP                               :0x0
14:41:39: COPY flag                                     :0x1
14:41:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:39: File_Format                                   :0x0
14:41:39: CRC                                           :0x0
14:41:39: ####CSD Registe Values####  

14:41:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:39: [GetSCRRegisterEntry] Passed
14:41:39: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:39: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:39: Data_Status_After Erases          : 0
14:41:39: CPRM Security Support             : No Security
14:41:39: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:39: Spec. Version                     : Version 3.0X
14:41:39: Extended Security Support         : Extended_Security_Not_Supported
14:41:39: Command Support                   : COMMAND_SUPPORT
14:41:39: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F150>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 4726 ] 
14:41:39: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9F0>, <py_sfcl.CommandDataDefinition object at 0x06129CF0>) , Command count = 4727 ] 
14:41:39: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:39: [ SetBusWidth(0x4) , Command count = 4728 ] 
14:41:39: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:39: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129F00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4729 ] 
14:41:39: Protected Area Size 0x28000
14:41:39: Bus Width           2
14:41:39: Secure Mode         0
14:41:39: Speed  Class        4
14:41:39: Perf Move           0
14:41:39: Au Size             9
14:41:39: Erase Size          15
14:41:39: Erase Timeout       1
14:41:39: Erase offset        1
14:41:39: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:39: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:39: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4730 ] 
14:41:39: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:39: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:39: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:39: Host Frequency set to 100000 KHz
14:41:39: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:39: ####CSD Registe 2.0 Values####
14:41:39: CSD_STRUCTURE                                 :0x1
14:41:39: Reserv1                                       :0x0
14:41:39: Time Access 1 TAAC                            :0xe
14:41:39: Time Access 2 NSAC*100                        :0x0
14:41:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:39: Card Command Classess CCC                     :0x5b5
14:41:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:39: DSR(driver stage register)  DSR_IMP           :0x0
14:41:39: Reserv2                                       :0x0
14:41:39: Device Size C_SIZE                            :0xedc8
14:41:39: Reserv3                                       :0x0
14:41:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:40: Reserv4                                       :0x0
14:41:40: Write Speed Factor R2W_FACTOR                 :0x2
14:41:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:40: FILE_FORMAT_GRP                               :0x0
14:41:40: COPY flag                                     :0x1
14:41:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:40: File_Format                                   :0x0
14:41:40: CRC                                           :0x0
14:41:40: ####CSD Registe Values####  

14:41:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A20>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 4731 ] 
14:41:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39F0>, <py_sfcl.CommandDataDefinition object at 0x06129060>) , Command count = 4732 ] 
14:41:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71CD2 to EndLba:0x3B71D52 with One's Pattern
14:41:40: [ WrLbaNoData(0x3B71CD2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4733 ] 
14:41:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71CD2 to EndLba:0x3B71D52 with One's Pattern 

14:41:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71D52 to EndLba:0x3B71DD2 with One's Pattern
14:41:40: [ WrLbaNoData(0x3B71D52, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4734 ] 
14:41:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71D52 to EndLba:0x3B71DD2 with One's Pattern 

14:41:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23259 to EndLba:0x2506F with Constant Pattern
14:41:40: [ RdLbaNoData(0x23259, 0x1E16, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4735 ] 
14:41:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23259 to EndLba:0x2506F with Constant Pattern 

14:41:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3849
14:41:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:40: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C4B0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129D50>, <py_sfcl.PySEnhancedCmdData object at 0x06129F60>, <None>) , Command count = 4736 ] 
14:41:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:40: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:42: Host Frequency set to 25000 KHz
14:41:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:42: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1E70>, 0x0, True) , Command count = 4737 ] 
14:41:42: [GO18_globalSetVolt]### Host voltage value is set.
14:41:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x061299F0>, 0x0, False) , Command count = 4738 ] 
14:41:42: [GO18_globalSetVolt]### Host voltage value is set.
14:41:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4739 ] 
14:41:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4740 ] 
14:41:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4741 ] 
14:41:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 4742 ] 
14:41:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 4743 ] 
14:41:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:42: [ SetCardRCA(0x1, 0xD555) , Command count = 4744 ] 
14:41:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:42: Host Frequency set to 25000 KHz
14:41:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:42: ####CSD Registe 2.0 Values####
14:41:42: CSD_STRUCTURE                                 :0x1
14:41:42: Reserv1                                       :0x0
14:41:42: Time Access 1 TAAC                            :0xe
14:41:42: Time Access 2 NSAC*100                        :0x0
14:41:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:42: Card Command Classess CCC                     :0x5b5
14:41:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:42: DSR(driver stage register)  DSR_IMP           :0x0
14:41:42: Reserv2                                       :0x0
14:41:42: Device Size C_SIZE                            :0xedc8
14:41:42: Reserv3                                       :0x0
14:41:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:42: Reserv4                                       :0x0
14:41:42: Write Speed Factor R2W_FACTOR                 :0x2
14:41:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:42: FILE_FORMAT_GRP                               :0x0
14:41:42: COPY flag                                     :0x1
14:41:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:42: File_Format                                   :0x0
14:41:42: CRC                                           :0x0
14:41:42: ####CSD Registe Values####  

14:41:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:42: [GetSCRRegisterEntry] Passed
14:41:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:42: Data_Status_After Erases          : 0
14:41:42: CPRM Security Support             : No Security
14:41:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:42: Spec. Version                     : Version 3.0X
14:41:42: Extended Security Support         : Extended_Security_Not_Supported
14:41:42: Command Support                   : COMMAND_SUPPORT
14:41:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129090>, <py_sfcl.CommandDataDefinition object at 0x061295A0>) , Command count = 4745 ] 
14:41:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CED0>, <py_sfcl.CommandDataDefinition object at 0x061299C0>) , Command count = 4746 ] 
14:41:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:42: [ SetBusWidth(0x4) , Command count = 4747 ] 
14:41:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4748 ] 
14:41:42: Protected Area Size 0x28000
14:41:42: Bus Width           2
14:41:42: Secure Mode         0
14:41:42: Speed  Class        4
14:41:42: Perf Move           0
14:41:42: Au Size             9
14:41:42: Erase Size          15
14:41:42: Erase Timeout       1
14:41:42: Erase offset        1
14:41:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4749 ] 
14:41:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:43: Host Frequency set to 100000 KHz
14:41:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:43: ####CSD Registe 2.0 Values####
14:41:43: CSD_STRUCTURE                                 :0x1
14:41:43: Reserv1                                       :0x0
14:41:43: Time Access 1 TAAC                            :0xe
14:41:43: Time Access 2 NSAC*100                        :0x0
14:41:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:43: Card Command Classess CCC                     :0x5b5
14:41:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:43: DSR(driver stage register)  DSR_IMP           :0x0
14:41:43: Reserv2                                       :0x0
14:41:43: Device Size C_SIZE                            :0xedc8
14:41:43: Reserv3                                       :0x0
14:41:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:43: Reserv4                                       :0x0
14:41:43: Write Speed Factor R2W_FACTOR                 :0x2
14:41:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:43: FILE_FORMAT_GRP                               :0x0
14:41:43: COPY flag                                     :0x1
14:41:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:43: File_Format                                   :0x0
14:41:43: CRC                                           :0x0
14:41:43: ####CSD Registe Values####  

14:41:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCC0>, <py_sfcl.CommandDataDefinition object at 0x06129900>) , Command count = 4750 ] 
14:41:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC00>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 4751 ] 
14:41:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EE1B to EndLba:0x3B6EE9B with One's Pattern
14:41:43: [ WrLbaNoData(0x3B6EE1B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4752 ] 
14:41:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EE1B to EndLba:0x3B6EE9B with One's Pattern 

14:41:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EE9B to EndLba:0x3B6EF1B with One's Pattern
14:41:43: [ WrLbaNoData(0x3B6EE9B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4753 ] 
14:41:43: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EE9B to EndLba:0x3B6EF1B with One's Pattern 

14:41:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23259 to EndLba:0x2506D with Constant Pattern
14:41:43: [ RdLbaNoData(0x23259, 0x1E14, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4754 ] 
14:41:43: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23259 to EndLba:0x2506D with Constant Pattern 

14:41:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3848
14:41:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E750>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FC60>, <py_sfcl.PySEnhancedCmdData object at 0x061293C0>, <None>) , Command count = 4755 ] 
14:41:43: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:45: Host Frequency set to 25000 KHz
14:41:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E6F0>, 0x0, True) , Command count = 4756 ] 
14:41:45: [GO18_globalSetVolt]### Host voltage value is set.
14:41:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CCC0>, 0x0, False) , Command count = 4757 ] 
14:41:45: [GO18_globalSetVolt]### Host voltage value is set.
14:41:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4758 ] 
14:41:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4759 ] 
14:41:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4760 ] 
14:41:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA80>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 4761 ] 
14:41:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C840>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 4762 ] 
14:41:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:46: [ SetCardRCA(0x1, 0xD555) , Command count = 4763 ] 
14:41:46: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:46: Host Frequency set to 25000 KHz
14:41:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:46: ####CSD Registe 2.0 Values####
14:41:46: CSD_STRUCTURE                                 :0x1
14:41:46: Reserv1                                       :0x0
14:41:46: Time Access 1 TAAC                            :0xe
14:41:46: Time Access 2 NSAC*100                        :0x0
14:41:46: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:46: Card Command Classess CCC                     :0x5b5
14:41:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:46: DSR(driver stage register)  DSR_IMP           :0x0
14:41:46: Reserv2                                       :0x0
14:41:46: Device Size C_SIZE                            :0xedc8
14:41:46: Reserv3                                       :0x0
14:41:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:46: Reserv4                                       :0x0
14:41:46: Write Speed Factor R2W_FACTOR                 :0x2
14:41:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:46: FILE_FORMAT_GRP                               :0x0
14:41:46: COPY flag                                     :0x1
14:41:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:46: File_Format                                   :0x0
14:41:46: CRC                                           :0x0
14:41:46: ####CSD Registe Values####  

14:41:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:46: [GetSCRRegisterEntry] Passed
14:41:46: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:46: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:46: Data_Status_After Erases          : 0
14:41:46: CPRM Security Support             : No Security
14:41:46: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:46: Spec. Version                     : Version 3.0X
14:41:46: Extended Security Support         : Extended_Security_Not_Supported
14:41:46: Command Support                   : COMMAND_SUPPORT
14:41:46: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7E0>, <py_sfcl.CommandDataDefinition object at 0x06145300>) , Command count = 4764 ] 
14:41:46: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0C0>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 4765 ] 
14:41:46: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:46: [ SetBusWidth(0x4) , Command count = 4766 ] 
14:41:46: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:46: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138480>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4767 ] 
14:41:46: Protected Area Size 0x28000
14:41:46: Bus Width           2
14:41:46: Secure Mode         0
14:41:46: Speed  Class        4
14:41:46: Perf Move           0
14:41:46: Au Size             9
14:41:46: Erase Size          15
14:41:46: Erase Timeout       1
14:41:46: Erase offset        1
14:41:46: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:46: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:46: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4768 ] 
14:41:46: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:46: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:46: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:46: Host Frequency set to 100000 KHz
14:41:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:46: ####CSD Registe 2.0 Values####
14:41:46: CSD_STRUCTURE                                 :0x1
14:41:46: Reserv1                                       :0x0
14:41:46: Time Access 1 TAAC                            :0xe
14:41:46: Time Access 2 NSAC*100                        :0x0
14:41:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:46: Card Command Classess CCC                     :0x5b5
14:41:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:46: DSR(driver stage register)  DSR_IMP           :0x0
14:41:46: Reserv2                                       :0x0
14:41:46: Device Size C_SIZE                            :0xedc8
14:41:46: Reserv3                                       :0x0
14:41:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:46: Reserv4                                       :0x0
14:41:46: Write Speed Factor R2W_FACTOR                 :0x2
14:41:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:46: FILE_FORMAT_GRP                               :0x0
14:41:46: COPY flag                                     :0x1
14:41:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:46: File_Format                                   :0x0
14:41:46: CRC                                           :0x0
14:41:46: ####CSD Registe Values####  

14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F690>, <py_sfcl.CommandDataDefinition object at 0x06129630>) , Command count = 4769 ] 
14:41:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE40>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 4770 ] 
14:41:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7072D to EndLba:0x3B707AD with One's Pattern
14:41:46: [ WrLbaNoData(0x3B7072D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4771 ] 
14:41:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7072D to EndLba:0x3B707AD with One's Pattern 

14:41:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B707AD to EndLba:0x3B7082D with One's Pattern
14:41:46: [ WrLbaNoData(0x3B707AD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4772 ] 
14:41:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B707AD to EndLba:0x3B7082D with One's Pattern 

14:41:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2325B to EndLba:0x2506D with Constant Pattern
14:41:47: [ RdLbaNoData(0x2325B, 0x1E12, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4773 ] 
14:41:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2325B to EndLba:0x2506D with Constant Pattern 

14:41:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3847
14:41:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CB70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129E70>, <py_sfcl.PySEnhancedCmdData object at 0x06129C60>, <None>) , Command count = 4774 ] 
14:41:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:49: Host Frequency set to 25000 KHz
14:41:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CB10>, 0x0, True) , Command count = 4775 ] 
14:41:49: [GO18_globalSetVolt]### Host voltage value is set.
14:41:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E930>, 0x0, False) , Command count = 4776 ] 
14:41:49: [GO18_globalSetVolt]### Host voltage value is set.
14:41:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4777 ] 
14:41:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4778 ] 
14:41:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4779 ] 
14:41:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x06129150>) , Command count = 4780 ] 
14:41:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5A0>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 4781 ] 
14:41:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:49: [ SetCardRCA(0x1, 0xD555) , Command count = 4782 ] 
14:41:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:49: Host Frequency set to 25000 KHz
14:41:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:49: ####CSD Registe 2.0 Values####
14:41:49: CSD_STRUCTURE                                 :0x1
14:41:49: Reserv1                                       :0x0
14:41:49: Time Access 1 TAAC                            :0xe
14:41:49: Time Access 2 NSAC*100                        :0x0
14:41:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:49: Card Command Classess CCC                     :0x5b5
14:41:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:49: DSR(driver stage register)  DSR_IMP           :0x0
14:41:49: Reserv2                                       :0x0
14:41:49: Device Size C_SIZE                            :0xedc8
14:41:49: Reserv3                                       :0x0
14:41:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:49: Reserv4                                       :0x0
14:41:49: Write Speed Factor R2W_FACTOR                 :0x2
14:41:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:49: FILE_FORMAT_GRP                               :0x0
14:41:49: COPY flag                                     :0x1
14:41:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:49: File_Format                                   :0x0
14:41:49: CRC                                           :0x0
14:41:49: ####CSD Registe Values####  

14:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:49: [GetSCRRegisterEntry] Passed
14:41:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:49: Data_Status_After Erases          : 0
14:41:49: CPRM Security Support             : No Security
14:41:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:49: Spec. Version                     : Version 3.0X
14:41:49: Extended Security Support         : Extended_Security_Not_Supported
14:41:49: Command Support                   : COMMAND_SUPPORT
14:41:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F90>, <py_sfcl.CommandDataDefinition object at 0x06129750>) , Command count = 4783 ] 
14:41:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 4784 ] 
14:41:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:49: [ SetBusWidth(0x4) , Command count = 4785 ] 
14:41:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4786 ] 
14:41:49: Protected Area Size 0x28000
14:41:49: Bus Width           2
14:41:49: Secure Mode         0
14:41:49: Speed  Class        4
14:41:49: Perf Move           0
14:41:49: Au Size             9
14:41:49: Erase Size          15
14:41:49: Erase Timeout       1
14:41:49: Erase offset        1
14:41:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4787 ] 
14:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:49: Host Frequency set to 100000 KHz
14:41:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:49: ####CSD Registe 2.0 Values####
14:41:49: CSD_STRUCTURE                                 :0x1
14:41:49: Reserv1                                       :0x0
14:41:49: Time Access 1 TAAC                            :0xe
14:41:49: Time Access 2 NSAC*100                        :0x0
14:41:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:49: Card Command Classess CCC                     :0x5b5
14:41:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:49: DSR(driver stage register)  DSR_IMP           :0x0
14:41:49: Reserv2                                       :0x0
14:41:49: Device Size C_SIZE                            :0xedc8
14:41:49: Reserv3                                       :0x0
14:41:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:50: Reserv4                                       :0x0
14:41:50: Write Speed Factor R2W_FACTOR                 :0x2
14:41:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:50: FILE_FORMAT_GRP                               :0x0
14:41:50: COPY flag                                     :0x1
14:41:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:50: File_Format                                   :0x0
14:41:50: CRC                                           :0x0
14:41:50: ####CSD Registe Values####  

14:41:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C30>, <py_sfcl.CommandDataDefinition object at 0x06138600>) , Command count = 4788 ] 
14:41:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CD20>, <py_sfcl.CommandDataDefinition object at 0x0612E900>) , Command count = 4789 ] 
14:41:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FE78 to EndLba:0x3B6FEF8 with One's Pattern
14:41:50: [ WrLbaNoData(0x3B6FE78, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4790 ] 
14:41:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FE78 to EndLba:0x3B6FEF8 with One's Pattern 

14:41:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FEF8 to EndLba:0x3B6FF78 with One's Pattern
14:41:50: [ WrLbaNoData(0x3B6FEF8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4791 ] 
14:41:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FEF8 to EndLba:0x3B6FF78 with One's Pattern 

14:41:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2325B to EndLba:0x2506B with Constant Pattern
14:41:50: [ RdLbaNoData(0x2325B, 0x1E10, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4792 ] 
14:41:50: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2325B to EndLba:0x2506B with Constant Pattern 

14:41:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3846
14:41:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:50: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E9F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E390>, <py_sfcl.PySEnhancedCmdData object at 0x061297E0>, <None>) , Command count = 4793 ] 
14:41:50: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:50: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:52: Host Frequency set to 25000 KHz
14:41:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:52: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:52: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132030>, 0x0, True) , Command count = 4794 ] 
14:41:52: [GO18_globalSetVolt]### Host voltage value is set.
14:41:52: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:52: [ SetVolt(<py_sfcl.SDVoltage object at 0x061325D0>, 0x0, False) , Command count = 4795 ] 
14:41:52: [GO18_globalSetVolt]### Host voltage value is set.
14:41:52: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4796 ] 
14:41:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4797 ] 
14:41:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4798 ] 
14:41:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x0612EB70>) , Command count = 4799 ] 
14:41:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4E0>, <py_sfcl.CommandDataDefinition object at 0x0613FB40>) , Command count = 4800 ] 
14:41:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:52: [ SetCardRCA(0x1, 0xD555) , Command count = 4801 ] 
14:41:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:53: Host Frequency set to 25000 KHz
14:41:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:53: ####CSD Registe 2.0 Values####
14:41:53: CSD_STRUCTURE                                 :0x1
14:41:53: Reserv1                                       :0x0
14:41:53: Time Access 1 TAAC                            :0xe
14:41:53: Time Access 2 NSAC*100                        :0x0
14:41:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:53: Card Command Classess CCC                     :0x5b5
14:41:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:53: DSR(driver stage register)  DSR_IMP           :0x0
14:41:53: Reserv2                                       :0x0
14:41:53: Device Size C_SIZE                            :0xedc8
14:41:53: Reserv3                                       :0x0
14:41:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:53: Reserv4                                       :0x0
14:41:53: Write Speed Factor R2W_FACTOR                 :0x2
14:41:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:53: FILE_FORMAT_GRP                               :0x0
14:41:53: COPY flag                                     :0x1
14:41:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:53: File_Format                                   :0x0
14:41:53: CRC                                           :0x0
14:41:53: ####CSD Registe Values####  

14:41:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:53: [GetSCRRegisterEntry] Passed
14:41:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:53: Data_Status_After Erases          : 0
14:41:53: CPRM Security Support             : No Security
14:41:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:53: Spec. Version                     : Version 3.0X
14:41:53: Extended Security Support         : Extended_Security_Not_Supported
14:41:53: Command Support                   : COMMAND_SUPPORT
14:41:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132690>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 4802 ] 
14:41:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298D0>, <py_sfcl.CommandDataDefinition object at 0x06132FC0>) , Command count = 4803 ] 
14:41:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:53: [ SetBusWidth(0x4) , Command count = 4804 ] 
14:41:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4805 ] 
14:41:53: Protected Area Size 0x28000
14:41:53: Bus Width           2
14:41:53: Secure Mode         0
14:41:53: Speed  Class        4
14:41:53: Perf Move           0
14:41:53: Au Size             9
14:41:53: Erase Size          15
14:41:53: Erase Timeout       1
14:41:53: Erase offset        1
14:41:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4806 ] 
14:41:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:53: Host Frequency set to 100000 KHz
14:41:53: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:53: ####CSD Registe 2.0 Values####
14:41:53: CSD_STRUCTURE                                 :0x1
14:41:53: Reserv1                                       :0x0
14:41:53: Time Access 1 TAAC                            :0xe
14:41:53: Time Access 2 NSAC*100                        :0x0
14:41:53: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:53: Card Command Classess CCC                     :0x5b5
14:41:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:53: DSR(driver stage register)  DSR_IMP           :0x0
14:41:53: Reserv2                                       :0x0
14:41:53: Device Size C_SIZE                            :0xedc8
14:41:53: Reserv3                                       :0x0
14:41:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:53: Reserv4                                       :0x0
14:41:53: Write Speed Factor R2W_FACTOR                 :0x2
14:41:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:53: FILE_FORMAT_GRP                               :0x0
14:41:53: COPY flag                                     :0x1
14:41:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:53: File_Format                                   :0x0
14:41:53: CRC                                           :0x0
14:41:53: ####CSD Registe Values####  

14:41:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D80>, <py_sfcl.CommandDataDefinition object at 0x06132630>) , Command count = 4807 ] 
14:41:53: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8D0>, <py_sfcl.CommandDataDefinition object at 0x0612EA20>) , Command count = 4808 ] 
14:41:53: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:53: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70CF2 to EndLba:0x3B70D72 with One's Pattern
14:41:53: [ WrLbaNoData(0x3B70CF2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4809 ] 
14:41:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70CF2 to EndLba:0x3B70D72 with One's Pattern 

14:41:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70D72 to EndLba:0x3B70DF2 with One's Pattern
14:41:53: [ WrLbaNoData(0x3B70D72, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4810 ] 
14:41:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70D72 to EndLba:0x3B70DF2 with One's Pattern 

14:41:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2325D to EndLba:0x2506B with Constant Pattern
14:41:53: [ RdLbaNoData(0x2325D, 0x1E0E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4811 ] 
14:41:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2325D to EndLba:0x2506B with Constant Pattern 

14:41:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3845
14:41:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E6C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EE10>, <py_sfcl.PySEnhancedCmdData object at 0x06132660>, <None>) , Command count = 4812 ] 
14:41:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:55: Host Frequency set to 25000 KHz
14:41:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F750>, 0x0, True) , Command count = 4813 ] 
14:41:55: [GO18_globalSetVolt]### Host voltage value is set.
14:41:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132C90>, 0x0, False) , Command count = 4814 ] 
14:41:55: [GO18_globalSetVolt]### Host voltage value is set.
14:41:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4815 ] 
14:41:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4816 ] 
14:41:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:56: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4817 ] 
14:41:56: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327B0>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 4818 ] 
14:41:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x0612E3F0>) , Command count = 4819 ] 
14:41:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:56: [ SetCardRCA(0x1, 0xD555) , Command count = 4820 ] 
14:41:56: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:56: Host Frequency set to 25000 KHz
14:41:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:56: ####CSD Registe 2.0 Values####
14:41:56: CSD_STRUCTURE                                 :0x1
14:41:56: Reserv1                                       :0x0
14:41:56: Time Access 1 TAAC                            :0xe
14:41:56: Time Access 2 NSAC*100                        :0x0
14:41:56: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:56: Card Command Classess CCC                     :0x5b5
14:41:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:56: DSR(driver stage register)  DSR_IMP           :0x0
14:41:56: Reserv2                                       :0x0
14:41:56: Device Size C_SIZE                            :0xedc8
14:41:56: Reserv3                                       :0x0
14:41:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:56: Reserv4                                       :0x0
14:41:56: Write Speed Factor R2W_FACTOR                 :0x2
14:41:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:56: FILE_FORMAT_GRP                               :0x0
14:41:56: COPY flag                                     :0x1
14:41:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:56: File_Format                                   :0x0
14:41:56: CRC                                           :0x0
14:41:56: ####CSD Registe Values####  

14:41:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:56: [GetSCRRegisterEntry] Passed
14:41:56: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:56: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:56: Data_Status_After Erases          : 0
14:41:56: CPRM Security Support             : No Security
14:41:56: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:56: Spec. Version                     : Version 3.0X
14:41:56: Extended Security Support         : Extended_Security_Not_Supported
14:41:56: Command Support                   : COMMAND_SUPPORT
14:41:56: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E990>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 4821 ] 
14:41:56: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 4822 ] 
14:41:56: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:56: [ SetBusWidth(0x4) , Command count = 4823 ] 
14:41:56: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:56: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061324B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4824 ] 
14:41:56: Protected Area Size 0x28000
14:41:56: Bus Width           2
14:41:56: Secure Mode         0
14:41:56: Speed  Class        4
14:41:56: Perf Move           0
14:41:56: Au Size             9
14:41:56: Erase Size          15
14:41:56: Erase Timeout       1
14:41:56: Erase offset        1
14:41:56: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:56: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:56: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4825 ] 
14:41:56: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:56: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:56: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:56: Host Frequency set to 100000 KHz
14:41:56: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:56: ####CSD Registe 2.0 Values####
14:41:56: CSD_STRUCTURE                                 :0x1
14:41:56: Reserv1                                       :0x0
14:41:56: Time Access 1 TAAC                            :0xe
14:41:56: Time Access 2 NSAC*100                        :0x0
14:41:56: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:56: Card Command Classess CCC                     :0x5b5
14:41:56: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:56: DSR(driver stage register)  DSR_IMP           :0x0
14:41:56: Reserv2                                       :0x0
14:41:56: Device Size C_SIZE                            :0xedc8
14:41:56: Reserv3                                       :0x0
14:41:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:56: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:56: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:56: Reserv4                                       :0x0
14:41:56: Write Speed Factor R2W_FACTOR                 :0x2
14:41:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:56: FILE_FORMAT_GRP                               :0x0
14:41:56: COPY flag                                     :0x1
14:41:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:56: File_Format                                   :0x0
14:41:56: CRC                                           :0x0
14:41:56: ####CSD Registe Values####  

14:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FEA0>, <py_sfcl.CommandDataDefinition object at 0x061329C0>) , Command count = 4826 ] 
14:41:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:41:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x06132AB0>) , Command count = 4827 ] 
14:41:57: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:41:57: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:41:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:41:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED3A to EndLba:0x3B6EDBA with One's Pattern
14:41:57: [ WrLbaNoData(0x3B6ED3A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4828 ] 
14:41:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED3A to EndLba:0x3B6EDBA with One's Pattern 

14:41:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EDBA to EndLba:0x3B6EE3A with One's Pattern
14:41:57: [ WrLbaNoData(0x3B6EDBA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4829 ] 
14:41:57: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EDBA to EndLba:0x3B6EE3A with One's Pattern 

14:41:57: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:41:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2325D to EndLba:0x25069 with Constant Pattern
14:41:57: [ RdLbaNoData(0x2325D, 0x1E0C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4830 ] 
14:41:57: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2325D to EndLba:0x25069 with Constant Pattern 

14:41:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3844
14:41:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:41:57: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132270>, <py_sfcl.PySEnhancedCmdData object at 0x061321B0>, <None>) , Command count = 4831 ] 
14:41:57: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:41:57: [GO4_globalInitCard]### Switch to Specify Card Type
14:41:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:59: Host Frequency set to 25000 KHz
14:41:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:59: [GO18_globalSetVolt]### Set Host Voltage value.
14:41:59: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:41:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C510>, 0x0, True) , Command count = 4832 ] 
14:41:59: [GO18_globalSetVolt]### Host voltage value is set.
14:41:59: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:41:59: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E35A0>, 0x0, False) , Command count = 4833 ] 
14:41:59: [GO18_globalSetVolt]### Host voltage value is set.
14:41:59: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4834 ] 
14:41:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:41:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4835 ] 
14:41:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:41:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:41:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:41:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:41:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:41:59: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4836 ] 
14:41:59: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:41:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E630>, <py_sfcl.CommandDataDefinition object at 0x06129BD0>) , Command count = 4837 ] 
14:41:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E870>, <py_sfcl.CommandDataDefinition object at 0x061323F0>) , Command count = 4838 ] 
14:41:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:41:59: [ SetCardRCA(0x1, 0xD555) , Command count = 4839 ] 
14:41:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:41:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:41:59: Host Frequency set to 25000 KHz
14:41:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:41:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:59: ####CSD Registe 2.0 Values####
14:41:59: CSD_STRUCTURE                                 :0x1
14:41:59: Reserv1                                       :0x0
14:41:59: Time Access 1 TAAC                            :0xe
14:41:59: Time Access 2 NSAC*100                        :0x0
14:41:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:41:59: Card Command Classess CCC                     :0x5b5
14:41:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:59: DSR(driver stage register)  DSR_IMP           :0x0
14:41:59: Reserv2                                       :0x0
14:41:59: Device Size C_SIZE                            :0xedc8
14:41:59: Reserv3                                       :0x0
14:41:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:41:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:41:59: Reserv4                                       :0x0
14:41:59: Write Speed Factor R2W_FACTOR                 :0x2
14:41:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:41:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:41:59: FILE_FORMAT_GRP                               :0x0
14:41:59: COPY flag                                     :0x1
14:41:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:41:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:41:59: File_Format                                   :0x0
14:41:59: CRC                                           :0x0
14:41:59: ####CSD Registe Values####  

14:41:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:41:59: [GetSCRRegisterEntry] Passed
14:41:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:41:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:41:59: Data_Status_After Erases          : 0
14:41:59: CPRM Security Support             : No Security
14:41:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:41:59: Spec. Version                     : Version 3.0X
14:41:59: Extended Security Support         : Extended_Security_Not_Supported
14:41:59: Command Support                   : COMMAND_SUPPORT
14:41:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E9C0>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 4840 ] 
14:41:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:41:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 4841 ] 
14:41:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:41:59: [ SetBusWidth(0x4) , Command count = 4842 ] 
14:41:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:41:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4843 ] 
14:41:59: Protected Area Size 0x28000
14:41:59: Bus Width           2
14:41:59: Secure Mode         0
14:41:59: Speed  Class        4
14:41:59: Perf Move           0
14:41:59: Au Size             9
14:41:59: Erase Size          15
14:41:59: Erase Timeout       1
14:41:59: Erase offset        1
14:41:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:41:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:41:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:41:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4844 ] 
14:41:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:41:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:41:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:41:59: Host Frequency set to 100000 KHz
14:41:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:41:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:41:59: ####CSD Registe 2.0 Values####
14:41:59: CSD_STRUCTURE                                 :0x1
14:41:59: Reserv1                                       :0x0
14:41:59: Time Access 1 TAAC                            :0xe
14:41:59: Time Access 2 NSAC*100                        :0x0
14:41:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:41:59: Card Command Classess CCC                     :0x5b5
14:41:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:41:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:41:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:41:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:41:59: DSR(driver stage register)  DSR_IMP           :0x0
14:41:59: Reserv2                                       :0x0
14:41:59: Device Size C_SIZE                            :0xedc8
14:41:59: Reserv3                                       :0x0
14:41:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:41:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:41:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:00: Reserv4                                       :0x0
14:42:00: Write Speed Factor R2W_FACTOR                 :0x2
14:42:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:00: FILE_FORMAT_GRP                               :0x0
14:42:00: COPY flag                                     :0x1
14:42:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:00: File_Format                                   :0x0
14:42:00: CRC                                           :0x0
14:42:00: ####CSD Registe Values####  

14:42:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F900>, <py_sfcl.CommandDataDefinition object at 0x061384B0>) , Command count = 4845 ] 
14:42:00: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x061324B0>) , Command count = 4846 ] 
14:42:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B709A0 to EndLba:0x3B70A20 with One's Pattern
14:42:00: [ WrLbaNoData(0x3B709A0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4847 ] 
14:42:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B709A0 to EndLba:0x3B70A20 with One's Pattern 

14:42:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A20 to EndLba:0x3B70AA0 with One's Pattern
14:42:00: [ WrLbaNoData(0x3B70A20, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4848 ] 
14:42:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A20 to EndLba:0x3B70AA0 with One's Pattern 

14:42:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2325F to EndLba:0x25069 with Constant Pattern
14:42:00: [ RdLbaNoData(0x2325F, 0x1E0A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4849 ] 
14:42:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2325F to EndLba:0x25069 with Constant Pattern 

14:42:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3843
14:42:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EBD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129F30>, <py_sfcl.PySEnhancedCmdData object at 0x06138030>, <None>) , Command count = 4850 ] 
14:42:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:02: Host Frequency set to 25000 KHz
14:42:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E120>, 0x0, True) , Command count = 4851 ] 
14:42:02: [GO18_globalSetVolt]### Host voltage value is set.
14:42:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132F90>, 0x0, False) , Command count = 4852 ] 
14:42:02: [GO18_globalSetVolt]### Host voltage value is set.
14:42:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4853 ] 
14:42:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4854 ] 
14:42:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4855 ] 
14:42:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B70>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 4856 ] 
14:42:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C450>, <py_sfcl.CommandDataDefinition object at 0x06132210>) , Command count = 4857 ] 
14:42:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:02: [ SetCardRCA(0x1, 0xD555) , Command count = 4858 ] 
14:42:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:03: Host Frequency set to 25000 KHz
14:42:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:03: ####CSD Registe 2.0 Values####
14:42:03: CSD_STRUCTURE                                 :0x1
14:42:03: Reserv1                                       :0x0
14:42:03: Time Access 1 TAAC                            :0xe
14:42:03: Time Access 2 NSAC*100                        :0x0
14:42:03: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:03: Card Command Classess CCC                     :0x5b5
14:42:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:03: DSR(driver stage register)  DSR_IMP           :0x0
14:42:03: Reserv2                                       :0x0
14:42:03: Device Size C_SIZE                            :0xedc8
14:42:03: Reserv3                                       :0x0
14:42:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:03: Reserv4                                       :0x0
14:42:03: Write Speed Factor R2W_FACTOR                 :0x2
14:42:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:03: FILE_FORMAT_GRP                               :0x0
14:42:03: COPY flag                                     :0x1
14:42:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:03: File_Format                                   :0x0
14:42:03: CRC                                           :0x0
14:42:03: ####CSD Registe Values####  

14:42:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:03: [GetSCRRegisterEntry] Passed
14:42:03: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:03: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:03: Data_Status_After Erases          : 0
14:42:03: CPRM Security Support             : No Security
14:42:03: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:03: Spec. Version                     : Version 3.0X
14:42:03: Extended Security Support         : Extended_Security_Not_Supported
14:42:03: Command Support                   : COMMAND_SUPPORT
14:42:03: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F30>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 4859 ] 
14:42:03: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 4860 ] 
14:42:03: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:03: [ SetBusWidth(0x4) , Command count = 4861 ] 
14:42:03: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:03: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4862 ] 
14:42:03: Protected Area Size 0x28000
14:42:03: Bus Width           2
14:42:03: Secure Mode         0
14:42:03: Speed  Class        4
14:42:03: Perf Move           0
14:42:03: Au Size             9
14:42:03: Erase Size          15
14:42:03: Erase Timeout       1
14:42:03: Erase offset        1
14:42:03: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:03: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:03: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4863 ] 
14:42:03: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:03: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:03: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:03: Host Frequency set to 100000 KHz
14:42:03: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:03: ####CSD Registe 2.0 Values####
14:42:03: CSD_STRUCTURE                                 :0x1
14:42:03: Reserv1                                       :0x0
14:42:03: Time Access 1 TAAC                            :0xe
14:42:03: Time Access 2 NSAC*100                        :0x0
14:42:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:03: Card Command Classess CCC                     :0x5b5
14:42:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:03: DSR(driver stage register)  DSR_IMP           :0x0
14:42:03: Reserv2                                       :0x0
14:42:03: Device Size C_SIZE                            :0xedc8
14:42:03: Reserv3                                       :0x0
14:42:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:03: Reserv4                                       :0x0
14:42:03: Write Speed Factor R2W_FACTOR                 :0x2
14:42:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:03: FILE_FORMAT_GRP                               :0x0
14:42:03: COPY flag                                     :0x1
14:42:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:03: File_Format                                   :0x0
14:42:03: CRC                                           :0x0
14:42:03: ####CSD Registe Values####  

14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138090>, <py_sfcl.CommandDataDefinition object at 0x06138CF0>) , Command count = 4864 ] 
14:42:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x06132F00>) , Command count = 4865 ] 
14:42:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F161 to EndLba:0x3B6F1E1 with One's Pattern
14:42:03: [ WrLbaNoData(0x3B6F161, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4866 ] 
14:42:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F161 to EndLba:0x3B6F1E1 with One's Pattern 

14:42:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F1E1 to EndLba:0x3B6F261 with One's Pattern
14:42:03: [ WrLbaNoData(0x3B6F1E1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4867 ] 
14:42:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F1E1 to EndLba:0x3B6F261 with One's Pattern 

14:42:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2325F to EndLba:0x25067 with Constant Pattern
14:42:03: [ RdLbaNoData(0x2325F, 0x1E08, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4868 ] 
14:42:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2325F to EndLba:0x25067 with Constant Pattern 

14:42:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3842
14:42:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132BD0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132180>, <py_sfcl.PySEnhancedCmdData object at 0x06138540>, <None>) , Command count = 4869 ] 
14:42:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:06: Host Frequency set to 25000 KHz
14:42:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138C90>, 0x0, True) , Command count = 4870 ] 
14:42:06: [GO18_globalSetVolt]### Host voltage value is set.
14:42:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138900>, 0x0, False) , Command count = 4871 ] 
14:42:06: [GO18_globalSetVolt]### Host voltage value is set.
14:42:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4872 ] 
14:42:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4873 ] 
14:42:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4874 ] 
14:42:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138AE0>) , Command count = 4875 ] 
14:42:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06138F90>) , Command count = 4876 ] 
14:42:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:06: [ SetCardRCA(0x1, 0xD555) , Command count = 4877 ] 
14:42:06: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:06: Host Frequency set to 25000 KHz
14:42:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:06: ####CSD Registe 2.0 Values####
14:42:06: CSD_STRUCTURE                                 :0x1
14:42:06: Reserv1                                       :0x0
14:42:06: Time Access 1 TAAC                            :0xe
14:42:06: Time Access 2 NSAC*100                        :0x0
14:42:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:06: Card Command Classess CCC                     :0x5b5
14:42:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:06: DSR(driver stage register)  DSR_IMP           :0x0
14:42:06: Reserv2                                       :0x0
14:42:06: Device Size C_SIZE                            :0xedc8
14:42:06: Reserv3                                       :0x0
14:42:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:06: Reserv4                                       :0x0
14:42:06: Write Speed Factor R2W_FACTOR                 :0x2
14:42:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:06: FILE_FORMAT_GRP                               :0x0
14:42:06: COPY flag                                     :0x1
14:42:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:06: File_Format                                   :0x0
14:42:06: CRC                                           :0x0
14:42:06: ####CSD Registe Values####  

14:42:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:06: [GetSCRRegisterEntry] Passed
14:42:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:06: Data_Status_After Erases          : 0
14:42:06: CPRM Security Support             : No Security
14:42:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:06: Spec. Version                     : Version 3.0X
14:42:06: Extended Security Support         : Extended_Security_Not_Supported
14:42:06: Command Support                   : COMMAND_SUPPORT
14:42:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138960>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 4878 ] 
14:42:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x06138DB0>) , Command count = 4879 ] 
14:42:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:06: [ SetBusWidth(0x4) , Command count = 4880 ] 
14:42:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061389F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4881 ] 
14:42:06: Protected Area Size 0x28000
14:42:06: Bus Width           2
14:42:06: Secure Mode         0
14:42:06: Speed  Class        4
14:42:06: Perf Move           0
14:42:06: Au Size             9
14:42:06: Erase Size          15
14:42:06: Erase Timeout       1
14:42:06: Erase offset        1
14:42:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4882 ] 
14:42:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:06: Host Frequency set to 100000 KHz
14:42:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:06: ####CSD Registe 2.0 Values####
14:42:06: CSD_STRUCTURE                                 :0x1
14:42:06: Reserv1                                       :0x0
14:42:06: Time Access 1 TAAC                            :0xe
14:42:06: Time Access 2 NSAC*100                        :0x0
14:42:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:06: Card Command Classess CCC                     :0x5b5
14:42:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:06: DSR(driver stage register)  DSR_IMP           :0x0
14:42:06: Reserv2                                       :0x0
14:42:06: Device Size C_SIZE                            :0xedc8
14:42:06: Reserv3                                       :0x0
14:42:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:06: Reserv4                                       :0x0
14:42:06: Write Speed Factor R2W_FACTOR                 :0x2
14:42:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:07: FILE_FORMAT_GRP                               :0x0
14:42:07: COPY flag                                     :0x1
14:42:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:07: File_Format                                   :0x0
14:42:07: CRC                                           :0x0
14:42:07: ####CSD Registe Values####  

14:42:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132870>, <py_sfcl.CommandDataDefinition object at 0x06132EA0>) , Command count = 4883 ] 
14:42:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 4884 ] 
14:42:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70ECC to EndLba:0x3B70F4C with One's Pattern
14:42:07: [ WrLbaNoData(0x3B70ECC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4885 ] 
14:42:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70ECC to EndLba:0x3B70F4C with One's Pattern 

14:42:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70F4C to EndLba:0x3B70FCC with One's Pattern
14:42:07: [ WrLbaNoData(0x3B70F4C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4886 ] 
14:42:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70F4C to EndLba:0x3B70FCC with One's Pattern 

14:42:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23261 to EndLba:0x25067 with Constant Pattern
14:42:07: [ RdLbaNoData(0x23261, 0x1E06, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4887 ] 
14:42:07: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23261 to EndLba:0x25067 with Constant Pattern 

14:42:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3841
14:42:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138390>, <py_sfcl.PySEnhancedCmdData object at 0x06138F60>, <None>) , Command count = 4888 ] 
14:42:07: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:09: Host Frequency set to 25000 KHz
14:42:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132B10>, 0x0, True) , Command count = 4889 ] 
14:42:09: [GO18_globalSetVolt]### Host voltage value is set.
14:42:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FFC0>, 0x0, False) , Command count = 4890 ] 
14:42:09: [GO18_globalSetVolt]### Host voltage value is set.
14:42:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4891 ] 
14:42:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4892 ] 
14:42:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4893 ] 
14:42:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 4894 ] 
14:42:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F420>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 4895 ] 
14:42:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:09: [ SetCardRCA(0x1, 0xD555) , Command count = 4896 ] 
14:42:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:09: Host Frequency set to 25000 KHz
14:42:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:09: ####CSD Registe 2.0 Values####
14:42:09: CSD_STRUCTURE                                 :0x1
14:42:09: Reserv1                                       :0x0
14:42:09: Time Access 1 TAAC                            :0xe
14:42:09: Time Access 2 NSAC*100                        :0x0
14:42:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:09: Card Command Classess CCC                     :0x5b5
14:42:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:09: DSR(driver stage register)  DSR_IMP           :0x0
14:42:09: Reserv2                                       :0x0
14:42:09: Device Size C_SIZE                            :0xedc8
14:42:09: Reserv3                                       :0x0
14:42:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:09: Reserv4                                       :0x0
14:42:09: Write Speed Factor R2W_FACTOR                 :0x2
14:42:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:09: FILE_FORMAT_GRP                               :0x0
14:42:09: COPY flag                                     :0x1
14:42:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:09: File_Format                                   :0x0
14:42:09: CRC                                           :0x0
14:42:09: ####CSD Registe Values####  

14:42:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:09: [GetSCRRegisterEntry] Passed
14:42:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:09: Data_Status_After Erases          : 0
14:42:09: CPRM Security Support             : No Security
14:42:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:09: Spec. Version                     : Version 3.0X
14:42:09: Extended Security Support         : Extended_Security_Not_Supported
14:42:09: Command Support                   : COMMAND_SUPPORT
14:42:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FDE0>, <py_sfcl.CommandDataDefinition object at 0x061451E0>) , Command count = 4897 ] 
14:42:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x06138990>) , Command count = 4898 ] 
14:42:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:09: [ SetBusWidth(0x4) , Command count = 4899 ] 
14:42:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138870>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4900 ] 
14:42:09: Protected Area Size 0x28000
14:42:09: Bus Width           2
14:42:09: Secure Mode         0
14:42:09: Speed  Class        4
14:42:09: Perf Move           0
14:42:09: Au Size             9
14:42:09: Erase Size          15
14:42:09: Erase Timeout       1
14:42:09: Erase offset        1
14:42:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4901 ] 
14:42:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:10: Host Frequency set to 100000 KHz
14:42:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:10: ####CSD Registe 2.0 Values####
14:42:10: CSD_STRUCTURE                                 :0x1
14:42:10: Reserv1                                       :0x0
14:42:10: Time Access 1 TAAC                            :0xe
14:42:10: Time Access 2 NSAC*100                        :0x0
14:42:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:10: Card Command Classess CCC                     :0x5b5
14:42:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:10: DSR(driver stage register)  DSR_IMP           :0x0
14:42:10: Reserv2                                       :0x0
14:42:10: Device Size C_SIZE                            :0xedc8
14:42:10: Reserv3                                       :0x0
14:42:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:10: Reserv4                                       :0x0
14:42:10: Write Speed Factor R2W_FACTOR                 :0x2
14:42:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:10: FILE_FORMAT_GRP                               :0x0
14:42:10: COPY flag                                     :0x1
14:42:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:10: File_Format                                   :0x0
14:42:10: CRC                                           :0x0
14:42:10: ####CSD Registe Values####  

14:42:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC30>, <py_sfcl.CommandDataDefinition object at 0x052AF240>) , Command count = 4902 ] 
14:42:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x061389F0>) , Command count = 4903 ] 
14:42:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B711E2 to EndLba:0x3B71262 with One's Pattern
14:42:10: [ WrLbaNoData(0x3B711E2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4904 ] 
14:42:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B711E2 to EndLba:0x3B71262 with One's Pattern 

14:42:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71262 to EndLba:0x3B712E2 with One's Pattern
14:42:10: [ WrLbaNoData(0x3B71262, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4905 ] 
14:42:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71262 to EndLba:0x3B712E2 with One's Pattern 

14:42:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23261 to EndLba:0x25065 with Constant Pattern
14:42:10: [ RdLbaNoData(0x23261, 0x1E04, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4906 ] 
14:42:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23261 to EndLba:0x25065 with Constant Pattern 

14:42:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3840
14:42:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C1E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FC00>, <py_sfcl.PySEnhancedCmdData object at 0x0613FAE0>, <None>) , Command count = 4907 ] 
14:42:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:12: Host Frequency set to 25000 KHz
14:42:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F9C0>, 0x0, True) , Command count = 4908 ] 
14:42:12: [GO18_globalSetVolt]### Host voltage value is set.
14:42:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F780>, 0x0, False) , Command count = 4909 ] 
14:42:12: [GO18_globalSetVolt]### Host voltage value is set.
14:42:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4910 ] 
14:42:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4911 ] 
14:42:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4912 ] 
14:42:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323C0>, <py_sfcl.CommandDataDefinition object at 0x0613F510>) , Command count = 4913 ] 
14:42:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x061389F0>) , Command count = 4914 ] 
14:42:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:13: [ SetCardRCA(0x1, 0xD555) , Command count = 4915 ] 
14:42:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:13: Host Frequency set to 25000 KHz
14:42:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:13: ####CSD Registe 2.0 Values####
14:42:13: CSD_STRUCTURE                                 :0x1
14:42:13: Reserv1                                       :0x0
14:42:13: Time Access 1 TAAC                            :0xe
14:42:13: Time Access 2 NSAC*100                        :0x0
14:42:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:13: Card Command Classess CCC                     :0x5b5
14:42:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:13: DSR(driver stage register)  DSR_IMP           :0x0
14:42:13: Reserv2                                       :0x0
14:42:13: Device Size C_SIZE                            :0xedc8
14:42:13: Reserv3                                       :0x0
14:42:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:13: Reserv4                                       :0x0
14:42:13: Write Speed Factor R2W_FACTOR                 :0x2
14:42:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:13: FILE_FORMAT_GRP                               :0x0
14:42:13: COPY flag                                     :0x1
14:42:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:13: File_Format                                   :0x0
14:42:13: CRC                                           :0x0
14:42:13: ####CSD Registe Values####  

14:42:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:13: [GetSCRRegisterEntry] Passed
14:42:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:13: Data_Status_After Erases          : 0
14:42:13: CPRM Security Support             : No Security
14:42:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:13: Spec. Version                     : Version 3.0X
14:42:13: Extended Security Support         : Extended_Security_Not_Supported
14:42:13: Command Support                   : COMMAND_SUPPORT
14:42:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3C30>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 4916 ] 
14:42:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x0613FE10>) , Command count = 4917 ] 
14:42:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:13: [ SetBusWidth(0x4) , Command count = 4918 ] 
14:42:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E3540>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4919 ] 
14:42:13: Protected Area Size 0x28000
14:42:13: Bus Width           2
14:42:13: Secure Mode         0
14:42:13: Speed  Class        4
14:42:13: Perf Move           0
14:42:13: Au Size             9
14:42:13: Erase Size          15
14:42:13: Erase Timeout       1
14:42:13: Erase offset        1
14:42:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4920 ] 
14:42:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:13: Host Frequency set to 100000 KHz
14:42:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:13: ####CSD Registe 2.0 Values####
14:42:13: CSD_STRUCTURE                                 :0x1
14:42:13: Reserv1                                       :0x0
14:42:13: Time Access 1 TAAC                            :0xe
14:42:13: Time Access 2 NSAC*100                        :0x0
14:42:13: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:13: Card Command Classess CCC                     :0x5b5
14:42:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:13: DSR(driver stage register)  DSR_IMP           :0x0
14:42:13: Reserv2                                       :0x0
14:42:13: Device Size C_SIZE                            :0xedc8
14:42:13: Reserv3                                       :0x0
14:42:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:13: Reserv4                                       :0x0
14:42:13: Write Speed Factor R2W_FACTOR                 :0x2
14:42:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:13: FILE_FORMAT_GRP                               :0x0
14:42:13: COPY flag                                     :0x1
14:42:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:13: File_Format                                   :0x0
14:42:13: CRC                                           :0x0
14:42:13: ####CSD Registe Values####  

14:42:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F390>, <py_sfcl.CommandDataDefinition object at 0x060E34E0>) , Command count = 4921 ] 
14:42:13: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F030>, <py_sfcl.CommandDataDefinition object at 0x06138870>) , Command count = 4922 ] 
14:42:13: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:13: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:13: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F455 to EndLba:0x3B6F4D5 with One's Pattern
14:42:14: [ WrLbaNoData(0x3B6F455, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4923 ] 
14:42:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F455 to EndLba:0x3B6F4D5 with One's Pattern 

14:42:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F4D5 to EndLba:0x3B6F555 with One's Pattern
14:42:14: [ WrLbaNoData(0x3B6F4D5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4924 ] 
14:42:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F4D5 to EndLba:0x3B6F555 with One's Pattern 

14:42:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23263 to EndLba:0x25065 with Constant Pattern
14:42:14: [ RdLbaNoData(0x23263, 0x1E02, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4925 ] 
14:42:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23263 to EndLba:0x25065 with Constant Pattern 

14:42:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3839
14:42:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x05184030>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052BB4E0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F8A0>, <None>) , Command count = 4926 ] 
14:42:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:16: Host Frequency set to 25000 KHz
14:42:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:16: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:16: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F960>, 0x0, True) , Command count = 4927 ] 
14:42:16: [GO18_globalSetVolt]### Host voltage value is set.
14:42:16: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:16: [ SetVolt(<py_sfcl.SDVoltage object at 0x052577E0>, 0x0, False) , Command count = 4928 ] 
14:42:16: [GO18_globalSetVolt]### Host voltage value is set.
14:42:16: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4929 ] 
14:42:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4930 ] 
14:42:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:16: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4931 ] 
14:42:16: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x0613FF60>) , Command count = 4932 ] 
14:42:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x0613FBD0>) , Command count = 4933 ] 
14:42:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:16: [ SetCardRCA(0x1, 0xD555) , Command count = 4934 ] 
14:42:16: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:16: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:16: Host Frequency set to 25000 KHz
14:42:16: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:16: ####CSD Registe 2.0 Values####
14:42:16: CSD_STRUCTURE                                 :0x1
14:42:16: Reserv1                                       :0x0
14:42:16: Time Access 1 TAAC                            :0xe
14:42:16: Time Access 2 NSAC*100                        :0x0
14:42:16: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:16: Card Command Classess CCC                     :0x5b5
14:42:16: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:16: DSR(driver stage register)  DSR_IMP           :0x0
14:42:16: Reserv2                                       :0x0
14:42:16: Device Size C_SIZE                            :0xedc8
14:42:16: Reserv3                                       :0x0
14:42:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:16: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:16: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:16: Reserv4                                       :0x0
14:42:16: Write Speed Factor R2W_FACTOR                 :0x2
14:42:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:16: FILE_FORMAT_GRP                               :0x0
14:42:16: COPY flag                                     :0x1
14:42:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:16: File_Format                                   :0x0
14:42:16: CRC                                           :0x0
14:42:16: ####CSD Registe Values####  

14:42:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:16: [GetSCRRegisterEntry] Passed
14:42:16: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:16: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:16: Data_Status_After Erases          : 0
14:42:16: CPRM Security Support             : No Security
14:42:16: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:16: Spec. Version                     : Version 3.0X
14:42:16: Extended Security Support         : Extended_Security_Not_Supported
14:42:16: Command Support                   : COMMAND_SUPPORT
14:42:16: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F4B0>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 4935 ] 
14:42:16: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x0611C030>) , Command count = 4936 ] 
14:42:16: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:16: [ SetBusWidth(0x4) , Command count = 4937 ] 
14:42:16: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:16: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C3F0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4938 ] 
14:42:16: Protected Area Size 0x28000
14:42:16: Bus Width           2
14:42:16: Secure Mode         0
14:42:16: Speed  Class        4
14:42:16: Perf Move           0
14:42:16: Au Size             9
14:42:16: Erase Size          15
14:42:16: Erase Timeout       1
14:42:16: Erase offset        1
14:42:16: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:16: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:16: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4939 ] 
14:42:16: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:16: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:16: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:16: Host Frequency set to 100000 KHz
14:42:16: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:16: ####CSD Registe 2.0 Values####
14:42:16: CSD_STRUCTURE                                 :0x1
14:42:17: Reserv1                                       :0x0
14:42:17: Time Access 1 TAAC                            :0xe
14:42:17: Time Access 2 NSAC*100                        :0x0
14:42:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:17: Card Command Classess CCC                     :0x5b5
14:42:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:17: DSR(driver stage register)  DSR_IMP           :0x0
14:42:17: Reserv2                                       :0x0
14:42:17: Device Size C_SIZE                            :0xedc8
14:42:17: Reserv3                                       :0x0
14:42:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:17: Reserv4                                       :0x0
14:42:17: Write Speed Factor R2W_FACTOR                 :0x2
14:42:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:17: FILE_FORMAT_GRP                               :0x0
14:42:17: COPY flag                                     :0x1
14:42:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:17: File_Format                                   :0x0
14:42:17: CRC                                           :0x0
14:42:17: ####CSD Registe Values####  

14:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFC30>, <py_sfcl.CommandDataDefinition object at 0x0611CF00>) , Command count = 4940 ] 
14:42:17: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x052C1C90>) , Command count = 4941 ] 
14:42:17: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:17: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D8D6 to EndLba:0x3B6D956 with One's Pattern
14:42:17: [ WrLbaNoData(0x3B6D8D6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4942 ] 
14:42:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D8D6 to EndLba:0x3B6D956 with One's Pattern 

14:42:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D956 to EndLba:0x3B6D9D6 with One's Pattern
14:42:17: [ WrLbaNoData(0x3B6D956, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4943 ] 
14:42:17: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D956 to EndLba:0x3B6D9D6 with One's Pattern 

14:42:17: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:17: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23263 to EndLba:0x25063 with Constant Pattern
14:42:17: [ RdLbaNoData(0x23263, 0x1E00, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4944 ] 
14:42:17: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23263 to EndLba:0x25063 with Constant Pattern 

14:42:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3838
14:42:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:17: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BBFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052C1F00>, <py_sfcl.PySEnhancedCmdData object at 0x0613F3C0>, <None>) , Command count = 4945 ] 
14:42:17: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:19: Host Frequency set to 25000 KHz
14:42:19: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:19: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:19: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C900>, 0x0, True) , Command count = 4946 ] 
14:42:19: [GO18_globalSetVolt]### Host voltage value is set.
14:42:19: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:19: [ SetVolt(<py_sfcl.SDVoltage object at 0x0529B4B0>, 0x0, False) , Command count = 4947 ] 
14:42:19: [GO18_globalSetVolt]### Host voltage value is set.
14:42:19: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4948 ] 
14:42:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4949 ] 
14:42:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:19: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4950 ] 
14:42:19: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138510>, <py_sfcl.CommandDataDefinition object at 0x0518AE70>) , Command count = 4951 ] 
14:42:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F570>, <py_sfcl.CommandDataDefinition object at 0x052C1FC0>) , Command count = 4952 ] 
14:42:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:19: [ SetCardRCA(0x1, 0xD555) , Command count = 4953 ] 
14:42:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:20: Host Frequency set to 25000 KHz
14:42:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:20: ####CSD Registe 2.0 Values####
14:42:20: CSD_STRUCTURE                                 :0x1
14:42:20: Reserv1                                       :0x0
14:42:20: Time Access 1 TAAC                            :0xe
14:42:20: Time Access 2 NSAC*100                        :0x0
14:42:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:20: Card Command Classess CCC                     :0x5b5
14:42:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:20: DSR(driver stage register)  DSR_IMP           :0x0
14:42:20: Reserv2                                       :0x0
14:42:20: Device Size C_SIZE                            :0xedc8
14:42:20: Reserv3                                       :0x0
14:42:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:20: Reserv4                                       :0x0
14:42:20: Write Speed Factor R2W_FACTOR                 :0x2
14:42:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:20: FILE_FORMAT_GRP                               :0x0
14:42:20: COPY flag                                     :0x1
14:42:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:20: File_Format                                   :0x0
14:42:20: CRC                                           :0x0
14:42:20: ####CSD Registe Values####  

14:42:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:20: [GetSCRRegisterEntry] Passed
14:42:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:20: Data_Status_After Erases          : 0
14:42:20: CPRM Security Support             : No Security
14:42:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:20: Spec. Version                     : Version 3.0X
14:42:20: Extended Security Support         : Extended_Security_Not_Supported
14:42:20: Command Support                   : COMMAND_SUPPORT
14:42:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B70>, <py_sfcl.CommandDataDefinition object at 0x052C1DE0>) , Command count = 4954 ] 
14:42:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138E70>, <py_sfcl.CommandDataDefinition object at 0x0611C240>) , Command count = 4955 ] 
14:42:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:20: [ SetBusWidth(0x4) , Command count = 4956 ] 
14:42:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CF30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4957 ] 
14:42:20: Protected Area Size 0x28000
14:42:20: Bus Width           2
14:42:20: Secure Mode         0
14:42:20: Speed  Class        4
14:42:20: Perf Move           0
14:42:20: Au Size             9
14:42:20: Erase Size          15
14:42:20: Erase Timeout       1
14:42:20: Erase offset        1
14:42:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4958 ] 
14:42:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:20: Host Frequency set to 100000 KHz
14:42:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:20: ####CSD Registe 2.0 Values####
14:42:20: CSD_STRUCTURE                                 :0x1
14:42:20: Reserv1                                       :0x0
14:42:20: Time Access 1 TAAC                            :0xe
14:42:20: Time Access 2 NSAC*100                        :0x0
14:42:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:20: Card Command Classess CCC                     :0x5b5
14:42:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:20: DSR(driver stage register)  DSR_IMP           :0x0
14:42:20: Reserv2                                       :0x0
14:42:20: Device Size C_SIZE                            :0xedc8
14:42:20: Reserv3                                       :0x0
14:42:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:20: Reserv4                                       :0x0
14:42:20: Write Speed Factor R2W_FACTOR                 :0x2
14:42:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:20: FILE_FORMAT_GRP                               :0x0
14:42:20: COPY flag                                     :0x1
14:42:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:20: File_Format                                   :0x0
14:42:20: CRC                                           :0x0
14:42:20: ####CSD Registe Values####  

14:42:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F210>, <py_sfcl.CommandDataDefinition object at 0x0611C060>) , Command count = 4959 ] 
14:42:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F6F0>, <py_sfcl.CommandDataDefinition object at 0x060E3750>) , Command count = 4960 ] 
14:42:20: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:20: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70477 to EndLba:0x3B704F7 with One's Pattern
14:42:20: [ WrLbaNoData(0x3B70477, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4961 ] 
14:42:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70477 to EndLba:0x3B704F7 with One's Pattern 

14:42:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704F7 to EndLba:0x3B70577 with One's Pattern
14:42:20: [ WrLbaNoData(0x3B704F7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4962 ] 
14:42:20: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704F7 to EndLba:0x3B70577 with One's Pattern 

14:42:20: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23265 to EndLba:0x25063 with Constant Pattern
14:42:20: [ RdLbaNoData(0x23265, 0x1DFE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4963 ] 
14:42:20: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23265 to EndLba:0x25063 with Constant Pattern 

14:42:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3837
14:42:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:20: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132D20>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129660>, <py_sfcl.PySEnhancedCmdData object at 0x0611C780>, <None>) , Command count = 4964 ] 
14:42:20: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:22: Host Frequency set to 25000 KHz
14:42:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:22: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:22: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:22: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFEA0>, 0x0, True) , Command count = 4965 ] 
14:42:22: [GO18_globalSetVolt]### Host voltage value is set.
14:42:22: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F4E0>, 0x0, False) , Command count = 4966 ] 
14:42:23: [GO18_globalSetVolt]### Host voltage value is set.
14:42:23: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4967 ] 
14:42:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4968 ] 
14:42:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:23: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4969 ] 
14:42:23: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138ED0>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 4970 ] 
14:42:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129A80>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 4971 ] 
14:42:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:23: [ SetCardRCA(0x1, 0xD555) , Command count = 4972 ] 
14:42:23: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:23: Host Frequency set to 25000 KHz
14:42:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:23: ####CSD Registe 2.0 Values####
14:42:23: CSD_STRUCTURE                                 :0x1
14:42:23: Reserv1                                       :0x0
14:42:23: Time Access 1 TAAC                            :0xe
14:42:23: Time Access 2 NSAC*100                        :0x0
14:42:23: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:23: Card Command Classess CCC                     :0x5b5
14:42:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:23: DSR(driver stage register)  DSR_IMP           :0x0
14:42:23: Reserv2                                       :0x0
14:42:23: Device Size C_SIZE                            :0xedc8
14:42:23: Reserv3                                       :0x0
14:42:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:23: Reserv4                                       :0x0
14:42:23: Write Speed Factor R2W_FACTOR                 :0x2
14:42:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:23: FILE_FORMAT_GRP                               :0x0
14:42:23: COPY flag                                     :0x1
14:42:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:23: File_Format                                   :0x0
14:42:23: CRC                                           :0x0
14:42:23: ####CSD Registe Values####  

14:42:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:23: [GetSCRRegisterEntry] Passed
14:42:23: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:23: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:23: Data_Status_After Erases          : 0
14:42:23: CPRM Security Support             : No Security
14:42:23: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:23: Spec. Version                     : Version 3.0X
14:42:23: Extended Security Support         : Extended_Security_Not_Supported
14:42:23: Command Support                   : COMMAND_SUPPORT
14:42:23: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F540>, <py_sfcl.CommandDataDefinition object at 0x060E3930>) , Command count = 4973 ] 
14:42:23: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611C1B0>) , Command count = 4974 ] 
14:42:23: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:23: [ SetBusWidth(0x4) , Command count = 4975 ] 
14:42:23: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:23: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4976 ] 
14:42:23: Protected Area Size 0x28000
14:42:23: Bus Width           2
14:42:23: Secure Mode         0
14:42:23: Speed  Class        4
14:42:23: Perf Move           0
14:42:23: Au Size             9
14:42:23: Erase Size          15
14:42:23: Erase Timeout       1
14:42:23: Erase offset        1
14:42:23: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:23: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:23: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4977 ] 
14:42:23: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:23: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:23: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:23: Host Frequency set to 100000 KHz
14:42:23: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:23: ####CSD Registe 2.0 Values####
14:42:23: CSD_STRUCTURE                                 :0x1
14:42:23: Reserv1                                       :0x0
14:42:23: Time Access 1 TAAC                            :0xe
14:42:23: Time Access 2 NSAC*100                        :0x0
14:42:23: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:23: Card Command Classess CCC                     :0x5b5
14:42:23: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:23: DSR(driver stage register)  DSR_IMP           :0x0
14:42:23: Reserv2                                       :0x0
14:42:23: Device Size C_SIZE                            :0xedc8
14:42:23: Reserv3                                       :0x0
14:42:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:23: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:23: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:23: Reserv4                                       :0x0
14:42:23: Write Speed Factor R2W_FACTOR                 :0x2
14:42:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:24: FILE_FORMAT_GRP                               :0x0
14:42:24: COPY flag                                     :0x1
14:42:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:24: File_Format                                   :0x0
14:42:24: CRC                                           :0x0
14:42:24: ####CSD Registe Values####  

14:42:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F150>, <py_sfcl.CommandDataDefinition object at 0x06129BA0>) , Command count = 4978 ] 
14:42:24: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC30>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 4979 ] 
14:42:24: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:24: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B1B to EndLba:0x3B70B9B with One's Pattern
14:42:24: [ WrLbaNoData(0x3B70B1B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4980 ] 
14:42:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B1B to EndLba:0x3B70B9B with One's Pattern 

14:42:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B9B to EndLba:0x3B70C1B with One's Pattern
14:42:24: [ WrLbaNoData(0x3B70B9B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4981 ] 
14:42:24: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B9B to EndLba:0x3B70C1B with One's Pattern 

14:42:24: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23265 to EndLba:0x25061 with Constant Pattern
14:42:24: [ RdLbaNoData(0x23265, 0x1DFC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 4982 ] 
14:42:24: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23265 to EndLba:0x25061 with Constant Pattern 

14:42:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3836
14:42:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:24: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129270>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129390>, <py_sfcl.PySEnhancedCmdData object at 0x06129CF0>, <None>) , Command count = 4983 ] 
14:42:24: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:24: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:26: Host Frequency set to 25000 KHz
14:42:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:26: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F480>, 0x0, True) , Command count = 4984 ] 
14:42:26: [GO18_globalSetVolt]### Host voltage value is set.
14:42:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129DE0>, 0x0, False) , Command count = 4985 ] 
14:42:26: [GO18_globalSetVolt]### Host voltage value is set.
14:42:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 4986 ] 
14:42:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 4987 ] 
14:42:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 4988 ] 
14:42:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x06129030>) , Command count = 4989 ] 
14:42:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129510>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 4990 ] 
14:42:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:26: [ SetCardRCA(0x1, 0xD555) , Command count = 4991 ] 
14:42:26: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:26: Host Frequency set to 25000 KHz
14:42:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:26: ####CSD Registe 2.0 Values####
14:42:26: CSD_STRUCTURE                                 :0x1
14:42:26: Reserv1                                       :0x0
14:42:26: Time Access 1 TAAC                            :0xe
14:42:26: Time Access 2 NSAC*100                        :0x0
14:42:26: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:26: Card Command Classess CCC                     :0x5b5
14:42:26: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:26: DSR(driver stage register)  DSR_IMP           :0x0
14:42:26: Reserv2                                       :0x0
14:42:26: Device Size C_SIZE                            :0xedc8
14:42:26: Reserv3                                       :0x0
14:42:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:26: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:26: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:26: Reserv4                                       :0x0
14:42:26: Write Speed Factor R2W_FACTOR                 :0x2
14:42:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:26: FILE_FORMAT_GRP                               :0x0
14:42:26: COPY flag                                     :0x1
14:42:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:26: File_Format                                   :0x0
14:42:26: CRC                                           :0x0
14:42:26: ####CSD Registe Values####  

14:42:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:26: [GetSCRRegisterEntry] Passed
14:42:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:26: Data_Status_After Erases          : 0
14:42:26: CPRM Security Support             : No Security
14:42:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:26: Spec. Version                     : Version 3.0X
14:42:26: Extended Security Support         : Extended_Security_Not_Supported
14:42:26: Command Support                   : COMMAND_SUPPORT
14:42:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C120>, <py_sfcl.CommandDataDefinition object at 0x0611C8A0>) , Command count = 4992 ] 
14:42:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39F0>, <py_sfcl.CommandDataDefinition object at 0x06129060>) , Command count = 4993 ] 
14:42:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:26: [ SetBusWidth(0x4) , Command count = 4994 ] 
14:42:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129810>, <0x200/0x200, Spc, pat:0x0>) , Command count = 4995 ] 
14:42:26: Protected Area Size 0x28000
14:42:26: Bus Width           2
14:42:26: Secure Mode         0
14:42:26: Speed  Class        4
14:42:26: Perf Move           0
14:42:26: Au Size             9
14:42:26: Erase Size          15
14:42:26: Erase Timeout       1
14:42:26: Erase offset        1
14:42:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 4996 ] 
14:42:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:26: Host Frequency set to 100000 KHz
14:42:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:26: ####CSD Registe 2.0 Values####
14:42:26: CSD_STRUCTURE                                 :0x1
14:42:27: Reserv1                                       :0x0
14:42:27: Time Access 1 TAAC                            :0xe
14:42:27: Time Access 2 NSAC*100                        :0x0
14:42:27: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:27: Card Command Classess CCC                     :0x5b5
14:42:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:27: DSR(driver stage register)  DSR_IMP           :0x0
14:42:27: Reserv2                                       :0x0
14:42:27: Device Size C_SIZE                            :0xedc8
14:42:27: Reserv3                                       :0x0
14:42:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:27: Reserv4                                       :0x0
14:42:27: Write Speed Factor R2W_FACTOR                 :0x2
14:42:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:27: FILE_FORMAT_GRP                               :0x0
14:42:27: COPY flag                                     :0x1
14:42:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:27: File_Format                                   :0x0
14:42:27: CRC                                           :0x0
14:42:27: ####CSD Registe Values####  

14:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129090>, <py_sfcl.CommandDataDefinition object at 0x061295A0>) , Command count = 4997 ] 
14:42:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x06129450>) , Command count = 4998 ] 
14:42:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7040F to EndLba:0x3B7048F with One's Pattern
14:42:27: [ WrLbaNoData(0x3B7040F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 4999 ] 
14:42:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7040F to EndLba:0x3B7048F with One's Pattern 

14:42:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7048F to EndLba:0x3B7050F with One's Pattern
14:42:27: [ WrLbaNoData(0x3B7048F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5000 ] 
14:42:27: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7048F to EndLba:0x3B7050F with One's Pattern 

14:42:27: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23267 to EndLba:0x25061 with Constant Pattern
14:42:27: [ RdLbaNoData(0x23267, 0x1DFA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5001 ] 
14:42:27: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23267 to EndLba:0x25061 with Constant Pattern 

14:42:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3835
14:42:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FCC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129900>, <py_sfcl.PySEnhancedCmdData object at 0x061299C0>, <None>) , Command count = 5002 ] 
14:42:27: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:29: Host Frequency set to 25000 KHz
14:42:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x061291B0>, 0x0, True) , Command count = 5003 ] 
14:42:29: [GO18_globalSetVolt]### Host voltage value is set.
14:42:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E2A0>, 0x0, False) , Command count = 5004 ] 
14:42:29: [GO18_globalSetVolt]### Host voltage value is set.
14:42:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5005 ] 
14:42:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5006 ] 
14:42:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5007 ] 
14:42:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 5008 ] 
14:42:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 5009 ] 
14:42:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:30: [ SetCardRCA(0x1, 0xD555) , Command count = 5010 ] 
14:42:30: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:30: Host Frequency set to 25000 KHz
14:42:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:30: ####CSD Registe 2.0 Values####
14:42:30: CSD_STRUCTURE                                 :0x1
14:42:30: Reserv1                                       :0x0
14:42:30: Time Access 1 TAAC                            :0xe
14:42:30: Time Access 2 NSAC*100                        :0x0
14:42:30: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:30: Card Command Classess CCC                     :0x5b5
14:42:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:30: DSR(driver stage register)  DSR_IMP           :0x0
14:42:30: Reserv2                                       :0x0
14:42:30: Device Size C_SIZE                            :0xedc8
14:42:30: Reserv3                                       :0x0
14:42:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:30: Reserv4                                       :0x0
14:42:30: Write Speed Factor R2W_FACTOR                 :0x2
14:42:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:30: FILE_FORMAT_GRP                               :0x0
14:42:30: COPY flag                                     :0x1
14:42:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:30: File_Format                                   :0x0
14:42:30: CRC                                           :0x0
14:42:30: ####CSD Registe Values####  

14:42:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:30: [GetSCRRegisterEntry] Passed
14:42:30: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:30: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:30: Data_Status_After Erases          : 0
14:42:30: CPRM Security Support             : No Security
14:42:30: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:30: Spec. Version                     : Version 3.0X
14:42:30: Extended Security Support         : Extended_Security_Not_Supported
14:42:30: Command Support                   : COMMAND_SUPPORT
14:42:30: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129720>, <py_sfcl.CommandDataDefinition object at 0x061453F0>) , Command count = 5011 ] 
14:42:30: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC00>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 5012 ] 
14:42:30: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:30: [ SetBusWidth(0x4) , Command count = 5013 ] 
14:42:30: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:30: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061292A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5014 ] 
14:42:30: Protected Area Size 0x28000
14:42:30: Bus Width           2
14:42:30: Secure Mode         0
14:42:30: Speed  Class        4
14:42:30: Perf Move           0
14:42:30: Au Size             9
14:42:30: Erase Size          15
14:42:30: Erase Timeout       1
14:42:30: Erase offset        1
14:42:30: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:30: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:30: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5015 ] 
14:42:30: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:30: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:30: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:30: Host Frequency set to 100000 KHz
14:42:30: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:30: ####CSD Registe 2.0 Values####
14:42:30: CSD_STRUCTURE                                 :0x1
14:42:30: Reserv1                                       :0x0
14:42:30: Time Access 1 TAAC                            :0xe
14:42:30: Time Access 2 NSAC*100                        :0x0
14:42:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:30: Card Command Classess CCC                     :0x5b5
14:42:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:30: DSR(driver stage register)  DSR_IMP           :0x0
14:42:30: Reserv2                                       :0x0
14:42:30: Device Size C_SIZE                            :0xedc8
14:42:30: Reserv3                                       :0x0
14:42:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:30: Reserv4                                       :0x0
14:42:30: Write Speed Factor R2W_FACTOR                 :0x2
14:42:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:30: FILE_FORMAT_GRP                               :0x0
14:42:30: COPY flag                                     :0x1
14:42:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:30: File_Format                                   :0x0
14:42:30: CRC                                           :0x0
14:42:30: ####CSD Registe Values####  

14:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7E0>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 5016 ] 
14:42:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 5017 ] 
14:42:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DD81 to EndLba:0x3B6DE01 with One's Pattern
14:42:30: [ WrLbaNoData(0x3B6DD81, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5018 ] 
14:42:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DD81 to EndLba:0x3B6DE01 with One's Pattern 

14:42:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE01 to EndLba:0x3B6DE81 with One's Pattern
14:42:30: [ WrLbaNoData(0x3B6DE01, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5019 ] 
14:42:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE01 to EndLba:0x3B6DE81 with One's Pattern 

14:42:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23267 to EndLba:0x2505F with Constant Pattern
14:42:30: [ RdLbaNoData(0x23267, 0x1DF8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5020 ] 
14:42:30: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23267 to EndLba:0x2505F with Constant Pattern 

14:42:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3834
14:42:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F690>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129630>, <py_sfcl.PySEnhancedCmdData object at 0x06129EA0>, <None>) , Command count = 5021 ] 
14:42:30: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:30: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:33: Host Frequency set to 25000 KHz
14:42:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C810>, 0x0, True) , Command count = 5022 ] 
14:42:33: [GO18_globalSetVolt]### Host voltage value is set.
14:42:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FED0>, 0x0, False) , Command count = 5023 ] 
14:42:33: [GO18_globalSetVolt]### Host voltage value is set.
14:42:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5024 ] 
14:42:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5025 ] 
14:42:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5026 ] 
14:42:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB10>, <py_sfcl.CommandDataDefinition object at 0x0613FC60>) , Command count = 5027 ] 
14:42:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C8D0>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 5028 ] 
14:42:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:33: [ SetCardRCA(0x1, 0xD555) , Command count = 5029 ] 
14:42:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:33: Host Frequency set to 25000 KHz
14:42:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:33: ####CSD Registe 2.0 Values####
14:42:33: CSD_STRUCTURE                                 :0x1
14:42:33: Reserv1                                       :0x0
14:42:33: Time Access 1 TAAC                            :0xe
14:42:33: Time Access 2 NSAC*100                        :0x0
14:42:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:33: Card Command Classess CCC                     :0x5b5
14:42:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:33: DSR(driver stage register)  DSR_IMP           :0x0
14:42:33: Reserv2                                       :0x0
14:42:33: Device Size C_SIZE                            :0xedc8
14:42:33: Reserv3                                       :0x0
14:42:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:33: Reserv4                                       :0x0
14:42:33: Write Speed Factor R2W_FACTOR                 :0x2
14:42:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:33: FILE_FORMAT_GRP                               :0x0
14:42:33: COPY flag                                     :0x1
14:42:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:33: File_Format                                   :0x0
14:42:33: CRC                                           :0x0
14:42:33: ####CSD Registe Values####  

14:42:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:33: [GetSCRRegisterEntry] Passed
14:42:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:33: Data_Status_After Erases          : 0
14:42:33: CPRM Security Support             : No Security
14:42:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:33: Spec. Version                     : Version 3.0X
14:42:33: Extended Security Support         : Extended_Security_Not_Supported
14:42:33: Command Support                   : COMMAND_SUPPORT
14:42:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CC0>, <py_sfcl.CommandDataDefinition object at 0x061293C0>) , Command count = 5030 ] 
14:42:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE40>, <py_sfcl.CommandDataDefinition object at 0x06129180>) , Command count = 5031 ] 
14:42:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:33: [ SetBusWidth(0x4) , Command count = 5032 ] 
14:42:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129150>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5033 ] 
14:42:33: Protected Area Size 0x28000
14:42:33: Bus Width           2
14:42:33: Secure Mode         0
14:42:33: Speed  Class        4
14:42:33: Perf Move           0
14:42:33: Au Size             9
14:42:33: Erase Size          15
14:42:33: Erase Timeout       1
14:42:33: Erase offset        1
14:42:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5034 ] 
14:42:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:33: Host Frequency set to 100000 KHz
14:42:33: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:33: ####CSD Registe 2.0 Values####
14:42:33: CSD_STRUCTURE                                 :0x1
14:42:33: Reserv1                                       :0x0
14:42:33: Time Access 1 TAAC                            :0xe
14:42:33: Time Access 2 NSAC*100                        :0x0
14:42:33: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:33: Card Command Classess CCC                     :0x5b5
14:42:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:33: DSR(driver stage register)  DSR_IMP           :0x0
14:42:33: Reserv2                                       :0x0
14:42:33: Device Size C_SIZE                            :0xedc8
14:42:33: Reserv3                                       :0x0
14:42:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:33: Reserv4                                       :0x0
14:42:33: Write Speed Factor R2W_FACTOR                 :0x2
14:42:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:34: FILE_FORMAT_GRP                               :0x0
14:42:34: COPY flag                                     :0x1
14:42:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:34: File_Format                                   :0x0
14:42:34: CRC                                           :0x0
14:42:34: ####CSD Registe Values####  

14:42:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F90>, <py_sfcl.CommandDataDefinition object at 0x06129750>) , Command count = 5035 ] 
14:42:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 5036 ] 
14:42:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70FA2 to EndLba:0x3B71022 with One's Pattern
14:42:34: [ WrLbaNoData(0x3B70FA2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5037 ] 
14:42:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70FA2 to EndLba:0x3B71022 with One's Pattern 

14:42:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71022 to EndLba:0x3B710A2 with One's Pattern
14:42:34: [ WrLbaNoData(0x3B71022, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5038 ] 
14:42:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71022 to EndLba:0x3B710A2 with One's Pattern 

14:42:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23269 to EndLba:0x2505F with Constant Pattern
14:42:34: [ RdLbaNoData(0x23269, 0x1DF6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5039 ] 
14:42:34: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23269 to EndLba:0x2505F with Constant Pattern 

14:42:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3833
14:42:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:34: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132C30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612ECC0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E0C0>, <None>) , Command count = 5040 ] 
14:42:34: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:34: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:36: Host Frequency set to 25000 KHz
14:42:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:36: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:36: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C540>, 0x0, True) , Command count = 5041 ] 
14:42:36: [GO18_globalSetVolt]### Host voltage value is set.
14:42:36: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:36: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E7B0>, 0x0, False) , Command count = 5042 ] 
14:42:36: [GO18_globalSetVolt]### Host voltage value is set.
14:42:36: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5043 ] 
14:42:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5044 ] 
14:42:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:36: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5045 ] 
14:42:36: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06129B10>) , Command count = 5046 ] 
14:42:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x06129C60>) , Command count = 5047 ] 
14:42:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:36: [ SetCardRCA(0x1, 0xD555) , Command count = 5048 ] 
14:42:36: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:36: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:36: Host Frequency set to 25000 KHz
14:42:36: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:36: ####CSD Registe 2.0 Values####
14:42:36: CSD_STRUCTURE                                 :0x1
14:42:36: Reserv1                                       :0x0
14:42:36: Time Access 1 TAAC                            :0xe
14:42:36: Time Access 2 NSAC*100                        :0x0
14:42:36: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:36: Card Command Classess CCC                     :0x5b5
14:42:36: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:36: DSR(driver stage register)  DSR_IMP           :0x0
14:42:36: Reserv2                                       :0x0
14:42:36: Device Size C_SIZE                            :0xedc8
14:42:36: Reserv3                                       :0x0
14:42:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:36: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:36: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:36: Reserv4                                       :0x0
14:42:36: Write Speed Factor R2W_FACTOR                 :0x2
14:42:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:36: FILE_FORMAT_GRP                               :0x0
14:42:36: COPY flag                                     :0x1
14:42:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:36: File_Format                                   :0x0
14:42:36: CRC                                           :0x0
14:42:36: ####CSD Registe Values####  

14:42:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:36: [GetSCRRegisterEntry] Passed
14:42:36: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:36: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:36: Data_Status_After Erases          : 0
14:42:36: CPRM Security Support             : No Security
14:42:36: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:36: Spec. Version                     : Version 3.0X
14:42:36: Extended Security Support         : Extended_Security_Not_Supported
14:42:36: Command Support                   : COMMAND_SUPPORT
14:42:36: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0F0>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 5049 ] 
14:42:36: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CD20>, <py_sfcl.CommandDataDefinition object at 0x0612E900>) , Command count = 5050 ] 
14:42:36: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:36: [ SetBusWidth(0x4) , Command count = 5051 ] 
14:42:36: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:36: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EB70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5052 ] 
14:42:36: Protected Area Size 0x28000
14:42:36: Bus Width           2
14:42:36: Secure Mode         0
14:42:36: Speed  Class        4
14:42:36: Perf Move           0
14:42:36: Au Size             9
14:42:36: Erase Size          15
14:42:36: Erase Timeout       1
14:42:36: Erase offset        1
14:42:36: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:36: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:36: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5053 ] 
14:42:36: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:36: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:36: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:36: Host Frequency set to 100000 KHz
14:42:36: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:36: ####CSD Registe 2.0 Values####
14:42:36: CSD_STRUCTURE                                 :0x1
14:42:37: Reserv1                                       :0x0
14:42:37: Time Access 1 TAAC                            :0xe
14:42:37: Time Access 2 NSAC*100                        :0x0
14:42:37: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:37: Card Command Classess CCC                     :0x5b5
14:42:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:37: DSR(driver stage register)  DSR_IMP           :0x0
14:42:37: Reserv2                                       :0x0
14:42:37: Device Size C_SIZE                            :0xedc8
14:42:37: Reserv3                                       :0x0
14:42:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:37: Reserv4                                       :0x0
14:42:37: Write Speed Factor R2W_FACTOR                 :0x2
14:42:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:37: FILE_FORMAT_GRP                               :0x0
14:42:37: COPY flag                                     :0x1
14:42:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:37: File_Format                                   :0x0
14:42:37: CRC                                           :0x0
14:42:37: ####CSD Registe Values####  

14:42:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132690>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 5054 ] 
14:42:37: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BA0>, <py_sfcl.CommandDataDefinition object at 0x0612E4E0>) , Command count = 5055 ] 
14:42:37: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:37: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70572 to EndLba:0x3B705F2 with One's Pattern
14:42:37: [ WrLbaNoData(0x3B70572, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5056 ] 
14:42:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70572 to EndLba:0x3B705F2 with One's Pattern 

14:42:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B705F2 to EndLba:0x3B70672 with One's Pattern
14:42:37: [ WrLbaNoData(0x3B705F2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5057 ] 
14:42:37: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B705F2 to EndLba:0x3B70672 with One's Pattern 

14:42:37: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23269 to EndLba:0x2505D with Constant Pattern
14:42:37: [ RdLbaNoData(0x23269, 0x1DF4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5058 ] 
14:42:37: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23269 to EndLba:0x2505D with Constant Pattern 

14:42:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3832
14:42:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:37: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132D80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132630>, <py_sfcl.PySEnhancedCmdData object at 0x06132FC0>, <None>) , Command count = 5059 ] 
14:42:37: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:37: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:39: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:39: Host Frequency set to 25000 KHz
14:42:39: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:39: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:39: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F7B0>, 0x0, True) , Command count = 5060 ] 
14:42:39: [GO18_globalSetVolt]### Host voltage value is set.
14:42:39: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:39: [ SetVolt(<py_sfcl.SDVoltage object at 0x061322D0>, 0x0, False) , Command count = 5061 ] 
14:42:39: [GO18_globalSetVolt]### Host voltage value is set.
14:42:39: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5062 ] 
14:42:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5063 ] 
14:42:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:40: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5064 ] 
14:42:40: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 5065 ] 
14:42:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F330>, <py_sfcl.CommandDataDefinition object at 0x06129ED0>) , Command count = 5066 ] 
14:42:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:40: [ SetCardRCA(0x1, 0xD555) , Command count = 5067 ] 
14:42:40: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:40: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:40: Host Frequency set to 25000 KHz
14:42:40: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:40: ####CSD Registe 2.0 Values####
14:42:40: CSD_STRUCTURE                                 :0x1
14:42:40: Reserv1                                       :0x0
14:42:40: Time Access 1 TAAC                            :0xe
14:42:40: Time Access 2 NSAC*100                        :0x0
14:42:40: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:40: Card Command Classess CCC                     :0x5b5
14:42:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:40: DSR(driver stage register)  DSR_IMP           :0x0
14:42:40: Reserv2                                       :0x0
14:42:40: Device Size C_SIZE                            :0xedc8
14:42:40: Reserv3                                       :0x0
14:42:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:40: Reserv4                                       :0x0
14:42:40: Write Speed Factor R2W_FACTOR                 :0x2
14:42:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:40: FILE_FORMAT_GRP                               :0x0
14:42:40: COPY flag                                     :0x1
14:42:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:40: File_Format                                   :0x0
14:42:40: CRC                                           :0x0
14:42:40: ####CSD Registe Values####  

14:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:40: [GetSCRRegisterEntry] Passed
14:42:40: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:40: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:40: Data_Status_After Erases          : 0
14:42:40: CPRM Security Support             : No Security
14:42:40: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:40: Spec. Version                     : Version 3.0X
14:42:40: Extended Security Support         : Extended_Security_Not_Supported
14:42:40: Command Support                   : COMMAND_SUPPORT
14:42:40: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132150>, <py_sfcl.CommandDataDefinition object at 0x06145030>) , Command count = 5068 ] 
14:42:40: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8D0>, <py_sfcl.CommandDataDefinition object at 0x0612EA20>) , Command count = 5069 ] 
14:42:40: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:40: [ SetBusWidth(0x4) , Command count = 5070 ] 
14:42:40: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:40: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132F60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5071 ] 
14:42:40: Protected Area Size 0x28000
14:42:40: Bus Width           2
14:42:40: Secure Mode         0
14:42:40: Speed  Class        4
14:42:40: Perf Move           0
14:42:40: Au Size             9
14:42:40: Erase Size          15
14:42:40: Erase Timeout       1
14:42:40: Erase offset        1
14:42:40: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:40: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:40: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5072 ] 
14:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:40: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:40: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:40: Host Frequency set to 100000 KHz
14:42:40: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:40: ####CSD Registe 2.0 Values####
14:42:40: CSD_STRUCTURE                                 :0x1
14:42:40: Reserv1                                       :0x0
14:42:40: Time Access 1 TAAC                            :0xe
14:42:40: Time Access 2 NSAC*100                        :0x0
14:42:40: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:40: Card Command Classess CCC                     :0x5b5
14:42:40: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:40: DSR(driver stage register)  DSR_IMP           :0x0
14:42:40: Reserv2                                       :0x0
14:42:40: Device Size C_SIZE                            :0xedc8
14:42:40: Reserv3                                       :0x0
14:42:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:40: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:40: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:40: Reserv4                                       :0x0
14:42:40: Write Speed Factor R2W_FACTOR                 :0x2
14:42:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:40: FILE_FORMAT_GRP                               :0x0
14:42:40: COPY flag                                     :0x1
14:42:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:40: File_Format                                   :0x0
14:42:40: CRC                                           :0x0
14:42:40: ####CSD Registe Values####  

14:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132390>, <py_sfcl.CommandDataDefinition object at 0x0612E990>) , Command count = 5073 ] 
14:42:40: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322A0>, <py_sfcl.CommandDataDefinition object at 0x0612E420>) , Command count = 5074 ] 
14:42:40: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:40: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71A41 to EndLba:0x3B71AC1 with One's Pattern
14:42:40: [ WrLbaNoData(0x3B71A41, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5075 ] 
14:42:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71A41 to EndLba:0x3B71AC1 with One's Pattern 

14:42:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71AC1 to EndLba:0x3B71B41 with One's Pattern
14:42:40: [ WrLbaNoData(0x3B71AC1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5076 ] 
14:42:40: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71AC1 to EndLba:0x3B71B41 with One's Pattern 

14:42:40: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2326B to EndLba:0x2505D with Constant Pattern
14:42:40: [ RdLbaNoData(0x2326B, 0x1DF2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5077 ] 
14:42:40: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2326B to EndLba:0x2505D with Constant Pattern 

14:42:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3831
14:42:40: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:41: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FEA0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061329C0>, <py_sfcl.PySEnhancedCmdData object at 0x061326C0>, <None>) , Command count = 5078 ] 
14:42:41: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:41: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:43: Host Frequency set to 25000 KHz
14:42:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:43: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EE40>, 0x0, True) , Command count = 5079 ] 
14:42:43: [GO18_globalSetVolt]### Host voltage value is set.
14:42:43: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:43: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EC30>, 0x0, False) , Command count = 5080 ] 
14:42:43: [GO18_globalSetVolt]### Host voltage value is set.
14:42:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5081 ] 
14:42:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5082 ] 
14:42:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:43: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5083 ] 
14:42:43: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x06132D50>) , Command count = 5084 ] 
14:42:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E360>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 5085 ] 
14:42:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:43: [ SetCardRCA(0x1, 0xD555) , Command count = 5086 ] 
14:42:43: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:43: Host Frequency set to 25000 KHz
14:42:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:43: ####CSD Registe 2.0 Values####
14:42:43: CSD_STRUCTURE                                 :0x1
14:42:43: Reserv1                                       :0x0
14:42:43: Time Access 1 TAAC                            :0xe
14:42:43: Time Access 2 NSAC*100                        :0x0
14:42:43: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:43: Card Command Classess CCC                     :0x5b5
14:42:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:43: DSR(driver stage register)  DSR_IMP           :0x0
14:42:43: Reserv2                                       :0x0
14:42:43: Device Size C_SIZE                            :0xedc8
14:42:43: Reserv3                                       :0x0
14:42:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:43: Reserv4                                       :0x0
14:42:43: Write Speed Factor R2W_FACTOR                 :0x2
14:42:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:43: FILE_FORMAT_GRP                               :0x0
14:42:43: COPY flag                                     :0x1
14:42:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:43: File_Format                                   :0x0
14:42:43: CRC                                           :0x0
14:42:43: ####CSD Registe Values####  

14:42:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:43: [GetSCRRegisterEntry] Passed
14:42:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:43: Data_Status_After Erases          : 0
14:42:43: CPRM Security Support             : No Security
14:42:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:43: Spec. Version                     : Version 3.0X
14:42:43: Extended Security Support         : Extended_Security_Not_Supported
14:42:43: Command Support                   : COMMAND_SUPPORT
14:42:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD50>, <py_sfcl.CommandDataDefinition object at 0x06132660>) , Command count = 5087 ] 
14:42:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x06129690>) , Command count = 5088 ] 
14:42:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:43: [ SetBusWidth(0x4) , Command count = 5089 ] 
14:42:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129BD0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5090 ] 
14:42:43: Protected Area Size 0x28000
14:42:43: Bus Width           2
14:42:43: Secure Mode         0
14:42:43: Speed  Class        4
14:42:43: Perf Move           0
14:42:43: Au Size             9
14:42:43: Erase Size          15
14:42:43: Erase Timeout       1
14:42:43: Erase offset        1
14:42:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5091 ] 
14:42:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:43: Host Frequency set to 100000 KHz
14:42:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:43: ####CSD Registe 2.0 Values####
14:42:43: CSD_STRUCTURE                                 :0x1
14:42:43: Reserv1                                       :0x0
14:42:43: Time Access 1 TAAC                            :0xe
14:42:43: Time Access 2 NSAC*100                        :0x0
14:42:43: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:43: Card Command Classess CCC                     :0x5b5
14:42:43: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:43: DSR(driver stage register)  DSR_IMP           :0x0
14:42:43: Reserv2                                       :0x0
14:42:43: Device Size C_SIZE                            :0xedc8
14:42:43: Reserv3                                       :0x0
14:42:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:43: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:43: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:43: Reserv4                                       :0x0
14:42:43: Write Speed Factor R2W_FACTOR                 :0x2
14:42:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:44: FILE_FORMAT_GRP                               :0x0
14:42:44: COPY flag                                     :0x1
14:42:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:44: File_Format                                   :0x0
14:42:44: CRC                                           :0x0
14:42:44: ####CSD Registe Values####  

14:42:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E9C0>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 5092 ] 
14:42:44: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x06132F60>) , Command count = 5093 ] 
14:42:44: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:44: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E1D4 to EndLba:0x3B6E254 with One's Pattern
14:42:44: [ WrLbaNoData(0x3B6E1D4, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5094 ] 
14:42:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E1D4 to EndLba:0x3B6E254 with One's Pattern 

14:42:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E254 to EndLba:0x3B6E2D4 with One's Pattern
14:42:44: [ WrLbaNoData(0x3B6E254, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5095 ] 
14:42:44: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E254 to EndLba:0x3B6E2D4 with One's Pattern 

14:42:44: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2326B to EndLba:0x2505B with Constant Pattern
14:42:44: [ RdLbaNoData(0x2326B, 0x1DF0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5096 ] 
14:42:44: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2326B to EndLba:0x2505B with Constant Pattern 

14:42:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3830
14:42:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:44: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F900>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061384B0>, <py_sfcl.PySEnhancedCmdData object at 0x06132F30>, <None>) , Command count = 5097 ] 
14:42:44: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:44: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:46: Host Frequency set to 25000 KHz
14:42:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:46: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E8A0>, 0x0, True) , Command count = 5098 ] 
14:42:46: [GO18_globalSetVolt]### Host voltage value is set.
14:42:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FE70>, 0x0, False) , Command count = 5099 ] 
14:42:46: [GO18_globalSetVolt]### Host voltage value is set.
14:42:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5100 ] 
14:42:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5101 ] 
14:42:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:46: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5102 ] 
14:42:46: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x06138120>) , Command count = 5103 ] 
14:42:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132480>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 5104 ] 
14:42:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:47: [ SetCardRCA(0x1, 0xD555) , Command count = 5105 ] 
14:42:47: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:47: Host Frequency set to 25000 KHz
14:42:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:47: ####CSD Registe 2.0 Values####
14:42:47: CSD_STRUCTURE                                 :0x1
14:42:47: Reserv1                                       :0x0
14:42:47: Time Access 1 TAAC                            :0xe
14:42:47: Time Access 2 NSAC*100                        :0x0
14:42:47: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:47: Card Command Classess CCC                     :0x5b5
14:42:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:47: DSR(driver stage register)  DSR_IMP           :0x0
14:42:47: Reserv2                                       :0x0
14:42:47: Device Size C_SIZE                            :0xedc8
14:42:47: Reserv3                                       :0x0
14:42:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:47: Reserv4                                       :0x0
14:42:47: Write Speed Factor R2W_FACTOR                 :0x2
14:42:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:47: FILE_FORMAT_GRP                               :0x0
14:42:47: COPY flag                                     :0x1
14:42:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:47: File_Format                                   :0x0
14:42:47: CRC                                           :0x0
14:42:47: ####CSD Registe Values####  

14:42:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:47: [GetSCRRegisterEntry] Passed
14:42:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:47: Data_Status_After Erases          : 0
14:42:47: CPRM Security Support             : No Security
14:42:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:47: Spec. Version                     : Version 3.0X
14:42:47: Extended Security Support         : Extended_Security_Not_Supported
14:42:47: Command Support                   : COMMAND_SUPPORT
14:42:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB40>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 5106 ] 
14:42:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x061324B0>) , Command count = 5107 ] 
14:42:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:47: [ SetBusWidth(0x4) , Command count = 5108 ] 
14:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061389C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5109 ] 
14:42:47: Protected Area Size 0x28000
14:42:47: Bus Width           2
14:42:47: Secure Mode         0
14:42:47: Speed  Class        4
14:42:47: Perf Move           0
14:42:47: Au Size             9
14:42:47: Erase Size          15
14:42:47: Erase Timeout       1
14:42:47: Erase offset        1
14:42:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5110 ] 
14:42:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:47: Host Frequency set to 100000 KHz
14:42:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:47: ####CSD Registe 2.0 Values####
14:42:47: CSD_STRUCTURE                                 :0x1
14:42:47: Reserv1                                       :0x0
14:42:47: Time Access 1 TAAC                            :0xe
14:42:47: Time Access 2 NSAC*100                        :0x0
14:42:47: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:47: Card Command Classess CCC                     :0x5b5
14:42:47: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:47: DSR(driver stage register)  DSR_IMP           :0x0
14:42:47: Reserv2                                       :0x0
14:42:47: Device Size C_SIZE                            :0xedc8
14:42:47: Reserv3                                       :0x0
14:42:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:47: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:47: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:47: Reserv4                                       :0x0
14:42:47: Write Speed Factor R2W_FACTOR                 :0x2
14:42:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:47: FILE_FORMAT_GRP                               :0x0
14:42:47: COPY flag                                     :0x1
14:42:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:47: File_Format                                   :0x0
14:42:47: CRC                                           :0x0
14:42:47: ####CSD Registe Values####  

14:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138F30>, <py_sfcl.CommandDataDefinition object at 0x0611C450>) , Command count = 5111 ] 
14:42:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132CF0>, <py_sfcl.CommandDataDefinition object at 0x06132360>) , Command count = 5112 ] 
14:42:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70460 to EndLba:0x3B704E0 with One's Pattern
14:42:47: [ WrLbaNoData(0x3B70460, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5113 ] 
14:42:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70460 to EndLba:0x3B704E0 with One's Pattern 

14:42:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B704E0 to EndLba:0x3B70560 with One's Pattern
14:42:47: [ WrLbaNoData(0x3B704E0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5114 ] 
14:42:47: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B704E0 to EndLba:0x3B70560 with One's Pattern 

14:42:47: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2326D to EndLba:0x2505B with Constant Pattern
14:42:47: [ RdLbaNoData(0x2326D, 0x1DEE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5115 ] 
14:42:47: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2326D to EndLba:0x2505B with Constant Pattern 

14:42:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3829
14:42:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138CF0>, <py_sfcl.PySEnhancedCmdData object at 0x06138840>, <None>) , Command count = 5116 ] 
14:42:47: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:48: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:50: Host Frequency set to 25000 KHz
14:42:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:50: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:50: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EEA0>, 0x0, True) , Command count = 5117 ] 
14:42:50: [GO18_globalSetVolt]### Host voltage value is set.
14:42:50: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:50: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E810>, 0x0, False) , Command count = 5118 ] 
14:42:50: [GO18_globalSetVolt]### Host voltage value is set.
14:42:50: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5119 ] 
14:42:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5120 ] 
14:42:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:50: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5121 ] 
14:42:50: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F30>, <py_sfcl.CommandDataDefinition object at 0x06138C90>) , Command count = 5122 ] 
14:42:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E70>, <py_sfcl.CommandDataDefinition object at 0x061383F0>) , Command count = 5123 ] 
14:42:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:50: [ SetCardRCA(0x1, 0xD555) , Command count = 5124 ] 
14:42:50: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:50: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:50: Host Frequency set to 25000 KHz
14:42:50: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:50: ####CSD Registe 2.0 Values####
14:42:50: CSD_STRUCTURE                                 :0x1
14:42:50: Reserv1                                       :0x0
14:42:50: Time Access 1 TAAC                            :0xe
14:42:50: Time Access 2 NSAC*100                        :0x0
14:42:50: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:50: Card Command Classess CCC                     :0x5b5
14:42:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:50: DSR(driver stage register)  DSR_IMP           :0x0
14:42:50: Reserv2                                       :0x0
14:42:50: Device Size C_SIZE                            :0xedc8
14:42:50: Reserv3                                       :0x0
14:42:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:50: Reserv4                                       :0x0
14:42:50: Write Speed Factor R2W_FACTOR                 :0x2
14:42:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:50: FILE_FORMAT_GRP                               :0x0
14:42:50: COPY flag                                     :0x1
14:42:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:50: File_Format                                   :0x0
14:42:50: CRC                                           :0x0
14:42:50: ####CSD Registe Values####  

14:42:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:50: [GetSCRRegisterEntry] Passed
14:42:50: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:50: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:50: Data_Status_After Erases          : 0
14:42:50: CPRM Security Support             : No Security
14:42:50: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:50: Spec. Version                     : Version 3.0X
14:42:50: Extended Security Support         : Extended_Security_Not_Supported
14:42:50: Command Support                   : COMMAND_SUPPORT
14:42:50: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06138030>) , Command count = 5125 ] 
14:42:50: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x06132F00>) , Command count = 5126 ] 
14:42:50: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:50: [ SetBusWidth(0x4) , Command count = 5127 ] 
14:42:50: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:50: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138AE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5128 ] 
14:42:50: Protected Area Size 0x28000
14:42:50: Bus Width           2
14:42:50: Secure Mode         0
14:42:50: Speed  Class        4
14:42:50: Perf Move           0
14:42:50: Au Size             9
14:42:50: Erase Size          15
14:42:50: Erase Timeout       1
14:42:50: Erase offset        1
14:42:50: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:50: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:50: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5129 ] 
14:42:50: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:50: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:50: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:50: Host Frequency set to 100000 KHz
14:42:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:50: ####CSD Registe 2.0 Values####
14:42:50: CSD_STRUCTURE                                 :0x1
14:42:50: Reserv1                                       :0x0
14:42:50: Time Access 1 TAAC                            :0xe
14:42:50: Time Access 2 NSAC*100                        :0x0
14:42:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:50: Card Command Classess CCC                     :0x5b5
14:42:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:50: DSR(driver stage register)  DSR_IMP           :0x0
14:42:50: Reserv2                                       :0x0
14:42:50: Device Size C_SIZE                            :0xedc8
14:42:50: Reserv3                                       :0x0
14:42:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:51: Reserv4                                       :0x0
14:42:51: Write Speed Factor R2W_FACTOR                 :0x2
14:42:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:51: FILE_FORMAT_GRP                               :0x0
14:42:51: COPY flag                                     :0x1
14:42:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:51: File_Format                                   :0x0
14:42:51: CRC                                           :0x0
14:42:51: ####CSD Registe Values####  

14:42:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138960>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 5130 ] 
14:42:51: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061325A0>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 5131 ] 
14:42:51: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:51: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E19 to EndLba:0x3B70E99 with One's Pattern
14:42:51: [ WrLbaNoData(0x3B70E19, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5132 ] 
14:42:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E19 to EndLba:0x3B70E99 with One's Pattern 

14:42:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E99 to EndLba:0x3B70F19 with One's Pattern
14:42:51: [ WrLbaNoData(0x3B70E99, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5133 ] 
14:42:51: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E99 to EndLba:0x3B70F19 with One's Pattern 

14:42:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2326D to EndLba:0x25059 with Constant Pattern
14:42:51: [ RdLbaNoData(0x2326D, 0x1DEC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5134 ] 
14:42:51: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2326D to EndLba:0x25059 with Constant Pattern 

14:42:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3828
14:42:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132870>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132EA0>, <py_sfcl.PySEnhancedCmdData object at 0x061383C0>, <None>) , Command count = 5135 ] 
14:42:51: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:53: Host Frequency set to 25000 KHz
14:42:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132E10>, 0x0, True) , Command count = 5136 ] 
14:42:53: [GO18_globalSetVolt]### Host voltage value is set.
14:42:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132DE0>, 0x0, False) , Command count = 5137 ] 
14:42:53: [GO18_globalSetVolt]### Host voltage value is set.
14:42:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5138 ] 
14:42:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5139 ] 
14:42:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5140 ] 
14:42:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 5141 ] 
14:42:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x06138660>) , Command count = 5142 ] 
14:42:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:53: [ SetCardRCA(0x1, 0xD555) , Command count = 5143 ] 
14:42:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:53: Host Frequency set to 25000 KHz
14:42:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:53: ####CSD Registe 2.0 Values####
14:42:53: CSD_STRUCTURE                                 :0x1
14:42:53: Reserv1                                       :0x0
14:42:53: Time Access 1 TAAC                            :0xe
14:42:53: Time Access 2 NSAC*100                        :0x0
14:42:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:53: Card Command Classess CCC                     :0x5b5
14:42:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:53: DSR(driver stage register)  DSR_IMP           :0x0
14:42:53: Reserv2                                       :0x0
14:42:53: Device Size C_SIZE                            :0xedc8
14:42:53: Reserv3                                       :0x0
14:42:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:53: Reserv4                                       :0x0
14:42:53: Write Speed Factor R2W_FACTOR                 :0x2
14:42:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:53: FILE_FORMAT_GRP                               :0x0
14:42:53: COPY flag                                     :0x1
14:42:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:53: File_Format                                   :0x0
14:42:53: CRC                                           :0x0
14:42:53: ####CSD Registe Values####  

14:42:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:53: [GetSCRRegisterEntry] Passed
14:42:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:53: Data_Status_After Erases          : 0
14:42:53: CPRM Security Support             : No Security
14:42:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:53: Spec. Version                     : Version 3.0X
14:42:53: Extended Security Support         : Extended_Security_Not_Supported
14:42:53: Command Support                   : COMMAND_SUPPORT
14:42:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 5144 ] 
14:42:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 5145 ] 
14:42:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:53: [ SetBusWidth(0x4) , Command count = 5146 ] 
14:42:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138360>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5147 ] 
14:42:53: Protected Area Size 0x28000
14:42:53: Bus Width           2
14:42:53: Secure Mode         0
14:42:53: Speed  Class        4
14:42:53: Perf Move           0
14:42:53: Au Size             9
14:42:53: Erase Size          15
14:42:53: Erase Timeout       1
14:42:53: Erase offset        1
14:42:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:54: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5148 ] 
14:42:54: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:54: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:54: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:54: Host Frequency set to 100000 KHz
14:42:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:54: ####CSD Registe 2.0 Values####
14:42:54: CSD_STRUCTURE                                 :0x1
14:42:54: Reserv1                                       :0x0
14:42:54: Time Access 1 TAAC                            :0xe
14:42:54: Time Access 2 NSAC*100                        :0x0
14:42:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:54: Card Command Classess CCC                     :0x5b5
14:42:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:54: DSR(driver stage register)  DSR_IMP           :0x0
14:42:54: Reserv2                                       :0x0
14:42:54: Device Size C_SIZE                            :0xedc8
14:42:54: Reserv3                                       :0x0
14:42:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:54: Reserv4                                       :0x0
14:42:54: Write Speed Factor R2W_FACTOR                 :0x2
14:42:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:54: FILE_FORMAT_GRP                               :0x0
14:42:54: COPY flag                                     :0x1
14:42:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:54: File_Format                                   :0x0
14:42:54: CRC                                           :0x0
14:42:54: ####CSD Registe Values####  

14:42:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FDE0>, <py_sfcl.CommandDataDefinition object at 0x06138D80>) , Command count = 5149 ] 
14:42:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 5150 ] 
14:42:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71C30 to EndLba:0x3B71CB0 with One's Pattern
14:42:54: [ WrLbaNoData(0x3B71C30, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5151 ] 
14:42:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71C30 to EndLba:0x3B71CB0 with One's Pattern 

14:42:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71CB0 to EndLba:0x3B71D30 with One's Pattern
14:42:54: [ WrLbaNoData(0x3B71CB0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5152 ] 
14:42:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71CB0 to EndLba:0x3B71D30 with One's Pattern 

14:42:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2326F to EndLba:0x25059 with Constant Pattern
14:42:54: [ RdLbaNoData(0x2326F, 0x1DEA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5153 ] 
14:42:54: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2326F to EndLba:0x25059 with Constant Pattern 

14:42:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3827
14:42:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:54: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052AF240>, <py_sfcl.PySEnhancedCmdData object at 0x061386C0>, <None>) , Command count = 5154 ] 
14:42:54: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:54: [GO4_globalInitCard]### Switch to Specify Card Type
14:42:56: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:56: Host Frequency set to 25000 KHz
14:42:56: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:56: [GO18_globalSetVolt]### Set Host Voltage value.
14:42:56: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:42:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x061329F0>, 0x0, True) , Command count = 5155 ] 
14:42:56: [GO18_globalSetVolt]### Host voltage value is set.
14:42:56: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:42:56: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F270>, 0x0, False) , Command count = 5156 ] 
14:42:56: [GO18_globalSetVolt]### Host voltage value is set.
14:42:56: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5157 ] 
14:42:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:42:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5158 ] 
14:42:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:42:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:42:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:42:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:42:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:42:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5159 ] 
14:42:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:42:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:42:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x06138330>) , Command count = 5160 ] 
14:42:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:42:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061382A0>, <py_sfcl.CommandDataDefinition object at 0x06138F60>) , Command count = 5161 ] 
14:42:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:42:57: [ SetCardRCA(0x1, 0xD555) , Command count = 5162 ] 
14:42:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:42:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:42:57: Host Frequency set to 25000 KHz
14:42:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:42:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:57: ####CSD Registe 2.0 Values####
14:42:57: CSD_STRUCTURE                                 :0x1
14:42:57: Reserv1                                       :0x0
14:42:57: Time Access 1 TAAC                            :0xe
14:42:57: Time Access 2 NSAC*100                        :0x0
14:42:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:42:57: Card Command Classess CCC                     :0x5b5
14:42:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:57: DSR(driver stage register)  DSR_IMP           :0x0
14:42:57: Reserv2                                       :0x0
14:42:57: Device Size C_SIZE                            :0xedc8
14:42:57: Reserv3                                       :0x0
14:42:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:57: Reserv4                                       :0x0
14:42:57: Write Speed Factor R2W_FACTOR                 :0x2
14:42:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:57: FILE_FORMAT_GRP                               :0x0
14:42:57: COPY flag                                     :0x1
14:42:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:57: File_Format                                   :0x0
14:42:57: CRC                                           :0x0
14:42:57: ####CSD Registe Values####  

14:42:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:42:57: [GetSCRRegisterEntry] Passed
14:42:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:42:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:42:57: Data_Status_After Erases          : 0
14:42:57: CPRM Security Support             : No Security
14:42:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:42:57: Spec. Version                     : Version 3.0X
14:42:57: Extended Security Support         : Extended_Security_Not_Supported
14:42:57: Command Support                   : COMMAND_SUPPORT
14:42:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:42:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF90>, <py_sfcl.CommandDataDefinition object at 0x06138B40>) , Command count = 5163 ] 
14:42:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:42:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x0613F660>) , Command count = 5164 ] 
14:42:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:42:57: [ SetBusWidth(0x4) , Command count = 5165 ] 
14:42:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:42:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F510>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5166 ] 
14:42:57: Protected Area Size 0x28000
14:42:57: Bus Width           2
14:42:57: Secure Mode         0
14:42:57: Speed  Class        4
14:42:57: Perf Move           0
14:42:57: Au Size             9
14:42:57: Erase Size          15
14:42:57: Erase Timeout       1
14:42:57: Erase offset        1
14:42:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:42:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:42:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:42:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5167 ] 
14:42:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:42:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:42:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:42:57: Host Frequency set to 100000 KHz
14:42:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:42:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:42:57: ####CSD Registe 2.0 Values####
14:42:57: CSD_STRUCTURE                                 :0x1
14:42:57: Reserv1                                       :0x0
14:42:57: Time Access 1 TAAC                            :0xe
14:42:57: Time Access 2 NSAC*100                        :0x0
14:42:57: Data Transfer Rate TRAN_SPEED                 :0xb
14:42:57: Card Command Classess CCC                     :0x5b5
14:42:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:42:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:42:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:42:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:42:57: DSR(driver stage register)  DSR_IMP           :0x0
14:42:57: Reserv2                                       :0x0
14:42:57: Device Size C_SIZE                            :0xedc8
14:42:57: Reserv3                                       :0x0
14:42:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:42:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:42:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:42:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:42:57: Reserv4                                       :0x0
14:42:57: Write Speed Factor R2W_FACTOR                 :0x2
14:42:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:42:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:42:57: FILE_FORMAT_GRP                               :0x0
14:42:57: COPY flag                                     :0x1
14:42:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:42:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:42:57: File_Format                                   :0x0
14:42:57: CRC                                           :0x0
14:42:57: ####CSD Registe Values####  

14:42:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3C30>, <py_sfcl.CommandDataDefinition object at 0x0613F720>) , Command count = 5168 ] 
14:42:57: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:42:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132600>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 5169 ] 
14:42:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:42:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:42:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:42:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70039 to EndLba:0x3B700B9 with One's Pattern
14:42:58: [ WrLbaNoData(0x3B70039, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5170 ] 
14:42:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70039 to EndLba:0x3B700B9 with One's Pattern 

14:42:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B700B9 to EndLba:0x3B70139 with One's Pattern
14:42:58: [ WrLbaNoData(0x3B700B9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5171 ] 
14:42:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B700B9 to EndLba:0x3B70139 with One's Pattern 

14:42:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:42:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2326F to EndLba:0x25057 with Constant Pattern
14:42:58: [ RdLbaNoData(0x2326F, 0x1DE8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5172 ] 
14:42:58: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2326F to EndLba:0x25057 with Constant Pattern 

14:42:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3826
14:42:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:42:58: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E34E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132A20>, <py_sfcl.PySEnhancedCmdData object at 0x06132AE0>, <None>) , Command count = 5173 ] 
14:42:58: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:42:58: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:00: Host Frequency set to 25000 KHz
14:43:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:00: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:00: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x052ADED0>, 0x0, True) , Command count = 5174 ] 
14:43:00: [GO18_globalSetVolt]### Host voltage value is set.
14:43:00: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:00: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF270>, 0x0, False) , Command count = 5175 ] 
14:43:00: [GO18_globalSetVolt]### Host voltage value is set.
14:43:00: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5176 ] 
14:43:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5177 ] 
14:43:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:00: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5178 ] 
14:43:00: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3AE0>, <py_sfcl.CommandDataDefinition object at 0x0613F960>) , Command count = 5179 ] 
14:43:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1C60>, <py_sfcl.CommandDataDefinition object at 0x0613F780>) , Command count = 5180 ] 
14:43:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:00: [ SetCardRCA(0x1, 0xD555) , Command count = 5181 ] 
14:43:00: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:00: Host Frequency set to 25000 KHz
14:43:00: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:00: ####CSD Registe 2.0 Values####
14:43:00: CSD_STRUCTURE                                 :0x1
14:43:00: Reserv1                                       :0x0
14:43:00: Time Access 1 TAAC                            :0xe
14:43:00: Time Access 2 NSAC*100                        :0x0
14:43:00: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:00: Card Command Classess CCC                     :0x5b5
14:43:00: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:00: DSR(driver stage register)  DSR_IMP           :0x0
14:43:00: Reserv2                                       :0x0
14:43:00: Device Size C_SIZE                            :0xedc8
14:43:00: Reserv3                                       :0x0
14:43:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:00: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:00: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:00: Reserv4                                       :0x0
14:43:00: Write Speed Factor R2W_FACTOR                 :0x2
14:43:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:00: FILE_FORMAT_GRP                               :0x0
14:43:00: COPY flag                                     :0x1
14:43:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:00: File_Format                                   :0x0
14:43:00: CRC                                           :0x0
14:43:00: ####CSD Registe Values####  

14:43:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:00: [GetSCRRegisterEntry] Passed
14:43:00: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:00: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:00: Data_Status_After Erases          : 0
14:43:00: CPRM Security Support             : No Security
14:43:00: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:00: Spec. Version                     : Version 3.0X
14:43:00: Extended Security Support         : Extended_Security_Not_Supported
14:43:00: Command Support                   : COMMAND_SUPPORT
14:43:00: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1A50>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 5182 ] 
14:43:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F030>, <py_sfcl.CommandDataDefinition object at 0x0613F6C0>) , Command count = 5183 ] 
14:43:00: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:00: [ SetBusWidth(0x4) , Command count = 5184 ] 
14:43:00: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:00: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FF60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5185 ] 
14:43:00: Protected Area Size 0x28000
14:43:00: Bus Width           2
14:43:00: Secure Mode         0
14:43:00: Speed  Class        4
14:43:00: Perf Move           0
14:43:00: Au Size             9
14:43:00: Erase Size          15
14:43:00: Erase Timeout       1
14:43:00: Erase offset        1
14:43:00: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:00: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:00: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5186 ] 
14:43:00: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:00: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:00: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:00: Host Frequency set to 100000 KHz
14:43:00: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:00: ####CSD Registe 2.0 Values####
14:43:00: CSD_STRUCTURE                                 :0x1
14:43:01: Reserv1                                       :0x0
14:43:01: Time Access 1 TAAC                            :0xe
14:43:01: Time Access 2 NSAC*100                        :0x0
14:43:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:01: Card Command Classess CCC                     :0x5b5
14:43:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:01: DSR(driver stage register)  DSR_IMP           :0x0
14:43:01: Reserv2                                       :0x0
14:43:01: Device Size C_SIZE                            :0xedc8
14:43:01: Reserv3                                       :0x0
14:43:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:01: Reserv4                                       :0x0
14:43:01: Write Speed Factor R2W_FACTOR                 :0x2
14:43:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:01: FILE_FORMAT_GRP                               :0x0
14:43:01: COPY flag                                     :0x1
14:43:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:01: File_Format                                   :0x0
14:43:01: CRC                                           :0x0
14:43:01: ####CSD Registe Values####  

14:43:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C570>, <py_sfcl.CommandDataDefinition object at 0x0613F4B0>) , Command count = 5187 ] 
14:43:01: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F510>, <py_sfcl.CommandDataDefinition object at 0x0613FBD0>) , Command count = 5188 ] 
14:43:01: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:01: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7174D to EndLba:0x3B717CD with One's Pattern
14:43:01: [ WrLbaNoData(0x3B7174D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5189 ] 
14:43:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7174D to EndLba:0x3B717CD with One's Pattern 

14:43:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B717CD to EndLba:0x3B7184D with One's Pattern
14:43:01: [ WrLbaNoData(0x3B717CD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5190 ] 
14:43:01: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B717CD to EndLba:0x3B7184D with One's Pattern 

14:43:01: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23271 to EndLba:0x25057 with Constant Pattern
14:43:01: [ RdLbaNoData(0x23271, 0x1DE6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5191 ] 
14:43:01: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23271 to EndLba:0x25057 with Constant Pattern 

14:43:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3825
14:43:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:01: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AFC30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CF00>, <py_sfcl.PySEnhancedCmdData object at 0x0611C030>, <None>) , Command count = 5192 ] 
14:43:01: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:01: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:03: Host Frequency set to 25000 KHz
14:43:03: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:03: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:03: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FAB0>, 0x0, True) , Command count = 5193 ] 
14:43:03: [GO18_globalSetVolt]### Host voltage value is set.
14:43:03: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:03: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFC60>, 0x0, False) , Command count = 5194 ] 
14:43:03: [GO18_globalSetVolt]### Host voltage value is set.
14:43:03: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5195 ] 
14:43:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5196 ] 
14:43:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:03: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5197 ] 
14:43:03: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C900>, <py_sfcl.CommandDataDefinition object at 0x0611CFC0>) , Command count = 5198 ] 
14:43:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F30>, <py_sfcl.CommandDataDefinition object at 0x0613FBD0>) , Command count = 5199 ] 
14:43:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:03: [ SetCardRCA(0x1, 0xD555) , Command count = 5200 ] 
14:43:03: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:03: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:04: Host Frequency set to 25000 KHz
14:43:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:04: ####CSD Registe 2.0 Values####
14:43:04: CSD_STRUCTURE                                 :0x1
14:43:04: Reserv1                                       :0x0
14:43:04: Time Access 1 TAAC                            :0xe
14:43:04: Time Access 2 NSAC*100                        :0x0
14:43:04: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:04: Card Command Classess CCC                     :0x5b5
14:43:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:04: DSR(driver stage register)  DSR_IMP           :0x0
14:43:04: Reserv2                                       :0x0
14:43:04: Device Size C_SIZE                            :0xedc8
14:43:04: Reserv3                                       :0x0
14:43:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:04: Reserv4                                       :0x0
14:43:04: Write Speed Factor R2W_FACTOR                 :0x2
14:43:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:04: FILE_FORMAT_GRP                               :0x0
14:43:04: COPY flag                                     :0x1
14:43:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:04: File_Format                                   :0x0
14:43:04: CRC                                           :0x0
14:43:04: ####CSD Registe Values####  

14:43:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:04: [GetSCRRegisterEntry] Passed
14:43:04: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:04: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:04: Data_Status_After Erases          : 0
14:43:04: CPRM Security Support             : No Security
14:43:04: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:04: Spec. Version                     : Version 3.0X
14:43:04: Extended Security Support         : Extended_Security_Not_Supported
14:43:04: Command Support                   : COMMAND_SUPPORT
14:43:04: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB930>, <py_sfcl.CommandDataDefinition object at 0x0613F8A0>) , Command count = 5201 ] 
14:43:04: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3CF0>, <py_sfcl.CommandDataDefinition object at 0x060E3840>) , Command count = 5202 ] 
14:43:04: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:04: [ SetBusWidth(0x4) , Command count = 5203 ] 
14:43:04: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:04: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052C1C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5204 ] 
14:43:04: Protected Area Size 0x28000
14:43:04: Bus Width           2
14:43:04: Secure Mode         0
14:43:04: Speed  Class        4
14:43:04: Perf Move           0
14:43:04: Au Size             9
14:43:04: Erase Size          15
14:43:04: Erase Timeout       1
14:43:04: Erase offset        1
14:43:04: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:04: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:04: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5205 ] 
14:43:04: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:04: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:04: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:04: Host Frequency set to 100000 KHz
14:43:04: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:04: ####CSD Registe 2.0 Values####
14:43:04: CSD_STRUCTURE                                 :0x1
14:43:04: Reserv1                                       :0x0
14:43:04: Time Access 1 TAAC                            :0xe
14:43:04: Time Access 2 NSAC*100                        :0x0
14:43:04: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:04: Card Command Classess CCC                     :0x5b5
14:43:04: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:04: DSR(driver stage register)  DSR_IMP           :0x0
14:43:04: Reserv2                                       :0x0
14:43:04: Device Size C_SIZE                            :0xedc8
14:43:04: Reserv3                                       :0x0
14:43:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:04: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:04: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:04: Reserv4                                       :0x0
14:43:04: Write Speed Factor R2W_FACTOR                 :0x2
14:43:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:04: FILE_FORMAT_GRP                               :0x0
14:43:04: COPY flag                                     :0x1
14:43:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:04: File_Format                                   :0x0
14:43:04: CRC                                           :0x0
14:43:04: ####CSD Registe Values####  

14:43:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE10>, <py_sfcl.CommandDataDefinition object at 0x0613F570>) , Command count = 5206 ] 
14:43:04: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py_sfcl.CommandDataDefinition object at 0x052C1FC0>) , Command count = 5207 ] 
14:43:04: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:04: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7129E to EndLba:0x3B7131E with One's Pattern
14:43:04: [ WrLbaNoData(0x3B7129E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5208 ] 
14:43:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7129E to EndLba:0x3B7131E with One's Pattern 

14:43:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7131E to EndLba:0x3B7139E with One's Pattern
14:43:04: [ WrLbaNoData(0x3B7131E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5209 ] 
14:43:04: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7131E to EndLba:0x3B7139E with One's Pattern 

14:43:04: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23271 to EndLba:0x25055 with Constant Pattern
14:43:04: [ RdLbaNoData(0x23271, 0x1DE4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5210 ] 
14:43:04: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23271 to EndLba:0x25055 with Constant Pattern 

14:43:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3824
14:43:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:04: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F210>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C060>, <py_sfcl.PySEnhancedCmdData object at 0x0611CEA0>, <None>) , Command count = 5211 ] 
14:43:04: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:04: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:06: Host Frequency set to 25000 KHz
14:43:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:06: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F240>, 0x0, True) , Command count = 5212 ] 
14:43:06: [GO18_globalSetVolt]### Host voltage value is set.
14:43:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F030>, 0x0, False) , Command count = 5213 ] 
14:43:06: [GO18_globalSetVolt]### Host voltage value is set.
14:43:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5214 ] 
14:43:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5215 ] 
14:43:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:07: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5216 ] 
14:43:07: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 5217 ] 
14:43:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA80>, <py_sfcl.CommandDataDefinition object at 0x0611CAE0>) , Command count = 5218 ] 
14:43:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:07: [ SetCardRCA(0x1, 0xD555) , Command count = 5219 ] 
14:43:07: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:07: Host Frequency set to 25000 KHz
14:43:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:07: ####CSD Registe 2.0 Values####
14:43:07: CSD_STRUCTURE                                 :0x1
14:43:07: Reserv1                                       :0x0
14:43:07: Time Access 1 TAAC                            :0xe
14:43:07: Time Access 2 NSAC*100                        :0x0
14:43:07: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:07: Card Command Classess CCC                     :0x5b5
14:43:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:07: DSR(driver stage register)  DSR_IMP           :0x0
14:43:07: Reserv2                                       :0x0
14:43:07: Device Size C_SIZE                            :0xedc8
14:43:07: Reserv3                                       :0x0
14:43:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:07: Reserv4                                       :0x0
14:43:07: Write Speed Factor R2W_FACTOR                 :0x2
14:43:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:07: FILE_FORMAT_GRP                               :0x0
14:43:07: COPY flag                                     :0x1
14:43:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:07: File_Format                                   :0x0
14:43:07: CRC                                           :0x0
14:43:07: ####CSD Registe Values####  

14:43:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:07: [GetSCRRegisterEntry] Passed
14:43:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:07: Data_Status_After Erases          : 0
14:43:07: CPRM Security Support             : No Security
14:43:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:07: Spec. Version                     : Version 3.0X
14:43:07: Extended Security Support         : Extended_Security_Not_Supported
14:43:07: Command Support                   : COMMAND_SUPPORT
14:43:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F840>, <py_sfcl.CommandDataDefinition object at 0x052BBFC0>) , Command count = 5220 ] 
14:43:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F6F0>, <py_sfcl.CommandDataDefinition object at 0x0611C870>) , Command count = 5221 ] 
14:43:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:07: [ SetBusWidth(0x4) , Command count = 5222 ] 
14:43:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C600>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5223 ] 
14:43:07: Protected Area Size 0x28000
14:43:07: Bus Width           2
14:43:07: Secure Mode         0
14:43:07: Speed  Class        4
14:43:07: Perf Move           0
14:43:07: Au Size             9
14:43:07: Erase Size          15
14:43:07: Erase Timeout       1
14:43:07: Erase offset        1
14:43:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5224 ] 
14:43:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:07: Host Frequency set to 100000 KHz
14:43:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:07: ####CSD Registe 2.0 Values####
14:43:07: CSD_STRUCTURE                                 :0x1
14:43:07: Reserv1                                       :0x0
14:43:07: Time Access 1 TAAC                            :0xe
14:43:07: Time Access 2 NSAC*100                        :0x0
14:43:07: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:07: Card Command Classess CCC                     :0x5b5
14:43:07: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:07: DSR(driver stage register)  DSR_IMP           :0x0
14:43:07: Reserv2                                       :0x0
14:43:07: Device Size C_SIZE                            :0xedc8
14:43:07: Reserv3                                       :0x0
14:43:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:07: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:07: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:07: Reserv4                                       :0x0
14:43:07: Write Speed Factor R2W_FACTOR                 :0x2
14:43:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:07: FILE_FORMAT_GRP                               :0x0
14:43:07: COPY flag                                     :0x1
14:43:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:07: File_Format                                   :0x0
14:43:07: CRC                                           :0x0
14:43:07: ####CSD Registe Values####  

14:43:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F540>, <py_sfcl.CommandDataDefinition object at 0x06129A80>) , Command count = 5225 ] 
14:43:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F4E0>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 5226 ] 
14:43:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:07: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EA9E to EndLba:0x3B6EB1E with One's Pattern
14:43:08: [ WrLbaNoData(0x3B6EA9E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5227 ] 
14:43:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EA9E to EndLba:0x3B6EB1E with One's Pattern 

14:43:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB1E to EndLba:0x3B6EB9E with One's Pattern
14:43:08: [ WrLbaNoData(0x3B6EB1E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5228 ] 
14:43:08: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB1E to EndLba:0x3B6EB9E with One's Pattern 

14:43:08: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23273 to EndLba:0x25055 with Constant Pattern
14:43:08: [ RdLbaNoData(0x23273, 0x1DE2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5229 ] 
14:43:08: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23273 to EndLba:0x25055 with Constant Pattern 

14:43:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3823
14:43:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:08: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129BA0>, <py_sfcl.PySEnhancedCmdData object at 0x0611C1B0>, <None>) , Command count = 5230 ] 
14:43:08: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:08: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:10: Host Frequency set to 25000 KHz
14:43:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:10: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:10: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138DE0>, 0x0, True) , Command count = 5231 ] 
14:43:10: [GO18_globalSetVolt]### Host voltage value is set.
14:43:10: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:10: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F300>, 0x0, False) , Command count = 5232 ] 
14:43:10: [GO18_globalSetVolt]### Host voltage value is set.
14:43:10: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5233 ] 
14:43:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5234 ] 
14:43:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:10: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5235 ] 
14:43:10: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F480>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 5236 ] 
14:43:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0C0>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 5237 ] 
14:43:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:10: [ SetCardRCA(0x1, 0xD555) , Command count = 5238 ] 
14:43:10: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:10: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:10: Host Frequency set to 25000 KHz
14:43:10: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:10: ####CSD Registe 2.0 Values####
14:43:10: CSD_STRUCTURE                                 :0x1
14:43:10: Reserv1                                       :0x0
14:43:10: Time Access 1 TAAC                            :0xe
14:43:10: Time Access 2 NSAC*100                        :0x0
14:43:10: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:10: Card Command Classess CCC                     :0x5b5
14:43:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:10: DSR(driver stage register)  DSR_IMP           :0x0
14:43:10: Reserv2                                       :0x0
14:43:10: Device Size C_SIZE                            :0xedc8
14:43:10: Reserv3                                       :0x0
14:43:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:10: Reserv4                                       :0x0
14:43:10: Write Speed Factor R2W_FACTOR                 :0x2
14:43:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:10: FILE_FORMAT_GRP                               :0x0
14:43:10: COPY flag                                     :0x1
14:43:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:10: File_Format                                   :0x0
14:43:10: CRC                                           :0x0
14:43:10: ####CSD Registe Values####  

14:43:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:10: [GetSCRRegisterEntry] Passed
14:43:10: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:10: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:10: Data_Status_After Erases          : 0
14:43:10: CPRM Security Support             : No Security
14:43:10: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:10: Spec. Version                     : Version 3.0X
14:43:10: Extended Security Support         : Extended_Security_Not_Supported
14:43:10: Command Support                   : COMMAND_SUPPORT
14:43:10: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E10>, <py_sfcl.CommandDataDefinition object at 0x060E3A20>) , Command count = 5239 ] 
14:43:10: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129840>, <py_sfcl.CommandDataDefinition object at 0x0611CC30>) , Command count = 5240 ] 
14:43:10: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:10: [ SetBusWidth(0x4) , Command count = 5241 ] 
14:43:10: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:10: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5242 ] 
14:43:10: Protected Area Size 0x28000
14:43:10: Bus Width           2
14:43:10: Secure Mode         0
14:43:10: Speed  Class        4
14:43:10: Perf Move           0
14:43:10: Au Size             9
14:43:10: Erase Size          15
14:43:10: Erase Timeout       1
14:43:10: Erase offset        1
14:43:10: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:10: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:10: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5243 ] 
14:43:10: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:10: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:10: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:10: Host Frequency set to 100000 KHz
14:43:10: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:10: ####CSD Registe 2.0 Values####
14:43:10: CSD_STRUCTURE                                 :0x1
14:43:10: Reserv1                                       :0x0
14:43:10: Time Access 1 TAAC                            :0xe
14:43:10: Time Access 2 NSAC*100                        :0x0
14:43:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:10: Card Command Classess CCC                     :0x5b5
14:43:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:11: DSR(driver stage register)  DSR_IMP           :0x0
14:43:11: Reserv2                                       :0x0
14:43:11: Device Size C_SIZE                            :0xedc8
14:43:11: Reserv3                                       :0x0
14:43:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:11: Reserv4                                       :0x0
14:43:11: Write Speed Factor R2W_FACTOR                 :0x2
14:43:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:11: FILE_FORMAT_GRP                               :0x0
14:43:11: COPY flag                                     :0x1
14:43:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:11: File_Format                                   :0x0
14:43:11: CRC                                           :0x0
14:43:11: ####CSD Registe Values####  

14:43:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291E0>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 5244 ] 
14:43:11: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 5245 ] 
14:43:11: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:11: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EF18 to EndLba:0x3B6EF98 with One's Pattern
14:43:11: [ WrLbaNoData(0x3B6EF18, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5246 ] 
14:43:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EF18 to EndLba:0x3B6EF98 with One's Pattern 

14:43:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EF98 to EndLba:0x3B6F018 with One's Pattern
14:43:11: [ WrLbaNoData(0x3B6EF98, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5247 ] 
14:43:11: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EF98 to EndLba:0x3B6F018 with One's Pattern 

14:43:11: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23273 to EndLba:0x25053 with Constant Pattern
14:43:11: [ RdLbaNoData(0x23273, 0x1DE0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5248 ] 
14:43:11: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23273 to EndLba:0x25053 with Constant Pattern 

14:43:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3822
14:43:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129090>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061295A0>, <py_sfcl.PySEnhancedCmdData object at 0x06129870>, <None>) , Command count = 5249 ] 
14:43:11: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:13: Host Frequency set to 25000 KHz
14:43:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CC60>, 0x0, True) , Command count = 5250 ] 
14:43:13: [GO18_globalSetVolt]### Host voltage value is set.
14:43:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E38D0>, 0x0, False) , Command count = 5251 ] 
14:43:13: [GO18_globalSetVolt]### Host voltage value is set.
14:43:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5252 ] 
14:43:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5253 ] 
14:43:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5254 ] 
14:43:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 5255 ] 
14:43:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x06129CF0>) , Command count = 5256 ] 
14:43:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:13: [ SetCardRCA(0x1, 0xD555) , Command count = 5257 ] 
14:43:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:14: Host Frequency set to 25000 KHz
14:43:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:14: ####CSD Registe 2.0 Values####
14:43:14: CSD_STRUCTURE                                 :0x1
14:43:14: Reserv1                                       :0x0
14:43:14: Time Access 1 TAAC                            :0xe
14:43:14: Time Access 2 NSAC*100                        :0x0
14:43:14: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:14: Card Command Classess CCC                     :0x5b5
14:43:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:14: DSR(driver stage register)  DSR_IMP           :0x0
14:43:14: Reserv2                                       :0x0
14:43:14: Device Size C_SIZE                            :0xedc8
14:43:14: Reserv3                                       :0x0
14:43:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:14: Reserv4                                       :0x0
14:43:14: Write Speed Factor R2W_FACTOR                 :0x2
14:43:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:14: FILE_FORMAT_GRP                               :0x0
14:43:14: COPY flag                                     :0x1
14:43:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:14: File_Format                                   :0x0
14:43:14: CRC                                           :0x0
14:43:14: ####CSD Registe Values####  

14:43:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:14: [GetSCRRegisterEntry] Passed
14:43:14: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:14: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:14: Data_Status_After Erases          : 0
14:43:14: CPRM Security Support             : No Security
14:43:14: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:14: Spec. Version                     : Version 3.0X
14:43:14: Extended Security Support         : Extended_Security_Not_Supported
14:43:14: Command Support                   : COMMAND_SUPPORT
14:43:14: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F60>, <py_sfcl.CommandDataDefinition object at 0x061451E0>) , Command count = 5258 ] 
14:43:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E300>, <py_sfcl.CommandDataDefinition object at 0x06129450>) , Command count = 5259 ] 
14:43:14: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:14: [ SetBusWidth(0x4) , Command count = 5260 ] 
14:43:14: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:14: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5261 ] 
14:43:14: Protected Area Size 0x28000
14:43:14: Bus Width           2
14:43:14: Secure Mode         0
14:43:14: Speed  Class        4
14:43:14: Perf Move           0
14:43:14: Au Size             9
14:43:14: Erase Size          15
14:43:14: Erase Timeout       1
14:43:14: Erase offset        1
14:43:14: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:14: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:14: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5262 ] 
14:43:14: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:14: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:14: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:14: Host Frequency set to 100000 KHz
14:43:14: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:14: ####CSD Registe 2.0 Values####
14:43:14: CSD_STRUCTURE                                 :0x1
14:43:14: Reserv1                                       :0x0
14:43:14: Time Access 1 TAAC                            :0xe
14:43:14: Time Access 2 NSAC*100                        :0x0
14:43:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:14: Card Command Classess CCC                     :0x5b5
14:43:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:14: DSR(driver stage register)  DSR_IMP           :0x0
14:43:14: Reserv2                                       :0x0
14:43:14: Device Size C_SIZE                            :0xedc8
14:43:14: Reserv3                                       :0x0
14:43:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:14: Reserv4                                       :0x0
14:43:14: Write Speed Factor R2W_FACTOR                 :0x2
14:43:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:14: FILE_FORMAT_GRP                               :0x0
14:43:14: COPY flag                                     :0x1
14:43:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:14: File_Format                                   :0x0
14:43:14: CRC                                           :0x0
14:43:14: ####CSD Registe Values####  

14:43:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129720>, <py_sfcl.CommandDataDefinition object at 0x061290F0>) , Command count = 5263 ] 
14:43:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA80>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 5264 ] 
14:43:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F45A to EndLba:0x3B6F4DA with One's Pattern
14:43:14: [ WrLbaNoData(0x3B6F45A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5265 ] 
14:43:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F45A to EndLba:0x3B6F4DA with One's Pattern 

14:43:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F4DA to EndLba:0x3B6F55A with One's Pattern
14:43:14: [ WrLbaNoData(0x3B6F4DA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5266 ] 
14:43:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F4DA to EndLba:0x3B6F55A with One's Pattern 

14:43:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23275 to EndLba:0x25053 with Constant Pattern
14:43:14: [ RdLbaNoData(0x23275, 0x1DDE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5267 ] 
14:43:14: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23275 to EndLba:0x25053 with Constant Pattern 

14:43:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3821
14:43:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C7E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129330>, <py_sfcl.PySEnhancedCmdData object at 0x061293F0>, <None>) , Command count = 5268 ] 
14:43:14: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:14: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:17: Host Frequency set to 25000 KHz
14:43:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C7B0>, 0x0, True) , Command count = 5269 ] 
14:43:17: [GO18_globalSetVolt]### Host voltage value is set.
14:43:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F2A0>, 0x0, False) , Command count = 5270 ] 
14:43:17: [GO18_globalSetVolt]### Host voltage value is set.
14:43:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5271 ] 
14:43:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5272 ] 
14:43:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5273 ] 
14:43:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C810>, <py_sfcl.CommandDataDefinition object at 0x06129A20>) , Command count = 5274 ] 
14:43:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x061299C0>) , Command count = 5275 ] 
14:43:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:17: [ SetCardRCA(0x1, 0xD555) , Command count = 5276 ] 
14:43:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:17: Host Frequency set to 25000 KHz
14:43:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:17: ####CSD Registe 2.0 Values####
14:43:17: CSD_STRUCTURE                                 :0x1
14:43:17: Reserv1                                       :0x0
14:43:17: Time Access 1 TAAC                            :0xe
14:43:17: Time Access 2 NSAC*100                        :0x0
14:43:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:17: Card Command Classess CCC                     :0x5b5
14:43:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:17: DSR(driver stage register)  DSR_IMP           :0x0
14:43:17: Reserv2                                       :0x0
14:43:17: Device Size C_SIZE                            :0xedc8
14:43:17: Reserv3                                       :0x0
14:43:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:17: Reserv4                                       :0x0
14:43:17: Write Speed Factor R2W_FACTOR                 :0x2
14:43:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:17: FILE_FORMAT_GRP                               :0x0
14:43:17: COPY flag                                     :0x1
14:43:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:17: File_Format                                   :0x0
14:43:17: CRC                                           :0x0
14:43:17: ####CSD Registe Values####  

14:43:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:17: [GetSCRRegisterEntry] Passed
14:43:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:17: Data_Status_After Erases          : 0
14:43:17: CPRM Security Support             : No Security
14:43:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:17: Spec. Version                     : Version 3.0X
14:43:17: Extended Security Support         : Extended_Security_Not_Supported
14:43:17: Command Support                   : COMMAND_SUPPORT
14:43:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CCC0>, <py_sfcl.CommandDataDefinition object at 0x06129F00>) , Command count = 5277 ] 
14:43:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 5278 ] 
14:43:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:17: [ SetBusWidth(0x4) , Command count = 5279 ] 
14:43:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5280 ] 
14:43:17: Protected Area Size 0x28000
14:43:17: Bus Width           2
14:43:17: Secure Mode         0
14:43:17: Speed  Class        4
14:43:17: Perf Move           0
14:43:17: Au Size             9
14:43:17: Erase Size          15
14:43:17: Erase Timeout       1
14:43:17: Erase offset        1
14:43:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5281 ] 
14:43:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:17: Host Frequency set to 100000 KHz
14:43:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:17: ####CSD Registe 2.0 Values####
14:43:17: CSD_STRUCTURE                                 :0x1
14:43:17: Reserv1                                       :0x0
14:43:17: Time Access 1 TAAC                            :0xe
14:43:17: Time Access 2 NSAC*100                        :0x0
14:43:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:17: Card Command Classess CCC                     :0x5b5
14:43:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:17: DSR(driver stage register)  DSR_IMP           :0x0
14:43:17: Reserv2                                       :0x0
14:43:17: Device Size C_SIZE                            :0xedc8
14:43:17: Reserv3                                       :0x0
14:43:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:17: Reserv4                                       :0x0
14:43:17: Write Speed Factor R2W_FACTOR                 :0x2
14:43:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:18: FILE_FORMAT_GRP                               :0x0
14:43:18: COPY flag                                     :0x1
14:43:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:18: File_Format                                   :0x0
14:43:18: CRC                                           :0x0
14:43:18: ####CSD Registe Values####  

14:43:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CC0>, <py_sfcl.CommandDataDefinition object at 0x061293C0>) , Command count = 5282 ] 
14:43:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 5283 ] 
14:43:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F646 to EndLba:0x3B6F6C6 with One's Pattern
14:43:18: [ WrLbaNoData(0x3B6F646, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5284 ] 
14:43:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F646 to EndLba:0x3B6F6C6 with One's Pattern 

14:43:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F6C6 to EndLba:0x3B6F746 with One's Pattern
14:43:18: [ WrLbaNoData(0x3B6F6C6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5285 ] 
14:43:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F6C6 to EndLba:0x3B6F746 with One's Pattern 

14:43:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23275 to EndLba:0x25051 with Constant Pattern
14:43:18: [ RdLbaNoData(0x23275, 0x1DDC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5286 ] 
14:43:18: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23275 to EndLba:0x25051 with Constant Pattern 

14:43:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3820
14:43:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129F90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129750>, <py_sfcl.PySEnhancedCmdData object at 0x06129CC0>, <None>) , Command count = 5287 ] 
14:43:18: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:20: Host Frequency set to 25000 KHz
14:43:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E060>, 0x0, True) , Command count = 5288 ] 
14:43:20: [GO18_globalSetVolt]### Host voltage value is set.
14:43:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E270>, 0x0, False) , Command count = 5289 ] 
14:43:20: [GO18_globalSetVolt]### Host voltage value is set.
14:43:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5290 ] 
14:43:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5291 ] 
14:43:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5292 ] 
14:43:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C540>, <py_sfcl.CommandDataDefinition object at 0x06138AB0>) , Command count = 5293 ] 
14:43:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061328D0>, <py_sfcl.CommandDataDefinition object at 0x06129630>) , Command count = 5294 ] 
14:43:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:20: [ SetCardRCA(0x1, 0xD555) , Command count = 5295 ] 
14:43:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:20: Host Frequency set to 25000 KHz
14:43:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:20: ####CSD Registe 2.0 Values####
14:43:20: CSD_STRUCTURE                                 :0x1
14:43:20: Reserv1                                       :0x0
14:43:20: Time Access 1 TAAC                            :0xe
14:43:20: Time Access 2 NSAC*100                        :0x0
14:43:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:20: Card Command Classess CCC                     :0x5b5
14:43:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:20: DSR(driver stage register)  DSR_IMP           :0x0
14:43:20: Reserv2                                       :0x0
14:43:20: Device Size C_SIZE                            :0xedc8
14:43:20: Reserv3                                       :0x0
14:43:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:20: Reserv4                                       :0x0
14:43:20: Write Speed Factor R2W_FACTOR                 :0x2
14:43:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:20: FILE_FORMAT_GRP                               :0x0
14:43:20: COPY flag                                     :0x1
14:43:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:20: File_Format                                   :0x0
14:43:20: CRC                                           :0x0
14:43:20: ####CSD Registe Values####  

14:43:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:20: [GetSCRRegisterEntry] Passed
14:43:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:20: Data_Status_After Erases          : 0
14:43:20: CPRM Security Support             : No Security
14:43:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:20: Spec. Version                     : Version 3.0X
14:43:20: Extended Security Support         : Extended_Security_Not_Supported
14:43:20: Command Support                   : COMMAND_SUPPORT
14:43:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E930>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 5296 ] 
14:43:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py_sfcl.CommandDataDefinition object at 0x061292A0>) , Command count = 5297 ] 
14:43:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:20: [ SetBusWidth(0x4) , Command count = 5298 ] 
14:43:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129B10>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5299 ] 
14:43:20: Protected Area Size 0x28000
14:43:20: Bus Width           2
14:43:20: Secure Mode         0
14:43:20: Speed  Class        4
14:43:20: Perf Move           0
14:43:20: Au Size             9
14:43:20: Erase Size          15
14:43:20: Erase Timeout       1
14:43:20: Erase offset        1
14:43:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5300 ] 
14:43:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:21: Host Frequency set to 100000 KHz
14:43:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:21: ####CSD Registe 2.0 Values####
14:43:21: CSD_STRUCTURE                                 :0x1
14:43:21: Reserv1                                       :0x0
14:43:21: Time Access 1 TAAC                            :0xe
14:43:21: Time Access 2 NSAC*100                        :0x0
14:43:21: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:21: Card Command Classess CCC                     :0x5b5
14:43:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:21: DSR(driver stage register)  DSR_IMP           :0x0
14:43:21: Reserv2                                       :0x0
14:43:21: Device Size C_SIZE                            :0xedc8
14:43:21: Reserv3                                       :0x0
14:43:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:21: Reserv4                                       :0x0
14:43:21: Write Speed Factor R2W_FACTOR                 :0x2
14:43:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:21: FILE_FORMAT_GRP                               :0x0
14:43:21: COPY flag                                     :0x1
14:43:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:21: File_Format                                   :0x0
14:43:21: CRC                                           :0x0
14:43:21: ####CSD Registe Values####  

14:43:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E0F0>, <py_sfcl.CommandDataDefinition object at 0x0612EA80>) , Command count = 5301 ] 
14:43:21: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EF60>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 5302 ] 
14:43:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DEC1 to EndLba:0x3B6DF41 with One's Pattern
14:43:21: [ WrLbaNoData(0x3B6DEC1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5303 ] 
14:43:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DEC1 to EndLba:0x3B6DF41 with One's Pattern 

14:43:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DF41 to EndLba:0x3B6DFC1 with One's Pattern
14:43:21: [ WrLbaNoData(0x3B6DF41, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5304 ] 
14:43:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DF41 to EndLba:0x3B6DFC1 with One's Pattern 

14:43:21: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23277 to EndLba:0x25051 with Constant Pattern
14:43:21: [ RdLbaNoData(0x23277, 0x1DDA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5305 ] 
14:43:21: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23277 to EndLba:0x25051 with Constant Pattern 

14:43:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3819
14:43:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:21: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E900>, <py_sfcl.PySEnhancedCmdData object at 0x06132690>, <None>) , Command count = 5306 ] 
14:43:21: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:21: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:23: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:23: Host Frequency set to 25000 KHz
14:43:23: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:23: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:23: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:23: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132060>, 0x0, True) , Command count = 5307 ] 
14:43:23: [GO18_globalSetVolt]### Host voltage value is set.
14:43:23: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EDB0>, 0x0, False) , Command count = 5308 ] 
14:43:24: [GO18_globalSetVolt]### Host voltage value is set.
14:43:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5309 ] 
14:43:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5310 ] 
14:43:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:24: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5311 ] 
14:43:24: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x0612E4B0>) , Command count = 5312 ] 
14:43:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x0612E7B0>) , Command count = 5313 ] 
14:43:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:24: [ SetCardRCA(0x1, 0xD555) , Command count = 5314 ] 
14:43:24: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:24: Host Frequency set to 25000 KHz
14:43:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:24: ####CSD Registe 2.0 Values####
14:43:24: CSD_STRUCTURE                                 :0x1
14:43:24: Reserv1                                       :0x0
14:43:24: Time Access 1 TAAC                            :0xe
14:43:24: Time Access 2 NSAC*100                        :0x0
14:43:24: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:24: Card Command Classess CCC                     :0x5b5
14:43:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:24: DSR(driver stage register)  DSR_IMP           :0x0
14:43:24: Reserv2                                       :0x0
14:43:24: Device Size C_SIZE                            :0xedc8
14:43:24: Reserv3                                       :0x0
14:43:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:24: Reserv4                                       :0x0
14:43:24: Write Speed Factor R2W_FACTOR                 :0x2
14:43:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:24: FILE_FORMAT_GRP                               :0x0
14:43:24: COPY flag                                     :0x1
14:43:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:24: File_Format                                   :0x0
14:43:24: CRC                                           :0x0
14:43:24: ####CSD Registe Values####  

14:43:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:24: [GetSCRRegisterEntry] Passed
14:43:24: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:24: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:24: Data_Status_After Erases          : 0
14:43:24: CPRM Security Support             : No Security
14:43:24: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:24: Spec. Version                     : Version 3.0X
14:43:24: Extended Security Support         : Extended_Security_Not_Supported
14:43:24: Command Support                   : COMMAND_SUPPORT
14:43:24: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061325D0>, <py_sfcl.CommandDataDefinition object at 0x0612E1B0>) , Command count = 5315 ] 
14:43:24: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138BA0>, <py_sfcl.CommandDataDefinition object at 0x0612E4E0>) , Command count = 5316 ] 
14:43:24: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:24: [ SetBusWidth(0x4) , Command count = 5317 ] 
14:43:24: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:24: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5318 ] 
14:43:24: Protected Area Size 0x28000
14:43:24: Bus Width           2
14:43:24: Secure Mode         0
14:43:24: Speed  Class        4
14:43:24: Perf Move           0
14:43:24: Au Size             9
14:43:24: Erase Size          15
14:43:24: Erase Timeout       1
14:43:24: Erase offset        1
14:43:24: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:24: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:24: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5319 ] 
14:43:24: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:24: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:24: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:24: Host Frequency set to 100000 KHz
14:43:24: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:24: ####CSD Registe 2.0 Values####
14:43:24: CSD_STRUCTURE                                 :0x1
14:43:24: Reserv1                                       :0x0
14:43:24: Time Access 1 TAAC                            :0xe
14:43:24: Time Access 2 NSAC*100                        :0x0
14:43:24: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:24: Card Command Classess CCC                     :0x5b5
14:43:24: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:24: DSR(driver stage register)  DSR_IMP           :0x0
14:43:24: Reserv2                                       :0x0
14:43:24: Device Size C_SIZE                            :0xedc8
14:43:24: Reserv3                                       :0x0
14:43:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:24: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:24: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:25: Reserv4                                       :0x0
14:43:25: Write Speed Factor R2W_FACTOR                 :0x2
14:43:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:25: FILE_FORMAT_GRP                               :0x0
14:43:25: COPY flag                                     :0x1
14:43:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:25: File_Format                                   :0x0
14:43:25: CRC                                           :0x0
14:43:25: ####CSD Registe Values####  

14:43:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132150>, <py_sfcl.CommandDataDefinition object at 0x0612EDE0>) , Command count = 5320 ] 
14:43:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327B0>, <py_sfcl.CommandDataDefinition object at 0x06129ED0>) , Command count = 5321 ] 
14:43:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71A1C to EndLba:0x3B71A9C with One's Pattern
14:43:25: [ WrLbaNoData(0x3B71A1C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5322 ] 
14:43:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71A1C to EndLba:0x3B71A9C with One's Pattern 

14:43:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71A9C to EndLba:0x3B71B1C with One's Pattern
14:43:25: [ WrLbaNoData(0x3B71A9C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5323 ] 
14:43:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71A9C to EndLba:0x3B71B1C with One's Pattern 

14:43:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23277 to EndLba:0x2504F with Constant Pattern
14:43:25: [ RdLbaNoData(0x23277, 0x1DD8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5324 ] 
14:43:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23277 to EndLba:0x2504F with Constant Pattern 

14:43:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3818
14:43:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:25: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132390>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E990>, <py_sfcl.PySEnhancedCmdData object at 0x0612E3F0>, <None>) , Command count = 5325 ] 
14:43:25: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:25: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:27: Host Frequency set to 25000 KHz
14:43:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:27: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138480>, 0x0, True) , Command count = 5326 ] 
14:43:27: [GO18_globalSetVolt]### Host voltage value is set.
14:43:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F810>, 0x0, False) , Command count = 5327 ] 
14:43:27: [GO18_globalSetVolt]### Host voltage value is set.
14:43:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5328 ] 
14:43:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5329 ] 
14:43:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5330 ] 
14:43:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x06132A80>) , Command count = 5331 ] 
14:43:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E450>, <py_sfcl.CommandDataDefinition object at 0x061322D0>) , Command count = 5332 ] 
14:43:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:27: [ SetCardRCA(0x1, 0xD555) , Command count = 5333 ] 
14:43:27: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:27: Host Frequency set to 25000 KHz
14:43:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:27: ####CSD Registe 2.0 Values####
14:43:27: CSD_STRUCTURE                                 :0x1
14:43:27: Reserv1                                       :0x0
14:43:27: Time Access 1 TAAC                            :0xe
14:43:27: Time Access 2 NSAC*100                        :0x0
14:43:27: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:27: Card Command Classess CCC                     :0x5b5
14:43:27: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:27: DSR(driver stage register)  DSR_IMP           :0x0
14:43:27: Reserv2                                       :0x0
14:43:27: Device Size C_SIZE                            :0xedc8
14:43:27: Reserv3                                       :0x0
14:43:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:27: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:27: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:27: Reserv4                                       :0x0
14:43:27: Write Speed Factor R2W_FACTOR                 :0x2
14:43:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:27: FILE_FORMAT_GRP                               :0x0
14:43:27: COPY flag                                     :0x1
14:43:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:27: File_Format                                   :0x0
14:43:27: CRC                                           :0x0
14:43:27: ####CSD Registe Values####  

14:43:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:27: [GetSCRRegisterEntry] Passed
14:43:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:27: Data_Status_After Erases          : 0
14:43:27: CPRM Security Support             : No Security
14:43:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:27: Spec. Version                     : Version 3.0X
14:43:27: Extended Security Support         : Extended_Security_Not_Supported
14:43:27: Command Support                   : COMMAND_SUPPORT
14:43:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x06132FC0>) , Command count = 5334 ] 
14:43:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E420>, <py_sfcl.CommandDataDefinition object at 0x061322A0>) , Command count = 5335 ] 
14:43:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:27: [ SetBusWidth(0x4) , Command count = 5336 ] 
14:43:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132D50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5337 ] 
14:43:27: Protected Area Size 0x28000
14:43:27: Bus Width           2
14:43:27: Secure Mode         0
14:43:27: Speed  Class        4
14:43:27: Perf Move           0
14:43:27: Au Size             9
14:43:27: Erase Size          15
14:43:27: Erase Timeout       1
14:43:27: Erase offset        1
14:43:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5338 ] 
14:43:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:28: Host Frequency set to 100000 KHz
14:43:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:28: ####CSD Registe 2.0 Values####
14:43:28: CSD_STRUCTURE                                 :0x1
14:43:28: Reserv1                                       :0x0
14:43:28: Time Access 1 TAAC                            :0xe
14:43:28: Time Access 2 NSAC*100                        :0x0
14:43:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:28: Card Command Classess CCC                     :0x5b5
14:43:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:28: DSR(driver stage register)  DSR_IMP           :0x0
14:43:28: Reserv2                                       :0x0
14:43:28: Device Size C_SIZE                            :0xedc8
14:43:28: Reserv3                                       :0x0
14:43:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:28: Reserv4                                       :0x0
14:43:28: Write Speed Factor R2W_FACTOR                 :0x2
14:43:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:28: FILE_FORMAT_GRP                               :0x0
14:43:28: COPY flag                                     :0x1
14:43:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:28: File_Format                                   :0x0
14:43:28: CRC                                           :0x0
14:43:28: ####CSD Registe Values####  

14:43:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD50>, <py_sfcl.CommandDataDefinition object at 0x06132660>) , Command count = 5339 ] 
14:43:28: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E630>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 5340 ] 
14:43:28: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:28: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ECBC to EndLba:0x3B6ED3C with One's Pattern
14:43:28: [ WrLbaNoData(0x3B6ECBC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5341 ] 
14:43:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ECBC to EndLba:0x3B6ED3C with One's Pattern 

14:43:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED3C to EndLba:0x3B6EDBC with One's Pattern
14:43:28: [ WrLbaNoData(0x3B6ED3C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5342 ] 
14:43:28: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED3C to EndLba:0x3B6EDBC with One's Pattern 

14:43:28: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23279 to EndLba:0x2504F with Constant Pattern
14:43:28: [ RdLbaNoData(0x23279, 0x1DD6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5343 ] 
14:43:28: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23279 to EndLba:0x2504F with Constant Pattern 

14:43:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3817
14:43:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:28: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E9C0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129690>, <py_sfcl.PySEnhancedCmdData object at 0x061326F0>, <None>) , Command count = 5344 ] 
14:43:28: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:28: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:30: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:30: Host Frequency set to 25000 KHz
14:43:30: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:30: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:30: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129FC0>, 0x0, True) , Command count = 5345 ] 
14:43:30: [GO18_globalSetVolt]### Host voltage value is set.
14:43:30: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:30: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EC00>, 0x0, False) , Command count = 5346 ] 
14:43:30: [GO18_globalSetVolt]### Host voltage value is set.
14:43:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5347 ] 
14:43:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5348 ] 
14:43:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:31: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5349 ] 
14:43:31: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8A0>, <py_sfcl.CommandDataDefinition object at 0x061320C0>) , Command count = 5350 ] 
14:43:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138270>, <py_sfcl.CommandDataDefinition object at 0x061326C0>) , Command count = 5351 ] 
14:43:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:31: [ SetCardRCA(0x1, 0xD555) , Command count = 5352 ] 
14:43:31: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:31: Host Frequency set to 25000 KHz
14:43:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:31: ####CSD Registe 2.0 Values####
14:43:31: CSD_STRUCTURE                                 :0x1
14:43:31: Reserv1                                       :0x0
14:43:31: Time Access 1 TAAC                            :0xe
14:43:31: Time Access 2 NSAC*100                        :0x0
14:43:31: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:31: Card Command Classess CCC                     :0x5b5
14:43:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:31: DSR(driver stage register)  DSR_IMP           :0x0
14:43:31: Reserv2                                       :0x0
14:43:31: Device Size C_SIZE                            :0xedc8
14:43:31: Reserv3                                       :0x0
14:43:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:31: Reserv4                                       :0x0
14:43:31: Write Speed Factor R2W_FACTOR                 :0x2
14:43:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:31: FILE_FORMAT_GRP                               :0x0
14:43:31: COPY flag                                     :0x1
14:43:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:31: File_Format                                   :0x0
14:43:31: CRC                                           :0x0
14:43:31: ####CSD Registe Values####  

14:43:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:31: [GetSCRRegisterEntry] Passed
14:43:31: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:31: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:31: Data_Status_After Erases          : 0
14:43:31: CPRM Security Support             : No Security
14:43:31: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:31: Spec. Version                     : Version 3.0X
14:43:31: Extended Security Support         : Extended_Security_Not_Supported
14:43:31: Command Support                   : COMMAND_SUPPORT
14:43:31: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E35A0>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 5353 ] 
14:43:31: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381B0>, <py_sfcl.CommandDataDefinition object at 0x06138420>) , Command count = 5354 ] 
14:43:31: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:31: [ SetBusWidth(0x4) , Command count = 5355 ] 
14:43:31: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:31: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5356 ] 
14:43:31: Protected Area Size 0x28000
14:43:31: Bus Width           2
14:43:31: Secure Mode         0
14:43:31: Speed  Class        4
14:43:31: Perf Move           0
14:43:31: Au Size             9
14:43:31: Erase Size          15
14:43:31: Erase Timeout       1
14:43:31: Erase offset        1
14:43:31: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:31: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:31: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5357 ] 
14:43:31: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:31: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:31: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:31: Host Frequency set to 100000 KHz
14:43:31: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:31: ####CSD Registe 2.0 Values####
14:43:31: CSD_STRUCTURE                                 :0x1
14:43:31: Reserv1                                       :0x0
14:43:31: Time Access 1 TAAC                            :0xe
14:43:31: Time Access 2 NSAC*100                        :0x0
14:43:31: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:31: Card Command Classess CCC                     :0x5b5
14:43:31: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:31: DSR(driver stage register)  DSR_IMP           :0x0
14:43:31: Reserv2                                       :0x0
14:43:31: Device Size C_SIZE                            :0xedc8
14:43:31: Reserv3                                       :0x0
14:43:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:31: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:31: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:31: Reserv4                                       :0x0
14:43:31: Write Speed Factor R2W_FACTOR                 :0x2
14:43:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:31: FILE_FORMAT_GRP                               :0x0
14:43:31: COPY flag                                     :0x1
14:43:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:31: File_Format                                   :0x0
14:43:31: CRC                                           :0x0
14:43:31: ####CSD Registe Values####  

14:43:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB40>, <py_sfcl.CommandDataDefinition object at 0x06132330>) , Command count = 5358 ] 
14:43:31: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B70>, <py_sfcl.CommandDataDefinition object at 0x06132480>) , Command count = 5359 ] 
14:43:31: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:31: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E1B5 to EndLba:0x3B6E235 with One's Pattern
14:43:31: [ WrLbaNoData(0x3B6E1B5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5360 ] 
14:43:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E1B5 to EndLba:0x3B6E235 with One's Pattern 

14:43:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E235 to EndLba:0x3B6E2B5 with One's Pattern
14:43:31: [ WrLbaNoData(0x3B6E235, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5361 ] 
14:43:31: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E235 to EndLba:0x3B6E2B5 with One's Pattern 

14:43:31: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:31: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23279 to EndLba:0x2504D with Constant Pattern
14:43:32: [ RdLbaNoData(0x23279, 0x1DD4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5362 ] 
14:43:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23279 to EndLba:0x2504D with Constant Pattern 

14:43:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3816
14:43:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:32: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138F30>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C450>, <py_sfcl.PySEnhancedCmdData object at 0x06132210>, <None>) , Command count = 5363 ] 
14:43:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:32: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:34: Host Frequency set to 25000 KHz
14:43:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:34: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:34: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138750>, 0x0, True) , Command count = 5364 ] 
14:43:34: [GO18_globalSetVolt]### Host voltage value is set.
14:43:34: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:34: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F870>, 0x0, False) , Command count = 5365 ] 
14:43:34: [GO18_globalSetVolt]### Host voltage value is set.
14:43:34: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5366 ] 
14:43:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5367 ] 
14:43:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:34: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5368 ] 
14:43:34: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x06129E40>) , Command count = 5369 ] 
14:43:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061327E0>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 5370 ] 
14:43:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:34: [ SetCardRCA(0x1, 0xD555) , Command count = 5371 ] 
14:43:34: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:34: Host Frequency set to 25000 KHz
14:43:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:34: ####CSD Registe 2.0 Values####
14:43:34: CSD_STRUCTURE                                 :0x1
14:43:34: Reserv1                                       :0x0
14:43:34: Time Access 1 TAAC                            :0xe
14:43:34: Time Access 2 NSAC*100                        :0x0
14:43:34: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:34: Card Command Classess CCC                     :0x5b5
14:43:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:34: DSR(driver stage register)  DSR_IMP           :0x0
14:43:34: Reserv2                                       :0x0
14:43:34: Device Size C_SIZE                            :0xedc8
14:43:34: Reserv3                                       :0x0
14:43:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:34: Reserv4                                       :0x0
14:43:34: Write Speed Factor R2W_FACTOR                 :0x2
14:43:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:34: FILE_FORMAT_GRP                               :0x0
14:43:34: COPY flag                                     :0x1
14:43:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:34: File_Format                                   :0x0
14:43:34: CRC                                           :0x0
14:43:34: ####CSD Registe Values####  

14:43:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:34: [GetSCRRegisterEntry] Passed
14:43:34: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:34: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:34: Data_Status_After Erases          : 0
14:43:34: CPRM Security Support             : No Security
14:43:34: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:34: Spec. Version                     : Version 3.0X
14:43:34: Extended Security Support         : Extended_Security_Not_Supported
14:43:34: Command Support                   : COMMAND_SUPPORT
14:43:34: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F90>, <py_sfcl.CommandDataDefinition object at 0x06145480>) , Command count = 5372 ] 
14:43:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132CF0>, <py_sfcl.CommandDataDefinition object at 0x06132360>) , Command count = 5373 ] 
14:43:34: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:34: [ SetBusWidth(0x4) , Command count = 5374 ] 
14:43:34: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:34: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138C90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5375 ] 
14:43:34: Protected Area Size 0x28000
14:43:34: Bus Width           2
14:43:34: Secure Mode         0
14:43:34: Speed  Class        4
14:43:34: Perf Move           0
14:43:34: Au Size             9
14:43:34: Erase Size          15
14:43:34: Erase Timeout       1
14:43:34: Erase offset        1
14:43:34: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:34: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:34: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5376 ] 
14:43:34: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:34: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:34: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:34: Host Frequency set to 100000 KHz
14:43:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:34: ####CSD Registe 2.0 Values####
14:43:34: CSD_STRUCTURE                                 :0x1
14:43:34: Reserv1                                       :0x0
14:43:34: Time Access 1 TAAC                            :0xe
14:43:34: Time Access 2 NSAC*100                        :0x0
14:43:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:34: Card Command Classess CCC                     :0x5b5
14:43:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:34: DSR(driver stage register)  DSR_IMP           :0x0
14:43:34: Reserv2                                       :0x0
14:43:34: Device Size C_SIZE                            :0xedc8
14:43:34: Reserv3                                       :0x0
14:43:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:35: Reserv4                                       :0x0
14:43:35: Write Speed Factor R2W_FACTOR                 :0x2
14:43:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:35: FILE_FORMAT_GRP                               :0x0
14:43:35: COPY flag                                     :0x1
14:43:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:35: File_Format                                   :0x0
14:43:35: CRC                                           :0x0
14:43:35: ####CSD Registe Values####  

14:43:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138150>, <py_sfcl.CommandDataDefinition object at 0x06138030>) , Command count = 5377 ] 
14:43:35: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138120>) , Command count = 5378 ] 
14:43:35: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:35: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E782 to EndLba:0x3B6E802 with One's Pattern
14:43:35: [ WrLbaNoData(0x3B6E782, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5379 ] 
14:43:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E782 to EndLba:0x3B6E802 with One's Pattern 

14:43:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E802 to EndLba:0x3B6E882 with One's Pattern
14:43:35: [ WrLbaNoData(0x3B6E802, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5380 ] 
14:43:35: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E802 to EndLba:0x3B6E882 with One's Pattern 

14:43:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2327B to EndLba:0x2504D with Constant Pattern
14:43:35: [ RdLbaNoData(0x2327B, 0x1DD2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5381 ] 
14:43:35: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2327B to EndLba:0x2504D with Constant Pattern 

14:43:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3815
14:43:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132F00>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138960>, <py_sfcl.PySEnhancedCmdData object at 0x06138BD0>, <None>) , Command count = 5382 ] 
14:43:35: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:37: Host Frequency set to 25000 KHz
14:43:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x061385D0>, 0x0, True) , Command count = 5383 ] 
14:43:37: [GO18_globalSetVolt]### Host voltage value is set.
14:43:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x061321E0>, 0x0, False) , Command count = 5384 ] 
14:43:37: [GO18_globalSetVolt]### Host voltage value is set.
14:43:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5385 ] 
14:43:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5386 ] 
14:43:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5387 ] 
14:43:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06138C00>) , Command count = 5388 ] 
14:43:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B40>, <py_sfcl.CommandDataDefinition object at 0x06138CF0>) , Command count = 5389 ] 
14:43:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:37: [ SetCardRCA(0x1, 0xD555) , Command count = 5390 ] 
14:43:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:38: Host Frequency set to 25000 KHz
14:43:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:38: ####CSD Registe 2.0 Values####
14:43:38: CSD_STRUCTURE                                 :0x1
14:43:38: Reserv1                                       :0x0
14:43:38: Time Access 1 TAAC                            :0xe
14:43:38: Time Access 2 NSAC*100                        :0x0
14:43:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:38: Card Command Classess CCC                     :0x5b5
14:43:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:38: DSR(driver stage register)  DSR_IMP           :0x0
14:43:38: Reserv2                                       :0x0
14:43:38: Device Size C_SIZE                            :0xedc8
14:43:38: Reserv3                                       :0x0
14:43:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:38: Reserv4                                       :0x0
14:43:38: Write Speed Factor R2W_FACTOR                 :0x2
14:43:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:38: FILE_FORMAT_GRP                               :0x0
14:43:38: COPY flag                                     :0x1
14:43:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:38: File_Format                                   :0x0
14:43:38: CRC                                           :0x0
14:43:38: ####CSD Registe Values####  

14:43:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:38: [GetSCRRegisterEntry] Passed
14:43:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:38: Data_Status_After Erases          : 0
14:43:38: CPRM Security Support             : No Security
14:43:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:38: Spec. Version                     : Version 3.0X
14:43:38: Extended Security Support         : Extended_Security_Not_Supported
14:43:38: Command Support                   : COMMAND_SUPPORT
14:43:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06138840>) , Command count = 5391 ] 
14:43:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061325A0>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 5392 ] 
14:43:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:38: [ SetBusWidth(0x4) , Command count = 5393 ] 
14:43:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138570>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5394 ] 
14:43:38: Protected Area Size 0x28000
14:43:38: Bus Width           2
14:43:38: Secure Mode         0
14:43:38: Speed  Class        4
14:43:38: Perf Move           0
14:43:38: Au Size             9
14:43:38: Erase Size          15
14:43:38: Erase Timeout       1
14:43:38: Erase offset        1
14:43:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5395 ] 
14:43:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:38: Host Frequency set to 100000 KHz
14:43:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:38: ####CSD Registe 2.0 Values####
14:43:38: CSD_STRUCTURE                                 :0x1
14:43:38: Reserv1                                       :0x0
14:43:38: Time Access 1 TAAC                            :0xe
14:43:38: Time Access 2 NSAC*100                        :0x0
14:43:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:38: Card Command Classess CCC                     :0x5b5
14:43:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:38: DSR(driver stage register)  DSR_IMP           :0x0
14:43:38: Reserv2                                       :0x0
14:43:38: Device Size C_SIZE                            :0xedc8
14:43:38: Reserv3                                       :0x0
14:43:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:38: Reserv4                                       :0x0
14:43:38: Write Speed Factor R2W_FACTOR                 :0x2
14:43:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:38: FILE_FORMAT_GRP                               :0x0
14:43:38: COPY flag                                     :0x1
14:43:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:38: File_Format                                   :0x0
14:43:38: CRC                                           :0x0
14:43:38: ####CSD Registe Values####  

14:43:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DB0>, <py_sfcl.CommandDataDefinition object at 0x06138540>) , Command count = 5396 ] 
14:43:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x06138C90>) , Command count = 5397 ] 
14:43:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F050 to EndLba:0x3B6F0D0 with One's Pattern
14:43:38: [ WrLbaNoData(0x3B6F050, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5398 ] 
14:43:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F050 to EndLba:0x3B6F0D0 with One's Pattern 

14:43:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F0D0 to EndLba:0x3B6F150 with One's Pattern
14:43:38: [ WrLbaNoData(0x3B6F0D0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5399 ] 
14:43:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F0D0 to EndLba:0x3B6F150 with One's Pattern 

14:43:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2327B to EndLba:0x2504B with Constant Pattern
14:43:38: [ RdLbaNoData(0x2327B, 0x1DD0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5400 ] 
14:43:38: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2327B to EndLba:0x2504B with Constant Pattern 

14:43:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3814
14:43:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:38: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FDE0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138D80>, <py_sfcl.PySEnhancedCmdData object at 0x06138A50>, <None>) , Command count = 5401 ] 
14:43:38: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:41: Host Frequency set to 25000 KHz
14:43:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129600>, 0x0, True) , Command count = 5402 ] 
14:43:41: [GO18_globalSetVolt]### Host voltage value is set.
14:43:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C9C0>, 0x0, False) , Command count = 5403 ] 
14:43:41: [GO18_globalSetVolt]### Host voltage value is set.
14:43:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5404 ] 
14:43:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5405 ] 
14:43:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5406 ] 
14:43:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329F0>, <py_sfcl.CommandDataDefinition object at 0x06132EA0>) , Command count = 5407 ] 
14:43:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132300>, <py_sfcl.CommandDataDefinition object at 0x06138240>) , Command count = 5408 ] 
14:43:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:41: [ SetCardRCA(0x1, 0xD555) , Command count = 5409 ] 
14:43:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:41: Host Frequency set to 25000 KHz
14:43:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:41: ####CSD Registe 2.0 Values####
14:43:41: CSD_STRUCTURE                                 :0x1
14:43:41: Reserv1                                       :0x0
14:43:41: Time Access 1 TAAC                            :0xe
14:43:41: Time Access 2 NSAC*100                        :0x0
14:43:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:41: Card Command Classess CCC                     :0x5b5
14:43:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:41: DSR(driver stage register)  DSR_IMP           :0x0
14:43:41: Reserv2                                       :0x0
14:43:41: Device Size C_SIZE                            :0xedc8
14:43:41: Reserv3                                       :0x0
14:43:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:41: Reserv4                                       :0x0
14:43:41: Write Speed Factor R2W_FACTOR                 :0x2
14:43:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:41: FILE_FORMAT_GRP                               :0x0
14:43:41: COPY flag                                     :0x1
14:43:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:41: File_Format                                   :0x0
14:43:41: CRC                                           :0x0
14:43:41: ####CSD Registe Values####  

14:43:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:41: [GetSCRRegisterEntry] Passed
14:43:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:41: Data_Status_After Erases          : 0
14:43:41: CPRM Security Support             : No Security
14:43:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:41: Spec. Version                     : Version 3.0X
14:43:41: Extended Security Support         : Extended_Security_Not_Supported
14:43:41: Command Support                   : COMMAND_SUPPORT
14:43:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FFC0>, <py_sfcl.CommandDataDefinition object at 0x061383C0>) , Command count = 5410 ] 
14:43:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F600>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 5411 ] 
14:43:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:41: [ SetBusWidth(0x4) , Command count = 5412 ] 
14:43:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138330>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5413 ] 
14:43:41: Protected Area Size 0x28000
14:43:41: Bus Width           2
14:43:41: Secure Mode         0
14:43:41: Speed  Class        4
14:43:41: Perf Move           0
14:43:41: Au Size             9
14:43:41: Erase Size          15
14:43:41: Erase Timeout       1
14:43:41: Erase offset        1
14:43:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5414 ] 
14:43:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:41: Host Frequency set to 100000 KHz
14:43:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:41: ####CSD Registe 2.0 Values####
14:43:41: CSD_STRUCTURE                                 :0x1
14:43:41: Reserv1                                       :0x0
14:43:41: Time Access 1 TAAC                            :0xe
14:43:41: Time Access 2 NSAC*100                        :0x0
14:43:41: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:41: Card Command Classess CCC                     :0x5b5
14:43:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:41: DSR(driver stage register)  DSR_IMP           :0x0
14:43:41: Reserv2                                       :0x0
14:43:41: Device Size C_SIZE                            :0xedc8
14:43:41: Reserv3                                       :0x0
14:43:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:42: Reserv4                                       :0x0
14:43:42: Write Speed Factor R2W_FACTOR                 :0x2
14:43:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:42: FILE_FORMAT_GRP                               :0x0
14:43:42: COPY flag                                     :0x1
14:43:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:42: File_Format                                   :0x0
14:43:42: CRC                                           :0x0
14:43:42: ####CSD Registe Values####  

14:43:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF90>, <py_sfcl.CommandDataDefinition object at 0x052AF420>) , Command count = 5415 ] 
14:43:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323C0>, <py_sfcl.CommandDataDefinition object at 0x061382A0>) , Command count = 5416 ] 
14:43:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED15 to EndLba:0x3B6ED95 with One's Pattern
14:43:42: [ WrLbaNoData(0x3B6ED15, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5417 ] 
14:43:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED15 to EndLba:0x3B6ED95 with One's Pattern 

14:43:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6ED95 to EndLba:0x3B6EE15 with One's Pattern
14:43:42: [ WrLbaNoData(0x3B6ED95, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5418 ] 
14:43:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6ED95 to EndLba:0x3B6EE15 with One's Pattern 

14:43:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2327D to EndLba:0x2504B with Constant Pattern
14:43:42: [ RdLbaNoData(0x2327D, 0x1DCE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5419 ] 
14:43:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2327D to EndLba:0x2504B with Constant Pattern 

14:43:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3813
14:43:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F660>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138210>, <py_sfcl.PySEnhancedCmdData object at 0x06138930>, <None>) , Command count = 5420 ] 
14:43:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:44: Host Frequency set to 25000 KHz
14:43:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:44: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:44: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132810>, 0x0, True) , Command count = 5421 ] 
14:43:44: [GO18_globalSetVolt]### Host voltage value is set.
14:43:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132C00>, 0x0, False) , Command count = 5422 ] 
14:43:44: [GO18_globalSetVolt]### Host voltage value is set.
14:43:44: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5423 ] 
14:43:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5424 ] 
14:43:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:44: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5425 ] 
14:43:44: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x06138990>) , Command count = 5426 ] 
14:43:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB70>, <py_sfcl.CommandDataDefinition object at 0x0613FE10>) , Command count = 5427 ] 
14:43:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:44: [ SetCardRCA(0x1, 0xD555) , Command count = 5428 ] 
14:43:44: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:44: Host Frequency set to 25000 KHz
14:43:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:44: ####CSD Registe 2.0 Values####
14:43:44: CSD_STRUCTURE                                 :0x1
14:43:44: Reserv1                                       :0x0
14:43:44: Time Access 1 TAAC                            :0xe
14:43:44: Time Access 2 NSAC*100                        :0x0
14:43:44: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:44: Card Command Classess CCC                     :0x5b5
14:43:44: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:44: DSR(driver stage register)  DSR_IMP           :0x0
14:43:44: Reserv2                                       :0x0
14:43:44: Device Size C_SIZE                            :0xedc8
14:43:44: Reserv3                                       :0x0
14:43:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:44: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:44: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:44: Reserv4                                       :0x0
14:43:44: Write Speed Factor R2W_FACTOR                 :0x2
14:43:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:44: FILE_FORMAT_GRP                               :0x0
14:43:44: COPY flag                                     :0x1
14:43:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:44: File_Format                                   :0x0
14:43:44: CRC                                           :0x0
14:43:44: ####CSD Registe Values####  

14:43:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:44: [GetSCRRegisterEntry] Passed
14:43:44: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:44: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:44: Data_Status_After Erases          : 0
14:43:44: CPRM Security Support             : No Security
14:43:44: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:44: Spec. Version                     : Version 3.0X
14:43:44: Extended Security Support         : Extended_Security_Not_Supported
14:43:44: Command Support                   : COMMAND_SUPPORT
14:43:44: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x0613F630>) , Command count = 5429 ] 
14:43:44: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132600>, <py_sfcl.CommandDataDefinition object at 0x0613FC00>) , Command count = 5430 ] 
14:43:44: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:44: [ SetBusWidth(0x4) , Command count = 5431 ] 
14:43:44: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:44: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5432 ] 
14:43:44: Protected Area Size 0x28000
14:43:44: Bus Width           2
14:43:44: Secure Mode         0
14:43:44: Speed  Class        4
14:43:44: Perf Move           0
14:43:44: Au Size             9
14:43:44: Erase Size          15
14:43:44: Erase Timeout       1
14:43:44: Erase offset        1
14:43:44: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:44: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:44: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5433 ] 
14:43:44: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:44: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:44: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:44: Host Frequency set to 100000 KHz
14:43:44: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:44: ####CSD Registe 2.0 Values####
14:43:44: CSD_STRUCTURE                                 :0x1
14:43:45: Reserv1                                       :0x0
14:43:45: Time Access 1 TAAC                            :0xe
14:43:45: Time Access 2 NSAC*100                        :0x0
14:43:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:45: Card Command Classess CCC                     :0x5b5
14:43:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:45: DSR(driver stage register)  DSR_IMP           :0x0
14:43:45: Reserv2                                       :0x0
14:43:45: Device Size C_SIZE                            :0xedc8
14:43:45: Reserv3                                       :0x0
14:43:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:45: Reserv4                                       :0x0
14:43:45: Write Speed Factor R2W_FACTOR                 :0x2
14:43:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:45: FILE_FORMAT_GRP                               :0x0
14:43:45: COPY flag                                     :0x1
14:43:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:45: File_Format                                   :0x0
14:43:45: CRC                                           :0x0
14:43:45: ####CSD Registe Values####  

14:43:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1A50>, <py_sfcl.CommandDataDefinition object at 0x06138A20>) , Command count = 5434 ] 
14:43:45: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 5435 ] 
14:43:45: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:45: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EDD to EndLba:0x3B70F5D with One's Pattern
14:43:45: [ WrLbaNoData(0x3B70EDD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5436 ] 
14:43:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EDD to EndLba:0x3B70F5D with One's Pattern 

14:43:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70F5D to EndLba:0x3B70FDD with One's Pattern
14:43:45: [ WrLbaNoData(0x3B70F5D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5437 ] 
14:43:45: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70F5D to EndLba:0x3B70FDD with One's Pattern 

14:43:45: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2327D to EndLba:0x25049 with Constant Pattern
14:43:45: [ RdLbaNoData(0x2327D, 0x1DCC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5438 ] 
14:43:45: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2327D to EndLba:0x25049 with Constant Pattern 

14:43:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3812
14:43:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:45: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F4B0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F6C0>, <None>) , Command count = 5439 ] 
14:43:45: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:45: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:47: Host Frequency set to 25000 KHz
14:43:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:47: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C19C0>, 0x0, True) , Command count = 5440 ] 
14:43:47: [GO18_globalSetVolt]### Host voltage value is set.
14:43:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F120>, 0x0, False) , Command count = 5441 ] 
14:43:47: [GO18_globalSetVolt]### Host voltage value is set.
14:43:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5442 ] 
14:43:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5443 ] 
14:43:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5444 ] 
14:43:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FAB0>, <py_sfcl.CommandDataDefinition object at 0x052C1F90>) , Command count = 5445 ] 
14:43:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0525E180>, <py_sfcl.CommandDataDefinition object at 0x060E34E0>) , Command count = 5446 ] 
14:43:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:48: [ SetCardRCA(0x1, 0xD555) , Command count = 5447 ] 
14:43:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:48: Host Frequency set to 25000 KHz
14:43:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:48: ####CSD Registe 2.0 Values####
14:43:48: CSD_STRUCTURE                                 :0x1
14:43:48: Reserv1                                       :0x0
14:43:48: Time Access 1 TAAC                            :0xe
14:43:48: Time Access 2 NSAC*100                        :0x0
14:43:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:48: Card Command Classess CCC                     :0x5b5
14:43:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:48: DSR(driver stage register)  DSR_IMP           :0x0
14:43:48: Reserv2                                       :0x0
14:43:48: Device Size C_SIZE                            :0xedc8
14:43:48: Reserv3                                       :0x0
14:43:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:48: Reserv4                                       :0x0
14:43:48: Write Speed Factor R2W_FACTOR                 :0x2
14:43:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:48: FILE_FORMAT_GRP                               :0x0
14:43:48: COPY flag                                     :0x1
14:43:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:48: File_Format                                   :0x0
14:43:48: CRC                                           :0x0
14:43:48: ####CSD Registe Values####  

14:43:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:48: [GetSCRRegisterEntry] Passed
14:43:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:48: Data_Status_After Erases          : 0
14:43:48: CPRM Security Support             : No Security
14:43:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:48: Spec. Version                     : Version 3.0X
14:43:48: Extended Security Support         : Extended_Security_Not_Supported
14:43:48: Command Support                   : COMMAND_SUPPORT
14:43:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052577E0>, <py_sfcl.CommandDataDefinition object at 0x06132AE0>) , Command count = 5448 ] 
14:43:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB40>, <py_sfcl.CommandDataDefinition object at 0x052BB4E0>) , Command count = 5449 ] 
14:43:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:48: [ SetBusWidth(0x4) , Command count = 5450 ] 
14:43:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CFC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5451 ] 
14:43:48: Protected Area Size 0x28000
14:43:48: Bus Width           2
14:43:48: Secure Mode         0
14:43:48: Speed  Class        4
14:43:48: Perf Move           0
14:43:48: Au Size             9
14:43:48: Erase Size          15
14:43:48: Erase Timeout       1
14:43:48: Erase offset        1
14:43:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5452 ] 
14:43:48: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:48: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:48: Host Frequency set to 100000 KHz
14:43:48: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:48: ####CSD Registe 2.0 Values####
14:43:48: CSD_STRUCTURE                                 :0x1
14:43:48: Reserv1                                       :0x0
14:43:48: Time Access 1 TAAC                            :0xe
14:43:48: Time Access 2 NSAC*100                        :0x0
14:43:48: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:48: Card Command Classess CCC                     :0x5b5
14:43:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:48: DSR(driver stage register)  DSR_IMP           :0x0
14:43:48: Reserv2                                       :0x0
14:43:48: Device Size C_SIZE                            :0xedc8
14:43:48: Reserv3                                       :0x0
14:43:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:48: Reserv4                                       :0x0
14:43:48: Write Speed Factor R2W_FACTOR                 :0x2
14:43:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:48: FILE_FORMAT_GRP                               :0x0
14:43:48: COPY flag                                     :0x1
14:43:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:48: File_Format                                   :0x0
14:43:48: CRC                                           :0x0
14:43:48: ####CSD Registe Values####  

14:43:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052BB930>, <py_sfcl.CommandDataDefinition object at 0x060E38A0>) , Command count = 5453 ] 
14:43:48: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0518AE70>, <py_sfcl.CommandDataDefinition object at 0x0613F960>) , Command count = 5454 ] 
14:43:48: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:48: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FED0 to EndLba:0x3B6FF50 with One's Pattern
14:43:48: [ WrLbaNoData(0x3B6FED0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5455 ] 
14:43:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FED0 to EndLba:0x3B6FF50 with One's Pattern 

14:43:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FF50 to EndLba:0x3B6FFD0 with One's Pattern
14:43:48: [ WrLbaNoData(0x3B6FF50, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5456 ] 
14:43:48: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FF50 to EndLba:0x3B6FFD0 with One's Pattern 

14:43:48: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2327F to EndLba:0x25049 with Constant Pattern
14:43:48: [ RdLbaNoData(0x2327F, 0x1DCA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5457 ] 
14:43:48: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2327F to EndLba:0x25049 with Constant Pattern 

14:43:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3811
14:43:48: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CE10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F570>, <py_sfcl.PySEnhancedCmdData object at 0x060E3840>, <None>) , Command count = 5458 ] 
14:43:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:51: Host Frequency set to 25000 KHz
14:43:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EED0>, 0x0, True) , Command count = 5459 ] 
14:43:51: [GO18_globalSetVolt]### Host voltage value is set.
14:43:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FA20>, 0x0, False) , Command count = 5460 ] 
14:43:51: [GO18_globalSetVolt]### Host voltage value is set.
14:43:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5461 ] 
14:43:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5462 ] 
14:43:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:51: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5463 ] 
14:43:51: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F240>, <py_sfcl.CommandDataDefinition object at 0x052AFC60>) , Command count = 5464 ] 
14:43:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FB10>, <py_sfcl.CommandDataDefinition object at 0x0611CF00>) , Command count = 5465 ] 
14:43:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:51: [ SetCardRCA(0x1, 0xD555) , Command count = 5466 ] 
14:43:51: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:51: Host Frequency set to 25000 KHz
14:43:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:51: ####CSD Registe 2.0 Values####
14:43:51: CSD_STRUCTURE                                 :0x1
14:43:51: Reserv1                                       :0x0
14:43:51: Time Access 1 TAAC                            :0xe
14:43:51: Time Access 2 NSAC*100                        :0x0
14:43:51: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:51: Card Command Classess CCC                     :0x5b5
14:43:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:51: DSR(driver stage register)  DSR_IMP           :0x0
14:43:51: Reserv2                                       :0x0
14:43:51: Device Size C_SIZE                            :0xedc8
14:43:51: Reserv3                                       :0x0
14:43:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:51: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:51: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:51: Reserv4                                       :0x0
14:43:51: Write Speed Factor R2W_FACTOR                 :0x2
14:43:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:51: FILE_FORMAT_GRP                               :0x0
14:43:51: COPY flag                                     :0x1
14:43:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:51: File_Format                                   :0x0
14:43:51: CRC                                           :0x0
14:43:51: ####CSD Registe Values####  

14:43:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:51: [GetSCRRegisterEntry] Passed
14:43:51: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:51: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:51: Data_Status_After Erases          : 0
14:43:51: CPRM Security Support             : No Security
14:43:51: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:51: Spec. Version                     : Version 3.0X
14:43:51: Extended Security Support         : Extended_Security_Not_Supported
14:43:51: Command Support                   : COMMAND_SUPPORT
14:43:51: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529B4B0>, <py_sfcl.CommandDataDefinition object at 0x06138E70>) , Command count = 5467 ] 
14:43:51: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py_sfcl.CommandDataDefinition object at 0x052C1FC0>) , Command count = 5468 ] 
14:43:51: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:51: [ SetBusWidth(0x4) , Command count = 5469 ] 
14:43:51: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:51: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F3C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5470 ] 
14:43:51: Protected Area Size 0x28000
14:43:51: Bus Width           2
14:43:51: Secure Mode         0
14:43:51: Speed  Class        4
14:43:51: Perf Move           0
14:43:51: Au Size             9
14:43:51: Erase Size          15
14:43:51: Erase Timeout       1
14:43:51: Erase offset        1
14:43:51: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:51: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:51: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5471 ] 
14:43:51: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:51: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:51: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:51: Host Frequency set to 100000 KHz
14:43:51: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:51: ####CSD Registe 2.0 Values####
14:43:51: CSD_STRUCTURE                                 :0x1
14:43:51: Reserv1                                       :0x0
14:43:51: Time Access 1 TAAC                            :0xe
14:43:51: Time Access 2 NSAC*100                        :0x0
14:43:51: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:51: Card Command Classess CCC                     :0x5b5
14:43:51: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:52: DSR(driver stage register)  DSR_IMP           :0x0
14:43:52: Reserv2                                       :0x0
14:43:52: Device Size C_SIZE                            :0xedc8
14:43:52: Reserv3                                       :0x0
14:43:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:52: Reserv4                                       :0x0
14:43:52: Write Speed Factor R2W_FACTOR                 :0x2
14:43:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:52: FILE_FORMAT_GRP                               :0x0
14:43:52: COPY flag                                     :0x1
14:43:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:52: File_Format                                   :0x0
14:43:52: CRC                                           :0x0
14:43:52: ####CSD Registe Values####  

14:43:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F840>, <py_sfcl.CommandDataDefinition object at 0x052BBFC0>) , Command count = 5472 ] 
14:43:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CFC0>, <py_sfcl.CommandDataDefinition object at 0x0611CAE0>) , Command count = 5473 ] 
14:43:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E3F6 to EndLba:0x3B6E476 with One's Pattern
14:43:52: [ WrLbaNoData(0x3B6E3F6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5474 ] 
14:43:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E3F6 to EndLba:0x3B6E476 with One's Pattern 

14:43:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E476 to EndLba:0x3B6E4F6 with One's Pattern
14:43:52: [ WrLbaNoData(0x3B6E476, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5475 ] 
14:43:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E476 to EndLba:0x3B6E4F6 with One's Pattern 

14:43:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:52: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2327F to EndLba:0x25047 with Constant Pattern
14:43:52: [ RdLbaNoData(0x2327F, 0x1DC8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5476 ] 
14:43:52: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2327F to EndLba:0x25047 with Constant Pattern 

14:43:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3810
14:43:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:52: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129A80>, <py_sfcl.PySEnhancedCmdData object at 0x0611C480>, <None>) , Command count = 5477 ] 
14:43:52: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:52: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:54: Host Frequency set to 25000 KHz
14:43:54: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:54: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:54: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C3F0>, 0x0, True) , Command count = 5478 ] 
14:43:54: [GO18_globalSetVolt]### Host voltage value is set.
14:43:54: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:54: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F990>, 0x0, False) , Command count = 5479 ] 
14:43:54: [GO18_globalSetVolt]### Host voltage value is set.
14:43:54: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5480 ] 
14:43:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5481 ] 
14:43:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:54: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5482 ] 
14:43:54: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E37B0>, <py_sfcl.CommandDataDefinition object at 0x060E3690>) , Command count = 5483 ] 
14:43:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CAB0>, <py_sfcl.CommandDataDefinition object at 0x0611C060>) , Command count = 5484 ] 
14:43:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:54: [ SetCardRCA(0x1, 0xD555) , Command count = 5485 ] 
14:43:54: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:54: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:55: Host Frequency set to 25000 KHz
14:43:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:55: ####CSD Registe 2.0 Values####
14:43:55: CSD_STRUCTURE                                 :0x1
14:43:55: Reserv1                                       :0x0
14:43:55: Time Access 1 TAAC                            :0xe
14:43:55: Time Access 2 NSAC*100                        :0x0
14:43:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:55: Card Command Classess CCC                     :0x5b5
14:43:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:55: DSR(driver stage register)  DSR_IMP           :0x0
14:43:55: Reserv2                                       :0x0
14:43:55: Device Size C_SIZE                            :0xedc8
14:43:55: Reserv3                                       :0x0
14:43:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:55: Reserv4                                       :0x0
14:43:55: Write Speed Factor R2W_FACTOR                 :0x2
14:43:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:55: FILE_FORMAT_GRP                               :0x0
14:43:55: COPY flag                                     :0x1
14:43:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:55: File_Format                                   :0x0
14:43:55: CRC                                           :0x0
14:43:55: ####CSD Registe Values####  

14:43:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:55: [GetSCRRegisterEntry] Passed
14:43:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:55: Data_Status_After Erases          : 0
14:43:55: CPRM Security Support             : No Security
14:43:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:55: Spec. Version                     : Version 3.0X
14:43:55: Extended Security Support         : Extended_Security_Not_Supported
14:43:55: Command Support                   : COMMAND_SUPPORT
14:43:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F4E0>, <py_sfcl.CommandDataDefinition object at 0x06138DE0>) , Command count = 5486 ] 
14:43:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F4E0>, <py_sfcl.CommandDataDefinition object at 0x06132D20>) , Command count = 5487 ] 
14:43:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:55: [ SetBusWidth(0x4) , Command count = 5488 ] 
14:43:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061295D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5489 ] 
14:43:55: Protected Area Size 0x28000
14:43:55: Bus Width           2
14:43:55: Secure Mode         0
14:43:55: Speed  Class        4
14:43:55: Perf Move           0
14:43:55: Au Size             9
14:43:55: Erase Size          15
14:43:55: Erase Timeout       1
14:43:55: Erase offset        1
14:43:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5490 ] 
14:43:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:55: Host Frequency set to 100000 KHz
14:43:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:55: ####CSD Registe 2.0 Values####
14:43:55: CSD_STRUCTURE                                 :0x1
14:43:55: Reserv1                                       :0x0
14:43:55: Time Access 1 TAAC                            :0xe
14:43:55: Time Access 2 NSAC*100                        :0x0
14:43:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:55: Card Command Classess CCC                     :0x5b5
14:43:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:55: DSR(driver stage register)  DSR_IMP           :0x0
14:43:55: Reserv2                                       :0x0
14:43:55: Device Size C_SIZE                            :0xedc8
14:43:55: Reserv3                                       :0x0
14:43:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:55: Reserv4                                       :0x0
14:43:55: Write Speed Factor R2W_FACTOR                 :0x2
14:43:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:55: FILE_FORMAT_GRP                               :0x0
14:43:55: COPY flag                                     :0x1
14:43:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:55: File_Format                                   :0x0
14:43:55: CRC                                           :0x0
14:43:55: ####CSD Registe Values####  

14:43:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129E10>, <py_sfcl.CommandDataDefinition object at 0x0613F0C0>) , Command count = 5491 ] 
14:43:55: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 5492 ] 
14:43:55: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:55: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B703C1 to EndLba:0x3B70441 with One's Pattern
14:43:55: [ WrLbaNoData(0x3B703C1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5493 ] 
14:43:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B703C1 to EndLba:0x3B70441 with One's Pattern 

14:43:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70441 to EndLba:0x3B704C1 with One's Pattern
14:43:55: [ WrLbaNoData(0x3B70441, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5494 ] 
14:43:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70441 to EndLba:0x3B704C1 with One's Pattern 

14:43:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23281 to EndLba:0x25047 with Constant Pattern
14:43:55: [ RdLbaNoData(0x23281, 0x1DC6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5495 ] 
14:43:55: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23281 to EndLba:0x25047 with Constant Pattern 

14:43:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3809
14:43:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061291E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C120>, <py_sfcl.PySEnhancedCmdData object at 0x0611C0C0>, <None>) , Command count = 5496 ] 
14:43:55: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:43:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:57: Host Frequency set to 25000 KHz
14:43:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:43:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:43:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129990>, 0x0, True) , Command count = 5497 ] 
14:43:57: [GO18_globalSetVolt]### Host voltage value is set.
14:43:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:43:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129210>, 0x0, False) , Command count = 5498 ] 
14:43:57: [GO18_globalSetVolt]### Host voltage value is set.
14:43:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5499 ] 
14:43:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:43:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5500 ] 
14:43:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:43:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:43:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:43:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:43:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:43:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5501 ] 
14:43:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:43:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:43:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129240>, <py_sfcl.CommandDataDefinition object at 0x0611CC60>) , Command count = 5502 ] 
14:43:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:43:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9F0>, <py_sfcl.CommandDataDefinition object at 0x0611CF30>) , Command count = 5503 ] 
14:43:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:43:58: [ SetCardRCA(0x1, 0xD555) , Command count = 5504 ] 
14:43:58: [DVTCommonLib]### Identification :Idenfication of card completed 

14:43:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:43:58: Host Frequency set to 25000 KHz
14:43:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:43:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:58: ####CSD Registe 2.0 Values####
14:43:58: CSD_STRUCTURE                                 :0x1
14:43:58: Reserv1                                       :0x0
14:43:58: Time Access 1 TAAC                            :0xe
14:43:58: Time Access 2 NSAC*100                        :0x0
14:43:58: Data Transfer Rate TRAN_SPEED                 :0x32
14:43:58: Card Command Classess CCC                     :0x5b5
14:43:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:58: DSR(driver stage register)  DSR_IMP           :0x0
14:43:58: Reserv2                                       :0x0
14:43:58: Device Size C_SIZE                            :0xedc8
14:43:58: Reserv3                                       :0x0
14:43:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:58: Reserv4                                       :0x0
14:43:58: Write Speed Factor R2W_FACTOR                 :0x2
14:43:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:58: FILE_FORMAT_GRP                               :0x0
14:43:58: COPY flag                                     :0x1
14:43:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:58: File_Format                                   :0x0
14:43:58: CRC                                           :0x0
14:43:58: ####CSD Registe Values####  

14:43:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:43:58: [GetSCRRegisterEntry] Passed
14:43:58: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:43:58: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:43:58: Data_Status_After Erases          : 0
14:43:58: CPRM Security Support             : No Security
14:43:58: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:43:58: Spec. Version                     : Version 3.0X
14:43:58: Extended Security Support         : Extended_Security_Not_Supported
14:43:58: Command Support                   : COMMAND_SUPPORT
14:43:58: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:43:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129300>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 5505 ] 
14:43:58: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:43:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611C600>) , Command count = 5506 ] 
14:43:58: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:43:58: [ SetBusWidth(0x4) , Command count = 5507 ] 
14:43:58: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:43:58: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129270>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5508 ] 
14:43:58: Protected Area Size 0x28000
14:43:58: Bus Width           2
14:43:58: Secure Mode         0
14:43:58: Speed  Class        4
14:43:58: Perf Move           0
14:43:58: Au Size             9
14:43:58: Erase Size          15
14:43:58: Erase Timeout       1
14:43:58: Erase offset        1
14:43:58: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:43:58: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:43:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:43:58: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5509 ] 
14:43:58: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:43:58: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:43:58: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:43:58: Host Frequency set to 100000 KHz
14:43:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:43:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:43:58: ####CSD Registe 2.0 Values####
14:43:58: CSD_STRUCTURE                                 :0x1
14:43:58: Reserv1                                       :0x0
14:43:58: Time Access 1 TAAC                            :0xe
14:43:58: Time Access 2 NSAC*100                        :0x0
14:43:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:43:58: Card Command Classess CCC                     :0x5b5
14:43:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:43:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:43:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:43:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:43:58: DSR(driver stage register)  DSR_IMP           :0x0
14:43:58: Reserv2                                       :0x0
14:43:58: Device Size C_SIZE                            :0xedc8
14:43:58: Reserv3                                       :0x0
14:43:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:43:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:43:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:43:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:43:58: Reserv4                                       :0x0
14:43:58: Write Speed Factor R2W_FACTOR                 :0x2
14:43:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:43:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:43:59: FILE_FORMAT_GRP                               :0x0
14:43:59: COPY flag                                     :0x1
14:43:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:43:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:43:59: File_Format                                   :0x0
14:43:59: CRC                                           :0x0
14:43:59: ####CSD Registe Values####  

14:43:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F60>, <py_sfcl.CommandDataDefinition object at 0x061299F0>) , Command count = 5510 ] 
14:43:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:43:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129CF0>) , Command count = 5511 ] 
14:43:59: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:43:59: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:43:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:43:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70CF2 to EndLba:0x3B70D72 with One's Pattern
14:43:59: [ WrLbaNoData(0x3B70CF2, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5512 ] 
14:43:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70CF2 to EndLba:0x3B70D72 with One's Pattern 

14:43:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70D72 to EndLba:0x3B70DF2 with One's Pattern
14:43:59: [ WrLbaNoData(0x3B70D72, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5513 ] 
14:43:59: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70D72 to EndLba:0x3B70DF2 with One's Pattern 

14:43:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:43:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23281 to EndLba:0x25045 with Constant Pattern
14:43:59: [ RdLbaNoData(0x23281, 0x1DC4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5514 ] 
14:43:59: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23281 to EndLba:0x25045 with Constant Pattern 

14:43:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3808
14:43:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:43:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129720>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061290F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129450>, <None>) , Command count = 5515 ] 
14:43:59: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:43:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:01: Host Frequency set to 25000 KHz
14:44:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CE70>, 0x0, True) , Command count = 5516 ] 
14:44:01: [GO18_globalSetVolt]### Host voltage value is set.
14:44:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3570>, 0x0, False) , Command count = 5517 ] 
14:44:01: [GO18_globalSetVolt]### Host voltage value is set.
14:44:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5518 ] 
14:44:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5519 ] 
14:44:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5520 ] 
14:44:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7B0>, <py_sfcl.CommandDataDefinition object at 0x061292D0>) , Command count = 5521 ] 
14:44:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CED0>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 5522 ] 
14:44:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:01: [ SetCardRCA(0x1, 0xD555) , Command count = 5523 ] 
14:44:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:01: Host Frequency set to 25000 KHz
14:44:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:01: ####CSD Registe 2.0 Values####
14:44:01: CSD_STRUCTURE                                 :0x1
14:44:01: Reserv1                                       :0x0
14:44:01: Time Access 1 TAAC                            :0xe
14:44:01: Time Access 2 NSAC*100                        :0x0
14:44:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:01: Card Command Classess CCC                     :0x5b5
14:44:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:01: DSR(driver stage register)  DSR_IMP           :0x0
14:44:01: Reserv2                                       :0x0
14:44:01: Device Size C_SIZE                            :0xedc8
14:44:01: Reserv3                                       :0x0
14:44:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:01: Reserv4                                       :0x0
14:44:01: Write Speed Factor R2W_FACTOR                 :0x2
14:44:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:01: FILE_FORMAT_GRP                               :0x0
14:44:01: COPY flag                                     :0x1
14:44:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:01: File_Format                                   :0x0
14:44:01: CRC                                           :0x0
14:44:01: ####CSD Registe Values####  

14:44:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:01: [GetSCRRegisterEntry] Passed
14:44:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:01: Data_Status_After Erases          : 0
14:44:01: CPRM Security Support             : No Security
14:44:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:01: Spec. Version                     : Version 3.0X
14:44:01: Extended Security Support         : Extended_Security_Not_Supported
14:44:01: Command Support                   : COMMAND_SUPPORT
14:44:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x061452A0>) , Command count = 5524 ] 
14:44:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CA80>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 5525 ] 
14:44:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:01: [ SetBusWidth(0x4) , Command count = 5526 ] 
14:44:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129A20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5527 ] 
14:44:01: Protected Area Size 0x28000
14:44:01: Bus Width           2
14:44:01: Secure Mode         0
14:44:01: Speed  Class        4
14:44:01: Perf Move           0
14:44:01: Au Size             9
14:44:01: Erase Size          15
14:44:01: Erase Timeout       1
14:44:01: Erase offset        1
14:44:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5528 ] 
14:44:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:01: Host Frequency set to 100000 KHz
14:44:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:01: ####CSD Registe 2.0 Values####
14:44:01: CSD_STRUCTURE                                 :0x1
14:44:01: Reserv1                                       :0x0
14:44:01: Time Access 1 TAAC                            :0xe
14:44:01: Time Access 2 NSAC*100                        :0x0
14:44:01: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:01: Card Command Classess CCC                     :0x5b5
14:44:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:02: DSR(driver stage register)  DSR_IMP           :0x0
14:44:02: Reserv2                                       :0x0
14:44:02: Device Size C_SIZE                            :0xedc8
14:44:02: Reserv3                                       :0x0
14:44:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:02: Reserv4                                       :0x0
14:44:02: Write Speed Factor R2W_FACTOR                 :0x2
14:44:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:02: FILE_FORMAT_GRP                               :0x0
14:44:02: COPY flag                                     :0x1
14:44:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:02: File_Format                                   :0x0
14:44:02: CRC                                           :0x0
14:44:02: ####CSD Registe Values####  

14:44:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CCC0>, <py_sfcl.CommandDataDefinition object at 0x06129F00>) , Command count = 5529 ] 
14:44:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB10>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 5530 ] 
14:44:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F586 to EndLba:0x3B6F606 with One's Pattern
14:44:02: [ WrLbaNoData(0x3B6F586, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5531 ] 
14:44:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F586 to EndLba:0x3B6F606 with One's Pattern 

14:44:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F606 to EndLba:0x3B6F686 with One's Pattern
14:44:02: [ WrLbaNoData(0x3B6F606, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5532 ] 
14:44:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F606 to EndLba:0x3B6F686 with One's Pattern 

14:44:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23283 to EndLba:0x25045 with Constant Pattern
14:44:02: [ RdLbaNoData(0x23283, 0x1DC2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5533 ] 
14:44:02: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23283 to EndLba:0x25045 with Constant Pattern 

14:44:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3807
14:44:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:02: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138CC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061293C0>, <py_sfcl.PySEnhancedCmdData object at 0x06129A50>, <None>) , Command count = 5534 ] 
14:44:02: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:02: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:04: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:04: Host Frequency set to 25000 KHz
14:44:04: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:04: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:04: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C930>, 0x0, True) , Command count = 5535 ] 
14:44:04: [GO18_globalSetVolt]### Host voltage value is set.
14:44:04: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:04: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E330>, 0x0, False) , Command count = 5536 ] 
14:44:04: [GO18_globalSetVolt]### Host voltage value is set.
14:44:04: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5537 ] 
14:44:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5538 ] 
14:44:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5539 ] 
14:44:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 5540 ] 
14:44:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298A0>, <py_sfcl.CommandDataDefinition object at 0x061293F0>) , Command count = 5541 ] 
14:44:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:05: [ SetCardRCA(0x1, 0xD555) , Command count = 5542 ] 
14:44:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:05: Host Frequency set to 25000 KHz
14:44:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:05: ####CSD Registe 2.0 Values####
14:44:05: CSD_STRUCTURE                                 :0x1
14:44:05: Reserv1                                       :0x0
14:44:05: Time Access 1 TAAC                            :0xe
14:44:05: Time Access 2 NSAC*100                        :0x0
14:44:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:05: Card Command Classess CCC                     :0x5b5
14:44:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:05: DSR(driver stage register)  DSR_IMP           :0x0
14:44:05: Reserv2                                       :0x0
14:44:05: Device Size C_SIZE                            :0xedc8
14:44:05: Reserv3                                       :0x0
14:44:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:05: Reserv4                                       :0x0
14:44:05: Write Speed Factor R2W_FACTOR                 :0x2
14:44:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:05: FILE_FORMAT_GRP                               :0x0
14:44:05: COPY flag                                     :0x1
14:44:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:05: File_Format                                   :0x0
14:44:05: CRC                                           :0x0
14:44:05: ####CSD Registe Values####  

14:44:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:05: [GetSCRRegisterEntry] Passed
14:44:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:05: Data_Status_After Erases          : 0
14:44:05: CPRM Security Support             : No Security
14:44:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:05: Spec. Version                     : Version 3.0X
14:44:05: Extended Security Support         : Extended_Security_Not_Supported
14:44:05: Command Support                   : COMMAND_SUPPORT
14:44:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FED0>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 5543 ] 
14:44:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E150>, <py_sfcl.CommandDataDefinition object at 0x06138600>) , Command count = 5544 ] 
14:44:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:05: [ SetBusWidth(0x4) , Command count = 5545 ] 
14:44:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5546 ] 
14:44:05: Protected Area Size 0x28000
14:44:05: Bus Width           2
14:44:05: Secure Mode         0
14:44:05: Speed  Class        4
14:44:05: Perf Move           0
14:44:05: Au Size             9
14:44:05: Erase Size          15
14:44:05: Erase Timeout       1
14:44:05: Erase offset        1
14:44:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5547 ] 
14:44:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:05: Host Frequency set to 100000 KHz
14:44:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:05: ####CSD Registe 2.0 Values####
14:44:05: CSD_STRUCTURE                                 :0x1
14:44:05: Reserv1                                       :0x0
14:44:05: Time Access 1 TAAC                            :0xe
14:44:05: Time Access 2 NSAC*100                        :0x0
14:44:05: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:05: Card Command Classess CCC                     :0x5b5
14:44:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:05: DSR(driver stage register)  DSR_IMP           :0x0
14:44:05: Reserv2                                       :0x0
14:44:05: Device Size C_SIZE                            :0xedc8
14:44:05: Reserv3                                       :0x0
14:44:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:05: Reserv4                                       :0x0
14:44:05: Write Speed Factor R2W_FACTOR                 :0x2
14:44:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:05: FILE_FORMAT_GRP                               :0x0
14:44:05: COPY flag                                     :0x1
14:44:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:05: File_Format                                   :0x0
14:44:05: CRC                                           :0x0
14:44:05: ####CSD Registe Values####  

14:44:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E930>, <py_sfcl.CommandDataDefinition object at 0x06129D80>) , Command count = 5548 ] 
14:44:05: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06129A20>) , Command count = 5549 ] 
14:44:05: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:05: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E01C to EndLba:0x3B6E09C with One's Pattern
14:44:05: [ WrLbaNoData(0x3B6E01C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5550 ] 
14:44:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E01C to EndLba:0x3B6E09C with One's Pattern 

14:44:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E09C to EndLba:0x3B6E11C with One's Pattern
14:44:05: [ WrLbaNoData(0x3B6E09C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5551 ] 
14:44:05: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E09C to EndLba:0x3B6E11C with One's Pattern 

14:44:05: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23283 to EndLba:0x25043 with Constant Pattern
14:44:05: [ RdLbaNoData(0x23283, 0x1DC0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5552 ] 
14:44:05: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23283 to EndLba:0x25043 with Constant Pattern 

14:44:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3806
14:44:05: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E0F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EA80>, <py_sfcl.PySEnhancedCmdData object at 0x06132090>, <None>) , Command count = 5553 ] 
14:44:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:08: Host Frequency set to 25000 KHz
14:44:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C840>, 0x0, True) , Command count = 5554 ] 
14:44:08: [GO18_globalSetVolt]### Host voltage value is set.
14:44:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E210>, 0x0, False) , Command count = 5555 ] 
14:44:08: [GO18_globalSetVolt]### Host voltage value is set.
14:44:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5556 ] 
14:44:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5557 ] 
14:44:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:08: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5558 ] 
14:44:08: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132060>, <py_sfcl.CommandDataDefinition object at 0x06132780>) , Command count = 5559 ] 
14:44:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F8D0>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 5560 ] 
14:44:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:08: [ SetCardRCA(0x1, 0xD555) , Command count = 5561 ] 
14:44:08: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:08: Host Frequency set to 25000 KHz
14:44:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:08: ####CSD Registe 2.0 Values####
14:44:08: CSD_STRUCTURE                                 :0x1
14:44:08: Reserv1                                       :0x0
14:44:08: Time Access 1 TAAC                            :0xe
14:44:08: Time Access 2 NSAC*100                        :0x0
14:44:08: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:08: Card Command Classess CCC                     :0x5b5
14:44:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:08: DSR(driver stage register)  DSR_IMP           :0x0
14:44:08: Reserv2                                       :0x0
14:44:08: Device Size C_SIZE                            :0xedc8
14:44:08: Reserv3                                       :0x0
14:44:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:08: Reserv4                                       :0x0
14:44:08: Write Speed Factor R2W_FACTOR                 :0x2
14:44:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:08: FILE_FORMAT_GRP                               :0x0
14:44:08: COPY flag                                     :0x1
14:44:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:08: File_Format                                   :0x0
14:44:08: CRC                                           :0x0
14:44:08: ####CSD Registe Values####  

14:44:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:08: [GetSCRRegisterEntry] Passed
14:44:08: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:08: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:08: Data_Status_After Erases          : 0
14:44:08: CPRM Security Support             : No Security
14:44:08: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:08: Spec. Version                     : Version 3.0X
14:44:08: Extended Security Support         : Extended_Security_Not_Supported
14:44:08: Command Support                   : COMMAND_SUPPORT
14:44:08: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x06129F90>) , Command count = 5562 ] 
14:44:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129DB0>, <py_sfcl.CommandDataDefinition object at 0x0612EF60>) , Command count = 5563 ] 
14:44:08: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:08: [ SetBusWidth(0x4) , Command count = 5564 ] 
14:44:08: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:08: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612E4B0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5565 ] 
14:44:08: Protected Area Size 0x28000
14:44:08: Bus Width           2
14:44:08: Secure Mode         0
14:44:08: Speed  Class        4
14:44:08: Perf Move           0
14:44:08: Au Size             9
14:44:08: Erase Size          15
14:44:08: Erase Timeout       1
14:44:08: Erase offset        1
14:44:08: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:08: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:08: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5566 ] 
14:44:08: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:08: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:08: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:08: Host Frequency set to 100000 KHz
14:44:08: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:08: ####CSD Registe 2.0 Values####
14:44:08: CSD_STRUCTURE                                 :0x1
14:44:08: Reserv1                                       :0x0
14:44:08: Time Access 1 TAAC                            :0xe
14:44:08: Time Access 2 NSAC*100                        :0x0
14:44:08: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:08: Card Command Classess CCC                     :0x5b5
14:44:08: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:08: DSR(driver stage register)  DSR_IMP           :0x0
14:44:08: Reserv2                                       :0x0
14:44:08: Device Size C_SIZE                            :0xedc8
14:44:08: Reserv3                                       :0x0
14:44:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:08: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:08: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:08: Reserv4                                       :0x0
14:44:08: Write Speed Factor R2W_FACTOR                 :0x2
14:44:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:09: FILE_FORMAT_GRP                               :0x0
14:44:09: COPY flag                                     :0x1
14:44:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:09: File_Format                                   :0x0
14:44:09: CRC                                           :0x0
14:44:09: ####CSD Registe Values####  

14:44:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061325D0>, <py_sfcl.CommandDataDefinition object at 0x0613FD20>) , Command count = 5567 ] 
14:44:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x0612E390>) , Command count = 5568 ] 
14:44:09: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:09: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DE63 to EndLba:0x3B6DEE3 with One's Pattern
14:44:09: [ WrLbaNoData(0x3B6DE63, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5569 ] 
14:44:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DE63 to EndLba:0x3B6DEE3 with One's Pattern 

14:44:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DEE3 to EndLba:0x3B6DF63 with One's Pattern
14:44:09: [ WrLbaNoData(0x3B6DEE3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5570 ] 
14:44:09: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DEE3 to EndLba:0x3B6DF63 with One's Pattern 

14:44:09: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23285 to EndLba:0x25043 with Constant Pattern
14:44:09: [ RdLbaNoData(0x23285, 0x1DBE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5571 ] 
14:44:09: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23285 to EndLba:0x25043 with Constant Pattern 

14:44:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3805
14:44:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:09: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EDE0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E4E0>, <None>) , Command count = 5572 ] 
14:44:09: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:09: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:11: Host Frequency set to 25000 KHz
14:44:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:11: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:11: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E5A0>, 0x0, True) , Command count = 5573 ] 
14:44:11: [GO18_globalSetVolt]### Host voltage value is set.
14:44:11: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:11: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606FB10>, 0x0, False) , Command count = 5574 ] 
14:44:11: [GO18_globalSetVolt]### Host voltage value is set.
14:44:11: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5575 ] 
14:44:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5576 ] 
14:44:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:11: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5577 ] 
14:44:11: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138480>, <py_sfcl.CommandDataDefinition object at 0x0612EF00>) , Command count = 5578 ] 
14:44:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298D0>, <py_sfcl.CommandDataDefinition object at 0x0613FB40>) , Command count = 5579 ] 
14:44:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:11: [ SetCardRCA(0x1, 0xD555) , Command count = 5580 ] 
14:44:11: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:11: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:11: Host Frequency set to 25000 KHz
14:44:11: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:11: ####CSD Registe 2.0 Values####
14:44:11: CSD_STRUCTURE                                 :0x1
14:44:11: Reserv1                                       :0x0
14:44:11: Time Access 1 TAAC                            :0xe
14:44:11: Time Access 2 NSAC*100                        :0x0
14:44:11: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:11: Card Command Classess CCC                     :0x5b5
14:44:11: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:11: DSR(driver stage register)  DSR_IMP           :0x0
14:44:11: Reserv2                                       :0x0
14:44:11: Device Size C_SIZE                            :0xedc8
14:44:11: Reserv3                                       :0x0
14:44:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:11: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:11: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:11: Reserv4                                       :0x0
14:44:11: Write Speed Factor R2W_FACTOR                 :0x2
14:44:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:11: FILE_FORMAT_GRP                               :0x0
14:44:11: COPY flag                                     :0x1
14:44:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:11: File_Format                                   :0x0
14:44:11: CRC                                           :0x0
14:44:11: ####CSD Registe Values####  

14:44:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:11: [GetSCRRegisterEntry] Passed
14:44:11: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:11: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:11: Data_Status_After Erases          : 0
14:44:11: CPRM Security Support             : No Security
14:44:11: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:11: Spec. Version                     : Version 3.0X
14:44:11: Extended Security Support         : Extended_Security_Not_Supported
14:44:11: Command Support                   : COMMAND_SUPPORT
14:44:11: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D80>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 5581 ] 
14:44:11: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129ED0>, <py_sfcl.CommandDataDefinition object at 0x061327B0>) , Command count = 5582 ] 
14:44:11: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:11: [ SetBusWidth(0x4) , Command count = 5583 ] 
14:44:11: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:11: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5584 ] 
14:44:11: Protected Area Size 0x28000
14:44:11: Bus Width           2
14:44:11: Secure Mode         0
14:44:11: Speed  Class        4
14:44:11: Perf Move           0
14:44:11: Au Size             9
14:44:11: Erase Size          15
14:44:11: Erase Timeout       1
14:44:11: Erase offset        1
14:44:11: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:11: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:11: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:11: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5585 ] 
14:44:11: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:12: Host Frequency set to 100000 KHz
14:44:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:12: ####CSD Registe 2.0 Values####
14:44:12: CSD_STRUCTURE                                 :0x1
14:44:12: Reserv1                                       :0x0
14:44:12: Time Access 1 TAAC                            :0xe
14:44:12: Time Access 2 NSAC*100                        :0x0
14:44:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:12: Card Command Classess CCC                     :0x5b5
14:44:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:12: DSR(driver stage register)  DSR_IMP           :0x0
14:44:12: Reserv2                                       :0x0
14:44:12: Device Size C_SIZE                            :0xedc8
14:44:12: Reserv3                                       :0x0
14:44:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:12: Reserv4                                       :0x0
14:44:12: Write Speed Factor R2W_FACTOR                 :0x2
14:44:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:12: FILE_FORMAT_GRP                               :0x0
14:44:12: COPY flag                                     :0x1
14:44:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:12: File_Format                                   :0x0
14:44:12: CRC                                           :0x0
14:44:12: ####CSD Registe Values####  

14:44:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE10>, <py_sfcl.CommandDataDefinition object at 0x0612E450>) , Command count = 5586 ] 
14:44:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x06132990>) , Command count = 5587 ] 
14:44:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DF7C to EndLba:0x3B6DFFC with One's Pattern
14:44:12: [ WrLbaNoData(0x3B6DF7C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5588 ] 
14:44:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DF7C to EndLba:0x3B6DFFC with One's Pattern 

14:44:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DFFC to EndLba:0x3B6E07C with One's Pattern
14:44:12: [ WrLbaNoData(0x3B6DFFC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5589 ] 
14:44:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DFFC to EndLba:0x3B6E07C with One's Pattern 

14:44:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23285 to EndLba:0x25041 with Constant Pattern
14:44:12: [ RdLbaNoData(0x23285, 0x1DBC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5590 ] 
14:44:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23285 to EndLba:0x25041 with Constant Pattern 

14:44:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3804
14:44:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:12: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FD50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132660>, <py_sfcl.PySEnhancedCmdData object at 0x06132450>, <None>) , Command count = 5591 ] 
14:44:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:12: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:14: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:14: Host Frequency set to 25000 KHz
14:44:14: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:14: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:14: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129150>, 0x0, True) , Command count = 5592 ] 
14:44:14: [GO18_globalSetVolt]### Host voltage value is set.
14:44:14: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:14: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129360>, 0x0, False) , Command count = 5593 ] 
14:44:14: [GO18_globalSetVolt]### Host voltage value is set.
14:44:14: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5594 ] 
14:44:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5595 ] 
14:44:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5596 ] 
14:44:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129FC0>, <py_sfcl.CommandDataDefinition object at 0x06132420>) , Command count = 5597 ] 
14:44:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB10>, <py_sfcl.CommandDataDefinition object at 0x0612E3F0>) , Command count = 5598 ] 
14:44:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:15: [ SetCardRCA(0x1, 0xD555) , Command count = 5599 ] 
14:44:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:15: Host Frequency set to 25000 KHz
14:44:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:15: ####CSD Registe 2.0 Values####
14:44:15: CSD_STRUCTURE                                 :0x1
14:44:15: Reserv1                                       :0x0
14:44:15: Time Access 1 TAAC                            :0xe
14:44:15: Time Access 2 NSAC*100                        :0x0
14:44:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:15: Card Command Classess CCC                     :0x5b5
14:44:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:15: DSR(driver stage register)  DSR_IMP           :0x0
14:44:15: Reserv2                                       :0x0
14:44:15: Device Size C_SIZE                            :0xedc8
14:44:15: Reserv3                                       :0x0
14:44:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:15: Reserv4                                       :0x0
14:44:15: Write Speed Factor R2W_FACTOR                 :0x2
14:44:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:15: FILE_FORMAT_GRP                               :0x0
14:44:15: COPY flag                                     :0x1
14:44:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:15: File_Format                                   :0x0
14:44:15: CRC                                           :0x0
14:44:15: ####CSD Registe Values####  

14:44:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:15: [GetSCRRegisterEntry] Passed
14:44:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:15: Data_Status_After Erases          : 0
14:44:15: CPRM Security Support             : No Security
14:44:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:15: Spec. Version                     : Version 3.0X
14:44:15: Extended Security Support         : Extended_Security_Not_Supported
14:44:15: Command Support                   : COMMAND_SUPPORT
14:44:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC30>, <py_sfcl.CommandDataDefinition object at 0x0612E990>) , Command count = 5600 ] 
14:44:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E630>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 5601 ] 
14:44:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:15: [ SetBusWidth(0x4) , Command count = 5602 ] 
14:44:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061320C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5603 ] 
14:44:15: Protected Area Size 0x28000
14:44:15: Bus Width           2
14:44:15: Secure Mode         0
14:44:15: Speed  Class        4
14:44:15: Perf Move           0
14:44:15: Au Size             9
14:44:15: Erase Size          15
14:44:15: Erase Timeout       1
14:44:15: Erase offset        1
14:44:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5604 ] 
14:44:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:15: Host Frequency set to 100000 KHz
14:44:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:15: ####CSD Registe 2.0 Values####
14:44:15: CSD_STRUCTURE                                 :0x1
14:44:15: Reserv1                                       :0x0
14:44:15: Time Access 1 TAAC                            :0xe
14:44:15: Time Access 2 NSAC*100                        :0x0
14:44:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:15: Card Command Classess CCC                     :0x5b5
14:44:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:15: DSR(driver stage register)  DSR_IMP           :0x0
14:44:15: Reserv2                                       :0x0
14:44:15: Device Size C_SIZE                            :0xedc8
14:44:15: Reserv3                                       :0x0
14:44:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:15: Reserv4                                       :0x0
14:44:15: Write Speed Factor R2W_FACTOR                 :0x2
14:44:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:15: FILE_FORMAT_GRP                               :0x0
14:44:15: COPY flag                                     :0x1
14:44:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:15: File_Format                                   :0x0
14:44:15: CRC                                           :0x0
14:44:15: ####CSD Registe Values####  

14:44:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E35A0>, <py_sfcl.CommandDataDefinition object at 0x061328A0>) , Command count = 5605 ] 
14:44:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x06132A80>) , Command count = 5606 ] 
14:44:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71125 to EndLba:0x3B711A5 with One's Pattern
14:44:15: [ WrLbaNoData(0x3B71125, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5607 ] 
14:44:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71125 to EndLba:0x3B711A5 with One's Pattern 

14:44:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B711A5 to EndLba:0x3B71225 with One's Pattern
14:44:15: [ WrLbaNoData(0x3B711A5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5608 ] 
14:44:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B711A5 to EndLba:0x3B71225 with One's Pattern 

14:44:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23287 to EndLba:0x25041 with Constant Pattern
14:44:15: [ RdLbaNoData(0x23287, 0x1DBA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5609 ] 
14:44:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23287 to EndLba:0x25041 with Constant Pattern 

14:44:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3803
14:44:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:16: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EB40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138420>, <py_sfcl.PySEnhancedCmdData object at 0x06132330>, <None>) , Command count = 5610 ] 
14:44:16: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:16: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:18: Host Frequency set to 25000 KHz
14:44:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:18: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:18: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EB70>, 0x0, True) , Command count = 5611 ] 
14:44:18: [GO18_globalSetVolt]### Host voltage value is set.
14:44:18: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:18: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612ED50>, 0x0, False) , Command count = 5612 ] 
14:44:18: [GO18_globalSetVolt]### Host voltage value is set.
14:44:18: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5613 ] 
14:44:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5614 ] 
14:44:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:18: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5615 ] 
14:44:18: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 5616 ] 
14:44:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061388D0>, <py_sfcl.CommandDataDefinition object at 0x061323F0>) , Command count = 5617 ] 
14:44:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:18: [ SetCardRCA(0x1, 0xD555) , Command count = 5618 ] 
14:44:18: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:18: Host Frequency set to 25000 KHz
14:44:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:18: ####CSD Registe 2.0 Values####
14:44:18: CSD_STRUCTURE                                 :0x1
14:44:18: Reserv1                                       :0x0
14:44:18: Time Access 1 TAAC                            :0xe
14:44:18: Time Access 2 NSAC*100                        :0x0
14:44:18: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:18: Card Command Classess CCC                     :0x5b5
14:44:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:18: DSR(driver stage register)  DSR_IMP           :0x0
14:44:18: Reserv2                                       :0x0
14:44:18: Device Size C_SIZE                            :0xedc8
14:44:18: Reserv3                                       :0x0
14:44:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:18: Reserv4                                       :0x0
14:44:18: Write Speed Factor R2W_FACTOR                 :0x2
14:44:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:18: FILE_FORMAT_GRP                               :0x0
14:44:18: COPY flag                                     :0x1
14:44:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:18: File_Format                                   :0x0
14:44:18: CRC                                           :0x0
14:44:18: ####CSD Registe Values####  

14:44:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:18: [GetSCRRegisterEntry] Passed
14:44:18: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:18: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:18: Data_Status_After Erases          : 0
14:44:18: CPRM Security Support             : No Security
14:44:18: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:18: Spec. Version                     : Version 3.0X
14:44:18: Extended Security Support         : Extended_Security_Not_Supported
14:44:18: Command Support                   : COMMAND_SUPPORT
14:44:18: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE70>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 5619 ] 
14:44:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B70>, <py_sfcl.CommandDataDefinition object at 0x061384B0>) , Command count = 5620 ] 
14:44:18: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:18: [ SetBusWidth(0x4) , Command count = 5621 ] 
14:44:18: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:18: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5622 ] 
14:44:18: Protected Area Size 0x28000
14:44:18: Bus Width           2
14:44:18: Secure Mode         0
14:44:18: Speed  Class        4
14:44:18: Perf Move           0
14:44:18: Au Size             9
14:44:18: Erase Size          15
14:44:18: Erase Timeout       1
14:44:18: Erase offset        1
14:44:18: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:18: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:18: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5623 ] 
14:44:18: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:18: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:18: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:18: Host Frequency set to 100000 KHz
14:44:18: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:18: ####CSD Registe 2.0 Values####
14:44:18: CSD_STRUCTURE                                 :0x1
14:44:18: Reserv1                                       :0x0
14:44:18: Time Access 1 TAAC                            :0xe
14:44:18: Time Access 2 NSAC*100                        :0x0
14:44:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:18: Card Command Classess CCC                     :0x5b5
14:44:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:18: DSR(driver stage register)  DSR_IMP           :0x0
14:44:18: Reserv2                                       :0x0
14:44:18: Device Size C_SIZE                            :0xedc8
14:44:18: Reserv3                                       :0x0
14:44:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:19: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:19: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:19: Reserv4                                       :0x0
14:44:19: Write Speed Factor R2W_FACTOR                 :0x2
14:44:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:19: FILE_FORMAT_GRP                               :0x0
14:44:19: COPY flag                                     :0x1
14:44:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:19: File_Format                                   :0x0
14:44:19: CRC                                           :0x0
14:44:19: ####CSD Registe Values####  

14:44:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138630>, <py_sfcl.CommandDataDefinition object at 0x06132F90>) , Command count = 5624 ] 
14:44:19: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F30>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 5625 ] 
14:44:19: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:19: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71080 to EndLba:0x3B71100 with One's Pattern
14:44:19: [ WrLbaNoData(0x3B71080, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5626 ] 
14:44:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71080 to EndLba:0x3B71100 with One's Pattern 

14:44:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71100 to EndLba:0x3B71180 with One's Pattern
14:44:19: [ WrLbaNoData(0x3B71100, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5627 ] 
14:44:19: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71100 to EndLba:0x3B71180 with One's Pattern 

14:44:19: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23287 to EndLba:0x2503F with Constant Pattern
14:44:19: [ RdLbaNoData(0x23287, 0x1DB8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5628 ] 
14:44:19: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23287 to EndLba:0x2503F with Constant Pattern 

14:44:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3802
14:44:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138150>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138030>, <py_sfcl.PySEnhancedCmdData object at 0x061383F0>, <None>) , Command count = 5629 ] 
14:44:19: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:21: Host Frequency set to 25000 KHz
14:44:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E870>, 0x0, True) , Command count = 5630 ] 
14:44:21: [GO18_globalSetVolt]### Host voltage value is set.
14:44:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x061380C0>, 0x0, False) , Command count = 5631 ] 
14:44:21: [GO18_globalSetVolt]### Host voltage value is set.
14:44:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5632 ] 
14:44:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5633 ] 
14:44:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5634 ] 
14:44:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061385D0>, <py_sfcl.CommandDataDefinition object at 0x061388A0>) , Command count = 5635 ] 
14:44:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06132840>) , Command count = 5636 ] 
14:44:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:21: [ SetCardRCA(0x1, 0xD555) , Command count = 5637 ] 
14:44:22: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:22: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:22: Host Frequency set to 25000 KHz
14:44:22: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:22: ####CSD Registe 2.0 Values####
14:44:22: CSD_STRUCTURE                                 :0x1
14:44:22: Reserv1                                       :0x0
14:44:22: Time Access 1 TAAC                            :0xe
14:44:22: Time Access 2 NSAC*100                        :0x0
14:44:22: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:22: Card Command Classess CCC                     :0x5b5
14:44:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:22: DSR(driver stage register)  DSR_IMP           :0x0
14:44:22: Reserv2                                       :0x0
14:44:22: Device Size C_SIZE                            :0xedc8
14:44:22: Reserv3                                       :0x0
14:44:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:22: Reserv4                                       :0x0
14:44:22: Write Speed Factor R2W_FACTOR                 :0x2
14:44:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:22: FILE_FORMAT_GRP                               :0x0
14:44:22: COPY flag                                     :0x1
14:44:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:22: File_Format                                   :0x0
14:44:22: CRC                                           :0x0
14:44:22: ####CSD Registe Values####  

14:44:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:22: [GetSCRRegisterEntry] Passed
14:44:22: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:22: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:22: Data_Status_After Erases          : 0
14:44:22: CPRM Security Support             : No Security
14:44:22: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:22: Spec. Version                     : Version 3.0X
14:44:22: Extended Security Support         : Extended_Security_Not_Supported
14:44:22: Command Support                   : COMMAND_SUPPORT
14:44:22: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E810>, <py_sfcl.CommandDataDefinition object at 0x061324B0>) , Command count = 5638 ] 
14:44:22: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138120>) , Command count = 5639 ] 
14:44:22: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:22: [ SetBusWidth(0x4) , Command count = 5640 ] 
14:44:22: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:22: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138C00>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5641 ] 
14:44:22: Protected Area Size 0x28000
14:44:22: Bus Width           2
14:44:22: Secure Mode         0
14:44:22: Speed  Class        4
14:44:22: Perf Move           0
14:44:22: Au Size             9
14:44:22: Erase Size          15
14:44:22: Erase Timeout       1
14:44:22: Erase offset        1
14:44:22: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:22: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:22: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5642 ] 
14:44:22: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:22: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:22: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:22: Host Frequency set to 100000 KHz
14:44:22: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:22: ####CSD Registe 2.0 Values####
14:44:22: CSD_STRUCTURE                                 :0x1
14:44:22: Reserv1                                       :0x0
14:44:22: Time Access 1 TAAC                            :0xe
14:44:22: Time Access 2 NSAC*100                        :0x0
14:44:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:22: Card Command Classess CCC                     :0x5b5
14:44:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:22: DSR(driver stage register)  DSR_IMP           :0x0
14:44:22: Reserv2                                       :0x0
14:44:22: Device Size C_SIZE                            :0xedc8
14:44:22: Reserv3                                       :0x0
14:44:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:22: Reserv4                                       :0x0
14:44:22: Write Speed Factor R2W_FACTOR                 :0x2
14:44:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:22: FILE_FORMAT_GRP                               :0x0
14:44:22: COPY flag                                     :0x1
14:44:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:22: File_Format                                   :0x0
14:44:22: CRC                                           :0x0
14:44:22: ####CSD Registe Values####  

14:44:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06132B40>) , Command count = 5643 ] 
14:44:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x06138FC0>) , Command count = 5644 ] 
14:44:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D978 to EndLba:0x3B6D9F8 with One's Pattern
14:44:22: [ WrLbaNoData(0x3B6D978, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5645 ] 
14:44:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D978 to EndLba:0x3B6D9F8 with One's Pattern 

14:44:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D9F8 to EndLba:0x3B6DA78 with One's Pattern
14:44:22: [ WrLbaNoData(0x3B6D9F8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5646 ] 
14:44:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D9F8 to EndLba:0x3B6DA78 with One's Pattern 

14:44:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23289 to EndLba:0x2503F with Constant Pattern
14:44:22: [ RdLbaNoData(0x23289, 0x1DB6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5647 ] 
14:44:22: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23289 to EndLba:0x2503F with Constant Pattern 

14:44:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3801
14:44:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132DB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138540>, <py_sfcl.PySEnhancedCmdData object at 0x06138660>, <None>) , Command count = 5648 ] 
14:44:22: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:22: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:24: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:24: Host Frequency set to 25000 KHz
14:44:24: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:24: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:24: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129BD0>, 0x0, True) , Command count = 5649 ] 
14:44:24: [GO18_globalSetVolt]### Host voltage value is set.
14:44:24: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:24: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138720>, 0x0, False) , Command count = 5650 ] 
14:44:24: [GO18_globalSetVolt]### Host voltage value is set.
14:44:24: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5651 ] 
14:44:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5652 ] 
14:44:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5653 ] 
14:44:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129600>, <py_sfcl.CommandDataDefinition object at 0x06138960>) , Command count = 5654 ] 
14:44:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132BA0>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 5655 ] 
14:44:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:25: [ SetCardRCA(0x1, 0xD555) , Command count = 5656 ] 
14:44:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:25: Host Frequency set to 25000 KHz
14:44:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:25: ####CSD Registe 2.0 Values####
14:44:25: CSD_STRUCTURE                                 :0x1
14:44:25: Reserv1                                       :0x0
14:44:25: Time Access 1 TAAC                            :0xe
14:44:25: Time Access 2 NSAC*100                        :0x0
14:44:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:25: Card Command Classess CCC                     :0x5b5
14:44:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:25: DSR(driver stage register)  DSR_IMP           :0x0
14:44:25: Reserv2                                       :0x0
14:44:25: Device Size C_SIZE                            :0xedc8
14:44:25: Reserv3                                       :0x0
14:44:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:25: Reserv4                                       :0x0
14:44:25: Write Speed Factor R2W_FACTOR                 :0x2
14:44:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:25: FILE_FORMAT_GRP                               :0x0
14:44:25: COPY flag                                     :0x1
14:44:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:25: File_Format                                   :0x0
14:44:25: CRC                                           :0x0
14:44:25: ####CSD Registe Values####  

14:44:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:25: [GetSCRRegisterEntry] Passed
14:44:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:25: Data_Status_After Erases          : 0
14:44:25: CPRM Security Support             : No Security
14:44:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:25: Spec. Version                     : Version 3.0X
14:44:25: Extended Security Support         : Extended_Security_Not_Supported
14:44:25: Command Support                   : COMMAND_SUPPORT
14:44:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DE0>, <py_sfcl.CommandDataDefinition object at 0x06145450>) , Command count = 5657 ] 
14:44:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C60>, <py_sfcl.CommandDataDefinition object at 0x06138C90>) , Command count = 5658 ] 
14:44:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:25: [ SetBusWidth(0x4) , Command count = 5659 ] 
14:44:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132EA0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5660 ] 
14:44:25: Protected Area Size 0x28000
14:44:25: Bus Width           2
14:44:25: Secure Mode         0
14:44:25: Speed  Class        4
14:44:25: Perf Move           0
14:44:25: Au Size             9
14:44:25: Erase Size          15
14:44:25: Erase Timeout       1
14:44:25: Erase offset        1
14:44:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5661 ] 
14:44:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:25: Host Frequency set to 100000 KHz
14:44:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:25: ####CSD Registe 2.0 Values####
14:44:25: CSD_STRUCTURE                                 :0x1
14:44:25: Reserv1                                       :0x0
14:44:25: Time Access 1 TAAC                            :0xe
14:44:25: Time Access 2 NSAC*100                        :0x0
14:44:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:25: Card Command Classess CCC                     :0x5b5
14:44:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:25: DSR(driver stage register)  DSR_IMP           :0x0
14:44:25: Reserv2                                       :0x0
14:44:25: Device Size C_SIZE                            :0xedc8
14:44:25: Reserv3                                       :0x0
14:44:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:25: Reserv4                                       :0x0
14:44:25: Write Speed Factor R2W_FACTOR                 :0x2
14:44:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:25: FILE_FORMAT_GRP                               :0x0
14:44:25: COPY flag                                     :0x1
14:44:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:25: File_Format                                   :0x0
14:44:25: CRC                                           :0x0
14:44:25: ####CSD Registe Values####  

14:44:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FFC0>, <py_sfcl.CommandDataDefinition object at 0x061383C0>) , Command count = 5662 ] 
14:44:25: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x06138C00>) , Command count = 5663 ] 
14:44:25: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:25: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7015C to EndLba:0x3B701DC with One's Pattern
14:44:25: [ WrLbaNoData(0x3B7015C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5664 ] 
14:44:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7015C to EndLba:0x3B701DC with One's Pattern 

14:44:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B701DC to EndLba:0x3B7025C with One's Pattern
14:44:25: [ WrLbaNoData(0x3B701DC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5665 ] 
14:44:25: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B701DC to EndLba:0x3B7025C with One's Pattern 

14:44:25: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:25: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23289 to EndLba:0x2503D with Constant Pattern
14:44:26: [ RdLbaNoData(0x23289, 0x1DB4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5666 ] 
14:44:26: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23289 to EndLba:0x2503D with Constant Pattern 

14:44:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3800
14:44:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF90>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052AF420>, <py_sfcl.PySEnhancedCmdData object at 0x06138F60>, <None>) , Command count = 5667 ] 
14:44:26: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:26: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:28: Host Frequency set to 25000 KHz
14:44:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:28: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:28: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132900>, 0x0, True) , Command count = 5668 ] 
14:44:28: [GO18_globalSetVolt]### Host voltage value is set.
14:44:28: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x061386F0>, 0x0, False) , Command count = 5669 ] 
14:44:28: [GO18_globalSetVolt]### Host voltage value is set.
14:44:28: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5670 ] 
14:44:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5671 ] 
14:44:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:28: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5672 ] 
14:44:28: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132810>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 5673 ] 
14:44:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x06138D80>) , Command count = 5674 ] 
14:44:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:28: [ SetCardRCA(0x1, 0xD555) , Command count = 5675 ] 
14:44:28: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:28: Host Frequency set to 25000 KHz
14:44:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:28: ####CSD Registe 2.0 Values####
14:44:28: CSD_STRUCTURE                                 :0x1
14:44:28: Reserv1                                       :0x0
14:44:28: Time Access 1 TAAC                            :0xe
14:44:28: Time Access 2 NSAC*100                        :0x0
14:44:28: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:28: Card Command Classess CCC                     :0x5b5
14:44:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:28: DSR(driver stage register)  DSR_IMP           :0x0
14:44:28: Reserv2                                       :0x0
14:44:28: Device Size C_SIZE                            :0xedc8
14:44:28: Reserv3                                       :0x0
14:44:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:28: Reserv4                                       :0x0
14:44:28: Write Speed Factor R2W_FACTOR                 :0x2
14:44:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:28: FILE_FORMAT_GRP                               :0x0
14:44:28: COPY flag                                     :0x1
14:44:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:28: File_Format                                   :0x0
14:44:28: CRC                                           :0x0
14:44:28: ####CSD Registe Values####  

14:44:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:28: [GetSCRRegisterEntry] Passed
14:44:28: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:28: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:28: Data_Status_After Erases          : 0
14:44:28: CPRM Security Support             : No Security
14:44:28: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:28: Spec. Version                     : Version 3.0X
14:44:28: Extended Security Support         : Extended_Security_Not_Supported
14:44:28: Command Support                   : COMMAND_SUPPORT
14:44:28: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061386C0>, <py_sfcl.CommandDataDefinition object at 0x06145060>) , Command count = 5676 ] 
14:44:28: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061323C0>, <py_sfcl.CommandDataDefinition object at 0x061382A0>) , Command count = 5677 ] 
14:44:28: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:28: [ SetBusWidth(0x4) , Command count = 5678 ] 
14:44:28: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:28: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5679 ] 
14:44:28: Protected Area Size 0x28000
14:44:28: Bus Width           2
14:44:28: Secure Mode         0
14:44:28: Speed  Class        4
14:44:28: Perf Move           0
14:44:28: Au Size             9
14:44:28: Erase Size          15
14:44:28: Erase Timeout       1
14:44:28: Erase offset        1
14:44:28: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:28: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:28: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5680 ] 
14:44:28: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:28: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:28: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:28: Host Frequency set to 100000 KHz
14:44:28: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:28: ####CSD Registe 2.0 Values####
14:44:28: CSD_STRUCTURE                                 :0x1
14:44:28: Reserv1                                       :0x0
14:44:28: Time Access 1 TAAC                            :0xe
14:44:28: Time Access 2 NSAC*100                        :0x0
14:44:28: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:28: Card Command Classess CCC                     :0x5b5
14:44:28: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:28: DSR(driver stage register)  DSR_IMP           :0x0
14:44:28: Reserv2                                       :0x0
14:44:28: Device Size C_SIZE                            :0xedc8
14:44:28: Reserv3                                       :0x0
14:44:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:28: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:28: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:28: Reserv4                                       :0x0
14:44:28: Write Speed Factor R2W_FACTOR                 :0x2
14:44:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:29: FILE_FORMAT_GRP                               :0x0
14:44:29: COPY flag                                     :0x1
14:44:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:29: File_Format                                   :0x0
14:44:29: CRC                                           :0x0
14:44:29: ####CSD Registe Values####  

14:44:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3E40>, <py_sfcl.CommandDataDefinition object at 0x0613F630>) , Command count = 5681 ] 
14:44:29: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3AE0>, <py_sfcl.CommandDataDefinition object at 0x0613FB70>) , Command count = 5682 ] 
14:44:29: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:29: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71431 to EndLba:0x3B714B1 with One's Pattern
14:44:29: [ WrLbaNoData(0x3B71431, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5683 ] 
14:44:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71431 to EndLba:0x3B714B1 with One's Pattern 

14:44:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B714B1 to EndLba:0x3B71531 with One's Pattern
14:44:29: [ WrLbaNoData(0x3B714B1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5684 ] 
14:44:29: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B714B1 to EndLba:0x3B71531 with One's Pattern 

14:44:29: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:29: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2328B to EndLba:0x2503D with Constant Pattern
14:44:29: [ RdLbaNoData(0x2328B, 0x1DB2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5685 ] 
14:44:29: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2328B to EndLba:0x2503D with Constant Pattern 

14:44:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3799
14:44:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:29: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1A50>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FC00>, <py_sfcl.PySEnhancedCmdData object at 0x06138A20>, <None>) , Command count = 5686 ] 
14:44:29: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:29: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:31: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:31: Host Frequency set to 25000 KHz
14:44:31: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:31: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:31: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F420>, 0x0, True) , Command count = 5687 ] 
14:44:31: [GO18_globalSetVolt]### Host voltage value is set.
14:44:31: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:31: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F1B0>, 0x0, False) , Command count = 5688 ] 
14:44:31: [GO18_globalSetVolt]### Host voltage value is set.
14:44:31: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5689 ] 
14:44:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5690 ] 
14:44:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:32: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5691 ] 
14:44:32: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19C0>, <py_sfcl.CommandDataDefinition object at 0x0613F180>) , Command count = 5692 ] 
14:44:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x06138810>) , Command count = 5693 ] 
14:44:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:32: [ SetCardRCA(0x1, 0xD555) , Command count = 5694 ] 
14:44:32: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:32: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:32: Host Frequency set to 25000 KHz
14:44:32: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:32: ####CSD Registe 2.0 Values####
14:44:32: CSD_STRUCTURE                                 :0x1
14:44:32: Reserv1                                       :0x0
14:44:32: Time Access 1 TAAC                            :0xe
14:44:32: Time Access 2 NSAC*100                        :0x0
14:44:32: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:32: Card Command Classess CCC                     :0x5b5
14:44:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:32: DSR(driver stage register)  DSR_IMP           :0x0
14:44:32: Reserv2                                       :0x0
14:44:32: Device Size C_SIZE                            :0xedc8
14:44:32: Reserv3                                       :0x0
14:44:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:32: Reserv4                                       :0x0
14:44:32: Write Speed Factor R2W_FACTOR                 :0x2
14:44:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:32: FILE_FORMAT_GRP                               :0x0
14:44:32: COPY flag                                     :0x1
14:44:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:32: File_Format                                   :0x0
14:44:32: CRC                                           :0x0
14:44:32: ####CSD Registe Values####  

14:44:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:32: [GetSCRRegisterEntry] Passed
14:44:32: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:32: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:32: Data_Status_After Erases          : 0
14:44:32: CPRM Security Support             : No Security
14:44:32: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:32: Spec. Version                     : Version 3.0X
14:44:32: Extended Security Support         : Extended_Security_Not_Supported
14:44:32: Command Support                   : COMMAND_SUPPORT
14:44:32: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF270>, <py_sfcl.CommandDataDefinition object at 0x06138210>) , Command count = 5695 ] 
14:44:32: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFCF0>, <py_sfcl.CommandDataDefinition object at 0x06138570>) , Command count = 5696 ] 
14:44:32: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:32: [ SetBusWidth(0x4) , Command count = 5697 ] 
14:44:32: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:32: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052C1F90>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5698 ] 
14:44:32: Protected Area Size 0x28000
14:44:32: Bus Width           2
14:44:32: Secure Mode         0
14:44:32: Speed  Class        4
14:44:32: Perf Move           0
14:44:32: Au Size             9
14:44:32: Erase Size          15
14:44:32: Erase Timeout       1
14:44:32: Erase offset        1
14:44:32: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:32: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:32: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5699 ] 
14:44:32: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:32: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:32: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:32: Host Frequency set to 100000 KHz
14:44:32: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:32: ####CSD Registe 2.0 Values####
14:44:32: CSD_STRUCTURE                                 :0x1
14:44:32: Reserv1                                       :0x0
14:44:32: Time Access 1 TAAC                            :0xe
14:44:32: Time Access 2 NSAC*100                        :0x0
14:44:32: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:32: Card Command Classess CCC                     :0x5b5
14:44:32: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:32: DSR(driver stage register)  DSR_IMP           :0x0
14:44:32: Reserv2                                       :0x0
14:44:32: Device Size C_SIZE                            :0xedc8
14:44:32: Reserv3                                       :0x0
14:44:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:32: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:32: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:32: Reserv4                                       :0x0
14:44:32: Write Speed Factor R2W_FACTOR                 :0x2
14:44:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:32: FILE_FORMAT_GRP                               :0x0
14:44:32: COPY flag                                     :0x1
14:44:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:32: File_Format                                   :0x0
14:44:32: CRC                                           :0x0
14:44:32: ####CSD Registe Values####  

14:44:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052577E0>, <py_sfcl.CommandDataDefinition object at 0x06132AE0>) , Command count = 5700 ] 
14:44:32: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C900>, <py_sfcl.CommandDataDefinition object at 0x0525E180>) , Command count = 5701 ] 
14:44:32: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:32: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EAE9 to EndLba:0x3B6EB69 with One's Pattern
14:44:32: [ WrLbaNoData(0x3B6EAE9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5702 ] 
14:44:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EAE9 to EndLba:0x3B6EB69 with One's Pattern 

14:44:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB69 to EndLba:0x3B6EBE9 with One's Pattern
14:44:32: [ WrLbaNoData(0x3B6EB69, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5703 ] 
14:44:32: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB69 to EndLba:0x3B6EBE9 with One's Pattern 

14:44:32: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2328B to EndLba:0x2503B with Constant Pattern
14:44:32: [ RdLbaNoData(0x2328B, 0x1DB0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5704 ] 
14:44:32: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2328B to EndLba:0x2503B with Constant Pattern 

14:44:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3798
14:44:32: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:33: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E38A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052BB930>, <py_sfcl.PySEnhancedCmdData object at 0x052BB4E0>, <None>) , Command count = 5705 ] 
14:44:33: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:33: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:35: Host Frequency set to 25000 KHz
14:44:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:35: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:35: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFF60>, 0x0, True) , Command count = 5706 ] 
14:44:35: [GO18_globalSetVolt]### Host voltage value is set.
14:44:35: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:35: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AF1B0>, 0x0, False) , Command count = 5707 ] 
14:44:35: [GO18_globalSetVolt]### Host voltage value is set.
14:44:35: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5708 ] 
14:44:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5709 ] 
14:44:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:35: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5710 ] 
14:44:35: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EED0>, <py_sfcl.CommandDataDefinition object at 0x06138510>) , Command count = 5711 ] 
14:44:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F7B0>, <py_sfcl.CommandDataDefinition object at 0x0613F6C0>) , Command count = 5712 ] 
14:44:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:35: [ SetCardRCA(0x1, 0xD555) , Command count = 5713 ] 
14:44:35: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:35: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:35: Host Frequency set to 25000 KHz
14:44:35: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:35: ####CSD Registe 2.0 Values####
14:44:35: CSD_STRUCTURE                                 :0x1
14:44:35: Reserv1                                       :0x0
14:44:35: Time Access 1 TAAC                            :0xe
14:44:35: Time Access 2 NSAC*100                        :0x0
14:44:35: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:35: Card Command Classess CCC                     :0x5b5
14:44:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:35: DSR(driver stage register)  DSR_IMP           :0x0
14:44:35: Reserv2                                       :0x0
14:44:35: Device Size C_SIZE                            :0xedc8
14:44:35: Reserv3                                       :0x0
14:44:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:35: Reserv4                                       :0x0
14:44:35: Write Speed Factor R2W_FACTOR                 :0x2
14:44:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:35: FILE_FORMAT_GRP                               :0x0
14:44:35: COPY flag                                     :0x1
14:44:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:35: File_Format                                   :0x0
14:44:35: CRC                                           :0x0
14:44:35: ####CSD Registe Values####  

14:44:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:35: [GetSCRRegisterEntry] Passed
14:44:35: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:35: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:35: Data_Status_After Erases          : 0
14:44:35: CPRM Security Support             : No Security
14:44:35: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:35: Spec. Version                     : Version 3.0X
14:44:35: Extended Security Support         : Extended_Security_Not_Supported
14:44:35: Command Support                   : COMMAND_SUPPORT
14:44:35: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39C0>, <py_sfcl.CommandDataDefinition object at 0x0613F3F0>) , Command count = 5714 ] 
14:44:35: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0518AE70>, <py_sfcl.CommandDataDefinition object at 0x0613F960>) , Command count = 5715 ] 
14:44:35: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:35: [ SetBusWidth(0x4) , Command count = 5716 ] 
14:44:35: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:35: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x052AFC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5717 ] 
14:44:35: Protected Area Size 0x28000
14:44:35: Bus Width           2
14:44:35: Secure Mode         0
14:44:35: Speed  Class        4
14:44:35: Perf Move           0
14:44:35: Au Size             9
14:44:35: Erase Size          15
14:44:35: Erase Timeout       1
14:44:35: Erase offset        1
14:44:35: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:35: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:35: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5718 ] 
14:44:35: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:35: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:35: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:35: Host Frequency set to 100000 KHz
14:44:35: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:35: ####CSD Registe 2.0 Values####
14:44:35: CSD_STRUCTURE                                 :0x1
14:44:35: Reserv1                                       :0x0
14:44:35: Time Access 1 TAAC                            :0xe
14:44:35: Time Access 2 NSAC*100                        :0x0
14:44:35: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:35: Card Command Classess CCC                     :0x5b5
14:44:35: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:35: DSR(driver stage register)  DSR_IMP           :0x0
14:44:35: Reserv2                                       :0x0
14:44:35: Device Size C_SIZE                            :0xedc8
14:44:35: Reserv3                                       :0x0
14:44:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:35: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:35: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:36: Reserv4                                       :0x0
14:44:36: Write Speed Factor R2W_FACTOR                 :0x2
14:44:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:36: FILE_FORMAT_GRP                               :0x0
14:44:36: COPY flag                                     :0x1
14:44:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:36: File_Format                                   :0x0
14:44:36: CRC                                           :0x0
14:44:36: ####CSD Registe Values####  

14:44:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529B4B0>, <py_sfcl.CommandDataDefinition object at 0x0611CDE0>) , Command count = 5719 ] 
14:44:36: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFEA0>, <py_sfcl.CommandDataDefinition object at 0x06138E70>) , Command count = 5720 ] 
14:44:36: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:36: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E7EB to EndLba:0x3B6E86B with One's Pattern
14:44:36: [ WrLbaNoData(0x3B6E7EB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5721 ] 
14:44:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E7EB to EndLba:0x3B6E86B with One's Pattern 

14:44:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E86B to EndLba:0x3B6E8EB with One's Pattern
14:44:36: [ WrLbaNoData(0x3B6E86B, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5722 ] 
14:44:36: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E86B to EndLba:0x3B6E8EB with One's Pattern 

14:44:36: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2328D to EndLba:0x2503B with Constant Pattern
14:44:36: [ RdLbaNoData(0x2328D, 0x1DAE, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5723 ] 
14:44:36: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2328D to EndLba:0x2503B with Constant Pattern 

14:44:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3797
14:44:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:36: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F840>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x052BBFC0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CB40>, <None>) , Command count = 5724 ] 
14:44:36: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:36: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:38: Host Frequency set to 25000 KHz
14:44:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:38: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:38: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F060>, 0x0, True) , Command count = 5725 ] 
14:44:38: [GO18_globalSetVolt]### Host voltage value is set.
14:44:38: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:38: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F5A0>, 0x0, False) , Command count = 5726 ] 
14:44:38: [GO18_globalSetVolt]### Host voltage value is set.
14:44:38: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5727 ] 
14:44:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5728 ] 
14:44:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:38: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5729 ] 
14:44:38: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3750>, <py_sfcl.CommandDataDefinition object at 0x060E3CF0>) , Command count = 5730 ] 
14:44:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C240>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 5731 ] 
14:44:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:38: [ SetCardRCA(0x1, 0xD555) , Command count = 5732 ] 
14:44:38: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:38: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:38: Host Frequency set to 25000 KHz
14:44:38: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:38: ####CSD Registe 2.0 Values####
14:44:38: CSD_STRUCTURE                                 :0x1
14:44:38: Reserv1                                       :0x0
14:44:38: Time Access 1 TAAC                            :0xe
14:44:38: Time Access 2 NSAC*100                        :0x0
14:44:38: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:38: Card Command Classess CCC                     :0x5b5
14:44:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:38: DSR(driver stage register)  DSR_IMP           :0x0
14:44:38: Reserv2                                       :0x0
14:44:38: Device Size C_SIZE                            :0xedc8
14:44:38: Reserv3                                       :0x0
14:44:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:38: Reserv4                                       :0x0
14:44:38: Write Speed Factor R2W_FACTOR                 :0x2
14:44:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:38: FILE_FORMAT_GRP                               :0x0
14:44:38: COPY flag                                     :0x1
14:44:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:38: File_Format                                   :0x0
14:44:38: CRC                                           :0x0
14:44:38: ####CSD Registe Values####  

14:44:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:38: [GetSCRRegisterEntry] Passed
14:44:38: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:38: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:38: Data_Status_After Erases          : 0
14:44:38: CPRM Security Support             : No Security
14:44:38: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:38: Spec. Version                     : Version 3.0X
14:44:38: Extended Security Support         : Extended_Security_Not_Supported
14:44:38: Command Support                   : COMMAND_SUPPORT
14:44:38: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F030>, <py_sfcl.CommandDataDefinition object at 0x06138E70>) , Command count = 5733 ] 
14:44:38: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F210>, <py_sfcl.CommandDataDefinition object at 0x0611CFC0>) , Command count = 5734 ] 
14:44:38: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:38: [ SetBusWidth(0x4) , Command count = 5735 ] 
14:44:38: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:38: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E3690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5736 ] 
14:44:38: Protected Area Size 0x28000
14:44:38: Bus Width           2
14:44:38: Secure Mode         0
14:44:38: Speed  Class        4
14:44:38: Perf Move           0
14:44:38: Au Size             9
14:44:38: Erase Size          15
14:44:38: Erase Timeout       1
14:44:38: Erase offset        1
14:44:38: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:38: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:38: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5737 ] 
14:44:38: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:38: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:38: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:38: Host Frequency set to 100000 KHz
14:44:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:38: ####CSD Registe 2.0 Values####
14:44:38: CSD_STRUCTURE                                 :0x1
14:44:39: Reserv1                                       :0x0
14:44:39: Time Access 1 TAAC                            :0xe
14:44:39: Time Access 2 NSAC*100                        :0x0
14:44:39: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:39: Card Command Classess CCC                     :0x5b5
14:44:39: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:39: DSR(driver stage register)  DSR_IMP           :0x0
14:44:39: Reserv2                                       :0x0
14:44:39: Device Size C_SIZE                            :0xedc8
14:44:39: Reserv3                                       :0x0
14:44:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:39: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:39: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:39: Reserv4                                       :0x0
14:44:39: Write Speed Factor R2W_FACTOR                 :0x2
14:44:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:39: FILE_FORMAT_GRP                               :0x0
14:44:39: COPY flag                                     :0x1
14:44:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:39: File_Format                                   :0x0
14:44:39: CRC                                           :0x0
14:44:39: ####CSD Registe Values####  

14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F4E0>, <py_sfcl.CommandDataDefinition object at 0x0611C960>) , Command count = 5738 ] 
14:44:39: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F480>, <py_sfcl.CommandDataDefinition object at 0x0611C060>) , Command count = 5739 ] 
14:44:39: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:39: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B706D1 to EndLba:0x3B70751 with One's Pattern
14:44:39: [ WrLbaNoData(0x3B706D1, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5740 ] 
14:44:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B706D1 to EndLba:0x3B70751 with One's Pattern 

14:44:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70751 to EndLba:0x3B707D1 with One's Pattern
14:44:39: [ WrLbaNoData(0x3B70751, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5741 ] 
14:44:39: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70751 to EndLba:0x3B707D1 with One's Pattern 

14:44:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2328D to EndLba:0x25039 with Constant Pattern
14:44:39: [ RdLbaNoData(0x2328D, 0x1DAC, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5742 ] 
14:44:39: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2328D to EndLba:0x25039 with Constant Pattern 

14:44:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3796
14:44:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129E10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F0C0>, <py_sfcl.PySEnhancedCmdData object at 0x060E3A20>, <None>) , Command count = 5743 ] 
14:44:39: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:41: Host Frequency set to 25000 KHz
14:44:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF60>, 0x0, True) , Command count = 5744 ] 
14:44:41: [GO18_globalSetVolt]### Host voltage value is set.
14:44:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E780>, 0x0, False) , Command count = 5745 ] 
14:44:41: [GO18_globalSetVolt]### Host voltage value is set.
14:44:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5746 ] 
14:44:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5747 ] 
14:44:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5748 ] 
14:44:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3930>, <py_sfcl.CommandDataDefinition object at 0x06129990>) , Command count = 5749 ] 
14:44:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7E0>, <py_sfcl.CommandDataDefinition object at 0x0611CF90>) , Command count = 5750 ] 
14:44:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:42: [ SetCardRCA(0x1, 0xD555) , Command count = 5751 ] 
14:44:42: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:42: Host Frequency set to 25000 KHz
14:44:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:42: ####CSD Registe 2.0 Values####
14:44:42: CSD_STRUCTURE                                 :0x1
14:44:42: Reserv1                                       :0x0
14:44:42: Time Access 1 TAAC                            :0xe
14:44:42: Time Access 2 NSAC*100                        :0x0
14:44:42: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:42: Card Command Classess CCC                     :0x5b5
14:44:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:42: DSR(driver stage register)  DSR_IMP           :0x0
14:44:42: Reserv2                                       :0x0
14:44:42: Device Size C_SIZE                            :0xedc8
14:44:42: Reserv3                                       :0x0
14:44:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:42: Reserv4                                       :0x0
14:44:42: Write Speed Factor R2W_FACTOR                 :0x2
14:44:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:42: FILE_FORMAT_GRP                               :0x0
14:44:42: COPY flag                                     :0x1
14:44:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:42: File_Format                                   :0x0
14:44:42: CRC                                           :0x0
14:44:42: ####CSD Registe Values####  

14:44:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:42: [GetSCRRegisterEntry] Passed
14:44:42: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:42: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:42: Data_Status_After Erases          : 0
14:44:42: CPRM Security Support             : No Security
14:44:42: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:42: Spec. Version                     : Version 3.0X
14:44:42: Extended Security Support         : Extended_Security_Not_Supported
14:44:42: Command Support                   : COMMAND_SUPPORT
14:44:42: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F300>, <py_sfcl.CommandDataDefinition object at 0x0611C480>) , Command count = 5752 ] 
14:44:42: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0611C780>) , Command count = 5753 ] 
14:44:42: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:42: [ SetBusWidth(0x4) , Command count = 5754 ] 
14:44:42: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:42: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CC60>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5755 ] 
14:44:42: Protected Area Size 0x28000
14:44:42: Bus Width           2
14:44:42: Secure Mode         0
14:44:42: Speed  Class        4
14:44:42: Perf Move           0
14:44:42: Au Size             9
14:44:42: Erase Size          15
14:44:42: Erase Timeout       1
14:44:42: Erase offset        1
14:44:42: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:42: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:42: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5756 ] 
14:44:42: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:42: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:42: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:42: Host Frequency set to 100000 KHz
14:44:42: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:42: ####CSD Registe 2.0 Values####
14:44:42: CSD_STRUCTURE                                 :0x1
14:44:42: Reserv1                                       :0x0
14:44:42: Time Access 1 TAAC                            :0xe
14:44:42: Time Access 2 NSAC*100                        :0x0
14:44:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:42: Card Command Classess CCC                     :0x5b5
14:44:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:42: DSR(driver stage register)  DSR_IMP           :0x0
14:44:42: Reserv2                                       :0x0
14:44:42: Device Size C_SIZE                            :0xedc8
14:44:42: Reserv3                                       :0x0
14:44:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:42: Reserv4                                       :0x0
14:44:42: Write Speed Factor R2W_FACTOR                 :0x2
14:44:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:42: FILE_FORMAT_GRP                               :0x0
14:44:42: COPY flag                                     :0x1
14:44:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:42: File_Format                                   :0x0
14:44:42: CRC                                           :0x0
14:44:42: ####CSD Registe Values####  

14:44:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129300>, <py_sfcl.CommandDataDefinition object at 0x06129DE0>) , Command count = 5757 ] 
14:44:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x060E3540>) , Command count = 5758 ] 
14:44:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DEA6 to EndLba:0x3B6DF26 with One's Pattern
14:44:42: [ WrLbaNoData(0x3B6DEA6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5759 ] 
14:44:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DEA6 to EndLba:0x3B6DF26 with One's Pattern 

14:44:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DF26 to EndLba:0x3B6DFA6 with One's Pattern
14:44:42: [ WrLbaNoData(0x3B6DF26, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5760 ] 
14:44:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DF26 to EndLba:0x3B6DFA6 with One's Pattern 

14:44:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2328F to EndLba:0x25039 with Constant Pattern
14:44:42: [ RdLbaNoData(0x2328F, 0x1DAA, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5761 ] 
14:44:42: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2328F to EndLba:0x25039 with Constant Pattern 

14:44:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3795
14:44:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:42: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129F60>, <py_sfcl.PySEnhancedCmdData object at 0x061299F0>, <None>) , Command count = 5762 ] 
14:44:42: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:42: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:45: Host Frequency set to 25000 KHz
14:44:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C90>, 0x0, True) , Command count = 5763 ] 
14:44:45: [GO18_globalSetVolt]### Host voltage value is set.
14:44:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FCF0>, 0x0, False) , Command count = 5764 ] 
14:44:45: [GO18_globalSetVolt]### Host voltage value is set.
14:44:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5765 ] 
14:44:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5766 ] 
14:44:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5767 ] 
14:44:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 5768 ] 
14:44:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129060>, <py_sfcl.CommandDataDefinition object at 0x0611C120>) , Command count = 5769 ] 
14:44:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:45: [ SetCardRCA(0x1, 0xD555) , Command count = 5770 ] 
14:44:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:45: Host Frequency set to 25000 KHz
14:44:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:45: ####CSD Registe 2.0 Values####
14:44:45: CSD_STRUCTURE                                 :0x1
14:44:45: Reserv1                                       :0x0
14:44:45: Time Access 1 TAAC                            :0xe
14:44:45: Time Access 2 NSAC*100                        :0x0
14:44:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:45: Card Command Classess CCC                     :0x5b5
14:44:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:45: DSR(driver stage register)  DSR_IMP           :0x0
14:44:45: Reserv2                                       :0x0
14:44:45: Device Size C_SIZE                            :0xedc8
14:44:45: Reserv3                                       :0x0
14:44:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:45: Reserv4                                       :0x0
14:44:45: Write Speed Factor R2W_FACTOR                 :0x2
14:44:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:45: FILE_FORMAT_GRP                               :0x0
14:44:45: COPY flag                                     :0x1
14:44:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:45: File_Format                                   :0x0
14:44:45: CRC                                           :0x0
14:44:45: ####CSD Registe Values####  

14:44:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:45: [GetSCRRegisterEntry] Passed
14:44:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:45: Data_Status_After Erases          : 0
14:44:45: CPRM Security Support             : No Security
14:44:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:45: Spec. Version                     : Version 3.0X
14:44:45: Extended Security Support         : Extended_Security_Not_Supported
14:44:45: Command Support                   : COMMAND_SUPPORT
14:44:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E38D0>, <py_sfcl.CommandDataDefinition object at 0x06145420>) , Command count = 5771 ] 
14:44:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129CF0>) , Command count = 5772 ] 
14:44:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:45: [ SetBusWidth(0x4) , Command count = 5773 ] 
14:44:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061292D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5774 ] 
14:44:45: Protected Area Size 0x28000
14:44:45: Bus Width           2
14:44:45: Secure Mode         0
14:44:45: Speed  Class        4
14:44:45: Perf Move           0
14:44:45: Au Size             9
14:44:45: Erase Size          15
14:44:45: Erase Timeout       1
14:44:45: Erase offset        1
14:44:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5775 ] 
14:44:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:45: Host Frequency set to 100000 KHz
14:44:45: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:45: ####CSD Registe 2.0 Values####
14:44:45: CSD_STRUCTURE                                 :0x1
14:44:45: Reserv1                                       :0x0
14:44:45: Time Access 1 TAAC                            :0xe
14:44:45: Time Access 2 NSAC*100                        :0x0
14:44:45: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:45: Card Command Classess CCC                     :0x5b5
14:44:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:45: DSR(driver stage register)  DSR_IMP           :0x0
14:44:45: Reserv2                                       :0x0
14:44:45: Device Size C_SIZE                            :0xedc8
14:44:45: Reserv3                                       :0x0
14:44:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:46: Reserv4                                       :0x0
14:44:46: Write Speed Factor R2W_FACTOR                 :0x2
14:44:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:46: FILE_FORMAT_GRP                               :0x0
14:44:46: COPY flag                                     :0x1
14:44:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:46: File_Format                                   :0x0
14:44:46: CRC                                           :0x0
14:44:46: ####CSD Registe Values####  

14:44:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x0611CED0>) , Command count = 5776 ] 
14:44:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C810>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 5777 ] 
14:44:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D939 to EndLba:0x3B6D9B9 with One's Pattern
14:44:46: [ WrLbaNoData(0x3B6D939, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5778 ] 
14:44:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D939 to EndLba:0x3B6D9B9 with One's Pattern 

14:44:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D9B9 to EndLba:0x3B6DA39 with One's Pattern
14:44:46: [ WrLbaNoData(0x3B6D9B9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5779 ] 
14:44:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D9B9 to EndLba:0x3B6DA39 with One's Pattern 

14:44:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x2328F to EndLba:0x25037 with Constant Pattern
14:44:46: [ RdLbaNoData(0x2328F, 0x1DA8, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5780 ] 
14:44:46: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x2328F to EndLba:0x25037 with Constant Pattern 

14:44:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3794
14:44:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:46: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CCC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129F00>, <py_sfcl.PySEnhancedCmdData object at 0x061299C0>, <None>) , Command count = 5781 ] 
14:44:46: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:46: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:48: Host Frequency set to 25000 KHz
14:44:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:48: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:48: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129510>, 0x0, True) , Command count = 5782 ] 
14:44:48: [GO18_globalSetVolt]### Host voltage value is set.
14:44:48: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:48: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C090>, 0x0, False) , Command count = 5783 ] 
14:44:48: [GO18_globalSetVolt]### Host voltage value is set.
14:44:48: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5784 ] 
14:44:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5785 ] 
14:44:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:48: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5786 ] 
14:44:48: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C930>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 5787 ] 
14:44:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC00>, <py_sfcl.CommandDataDefinition object at 0x06129030>) , Command count = 5788 ] 
14:44:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:48: [ SetCardRCA(0x1, 0xD555) , Command count = 5789 ] 
14:44:48: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:48: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:48: Host Frequency set to 25000 KHz
14:44:48: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:48: ####CSD Registe 2.0 Values####
14:44:48: CSD_STRUCTURE                                 :0x1
14:44:48: Reserv1                                       :0x0
14:44:48: Time Access 1 TAAC                            :0xe
14:44:48: Time Access 2 NSAC*100                        :0x0
14:44:48: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:48: Card Command Classess CCC                     :0x5b5
14:44:48: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:48: DSR(driver stage register)  DSR_IMP           :0x0
14:44:48: Reserv2                                       :0x0
14:44:48: Device Size C_SIZE                            :0xedc8
14:44:48: Reserv3                                       :0x0
14:44:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:48: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:48: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:48: Reserv4                                       :0x0
14:44:48: Write Speed Factor R2W_FACTOR                 :0x2
14:44:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:48: FILE_FORMAT_GRP                               :0x0
14:44:48: COPY flag                                     :0x1
14:44:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:48: File_Format                                   :0x0
14:44:48: CRC                                           :0x0
14:44:48: ####CSD Registe Values####  

14:44:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:48: [GetSCRRegisterEntry] Passed
14:44:48: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:48: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:48: Data_Status_After Erases          : 0
14:44:48: CPRM Security Support             : No Security
14:44:48: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:48: Spec. Version                     : Version 3.0X
14:44:48: Extended Security Support         : Extended_Security_Not_Supported
14:44:48: Command Support                   : COMMAND_SUPPORT
14:44:48: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F2A0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 5790 ] 
14:44:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB10>, <py_sfcl.CommandDataDefinition object at 0x06129270>) , Command count = 5791 ] 
14:44:48: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:48: [ SetBusWidth(0x4) , Command count = 5792 ] 
14:44:48: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:48: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129AB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5793 ] 
14:44:48: Protected Area Size 0x28000
14:44:48: Bus Width           2
14:44:48: Secure Mode         0
14:44:48: Speed  Class        4
14:44:48: Perf Move           0
14:44:48: Au Size             9
14:44:48: Erase Size          15
14:44:48: Erase Timeout       1
14:44:48: Erase offset        1
14:44:48: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:48: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:48: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:48: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5794 ] 
14:44:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:49: Host Frequency set to 100000 KHz
14:44:49: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:49: ####CSD Registe 2.0 Values####
14:44:49: CSD_STRUCTURE                                 :0x1
14:44:49: Reserv1                                       :0x0
14:44:49: Time Access 1 TAAC                            :0xe
14:44:49: Time Access 2 NSAC*100                        :0x0
14:44:49: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:49: Card Command Classess CCC                     :0x5b5
14:44:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:49: DSR(driver stage register)  DSR_IMP           :0x0
14:44:49: Reserv2                                       :0x0
14:44:49: Device Size C_SIZE                            :0xedc8
14:44:49: Reserv3                                       :0x0
14:44:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:49: Reserv4                                       :0x0
14:44:49: Write Speed Factor R2W_FACTOR                 :0x2
14:44:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:49: FILE_FORMAT_GRP                               :0x0
14:44:49: COPY flag                                     :0x1
14:44:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:49: File_Format                                   :0x0
14:44:49: CRC                                           :0x0
14:44:49: ####CSD Registe Values####  

14:44:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FED0>, <py_sfcl.CommandDataDefinition object at 0x06129810>) , Command count = 5795 ] 
14:44:49: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C540>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 5796 ] 
14:44:49: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:49: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7126C to EndLba:0x3B712EC with One's Pattern
14:44:49: [ WrLbaNoData(0x3B7126C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5797 ] 
14:44:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7126C to EndLba:0x3B712EC with One's Pattern 

14:44:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B712EC to EndLba:0x3B7136C with One's Pattern
14:44:49: [ WrLbaNoData(0x3B712EC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5798 ] 
14:44:49: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B712EC to EndLba:0x3B7136C with One's Pattern 

14:44:49: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23291 to EndLba:0x25037 with Constant Pattern
14:44:49: [ RdLbaNoData(0x23291, 0x1DA6, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5799 ] 
14:44:49: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23291 to EndLba:0x25037 with Constant Pattern 

14:44:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3793
14:44:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:49: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138600>, <py_sfcl.PySEnhancedCmdData object at 0x06129D80>, <None>) , Command count = 5800 ] 
14:44:49: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:49: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:51: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:51: Host Frequency set to 25000 KHz
14:44:51: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:51: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:51: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F9F0>, 0x0, True) , Command count = 5801 ] 
14:44:51: [GO18_globalSetVolt]### Host voltage value is set.
14:44:51: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:51: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E180>, 0x0, False) , Command count = 5802 ] 
14:44:51: [GO18_globalSetVolt]### Host voltage value is set.
14:44:51: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5803 ] 
14:44:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5804 ] 
14:44:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:52: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5805 ] 
14:44:52: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C840>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 5806 ] 
14:44:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE40>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 5807 ] 
14:44:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:52: [ SetCardRCA(0x1, 0xD555) , Command count = 5808 ] 
14:44:52: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:52: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:52: Host Frequency set to 25000 KHz
14:44:52: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:52: ####CSD Registe 2.0 Values####
14:44:52: CSD_STRUCTURE                                 :0x1
14:44:52: Reserv1                                       :0x0
14:44:52: Time Access 1 TAAC                            :0xe
14:44:52: Time Access 2 NSAC*100                        :0x0
14:44:52: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:52: Card Command Classess CCC                     :0x5b5
14:44:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:52: DSR(driver stage register)  DSR_IMP           :0x0
14:44:52: Reserv2                                       :0x0
14:44:52: Device Size C_SIZE                            :0xedc8
14:44:52: Reserv3                                       :0x0
14:44:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:52: Reserv4                                       :0x0
14:44:52: Write Speed Factor R2W_FACTOR                 :0x2
14:44:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:52: FILE_FORMAT_GRP                               :0x0
14:44:52: COPY flag                                     :0x1
14:44:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:52: File_Format                                   :0x0
14:44:52: CRC                                           :0x0
14:44:52: ####CSD Registe Values####  

14:44:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:52: [GetSCRRegisterEntry] Passed
14:44:52: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:52: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:52: Data_Status_After Erases          : 0
14:44:52: CPRM Security Support             : No Security
14:44:52: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:52: Spec. Version                     : Version 3.0X
14:44:52: Extended Security Support         : Extended_Security_Not_Supported
14:44:52: Command Support                   : COMMAND_SUPPORT
14:44:52: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E270>, <py_sfcl.CommandDataDefinition object at 0x06129930>) , Command count = 5809 ] 
14:44:52: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06132750>) , Command count = 5810 ] 
14:44:52: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:52: [ SetBusWidth(0x4) , Command count = 5811 ] 
14:44:52: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:52: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5812 ] 
14:44:52: Protected Area Size 0x28000
14:44:52: Bus Width           2
14:44:52: Secure Mode         0
14:44:52: Speed  Class        4
14:44:52: Perf Move           0
14:44:52: Au Size             9
14:44:52: Erase Size          15
14:44:52: Erase Timeout       1
14:44:52: Erase offset        1
14:44:52: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:52: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:52: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5813 ] 
14:44:52: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:52: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:52: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:52: Host Frequency set to 100000 KHz
14:44:52: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:52: ####CSD Registe 2.0 Values####
14:44:52: CSD_STRUCTURE                                 :0x1
14:44:52: Reserv1                                       :0x0
14:44:52: Time Access 1 TAAC                            :0xe
14:44:52: Time Access 2 NSAC*100                        :0x0
14:44:52: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:52: Card Command Classess CCC                     :0x5b5
14:44:52: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:52: DSR(driver stage register)  DSR_IMP           :0x0
14:44:52: Reserv2                                       :0x0
14:44:52: Device Size C_SIZE                            :0xedc8
14:44:52: Reserv3                                       :0x0
14:44:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:52: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:52: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:52: Reserv4                                       :0x0
14:44:52: Write Speed Factor R2W_FACTOR                 :0x2
14:44:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:52: FILE_FORMAT_GRP                               :0x0
14:44:52: COPY flag                                     :0x1
14:44:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:52: File_Format                                   :0x0
14:44:52: CRC                                           :0x0
14:44:52: ####CSD Registe Values####  

14:44:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ECC0>, <py_sfcl.CommandDataDefinition object at 0x0612E0C0>) , Command count = 5814 ] 
14:44:52: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 5815 ] 
14:44:52: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:52: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:52: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:52: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F27D to EndLba:0x3B6F2FD with One's Pattern
14:44:53: [ WrLbaNoData(0x3B6F27D, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5816 ] 
14:44:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F27D to EndLba:0x3B6F2FD with One's Pattern 

14:44:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F2FD to EndLba:0x3B6F37D with One's Pattern
14:44:53: [ WrLbaNoData(0x3B6F2FD, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5817 ] 
14:44:53: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F2FD to EndLba:0x3B6F37D with One's Pattern 

14:44:53: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23291 to EndLba:0x25035 with Constant Pattern
14:44:53: [ RdLbaNoData(0x23291, 0x1DA4, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5818 ] 
14:44:53: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23291 to EndLba:0x25035 with Constant Pattern 

14:44:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3792
14:44:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:53: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061325D0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FD20>, <py_sfcl.PySEnhancedCmdData object at 0x0612E7B0>, <None>) , Command count = 5819 ] 
14:44:53: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:53: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:55: Host Frequency set to 25000 KHz
14:44:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:55: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:55: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C8D0>, 0x0, True) , Command count = 5820 ] 
14:44:55: [GO18_globalSetVolt]### Host voltage value is set.
14:44:55: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:55: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F930>, 0x0, False) , Command count = 5821 ] 
14:44:55: [GO18_globalSetVolt]### Host voltage value is set.
14:44:55: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5822 ] 
14:44:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5823 ] 
14:44:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:55: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5824 ] 
14:44:55: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C60>, <py_sfcl.CommandDataDefinition object at 0x0612E5A0>) , Command count = 5825 ] 
14:44:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CD20>, <py_sfcl.CommandDataDefinition object at 0x0612EA80>) , Command count = 5826 ] 
14:44:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:55: [ SetCardRCA(0x1, 0xD555) , Command count = 5827 ] 
14:44:55: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:55: Host Frequency set to 25000 KHz
14:44:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:55: ####CSD Registe 2.0 Values####
14:44:55: CSD_STRUCTURE                                 :0x1
14:44:55: Reserv1                                       :0x0
14:44:55: Time Access 1 TAAC                            :0xe
14:44:55: Time Access 2 NSAC*100                        :0x0
14:44:55: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:55: Card Command Classess CCC                     :0x5b5
14:44:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:55: DSR(driver stage register)  DSR_IMP           :0x0
14:44:55: Reserv2                                       :0x0
14:44:55: Device Size C_SIZE                            :0xedc8
14:44:55: Reserv3                                       :0x0
14:44:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:55: Reserv4                                       :0x0
14:44:55: Write Speed Factor R2W_FACTOR                 :0x2
14:44:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:55: FILE_FORMAT_GRP                               :0x0
14:44:55: COPY flag                                     :0x1
14:44:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:55: File_Format                                   :0x0
14:44:55: CRC                                           :0x0
14:44:55: ####CSD Registe Values####  

14:44:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:55: [GetSCRRegisterEntry] Passed
14:44:55: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:55: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:55: Data_Status_After Erases          : 0
14:44:55: CPRM Security Support             : No Security
14:44:55: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:55: Spec. Version                     : Version 3.0X
14:44:55: Extended Security Support         : Extended_Security_Not_Supported
14:44:55: Command Support                   : COMMAND_SUPPORT
14:44:55: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDB0>, <py_sfcl.CommandDataDefinition object at 0x06145270>) , Command count = 5828 ] 
14:44:55: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E390>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 5829 ] 
14:44:55: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:55: [ SetBusWidth(0x4) , Command count = 5830 ] 
14:44:55: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:55: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132C30>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5831 ] 
14:44:55: Protected Area Size 0x28000
14:44:55: Bus Width           2
14:44:55: Secure Mode         0
14:44:55: Speed  Class        4
14:44:55: Perf Move           0
14:44:55: Au Size             9
14:44:55: Erase Size          15
14:44:55: Erase Timeout       1
14:44:55: Erase offset        1
14:44:55: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:55: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:55: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5832 ] 
14:44:55: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:55: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:55: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:55: Host Frequency set to 100000 KHz
14:44:55: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:55: ####CSD Registe 2.0 Values####
14:44:55: CSD_STRUCTURE                                 :0x1
14:44:55: Reserv1                                       :0x0
14:44:55: Time Access 1 TAAC                            :0xe
14:44:55: Time Access 2 NSAC*100                        :0x0
14:44:55: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:55: Card Command Classess CCC                     :0x5b5
14:44:55: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:55: DSR(driver stage register)  DSR_IMP           :0x0
14:44:55: Reserv2                                       :0x0
14:44:55: Device Size C_SIZE                            :0xedc8
14:44:55: Reserv3                                       :0x0
14:44:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:55: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:55: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:56: Reserv4                                       :0x0
14:44:56: Write Speed Factor R2W_FACTOR                 :0x2
14:44:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:56: FILE_FORMAT_GRP                               :0x0
14:44:56: COPY flag                                     :0x1
14:44:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:56: File_Format                                   :0x0
14:44:56: CRC                                           :0x0
14:44:56: ####CSD Registe Values####  

14:44:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D80>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 5833 ] 
14:44:56: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE40>, <py_sfcl.CommandDataDefinition object at 0x0613F8D0>) , Command count = 5834 ] 
14:44:56: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:44:56: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:44:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:44:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F8B5 to EndLba:0x3B6F935 with One's Pattern
14:44:56: [ WrLbaNoData(0x3B6F8B5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5835 ] 
14:44:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F8B5 to EndLba:0x3B6F935 with One's Pattern 

14:44:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F935 to EndLba:0x3B6F9B5 with One's Pattern
14:44:56: [ WrLbaNoData(0x3B6F935, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5836 ] 
14:44:56: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F935 to EndLba:0x3B6F9B5 with One's Pattern 

14:44:56: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:44:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23293 to EndLba:0x25035 with Constant Pattern
14:44:56: [ RdLbaNoData(0x23293, 0x1DA2, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5837 ] 
14:44:56: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23293 to EndLba:0x25035 with Constant Pattern 

14:44:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3791
14:44:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:44:56: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EE10>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E450>, <py_sfcl.PySEnhancedCmdData object at 0x061322D0>, <None>) , Command count = 5838 ] 
14:44:56: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:44:56: [GO4_globalInitCard]### Switch to Specify Card Type
14:44:58: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:58: Host Frequency set to 25000 KHz
14:44:58: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:58: [GO18_globalSetVolt]### Set Host Voltage value.
14:44:58: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:44:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FC60>, 0x0, True) , Command count = 5839 ] 
14:44:58: [GO18_globalSetVolt]### Host voltage value is set.
14:44:58: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:44:58: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FF00>, 0x0, False) , Command count = 5840 ] 
14:44:58: [GO18_globalSetVolt]### Host voltage value is set.
14:44:58: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5841 ] 
14:44:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:44:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5842 ] 
14:44:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:44:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:44:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:44:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:44:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:44:58: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5843 ] 
14:44:58: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:44:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:44:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129150>, <py_sfcl.CommandDataDefinition object at 0x06132C90>) , Command count = 5844 ] 
14:44:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:44:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8D0>, <py_sfcl.CommandDataDefinition object at 0x0612EE40>) , Command count = 5845 ] 
14:44:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:44:58: [ SetCardRCA(0x1, 0xD555) , Command count = 5846 ] 
14:44:59: [DVTCommonLib]### Identification :Idenfication of card completed 

14:44:59: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:44:59: Host Frequency set to 25000 KHz
14:44:59: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:44:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:59: ####CSD Registe 2.0 Values####
14:44:59: CSD_STRUCTURE                                 :0x1
14:44:59: Reserv1                                       :0x0
14:44:59: Time Access 1 TAAC                            :0xe
14:44:59: Time Access 2 NSAC*100                        :0x0
14:44:59: Data Transfer Rate TRAN_SPEED                 :0x32
14:44:59: Card Command Classess CCC                     :0x5b5
14:44:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:59: DSR(driver stage register)  DSR_IMP           :0x0
14:44:59: Reserv2                                       :0x0
14:44:59: Device Size C_SIZE                            :0xedc8
14:44:59: Reserv3                                       :0x0
14:44:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:59: Reserv4                                       :0x0
14:44:59: Write Speed Factor R2W_FACTOR                 :0x2
14:44:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:59: FILE_FORMAT_GRP                               :0x0
14:44:59: COPY flag                                     :0x1
14:44:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:59: File_Format                                   :0x0
14:44:59: CRC                                           :0x0
14:44:59: ####CSD Registe Values####  

14:44:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:44:59: [GetSCRRegisterEntry] Passed
14:44:59: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:44:59: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:44:59: Data_Status_After Erases          : 0
14:44:59: CPRM Security Support             : No Security
14:44:59: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:44:59: Spec. Version                     : Version 3.0X
14:44:59: Extended Security Support         : Extended_Security_Not_Supported
14:44:59: Command Support                   : COMMAND_SUPPORT
14:44:59: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:44:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F810>, <py_sfcl.CommandDataDefinition object at 0x0612EDE0>) , Command count = 5847 ] 
14:44:59: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:44:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C510>, <py_sfcl.CommandDataDefinition object at 0x06132990>) , Command count = 5848 ] 
14:44:59: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:44:59: [ SetBusWidth(0x4) , Command count = 5849 ] 
14:44:59: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:44:59: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EAB0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5850 ] 
14:44:59: Protected Area Size 0x28000
14:44:59: Bus Width           2
14:44:59: Secure Mode         0
14:44:59: Speed  Class        4
14:44:59: Perf Move           0
14:44:59: Au Size             9
14:44:59: Erase Size          15
14:44:59: Erase Timeout       1
14:44:59: Erase offset        1
14:44:59: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:44:59: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:44:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:44:59: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5851 ] 
14:44:59: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:44:59: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:44:59: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:44:59: Host Frequency set to 100000 KHz
14:44:59: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:44:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:44:59: ####CSD Registe 2.0 Values####
14:44:59: CSD_STRUCTURE                                 :0x1
14:44:59: Reserv1                                       :0x0
14:44:59: Time Access 1 TAAC                            :0xe
14:44:59: Time Access 2 NSAC*100                        :0x0
14:44:59: Data Transfer Rate TRAN_SPEED                 :0xb
14:44:59: Card Command Classess CCC                     :0x5b5
14:44:59: Max Read Data Block Length  READ_BL_LEN       :0x9
14:44:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:44:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:44:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:44:59: DSR(driver stage register)  DSR_IMP           :0x0
14:44:59: Reserv2                                       :0x0
14:44:59: Device Size C_SIZE                            :0xedc8
14:44:59: Reserv3                                       :0x0
14:44:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:44:59: Erase Sector Size SECTOR_SIZE                 :0x7f
14:44:59: Write Protect Group Size WP_GRP_SIZE          :0x0
14:44:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:44:59: Reserv4                                       :0x0
14:44:59: Write Speed Factor R2W_FACTOR                 :0x2
14:44:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:44:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:44:59: FILE_FORMAT_GRP                               :0x0
14:44:59: COPY flag                                     :0x1
14:44:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:44:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:44:59: File_Format                                   :0x0
14:44:59: CRC                                           :0x0
14:44:59: ####CSD Registe Values####  

14:44:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py_sfcl.CommandDataDefinition object at 0x0612EC30>) , Command count = 5852 ] 
14:44:59: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:44:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E8A0>, <py_sfcl.CommandDataDefinition object at 0x0612EB10>) , Command count = 5853 ] 
14:45:00: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:00: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EF88 to EndLba:0x3B6F008 with One's Pattern
14:45:00: [ WrLbaNoData(0x3B6EF88, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5854 ] 
14:45:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EF88 to EndLba:0x3B6F008 with One's Pattern 

14:45:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F008 to EndLba:0x3B6F088 with One's Pattern
14:45:00: [ WrLbaNoData(0x3B6F008, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5855 ] 
14:45:00: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F008 to EndLba:0x3B6F088 with One's Pattern 

14:45:00: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23293 to EndLba:0x25033 with Constant Pattern
14:45:00: [ RdLbaNoData(0x23293, 0x1DA0, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5856 ] 
14:45:00: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23293 to EndLba:0x25033 with Constant Pattern 

14:45:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3790
14:45:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:45:00: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E35A0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061328A0>, <py_sfcl.PySEnhancedCmdData object at 0x061326C0>, <None>) , Command count = 5857 ] 
14:45:00: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:45:00: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:02: Host Frequency set to 25000 KHz
14:45:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:02: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:02: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F330>, 0x0, True) , Command count = 5858 ] 
14:45:02: [GO18_globalSetVolt]### Host voltage value is set.
14:45:02: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:02: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138450>, 0x0, False) , Command count = 5859 ] 
14:45:02: [GO18_globalSetVolt]### Host voltage value is set.
14:45:02: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5860 ] 
14:45:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5861 ] 
14:45:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:02: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5862 ] 
14:45:02: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EB70>, <py_sfcl.CommandDataDefinition object at 0x061321B0>) , Command count = 5863 ] 
14:45:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 5864 ] 
14:45:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:02: [ SetCardRCA(0x1, 0xD555) , Command count = 5865 ] 
14:45:02: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:02: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:02: Host Frequency set to 25000 KHz
14:45:02: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:02: ####CSD Registe 2.0 Values####
14:45:02: CSD_STRUCTURE                                 :0x1
14:45:02: Reserv1                                       :0x0
14:45:02: Time Access 1 TAAC                            :0xe
14:45:02: Time Access 2 NSAC*100                        :0x0
14:45:02: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:02: Card Command Classess CCC                     :0x5b5
14:45:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:02: DSR(driver stage register)  DSR_IMP           :0x0
14:45:02: Reserv2                                       :0x0
14:45:02: Device Size C_SIZE                            :0xedc8
14:45:02: Reserv3                                       :0x0
14:45:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:02: Reserv4                                       :0x0
14:45:02: Write Speed Factor R2W_FACTOR                 :0x2
14:45:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:02: FILE_FORMAT_GRP                               :0x0
14:45:02: COPY flag                                     :0x1
14:45:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:02: File_Format                                   :0x0
14:45:02: CRC                                           :0x0
14:45:02: ####CSD Registe Values####  

14:45:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:02: [GetSCRRegisterEntry] Passed
14:45:02: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:02: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:02: Data_Status_After Erases          : 0
14:45:02: CPRM Security Support             : No Security
14:45:02: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:02: Spec. Version                     : Version 3.0X
14:45:02: Extended Security Support         : Extended_Security_Not_Supported
14:45:02: Command Support                   : COMMAND_SUPPORT
14:45:02: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC00>, <py_sfcl.CommandDataDefinition object at 0x061322A0>) , Command count = 5866 ] 
14:45:02: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E120>, <py_sfcl.CommandDataDefinition object at 0x06132A80>) , Command count = 5867 ] 
14:45:02: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:02: [ SetBusWidth(0x4) , Command count = 5868 ] 
14:45:02: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:02: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132E40>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5869 ] 
14:45:02: Protected Area Size 0x28000
14:45:02: Bus Width           2
14:45:02: Secure Mode         0
14:45:02: Speed  Class        4
14:45:02: Perf Move           0
14:45:02: Au Size             9
14:45:02: Erase Size          15
14:45:02: Erase Timeout       1
14:45:02: Erase offset        1
14:45:02: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:02: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:02: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5870 ] 
14:45:02: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:02: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:02: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:02: Host Frequency set to 100000 KHz
14:45:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:02: ####CSD Registe 2.0 Values####
14:45:02: CSD_STRUCTURE                                 :0x1
14:45:03: Reserv1                                       :0x0
14:45:03: Time Access 1 TAAC                            :0xe
14:45:03: Time Access 2 NSAC*100                        :0x0
14:45:03: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:03: Card Command Classess CCC                     :0x5b5
14:45:03: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:03: DSR(driver stage register)  DSR_IMP           :0x0
14:45:03: Reserv2                                       :0x0
14:45:03: Device Size C_SIZE                            :0xedc8
14:45:03: Reserv3                                       :0x0
14:45:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:03: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:03: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:03: Reserv4                                       :0x0
14:45:03: Write Speed Factor R2W_FACTOR                 :0x2
14:45:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:03: FILE_FORMAT_GRP                               :0x0
14:45:03: COPY flag                                     :0x1
14:45:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:03: File_Format                                   :0x0
14:45:03: CRC                                           :0x0
14:45:03: ####CSD Registe Values####  

14:45:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FE70>, <py_sfcl.CommandDataDefinition object at 0x061326F0>) , Command count = 5871 ] 
14:45:03: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EEA0>, <py_sfcl.CommandDataDefinition object at 0x06132C30>) , Command count = 5872 ] 
14:45:03: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:03: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B717E0 to EndLba:0x3B71860 with One's Pattern
14:45:03: [ WrLbaNoData(0x3B717E0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5873 ] 
14:45:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B717E0 to EndLba:0x3B71860 with One's Pattern 

14:45:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71860 to EndLba:0x3B718E0 with One's Pattern
14:45:03: [ WrLbaNoData(0x3B71860, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5874 ] 
14:45:03: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71860 to EndLba:0x3B718E0 with One's Pattern 

14:45:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23295 to EndLba:0x25033 with Constant Pattern
14:45:03: [ RdLbaNoData(0x23295, 0x1D9E, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5875 ] 
14:45:03: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23295 to EndLba:0x25033 with Constant Pattern 

14:45:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3789
14:45:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:45:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138630>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061384B0>, <py_sfcl.PySEnhancedCmdData object at 0x06132F90>, <None>) , Command count = 5876 ] 
14:45:03: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:45:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:05: Host Frequency set to 25000 KHz
14:45:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E360>, 0x0, True) , Command count = 5877 ] 
14:45:05: [GO18_globalSetVolt]### Host voltage value is set.
14:45:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E720>, 0x0, False) , Command count = 5878 ] 
14:45:05: [GO18_globalSetVolt]### Host voltage value is set.
14:45:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5879 ] 
14:45:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5880 ] 
14:45:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5881 ] 
14:45:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138D50>, <py_sfcl.CommandDataDefinition object at 0x0612E870>) , Command count = 5882 ] 
14:45:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x06132C30>) , Command count = 5883 ] 
14:45:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:05: [ SetCardRCA(0x1, 0xD555) , Command count = 5884 ] 
14:45:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:05: Host Frequency set to 25000 KHz
14:45:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:06: ####CSD Registe 2.0 Values####
14:45:06: CSD_STRUCTURE                                 :0x1
14:45:06: Reserv1                                       :0x0
14:45:06: Time Access 1 TAAC                            :0xe
14:45:06: Time Access 2 NSAC*100                        :0x0
14:45:06: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:06: Card Command Classess CCC                     :0x5b5
14:45:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:06: DSR(driver stage register)  DSR_IMP           :0x0
14:45:06: Reserv2                                       :0x0
14:45:06: Device Size C_SIZE                            :0xedc8
14:45:06: Reserv3                                       :0x0
14:45:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:06: Reserv4                                       :0x0
14:45:06: Write Speed Factor R2W_FACTOR                 :0x2
14:45:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:06: FILE_FORMAT_GRP                               :0x0
14:45:06: COPY flag                                     :0x1
14:45:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:06: File_Format                                   :0x0
14:45:06: CRC                                           :0x0
14:45:06: ####CSD Registe Values####  

14:45:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:06: [GetSCRRegisterEntry] Passed
14:45:06: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:06: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:06: Data_Status_After Erases          : 0
14:45:06: CPRM Security Support             : No Security
14:45:06: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:06: Spec. Version                     : Version 3.0X
14:45:06: Extended Security Support         : Extended_Security_Not_Supported
14:45:06: Command Support                   : COMMAND_SUPPORT
14:45:06: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F870>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 5885 ] 
14:45:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129F30>, <py_sfcl.CommandDataDefinition object at 0x06138E10>) , Command count = 5886 ] 
14:45:06: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:06: [ SetBusWidth(0x4) , Command count = 5887 ] 
14:45:06: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:06: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061388A0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5888 ] 
14:45:06: Protected Area Size 0x28000
14:45:06: Bus Width           2
14:45:06: Secure Mode         0
14:45:06: Speed  Class        4
14:45:06: Perf Move           0
14:45:06: Au Size             9
14:45:06: Erase Size          15
14:45:06: Erase Timeout       1
14:45:06: Erase offset        1
14:45:06: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:06: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:06: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5889 ] 
14:45:06: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:06: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:06: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:06: Host Frequency set to 100000 KHz
14:45:06: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:06: ####CSD Registe 2.0 Values####
14:45:06: CSD_STRUCTURE                                 :0x1
14:45:06: Reserv1                                       :0x0
14:45:06: Time Access 1 TAAC                            :0xe
14:45:06: Time Access 2 NSAC*100                        :0x0
14:45:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:06: Card Command Classess CCC                     :0x5b5
14:45:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:06: DSR(driver stage register)  DSR_IMP           :0x0
14:45:06: Reserv2                                       :0x0
14:45:06: Device Size C_SIZE                            :0xedc8
14:45:06: Reserv3                                       :0x0
14:45:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:06: Reserv4                                       :0x0
14:45:06: Write Speed Factor R2W_FACTOR                 :0x2
14:45:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:06: FILE_FORMAT_GRP                               :0x0
14:45:06: COPY flag                                     :0x1
14:45:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:06: File_Format                                   :0x0
14:45:06: CRC                                           :0x0
14:45:06: ####CSD Registe Values####  

14:45:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E810>, <py_sfcl.CommandDataDefinition object at 0x06138090>) , Command count = 5890 ] 
14:45:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132E10>, <py_sfcl.CommandDataDefinition object at 0x06132E40>) , Command count = 5891 ] 
14:45:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E178 to EndLba:0x3B6E1F8 with One's Pattern
14:45:06: [ WrLbaNoData(0x3B6E178, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5892 ] 
14:45:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E178 to EndLba:0x3B6E1F8 with One's Pattern 

14:45:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E1F8 to EndLba:0x3B6E278 with One's Pattern
14:45:06: [ WrLbaNoData(0x3B6E1F8, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5893 ] 
14:45:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E1F8 to EndLba:0x3B6E278 with One's Pattern 

14:45:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23295 to EndLba:0x25031 with Constant Pattern
14:45:06: [ RdLbaNoData(0x23295, 0x1D9C, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5894 ] 
14:45:06: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23295 to EndLba:0x25031 with Constant Pattern 

14:45:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3788
14:45:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:45:06: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132180>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132B40>, <py_sfcl.PySEnhancedCmdData object at 0x06138CF0>, <None>) , Command count = 5895 ] 
14:45:06: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:45:06: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:08: Host Frequency set to 25000 KHz
14:45:08: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:08: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:08: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132D50>, 0x0, True) , Command count = 5896 ] 
14:45:08: [GO18_globalSetVolt]### Host voltage value is set.
14:45:08: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:08: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FDB0>, 0x0, False) , Command count = 5897 ] 
14:45:08: [GO18_globalSetVolt]### Host voltage value is set.
14:45:08: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5898 ] 
14:45:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5899 ] 
14:45:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5900 ] 
14:45:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129BD0>, <py_sfcl.CommandDataDefinition object at 0x06138900>) , Command count = 5901 ] 
14:45:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132930>, <py_sfcl.CommandDataDefinition object at 0x061380C0>) , Command count = 5902 ] 
14:45:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:09: [ SetCardRCA(0x1, 0xD555) , Command count = 5903 ] 
14:45:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:09: Host Frequency set to 25000 KHz
14:45:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:09: ####CSD Registe 2.0 Values####
14:45:09: CSD_STRUCTURE                                 :0x1
14:45:09: Reserv1                                       :0x0
14:45:09: Time Access 1 TAAC                            :0xe
14:45:09: Time Access 2 NSAC*100                        :0x0
14:45:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:09: Card Command Classess CCC                     :0x5b5
14:45:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:09: DSR(driver stage register)  DSR_IMP           :0x0
14:45:09: Reserv2                                       :0x0
14:45:09: Device Size C_SIZE                            :0xedc8
14:45:09: Reserv3                                       :0x0
14:45:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:09: Reserv4                                       :0x0
14:45:09: Write Speed Factor R2W_FACTOR                 :0x2
14:45:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:09: FILE_FORMAT_GRP                               :0x0
14:45:09: COPY flag                                     :0x1
14:45:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:09: File_Format                                   :0x0
14:45:09: CRC                                           :0x0
14:45:09: ####CSD Registe Values####  

14:45:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:09: [GetSCRRegisterEntry] Passed
14:45:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:09: Data_Status_After Erases          : 0
14:45:09: CPRM Security Support             : No Security
14:45:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:09: Spec. Version                     : Version 3.0X
14:45:09: Extended Security Support         : Extended_Security_Not_Supported
14:45:09: Command Support                   : COMMAND_SUPPORT
14:45:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321E0>, <py_sfcl.CommandDataDefinition object at 0x06138150>) , Command count = 5904 ] 
14:45:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x06138FC0>) , Command count = 5905 ] 
14:45:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:09: [ SetBusWidth(0x4) , Command count = 5906 ] 
14:45:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5907 ] 
14:45:09: Protected Area Size 0x28000
14:45:09: Bus Width           2
14:45:09: Secure Mode         0
14:45:09: Speed  Class        4
14:45:09: Perf Move           0
14:45:09: Au Size             9
14:45:09: Erase Size          15
14:45:09: Erase Timeout       1
14:45:09: Erase offset        1
14:45:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5908 ] 
14:45:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:09: Host Frequency set to 100000 KHz
14:45:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:09: ####CSD Registe 2.0 Values####
14:45:09: CSD_STRUCTURE                                 :0x1
14:45:09: Reserv1                                       :0x0
14:45:09: Time Access 1 TAAC                            :0xe
14:45:09: Time Access 2 NSAC*100                        :0x0
14:45:09: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:09: Card Command Classess CCC                     :0x5b5
14:45:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:09: DSR(driver stage register)  DSR_IMP           :0x0
14:45:09: Reserv2                                       :0x0
14:45:09: Device Size C_SIZE                            :0xedc8
14:45:09: Reserv3                                       :0x0
14:45:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:09: Reserv4                                       :0x0
14:45:09: Write Speed Factor R2W_FACTOR                 :0x2
14:45:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:09: FILE_FORMAT_GRP                               :0x0
14:45:09: COPY flag                                     :0x1
14:45:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:09: File_Format                                   :0x0
14:45:09: CRC                                           :0x0
14:45:09: ####CSD Registe Values####  

14:45:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132DE0>, <py_sfcl.CommandDataDefinition object at 0x06138C30>) , Command count = 5909 ] 
14:45:09: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329F0>, <py_sfcl.CommandDataDefinition object at 0x06138180>) , Command count = 5910 ] 
14:45:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7181C to EndLba:0x3B7189C with One's Pattern
14:45:10: [ WrLbaNoData(0x3B7181C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5911 ] 
14:45:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7181C to EndLba:0x3B7189C with One's Pattern 

14:45:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7189C to EndLba:0x3B7191C with One's Pattern
14:45:10: [ WrLbaNoData(0x3B7189C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5912 ] 
14:45:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7189C to EndLba:0x3B7191C with One's Pattern 

14:45:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23297 to EndLba:0x25031 with Constant Pattern
14:45:10: [ RdLbaNoData(0x23297, 0x1D9A, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5913 ] 
14:45:10: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23297 to EndLba:0x25031 with Constant Pattern 

14:45:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3787
14:45:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:45:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FFC0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061383C0>, <py_sfcl.PySEnhancedCmdData object at 0x06138240>, <None>) , Command count = 5914 ] 
14:45:10: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:45:10: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:12: Host Frequency set to 25000 KHz
14:45:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:12: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:12: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132E70>, 0x0, True) , Command count = 5915 ] 
14:45:12: [GO18_globalSetVolt]### Host voltage value is set.
14:45:12: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:12: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138060>, 0x0, False) , Command count = 5916 ] 
14:45:12: [GO18_globalSetVolt]### Host voltage value is set.
14:45:12: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5917 ] 
14:45:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5918 ] 
14:45:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:12: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5919 ] 
14:45:12: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132900>, <py_sfcl.CommandDataDefinition object at 0x06138300>) , Command count = 5920 ] 
14:45:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF120>, <py_sfcl.CommandDataDefinition object at 0x06138720>) , Command count = 5921 ] 
14:45:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:12: [ SetCardRCA(0x1, 0xD555) , Command count = 5922 ] 
14:45:12: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:12: Host Frequency set to 25000 KHz
14:45:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:12: ####CSD Registe 2.0 Values####
14:45:12: CSD_STRUCTURE                                 :0x1
14:45:12: Reserv1                                       :0x0
14:45:12: Time Access 1 TAAC                            :0xe
14:45:12: Time Access 2 NSAC*100                        :0x0
14:45:12: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:12: Card Command Classess CCC                     :0x5b5
14:45:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:12: DSR(driver stage register)  DSR_IMP           :0x0
14:45:12: Reserv2                                       :0x0
14:45:12: Device Size C_SIZE                            :0xedc8
14:45:12: Reserv3                                       :0x0
14:45:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:12: Reserv4                                       :0x0
14:45:12: Write Speed Factor R2W_FACTOR                 :0x2
14:45:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:12: FILE_FORMAT_GRP                               :0x0
14:45:12: COPY flag                                     :0x1
14:45:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:12: File_Format                                   :0x0
14:45:12: CRC                                           :0x0
14:45:12: ####CSD Registe Values####  

14:45:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:12: [GetSCRRegisterEntry] Passed
14:45:12: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:12: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:12: Data_Status_After Erases          : 0
14:45:12: CPRM Security Support             : No Security
14:45:12: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:12: Spec. Version                     : Version 3.0X
14:45:12: Extended Security Support         : Extended_Security_Not_Supported
14:45:12: Command Support                   : COMMAND_SUPPORT
14:45:12: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C9C0>, <py_sfcl.CommandDataDefinition object at 0x061389C0>) , Command count = 5923 ] 
14:45:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x06138C00>) , Command count = 5924 ] 
14:45:12: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:12: [ SetBusWidth(0x4) , Command count = 5925 ] 
14:45:12: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:12: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138A50>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5926 ] 
14:45:12: Protected Area Size 0x28000
14:45:12: Bus Width           2
14:45:12: Secure Mode         0
14:45:12: Speed  Class        4
14:45:12: Perf Move           0
14:45:12: Au Size             9
14:45:12: Erase Size          15
14:45:12: Erase Timeout       1
14:45:12: Erase offset        1
14:45:12: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:12: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:12: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5927 ] 
14:45:12: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:12: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:12: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:12: Host Frequency set to 100000 KHz
14:45:12: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:12: ####CSD Registe 2.0 Values####
14:45:12: CSD_STRUCTURE                                 :0x1
14:45:12: Reserv1                                       :0x0
14:45:12: Time Access 1 TAAC                            :0xe
14:45:12: Time Access 2 NSAC*100                        :0x0
14:45:12: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:12: Card Command Classess CCC                     :0x5b5
14:45:12: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:12: DSR(driver stage register)  DSR_IMP           :0x0
14:45:12: Reserv2                                       :0x0
14:45:12: Device Size C_SIZE                            :0xedc8
14:45:12: Reserv3                                       :0x0
14:45:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:12: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:12: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:12: Reserv4                                       :0x0
14:45:12: Write Speed Factor R2W_FACTOR                 :0x2
14:45:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:12: FILE_FORMAT_GRP                               :0x0
14:45:12: COPY flag                                     :0x1
14:45:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:12: File_Format                                   :0x0
14:45:12: CRC                                           :0x0
14:45:12: ####CSD Registe Values####  

14:45:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC30>, <py_sfcl.CommandDataDefinition object at 0x061386C0>) , Command count = 5928 ] 
14:45:12: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052ADED0>, <py_sfcl.CommandDataDefinition object at 0x06138D80>) , Command count = 5929 ] 
14:45:12: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:12: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F6AE to EndLba:0x3B6F72E with One's Pattern
14:45:12: [ WrLbaNoData(0x3B6F6AE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5930 ] 
14:45:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F6AE to EndLba:0x3B6F72E with One's Pattern 

14:45:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F72E to EndLba:0x3B6F7AE with One's Pattern
14:45:12: [ WrLbaNoData(0x3B6F72E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5931 ] 
14:45:12: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F72E to EndLba:0x3B6F7AE with One's Pattern 

14:45:12: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23297 to EndLba:0x2502F with Constant Pattern
14:45:12: [ RdLbaNoData(0x23297, 0x1D98, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5932 ] 
14:45:12: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23297 to EndLba:0x2502F with Constant Pattern 

14:45:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3786
14:45:12: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:45:13: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3E40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061382A0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F630>, <None>) , Command count = 5933 ] 
14:45:13: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:45:13: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:15: Host Frequency set to 25000 KHz
14:45:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:15: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:15: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F060>, 0x0, True) , Command count = 5934 ] 
14:45:15: [GO18_globalSetVolt]### Host voltage value is set.
14:45:15: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:15: [ SetVolt(<py_sfcl.SDVoltage object at 0x061324E0>, 0x0, False) , Command count = 5935 ] 
14:45:15: [GO18_globalSetVolt]### Host voltage value is set.
14:45:15: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5936 ] 
14:45:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5937 ] 
14:45:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:15: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5938 ] 
14:45:15: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F420>, <py_sfcl.CommandDataDefinition object at 0x06138360>) , Command count = 5939 ] 
14:45:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F2D0>, <py_sfcl.CommandDataDefinition object at 0x06138B10>) , Command count = 5940 ] 
14:45:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:15: [ SetCardRCA(0x1, 0xD555) , Command count = 5941 ] 
14:45:15: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:15: Host Frequency set to 25000 KHz
14:45:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:15: ####CSD Registe 2.0 Values####
14:45:15: CSD_STRUCTURE                                 :0x1
14:45:15: Reserv1                                       :0x0
14:45:15: Time Access 1 TAAC                            :0xe
14:45:15: Time Access 2 NSAC*100                        :0x0
14:45:15: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:15: Card Command Classess CCC                     :0x5b5
14:45:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:15: DSR(driver stage register)  DSR_IMP           :0x0
14:45:15: Reserv2                                       :0x0
14:45:15: Device Size C_SIZE                            :0xedc8
14:45:15: Reserv3                                       :0x0
14:45:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:15: Reserv4                                       :0x0
14:45:15: Write Speed Factor R2W_FACTOR                 :0x2
14:45:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:15: FILE_FORMAT_GRP                               :0x0
14:45:15: COPY flag                                     :0x1
14:45:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:15: File_Format                                   :0x0
14:45:15: CRC                                           :0x0
14:45:15: ####CSD Registe Values####  

14:45:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:15: [GetSCRRegisterEntry] Passed
14:45:15: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:15: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:15: Data_Status_After Erases          : 0
14:45:15: CPRM Security Support             : No Security
14:45:15: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:15: Spec. Version                     : Version 3.0X
14:45:15: Extended Security Support         : Extended_Security_Not_Supported
14:45:15: Command Support                   : COMMAND_SUPPORT
14:45:15: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132C00>, <py_sfcl.CommandDataDefinition object at 0x06138F60>) , Command count = 5942 ] 
14:45:15: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3AE0>, <py_sfcl.CommandDataDefinition object at 0x0613FB70>) , Command count = 5943 ] 
14:45:15: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:15: [ SetBusWidth(0x4) , Command count = 5944 ] 
14:45:15: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:15: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F180>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5945 ] 
14:45:15: Protected Area Size 0x28000
14:45:15: Bus Width           2
14:45:15: Secure Mode         0
14:45:15: Speed  Class        4
14:45:15: Perf Move           0
14:45:15: Au Size             9
14:45:15: Erase Size          15
14:45:15: Erase Timeout       1
14:45:15: Erase offset        1
14:45:15: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:15: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:15: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5946 ] 
14:45:15: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:15: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:15: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:15: Host Frequency set to 100000 KHz
14:45:15: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:15: ####CSD Registe 2.0 Values####
14:45:15: CSD_STRUCTURE                                 :0x1
14:45:15: Reserv1                                       :0x0
14:45:15: Time Access 1 TAAC                            :0xe
14:45:15: Time Access 2 NSAC*100                        :0x0
14:45:15: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:15: Card Command Classess CCC                     :0x5b5
14:45:15: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:15: DSR(driver stage register)  DSR_IMP           :0x0
14:45:15: Reserv2                                       :0x0
14:45:15: Device Size C_SIZE                            :0xedc8
14:45:15: Reserv3                                       :0x0
14:45:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:15: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:15: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:15: Reserv4                                       :0x0
14:45:15: Write Speed Factor R2W_FACTOR                 :0x2
14:45:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:15: FILE_FORMAT_GRP                               :0x0
14:45:15: COPY flag                                     :0x1
14:45:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:15: File_Format                                   :0x0
14:45:15: CRC                                           :0x0
14:45:15: ####CSD Registe Values####  

14:45:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF270>, <py_sfcl.CommandDataDefinition object at 0x052C1F60>) , Command count = 5947 ] 
14:45:15: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FAB0>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 5948 ] 
14:45:15: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:15: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E733 to EndLba:0x3B6E7B3 with One's Pattern
14:45:15: [ WrLbaNoData(0x3B6E733, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5949 ] 
14:45:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E733 to EndLba:0x3B6E7B3 with One's Pattern 

14:45:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E7B3 to EndLba:0x3B6E833 with One's Pattern
14:45:15: [ WrLbaNoData(0x3B6E7B3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5950 ] 
14:45:15: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6E7B3 to EndLba:0x3B6E833 with One's Pattern 

14:45:15: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :MultipleRead to the card at StartLba:0x23299 to EndLba:0x2502F with Constant Pattern
14:45:15: [ RdLbaNoData(0x23299, 0x1D96, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0, True) , Command count = 5951 ] 
14:45:15: [DVTCommonLib]### ReadWithFPGAPattern[INFO] :Done MultipleRead from StartLba: 0x23299 to EndLba:0x2502F with Constant Pattern 

14:45:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Inner loop Count 3785
14:45:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss called
14:45:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052577E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E34E0>, <py_sfcl.PySEnhancedCmdData object at 0x0613F510>, <None>) , Command count = 5952 ] 
14:45:15: STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test[INFO] ### Multiple Write with PowerLoss compledted
14:45:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:17: Failed Running script <module 'STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST53_DVT_ST_PowerLoss_2_21_Stress_Test.pyc'> with error  
14:45:17: ########################################
14:45:17: ########################################
14:45:17: Stated Running script STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump 
14:45:17: ########################################
14:45:17: ###### Running STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump Test 
14:45:17: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:19: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:20: Host Frequency set to 25000 KHz
14:45:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:20: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:20: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132A20>, 0x0, True) , Command count = 5953 ] 
14:45:20: [GO18_globalSetVolt]### Host voltage value is set.
14:45:20: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:20: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C30>, 0x0, False) , Command count = 5954 ] 
14:45:20: [GO18_globalSetVolt]### Host voltage value is set.
14:45:20: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5955 ] 
14:45:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5956 ] 
14:45:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:20: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5957 ] 
14:45:20: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFF60>, <py_sfcl.CommandDataDefinition object at 0x0613F450>) , Command count = 5958 ] 
14:45:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F030>, <py_sfcl.CommandDataDefinition object at 0x06138A50>) , Command count = 5959 ] 
14:45:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:20: [ SetCardRCA(0x1, 0xD555) , Command count = 5960 ] 
14:45:20: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:20: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:20: Host Frequency set to 25000 KHz
14:45:20: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:20: ####CSD Registe 2.0 Values####
14:45:20: CSD_STRUCTURE                                 :0x1
14:45:20: Reserv1                                       :0x0
14:45:20: Time Access 1 TAAC                            :0xe
14:45:20: Time Access 2 NSAC*100                        :0x0
14:45:20: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:20: Card Command Classess CCC                     :0x5b5
14:45:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:20: DSR(driver stage register)  DSR_IMP           :0x0
14:45:20: Reserv2                                       :0x0
14:45:20: Device Size C_SIZE                            :0xedc8
14:45:20: Reserv3                                       :0x0
14:45:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:20: Reserv4                                       :0x0
14:45:20: Write Speed Factor R2W_FACTOR                 :0x2
14:45:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:20: FILE_FORMAT_GRP                               :0x0
14:45:20: COPY flag                                     :0x1
14:45:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:20: File_Format                                   :0x0
14:45:20: CRC                                           :0x0
14:45:20: ####CSD Registe Values####  

14:45:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:20: [GetSCRRegisterEntry] Passed
14:45:20: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:20: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:20: Data_Status_After Erases          : 0
14:45:20: CPRM Security Support             : No Security
14:45:20: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:20: Spec. Version                     : Version 3.0X
14:45:20: Extended Security Support         : Extended_Security_Not_Supported
14:45:20: Command Support                   : COMMAND_SUPPORT
14:45:20: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B70>, <py_sfcl.CommandDataDefinition object at 0x06138330>) , Command count = 5961 ] 
14:45:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C900>, <py_sfcl.CommandDataDefinition object at 0x0525E180>) , Command count = 5962 ] 
14:45:20: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:20: [ SetBusWidth(0x4) , Command count = 5963 ] 
14:45:20: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:20: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F390>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5964 ] 
14:45:20: Protected Area Size 0x28000
14:45:20: Bus Width           2
14:45:20: Secure Mode         0
14:45:20: Speed  Class        4
14:45:20: Perf Move           0
14:45:20: Au Size             9
14:45:20: Erase Size          15
14:45:20: Erase Timeout       1
14:45:20: Erase offset        1
14:45:20: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:20: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:20: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5965 ] 
14:45:20: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:20: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:20: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:20: Host Frequency set to 100000 KHz
14:45:20: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:20: ####CSD Registe 2.0 Values####
14:45:20: CSD_STRUCTURE                                 :0x1
14:45:20: Reserv1                                       :0x0
14:45:20: Time Access 1 TAAC                            :0xe
14:45:20: Time Access 2 NSAC*100                        :0x0
14:45:20: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:20: Card Command Classess CCC                     :0x5b5
14:45:20: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:20: DSR(driver stage register)  DSR_IMP           :0x0
14:45:20: Reserv2                                       :0x0
14:45:20: Device Size C_SIZE                            :0xedc8
14:45:20: Reserv3                                       :0x0
14:45:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:20: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:20: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:20: Reserv4                                       :0x0
14:45:20: Write Speed Factor R2W_FACTOR                 :0x2
14:45:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:20: FILE_FORMAT_GRP                               :0x0
14:45:20: COPY flag                                     :0x1
14:45:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:20: File_Format                                   :0x0
14:45:20: CRC                                           :0x0
14:45:20: ####CSD Registe Values####  

14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39C0>, <py_sfcl.CommandDataDefinition object at 0x052AFC30>) , Command count = 5966 ] 
14:45:20: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F240>, <py_sfcl.CommandDataDefinition object at 0x0613F180>) , Command count = 5967 ] 
14:45:21: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:21: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:21: ###STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump [Info] : TEST PREREQUISITES 
14:45:21: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x0 to EndLba:0x1D4000 with Constant Pattern
14:45:55: [ WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, True, False, False, False, 0x0, False, 0x0) , Command count = 5968 ] 
14:45:55: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x0 to EndLba:0x1D4000 with Constant Pattern 

14:45:55: ###STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump [Info] : START TEST 
14:45:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Outer loop Count 1023
14:45:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 8
14:45:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612ED80>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EBA0>, <py_sfcl.PySEnhancedCmdData object at 0x0612EC60>, <None>, <py_sfcl.Command23 object at 0x0611C1E0>) , Command count = 5969 ] 
14:45:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:45:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0518AE70>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F960>, <py_sfcl.PySEnhancedCmdData object at 0x0611CF00>, <None>) , Command count = 5970 ] 
14:45:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:45:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:45:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:57: Host Frequency set to 25000 KHz
14:45:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:45:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:45:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x0529B4B0>, 0x0, True) , Command count = 5971 ] 
14:45:57: [GO18_globalSetVolt]### Host voltage value is set.
14:45:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:45:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1C60>, 0x0, False) , Command count = 5972 ] 
14:45:57: [GO18_globalSetVolt]### Host voltage value is set.
14:45:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5973 ] 
14:45:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:45:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5974 ] 
14:45:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:45:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:45:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:45:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:45:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:45:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5975 ] 
14:45:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:45:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:45:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF1B0>, <py_sfcl.CommandDataDefinition object at 0x0611CA20>) , Command count = 5976 ] 
14:45:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:45:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F060>, <py_sfcl.CommandDataDefinition object at 0x06138ED0>) , Command count = 5977 ] 
14:45:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:45:57: [ SetCardRCA(0x1, 0xD555) , Command count = 5978 ] 
14:45:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:45:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:45:57: Host Frequency set to 25000 KHz
14:45:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:45:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:57: ####CSD Registe 2.0 Values####
14:45:57: CSD_STRUCTURE                                 :0x1
14:45:57: Reserv1                                       :0x0
14:45:57: Time Access 1 TAAC                            :0xe
14:45:57: Time Access 2 NSAC*100                        :0x0
14:45:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:45:57: Card Command Classess CCC                     :0x5b5
14:45:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:57: DSR(driver stage register)  DSR_IMP           :0x0
14:45:57: Reserv2                                       :0x0
14:45:57: Device Size C_SIZE                            :0xedc8
14:45:57: Reserv3                                       :0x0
14:45:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:57: Reserv4                                       :0x0
14:45:57: Write Speed Factor R2W_FACTOR                 :0x2
14:45:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:57: FILE_FORMAT_GRP                               :0x0
14:45:57: COPY flag                                     :0x1
14:45:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:57: File_Format                                   :0x0
14:45:57: CRC                                           :0x0
14:45:57: ####CSD Registe Values####  

14:45:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:45:57: [GetSCRRegisterEntry] Passed
14:45:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:45:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:45:57: Data_Status_After Erases          : 0
14:45:57: CPRM Security Support             : No Security
14:45:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:45:57: Spec. Version                     : Version 3.0X
14:45:57: Extended Security Support         : Extended_Security_Not_Supported
14:45:57: Command Support                   : COMMAND_SUPPORT
14:45:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:45:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1DE0>, <py_sfcl.CommandDataDefinition object at 0x052BB930>) , Command count = 5979 ] 
14:45:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:45:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA20>, <py_sfcl.CommandDataDefinition object at 0x06145DE0>) , Command count = 5980 ] 
14:45:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:45:57: [ SetBusWidth(0x4) , Command count = 5981 ] 
14:45:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:45:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060E3CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 5982 ] 
14:45:57: Protected Area Size 0x28000
14:45:57: Bus Width           2
14:45:57: Secure Mode         0
14:45:57: Speed  Class        4
14:45:57: Perf Move           0
14:45:57: Au Size             9
14:45:57: Erase Size          15
14:45:57: Erase Timeout       1
14:45:57: Erase offset        1
14:45:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:45:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:45:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:45:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 5983 ] 
14:45:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:45:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:45:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:45:57: Host Frequency set to 100000 KHz
14:45:57: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:45:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:45:57: ####CSD Registe 2.0 Values####
14:45:57: CSD_STRUCTURE                                 :0x1
14:45:57: Reserv1                                       :0x0
14:45:57: Time Access 1 TAAC                            :0xe
14:45:58: Time Access 2 NSAC*100                        :0x0
14:45:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:45:58: Card Command Classess CCC                     :0x5b5
14:45:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:45:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:45:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:45:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:45:58: DSR(driver stage register)  DSR_IMP           :0x0
14:45:58: Reserv2                                       :0x0
14:45:58: Device Size C_SIZE                            :0xedc8
14:45:58: Reserv3                                       :0x0
14:45:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:45:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:45:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:45:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:45:58: Reserv4                                       :0x0
14:45:58: Write Speed Factor R2W_FACTOR                 :0x2
14:45:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:45:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:45:58: FILE_FORMAT_GRP                               :0x0
14:45:58: COPY flag                                     :0x1
14:45:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:45:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:45:58: File_Format                                   :0x0
14:45:58: CRC                                           :0x0
14:45:58: ####CSD Registe Values####  

14:45:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061387B0>, <py_sfcl.CommandDataDefinition object at 0x0613F0F0>) , Command count = 5984 ] 
14:45:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:45:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606F030>, <py_sfcl.CommandDataDefinition object at 0x06138E70>) , Command count = 5985 ] 
14:45:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:45:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:45:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:45:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71E94 to EndLba:0x3B71F14 with One's Pattern
14:45:58: [ WrLbaNoData(0x3B71E94, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5986 ] 
14:45:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71E94 to EndLba:0x3B71F14 with One's Pattern 

14:45:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71F14 to EndLba:0x3B71F94 with One's Pattern
14:45:58: [ WrLbaNoData(0x3B71F14, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 5987 ] 
14:45:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71F14 to EndLba:0x3B71F94 with One's Pattern 

14:45:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1F90>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3EA0>, <py_sfcl.PySEnhancedCmdData object at 0x060E37B0>, <None>, <py_sfcl.Command23 object at 0x0613FB10>) , Command count = 5988 ] 
14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 7
14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:45:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F210>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CFC0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CAB0>, <None>, <py_sfcl.Command23 object at 0x0611CEA0>) , Command count = 5989 ] 
14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:45:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F4E0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C960>, <py_sfcl.PySEnhancedCmdData object at 0x06138DE0>, <None>) , Command count = 5990 ] 
14:45:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:45:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:01: Host Frequency set to 25000 KHz
14:46:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1F30>, 0x0, True) , Command count = 5991 ] 
14:46:01: [GO18_globalSetVolt]### Host voltage value is set.
14:46:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F090>, 0x0, False) , Command count = 5992 ] 
14:46:01: [GO18_globalSetVolt]### Host voltage value is set.
14:46:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 5993 ] 
14:46:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 5994 ] 
14:46:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 5995 ] 
14:46:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF60>, <py_sfcl.CommandDataDefinition object at 0x052BBFC0>) , Command count = 5996 ] 
14:46:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F6F0>, <py_sfcl.CommandDataDefinition object at 0x0611C0F0>) , Command count = 5997 ] 
14:46:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:01: [ SetCardRCA(0x1, 0xD555) , Command count = 5998 ] 
14:46:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:01: Host Frequency set to 25000 KHz
14:46:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:01: ####CSD Registe 2.0 Values####
14:46:01: CSD_STRUCTURE                                 :0x1
14:46:01: Reserv1                                       :0x0
14:46:01: Time Access 1 TAAC                            :0xe
14:46:01: Time Access 2 NSAC*100                        :0x0
14:46:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:01: Card Command Classess CCC                     :0x5b5
14:46:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:01: DSR(driver stage register)  DSR_IMP           :0x0
14:46:01: Reserv2                                       :0x0
14:46:01: Device Size C_SIZE                            :0xedc8
14:46:01: Reserv3                                       :0x0
14:46:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:01: Reserv4                                       :0x0
14:46:01: Write Speed Factor R2W_FACTOR                 :0x2
14:46:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:01: FILE_FORMAT_GRP                               :0x0
14:46:01: COPY flag                                     :0x1
14:46:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:01: File_Format                                   :0x0
14:46:01: CRC                                           :0x0
14:46:01: ####CSD Registe Values####  

14:46:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:01: [GetSCRRegisterEntry] Passed
14:46:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:01: Data_Status_After Erases          : 0
14:46:01: CPRM Security Support             : No Security
14:46:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:01: Spec. Version                     : Version 3.0X
14:46:01: Extended Security Support         : Extended_Security_Not_Supported
14:46:01: Command Support                   : COMMAND_SUPPORT
14:46:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F990>, <py_sfcl.CommandDataDefinition object at 0x0611CB40>) , Command count = 5999 ] 
14:46:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F480>, <py_sfcl.CommandDataDefinition object at 0x06129A80>) , Command count = 6000 ] 
14:46:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:01: [ SetBusWidth(0x4) , Command count = 6001 ] 
14:46:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129990>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6002 ] 
14:46:01: Protected Area Size 0x28000
14:46:01: Bus Width           2
14:46:01: Secure Mode         0
14:46:01: Speed  Class        4
14:46:01: Perf Move           0
14:46:01: Au Size             9
14:46:01: Erase Size          15
14:46:01: Erase Timeout       1
14:46:01: Erase offset        1
14:46:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6003 ] 
14:46:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:01: Host Frequency set to 100000 KHz
14:46:01: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:01: ####CSD Registe 2.0 Values####
14:46:01: CSD_STRUCTURE                                 :0x1
14:46:01: Reserv1                                       :0x0
14:46:01: Time Access 1 TAAC                            :0xe
14:46:02: Time Access 2 NSAC*100                        :0x0
14:46:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:02: Card Command Classess CCC                     :0x5b5
14:46:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:02: DSR(driver stage register)  DSR_IMP           :0x0
14:46:02: Reserv2                                       :0x0
14:46:02: Device Size C_SIZE                            :0xedc8
14:46:02: Reserv3                                       :0x0
14:46:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:02: Reserv4                                       :0x0
14:46:02: Write Speed Factor R2W_FACTOR                 :0x2
14:46:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:02: FILE_FORMAT_GRP                               :0x0
14:46:02: COPY flag                                     :0x1
14:46:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:02: File_Format                                   :0x0
14:46:02: CRC                                           :0x0
14:46:02: ####CSD Registe Values####  

14:46:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F300>, <py_sfcl.CommandDataDefinition object at 0x0613F7E0>) , Command count = 6004 ] 
14:46:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129240>, <py_sfcl.CommandDataDefinition object at 0x0611C1B0>) , Command count = 6005 ] 
14:46:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72247 to EndLba:0x3B722C7 with One's Pattern
14:46:02: [ WrLbaNoData(0x3B72247, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6006 ] 
14:46:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72247 to EndLba:0x3B722C7 with One's Pattern 

14:46:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B722C7 to EndLba:0x3B72347 with One's Pattern
14:46:02: [ WrLbaNoData(0x3B722C7, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6007 ] 
14:46:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B722C7 to EndLba:0x3B72347 with One's Pattern 

14:46:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:02: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052C1E70>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C780>, <py_sfcl.PySEnhancedCmdData object at 0x0611CF30>, <None>, <py_sfcl.Command23 object at 0x0613F210>) , Command count = 6008 ] 
14:46:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 6
14:46:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129300>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129DE0>, <py_sfcl.PySEnhancedCmdData object at 0x060E3690>, <None>, <py_sfcl.Command23 object at 0x060E39F0>) , Command count = 6009 ] 
14:46:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061458D0>, <py_sfcl.PySEnhancedCmdData object at 0x061459F0>, <None>) , Command count = 6010 ] 
14:46:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:05: Host Frequency set to 25000 KHz
14:46:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F660>, 0x0, True) , Command count = 6011 ] 
14:46:05: [GO18_globalSetVolt]### Host voltage value is set.
14:46:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F4E0>, 0x0, False) , Command count = 6012 ] 
14:46:05: [GO18_globalSetVolt]### Host voltage value is set.
14:46:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6013 ] 
14:46:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6014 ] 
14:46:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6015 ] 
14:46:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D20>, <py_sfcl.CommandDataDefinition object at 0x06129840>) , Command count = 6016 ] 
14:46:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F540>, <py_sfcl.CommandDataDefinition object at 0x060E3780>) , Command count = 6017 ] 
14:46:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:05: [ SetCardRCA(0x1, 0xD555) , Command count = 6018 ] 
14:46:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:05: Host Frequency set to 25000 KHz
14:46:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:05: ####CSD Registe 2.0 Values####
14:46:05: CSD_STRUCTURE                                 :0x1
14:46:05: Reserv1                                       :0x0
14:46:05: Time Access 1 TAAC                            :0xe
14:46:05: Time Access 2 NSAC*100                        :0x0
14:46:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:05: Card Command Classess CCC                     :0x5b5
14:46:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:05: DSR(driver stage register)  DSR_IMP           :0x0
14:46:05: Reserv2                                       :0x0
14:46:05: Device Size C_SIZE                            :0xedc8
14:46:05: Reserv3                                       :0x0
14:46:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:05: Reserv4                                       :0x0
14:46:05: Write Speed Factor R2W_FACTOR                 :0x2
14:46:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:05: FILE_FORMAT_GRP                               :0x0
14:46:05: COPY flag                                     :0x1
14:46:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:05: File_Format                                   :0x0
14:46:05: CRC                                           :0x0
14:46:05: ####CSD Registe Values####  

14:46:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:05: [GetSCRRegisterEntry] Passed
14:46:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:05: Data_Status_After Erases          : 0
14:46:05: CPRM Security Support             : No Security
14:46:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:05: Spec. Version                     : Version 3.0X
14:46:05: Extended Security Support         : Extended_Security_Not_Supported
14:46:05: Command Support                   : COMMAND_SUPPORT
14:46:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291B0>, <py_sfcl.CommandDataDefinition object at 0x0611CC30>) , Command count = 6019 ] 
14:46:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE70>, <py_sfcl.CommandDataDefinition object at 0x0611C0C0>) , Command count = 6020 ] 
14:46:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:05: [ SetBusWidth(0x4) , Command count = 6021 ] 
14:46:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C120>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6022 ] 
14:46:05: Protected Area Size 0x28000
14:46:05: Bus Width           2
14:46:05: Secure Mode         0
14:46:05: Speed  Class        4
14:46:05: Perf Move           0
14:46:05: Au Size             9
14:46:05: Erase Size          15
14:46:05: Erase Timeout       1
14:46:05: Erase offset        1
14:46:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6023 ] 
14:46:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:05: Host Frequency set to 100000 KHz
14:46:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:05: ####CSD Registe 2.0 Values####
14:46:05: CSD_STRUCTURE                                 :0x1
14:46:05: Reserv1                                       :0x0
14:46:05: Time Access 1 TAAC                            :0xe
14:46:06: Time Access 2 NSAC*100                        :0x0
14:46:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:06: Card Command Classess CCC                     :0x5b5
14:46:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:06: DSR(driver stage register)  DSR_IMP           :0x0
14:46:06: Reserv2                                       :0x0
14:46:06: Device Size C_SIZE                            :0xedc8
14:46:06: Reserv3                                       :0x0
14:46:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:06: Reserv4                                       :0x0
14:46:06: Write Speed Factor R2W_FACTOR                 :0x2
14:46:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:06: FILE_FORMAT_GRP                               :0x0
14:46:06: COPY flag                                     :0x1
14:46:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:06: File_Format                                   :0x0
14:46:06: CRC                                           :0x0
14:46:06: ####CSD Registe Values####  

14:46:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7B0>, <py_sfcl.CommandDataDefinition object at 0x06129990>) , Command count = 6024 ] 
14:46:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129660>, <py_sfcl.CommandDataDefinition object at 0x061455A0>) , Command count = 6025 ] 
14:46:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E33 to EndLba:0x3B70EB3 with One's Pattern
14:46:06: [ WrLbaNoData(0x3B70E33, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6026 ] 
14:46:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E33 to EndLba:0x3B70EB3 with One's Pattern 

14:46:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70EB3 to EndLba:0x3B70F33 with One's Pattern
14:46:06: [ WrLbaNoData(0x3B70EB3, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6027 ] 
14:46:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70EB3 to EndLba:0x3B70F33 with One's Pattern 

14:46:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:06: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E2A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129CF0>, <py_sfcl.PySEnhancedCmdData object at 0x06129900>, <None>, <py_sfcl.Command23 object at 0x060E3690>) , Command count = 6028 ] 
14:46:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 5
14:46:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F3C0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061454B0>, <py_sfcl.PySEnhancedCmdData object at 0x061450C0>, <None>, <py_sfcl.Command23 object at 0x06129780>) , Command count = 6029 ] 
14:46:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FE40>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145900>, <py_sfcl.PySEnhancedCmdData object at 0x06145A80>, <None>) , Command count = 6030 ] 
14:46:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:09: Host Frequency set to 25000 KHz
14:46:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0606F7E0>, 0x0, True) , Command count = 6031 ] 
14:46:09: [GO18_globalSetVolt]### Host voltage value is set.
14:46:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C600>, 0x0, False) , Command count = 6032 ] 
14:46:09: [GO18_globalSetVolt]### Host voltage value is set.
14:46:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6033 ] 
14:46:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6034 ] 
14:46:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6035 ] 
14:46:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061291E0>, <py_sfcl.CommandDataDefinition object at 0x06129D20>) , Command count = 6036 ] 
14:46:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3570>, <py_sfcl.CommandDataDefinition object at 0x061295D0>) , Command count = 6037 ] 
14:46:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:09: [ SetCardRCA(0x1, 0xD555) , Command count = 6038 ] 
14:46:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:09: Host Frequency set to 25000 KHz
14:46:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:09: ####CSD Registe 2.0 Values####
14:46:09: CSD_STRUCTURE                                 :0x1
14:46:09: Reserv1                                       :0x0
14:46:09: Time Access 1 TAAC                            :0xe
14:46:09: Time Access 2 NSAC*100                        :0x0
14:46:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:09: Card Command Classess CCC                     :0x5b5
14:46:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:09: DSR(driver stage register)  DSR_IMP           :0x0
14:46:09: Reserv2                                       :0x0
14:46:09: Device Size C_SIZE                            :0xedc8
14:46:09: Reserv3                                       :0x0
14:46:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:09: Reserv4                                       :0x0
14:46:09: Write Speed Factor R2W_FACTOR                 :0x2
14:46:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:09: FILE_FORMAT_GRP                               :0x0
14:46:09: COPY flag                                     :0x1
14:46:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:09: File_Format                                   :0x0
14:46:09: CRC                                           :0x0
14:46:09: ####CSD Registe Values####  

14:46:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:09: [GetSCRRegisterEntry] Passed
14:46:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:09: Data_Status_After Erases          : 0
14:46:09: CPRM Security Support             : No Security
14:46:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:09: Spec. Version                     : Version 3.0X
14:46:09: Extended Security Support         : Extended_Security_Not_Supported
14:46:09: Command Support                   : COMMAND_SUPPORT
14:46:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C930>, <py_sfcl.CommandDataDefinition object at 0x06129AE0>) , Command count = 6039 ] 
14:46:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061295A0>, <py_sfcl.CommandDataDefinition object at 0x06129870>) , Command count = 6040 ] 
14:46:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:09: [ SetBusWidth(0x4) , Command count = 6041 ] 
14:46:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129720>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6042 ] 
14:46:09: Protected Area Size 0x28000
14:46:09: Bus Width           2
14:46:09: Secure Mode         0
14:46:09: Speed  Class        4
14:46:09: Perf Move           0
14:46:09: Au Size             9
14:46:09: Erase Size          15
14:46:09: Erase Timeout       1
14:46:09: Erase offset        1
14:46:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6043 ] 
14:46:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:09: Host Frequency set to 100000 KHz
14:46:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:09: ####CSD Registe 2.0 Values####
14:46:09: CSD_STRUCTURE                                 :0x1
14:46:09: Reserv1                                       :0x0
14:46:09: Time Access 1 TAAC                            :0xe
14:46:10: Time Access 2 NSAC*100                        :0x0
14:46:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:10: Card Command Classess CCC                     :0x5b5
14:46:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:10: DSR(driver stage register)  DSR_IMP           :0x0
14:46:10: Reserv2                                       :0x0
14:46:10: Device Size C_SIZE                            :0xedc8
14:46:10: Reserv3                                       :0x0
14:46:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:10: Reserv4                                       :0x0
14:46:10: Write Speed Factor R2W_FACTOR                 :0x2
14:46:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:10: FILE_FORMAT_GRP                               :0x0
14:46:10: COPY flag                                     :0x1
14:46:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:10: File_Format                                   :0x0
14:46:10: CRC                                           :0x0
14:46:10: ####CSD Registe Values####  

14:46:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06129390>) , Command count = 6044 ] 
14:46:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CC60>, <py_sfcl.CommandDataDefinition object at 0x06129030>) , Command count = 6045 ] 
14:46:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70A9A to EndLba:0x3B70B1A with One's Pattern
14:46:10: [ WrLbaNoData(0x3B70A9A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6046 ] 
14:46:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70A9A to EndLba:0x3B70B1A with One's Pattern 

14:46:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70B1A to EndLba:0x3B70B9A with One's Pattern
14:46:10: [ WrLbaNoData(0x3B70B1A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6047 ] 
14:46:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70B1A to EndLba:0x3B70B9A with One's Pattern 

14:46:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:10: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:10: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C990>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129810>, <py_sfcl.PySEnhancedCmdData object at 0x061293F0>, <None>, <py_sfcl.Command23 object at 0x0613F3C0>) , Command count = 6048 ] 
14:46:10: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:10: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 4
14:46:10: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C4B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145D50>, <py_sfcl.PySEnhancedCmdData object at 0x061458D0>, <None>, <py_sfcl.Command23 object at 0x06129270>) , Command count = 6049 ] 
14:46:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611CA80>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145B70>, <py_sfcl.PySEnhancedCmdData object at 0x061456C0>, <None>) , Command count = 6050 ] 
14:46:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:13: Host Frequency set to 25000 KHz
14:46:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CCC0>, 0x0, True) , Command count = 6051 ] 
14:46:13: [GO18_globalSetVolt]### Host voltage value is set.
14:46:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C090>, 0x0, False) , Command count = 6052 ] 
14:46:13: [GO18_globalSetVolt]### Host voltage value is set.
14:46:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6053 ] 
14:46:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6054 ] 
14:46:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6055 ] 
14:46:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E330>, <py_sfcl.CommandDataDefinition object at 0x06129D50>) , Command count = 6056 ] 
14:46:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C540>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 6057 ] 
14:46:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:13: [ SetCardRCA(0x1, 0xD555) , Command count = 6058 ] 
14:46:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:13: Host Frequency set to 25000 KHz
14:46:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:13: ####CSD Registe 2.0 Values####
14:46:13: CSD_STRUCTURE                                 :0x1
14:46:13: Reserv1                                       :0x0
14:46:13: Time Access 1 TAAC                            :0xe
14:46:13: Time Access 2 NSAC*100                        :0x0
14:46:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:13: Card Command Classess CCC                     :0x5b5
14:46:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:13: DSR(driver stage register)  DSR_IMP           :0x0
14:46:13: Reserv2                                       :0x0
14:46:13: Device Size C_SIZE                            :0xedc8
14:46:13: Reserv3                                       :0x0
14:46:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:13: Reserv4                                       :0x0
14:46:13: Write Speed Factor R2W_FACTOR                 :0x2
14:46:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:13: FILE_FORMAT_GRP                               :0x0
14:46:13: COPY flag                                     :0x1
14:46:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:13: File_Format                                   :0x0
14:46:13: CRC                                           :0x0
14:46:13: ####CSD Registe Values####  

14:46:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:13: [GetSCRRegisterEntry] Passed
14:46:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:13: Data_Status_After Erases          : 0
14:46:13: CPRM Security Support             : No Security
14:46:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:13: Spec. Version                     : Version 3.0X
14:46:13: Extended Security Support         : Extended_Security_Not_Supported
14:46:13: Command Support                   : COMMAND_SUPPORT
14:46:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C7E0>, <py_sfcl.CommandDataDefinition object at 0x06129540>) , Command count = 6059 ] 
14:46:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CE40>, <py_sfcl.CommandDataDefinition object at 0x06129A50>) , Command count = 6060 ] 
14:46:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:13: [ SetBusWidth(0x4) , Command count = 6061 ] 
14:46:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06129930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6062 ] 
14:46:13: Protected Area Size 0x28000
14:46:13: Bus Width           2
14:46:13: Secure Mode         0
14:46:13: Speed  Class        4
14:46:13: Perf Move           0
14:46:13: Au Size             9
14:46:13: Erase Size          15
14:46:13: Erase Timeout       1
14:46:13: Erase offset        1
14:46:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6063 ] 
14:46:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:13: Host Frequency set to 100000 KHz
14:46:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:13: ####CSD Registe 2.0 Values####
14:46:13: CSD_STRUCTURE                                 :0x1
14:46:13: Reserv1                                       :0x0
14:46:13: Time Access 1 TAAC                            :0xe
14:46:14: Time Access 2 NSAC*100                        :0x0
14:46:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:14: Card Command Classess CCC                     :0x5b5
14:46:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:14: DSR(driver stage register)  DSR_IMP           :0x0
14:46:14: Reserv2                                       :0x0
14:46:14: Device Size C_SIZE                            :0xedc8
14:46:14: Reserv3                                       :0x0
14:46:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:14: Reserv4                                       :0x0
14:46:14: Write Speed Factor R2W_FACTOR                 :0x2
14:46:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:14: FILE_FORMAT_GRP                               :0x0
14:46:14: COPY flag                                     :0x1
14:46:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:14: File_Format                                   :0x0
14:46:14: CRC                                           :0x0
14:46:14: ####CSD Registe Values####  

14:46:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061292D0>, <py_sfcl.CommandDataDefinition object at 0x06129720>) , Command count = 6064 ] 
14:46:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132030>, <py_sfcl.CommandDataDefinition object at 0x06132750>) , Command count = 6065 ] 
14:46:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB55 to EndLba:0x3B6EBD5 with One's Pattern
14:46:14: [ WrLbaNoData(0x3B6EB55, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6066 ] 
14:46:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB55 to EndLba:0x3B6EBD5 with One's Pattern 

14:46:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EBD5 to EndLba:0x3B6EC55 with One's Pattern
14:46:14: [ WrLbaNoData(0x3B6EBD5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6067 ] 
14:46:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EBD5 to EndLba:0x3B6EC55 with One's Pattern 

14:46:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:14: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E750>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612ECF0>, <py_sfcl.PySEnhancedCmdData object at 0x0612ECC0>, <None>, <py_sfcl.Command23 object at 0x0611C4B0>) , Command count = 6068 ] 
14:46:14: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:14: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 3
14:46:14: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:14: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145060>, <py_sfcl.PySEnhancedCmdData object at 0x06145510>, <None>, <py_sfcl.Command23 object at 0x0612E0C0>) , Command count = 6069 ] 
14:46:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138600>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129D80>, <py_sfcl.PySEnhancedCmdData object at 0x06129630>, <None>) , Command count = 6070 ] 
14:46:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:17: Host Frequency set to 25000 KHz
14:46:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E180>, 0x0, True) , Command count = 6071 ] 
14:46:17: [GO18_globalSetVolt]### Host voltage value is set.
14:46:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C8D0>, 0x0, False) , Command count = 6072 ] 
14:46:17: [GO18_globalSetVolt]### Host voltage value is set.
14:46:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6073 ] 
14:46:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6074 ] 
14:46:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6075 ] 
14:46:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F7B0>, <py_sfcl.CommandDataDefinition object at 0x06129AB0>) , Command count = 6076 ] 
14:46:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129C60>, <py_sfcl.CommandDataDefinition object at 0x0612E5A0>) , Command count = 6077 ] 
14:46:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:17: [ SetCardRCA(0x1, 0xD555) , Command count = 6078 ] 
14:46:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:17: Host Frequency set to 25000 KHz
14:46:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:17: ####CSD Registe 2.0 Values####
14:46:17: CSD_STRUCTURE                                 :0x1
14:46:17: Reserv1                                       :0x0
14:46:17: Time Access 1 TAAC                            :0xe
14:46:17: Time Access 2 NSAC*100                        :0x0
14:46:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:17: Card Command Classess CCC                     :0x5b5
14:46:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:17: DSR(driver stage register)  DSR_IMP           :0x0
14:46:17: Reserv2                                       :0x0
14:46:17: Device Size C_SIZE                            :0xedc8
14:46:17: Reserv3                                       :0x0
14:46:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:17: Reserv4                                       :0x0
14:46:17: Write Speed Factor R2W_FACTOR                 :0x2
14:46:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:17: FILE_FORMAT_GRP                               :0x0
14:46:17: COPY flag                                     :0x1
14:46:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:17: File_Format                                   :0x0
14:46:17: CRC                                           :0x0
14:46:17: ####CSD Registe Values####  

14:46:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:17: [GetSCRRegisterEntry] Passed
14:46:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:17: Data_Status_After Erases          : 0
14:46:17: CPRM Security Support             : No Security
14:46:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:17: Spec. Version                     : Version 3.0X
14:46:17: Extended Security Support         : Extended_Security_Not_Supported
14:46:17: Command Support                   : COMMAND_SUPPORT
14:46:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CD20>, <py_sfcl.CommandDataDefinition object at 0x0612EA80>) , Command count = 6079 ] 
14:46:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EDB0>, <py_sfcl.CommandDataDefinition object at 0x0613F750>) , Command count = 6080 ] 
14:46:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:17: [ SetBusWidth(0x4) , Command count = 6081 ] 
14:46:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132690>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6082 ] 
14:46:17: Protected Area Size 0x28000
14:46:17: Bus Width           2
14:46:17: Secure Mode         0
14:46:17: Speed  Class        4
14:46:17: Perf Move           0
14:46:17: Au Size             9
14:46:17: Erase Size          15
14:46:17: Erase Timeout       1
14:46:17: Erase offset        1
14:46:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6083 ] 
14:46:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:17: Host Frequency set to 100000 KHz
14:46:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:17: ####CSD Registe 2.0 Values####
14:46:17: CSD_STRUCTURE                                 :0x1
14:46:17: Reserv1                                       :0x0
14:46:17: Time Access 1 TAAC                            :0xe
14:46:17: Time Access 2 NSAC*100                        :0x0
14:46:17: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:17: Card Command Classess CCC                     :0x5b5
14:46:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:17: DSR(driver stage register)  DSR_IMP           :0x0
14:46:17: Reserv2                                       :0x0
14:46:17: Device Size C_SIZE                            :0xedc8
14:46:17: Reserv3                                       :0x0
14:46:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:17: Reserv4                                       :0x0
14:46:18: Write Speed Factor R2W_FACTOR                 :0x2
14:46:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:18: FILE_FORMAT_GRP                               :0x0
14:46:18: COPY flag                                     :0x1
14:46:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:18: File_Format                                   :0x0
14:46:18: CRC                                           :0x0
14:46:18: ####CSD Registe Values####  

14:46:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E390>, <py_sfcl.CommandDataDefinition object at 0x0612E2D0>) , Command count = 6084 ] 
14:46:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132D80>, <py_sfcl.CommandDataDefinition object at 0x061320F0>) , Command count = 6085 ] 
14:46:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EADE to EndLba:0x3B6EB5E with One's Pattern
14:46:18: [ WrLbaNoData(0x3B6EADE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6086 ] 
14:46:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EADE to EndLba:0x3B6EB5E with One's Pattern 

14:46:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB5E to EndLba:0x3B6EBDE with One's Pattern
14:46:18: [ WrLbaNoData(0x3B6EB5E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6087 ] 
14:46:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB5E to EndLba:0x3B6EBDE with One's Pattern 

14:46:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:18: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3960>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613FA50>, <py_sfcl.PySEnhancedCmdData object at 0x061328D0>, <None>, <py_sfcl.Command23 object at 0x0612E150>) , Command count = 6088 ] 
14:46:18: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:18: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 2
14:46:18: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:18: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FD20>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E7B0>, <py_sfcl.PySEnhancedCmdData object at 0x0612EF60>, <None>, <py_sfcl.Command23 object at 0x06129DB0>) , Command count = 6089 ] 
14:46:19: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:19: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:19: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F930>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132FC0>, <py_sfcl.PySEnhancedCmdData object at 0x06145900>, <None>) , Command count = 6090 ] 
14:46:19: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:21: Host Frequency set to 25000 KHz
14:46:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:21: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:21: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FC60>, 0x0, True) , Command count = 6091 ] 
14:46:21: [GO18_globalSetVolt]### Host voltage value is set.
14:46:21: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:21: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138BA0>, 0x0, False) , Command count = 6092 ] 
14:46:21: [GO18_globalSetVolt]### Host voltage value is set.
14:46:21: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6093 ] 
14:46:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6094 ] 
14:46:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:21: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6095 ] 
14:46:21: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129150>, <py_sfcl.CommandDataDefinition object at 0x0612E4E0>) , Command count = 6096 ] 
14:46:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E900>, <py_sfcl.CommandDataDefinition object at 0x06132AB0>) , Command count = 6097 ] 
14:46:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:21: [ SetCardRCA(0x1, 0xD555) , Command count = 6098 ] 
14:46:21: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:21: Host Frequency set to 25000 KHz
14:46:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:21: ####CSD Registe 2.0 Values####
14:46:21: CSD_STRUCTURE                                 :0x1
14:46:21: Reserv1                                       :0x0
14:46:21: Time Access 1 TAAC                            :0xe
14:46:21: Time Access 2 NSAC*100                        :0x0
14:46:21: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:21: Card Command Classess CCC                     :0x5b5
14:46:21: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:21: DSR(driver stage register)  DSR_IMP           :0x0
14:46:21: Reserv2                                       :0x0
14:46:21: Device Size C_SIZE                            :0xedc8
14:46:21: Reserv3                                       :0x0
14:46:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:21: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:21: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:21: Reserv4                                       :0x0
14:46:21: Write Speed Factor R2W_FACTOR                 :0x2
14:46:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:21: FILE_FORMAT_GRP                               :0x0
14:46:21: COPY flag                                     :0x1
14:46:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:21: File_Format                                   :0x0
14:46:21: CRC                                           :0x0
14:46:21: ####CSD Registe Values####  

14:46:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:21: [GetSCRRegisterEntry] Passed
14:46:21: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:21: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:21: Data_Status_After Erases          : 0
14:46:21: CPRM Security Support             : No Security
14:46:21: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:21: Spec. Version                     : Version 3.0X
14:46:21: Extended Security Support         : Extended_Security_Not_Supported
14:46:21: Command Support                   : COMMAND_SUPPORT
14:46:21: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F810>, <py_sfcl.CommandDataDefinition object at 0x06132540>) , Command count = 6099 ] 
14:46:21: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129FC0>, <py_sfcl.CommandDataDefinition object at 0x0612EE40>) , Command count = 6100 ] 
14:46:21: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:21: [ SetBusWidth(0x4) , Command count = 6101 ] 
14:46:21: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0612EA20>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6102 ] 
14:46:21: Protected Area Size 0x28000
14:46:21: Bus Width           2
14:46:21: Secure Mode         0
14:46:21: Speed  Class        4
14:46:21: Perf Move           0
14:46:21: Au Size             9
14:46:21: Erase Size          15
14:46:21: Erase Timeout       1
14:46:21: Erase offset        1
14:46:21: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:21: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:21: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6103 ] 
14:46:21: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:21: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:21: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:21: Host Frequency set to 100000 KHz
14:46:21: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:21: ####CSD Registe 2.0 Values####
14:46:21: CSD_STRUCTURE                                 :0x1
14:46:21: Reserv1                                       :0x0
14:46:21: Time Access 1 TAAC                            :0xe
14:46:22: Time Access 2 NSAC*100                        :0x0
14:46:22: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:22: Card Command Classess CCC                     :0x5b5
14:46:22: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:22: DSR(driver stage register)  DSR_IMP           :0x0
14:46:22: Reserv2                                       :0x0
14:46:22: Device Size C_SIZE                            :0xedc8
14:46:22: Reserv3                                       :0x0
14:46:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:22: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:22: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:22: Reserv4                                       :0x0
14:46:22: Write Speed Factor R2W_FACTOR                 :0x2
14:46:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:22: FILE_FORMAT_GRP                               :0x0
14:46:22: COPY flag                                     :0x1
14:46:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:22: File_Format                                   :0x0
14:46:22: CRC                                           :0x0
14:46:22: ####CSD Registe Values####  

14:46:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py_sfcl.CommandDataDefinition object at 0x06132690>) , Command count = 6104 ] 
14:46:22: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138AB0>, <py_sfcl.CommandDataDefinition object at 0x0612EC30>) , Command count = 6105 ] 
14:46:22: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:22: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F155 to EndLba:0x3B6F1D5 with One's Pattern
14:46:22: [ WrLbaNoData(0x3B6F155, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6106 ] 
14:46:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F155 to EndLba:0x3B6F1D5 with One's Pattern 

14:46:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F1D5 to EndLba:0x3B6F255 with One's Pattern
14:46:22: [ WrLbaNoData(0x3B6F1D5, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6107 ] 
14:46:22: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F1D5 to EndLba:0x3B6F255 with One's Pattern 

14:46:22: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:22: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061322D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061327B0>, <py_sfcl.PySEnhancedCmdData object at 0x0612EE10>, <None>, <py_sfcl.Command23 object at 0x061325D0>) , Command count = 6108 ] 
14:46:22: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:22: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 1
14:46:22: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:22: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FF00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132F60>, <py_sfcl.PySEnhancedCmdData object at 0x06145CC0>, <None>, <py_sfcl.Command23 object at 0x0612E450>) , Command count = 6109 ] 
14:46:23: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:23: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:23: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F330>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132ED0>, <py_sfcl.PySEnhancedCmdData object at 0x06145B10>, <None>) , Command count = 6110 ] 
14:46:23: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:23: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:25: Host Frequency set to 25000 KHz
14:46:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:25: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:25: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E420>, 0x0, True) , Command count = 6111 ] 
14:46:25: [GO18_globalSetVolt]### Host voltage value is set.
14:46:25: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:25: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129B10>, 0x0, False) , Command count = 6112 ] 
14:46:25: [GO18_globalSetVolt]### Host voltage value is set.
14:46:25: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6113 ] 
14:46:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6114 ] 
14:46:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:25: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6115 ] 
14:46:25: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129690>, <py_sfcl.CommandDataDefinition object at 0x0612EB10>) , Command count = 6116 ] 
14:46:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EFC0>, <py_sfcl.CommandDataDefinition object at 0x06132450>) , Command count = 6117 ] 
14:46:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:25: [ SetCardRCA(0x1, 0xD555) , Command count = 6118 ] 
14:46:25: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:25: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:25: Host Frequency set to 25000 KHz
14:46:25: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:25: ####CSD Registe 2.0 Values####
14:46:25: CSD_STRUCTURE                                 :0x1
14:46:25: Reserv1                                       :0x0
14:46:25: Time Access 1 TAAC                            :0xe
14:46:25: Time Access 2 NSAC*100                        :0x0
14:46:25: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:25: Card Command Classess CCC                     :0x5b5
14:46:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:25: DSR(driver stage register)  DSR_IMP           :0x0
14:46:25: Reserv2                                       :0x0
14:46:25: Device Size C_SIZE                            :0xedc8
14:46:25: Reserv3                                       :0x0
14:46:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:25: Reserv4                                       :0x0
14:46:25: Write Speed Factor R2W_FACTOR                 :0x2
14:46:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:25: FILE_FORMAT_GRP                               :0x0
14:46:25: COPY flag                                     :0x1
14:46:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:25: File_Format                                   :0x0
14:46:25: CRC                                           :0x0
14:46:25: ####CSD Registe Values####  

14:46:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:25: [GetSCRRegisterEntry] Passed
14:46:25: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:25: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:25: Data_Status_After Erases          : 0
14:46:25: CPRM Security Support             : No Security
14:46:25: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:25: Spec. Version                     : Version 3.0X
14:46:25: Extended Security Support         : Extended_Security_Not_Supported
14:46:25: Command Support                   : COMMAND_SUPPORT
14:46:25: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138750>, <py_sfcl.CommandDataDefinition object at 0x061322A0>) , Command count = 6119 ] 
14:46:25: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132420>, <py_sfcl.CommandDataDefinition object at 0x06132720>) , Command count = 6120 ] 
14:46:25: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:25: [ SetBusWidth(0x4) , Command count = 6121 ] 
14:46:25: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:25: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6122 ] 
14:46:25: Protected Area Size 0x28000
14:46:25: Bus Width           2
14:46:25: Secure Mode         0
14:46:25: Speed  Class        4
14:46:25: Perf Move           0
14:46:25: Au Size             9
14:46:25: Erase Size          15
14:46:25: Erase Timeout       1
14:46:25: Erase offset        1
14:46:25: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:25: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:25: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6123 ] 
14:46:25: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:25: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:25: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:25: Host Frequency set to 100000 KHz
14:46:25: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:25: ####CSD Registe 2.0 Values####
14:46:25: CSD_STRUCTURE                                 :0x1
14:46:25: Reserv1                                       :0x0
14:46:25: Time Access 1 TAAC                            :0xe
14:46:25: Time Access 2 NSAC*100                        :0x0
14:46:25: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:25: Card Command Classess CCC                     :0x5b5
14:46:25: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:25: DSR(driver stage register)  DSR_IMP           :0x0
14:46:25: Reserv2                                       :0x0
14:46:25: Device Size C_SIZE                            :0xedc8
14:46:25: Reserv3                                       :0x0
14:46:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:25: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:25: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:25: Reserv4                                       :0x0
14:46:26: Write Speed Factor R2W_FACTOR                 :0x2
14:46:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:26: FILE_FORMAT_GRP                               :0x0
14:46:26: COPY flag                                     :0x1
14:46:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:26: File_Format                                   :0x0
14:46:26: CRC                                           :0x0
14:46:26: ####CSD Registe Values####  

14:46:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4B0>, <py_sfcl.CommandDataDefinition object at 0x0613FE70>) , Command count = 6124 ] 
14:46:26: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6C0>, <py_sfcl.CommandDataDefinition object at 0x061323F0>) , Command count = 6125 ] 
14:46:26: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:26: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7095F to EndLba:0x3B709DF with One's Pattern
14:46:26: [ WrLbaNoData(0x3B7095F, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6126 ] 
14:46:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7095F to EndLba:0x3B709DF with One's Pattern 

14:46:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B709DF to EndLba:0x3B70A5F with One's Pattern
14:46:26: [ WrLbaNoData(0x3B709DF, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6127 ] 
14:46:26: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B709DF to EndLba:0x3B70A5F with One's Pattern 

14:46:26: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:26: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138450>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132F30>, <py_sfcl.PySEnhancedCmdData object at 0x061328A0>, <None>, <py_sfcl.Command23 object at 0x0613FF00>) , Command count = 6128 ] 
14:46:26: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:26: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 0
14:46:26: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:26: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E360>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061452D0>, <py_sfcl.PySEnhancedCmdData object at 0x06145330>, <None>, <py_sfcl.Command23 object at 0x061326C0>) , Command count = 6129 ] 
14:46:27: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:27: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:27: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132360>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145450>, <py_sfcl.PySEnhancedCmdData object at 0x061452A0>, <None>) , Command count = 6130 ] 
14:46:27: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:27: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:29: Host Frequency set to 25000 KHz
14:46:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:29: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:29: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FD50>, 0x0, True) , Command count = 6131 ] 
14:46:29: [GO18_globalSetVolt]### Host voltage value is set.
14:46:29: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:29: [ SetVolt(<py_sfcl.SDVoltage object at 0x061382D0>, 0x0, False) , Command count = 6132 ] 
14:46:29: [GO18_globalSetVolt]### Host voltage value is set.
14:46:29: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6133 ] 
14:46:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6134 ] 
14:46:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:29: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6135 ] 
14:46:29: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132510>, <py_sfcl.CommandDataDefinition object at 0x06132C30>) , Command count = 6136 ] 
14:46:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F870>, <py_sfcl.CommandDataDefinition object at 0x06132270>) , Command count = 6137 ] 
14:46:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:29: [ SetCardRCA(0x1, 0xD555) , Command count = 6138 ] 
14:46:29: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:29: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:29: Host Frequency set to 25000 KHz
14:46:29: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:29: ####CSD Registe 2.0 Values####
14:46:29: CSD_STRUCTURE                                 :0x1
14:46:29: Reserv1                                       :0x0
14:46:29: Time Access 1 TAAC                            :0xe
14:46:29: Time Access 2 NSAC*100                        :0x0
14:46:29: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:29: Card Command Classess CCC                     :0x5b5
14:46:29: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:29: DSR(driver stage register)  DSR_IMP           :0x0
14:46:29: Reserv2                                       :0x0
14:46:29: Device Size C_SIZE                            :0xedc8
14:46:29: Reserv3                                       :0x0
14:46:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:29: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:29: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:29: Reserv4                                       :0x0
14:46:29: Write Speed Factor R2W_FACTOR                 :0x2
14:46:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:29: FILE_FORMAT_GRP                               :0x0
14:46:29: COPY flag                                     :0x1
14:46:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:29: File_Format                                   :0x0
14:46:29: CRC                                           :0x0
14:46:29: ####CSD Registe Values####  

14:46:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:29: [GetSCRRegisterEntry] Passed
14:46:29: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:29: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:29: Data_Status_After Erases          : 0
14:46:29: CPRM Security Support             : No Security
14:46:29: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:29: Spec. Version                     : Version 3.0X
14:46:29: Extended Security Support         : Extended_Security_Not_Supported
14:46:29: Command Support                   : COMMAND_SUPPORT
14:46:29: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FEA0>, <py_sfcl.CommandDataDefinition object at 0x06132210>) , Command count = 6139 ] 
14:46:29: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EAB0>, <py_sfcl.CommandDataDefinition object at 0x0612E8A0>) , Command count = 6140 ] 
14:46:29: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:29: [ SetBusWidth(0x4) , Command count = 6141 ] 
14:46:29: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:29: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6142 ] 
14:46:29: Protected Area Size 0x28000
14:46:29: Bus Width           2
14:46:29: Secure Mode         0
14:46:29: Speed  Class        4
14:46:29: Perf Move           0
14:46:29: Au Size             9
14:46:29: Erase Size          15
14:46:29: Erase Timeout       1
14:46:29: Erase offset        1
14:46:29: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:29: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:29: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6143 ] 
14:46:29: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:29: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:29: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:29: Host Frequency set to 100000 KHz
14:46:29: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:29: ####CSD Registe 2.0 Values####
14:46:29: CSD_STRUCTURE                                 :0x1
14:46:29: Reserv1                                       :0x0
14:46:30: Time Access 1 TAAC                            :0xe
14:46:30: Time Access 2 NSAC*100                        :0x0
14:46:30: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:30: Card Command Classess CCC                     :0x5b5
14:46:30: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:30: DSR(driver stage register)  DSR_IMP           :0x0
14:46:30: Reserv2                                       :0x0
14:46:30: Device Size C_SIZE                            :0xedc8
14:46:30: Reserv3                                       :0x0
14:46:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:30: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:30: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:30: Reserv4                                       :0x0
14:46:30: Write Speed Factor R2W_FACTOR                 :0x2
14:46:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:30: FILE_FORMAT_GRP                               :0x0
14:46:30: COPY flag                                     :0x1
14:46:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:30: File_Format                                   :0x0
14:46:30: CRC                                           :0x0
14:46:30: ####CSD Registe Values####  

14:46:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EE70>, <py_sfcl.CommandDataDefinition object at 0x06132A80>) , Command count = 6144 ] 
14:46:30: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B70>, <py_sfcl.CommandDataDefinition object at 0x061324B0>) , Command count = 6145 ] 
14:46:30: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:30: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71913 to EndLba:0x3B71993 with One's Pattern
14:46:30: [ WrLbaNoData(0x3B71913, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6146 ] 
14:46:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71913 to EndLba:0x3B71993 with One's Pattern 

14:46:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71993 to EndLba:0x3B71A13 with One's Pattern
14:46:30: [ WrLbaNoData(0x3B71993, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6147 ] 
14:46:30: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71993 to EndLba:0x3B71A13 with One's Pattern 

14:46:30: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:30: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:30: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132D50>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061327E0>, <py_sfcl.PySEnhancedCmdData object at 0x06138D20>, <None>, <py_sfcl.Command23 object at 0x0612E360>) , Command count = 6148 ] 
14:46:30: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:30: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Outer loop Count 1022
14:46:30: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 8
14:46:30: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132CF0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145180>, <py_sfcl.PySEnhancedCmdData object at 0x06145E70>, <None>, <py_sfcl.Command23 object at 0x06138840>) , Command count = 6149 ] 
14:46:31: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:31: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:31: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138420>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145DB0>, <py_sfcl.PySEnhancedCmdData object at 0x06146090>, <None>) , Command count = 6150 ] 
14:46:31: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:31: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:33: Host Frequency set to 25000 KHz
14:46:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:33: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:33: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x061383F0>, 0x0, True) , Command count = 6151 ] 
14:46:33: [GO18_globalSetVolt]### Host voltage value is set.
14:46:33: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:33: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132E10>, 0x0, False) , Command count = 6152 ] 
14:46:33: [GO18_globalSetVolt]### Host voltage value is set.
14:46:33: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6153 ] 
14:46:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6154 ] 
14:46:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:33: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6155 ] 
14:46:33: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061321E0>, <py_sfcl.CommandDataDefinition object at 0x06145210>) , Command count = 6156 ] 
14:46:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129600>, <py_sfcl.CommandDataDefinition object at 0x06138BD0>) , Command count = 6157 ] 
14:46:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:33: [ SetCardRCA(0x1, 0xD555) , Command count = 6158 ] 
14:46:33: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:33: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:33: Host Frequency set to 25000 KHz
14:46:33: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:33: ####CSD Registe 2.0 Values####
14:46:33: CSD_STRUCTURE                                 :0x1
14:46:33: Reserv1                                       :0x0
14:46:33: Time Access 1 TAAC                            :0xe
14:46:33: Time Access 2 NSAC*100                        :0x0
14:46:33: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:33: Card Command Classess CCC                     :0x5b5
14:46:33: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:33: DSR(driver stage register)  DSR_IMP           :0x0
14:46:33: Reserv2                                       :0x0
14:46:33: Device Size C_SIZE                            :0xedc8
14:46:33: Reserv3                                       :0x0
14:46:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:33: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:33: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:33: Reserv4                                       :0x0
14:46:33: Write Speed Factor R2W_FACTOR                 :0x2
14:46:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:33: FILE_FORMAT_GRP                               :0x0
14:46:33: COPY flag                                     :0x1
14:46:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:33: File_Format                                   :0x0
14:46:33: CRC                                           :0x0
14:46:33: ####CSD Registe Values####  

14:46:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:33: [GetSCRRegisterEntry] Passed
14:46:33: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:33: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:33: Data_Status_After Erases          : 0
14:46:33: CPRM Security Support             : No Security
14:46:33: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:33: Spec. Version                     : Version 3.0X
14:46:33: Extended Security Support         : Extended_Security_Not_Supported
14:46:33: Command Support                   : COMMAND_SUPPORT
14:46:33: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F1E0>, <py_sfcl.CommandDataDefinition object at 0x06138F90>) , Command count = 6159 ] 
14:46:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132B10>, <py_sfcl.CommandDataDefinition object at 0x06138FC0>) , Command count = 6160 ] 
14:46:33: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:33: [ SetBusWidth(0x4) , Command count = 6161 ] 
14:46:33: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:33: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06145030>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6162 ] 
14:46:33: Protected Area Size 0x28000
14:46:33: Bus Width           2
14:46:33: Secure Mode         0
14:46:33: Speed  Class        4
14:46:33: Perf Move           0
14:46:33: Au Size             9
14:46:33: Erase Size          15
14:46:33: Erase Timeout       1
14:46:33: Erase offset        1
14:46:33: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:33: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:33: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6163 ] 
14:46:33: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:33: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:33: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:34: Host Frequency set to 100000 KHz
14:46:34: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:34: ####CSD Registe 2.0 Values####
14:46:34: CSD_STRUCTURE                                 :0x1
14:46:34: Reserv1                                       :0x0
14:46:34: Time Access 1 TAAC                            :0xe
14:46:34: Time Access 2 NSAC*100                        :0x0
14:46:34: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:34: Card Command Classess CCC                     :0x5b5
14:46:34: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:34: DSR(driver stage register)  DSR_IMP           :0x0
14:46:34: Reserv2                                       :0x0
14:46:34: Device Size C_SIZE                            :0xedc8
14:46:34: Reserv3                                       :0x0
14:46:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:34: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:34: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:34: Reserv4                                       :0x0
14:46:34: Write Speed Factor R2W_FACTOR                 :0x2
14:46:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:34: FILE_FORMAT_GRP                               :0x0
14:46:34: COPY flag                                     :0x1
14:46:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:34: File_Format                                   :0x0
14:46:34: CRC                                           :0x0
14:46:34: ####CSD Registe Values####  

14:46:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py_sfcl.CommandDataDefinition object at 0x06138090>) , Command count = 6164 ] 
14:46:34: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132180>, <py_sfcl.CommandDataDefinition object at 0x06132B40>) , Command count = 6165 ] 
14:46:34: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:34: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:34: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F8E9 to EndLba:0x3B6F969 with One's Pattern
14:46:34: [ WrLbaNoData(0x3B6F8E9, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6166 ] 
14:46:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F8E9 to EndLba:0x3B6F969 with One's Pattern 

14:46:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F969 to EndLba:0x3B6F9E9 with One's Pattern
14:46:34: [ WrLbaNoData(0x3B6F969, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6167 ] 
14:46:34: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F969 to EndLba:0x3B6F9E9 with One's Pattern 

14:46:35: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061325A0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E840>, <py_sfcl.PySEnhancedCmdData object at 0x061290C0>, <None>, <py_sfcl.Command23 object at 0x06132CF0>) , Command count = 6168 ] 
14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 7
14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138030>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138120>, <py_sfcl.PySEnhancedCmdData object at 0x06138F30>, <None>, <py_sfcl.Command23 object at 0x0613FDB0>) , Command count = 6169 ] 
14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:35: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06138540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06146210>, <py_sfcl.PySEnhancedCmdData object at 0x06146060>, <None>) , Command count = 6170 ] 
14:46:35: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:35: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:37: Host Frequency set to 25000 KHz
14:46:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:37: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:37: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x061329F0>, 0x0, True) , Command count = 6171 ] 
14:46:37: [GO18_globalSetVolt]### Host voltage value is set.
14:46:37: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:37: [ SetVolt(<py_sfcl.SDVoltage object at 0x06132900>, 0x0, False) , Command count = 6172 ] 
14:46:37: [GO18_globalSetVolt]### Host voltage value is set.
14:46:37: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6173 ] 
14:46:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6174 ] 
14:46:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:37: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6175 ] 
14:46:37: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132810>, <py_sfcl.CommandDataDefinition object at 0x06138AE0>) , Command count = 6176 ] 
14:46:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A50>, <py_sfcl.CommandDataDefinition object at 0x06145540>) , Command count = 6177 ] 
14:46:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:37: [ SetCardRCA(0x1, 0xD555) , Command count = 6178 ] 
14:46:37: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:37: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:37: Host Frequency set to 25000 KHz
14:46:37: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:37: ####CSD Registe 2.0 Values####
14:46:37: CSD_STRUCTURE                                 :0x1
14:46:37: Reserv1                                       :0x0
14:46:37: Time Access 1 TAAC                            :0xe
14:46:37: Time Access 2 NSAC*100                        :0x0
14:46:37: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:37: Card Command Classess CCC                     :0x5b5
14:46:37: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:37: DSR(driver stage register)  DSR_IMP           :0x0
14:46:37: Reserv2                                       :0x0
14:46:37: Device Size C_SIZE                            :0xedc8
14:46:37: Reserv3                                       :0x0
14:46:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:37: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:37: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:37: Reserv4                                       :0x0
14:46:37: Write Speed Factor R2W_FACTOR                 :0x2
14:46:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:37: FILE_FORMAT_GRP                               :0x0
14:46:37: COPY flag                                     :0x1
14:46:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:37: File_Format                                   :0x0
14:46:37: CRC                                           :0x0
14:46:37: ####CSD Registe Values####  

14:46:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:37: [GetSCRRegisterEntry] Passed
14:46:37: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:37: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:37: Data_Status_After Erases          : 0
14:46:37: CPRM Security Support             : No Security
14:46:37: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:37: Spec. Version                     : Version 3.0X
14:46:37: Extended Security Support         : Extended_Security_Not_Supported
14:46:37: Command Support                   : COMMAND_SUPPORT
14:46:37: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9C0>, <py_sfcl.CommandDataDefinition object at 0x06138C00>) , Command count = 6179 ] 
14:46:37: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC30>, <py_sfcl.CommandDataDefinition object at 0x061454E0>) , Command count = 6180 ] 
14:46:37: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:37: [ SetBusWidth(0x4) , Command count = 6181 ] 
14:46:37: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:37: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138660>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6182 ] 
14:46:37: Protected Area Size 0x28000
14:46:37: Bus Width           2
14:46:37: Secure Mode         0
14:46:37: Speed  Class        4
14:46:37: Perf Move           0
14:46:37: Au Size             9
14:46:37: Erase Size          15
14:46:37: Erase Timeout       1
14:46:37: Erase offset        1
14:46:37: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:37: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:37: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6183 ] 
14:46:37: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:37: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:37: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:38: Host Frequency set to 100000 KHz
14:46:38: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:38: ####CSD Registe 2.0 Values####
14:46:38: CSD_STRUCTURE                                 :0x1
14:46:38: Reserv1                                       :0x0
14:46:38: Time Access 1 TAAC                            :0xe
14:46:38: Time Access 2 NSAC*100                        :0x0
14:46:38: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:38: Card Command Classess CCC                     :0x5b5
14:46:38: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:38: DSR(driver stage register)  DSR_IMP           :0x0
14:46:38: Reserv2                                       :0x0
14:46:38: Device Size C_SIZE                            :0xedc8
14:46:38: Reserv3                                       :0x0
14:46:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:38: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:38: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:38: Reserv4                                       :0x0
14:46:38: Write Speed Factor R2W_FACTOR                 :0x2
14:46:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:38: FILE_FORMAT_GRP                               :0x0
14:46:38: COPY flag                                     :0x1
14:46:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:38: File_Format                                   :0x0
14:46:38: CRC                                           :0x0
14:46:38: ####CSD Registe Values####  

14:46:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FFC0>, <py_sfcl.CommandDataDefinition object at 0x06132C60>) , Command count = 6184 ] 
14:46:38: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FAE0>, <py_sfcl.CommandDataDefinition object at 0x06138060>) , Command count = 6185 ] 
14:46:38: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:38: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:38: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA7E to EndLba:0x3B6FAFE with One's Pattern
14:46:38: [ WrLbaNoData(0x3B6FA7E, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6186 ] 
14:46:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA7E to EndLba:0x3B6FAFE with One's Pattern 

14:46:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FAFE to EndLba:0x3B6FB7E with One's Pattern
14:46:38: [ WrLbaNoData(0x3B6FAFE, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6187 ] 
14:46:38: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FAFE to EndLba:0x3B6FB7E with One's Pattern 

14:46:39: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132DB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F270>, <py_sfcl.PySEnhancedCmdData object at 0x06138C90>, <None>, <py_sfcl.Command23 object at 0x06138F30>) , Command count = 6188 ] 
14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 6
14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF420>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061462A0>, <py_sfcl.PySEnhancedCmdData object at 0x06146030>, <None>, <py_sfcl.Command23 object at 0x06138B40>) , Command count = 6189 ] 
14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:39: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052ADED0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138D80>, <py_sfcl.PySEnhancedCmdData object at 0x06138870>, <None>) , Command count = 6190 ] 
14:46:39: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:39: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:41: Host Frequency set to 25000 KHz
14:46:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:41: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:41: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F420>, 0x0, True) , Command count = 6191 ] 
14:46:41: [GO18_globalSetVolt]### Host voltage value is set.
14:46:41: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:41: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613FDE0>, 0x0, False) , Command count = 6192 ] 
14:46:41: [GO18_globalSetVolt]### Host voltage value is set.
14:46:41: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6193 ] 
14:46:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6194 ] 
14:46:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:41: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6195 ] 
14:46:41: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132870>, <py_sfcl.CommandDataDefinition object at 0x06132C00>) , Command count = 6196 ] 
14:46:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C19F0>, <py_sfcl.CommandDataDefinition object at 0x06138F60>) , Command count = 6197 ] 
14:46:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:41: [ SetCardRCA(0x1, 0xD555) , Command count = 6198 ] 
14:46:41: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:41: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:41: Host Frequency set to 25000 KHz
14:46:41: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:41: ####CSD Registe 2.0 Values####
14:46:41: CSD_STRUCTURE                                 :0x1
14:46:41: Reserv1                                       :0x0
14:46:41: Time Access 1 TAAC                            :0xe
14:46:41: Time Access 2 NSAC*100                        :0x0
14:46:41: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:41: Card Command Classess CCC                     :0x5b5
14:46:41: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:41: DSR(driver stage register)  DSR_IMP           :0x0
14:46:41: Reserv2                                       :0x0
14:46:41: Device Size C_SIZE                            :0xedc8
14:46:41: Reserv3                                       :0x0
14:46:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:41: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:41: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:41: Reserv4                                       :0x0
14:46:41: Write Speed Factor R2W_FACTOR                 :0x2
14:46:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:41: FILE_FORMAT_GRP                               :0x0
14:46:41: COPY flag                                     :0x1
14:46:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:41: File_Format                                   :0x0
14:46:41: CRC                                           :0x0
14:46:41: ####CSD Registe Values####  

14:46:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:41: [GetSCRRegisterEntry] Passed
14:46:41: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:41: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:41: Data_Status_After Erases          : 0
14:46:41: CPRM Security Support             : No Security
14:46:41: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:41: Spec. Version                     : Version 3.0X
14:46:41: Extended Security Support         : Extended_Security_Not_Supported
14:46:41: Command Support                   : COMMAND_SUPPORT
14:46:41: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AF270>, <py_sfcl.CommandDataDefinition object at 0x052C1F60>) , Command count = 6199 ] 
14:46:41: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132300>, <py_sfcl.CommandDataDefinition object at 0x06138810>) , Command count = 6200 ] 
14:46:41: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:41: [ SetBusWidth(0x4) , Command count = 6201 ] 
14:46:41: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:41: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0606F2D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6202 ] 
14:46:41: Protected Area Size 0x28000
14:46:41: Bus Width           2
14:46:41: Secure Mode         0
14:46:41: Speed  Class        4
14:46:41: Perf Move           0
14:46:41: Au Size             9
14:46:41: Erase Size          15
14:46:41: Erase Timeout       1
14:46:41: Erase offset        1
14:46:41: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:41: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:41: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6203 ] 
14:46:41: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:41: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:41: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:41: Host Frequency set to 100000 KHz
14:46:41: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:41: ####CSD Registe 2.0 Values####
14:46:41: CSD_STRUCTURE                                 :0x1
14:46:41: Reserv1                                       :0x0
14:46:41: Time Access 1 TAAC                            :0xe
14:46:42: Time Access 2 NSAC*100                        :0x0
14:46:42: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:42: Card Command Classess CCC                     :0x5b5
14:46:42: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:42: DSR(driver stage register)  DSR_IMP           :0x0
14:46:42: Reserv2                                       :0x0
14:46:42: Device Size C_SIZE                            :0xedc8
14:46:42: Reserv3                                       :0x0
14:46:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:42: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:42: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:42: Reserv4                                       :0x0
14:46:42: Write Speed Factor R2W_FACTOR                 :0x2
14:46:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:42: FILE_FORMAT_GRP                               :0x0
14:46:42: COPY flag                                     :0x1
14:46:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:42: File_Format                                   :0x0
14:46:42: CRC                                           :0x0
14:46:42: ####CSD Registe Values####  

14:46:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061324E0>, <py_sfcl.CommandDataDefinition object at 0x06145AE0>) , Command count = 6204 ] 
14:46:42: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132A20>, <py_sfcl.CommandDataDefinition object at 0x06145960>) , Command count = 6205 ] 
14:46:42: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:42: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:42: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EB56 to EndLba:0x3B6EBD6 with One's Pattern
14:46:42: [ WrLbaNoData(0x3B6EB56, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6206 ] 
14:46:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EB56 to EndLba:0x3B6EBD6 with One's Pattern 

14:46:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6EBD6 to EndLba:0x3B6EC56 with One's Pattern
14:46:42: [ WrLbaNoData(0x3B6EBD6, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6207 ] 
14:46:42: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6EBD6 to EndLba:0x3B6EC56 with One's Pattern 

14:46:43: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F1B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F630>, <py_sfcl.PySEnhancedCmdData object at 0x0613FE10>, <None>, <py_sfcl.Command23 object at 0x052AF420>) , Command count = 6208 ] 
14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 5
14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613FAB0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F8A0>, <py_sfcl.PySEnhancedCmdData object at 0x052C1A50>, <None>, <py_sfcl.Command23 object at 0x06146330>) , Command count = 6209 ] 
14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:43: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AFF60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0613F450>, <py_sfcl.PySEnhancedCmdData object at 0x06138A20>, <None>) , Command count = 6210 ] 
14:46:43: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:43: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:45: Host Frequency set to 25000 KHz
14:46:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:45: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:45: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F660>, 0x0, True) , Command count = 6211 ] 
14:46:45: [GO18_globalSetVolt]### Host voltage value is set.
14:46:45: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:45: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F030>, 0x0, False) , Command count = 6212 ] 
14:46:45: [GO18_globalSetVolt]### Host voltage value is set.
14:46:45: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6213 ] 
14:46:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6214 ] 
14:46:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:45: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6215 ] 
14:46:45: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3A50>, <py_sfcl.CommandDataDefinition object at 0x0613F120>) , Command count = 6216 ] 
14:46:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C900>, <py_sfcl.CommandDataDefinition object at 0x0525E180>) , Command count = 6217 ] 
14:46:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:45: [ SetCardRCA(0x1, 0xD555) , Command count = 6218 ] 
14:46:45: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:45: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:45: Host Frequency set to 25000 KHz
14:46:45: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:45: ####CSD Registe 2.0 Values####
14:46:45: CSD_STRUCTURE                                 :0x1
14:46:45: Reserv1                                       :0x0
14:46:45: Time Access 1 TAAC                            :0xe
14:46:45: Time Access 2 NSAC*100                        :0x0
14:46:45: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:45: Card Command Classess CCC                     :0x5b5
14:46:45: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:45: DSR(driver stage register)  DSR_IMP           :0x0
14:46:45: Reserv2                                       :0x0
14:46:45: Device Size C_SIZE                            :0xedc8
14:46:45: Reserv3                                       :0x0
14:46:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:45: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:45: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:45: Reserv4                                       :0x0
14:46:45: Write Speed Factor R2W_FACTOR                 :0x2
14:46:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:45: FILE_FORMAT_GRP                               :0x0
14:46:45: COPY flag                                     :0x1
14:46:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:45: File_Format                                   :0x0
14:46:45: CRC                                           :0x0
14:46:45: ####CSD Registe Values####  

14:46:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:45: [GetSCRRegisterEntry] Passed
14:46:45: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:45: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:45: Data_Status_After Erases          : 0
14:46:45: CPRM Security Support             : No Security
14:46:45: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:45: Spec. Version                     : Version 3.0X
14:46:45: Extended Security Support         : Extended_Security_Not_Supported
14:46:45: Command Support                   : COMMAND_SUPPORT
14:46:45: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138B70>, <py_sfcl.CommandDataDefinition object at 0x06146570>) , Command count = 6219 ] 
14:46:45: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C030>, <py_sfcl.CommandDataDefinition object at 0x06145FC0>) , Command count = 6220 ] 
14:46:45: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:45: [ SetBusWidth(0x4) , Command count = 6221 ] 
14:46:45: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:45: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611CDE0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6222 ] 
14:46:45: Protected Area Size 0x28000
14:46:45: Bus Width           2
14:46:45: Secure Mode         0
14:46:45: Speed  Class        4
14:46:45: Perf Move           0
14:46:45: Au Size             9
14:46:45: Erase Size          15
14:46:45: Erase Timeout       1
14:46:45: Erase offset        1
14:46:45: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:45: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:45: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6223 ] 
14:46:45: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:45: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:45: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:46: Host Frequency set to 100000 KHz
14:46:46: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:46: ####CSD Registe 2.0 Values####
14:46:46: CSD_STRUCTURE                                 :0x1
14:46:46: Reserv1                                       :0x0
14:46:46: Time Access 1 TAAC                            :0xe
14:46:46: Time Access 2 NSAC*100                        :0x0
14:46:46: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:46: Card Command Classess CCC                     :0x5b5
14:46:46: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:46: DSR(driver stage register)  DSR_IMP           :0x0
14:46:46: Reserv2                                       :0x0
14:46:46: Device Size C_SIZE                            :0xedc8
14:46:46: Reserv3                                       :0x0
14:46:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:46: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:46: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:46: Reserv4                                       :0x0
14:46:46: Write Speed Factor R2W_FACTOR                 :0x2
14:46:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:46: FILE_FORMAT_GRP                               :0x0
14:46:46: COPY flag                                     :0x1
14:46:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:46: File_Format                                   :0x0
14:46:46: CRC                                           :0x0
14:46:46: ####CSD Registe Values####  

14:46:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0529EE40>, <py_sfcl.CommandDataDefinition object at 0x0529B4B0>) , Command count = 6224 ] 
14:46:46: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC00>, <py_sfcl.CommandDataDefinition object at 0x06145F30>) , Command count = 6225 ] 
14:46:46: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:46: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F950 to EndLba:0x3B6F9D0 with One's Pattern
14:46:46: [ WrLbaNoData(0x3B6F950, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6226 ] 
14:46:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F950 to EndLba:0x3B6F9D0 with One's Pattern 

14:46:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F9D0 to EndLba:0x3B6FA50 with One's Pattern
14:46:46: [ WrLbaNoData(0x3B6F9D0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6227 ] 
14:46:46: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F9D0 to EndLba:0x3B6FA50 with One's Pattern 

14:46:46: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052AF1B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CA20>, <py_sfcl.PySEnhancedCmdData object at 0x052BB4E0>, <None>, <py_sfcl.Command23 object at 0x052C1A50>) , Command count = 6228 ] 
14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 4
14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C870>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06146450>, <py_sfcl.PySEnhancedCmdData object at 0x06146570>, <None>, <py_sfcl.Command23 object at 0x0613F180>) , Command count = 6229 ] 
14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:47: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0606F060>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138ED0>, <py_sfcl.PySEnhancedCmdData object at 0x061457B0>, <None>) , Command count = 6230 ] 
14:46:47: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:47: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:49: Host Frequency set to 25000 KHz
14:46:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:49: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:49: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x052C1DE0>, 0x0, True) , Command count = 6231 ] 
14:46:49: [GO18_globalSetVolt]### Host voltage value is set.
14:46:49: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:49: [ SetVolt(<py_sfcl.SDVoltage object at 0x052AFEA0>, 0x0, False) , Command count = 6232 ] 
14:46:49: [GO18_globalSetVolt]### Host voltage value is set.
14:46:49: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6233 ] 
14:46:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6234 ] 
14:46:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:49: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6235 ] 
14:46:49: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FA20>, <py_sfcl.CommandDataDefinition object at 0x0611C570>) , Command count = 6236 ] 
14:46:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E960>, <py_sfcl.CommandDataDefinition object at 0x06146360>) , Command count = 6237 ] 
14:46:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:49: [ SetCardRCA(0x1, 0xD555) , Command count = 6238 ] 
14:46:49: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:49: Host Frequency set to 25000 KHz
14:46:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:49: ####CSD Registe 2.0 Values####
14:46:49: CSD_STRUCTURE                                 :0x1
14:46:49: Reserv1                                       :0x0
14:46:49: Time Access 1 TAAC                            :0xe
14:46:49: Time Access 2 NSAC*100                        :0x0
14:46:49: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:49: Card Command Classess CCC                     :0x5b5
14:46:49: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:49: DSR(driver stage register)  DSR_IMP           :0x0
14:46:49: Reserv2                                       :0x0
14:46:49: Device Size C_SIZE                            :0xedc8
14:46:49: Reserv3                                       :0x0
14:46:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:49: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:49: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:49: Reserv4                                       :0x0
14:46:49: Write Speed Factor R2W_FACTOR                 :0x2
14:46:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:49: FILE_FORMAT_GRP                               :0x0
14:46:49: COPY flag                                     :0x1
14:46:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:49: File_Format                                   :0x0
14:46:49: CRC                                           :0x0
14:46:49: ####CSD Registe Values####  

14:46:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:49: [GetSCRRegisterEntry] Passed
14:46:49: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:49: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:49: Data_Status_After Erases          : 0
14:46:49: CPRM Security Support             : No Security
14:46:49: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:49: Spec. Version                     : Version 3.0X
14:46:49: Extended Security Support         : Extended_Security_Not_Supported
14:46:49: Command Support                   : COMMAND_SUPPORT
14:46:49: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EC60>, <py_sfcl.CommandDataDefinition object at 0x0612ED80>) , Command count = 6239 ] 
14:46:49: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1F90>, <py_sfcl.CommandDataDefinition object at 0x060E3EA0>) , Command count = 6240 ] 
14:46:49: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:49: [ SetBusWidth(0x4) , Command count = 6241 ] 
14:46:49: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:49: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613F960>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6242 ] 
14:46:49: Protected Area Size 0x28000
14:46:49: Bus Width           2
14:46:49: Secure Mode         0
14:46:49: Speed  Class        4
14:46:49: Perf Move           0
14:46:49: Au Size             9
14:46:49: Erase Size          15
14:46:49: Erase Timeout       1
14:46:49: Erase offset        1
14:46:49: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:49: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:49: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6243 ] 
14:46:49: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:49: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:49: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:50: Host Frequency set to 100000 KHz
14:46:50: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:50: ####CSD Registe 2.0 Values####
14:46:50: CSD_STRUCTURE                                 :0x1
14:46:50: Reserv1                                       :0x0
14:46:50: Time Access 1 TAAC                            :0xe
14:46:50: Time Access 2 NSAC*100                        :0x0
14:46:50: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:50: Card Command Classess CCC                     :0x5b5
14:46:50: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:50: DSR(driver stage register)  DSR_IMP           :0x0
14:46:50: Reserv2                                       :0x0
14:46:50: Device Size C_SIZE                            :0xedc8
14:46:50: Reserv3                                       :0x0
14:46:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:50: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:50: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:50: Reserv4                                       :0x0
14:46:50: Write Speed Factor R2W_FACTOR                 :0x2
14:46:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:50: FILE_FORMAT_GRP                               :0x0
14:46:50: COPY flag                                     :0x1
14:46:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:50: File_Format                                   :0x0
14:46:50: CRC                                           :0x0
14:46:50: ####CSD Registe Values####  

14:46:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py_sfcl.CommandDataDefinition object at 0x06145D80>) , Command count = 6244 ] 
14:46:50: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1FC0>, <py_sfcl.CommandDataDefinition object at 0x06145DE0>) , Command count = 6245 ] 
14:46:50: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:50: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:50: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B71F94 to EndLba:0x3B72014 with One's Pattern
14:46:50: [ WrLbaNoData(0x3B71F94, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6246 ] 
14:46:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B71F94 to EndLba:0x3B72014 with One's Pattern 

14:46:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B72014 to EndLba:0x3B72094 with One's Pattern
14:46:50: [ WrLbaNoData(0x3B72014, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6247 ] 
14:46:50: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B72014 to EndLba:0x3B72094 with One's Pattern 

14:46:51: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x052BBFC0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06138E70>, <py_sfcl.PySEnhancedCmdData object at 0x0613FF60>, <None>, <py_sfcl.Command23 object at 0x0613FBA0>) , Command count = 6248 ] 
14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 3
14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F570>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CF00>, <py_sfcl.PySEnhancedCmdData object at 0x0611C3F0>, <None>, <py_sfcl.Command23 object at 0x0613F240>) , Command count = 6249 ] 
14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:51: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F6F0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611C0F0>, <py_sfcl.PySEnhancedCmdData object at 0x06145930>, <None>) , Command count = 6250 ] 
14:46:51: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:51: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:53: Host Frequency set to 25000 KHz
14:46:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:53: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:53: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F990>, 0x0, True) , Command count = 6251 ] 
14:46:53: [GO18_globalSetVolt]### Host voltage value is set.
14:46:53: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:53: [ SetVolt(<py_sfcl.SDVoltage object at 0x060E3930>, 0x0, False) , Command count = 6252 ] 
14:46:53: [GO18_globalSetVolt]### Host voltage value is set.
14:46:53: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6253 ] 
14:46:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6254 ] 
14:46:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:53: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6255 ] 
14:46:53: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F300>, <py_sfcl.CommandDataDefinition object at 0x0613F7E0>) , Command count = 6256 ] 
14:46:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05184030>, <py_sfcl.CommandDataDefinition object at 0x0611CF90>) , Command count = 6257 ] 
14:46:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:53: [ SetCardRCA(0x1, 0xD555) , Command count = 6258 ] 
14:46:53: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:53: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:53: Host Frequency set to 25000 KHz
14:46:53: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:53: ####CSD Registe 2.0 Values####
14:46:53: CSD_STRUCTURE                                 :0x1
14:46:53: Reserv1                                       :0x0
14:46:53: Time Access 1 TAAC                            :0xe
14:46:53: Time Access 2 NSAC*100                        :0x0
14:46:53: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:53: Card Command Classess CCC                     :0x5b5
14:46:53: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:53: DSR(driver stage register)  DSR_IMP           :0x0
14:46:53: Reserv2                                       :0x0
14:46:53: Device Size C_SIZE                            :0xedc8
14:46:53: Reserv3                                       :0x0
14:46:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:53: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:53: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:53: Reserv4                                       :0x0
14:46:53: Write Speed Factor R2W_FACTOR                 :0x2
14:46:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:53: FILE_FORMAT_GRP                               :0x0
14:46:53: COPY flag                                     :0x1
14:46:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:53: File_Format                                   :0x0
14:46:53: CRC                                           :0x0
14:46:53: ####CSD Registe Values####  

14:46:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:53: [GetSCRRegisterEntry] Passed
14:46:53: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:53: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:53: Data_Status_After Erases          : 0
14:46:53: CPRM Security Support             : No Security
14:46:53: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:53: Spec. Version                     : Version 3.0X
14:46:53: Extended Security Support         : Extended_Security_Not_Supported
14:46:53: Command Support                   : COMMAND_SUPPORT
14:46:53: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138EA0>, <py_sfcl.CommandDataDefinition object at 0x061453C0>) , Command count = 6259 ] 
14:46:53: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052C1E70>, <py_sfcl.CommandDataDefinition object at 0x0613F210>) , Command count = 6260 ] 
14:46:53: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:53: [ SetBusWidth(0x4) , Command count = 6261 ] 
14:46:53: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:53: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06145780>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6262 ] 
14:46:53: Protected Area Size 0x28000
14:46:53: Bus Width           2
14:46:53: Secure Mode         0
14:46:53: Speed  Class        4
14:46:53: Perf Move           0
14:46:53: Au Size             9
14:46:53: Erase Size          15
14:46:53: Erase Timeout       1
14:46:53: Erase offset        1
14:46:53: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:53: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:53: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6263 ] 
14:46:53: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:53: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:53: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:54: Host Frequency set to 100000 KHz
14:46:54: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:54: ####CSD Registe 2.0 Values####
14:46:54: CSD_STRUCTURE                                 :0x1
14:46:54: Reserv1                                       :0x0
14:46:54: Time Access 1 TAAC                            :0xe
14:46:54: Time Access 2 NSAC*100                        :0x0
14:46:54: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:54: Card Command Classess CCC                     :0x5b5
14:46:54: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:54: DSR(driver stage register)  DSR_IMP           :0x0
14:46:54: Reserv2                                       :0x0
14:46:54: Device Size C_SIZE                            :0xedc8
14:46:54: Reserv3                                       :0x0
14:46:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:54: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:54: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:54: Reserv4                                       :0x0
14:46:54: Write Speed Factor R2W_FACTOR                 :0x2
14:46:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:54: FILE_FORMAT_GRP                               :0x0
14:46:54: COPY flag                                     :0x1
14:46:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:54: File_Format                                   :0x0
14:46:54: CRC                                           :0x0
14:46:54: ####CSD Registe Values####  

14:46:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F0C0>, <py_sfcl.CommandDataDefinition object at 0x06145B40>) , Command count = 6264 ] 
14:46:54: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F840>, <py_sfcl.CommandDataDefinition object at 0x0606F4E0>) , Command count = 6265 ] 
14:46:54: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:54: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:54: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70E87 to EndLba:0x3B70F07 with One's Pattern
14:46:54: [ WrLbaNoData(0x3B70E87, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6266 ] 
14:46:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70E87 to EndLba:0x3B70F07 with One's Pattern 

14:46:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B70F07 to EndLba:0x3B70F87 with One's Pattern
14:46:54: [ WrLbaNoData(0x3B70F07, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6267 ] 
14:46:54: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B70F07 to EndLba:0x3B70F87 with One's Pattern 

14:46:55: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132D20>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3D80>, <py_sfcl.PySEnhancedCmdData object at 0x06129840>, <None>, <py_sfcl.Command23 object at 0x0613F570>) , Command count = 6268 ] 
14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 2
14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129210>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CAB0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CFC0>, <None>, <py_sfcl.Command23 object at 0x06129E10>) , Command count = 6269 ] 
14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:55: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x060E3780>, <py_sfcl.PySEnhancedCmdData object at 0x060E3540>, <None>) , Command count = 6270 ] 
14:46:55: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:55: [GO4_globalInitCard]### Switch to Specify Card Type
14:46:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:57: Host Frequency set to 25000 KHz
14:46:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:57: [GO18_globalSetVolt]### Set Host Voltage value.
14:46:57: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:46:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x061291B0>, 0x0, True) , Command count = 6271 ] 
14:46:57: [GO18_globalSetVolt]### Host voltage value is set.
14:46:57: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:46:57: [ SetVolt(<py_sfcl.SDVoltage object at 0x06129BA0>, 0x0, False) , Command count = 6272 ] 
14:46:57: [GO18_globalSetVolt]### Host voltage value is set.
14:46:57: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6273 ] 
14:46:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:46:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6274 ] 
14:46:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:46:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:46:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:46:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:46:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:46:57: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6275 ] 
14:46:57: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:46:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:46:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129990>, <py_sfcl.CommandDataDefinition object at 0x06145CF0>) , Command count = 6276 ] 
14:46:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:46:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x052AFC60>, <py_sfcl.CommandDataDefinition object at 0x0611C7B0>) , Command count = 6277 ] 
14:46:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:46:57: [ SetCardRCA(0x1, 0xD555) , Command count = 6278 ] 
14:46:57: [DVTCommonLib]### Identification :Idenfication of card completed 

14:46:57: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:46:57: Host Frequency set to 25000 KHz
14:46:57: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:46:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:57: ####CSD Registe 2.0 Values####
14:46:57: CSD_STRUCTURE                                 :0x1
14:46:57: Reserv1                                       :0x0
14:46:57: Time Access 1 TAAC                            :0xe
14:46:57: Time Access 2 NSAC*100                        :0x0
14:46:57: Data Transfer Rate TRAN_SPEED                 :0x32
14:46:57: Card Command Classess CCC                     :0x5b5
14:46:57: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:57: DSR(driver stage register)  DSR_IMP           :0x0
14:46:57: Reserv2                                       :0x0
14:46:57: Device Size C_SIZE                            :0xedc8
14:46:57: Reserv3                                       :0x0
14:46:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:57: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:57: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:57: Reserv4                                       :0x0
14:46:57: Write Speed Factor R2W_FACTOR                 :0x2
14:46:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:57: FILE_FORMAT_GRP                               :0x0
14:46:57: COPY flag                                     :0x1
14:46:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:57: File_Format                                   :0x0
14:46:57: CRC                                           :0x0
14:46:57: ####CSD Registe Values####  

14:46:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:46:57: [GetSCRRegisterEntry] Passed
14:46:57: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:46:57: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:46:57: Data_Status_After Erases          : 0
14:46:57: CPRM Security Support             : No Security
14:46:57: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:46:57: Spec. Version                     : Version 3.0X
14:46:57: Extended Security Support         : Extended_Security_Not_Supported
14:46:57: Command Support                   : COMMAND_SUPPORT
14:46:57: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:46:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129300>, <py_sfcl.CommandDataDefinition object at 0x06129DE0>) , Command count = 6279 ] 
14:46:57: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:46:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E2A0>, <py_sfcl.CommandDataDefinition object at 0x06129CF0>) , Command count = 6280 ] 
14:46:57: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:46:57: [ SetBusWidth(0x4) , Command count = 6281 ] 
14:46:57: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:46:57: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0613FA80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6282 ] 
14:46:57: Protected Area Size 0x28000
14:46:57: Bus Width           2
14:46:57: Secure Mode         0
14:46:57: Speed  Class        4
14:46:57: Perf Move           0
14:46:57: Au Size             9
14:46:57: Erase Size          15
14:46:57: Erase Timeout       1
14:46:57: Erase offset        1
14:46:57: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:46:57: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:46:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:46:57: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6283 ] 
14:46:57: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:46:57: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:46:57: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:46:58: Host Frequency set to 100000 KHz
14:46:58: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:46:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:46:58: ####CSD Registe 2.0 Values####
14:46:58: CSD_STRUCTURE                                 :0x1
14:46:58: Reserv1                                       :0x0
14:46:58: Time Access 1 TAAC                            :0xe
14:46:58: Time Access 2 NSAC*100                        :0x0
14:46:58: Data Transfer Rate TRAN_SPEED                 :0xb
14:46:58: Card Command Classess CCC                     :0x5b5
14:46:58: Max Read Data Block Length  READ_BL_LEN       :0x9
14:46:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:46:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:46:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:46:58: DSR(driver stage register)  DSR_IMP           :0x0
14:46:58: Reserv2                                       :0x0
14:46:58: Device Size C_SIZE                            :0xedc8
14:46:58: Reserv3                                       :0x0
14:46:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:46:58: Erase Sector Size SECTOR_SIZE                 :0x7f
14:46:58: Write Protect Group Size WP_GRP_SIZE          :0x0
14:46:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:46:58: Reserv4                                       :0x0
14:46:58: Write Speed Factor R2W_FACTOR                 :0x2
14:46:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:46:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:46:58: FILE_FORMAT_GRP                               :0x0
14:46:58: COPY flag                                     :0x1
14:46:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:46:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:46:58: File_Format                                   :0x0
14:46:58: CRC                                           :0x0
14:46:58: ####CSD Registe Values####  

14:46:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FCF0>, <py_sfcl.CommandDataDefinition object at 0x06129F60>) , Command count = 6284 ] 
14:46:58: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:46:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E780>, <py_sfcl.CommandDataDefinition object at 0x06145E10>) , Command count = 6285 ] 
14:46:58: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:46:58: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:46:58: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:46:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DB3C to EndLba:0x3B6DBBC with One's Pattern
14:46:58: [ WrLbaNoData(0x3B6DB3C, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6286 ] 
14:46:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DB3C to EndLba:0x3B6DBBC with One's Pattern 

14:46:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6DBBC to EndLba:0x3B6DC3C with One's Pattern
14:46:58: [ WrLbaNoData(0x3B6DBBC, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6287 ] 
14:46:58: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6DBBC to EndLba:0x3B6DC3C with One's Pattern 

14:46:59: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x061291E0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129D20>, <py_sfcl.PySEnhancedCmdData object at 0x06129510>, <None>, <py_sfcl.Command23 object at 0x06129210>) , Command count = 6288 ] 
14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 1
14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:46:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C810>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0611CAB0>, <py_sfcl.PySEnhancedCmdData object at 0x0611CDB0>, <None>, <py_sfcl.Command23 object at 0x061299F0>) , Command count = 6289 ] 
14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:46:59: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x060E3570>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061295D0>, <py_sfcl.PySEnhancedCmdData object at 0x061297B0>, <None>) , Command count = 6290 ] 
14:46:59: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:46:59: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:01: Host Frequency set to 25000 KHz
14:47:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:01: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:01: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C930>, 0x0, True) , Command count = 6291 ] 
14:47:01: [GO18_globalSetVolt]### Host voltage value is set.
14:47:01: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:01: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CC00>, 0x0, False) , Command count = 6292 ] 
14:47:01: [GO18_globalSetVolt]### Host voltage value is set.
14:47:01: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6293 ] 
14:47:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6294 ] 
14:47:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:01: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6295 ] 
14:47:01: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E060>, <py_sfcl.CommandDataDefinition object at 0x06145660>) , Command count = 6296 ] 
14:47:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E6F0>, <py_sfcl.CommandDataDefinition object at 0x06129330>) , Command count = 6297 ] 
14:47:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:01: [ SetCardRCA(0x1, 0xD555) , Command count = 6298 ] 
14:47:01: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:01: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:01: Host Frequency set to 25000 KHz
14:47:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:01: ####CSD Registe 2.0 Values####
14:47:01: CSD_STRUCTURE                                 :0x1
14:47:01: Reserv1                                       :0x0
14:47:01: Time Access 1 TAAC                            :0xe
14:47:01: Time Access 2 NSAC*100                        :0x0
14:47:01: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:01: Card Command Classess CCC                     :0x5b5
14:47:01: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:01: DSR(driver stage register)  DSR_IMP           :0x0
14:47:01: Reserv2                                       :0x0
14:47:01: Device Size C_SIZE                            :0xedc8
14:47:01: Reserv3                                       :0x0
14:47:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:01: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:01: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:01: Reserv4                                       :0x0
14:47:01: Write Speed Factor R2W_FACTOR                 :0x2
14:47:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:01: FILE_FORMAT_GRP                               :0x0
14:47:01: COPY flag                                     :0x1
14:47:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:01: File_Format                                   :0x0
14:47:01: CRC                                           :0x0
14:47:01: ####CSD Registe Values####  

14:47:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:01: [GetSCRRegisterEntry] Passed
14:47:01: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:01: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:01: Data_Status_After Erases          : 0
14:47:01: CPRM Security Support             : No Security
14:47:01: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:01: Spec. Version                     : Version 3.0X
14:47:01: Extended Security Support         : Extended_Security_Not_Supported
14:47:01: Command Support                   : COMMAND_SUPPORT
14:47:01: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061450C0>, <py_sfcl.CommandDataDefinition object at 0x06145420>) , Command count = 6299 ] 
14:47:01: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611C990>, <py_sfcl.CommandDataDefinition object at 0x0613F3C0>) , Command count = 6300 ] 
14:47:01: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:01: [ SetBusWidth(0x4) , Command count = 6301 ] 
14:47:01: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:01: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06145A80>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6302 ] 
14:47:01: Protected Area Size 0x28000
14:47:01: Bus Width           2
14:47:01: Secure Mode         0
14:47:01: Speed  Class        4
14:47:01: Perf Move           0
14:47:01: Au Size             9
14:47:01: Erase Size          15
14:47:01: Erase Timeout       1
14:47:01: Erase offset        1
14:47:01: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:01: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:01: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6303 ] 
14:47:01: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:01: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:01: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:02: Host Frequency set to 100000 KHz
14:47:02: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:02: ####CSD Registe 2.0 Values####
14:47:02: CSD_STRUCTURE                                 :0x1
14:47:02: Reserv1                                       :0x0
14:47:02: Time Access 1 TAAC                            :0xe
14:47:02: Time Access 2 NSAC*100                        :0x0
14:47:02: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:02: Card Command Classess CCC                     :0x5b5
14:47:02: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:02: DSR(driver stage register)  DSR_IMP           :0x0
14:47:02: Reserv2                                       :0x0
14:47:02: Device Size C_SIZE                            :0xedc8
14:47:02: Reserv3                                       :0x0
14:47:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:02: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:02: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:02: Reserv4                                       :0x0
14:47:02: Write Speed Factor R2W_FACTOR                 :0x2
14:47:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:02: FILE_FORMAT_GRP                               :0x0
14:47:02: COPY flag                                     :0x1
14:47:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:02: File_Format                                   :0x0
14:47:02: CRC                                           :0x0
14:47:02: ####CSD Registe Values####  

14:47:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py_sfcl.CommandDataDefinition object at 0x0611CCC0>) , Command count = 6304 ] 
14:47:02: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129960>, <py_sfcl.CommandDataDefinition object at 0x06129F00>) , Command count = 6305 ] 
14:47:02: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:02: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:02: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:47:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B714AA to EndLba:0x3B7152A with One's Pattern
14:47:02: [ WrLbaNoData(0x3B714AA, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6306 ] 
14:47:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B714AA to EndLba:0x3B7152A with One's Pattern 

14:47:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B7152A to EndLba:0x3B715AA with One's Pattern
14:47:02: [ WrLbaNoData(0x3B7152A, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6307 ] 
14:47:02: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B7152A to EndLba:0x3B715AA with One's Pattern 

14:47:03: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E330>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061389F0>, <py_sfcl.PySEnhancedCmdData object at 0x06129D50>, <None>, <py_sfcl.Command23 object at 0x0611CDB0>) , Command count = 6308 ] 
14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 0
14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C840>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06129660>, <py_sfcl.PySEnhancedCmdData object at 0x06129EA0>, <None>, <py_sfcl.Command23 object at 0x061293C0>) , Command count = 6309 ] 
14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:47:03: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0611C540>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x061298A0>, <py_sfcl.PySEnhancedCmdData object at 0x061292A0>, <None>) , Command count = 6310 ] 
14:47:03: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:47:03: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:05: Host Frequency set to 25000 KHz
14:47:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:05: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:05: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611C7E0>, 0x0, True) , Command count = 6311 ] 
14:47:05: [GO18_globalSetVolt]### Host voltage value is set.
14:47:05: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:05: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612E270>, 0x0, False) , Command count = 6312 ] 
14:47:05: [GO18_globalSetVolt]### Host voltage value is set.
14:47:05: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6313 ] 
14:47:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6314 ] 
14:47:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:05: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6315 ] 
14:47:05: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129180>, <py_sfcl.CommandDataDefinition object at 0x06129120>) , Command count = 6316 ] 
14:47:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FED0>, <py_sfcl.CommandDataDefinition object at 0x06129A20>) , Command count = 6317 ] 
14:47:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:05: [ SetCardRCA(0x1, 0xD555) , Command count = 6318 ] 
14:47:05: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:05: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:05: Host Frequency set to 25000 KHz
14:47:05: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:05: ####CSD Registe 2.0 Values####
14:47:05: CSD_STRUCTURE                                 :0x1
14:47:05: Reserv1                                       :0x0
14:47:05: Time Access 1 TAAC                            :0xe
14:47:05: Time Access 2 NSAC*100                        :0x0
14:47:05: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:05: Card Command Classess CCC                     :0x5b5
14:47:05: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:05: DSR(driver stage register)  DSR_IMP           :0x0
14:47:05: Reserv2                                       :0x0
14:47:05: Device Size C_SIZE                            :0xedc8
14:47:05: Reserv3                                       :0x0
14:47:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:05: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:05: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:05: Reserv4                                       :0x0
14:47:05: Write Speed Factor R2W_FACTOR                 :0x2
14:47:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:05: FILE_FORMAT_GRP                               :0x0
14:47:05: COPY flag                                     :0x1
14:47:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:05: File_Format                                   :0x0
14:47:05: CRC                                           :0x0
14:47:05: ####CSD Registe Values####  

14:47:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:05: [GetSCRRegisterEntry] Passed
14:47:05: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:05: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:05: Data_Status_After Erases          : 0
14:47:05: CPRM Security Support             : No Security
14:47:05: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:05: Spec. Version                     : Version 3.0X
14:47:05: Extended Security Support         : Extended_Security_Not_Supported
14:47:05: Command Support                   : COMMAND_SUPPORT
14:47:05: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129B40>, <py_sfcl.CommandDataDefinition object at 0x06129CC0>) , Command count = 6319 ] 
14:47:05: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E750>, <py_sfcl.CommandDataDefinition object at 0x0612ECF0>) , Command count = 6320 ] 
14:47:05: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:05: [ SetBusWidth(0x4) , Command count = 6321 ] 
14:47:05: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:05: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x0611C090>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6322 ] 
14:47:05: Protected Area Size 0x28000
14:47:05: Bus Width           2
14:47:05: Secure Mode         0
14:47:05: Speed  Class        4
14:47:05: Perf Move           0
14:47:05: Au Size             9
14:47:05: Erase Size          15
14:47:05: Erase Timeout       1
14:47:05: Erase offset        1
14:47:05: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:05: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:05: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6323 ] 
14:47:05: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:05: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:05: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:05: Host Frequency set to 100000 KHz
14:47:05: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:05: ####CSD Registe 2.0 Values####
14:47:05: CSD_STRUCTURE                                 :0x1
14:47:05: Reserv1                                       :0x0
14:47:05: Time Access 1 TAAC                            :0xe
14:47:06: Time Access 2 NSAC*100                        :0x0
14:47:06: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:06: Card Command Classess CCC                     :0x5b5
14:47:06: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:06: DSR(driver stage register)  DSR_IMP           :0x0
14:47:06: Reserv2                                       :0x0
14:47:06: Device Size C_SIZE                            :0xedc8
14:47:06: Reserv3                                       :0x0
14:47:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:06: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:06: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:06: Reserv4                                       :0x0
14:47:06: Write Speed Factor R2W_FACTOR                 :0x2
14:47:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:06: FILE_FORMAT_GRP                               :0x0
14:47:06: COPY flag                                     :0x1
14:47:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:06: File_Format                                   :0x0
14:47:06: CRC                                           :0x0
14:47:06: ####CSD Registe Values####  

14:47:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py_sfcl.CommandDataDefinition object at 0x0612E030>) , Command count = 6324 ] 
14:47:06: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612EA50>, <py_sfcl.CommandDataDefinition object at 0x06145A80>) , Command count = 6325 ] 
14:47:06: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:06: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:06: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:47:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FA70 to EndLba:0x3B6FAF0 with One's Pattern
14:47:06: [ WrLbaNoData(0x3B6FA70, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6326 ] 
14:47:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FA70 to EndLba:0x3B6FAF0 with One's Pattern 

14:47:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6FAF0 to EndLba:0x3B6FB70 with One's Pattern
14:47:06: [ WrLbaNoData(0x3B6FAF0, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6327 ] 
14:47:06: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6FAF0 to EndLba:0x3B6FB70 with One's Pattern 

14:47:07: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0613F7B0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E0F0>, <py_sfcl.PySEnhancedCmdData object at 0x0612E090>, <None>, <py_sfcl.Command23 object at 0x0611C840>) , Command count = 6328 ] 
14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Outer loop Count 1021
14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 8
14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129750>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145690>, <py_sfcl.PySEnhancedCmdData object at 0x06145EA0>, <None>, <py_sfcl.Command23 object at 0x0612E210>) , Command count = 6329 ] 
14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:47:07: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129C60>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E5A0>, <py_sfcl.PySEnhancedCmdData object at 0x06145570>, <None>) , Command count = 6330 ] 
14:47:07: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:47:07: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:09: Host Frequency set to 25000 KHz
14:47:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:09: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:09: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x0611CD20>, 0x0, True) , Command count = 6331 ] 
14:47:09: [GO18_globalSetVolt]### Host voltage value is set.
14:47:09: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:09: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138480>, 0x0, False) , Command count = 6332 ] 
14:47:09: [GO18_globalSetVolt]### Host voltage value is set.
14:47:09: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6333 ] 
14:47:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6334 ] 
14:47:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:09: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6335 ] 
14:47:09: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F750>, <py_sfcl.CommandDataDefinition object at 0x061298A0>) , Command count = 6336 ] 
14:47:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E570>, <py_sfcl.CommandDataDefinition object at 0x06132060>) , Command count = 6337 ] 
14:47:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:09: [ SetCardRCA(0x1, 0xD555) , Command count = 6338 ] 
14:47:09: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:09: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:09: Host Frequency set to 25000 KHz
14:47:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:09: ####CSD Registe 2.0 Values####
14:47:09: CSD_STRUCTURE                                 :0x1
14:47:09: Reserv1                                       :0x0
14:47:09: Time Access 1 TAAC                            :0xe
14:47:09: Time Access 2 NSAC*100                        :0x0
14:47:09: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:09: Card Command Classess CCC                     :0x5b5
14:47:09: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:09: DSR(driver stage register)  DSR_IMP           :0x0
14:47:09: Reserv2                                       :0x0
14:47:09: Device Size C_SIZE                            :0xedc8
14:47:09: Reserv3                                       :0x0
14:47:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:09: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:09: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:09: Reserv4                                       :0x0
14:47:09: Write Speed Factor R2W_FACTOR                 :0x2
14:47:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:09: FILE_FORMAT_GRP                               :0x0
14:47:09: COPY flag                                     :0x1
14:47:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:09: File_Format                                   :0x0
14:47:09: CRC                                           :0x0
14:47:09: ####CSD Registe Values####  

14:47:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:09: [GetSCRRegisterEntry] Passed
14:47:09: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:09: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:09: Data_Status_After Erases          : 0
14:47:09: CPRM Security Support             : No Security
14:47:09: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:09: Spec. Version                     : Version 3.0X
14:47:09: Extended Security Support         : Extended_Security_Not_Supported
14:47:09: Command Support                   : COMMAND_SUPPORT
14:47:09: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061298D0>, <py_sfcl.CommandDataDefinition object at 0x06145510>) , Command count = 6339 ] 
14:47:09: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E3960>, <py_sfcl.CommandDataDefinition object at 0x0613FA50>) , Command count = 6340 ] 
14:47:09: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:09: [ SetBusWidth(0x4) , Command count = 6341 ] 
14:47:09: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:09: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132B70>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6342 ] 
14:47:09: Protected Area Size 0x28000
14:47:09: Bus Width           2
14:47:09: Secure Mode         0
14:47:09: Speed  Class        4
14:47:09: Perf Move           0
14:47:09: Au Size             9
14:47:09: Erase Size          15
14:47:09: Erase Timeout       1
14:47:09: Erase offset        1
14:47:09: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:09: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:09: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6343 ] 
14:47:09: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:09: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:09: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:09: Host Frequency set to 100000 KHz
14:47:09: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:09: ####CSD Registe 2.0 Values####
14:47:09: CSD_STRUCTURE                                 :0x1
14:47:09: Reserv1                                       :0x0
14:47:09: Time Access 1 TAAC                            :0xe
14:47:10: Time Access 2 NSAC*100                        :0x0
14:47:10: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:10: Card Command Classess CCC                     :0x5b5
14:47:10: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:10: DSR(driver stage register)  DSR_IMP           :0x0
14:47:10: Reserv2                                       :0x0
14:47:10: Device Size C_SIZE                            :0xedc8
14:47:10: Reserv3                                       :0x0
14:47:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:10: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:10: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:10: Reserv4                                       :0x0
14:47:10: Write Speed Factor R2W_FACTOR                 :0x2
14:47:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:10: FILE_FORMAT_GRP                               :0x0
14:47:10: COPY flag                                     :0x1
14:47:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:10: File_Format                                   :0x0
14:47:10: CRC                                           :0x0
14:47:10: ####CSD Registe Values####  

14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132090>, <py_sfcl.CommandDataDefinition object at 0x0613FC60>) , Command count = 6344 ] 
14:47:10: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138CC0>, <py_sfcl.CommandDataDefinition object at 0x06129DB0>) , Command count = 6345 ] 
14:47:10: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:10: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:47:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F600 to EndLba:0x3B6F680 with One's Pattern
14:47:10: [ WrLbaNoData(0x3B6F600, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6346 ] 
14:47:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F600 to EndLba:0x3B6F680 with One's Pattern 

14:47:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6F680 to EndLba:0x3B6F700 with One's Pattern
14:47:10: [ WrLbaNoData(0x3B6F680, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6347 ] 
14:47:10: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6F680 to EndLba:0x3B6F700 with One's Pattern 

14:47:10: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:47:10: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129150>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E4E0>, <py_sfcl.PySEnhancedCmdData object at 0x06132150>, <None>, <py_sfcl.Command23 object at 0x06129750>) , Command count = 6348 ] 
14:47:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 7
14:47:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612E8D0>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06145C00>, <py_sfcl.PySEnhancedCmdData object at 0x06145060>, <None>, <py_sfcl.Command23 object at 0x061320F0>) , Command count = 6349 ] 
14:47:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:47:11: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132AB0>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612E900>, <py_sfcl.PySEnhancedCmdData object at 0x0612EDE0>, <None>) , Command count = 6350 ] 
14:47:11: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:47:11: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:13: Host Frequency set to 25000 KHz
14:47:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:13: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:13: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0613F810>, 0x0, True) , Command count = 6351 ] 
14:47:13: [GO18_globalSetVolt]### Host voltage value is set.
14:47:13: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:13: [ SetVolt(<py_sfcl.SDVoltage object at 0x0612EF00>, 0x0, False) , Command count = 6352 ] 
14:47:13: [GO18_globalSetVolt]### Host voltage value is set.
14:47:13: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6353 ] 
14:47:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6354 ] 
14:47:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:13: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6355 ] 
14:47:13: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06145150>, <py_sfcl.CommandDataDefinition object at 0x06129FC0>) , Command count = 6356 ] 
14:47:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0611CB70>, <py_sfcl.CommandDataDefinition object at 0x06146510>) , Command count = 6357 ] 
14:47:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:13: [ SetCardRCA(0x1, 0xD555) , Command count = 6358 ] 
14:47:13: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:13: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:13: Host Frequency set to 25000 KHz
14:47:13: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:13: ####CSD Registe 2.0 Values####
14:47:13: CSD_STRUCTURE                                 :0x1
14:47:13: Reserv1                                       :0x0
14:47:13: Time Access 1 TAAC                            :0xe
14:47:13: Time Access 2 NSAC*100                        :0x0
14:47:13: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:13: Card Command Classess CCC                     :0x5b5
14:47:13: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:13: DSR(driver stage register)  DSR_IMP           :0x0
14:47:13: Reserv2                                       :0x0
14:47:13: Device Size C_SIZE                            :0xedc8
14:47:13: Reserv3                                       :0x0
14:47:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:13: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:13: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:13: Reserv4                                       :0x0
14:47:13: Write Speed Factor R2W_FACTOR                 :0x2
14:47:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:13: FILE_FORMAT_GRP                               :0x0
14:47:13: COPY flag                                     :0x1
14:47:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:13: File_Format                                   :0x0
14:47:13: CRC                                           :0x0
14:47:13: ####CSD Registe Values####  

14:47:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:13: [GetSCRRegisterEntry] Passed
14:47:13: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:13: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:13: Data_Status_After Erases          : 0
14:47:13: CPRM Security Support             : No Security
14:47:13: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:13: Spec. Version                     : Version 3.0X
14:47:13: Extended Security Support         : Extended_Security_Not_Supported
14:47:13: Command Support                   : COMMAND_SUPPORT
14:47:13: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FD20>, <py_sfcl.CommandDataDefinition object at 0x0612EF60>) , Command count = 6359 ] 
14:47:13: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061322D0>, <py_sfcl.CommandDataDefinition object at 0x061327B0>) , Command count = 6360 ] 
14:47:13: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:13: [ SetBusWidth(0x4) , Command count = 6361 ] 
14:47:13: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:13: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132FC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6362 ] 
14:47:13: Protected Area Size 0x28000
14:47:13: Bus Width           2
14:47:13: Secure Mode         0
14:47:13: Speed  Class        4
14:47:13: Perf Move           0
14:47:13: Au Size             9
14:47:13: Erase Size          15
14:47:13: Erase Timeout       1
14:47:13: Erase offset        1
14:47:13: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:13: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:13: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6363 ] 
14:47:13: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:13: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:13: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:13: Host Frequency set to 100000 KHz
14:47:13: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:13: ####CSD Registe 2.0 Values####
14:47:13: CSD_STRUCTURE                                 :0x1
14:47:13: Reserv1                                       :0x0
14:47:13: Time Access 1 TAAC                            :0xe
14:47:14: Time Access 2 NSAC*100                        :0x0
14:47:14: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:14: Card Command Classess CCC                     :0x5b5
14:47:14: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:14: DSR(driver stage register)  DSR_IMP           :0x0
14:47:14: Reserv2                                       :0x0
14:47:14: Device Size C_SIZE                            :0xedc8
14:47:14: Reserv3                                       :0x0
14:47:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:14: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:14: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:14: Reserv4                                       :0x0
14:47:14: Write Speed Factor R2W_FACTOR                 :0x2
14:47:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:14: FILE_FORMAT_GRP                               :0x0
14:47:14: COPY flag                                     :0x1
14:47:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:14: File_Format                                   :0x0
14:47:14: CRC                                           :0x0
14:47:14: ####CSD Registe Values####  

14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129360>, <py_sfcl.CommandDataDefinition object at 0x06145B70>) , Command count = 6364 ] 
14:47:14: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606FB10>, <py_sfcl.CommandDataDefinition object at 0x0612E420>) , Command count = 6365 ] 
14:47:14: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:14: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:47:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D916 to EndLba:0x3B6D996 with One's Pattern
14:47:14: [ WrLbaNoData(0x3B6D916, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6366 ] 
14:47:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D916 to EndLba:0x3B6D996 with One's Pattern 

14:47:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6D996 to EndLba:0x3B6DA16 with One's Pattern
14:47:14: [ WrLbaNoData(0x3B6D996, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6367 ] 
14:47:14: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :Done MultipleWrite from StartLba: 0x3B6D996 to EndLba:0x3B6DA16 with One's Pattern 

14:47:14: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Completed 

14:47:14: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129690>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132CC0>, <py_sfcl.PySEnhancedCmdData object at 0x061321B0>, <None>, <py_sfcl.Command23 object at 0x06145060>) , Command count = 6368 ] 
14:47:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Inner loop Count 6
14:47:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission called
14:47:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0612EC00>, py_sfcl.CARD_COMMAND.READ_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x0612EC30>, <py_sfcl.PySEnhancedCmdData object at 0x0612EB70>, <None>, <py_sfcl.Command23 object at 0x0525E030>) , Command count = 6369 ] 
14:47:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Read Stop Transmission Completed

14:47:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss called
14:47:15: [ EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06132450>, py_sfcl.CARD_COMMAND.WRITE_MULTIPLE_BLOCK, True, <py_sfcl.PySPerfReadWriteParams object at 0x06132390>, <py_sfcl.PySEnhancedCmdData object at 0x0612EFC0>, <None>) , Command count = 6370 ] 
14:47:15: STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump[INFO] ### Multiple Write with PowerLoss compledted
14:47:15: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:17: Host Frequency set to 25000 KHz
14:47:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:17: [GO18_globalSetVolt]### Set Host Voltage value.
14:47:17: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
14:47:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x06138750>, 0x0, True) , Command count = 6371 ] 
14:47:17: [GO18_globalSetVolt]### Host voltage value is set.
14:47:17: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
14:47:17: [ SetVolt(<py_sfcl.SDVoltage object at 0x061388D0>, 0x0, False) , Command count = 6372 ] 
14:47:17: [GO18_globalSetVolt]### Host voltage value is set.
14:47:17: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 6373 ] 
14:47:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
14:47:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 6374 ] 
14:47:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
14:47:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
14:47:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
14:47:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
14:47:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
14:47:17: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 6375 ] 
14:47:17: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
14:47:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
14:47:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132480>, <py_sfcl.CommandDataDefinition object at 0x06132420>) , Command count = 6376 ] 
14:47:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
14:47:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129ED0>, <py_sfcl.CommandDataDefinition object at 0x061465A0>) , Command count = 6377 ] 
14:47:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
14:47:17: [ SetCardRCA(0x1, 0xD555) , Command count = 6378 ] 
14:47:17: [DVTCommonLib]### Identification :Idenfication of card completed 

14:47:17: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
14:47:17: Host Frequency set to 25000 KHz
14:47:17: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
14:47:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:17: ####CSD Registe 2.0 Values####
14:47:17: CSD_STRUCTURE                                 :0x1
14:47:17: Reserv1                                       :0x0
14:47:17: Time Access 1 TAAC                            :0xe
14:47:17: Time Access 2 NSAC*100                        :0x0
14:47:17: Data Transfer Rate TRAN_SPEED                 :0x32
14:47:17: Card Command Classess CCC                     :0x5b5
14:47:17: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:17: DSR(driver stage register)  DSR_IMP           :0x0
14:47:17: Reserv2                                       :0x0
14:47:17: Device Size C_SIZE                            :0xedc8
14:47:17: Reserv3                                       :0x0
14:47:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:17: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:17: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:17: Reserv4                                       :0x0
14:47:17: Write Speed Factor R2W_FACTOR                 :0x2
14:47:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:17: FILE_FORMAT_GRP                               :0x0
14:47:17: COPY flag                                     :0x1
14:47:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:17: File_Format                                   :0x0
14:47:17: CRC                                           :0x0
14:47:17: ####CSD Registe Values####  

14:47:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
14:47:17: [GetSCRRegisterEntry] Passed
14:47:17: SCR_STRUCTURE Version             : SCR_VERSION_1.0
14:47:17: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
14:47:17: Data_Status_After Erases          : 0
14:47:17: CPRM Security Support             : No Security
14:47:17: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
14:47:17: Spec. Version                     : Version 3.0X
14:47:17: Extended Security Support         : Extended_Security_Not_Supported
14:47:17: Command Support                   : COMMAND_SUPPORT
14:47:17: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

14:47:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F60>, <py_sfcl.CommandDataDefinition object at 0x06132570>) , Command count = 6379 ] 
14:47:17: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
14:47:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138450>, <py_sfcl.CommandDataDefinition object at 0x06132F30>) , Command count = 6380 ] 
14:47:17: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
14:47:17: [ SetBusWidth(0x4) , Command count = 6381 ] 
14:47:17: [DVTCommonLib]### GetSDStatus :######SD Status#######
14:47:17: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06132ED0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 6382 ] 
14:47:17: Protected Area Size 0x28000
14:47:17: Bus Width           2
14:47:17: Secure Mode         0
14:47:17: Speed  Class        4
14:47:17: Perf Move           0
14:47:17: Au Size             9
14:47:17: Erase Size          15
14:47:17: Erase Timeout       1
14:47:17: Erase offset        1
14:47:17: [DVTCommonLib]### GetSDStatus :######SD Status#######

14:47:17: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
14:47:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
14:47:17: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 6383 ] 
14:47:17: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
14:47:17: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

14:47:17: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
14:47:17: Host Frequency set to 100000 KHz
14:47:17: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
14:47:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
14:47:17: ####CSD Registe 2.0 Values####
14:47:17: CSD_STRUCTURE                                 :0x1
14:47:17: Reserv1                                       :0x0
14:47:17: Time Access 1 TAAC                            :0xe
14:47:18: Time Access 2 NSAC*100                        :0x0
14:47:18: Data Transfer Rate TRAN_SPEED                 :0xb
14:47:18: Card Command Classess CCC                     :0x5b5
14:47:18: Max Read Data Block Length  READ_BL_LEN       :0x9
14:47:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
14:47:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
14:47:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
14:47:18: DSR(driver stage register)  DSR_IMP           :0x0
14:47:18: Reserv2                                       :0x0
14:47:18: Device Size C_SIZE                            :0xedc8
14:47:18: Reserv3                                       :0x0
14:47:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
14:47:18: Erase Sector Size SECTOR_SIZE                 :0x7f
14:47:18: Write Protect Group Size WP_GRP_SIZE          :0x0
14:47:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
14:47:18: Reserv4                                       :0x0
14:47:18: Write Speed Factor R2W_FACTOR                 :0x2
14:47:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
14:47:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
14:47:18: FILE_FORMAT_GRP                               :0x0
14:47:18: COPY flag                                     :0x1
14:47:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
14:47:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
14:47:18: File_Format                                   :0x0
14:47:18: CRC                                           :0x0
14:47:18: ####CSD Registe Values####  

14:47:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED50>, <py_sfcl.CommandDataDefinition object at 0x0613FD50>) , Command count = 6384 ] 
14:47:18: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
14:47:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132330>, <py_sfcl.CommandDataDefinition object at 0x06145F60>) , Command count = 6385 ] 
14:47:18: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
14:47:18: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


14:47:18: STPTRNSABRTST63_Util_PerformRecoveryWriteBlocks[INFO]: Called 

14:47:18: [DVTCommonLib]### WriteWithFPGAPattern[INFO] :MultipleWrite to the card at StartLba:0x3B6E070 to EndLba:0x3B6E0F0 with One's Pattern
14:47:18: [ WrLbaNoData(0x3B6E070, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0) , Command count = 6386 ] 
14:47:18: [ GetCardStatus() , Command count = 6387 ] 
14:47:18: [DVTCommonLib]### WriteWithFPGAPattern[ERROR] :MultipleWrite Failed from StartLba:0x3B6E070 to EndLba:0x3B6E0F0 with One's Pattern
14:47:18: [DVTCommonLib]### Exception_Details :POWER ON-OFF General Error
14:47:18: Failed Running script <module 'STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST54_DVT_ST_PowerLoss_2_22_Before_Data_Jump.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xF5L (245) executing command 'WrLbaNoData'
   Description : POWER_ON_OFF_GENERAL_ERR
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x3B6E070, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_ONE, True, False, False, False, 0x0, False, 0x0)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>
 
14:47:18: ########################################
14:47:18: ########################################
14:47:18: Stated Running script STPTRNSABRTST55_DVT_ST_PowerLoss_2_23_Before_Data_Overlap 
14:47:18: ########################################
14:47:18: ###### Running STPTRNSABRTST55_DVT_ST_PowerLoss_2_23_Before_Data_Overlap Test 
14:47:18: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:19: Failed Running script <module 'STPTRNSABRTST55_DVT_ST_PowerLoss_2_23_Before_Data_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST55_DVT_ST_PowerLoss_2_23_Before_Data_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:19: ########################################
14:47:19: ########################################
14:47:19: Stated Running script STPTRNSABRTST56_DVT_ST_PowerLoss_2_24_During_Data_Jump 
14:47:19: ########################################
14:47:19: ###### Running STPTRNSABRTST56_DVT_ST_PowerLoss_2_24_During_Data_Jump Test 
14:47:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:19: Failed Running script <module 'STPTRNSABRTST56_DVT_ST_PowerLoss_2_24_During_Data_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST56_DVT_ST_PowerLoss_2_24_During_Data_Jump.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:19: ########################################
14:47:19: ########################################
14:47:19: Stated Running script STPTRNSABRTST57_DVT_ST_PowerLoss_2_25_During_Data_Overlap 
14:47:19: ########################################
14:47:19: ###### Running STPTRNSABRTST57_DVT_ST_PowerLoss_2_25_During_Data_Overlap Test 
14:47:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:19: Failed Running script <module 'STPTRNSABRTST57_DVT_ST_PowerLoss_2_25_During_Data_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST57_DVT_ST_PowerLoss_2_25_During_Data_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:19: ########################################
14:47:19: ########################################
14:47:19: Stated Running script STPTRNSABRTST58_DVT_ST_PowerLoss_2_26_CRC16_Jump 
14:47:19: ########################################
14:47:19: Failed to Import script STPTRNSABRTST58_DVT_ST_PowerLoss_2_26_CRC16_Jump with error No module named STPTRNSABRTST58_DVT_ST_PowerLoss_2_26_CRC16_Jump 
14:47:19: ########################################
14:47:19: ########################################
14:47:19: Stated Running script STPTRNSABRTST59_DVT_ST_PowerLoss_2_27_CRC16_Overlap 
14:47:19: ########################################
14:47:19: ###### Running STPTRNSABRTST59_DVT_ST_PowerLoss_2_27_CRC16_Overlap Test ###### 

14:47:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:19: Failed Running script <module 'STPTRNSABRTST59_DVT_ST_PowerLoss_2_27_CRC16_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST59_DVT_ST_PowerLoss_2_27_CRC16_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:19: ########################################
14:47:19: ########################################
14:47:19: Stated Running script STPTRNSABRTST60_DVT_ST_PowerLoss_2_28_Last_CRC_Jump 
14:47:19: ########################################
14:47:19: ###### Running STPTRNSABRTST60_DVT_ST_PowerLoss_2_28_Last_CRC_Jump Test ###### 

14:47:19: STPTRNSABRTST60_DVT_ST_PowerLoss_2_28_Last_CRC_Jump[INFO] ### Called STPTRNSABRTST62_util_LOAD_VARS for global values
14:47:19: STPTRNSABRTST60_DVT_ST_PowerLoss_2_28_Last_CRC_Jump[INFO] ### Completed importing global values from STPTRNSABRTST62_util_LOAD_VARS

14:47:19: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:19: Failed Running script <module 'STPTRNSABRTST60_DVT_ST_PowerLoss_2_28_Last_CRC_Jump' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST60_DVT_ST_PowerLoss_2_28_Last_CRC_Jump.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:19: ########################################
14:47:19: ########################################
14:47:20: Stated Running script STPTRNSABRTST61_DVT_ST_PowerLoss_2_29_Last_CRC_Overlap 
14:47:20: ########################################
14:47:20: ###### Running STPTRNSABRTST61_DVT_ST_PowerLoss_2_29_Last_CRC_Overlap Test ###### 

14:47:20: [GO4_globalInitCard]### Switch to Specify Card Type
14:47:20: Failed Running script <module 'STPTRNSABRTST61_DVT_ST_PowerLoss_2_29_Last_CRC_Overlap' from 'C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST61_DVT_ST_PowerLoss_2_29_Last_CRC_Overlap.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
14:47:20: ########################################
14:47:20: 


14:47:20: ########################################
14:47:20: The Script <class 'STPTRNSABRTST05_5_Call_All_PL2.call_All_PL2_5'> had 10 error on running 
14:47:20: ########################################

2016-11-21 14:47:20: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST05_5_Call_All_PL2.py", line 114, in RunTestProcedure
     self.call_All_PL2_5Obj.Run(randomObj)
   File "C:\SDDVT_Python_Package\SDDVT\SD\CommonDVT\Stop_transsmition\Abort_Tests\STPTRNSABRTST05_5_Call_All_PL2.py", line 87, in Run
     raise TestError.TestFailedError("The Script %s had %d error on running "%(self.__class__,ScriptsStatus))



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'STPTRNSABRTST<NUM>_<NUM>_Call_All_PL<NUM>.call_All_PL<NUM>_<NUM>'> had <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST05_5_Call_All_PL2.call_All_PL2_5'> had 10 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   6368 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06145ED0>, py_     1195.377        95.9   read=  0, write=  0                 0       
   6369 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x06129690>, py_     1195.473       109.3   read=  0, write=  0                 0       
   6370 EnhancedCommand(<py_sfcl.PySReadWriteParams object at 0x0525E030>, py_     1195.583        75.3   read=  0, write=  0                 0       
   6371 SetVolt(<py_sfcl.SDVoltage object at 0x0612EF00>, 0, T)                    1197.755        17.9   read=  0, write=  0                 0       
   6372 SetVolt(<py_sfcl.SDVoltage object at 0x06138750>, 0, F)                    1197.773        28.2   read=  0, write=  0                 0       
   6373 CardSetTimeOut(1F4, FA, 64)                                                1197.801         1.7   read=  0, write=  0                 0       
   6374 CardReset(py_sfcl.CARD_MODE.SD, 41FF8000, 1, T, <200/200, 0>, 1, 0, 1,     1197.804       205.4   read=  0, write=  0                 C1FF8000
   6375 SwitchVolt_CMD11(T, 0, 5)                                                  1198.010         8.4   read=  0, write=  0                 0       
   6376 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0606FB10>, <py     1198.019         4.0   read=  0, write=  0                 0       
   6377 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132480>, <py     1198.023         3.5   read=  0, write=  0                 0       
   6378 SetCardRCA(1, D555)                                                        1198.027         1.4   read=  0, write=  0                 'Obj'   
   6379 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129ED0>, <py     1198.205         3.2   read=  0, write=  0                 0       
   6380 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06132F60>, <py     1198.208         6.0   read=  0, write=  0                 0       
   6381 SetBusWidth(4)                                                             1198.214         3.6   read=  0, write=  0                 0       
   6382 CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x06138BA0>, <200/20     1198.218         7.3   read=  0, write=  0                 0       
   6383 CardSwitchCmd(T, [2,F,F,1,F,F], <40/200, 0>, 40)                           1198.226         6.7   read=  0, write=  0                 0       
   6384 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06138450>, <py     1198.759         3.2   read=  0, write=  0                 0       
   6385 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED50>, <py     1198.763       314.7   read=  0, write=  0                 0       
   6386 WrLbaNoData(3B6E070, 80, <400/200, Arb>, py_sfcl.Pattern.ALL_ONE, T, F     1199.078         6.8   read=  0, write=  0                 F5      
   6387 GetCardStatus()                                                            1199.085         6.0   read=  0, write=  0                 'Obj'   

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:19:59


Start LBA: 0xffffffff Transferred block amount: 0xffffffff

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            103          48           
  8 -  13 :    0            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    0            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    250 WrLbaNoData(0x0, 0x1D4000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST,            NA 33920.384798   NA                                  0       
     80 WrLbaNoData(0x0, 0x3A000, <0x400/0x200, Arb>, py_sfcl.Pattern.CONST, T           NA 2634.598586   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E4B0>, <py           NA  335.568730   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612ED50>, <py           NA  314.720291   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E5D0>, <py           NA  311.448545   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E390>, <py           NA  310.798965   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FC90>, <py           NA  305.705860   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E1E0>, <py           NA  292.098789   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06129360>, <py           NA  288.103208   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E690>, <py           NA  279.711492   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F9F0>, <py           NA  278.835827   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F360>, <py           NA  276.507059   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061292D0>, <py           NA  275.847518   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061381E0>, <py           NA  275.054559   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060E39C0>, <py           NA  274.529039   NA                                  0       
    250 WrLbaNoData(0x3B701DB, 0x80, <0x400/0x200, Arb>, py_sfcl.Pattern.ALL_O           NA  272.452013   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613FF30>, <py           NA  270.803916   NA                                  0       
    134 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612E660>, <py           NA  267.788742   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061329C0>, <py           NA  265.811628   NA                                  0       
    250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061387B0>, <py           NA  264.765720   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 6386


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:20:00.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'STPTRNSABRTST05_5_Call_All_PL2.call_All_PL2_5'> had 10 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

