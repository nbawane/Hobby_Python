16:08:13: Sata Disconnector Board found in COM1.
16:08:17: *****************************************************

16:08:17: *  SDR/USD Driver version '10.0.0.1 (0x a.0.0.1)'   *

16:08:17: *                                                   *

16:08:17: *  Compatibility with this version is not verified! *

16:08:17: *****************************************************

16:08:20: [ DeviceSetupCompletion() , Command count = 7 ] 
16:08:20: Testname Mapping: ScriptName=[RTHHCCallAll01_CallAllReset_1] -> TestId=[RTHHCCallAll01]
16:08:20: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 8 ] 
16:08:20: [ GetPhysicalChipsInfo() , Command count = 9 ] 
16:08:20: [ GetFileSize(0xEA) , Command count = 10 ] 
16:08:20: [ ReadFile(<0xA00/0x200, Arb>, 0xEA, 0x1) , Command count = 11 ] 
16:08:20: [ GetFileSize(0x16) , Command count = 12 ] 
16:08:20: [ GetCardStatus() , Command count = 13 ] 
16:08:20: [ GetFileSize(0x18) , Command count = 14 ] 
16:08:20: [ ReadFile(<0x1000/0x200, Arb>, 0x18, 0x8) , Command count = 15 ] 
16:08:20: [ GetFileSize(0x15) , Command count = 16 ] 
16:08:20: [ ReadFile(<0x1000/0x200, Arb>, 0x15, 0x1) , Command count = 17 ] 
16:08:20: Can not find revision of File 21 in file 'config.xml' or card is in the ROM mode
16:08:20: [ GetFileSize(0xE) , Command count = 18 ] 
16:08:20: [ ReadFile(<0x1000/0x200, Arb>, 0xE, 0x1) , Command count = 19 ] 
16:08:20: [ GetFileSize(0x1E) , Command count = 20 ] 
16:08:20: [ GetCardStatus() , Command count = 21 ] 
16:08:20: [ GetFileSize(0x21) , Command count = 22 ] 
16:08:20: [ GetCardStatus() , Command count = 23 ] 
16:08:20: [ GetFileSize(0x33) , Command count = 24 ] 
16:08:20: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x33, 0x1) , Command count = 25 ] 
16:08:20: [ GetFileSize(0x1F) , Command count = 26 ] 
16:08:20: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x1F, 0x1) , Command count = 27 ] 
16:08:20: [ GetFileSize(0x2A) , Command count = 28 ] 
16:08:20: [ ReadFile(<0x1000/0x200, Spc, pat:0x0>, 0x2A, 0x1) , Command count = 29 ] 
16:08:20: [ ReadCfgConf(<0x1000/0x200, Spc, pat:0x0>, 0x1) , Command count = 30 ] 
16:08:20: [ ReadFirmwareParameter(<0x1000/0x200, Spc, pat:0x0>, 0x2) , Command count = 31 ] 
16:08:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_BE) , Command count = 32 ] 
16:08:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_PRODUCT) , Command count = 33 ] 
16:08:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, py_sfcl.IpComponentId.ID_FE_SD) , Command count = 34 ] 
16:08:20: [ GetIpInformation(<0x1000/0x200, Spc, pat:0x0>, 0x0) , Command count = 35 ] 
16:08:20: [ GetFileSize(0x33) , Command count = 36 ] 
16:08:20: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 37 ] 
16:08:20: [ GetFileSize(0x33) , Command count = 38 ] 
16:08:20: [ ReadFile(<0x200/0x200, Arb>, 0x33, 0x1) , Command count = 39 ] 
16:08:21: [ GetIpVersionInfo() , Command count = 40 ] 
16:08:21: [ GetPhysicalChipsInfo() , Command count = 41 ] 
16:08:21: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x060C2660>, <0x200/0x200, Arb>) , Command count = 42 ] 
16:08:21: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 43 ] 

<<<<<<<<<<<<<<<         TEST HEADER          >>>>>>>>>>>>>>>

Application                :  TestRunner.py
Application version        :  SD_DVT 2.0.0
Application folder         :  C:\SDDVT_Python_Package\SDDVT
Command line               :  --protocol=sd --sdtestid=RTHHCCallAll01 --dbconnection=none --adapter=SD05412_9ADT --sdConfiguration=SDR50 --projectconfig=C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB --paramsfile=C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt --logfilename=C:\Results\[U]
Protocol                   :  sd
Serial number (CInfo)      :  sdin1091
Adapter                    :  SDR Tester (S#: SD05412_9ADT): (Slot#:0)
Adapter serial number      :  SD05412_9ADT
Adapter type               :  USD
Capacity                   :  32G
Firmware revision          :  6RB C030
Flashware revision         :  6RB C030
IP Version Info            :  '' 01.04.00... ID 0x20
                           :  '' 00.01.00... ID 0x10
Memory ID                  :  453CA9A27A510B140000000000000000
Controller                 :  81
Trim settings              :  <Unavailable>
Model revision             :  <Unavailable>
Stream name                :  <Unavailable>
FE IP                      :  1
Romware revision           :  RRBZ1152
Architecture               :  Gen 6
Model                      :  SanDisk   COLIBRI
Memory type                :  Unknown Device Type-2LC x 1
ASIC id                    :  81
Controller type            :  Unknown Controller   UMC-J
Driver version (actual)    :  10.0.0.1 (0x a.0.0.1)
Driver version (released)  :  7.1.4.3 (0x 7.1.4.3)
Date and time              :  2016-11-21 16:08:21
Host name                  :  SDDVT_Test2
Host IP address            :  10.65.153.121
Operating system           :  Microsoft Windows [Version 6.1.7601] Service Pack 1
SanDisk Python version     :  1.17.5rc3
CTF/PySFCL build number    :  1.3.0.131072
PySFCL version             :  1.3.0
CTF version                :  1.3
Python version             :  2.4.2
Project Name(Validation)   :  <None>


<<<<<<<<<<<<<<<      SFCL CONFIGURATION      >>>>>>>>>>>>>>>

[SD enumeration]
cmdtiming=0
useRelay=0
autocompare=0
relayPolarity=1
relaySleep=500
measureCmdLatency=1
logicalChunkSize=0
diagDisabled=0
diagCmdTimeout=800
useVddf=on
nethostloglevel=
nethostautoCompare=on
CmdManShowProgress=off
nethostsendtimeout=240000
nethostreceivetimeout=240000
countOfRetryCmdIfCrc=3
enableOORPatch=
lbaForSctpCommands=0x100
subProtocol=0
doDle=0
diagnosticChunkSize=128
logmsgformat=timeMessage
logtimeformat=time
relaySlot=0
unloadDll=on
hardTimeoutUnloadDll=on
minDuration=7200
remoteDevice=
skipProduction=0
ishighspeedmode=0
highfreqinhz=500
modeldelaytimeindiagnostic=0
sataPort0ToRelaySlot=0
sataPort1ToRelaySlot=0
sataPort2ToRelaySlot=0
sataPort3ToRelaySlot=0
relayToComportMapping=1
sdbToComportMapping=1
sataAdapterPort0=0
sataAdapterPort1=0
sataAdapterPort2=0
sataAdapterPort3=0
sataPort0ToMubIndx=1
sataPort1ToMubIndx=1
sataPort2ToMubIndx=1
sataPort3ToMubIndx=1

[Common]
enableChunkTraces=off
enablePythonTraceback=1
sctpPhaseDelay=0
printcommandcount=on
debugfilepath=
initXMLPath=\\regression.lab.sandisk.com\shared\configurations
delayBeforePwrCycle=0
delayAfterPwrCycle=0
reportCountStatistics=1
reportPackage=0
sfclConfig=Common

<<<<<<<<<<<<<<<          CARD INFO           >>>>>>>>>>>>>>>

Number Of LBAs  :  0x3b72400
Card Is Locked  :  No
Secure Area     :  0x28000
Card Secure     :  No
WP map          :

<<<<<<<<<<<<<<<           CID INFO           >>>>>>>>>>>>>>>

Manufacturer Id  :  0x3
Card/BGA         :  0
Application Id   :  0x5344
ProductName      :  AGGCD
ProductRev       :  0x80
SerialNumber     :  0x23482900
Reserved         :  0x23482900
Year             :  2000
Month            :  11
CRC Check Sum    :  0x5
Not Used         :

<<<<<<<<<<<<<<<           CSD INFO           >>>>>>>>>>>>>>>

CSD Structure                     :  0x1
reserv. 1                         :  0x0
TAAC                              :  0xe
NSAC*100                          :  0x0
data transfer rate                :  0x32
card command classes CCC          :  0x5b5
max. read data Blk. length        :  0x9
partial blocks for read allowed   :  0x0
write block misalignment          :  0x0
read block misalignment           :  0x0
DSR implemented                   :  0x0
reserved 2                        :  0x0
device size                       :  0xedc8
Reserv3                           :  0x0
SD Erase Blk Len En               :  0x1
SD Sec Size                       :  0x7f
write protect group size          :  0x0
write protect group enable        :  0x0
Reserv4                           :  0x0
write speed factor                :  0x2
max. write data blk. length       :  0x9
partial blocks for write allowed  :  0x0
File Format Group                 :  0x0
copy flag(OTP)                    :  0x1
permanent write protection        :  0x0
temporary write protection        :  0x0
File Format                       :  0x0
CRC                               :  0x0
<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165561
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165561
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

<<<<<<<<<<<<<<<    COMMAND LINE ARGUMENTS    >>>>>>>>>>>>>>>


Processed command-line options:
   --protocol                                       : sd
   --adapterspecifier                               : ain:-1,desc:SD05412_9ADT
   --extcmdset                                      : FBCC
   --sdtestid                                       : RTHHCCallAll01
   --sdconfiguration                                : SDR50
   --cyclecount                                     : 1
   --testduration                                   : 20h
   --writereadpercent                               : 100
   --paramsfile                                     : 'C:\Colibri_SD_HC_I070_SDR104_Prof_C10_U3_V30_A1.txt'
   --randomseed                                     : 73657297450
   --projectconfig                                  : C:\SDDVT_Python_Package\SDDVT\Projects_configuration\Colibri_32GB
   --logfiledir                                     : C:\SDDVT_Python_Package\SDDVT\DvtTestLogs
   --hostlog                                        : 0
   --dbconnection                                   : 'none'
   --temperature                                    : 25
   --voltage                                        : 0.00
   --logfilename                                    : 'C:\Results\[U]'
   --logtostdout                                    : Y
   --overwriteexistinglogfile                       : Y
   --logrotationspecifier                           : NoRotation
   --loglevel                                       : <4, INFO>
   --testcomment                                    : None
   --dbproject                                      : CTFW_QA
   --mdfwprojectid                                  : None
   --mdconfigid                                     : None
   --mdtestid                                       : None
   --valid                                          : True
   --waitTime                                       : None
   --jitter                                         : F
   --testlimits                                     : <None>-<None>
   --LabID                                          : None
   --DutID                                          : None
   --LaunchId                                       : None
   --TestQueueId                                    : None
   --xfermode                                       : <N>
   --networkperiod                                  : <N>
   --networkpath                                    : <N>
   --dumpfile                                       : 
   --printcommandcount                              : N
   --debugfilepath                                  : <N>
   --chpfilename                                    : <N>
   --enablecmdhistory                               : Y
   --cmdhistextfilename                             : <N>
   --cmdhistcsvfilename                             : <N>
   --histdisplaysizes                               : 0,250
   --stoponcommands                                 : <N>
   --notifyemailid                                  : <N>
   --spyoncommands                                  : <N>
   --notifyoncommands                               : <N>
   --CmdManShowProgress                             : 'off'
   --enablePowerCycle                               : '1'
   --measureCmdLatency                              : '1'
   --useVddf                                        : 'on'
   --gvi                                            : 'off'
   --gviOnFly                                       : 'off'
   --gviEncryption                                  : '0'
   --remoteDevice                                   : ''
   --skipProduction                                 : '0'
   --forceMultipleMode                              : 'off'
   --countOfRetryCmdIfCrc                           : '3'
   --enableOORPatch                                 : 'on'
   --connectonly                                    : 'off'
   --nethostautocompare                             : 'on'
   --nethostpowercycle                              : '0'
   --nethostloglevel                                : '3'
   --nethostlogconsole                              : '0'
   --nethostsanitychecks                            : '0'
   --nethostsendtimeout                             : '240000'
   --nethostreceivetimeout                          : '240000'
   --subProtocol                                    : '0'
   --useVccq                                        : '3.3'
   --maxprotocoloverhead                            : '0'
   --maxprotocoltimingmode                          : '0'
   --isHighSpeedMode                                : '0'
   --highFreqInHz                                   : '500'
   --doDle                                          : '0'
   --lbaForSctpCommands                             : '0x100'
   --cmdfilename                                    : ''
   --cmdtofilewrites                                : '0'
   --cmdtiming                                      : '0'
   --cmdtocsv                                       : '0'
   --logicalChunkSize                               : '0'
   --diagnosticChunkSize                            : '128'
   --readChunkSize                                  : '0'
   --writeChunkSize                                 : '0'
   --useRelay                                       : '0'
   --sataPort0ToRelaySlot                           : '0'
   --sataPort1ToRelaySlot                           : '0'
   --sataPort2ToRelaySlot                           : '0'
   --sataPort3ToRelaySlot                           : '0'
   --relayToComportMapping                          : '1'
   --useSDB                                         : '0'
   --sdbToComportMapping                            : '1'
   --sataAdapterPort0                               : '0'
   --sataAdapterPort1                               : '0'
   --sataAdapterPort2                               : '0'
   --sataAdapterPort3                               : '0'
   --relayPolarity                                  : '1'
   --relaySleep                                     : '500'
   --diagCmdTimeout                                 : '800'
   --diagDisabled                                   : '0'
   --hardTimeout                                    : '30000'
   --commandscriptfolder                            : ''
   --commandscriptstart                             : '0'
   --logmsgformat                                   : 'timeMessage'
   --logtimeformat                                  : 'time'
   --relaySlot                                      : '0'
   --atbuRelaySlot                                  : '3'
   --diskCacheStore                                 : ''
   --stopOnStart                                    : '0'
   --notifyserver                                   : ''
   --notifyretry                                    : '2'
   --notifytimeout                                  : '60'
   --failonnotifytimeout                            : '0'
   --revertactions                                  : ''
   --timechangedetection                            : '0'
   --timechangecondition                            : '600'
   --timechangecheckinterval                        : '1000'
   --inputmonitor                                   : '1'
   --logtimeprecision                               : '2'
   --nonSndkDevEnumeration                          : '0'
   --modelini                                       : 'C:\Program Files\SanDisk\CTF\Dlls\model.ini'
   --sfclini                                        : 'C:\Program Files\SanDisk\CTF\Dlls\sfcl.ini'
   --relayForceDownload                             : 'off'
   --powercycleoninit                               : 'off'
   --stopBgOperationOnFail                          : 'off'
   --autocompare                                    : '0'
   --autocompareRandomseed                          : '12345678'
   --modeldelaytimeindiagnostic                     : '0'
   --ForceDownloadMechanism                         : '0'
   --EnableUARTDebugLog                             : '0'
   --UARTBaudRate                                   : '230400'
   --SerialUARTToCom                                : '0'
   --UARTDebugFilePath                              : ''
   --sataPort0ToMubIndx                             : '1'
   --sataPort1ToMubIndx                             : '1'
   --sataPort2ToMubIndx                             : '1'
   --sataPort3ToMubIndx                             : '1'
   --fclStep                                        : '0'
   --fclCollectReads                                : '0'
   --fclCollectWrites                               : '0'
   --fclCollectErases                               : '0'
   --fclCollectAOMReads                             : '0'
   --fclAomBase                                     : '10'
   --aomStep                                        : '0'
   --aomMapFile                                     : '0'
   --fclAomSaveFilesStep                            : '1000'
   --gfa                                            : '0'
   --atbuSoftwareLocation                           : ''
   --atbuMemoryName                                 : ''
   --atbuProfilesLocation                           : ''
   --atbuThresholdValue                             : '0'
   --atbuTransitionTime                             : '0'
   --atbuDcCompensation                             : ''


<<<<<<<<<<<<<<< RUNNING TEST: RTHHCCallAll01_CallAllReset_1 >>>>>>>>>>>>>>>



16:08:27: [RTHHCCallAll01_CallAllReset_1.py]###### Test to run callAllReset_2
16:08:27: [RTHHCCallAll01_CallAllReset_1]### TEST SCRIPT IS STARTED.
16:08:27: [RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py] ##########
16:08:27: MaxLba of the card: 0x3B72400 
16:08:30: [GO7_globalPreTestingSettings]### Default Initialization Start
16:08:30: [DVTCommonLib]###  SwitchHostVoltageRegion called
16:08:30: [ SwitchHostVoltageRegion(False) , Command count = 44 ] 
16:08:30: [DVTCommonLib]###  SwitchHostVoltageRegion Completed 

16:08:30: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 45 ] 
16:08:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <None>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 46 ] 
16:08:32: [ CardInit() , Command count = 47 ] 
16:08:32: [ SendDiagnostic(<0x200/0x200, Spc, pat:0x0>, [0x9A, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0], 0x0, 0x1) , Command count = 48 ] 

<<<<<<<<<<<<<<<         M-CONF INFO          >>>>>>>>>>>>>>>

Max LBA                      :  0x3b9b000
FW Revision                  :  0x20425236
Internal Flashware Revision  :
Romware revision             :  RRBZ1152
Device Count                 :  0x0
Device Type                  :  0x0
Device Configuration         :  0x0
ASIC id                      :  81
ASIC Vendor                  :  0x2
ASIC Revision                :  0x0
Security                     :  0x0
File Number                  :  0x0
File Version                 :  0x0
File Sign                    :  0x0
Bot File Version             :  COLB1S5211C0f30r_11UHB05D.
Param File Version           :  0x70a006a0
Lot Number                   :  0x0
Talisman Security Code       :  0x0
Reserved                     :  0x0
SNDK Version                 :  0x0
CRYS Version                 :  0x0
PDL Version                  :  0x0
Talisman Security Code       :  0x0
Memory ID                    :  453CA9A27A510B140000000000000000
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165561
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
File21 Version               :  11UHB05D
Secured Flashware            :  0x0
Compilation Date             :  Apr 22 2016
Compilation Time             :  14:59:40
Sectors Per Block            :  0x0
FFU State                    :  0x0
Set0 Cpu Clock               :  165561
Set0 Cpu Divider             :  2
Set0 Fim Write Clock         :  33000
Set0 Fim Write Divider       :  11
Set0 Fim Read Clock          :  33000
Set0 Fim Read Divider        :  11
Set0 Hs Cpu Clock            :  0
Set0 Hs Cpu Divider          :  0
Set0 Ecc Clock               :  166000
Set0 Ecc Divider             :  2
Set0 Hs Fim Clock            :  83000
Set0 Hs Fim Divider          :  2
Set0 System Divider          :  2
Set1 Cpu Clock               :
Set1 Cpu Divider             :
Set1 Fim Write Clock         :
Set1 Fim Write Divider       :
Set1 Fim Read Clock          :
Set1 Fim Read Divider        :
Set1 Hs Cpu Clock            :  0
Set1 Hs Cpu Divider          :  0
Set1 Hs Ecc Clock            :  0
Set1 Hs Ecc Divider          :  0
Set1 Hs Fim Clock            :  0
Set1 Hs Fim Divider          :  0
Set1 System Divider          :  0
Update Blocks                :  0x43
Chaotic Blocks               :
Die Interleave               :  0x2
Lower Page                   :  0x0
File 31 In User Area         :  0x0
SSA Version                  :
App Versions                 :  0x0L
Top Level IPartNum           :
Part Number                  :
Set2 Cpu Clock               :
Set2 Cpu Divider             :
Set2 Fim Write Clock         :
Set2 Fim Write Divider       :
Set2 Fim Read Clock          :
Set2 Fim Read Divider        :
Set2 Hs Cpu Clock            :  0
Set2 Hs Cpu Divider          :  0
Set2 Hs Ecc Clock            :  0
Set2 Hs Ecc Divider          :  0
Set2 Hs Fim Clock            :  0
Set2 Hs Fim Divider          :  0
Set2 System Divider          :  0
Set3 Cpu Clock               :
Set3 Cpu Divider             :
Set3 Fim Write Clock         :
Set3 Fim Write Divider       :
Set3 Fim Read Clock          :
Set3 Fim Read Divider        :
Set3 Hs Cpu Clock            :  0
Set3 Hs Cpu Divider          :  0
Set3 Hs Ecc Clock            :  0
Set3 Hs Ecc Divider          :  0
Set3 Hs Fim Clock            :  0
Set3 Hs Fim Divider          :  0
Set3 System Divider          :  0
Set4 Cpu Clock               :
Set4 Cpu Divider             :
Set4 Fim Write Clock         :
Set4 Fim Write Divider       :
Set4 Fim Read Clock          :
Set4 Fim Read Divider        :
Set4 Hs Cpu Clock            :  0
Set4 Hs Cpu Divider          :  0
Set4 Hs Ecc Clock            :  0
Set4 Hs Ecc Divider          :  0
Set4 Hs Fim Clock            :  0
Set4 Hs Fim Divider          :  0
Set4 System Divider          :  0
Set5 Cpu Clock               :
Set5 Cpu Divider             :
Set5 Fim Write Clock         :
Set5 Fim Write Divider       :
Set5 Fim Read Clock          :
Set5 Fim Read Divider        :
Set5 Hs Cpu Clock            :  0
Set5 Hs Cpu Divider          :  0
Set5 Hs Ecc Clock            :  0
Set5 Hs Ecc Divider          :  0
Set5 Hs Fim Clock            :  0
Set5 Hs Fim Divider          :  0
Set5 System Divider          :  0
MetaBlockSize                :  32768
Card Physical Size           :  0
WORM Card Lock               :  0
OTEC Version                 :  0
Meta Page Size               :  192
Worm Version                 :  0

16:08:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:32: ####CSD Registe 2.0 Values####
16:08:32: CSD_STRUCTURE                                 :0x1
16:08:32: Reserv1                                       :0x0
16:08:32: Time Access 1 TAAC                            :0xe
16:08:32: Time Access 2 NSAC*100                        :0x0
16:08:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:08:32: Card Command Classess CCC                     :0x5b5
16:08:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:32: DSR(driver stage register)  DSR_IMP           :0x0
16:08:32: Reserv2                                       :0x0
16:08:32: Device Size C_SIZE                            :0xedc8
16:08:33: Reserv3                                       :0x0
16:08:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:33: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:33: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:33: Reserv4                                       :0x0
16:08:33: Write Speed Factor R2W_FACTOR                 :0x2
16:08:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:33: FILE_FORMAT_GRP                               :0x0
16:08:33: COPY flag                                     :0x1
16:08:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:33: File_Format                                   :0x0
16:08:33: CRC                                           :0x0
16:08:33: ####CSD Registe Values####  

16:08:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:08:33: ProductSerialNumber = 0x23482900
16:08:33: CardMaximumLBA      = 0x3b72400
16:08:33: CardCapacity        = 32G
16:08:33: Is card secure      = 0
16:08:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:08:33: [GO7_globalPreTestingSettings]### Default Initialization Completed 


16:08:33: Stated Running SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode Scripts 

16:08:33: ########################################
16:08:33: Stated Running script RT2HCSD09_1_1_1_1 
16:08:33: ########################################
16:08:33: [RT2HCSD09_1_1_1_1]###### Set Card Time Out values test. 
16:08:40: FPGA Image Downloaded Is:SD_LEGACY-SDR2_2-01-00-0001.bin
16:08:40: [GO4_globalInitCard]### Switch to Specify Card Type
16:08:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:42: Host Frequency set to 25000 KHz
16:08:42: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:42: [GO18_globalSetVolt]### Set Host Voltage value.
16:08:42: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:08:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x061C7AB0>, 0x0, True) , Command count = 49 ] 
16:08:42: [GO18_globalSetVolt]### Host voltage value is set.
16:08:42: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:08:42: [ SetVolt(<py_sfcl.SDVoltage object at 0x061C7EA0>, 0x0, False) , Command count = 50 ] 
16:08:42: [GO18_globalSetVolt]### Host voltage value is set.
16:08:42: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 51 ] 
16:08:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:08:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 52 ] 
16:08:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:08:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:08:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:08:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:08:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:08:42: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 53 ] 
16:08:42: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:08:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:08:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7870>, <py_sfcl.CommandDataDefinition object at 0x061C79C0>) , Command count = 54 ] 
16:08:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:08:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7960>, <py_sfcl.CommandDataDefinition object at 0x061C7E70>) , Command count = 55 ] 
16:08:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:08:42: [ SetCardRCA(0x1, 0xD555) , Command count = 56 ] 
16:08:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:08:42: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:43: Host Frequency set to 25000 KHz
16:08:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:43: ####CSD Registe 2.0 Values####
16:08:43: CSD_STRUCTURE                                 :0x1
16:08:43: Reserv1                                       :0x0
16:08:43: Time Access 1 TAAC                            :0xe
16:08:43: Time Access 2 NSAC*100                        :0x0
16:08:43: Data Transfer Rate TRAN_SPEED                 :0x32
16:08:43: Card Command Classess CCC                     :0x5b5
16:08:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:43: DSR(driver stage register)  DSR_IMP           :0x0
16:08:43: Reserv2                                       :0x0
16:08:43: Device Size C_SIZE                            :0xedc8
16:08:43: Reserv3                                       :0x0
16:08:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:43: Reserv4                                       :0x0
16:08:43: Write Speed Factor R2W_FACTOR                 :0x2
16:08:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:43: FILE_FORMAT_GRP                               :0x0
16:08:43: COPY flag                                     :0x1
16:08:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:43: File_Format                                   :0x0
16:08:43: CRC                                           :0x0
16:08:43: ####CSD Registe Values####  

16:08:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:08:43: [GetSCRRegisterEntry] Passed
16:08:43: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:08:43: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:08:43: Data_Status_After Erases          : 0
16:08:43: CPRM Security Support             : No Security
16:08:43: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:08:43: Spec. Version                     : Version 3.0X
16:08:43: Extended Security Support         : Extended_Security_Not_Supported
16:08:43: Command Support                   : COMMAND_SUPPORT
16:08:43: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7FC0>, <py_sfcl.CommandDataDefinition object at 0x061C7810>) , Command count = 57 ] 
16:08:43: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C77B0>, <py_sfcl.CommandDataDefinition object at 0x061C7AE0>) , Command count = 58 ] 
16:08:43: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:08:43: [ SetBusWidth(0x4) , Command count = 59 ] 
16:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:08:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061C7CC0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 60 ] 
16:08:43: Protected Area Size 0x28000
16:08:43: Bus Width           2
16:08:43: Secure Mode         0
16:08:43: Speed  Class        4
16:08:43: Perf Move           0
16:08:43: Au Size             9
16:08:43: Erase Size          15
16:08:43: Erase Timeout       1
16:08:43: Erase offset        1
16:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:08:43: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:08:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:08:43: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 61 ] 
16:08:43: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:08:43: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:08:43: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:08:43: Host Frequency set to 100000 KHz
16:08:43: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:08:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:43: ####CSD Registe 2.0 Values####
16:08:43: CSD_STRUCTURE                                 :0x1
16:08:43: Reserv1                                       :0x0
16:08:43: Time Access 1 TAAC                            :0xe
16:08:43: Time Access 2 NSAC*100                        :0x0
16:08:43: Data Transfer Rate TRAN_SPEED                 :0xb
16:08:43: Card Command Classess CCC                     :0x5b5
16:08:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:43: DSR(driver stage register)  DSR_IMP           :0x0
16:08:43: Reserv2                                       :0x0
16:08:43: Device Size C_SIZE                            :0xedc8
16:08:43: Reserv3                                       :0x0
16:08:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:43: Reserv4                                       :0x0
16:08:43: Write Speed Factor R2W_FACTOR                 :0x2
16:08:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:43: FILE_FORMAT_GRP                               :0x0
16:08:43: COPY flag                                     :0x1
16:08:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:43: File_Format                                   :0x0
16:08:43: CRC                                           :0x0
16:08:43: ####CSD Registe Values####  

16:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7E10>, <py_sfcl.CommandDataDefinition object at 0x061C76F0>) , Command count = 62 ] 
16:08:43: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:08:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C77E0>, <py_sfcl.CommandDataDefinition object at 0x061C7D50>) , Command count = 63 ] 
16:08:43: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:08:43: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061D50C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 64 ] 
16:08:43: Protected Area Size 0x28000
16:08:43: Bus Width           2
16:08:43: Secure Mode         0
16:08:43: Speed  Class        4
16:08:43: Perf Move           0
16:08:43: Au Size             9
16:08:43: Erase Size          15
16:08:43: Erase Timeout       1
16:08:43: Erase offset        1
16:08:43: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:08:43: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:08:43: [RT2HCSD09_1_1_1_1.py]CALL : globalSetTO
16:08:43: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 65 ] 
16:08:43: [RT2HCSD09_1_1_1_1.py]CALL : globalSetVolt
16:08:43: [GO18_globalSetVolt]### Set Host Voltage value.
16:08:43: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:08:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D50F0>, 0x0, True) , Command count = 66 ] 
16:08:44: [GO18_globalSetVolt]### Host voltage value is set.
16:08:44: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:08:44: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D5120>, 0x0, False) , Command count = 67 ] 
16:08:44: [GO18_globalSetVolt]### Host voltage value is set.
16:08:44: [RT2HCSD09_1_1_1_1.py]CALL : globalSetLSHostFreq
16:08:44: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:44: Host Frequency set to 25000 KHz
16:08:44: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:44: [RT2HCSD09_1_1_1_1]*********Soft Reset*********
16:08:44: [RT2HCSD09_1_1_1_1]RESET card and IDENTIFICATION of the card 

16:08:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:08:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 68 ] 
16:08:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
16:08:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:08:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:08:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:08:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:08:44: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
16:08:44: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD09_1_1_1_1' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD09_1_1_1_1.pyc'> with error 
TestFailedError:                                   
   [RT2HCSD09_1_1_1_1] Compare error on card response
 
16:08:44: ########################################
16:08:44: ########################################
16:08:44: Stated Running script RT2HCSD24_1_1_1_2 
16:08:44: ########################################
16:08:44: [RT2HCSD24_1_1_1_2.py]###### Set Card Time Out values test. 
16:08:44: [GO4_globalInitCard]### Switch to Specify Card Type
16:08:46: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:46: Host Frequency set to 25000 KHz
16:08:46: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:46: [GO18_globalSetVolt]### Set Host Voltage value.
16:08:46: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:08:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D56F0>, 0x0, True) , Command count = 69 ] 
16:08:46: [GO18_globalSetVolt]### Host voltage value is set.
16:08:46: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:08:46: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D5F60>, 0x0, False) , Command count = 70 ] 
16:08:46: [GO18_globalSetVolt]### Host voltage value is set.
16:08:46: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 71 ] 
16:08:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:08:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 72 ] 
16:08:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:08:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:08:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:08:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:08:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:08:47: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 73 ] 
16:08:47: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:08:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5BD0>, <py_sfcl.CommandDataDefinition object at 0x061D59C0>) , Command count = 74 ] 
16:08:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5DB0>, <py_sfcl.CommandDataDefinition object at 0x061D5C00>) , Command count = 75 ] 
16:08:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:08:47: [ SetCardRCA(0x1, 0xD555) , Command count = 76 ] 
16:08:47: [DVTCommonLib]### Identification :Idenfication of card completed 

16:08:47: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:47: Host Frequency set to 25000 KHz
16:08:47: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:47: ####CSD Registe 2.0 Values####
16:08:47: CSD_STRUCTURE                                 :0x1
16:08:47: Reserv1                                       :0x0
16:08:47: Time Access 1 TAAC                            :0xe
16:08:47: Time Access 2 NSAC*100                        :0x0
16:08:47: Data Transfer Rate TRAN_SPEED                 :0x32
16:08:47: Card Command Classess CCC                     :0x5b5
16:08:47: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:47: DSR(driver stage register)  DSR_IMP           :0x0
16:08:47: Reserv2                                       :0x0
16:08:47: Device Size C_SIZE                            :0xedc8
16:08:47: Reserv3                                       :0x0
16:08:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:47: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:47: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:47: Reserv4                                       :0x0
16:08:47: Write Speed Factor R2W_FACTOR                 :0x2
16:08:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:47: FILE_FORMAT_GRP                               :0x0
16:08:47: COPY flag                                     :0x1
16:08:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:47: File_Format                                   :0x0
16:08:47: CRC                                           :0x0
16:08:47: ####CSD Registe Values####  

16:08:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:08:47: [GetSCRRegisterEntry] Passed
16:08:47: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:08:47: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:08:47: Data_Status_After Erases          : 0
16:08:47: CPRM Security Support             : No Security
16:08:47: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:08:47: Spec. Version                     : Version 3.0X
16:08:47: Extended Security Support         : Extended_Security_Not_Supported
16:08:47: Command Support                   : COMMAND_SUPPORT
16:08:47: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5DE0>, <py_sfcl.CommandDataDefinition object at 0x061D5F30>) , Command count = 77 ] 
16:08:47: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5900>, <py_sfcl.CommandDataDefinition object at 0x061D5930>) , Command count = 78 ] 
16:08:47: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:08:47: [ SetBusWidth(0x4) , Command count = 79 ] 
16:08:47: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:08:47: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061D5CF0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 80 ] 
16:08:47: Protected Area Size 0x28000
16:08:47: Bus Width           2
16:08:47: Secure Mode         0
16:08:47: Speed  Class        4
16:08:47: Perf Move           0
16:08:47: Au Size             9
16:08:47: Erase Size          15
16:08:47: Erase Timeout       1
16:08:47: Erase offset        1
16:08:47: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:08:47: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:08:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:08:47: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 81 ] 
16:08:47: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:08:47: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:08:47: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:08:47: Host Frequency set to 100000 KHz
16:08:47: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:08:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:47: ####CSD Registe 2.0 Values####
16:08:47: CSD_STRUCTURE                                 :0x1
16:08:47: Reserv1                                       :0x0
16:08:47: Time Access 1 TAAC                            :0xe
16:08:47: Time Access 2 NSAC*100                        :0x0
16:08:47: Data Transfer Rate TRAN_SPEED                 :0xb
16:08:47: Card Command Classess CCC                     :0x5b5
16:08:47: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:47: DSR(driver stage register)  DSR_IMP           :0x0
16:08:47: Reserv2                                       :0x0
16:08:47: Device Size C_SIZE                            :0xedc8
16:08:47: Reserv3                                       :0x0
16:08:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:47: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:47: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:47: Reserv4                                       :0x0
16:08:47: Write Speed Factor R2W_FACTOR                 :0x2
16:08:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:47: FILE_FORMAT_GRP                               :0x0
16:08:47: COPY flag                                     :0x1
16:08:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:47: File_Format                                   :0x0
16:08:47: CRC                                           :0x0
16:08:47: ####CSD Registe Values####  

16:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5A80>, <py_sfcl.CommandDataDefinition object at 0x061D5750>) , Command count = 82 ] 
16:08:47: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:08:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5B10>, <py_sfcl.CommandDataDefinition object at 0x061D5720>) , Command count = 83 ] 
16:08:47: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:08:47: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:08:47: [RT2HCSD24_1_1_1_2.py]CALL : globalSetTO
16:08:47: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 84 ] 
16:08:47: [RT2HCSD24_1_1_1_2.py]CALL : globalSetVolt
16:08:47: [GO18_globalSetVolt]### Set Host Voltage value.
16:08:47: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:08:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D5E40>, 0x0, True) , Command count = 85 ] 
16:08:47: [GO18_globalSetVolt]### Host voltage value is set.
16:08:47: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:08:47: [ SetVolt(<py_sfcl.SDVoltage object at 0x061D5BA0>, 0x0, False) , Command count = 86 ] 
16:08:47: [GO18_globalSetVolt]### Host voltage value is set.
16:08:47: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
16:08:47: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:08:48: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:08:48: [RT2HCSD24_1_1_1_2.py]***Test Sequential of CMD 8' s during Soft Reset***
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D57B0>, <py_sfcl.CommandDataDefinition object at 0x061D5E70>) , Command count = 87 ] 
16:08:48: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5EA0>, <py_sfcl.CommandDataDefinition object at 0x061D5870>) , Command count = 88 ] 
16:08:48: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5FC0>, <py_sfcl.CommandDataDefinition object at 0x061DA030>) , Command count = 89 ] 
16:08:48: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA090>, <py_sfcl.CommandDataDefinition object at 0x061DA0C0>) , Command count = 90 ] 
16:08:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA120>, <py_sfcl.CommandDataDefinition object at 0x061DA150>) , Command count = 91 ] 
16:08:48: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA1B0>, <py_sfcl.CommandDataDefinition object at 0x061DA1E0>) , Command count = 92 ] 
16:08:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA240>, <py_sfcl.CommandDataDefinition object at 0x061DA270>) , Command count = 93 ] 
16:08:48: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 64, 255, 128, 0, 255]
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA2D0>, <py_sfcl.CommandDataDefinition object at 0x061DA300>) , Command count = 94 ] 
16:08:48: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA360>, <py_sfcl.CommandDataDefinition object at 0x061DA390>) , Command count = 95 ] 
16:08:48: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
16:08:48: [ SetCardCap(True) , Command count = 96 ] 
16:08:48: [ SetSdMmcCardMode(0x2, True) , Command count = 97 ] 
16:08:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA510>, <py_sfcl.CommandDataDefinition object at 0x061DA540>) , Command count = 98 ] 
16:08:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:08:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA5A0>, <py_sfcl.CommandDataDefinition object at 0x061DA5D0>) , Command count = 99 ] 
16:08:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:08:48: [ SetCardRCA(0x1, 0xD555) , Command count = 100 ] 
16:08:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:08:49: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
16:08:49: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:49: Host Frequency set to 25000 KHz
16:08:49: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:49: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
16:08:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:08:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:08:49: [ SetBusWidth(0x1) , Command count = 101 ] 
16:08:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:49: ####CSD Registe 2.0 Values####
16:08:49: CSD_STRUCTURE                                 :0x1
16:08:49: Reserv1                                       :0x0
16:08:49: Time Access 1 TAAC                            :0xe
16:08:49: Time Access 2 NSAC*100                        :0x0
16:08:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:08:49: Card Command Classess CCC                     :0x5b5
16:08:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:49: DSR(driver stage register)  DSR_IMP           :0x0
16:08:49: Reserv2                                       :0x0
16:08:49: Device Size C_SIZE                            :0xedc8
16:08:49: Reserv3                                       :0x0
16:08:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:49: Reserv4                                       :0x0
16:08:49: Write Speed Factor R2W_FACTOR                 :0x2
16:08:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:49: FILE_FORMAT_GRP                               :0x0
16:08:49: COPY flag                                     :0x1
16:08:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:49: File_Format                                   :0x0
16:08:49: CRC                                           :0x0
16:08:49: ####CSD Registe Values####  

16:08:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:08:49: ProductSerialNumber = 0x23482900
16:08:49: CardMaximumLBA      = 0x3b72400
16:08:49: CardCapacity        = 32G
16:08:49: Is card secure      = 0
16:08:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:08:49: [DVTCommonLib]###  LogicalWrite called
16:08:51: [ WriteLba(0x1D32ECB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 102 ] 
16:08:51: [DVTCommonLib]###  LogicalWrite Completed 

16:08:51: [DVTCommonLib]###  LogicalRead called
16:08:52: [ ReadLba(0x1D32ECB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 103 ] 
16:08:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:08:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:08:52: [RT2HCSD24_1_1_1_2.py]***Test Sequential of CMD 8' s during Power Cycle Reset***
16:08:52: [RT2HCSD24_1_1_1_2.py]POWER : OFF and ON
16:08:54: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
16:08:54: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:08:54: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E1CF0>, <py_sfcl.CommandDataDefinition object at 0x061E1D20>) , Command count = 104 ] 
16:08:54: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E1DB0>, <py_sfcl.CommandDataDefinition object at 0x061E1DE0>) , Command count = 105 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E1E40>, <py_sfcl.CommandDataDefinition object at 0x061E1E70>) , Command count = 106 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E1ED0>, <py_sfcl.CommandDataDefinition object at 0x061E1F00>) , Command count = 107 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061E1F60>, <py_sfcl.CommandDataDefinition object at 0x061E1F90>) , Command count = 108 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA030>, <py_sfcl.CommandDataDefinition object at 0x061EA060>) , Command count = 109 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA0C0>, <py_sfcl.CommandDataDefinition object at 0x061EA0F0>) , Command count = 110 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA150>, <py_sfcl.CommandDataDefinition object at 0x061EA180>) , Command count = 111 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA1E0>, <py_sfcl.CommandDataDefinition object at 0x061EA210>) , Command count = 112 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA270>, <py_sfcl.CommandDataDefinition object at 0x061EA2A0>) , Command count = 113 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA300>, <py_sfcl.CommandDataDefinition object at 0x061EA330>) , Command count = 114 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA390>, <py_sfcl.CommandDataDefinition object at 0x061EA3C0>) , Command count = 115 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA420>, <py_sfcl.CommandDataDefinition object at 0x061EA450>) , Command count = 116 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA4B0>, <py_sfcl.CommandDataDefinition object at 0x061EA4E0>) , Command count = 117 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA540>, <py_sfcl.CommandDataDefinition object at 0x061EA570>) , Command count = 118 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA5D0>, <py_sfcl.CommandDataDefinition object at 0x061EA600>) , Command count = 119 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA660>, <py_sfcl.CommandDataDefinition object at 0x061EA690>) , Command count = 120 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA6F0>, <py_sfcl.CommandDataDefinition object at 0x061EA720>) , Command count = 121 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA780>, <py_sfcl.CommandDataDefinition object at 0x061EA7B0>) , Command count = 122 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA810>, <py_sfcl.CommandDataDefinition object at 0x061EA840>) , Command count = 123 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA8A0>, <py_sfcl.CommandDataDefinition object at 0x061EA8D0>) , Command count = 124 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA930>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 125 ] 
16:08:54: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA9C0>, <py_sfcl.CommandDataDefinition object at 0x061EA9F0>) , Command count = 126 ] 
16:08:54: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:08:54: [ SetCardCap(True) , Command count = 127 ] 
16:08:54: [ SetSdMmcCardMode(0x2, True) , Command count = 128 ] 
16:08:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:08:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAAB0>, <py_sfcl.CommandDataDefinition object at 0x061EAAE0>) , Command count = 129 ] 
16:08:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:08:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAB40>, <py_sfcl.CommandDataDefinition object at 0x061EAB70>) , Command count = 130 ] 
16:08:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:08:55: [ SetCardRCA(0x1, 0xD555) , Command count = 131 ] 
16:08:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:08:55: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
16:08:55: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:08:55: Host Frequency set to 25000 KHz
16:08:55: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:08:55: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
16:08:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:08:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:08:55: [ SetBusWidth(0x1) , Command count = 132 ] 
16:08:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:08:55: ####CSD Registe 2.0 Values####
16:08:55: CSD_STRUCTURE                                 :0x1
16:08:55: Reserv1                                       :0x0
16:08:55: Time Access 1 TAAC                            :0xe
16:08:55: Time Access 2 NSAC*100                        :0x0
16:08:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:08:55: Card Command Classess CCC                     :0x5b5
16:08:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:08:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:08:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:08:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:08:55: DSR(driver stage register)  DSR_IMP           :0x0
16:08:55: Reserv2                                       :0x0
16:08:55: Device Size C_SIZE                            :0xedc8
16:08:55: Reserv3                                       :0x0
16:08:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:08:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:08:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:08:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:08:55: Reserv4                                       :0x0
16:08:55: Write Speed Factor R2W_FACTOR                 :0x2
16:08:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:08:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:08:55: FILE_FORMAT_GRP                               :0x0
16:08:55: COPY flag                                     :0x1
16:08:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:08:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:08:55: File_Format                                   :0x0
16:08:55: CRC                                           :0x0
16:08:55: ####CSD Registe Values####  

16:08:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:08:55: ProductSerialNumber = 0x23482900
16:08:55: CardMaximumLBA      = 0x3b72400
16:08:55: CardCapacity        = 32G
16:08:55: Is card secure      = 0
16:08:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:08:55: [DVTCommonLib]###  LogicalWrite called
16:08:57: [ WriteLba(0x2241BF2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 133 ] 
16:08:57: [DVTCommonLib]###  LogicalWrite Completed 

16:08:57: [DVTCommonLib]###  LogicalRead called
16:08:58: [ ReadLba(0x2241BF2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 134 ] 
16:08:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:08:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:08:58: ***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
16:08:58: [RT2HCSD24_1_1_1_2.py]POWER : OFF and ON
16:09:00: [RT2HCSD24_1_1_1_2.py]CALL : globalSetResetFreq
16:09:00: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:09:00: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAC90>, <py_sfcl.CommandDataDefinition object at 0x061EACF0>) , Command count = 135 ] 
16:09:00: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAD50>, <py_sfcl.CommandDataDefinition object at 0x061EAD80>) , Command count = 136 ] 
16:09:00: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 170, 66]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAE10>, <py_sfcl.CommandDataDefinition object at 0x061EAE40>) , Command count = 137 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAEA0>, <py_sfcl.CommandDataDefinition object at 0x061EAED0>) , Command count = 138 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAF30>, <py_sfcl.CommandDataDefinition object at 0x061EAF60>) , Command count = 139 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAFC0>, <py_sfcl.CommandDataDefinition object at 0x061ED030>) , Command count = 140 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED090>, <py_sfcl.CommandDataDefinition object at 0x061ED0C0>) , Command count = 141 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED120>, <py_sfcl.CommandDataDefinition object at 0x061ED150>) , Command count = 142 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 143 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x061ED270>) , Command count = 144 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x061ED300>) , Command count = 145 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x061ED390>) , Command count = 146 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3F0>, <py_sfcl.CommandDataDefinition object at 0x061ED420>) , Command count = 147 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED480>, <py_sfcl.CommandDataDefinition object at 0x061ED4B0>) , Command count = 148 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED510>, <py_sfcl.CommandDataDefinition object at 0x061ED540>) , Command count = 149 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5A0>, <py_sfcl.CommandDataDefinition object at 0x061ED5D0>) , Command count = 150 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED630>, <py_sfcl.CommandDataDefinition object at 0x061ED660>) , Command count = 151 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061ED6F0>) , Command count = 152 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x061ED780>) , Command count = 153 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7E0>, <py_sfcl.CommandDataDefinition object at 0x061ED810>) , Command count = 154 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x061ED8A0>) , Command count = 155 ] 
16:09:00: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x061ED930>) , Command count = 156 ] 
16:09:00: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:09:00: [ SetCardCap(True) , Command count = 157 ] 
16:09:00: [ SetSdMmcCardMode(0x2, True) , Command count = 158 ] 
16:09:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x061EDA20>) , Command count = 159 ] 
16:09:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA80>, <py_sfcl.CommandDataDefinition object at 0x061EDAB0>) , Command count = 160 ] 
16:09:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:00: [ SetCardRCA(0x1, 0xD555) , Command count = 161 ] 
16:09:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:00: [RT2HCSD24_1_1_1_2.py]CALL : globalSetLSHostFreq
16:09:00: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:01: Host Frequency set to 25000 KHz
16:09:01: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:01: [RT2HCSD24_1_1_1_2.py]CALL : AddressForWriteRead
16:09:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:01: [ SetBusWidth(0x1) , Command count = 162 ] 
16:09:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:01: ####CSD Registe 2.0 Values####
16:09:01: CSD_STRUCTURE                                 :0x1
16:09:01: Reserv1                                       :0x0
16:09:01: Time Access 1 TAAC                            :0xe
16:09:01: Time Access 2 NSAC*100                        :0x0
16:09:01: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:01: Card Command Classess CCC                     :0x5b5
16:09:01: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:01: DSR(driver stage register)  DSR_IMP           :0x0
16:09:01: Reserv2                                       :0x0
16:09:01: Device Size C_SIZE                            :0xedc8
16:09:01: Reserv3                                       :0x0
16:09:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:01: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:01: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:01: Reserv4                                       :0x0
16:09:01: Write Speed Factor R2W_FACTOR                 :0x2
16:09:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:01: FILE_FORMAT_GRP                               :0x0
16:09:01: COPY flag                                     :0x1
16:09:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:01: File_Format                                   :0x0
16:09:01: CRC                                           :0x0
16:09:01: ####CSD Registe Values####  

16:09:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:01: ProductSerialNumber = 0x23482900
16:09:01: CardMaximumLBA      = 0x3b72400
16:09:01: CardCapacity        = 32G
16:09:01: Is card secure      = 0
16:09:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:01: [DVTCommonLib]###  LogicalWrite called
16:09:03: [ WriteLba(0x144DB7B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 163 ] 
16:09:03: [DVTCommonLib]###  LogicalWrite Completed 

16:09:03: [DVTCommonLib]###  LogicalRead called
16:09:04: [ ReadLba(0x144DB7B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 164 ] 
16:09:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:04: ########################################
16:09:04: Finished Running script RT2HCSD24_1_1_1_2 
16:09:04: ########################################
16:09:04: ########################################
16:09:04: Stated Running script RT2HCSD34_1_1_1_2a 
16:09:04: ########################################
16:09:04: [RT2HCSD34_1_1_1_2a.py]###### Set Card Time Out values test. 
16:09:04: [GO4_globalInitCard]### Switch to Specify Card Type
16:09:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:06: Host Frequency set to 25000 KHz
16:09:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:06: [GO18_globalSetVolt]### Set Host Voltage value.
16:09:06: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:09:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x061EDF90>, 0x0, True) , Command count = 165 ] 
16:09:06: [GO18_globalSetVolt]### Host voltage value is set.
16:09:06: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:09:06: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F4030>, 0x0, False) , Command count = 166 ] 
16:09:06: [GO18_globalSetVolt]### Host voltage value is set.
16:09:06: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 167 ] 
16:09:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 168 ] 
16:09:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:09:06: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 169 ] 
16:09:06: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:09:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4180>, <py_sfcl.CommandDataDefinition object at 0x061F4120>) , Command count = 170 ] 
16:09:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F41B0>, <py_sfcl.CommandDataDefinition object at 0x061F41E0>) , Command count = 171 ] 
16:09:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:09:06: [ SetCardRCA(0x1, 0xD555) , Command count = 172 ] 
16:09:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:07: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:07: Host Frequency set to 25000 KHz
16:09:07: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:07: ####CSD Registe 2.0 Values####
16:09:07: CSD_STRUCTURE                                 :0x1
16:09:07: Reserv1                                       :0x0
16:09:07: Time Access 1 TAAC                            :0xe
16:09:07: Time Access 2 NSAC*100                        :0x0
16:09:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:07: Card Command Classess CCC                     :0x5b5
16:09:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:07: DSR(driver stage register)  DSR_IMP           :0x0
16:09:07: Reserv2                                       :0x0
16:09:07: Device Size C_SIZE                            :0xedc8
16:09:07: Reserv3                                       :0x0
16:09:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:07: Reserv4                                       :0x0
16:09:07: Write Speed Factor R2W_FACTOR                 :0x2
16:09:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:07: FILE_FORMAT_GRP                               :0x0
16:09:07: COPY flag                                     :0x1
16:09:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:07: File_Format                                   :0x0
16:09:07: CRC                                           :0x0
16:09:07: ####CSD Registe Values####  

16:09:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:09:07: [GetSCRRegisterEntry] Passed
16:09:07: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:09:07: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:09:07: Data_Status_After Erases          : 0
16:09:07: CPRM Security Support             : No Security
16:09:07: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:09:07: Spec. Version                     : Version 3.0X
16:09:07: Extended Security Support         : Extended_Security_Not_Supported
16:09:07: Command Support                   : COMMAND_SUPPORT
16:09:07: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:09:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4450>, <py_sfcl.CommandDataDefinition object at 0x061F4270>) , Command count = 173 ] 
16:09:07: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:09:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F42D0>, <py_sfcl.CommandDataDefinition object at 0x061F4300>) , Command count = 174 ] 
16:09:07: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:09:07: [ SetBusWidth(0x4) , Command count = 175 ] 
16:09:07: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:09:07: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061F43C0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 176 ] 
16:09:07: Protected Area Size 0x28000
16:09:07: Bus Width           2
16:09:07: Secure Mode         0
16:09:07: Speed  Class        4
16:09:07: Perf Move           0
16:09:07: Au Size             9
16:09:07: Erase Size          15
16:09:07: Erase Timeout       1
16:09:07: Erase offset        1
16:09:07: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:09:07: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:09:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:09:07: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 177 ] 
16:09:07: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:09:07: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:09:07: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:09:07: Host Frequency set to 100000 KHz
16:09:07: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:09:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:07: ####CSD Registe 2.0 Values####
16:09:07: CSD_STRUCTURE                                 :0x1
16:09:07: Reserv1                                       :0x0
16:09:07: Time Access 1 TAAC                            :0xe
16:09:07: Time Access 2 NSAC*100                        :0x0
16:09:07: Data Transfer Rate TRAN_SPEED                 :0xb
16:09:07: Card Command Classess CCC                     :0x5b5
16:09:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:07: DSR(driver stage register)  DSR_IMP           :0x0
16:09:07: Reserv2                                       :0x0
16:09:07: Device Size C_SIZE                            :0xedc8
16:09:07: Reserv3                                       :0x0
16:09:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:07: Reserv4                                       :0x0
16:09:07: Write Speed Factor R2W_FACTOR                 :0x2
16:09:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:07: FILE_FORMAT_GRP                               :0x0
16:09:07: COPY flag                                     :0x1
16:09:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:07: File_Format                                   :0x0
16:09:07: CRC                                           :0x0
16:09:07: ####CSD Registe Values####  

16:09:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F46F0>, <py_sfcl.CommandDataDefinition object at 0x061F4510>) , Command count = 178 ] 
16:09:07: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:09:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4570>, <py_sfcl.CommandDataDefinition object at 0x061F45A0>) , Command count = 179 ] 
16:09:07: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:09:07: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:09:07: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetTO
16:09:07: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 180 ] 
16:09:07: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetVolt
16:09:07: [GO18_globalSetVolt]### Set Host Voltage value.
16:09:07: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:09:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F4660>, 0x0, True) , Command count = 181 ] 
16:09:07: [GO18_globalSetVolt]### Host voltage value is set.
16:09:07: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:09:07: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F4690>, 0x0, False) , Command count = 182 ] 
16:09:07: [GO18_globalSetVolt]### Host voltage value is set.
16:09:07: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
16:09:07: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:09:08: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:09:08: [RT2HCSD34_1_1_1_2a.py]***Test Sequential of CMD 8' s during Soft Reset***
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4720>, <py_sfcl.CommandDataDefinition object at 0x061F4750>) , Command count = 183 ] 
16:09:08: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F47B0>, <py_sfcl.CommandDataDefinition object at 0x061F47E0>) , Command count = 184 ] 
16:09:08: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 137, 40]
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4840>, <py_sfcl.CommandDataDefinition object at 0x061F4870>) , Command count = 185 ] 
16:09:08: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 207, 252]
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F48D0>, <py_sfcl.CommandDataDefinition object at 0x061F4900>) , Command count = 186 ] 
16:09:08: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 187, 102]
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4960>, <py_sfcl.CommandDataDefinition object at 0x061F4990>) , Command count = 187 ] 
16:09:08: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 2, 76]
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F49F0>, <py_sfcl.CommandDataDefinition object at 0x061F4A20>) , Command count = 188 ] 
16:09:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4A80>, <py_sfcl.CommandDataDefinition object at 0x061F4AB0>) , Command count = 189 ] 
16:09:08: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 65, 255, 128, 0, 255]
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B10>, <py_sfcl.CommandDataDefinition object at 0x061F4B40>) , Command count = 190 ] 
16:09:08: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4BA0>, <py_sfcl.CommandDataDefinition object at 0x061F4BD0>) , Command count = 191 ] 
16:09:08: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 192, 255, 128, 0, 255]
16:09:08: [ SetCardCap(True) , Command count = 192 ] 
16:09:08: [ SetSdMmcCardMode(0x2, True) , Command count = 193 ] 
16:09:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C90>, <py_sfcl.CommandDataDefinition object at 0x061F4CC0>) , Command count = 194 ] 
16:09:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D20>, <py_sfcl.CommandDataDefinition object at 0x061F4D50>) , Command count = 195 ] 
16:09:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:08: [ SetCardRCA(0x1, 0xD555) , Command count = 196 ] 
16:09:08: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:08: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
16:09:08: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:09: Host Frequency set to 25000 KHz
16:09:09: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:09: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
16:09:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:09: [ SetBusWidth(0x1) , Command count = 197 ] 
16:09:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:09: ####CSD Registe 2.0 Values####
16:09:09: CSD_STRUCTURE                                 :0x1
16:09:09: Reserv1                                       :0x0
16:09:09: Time Access 1 TAAC                            :0xe
16:09:09: Time Access 2 NSAC*100                        :0x0
16:09:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:09: Card Command Classess CCC                     :0x5b5
16:09:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:09: DSR(driver stage register)  DSR_IMP           :0x0
16:09:09: Reserv2                                       :0x0
16:09:09: Device Size C_SIZE                            :0xedc8
16:09:09: Reserv3                                       :0x0
16:09:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:09: Reserv4                                       :0x0
16:09:09: Write Speed Factor R2W_FACTOR                 :0x2
16:09:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:09: FILE_FORMAT_GRP                               :0x0
16:09:09: COPY flag                                     :0x1
16:09:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:09: File_Format                                   :0x0
16:09:09: CRC                                           :0x0
16:09:09: ####CSD Registe Values####  

16:09:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:09: ProductSerialNumber = 0x23482900
16:09:09: CardMaximumLBA      = 0x3b72400
16:09:09: CardCapacity        = 32G
16:09:09: Is card secure      = 0
16:09:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:09: [DVTCommonLib]###  LogicalWrite called
16:09:11: [ WriteLba(0x2EAC41B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 198 ] 
16:09:11: [DVTCommonLib]###  LogicalWrite Completed 

16:09:11: [DVTCommonLib]###  LogicalRead called
16:09:12: [ ReadLba(0x2EAC41B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 199 ] 
16:09:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:12: [RT2HCSD34_1_1_1_2a.py]***Test Sequential of CMD 8' s during Power Cycle Reset***
16:09:12: [RT2HCSD34_1_1_1_2a.py]POWER : OFF and ON
16:09:14: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
16:09:14: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:09:14: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E10>, <py_sfcl.CommandDataDefinition object at 0x061F4E40>) , Command count = 200 ] 
16:09:14: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 202, 87]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4ED0>, <py_sfcl.CommandDataDefinition object at 0x061F4F00>) , Command count = 201 ] 
16:09:14: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 5, 163]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4F60>, <py_sfcl.CommandDataDefinition object at 0x061F4F90>) , Command count = 202 ] 
16:09:14: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 135, 247]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA060>, <py_sfcl.CommandDataDefinition object at 0x061FA090>) , Command count = 203 ] 
16:09:14: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 88, 5]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA0F0>, <py_sfcl.CommandDataDefinition object at 0x061FA120>) , Command count = 204 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA180>, <py_sfcl.CommandDataDefinition object at 0x061FA1B0>) , Command count = 205 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA210>, <py_sfcl.CommandDataDefinition object at 0x061FA240>) , Command count = 206 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2A0>, <py_sfcl.CommandDataDefinition object at 0x061FA2D0>) , Command count = 207 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA330>, <py_sfcl.CommandDataDefinition object at 0x061FA360>) , Command count = 208 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA3C0>, <py_sfcl.CommandDataDefinition object at 0x061FA3F0>) , Command count = 209 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA450>, <py_sfcl.CommandDataDefinition object at 0x061FA480>) , Command count = 210 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA4E0>, <py_sfcl.CommandDataDefinition object at 0x061FA510>) , Command count = 211 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA570>, <py_sfcl.CommandDataDefinition object at 0x061FA5A0>) , Command count = 212 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA600>, <py_sfcl.CommandDataDefinition object at 0x061FA630>) , Command count = 213 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA690>, <py_sfcl.CommandDataDefinition object at 0x061FA6C0>) , Command count = 214 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA720>, <py_sfcl.CommandDataDefinition object at 0x061FA750>) , Command count = 215 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA7B0>, <py_sfcl.CommandDataDefinition object at 0x061FA7E0>) , Command count = 216 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA840>, <py_sfcl.CommandDataDefinition object at 0x061FA870>) , Command count = 217 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA8D0>, <py_sfcl.CommandDataDefinition object at 0x061FA900>) , Command count = 218 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA960>, <py_sfcl.CommandDataDefinition object at 0x061FA990>) , Command count = 219 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA9F0>, <py_sfcl.CommandDataDefinition object at 0x061FAA20>) , Command count = 220 ] 
16:09:14: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAA80>, <py_sfcl.CommandDataDefinition object at 0x061FAAB0>) , Command count = 221 ] 
16:09:14: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:09:14: [ SetCardCap(True) , Command count = 222 ] 
16:09:14: [ SetSdMmcCardMode(0x2, True) , Command count = 223 ] 
16:09:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAB70>, <py_sfcl.CommandDataDefinition object at 0x061FABA0>) , Command count = 224 ] 
16:09:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAC00>, <py_sfcl.CommandDataDefinition object at 0x061FAC30>) , Command count = 225 ] 
16:09:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:15: [ SetCardRCA(0x1, 0xD555) , Command count = 226 ] 
16:09:15: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:15: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
16:09:15: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:15: Host Frequency set to 25000 KHz
16:09:15: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:15: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
16:09:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:15: [ SetBusWidth(0x1) , Command count = 227 ] 
16:09:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:15: ####CSD Registe 2.0 Values####
16:09:15: CSD_STRUCTURE                                 :0x1
16:09:15: Reserv1                                       :0x0
16:09:15: Time Access 1 TAAC                            :0xe
16:09:15: Time Access 2 NSAC*100                        :0x0
16:09:15: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:15: Card Command Classess CCC                     :0x5b5
16:09:15: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:15: DSR(driver stage register)  DSR_IMP           :0x0
16:09:15: Reserv2                                       :0x0
16:09:15: Device Size C_SIZE                            :0xedc8
16:09:15: Reserv3                                       :0x0
16:09:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:15: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:15: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:15: Reserv4                                       :0x0
16:09:15: Write Speed Factor R2W_FACTOR                 :0x2
16:09:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:15: FILE_FORMAT_GRP                               :0x0
16:09:15: COPY flag                                     :0x1
16:09:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:15: File_Format                                   :0x0
16:09:15: CRC                                           :0x0
16:09:15: ####CSD Registe Values####  

16:09:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:15: ProductSerialNumber = 0x23482900
16:09:15: CardMaximumLBA      = 0x3b72400
16:09:15: CardCapacity        = 32G
16:09:15: Is card secure      = 0
16:09:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:15: [DVTCommonLib]###  LogicalWrite called
16:09:17: [ WriteLba(0x1A18A67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 228 ] 
16:09:17: [DVTCommonLib]###  LogicalWrite Completed 

16:09:17: [DVTCommonLib]###  LogicalRead called
16:09:18: [ ReadLba(0x1A18A67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 229 ] 
16:09:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:18: ***Test Sequential of CMD 8' s during Power Cycle & CMD 0 Reset***
16:09:18: [RT2HCSD34_1_1_1_2a.py]POWER : OFF and ON
16:09:20: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetResetFreq
16:09:20: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:09:20: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FACF0>, <py_sfcl.CommandDataDefinition object at 0x061FAD20>) , Command count = 230 ] 
16:09:20: CMD0[ GO_IDLE_STATE ] Passed with R0 type response
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FADB0>, <py_sfcl.CommandDataDefinition object at 0x061FADE0>) , Command count = 231 ] 
16:09:20: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 18, 74]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAE40>, <py_sfcl.CommandDataDefinition object at 0x061FAE70>) , Command count = 232 ] 
16:09:20: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 190, 205]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAF00>, <py_sfcl.CommandDataDefinition object at 0x061FAF30>) , Command count = 233 ] 
16:09:20: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 90, 65]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAF90>, <py_sfcl.CommandDataDefinition object at 0x061FAFC0>) , Command count = 234 ] 
16:09:20: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 101, 182]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE060>, <py_sfcl.CommandDataDefinition object at 0x061FE090>) , Command count = 235 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0F0>, <py_sfcl.CommandDataDefinition object at 0x061FE120>) , Command count = 236 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE180>, <py_sfcl.CommandDataDefinition object at 0x061FE1B0>) , Command count = 237 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE210>, <py_sfcl.CommandDataDefinition object at 0x061FE240>) , Command count = 238 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE2A0>, <py_sfcl.CommandDataDefinition object at 0x061FE2D0>) , Command count = 239 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE330>, <py_sfcl.CommandDataDefinition object at 0x061FE360>) , Command count = 240 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE3C0>, <py_sfcl.CommandDataDefinition object at 0x061FE3F0>) , Command count = 241 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE450>, <py_sfcl.CommandDataDefinition object at 0x061FE480>) , Command count = 242 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE4E0>, <py_sfcl.CommandDataDefinition object at 0x061FE510>) , Command count = 243 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE570>, <py_sfcl.CommandDataDefinition object at 0x061FE5A0>) , Command count = 244 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE600>, <py_sfcl.CommandDataDefinition object at 0x061FE630>) , Command count = 245 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE690>, <py_sfcl.CommandDataDefinition object at 0x061FE6C0>) , Command count = 246 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE720>, <py_sfcl.CommandDataDefinition object at 0x061FE750>) , Command count = 247 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE7B0>, <py_sfcl.CommandDataDefinition object at 0x061FE7E0>) , Command count = 248 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE840>, <py_sfcl.CommandDataDefinition object at 0x061FE870>) , Command count = 249 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE8D0>, <py_sfcl.CommandDataDefinition object at 0x061FE900>) , Command count = 250 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE960>, <py_sfcl.CommandDataDefinition object at 0x061FE990>) , Command count = 251 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337FC0>, <py_sfcl.CommandDataDefinition object at 0x061FE9F0>) , Command count = 252 ] 
16:09:20: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 1, 255, 128, 0, 255]
16:09:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEA50>, <py_sfcl.CommandDataDefinition object at 0x061FEA80>) , Command count = 253 ] 
16:09:20: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0541D7B0>, <py_sfcl.CommandDataDefinition object at 0x061FEAE0>) , Command count = 254 ] 
16:09:21: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:09:21: [ SetCardCap(True) , Command count = 255 ] 
16:09:21: [ SetSdMmcCardMode(0x2, True) , Command count = 256 ] 
16:09:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054413F0>, <py_sfcl.CommandDataDefinition object at 0x05422150>) , Command count = 257 ] 
16:09:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544CEA0>, <py_sfcl.CommandDataDefinition object at 0x061FEB70>) , Command count = 258 ] 
16:09:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:21: [ SetCardRCA(0x1, 0xD555) , Command count = 259 ] 
16:09:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:21: [RT2HCSD34_1_1_1_2a.py]CALL : globalSetLSHostFreq
16:09:21: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:21: Host Frequency set to 25000 KHz
16:09:21: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:21: [RT2HCSD34_1_1_1_2a.py]CALL : AddressForWriteRead
16:09:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:21: [ SetBusWidth(0x1) , Command count = 260 ] 
16:09:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:21: ####CSD Registe 2.0 Values####
16:09:21: CSD_STRUCTURE                                 :0x1
16:09:21: Reserv1                                       :0x0
16:09:21: Time Access 1 TAAC                            :0xe
16:09:21: Time Access 2 NSAC*100                        :0x0
16:09:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:21: Card Command Classess CCC                     :0x5b5
16:09:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:21: DSR(driver stage register)  DSR_IMP           :0x0
16:09:21: Reserv2                                       :0x0
16:09:21: Device Size C_SIZE                            :0xedc8
16:09:21: Reserv3                                       :0x0
16:09:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:21: Reserv4                                       :0x0
16:09:21: Write Speed Factor R2W_FACTOR                 :0x2
16:09:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:21: FILE_FORMAT_GRP                               :0x0
16:09:21: COPY flag                                     :0x1
16:09:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:21: File_Format                                   :0x0
16:09:21: CRC                                           :0x0
16:09:21: ####CSD Registe Values####  

16:09:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:21: ProductSerialNumber = 0x23482900
16:09:21: CardMaximumLBA      = 0x3b72400
16:09:21: CardCapacity        = 32G
16:09:21: Is card secure      = 0
16:09:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:21: [DVTCommonLib]###  LogicalWrite called
16:09:23: [ WriteLba(0x31D78A0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 261 ] 
16:09:23: [DVTCommonLib]###  LogicalWrite Completed 

16:09:23: [DVTCommonLib]###  LogicalRead called
16:09:24: [ ReadLba(0x31D78A0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 262 ] 
16:09:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:24: ########################################
16:09:24: Finished Running script RT2HCSD34_1_1_1_2a 
16:09:24: ########################################
16:09:24: ########################################
16:09:24: Stated Running script RT2HCSD35_1_1_1_3 
16:09:24: ########################################
16:09:24: [RT2HCSD35_1_1_1_3.py]###### Set Card Time Out values test. 
16:09:24: [GO4_globalInitCard]### Switch to Specify Card Type
16:09:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:26: Host Frequency set to 25000 KHz
16:09:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:26: [GO18_globalSetVolt]### Set Host Voltage value.
16:09:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:09:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x06244D20>, 0x0, True) , Command count = 263 ] 
16:09:26: [GO18_globalSetVolt]### Host voltage value is set.
16:09:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:09:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x0544EC00>, 0x0, False) , Command count = 264 ] 
16:09:26: [GO18_globalSetVolt]### Host voltage value is set.
16:09:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 265 ] 
16:09:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 266 ] 
16:09:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:09:27: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 267 ] 
16:09:27: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:09:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC30>, <py_sfcl.CommandDataDefinition object at 0x06244840>) , Command count = 268 ] 
16:09:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EF30>, <py_sfcl.CommandDataDefinition object at 0x06244870>) , Command count = 269 ] 
16:09:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:09:27: [ SetCardRCA(0x1, 0xD555) , Command count = 270 ] 
16:09:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:27: Host Frequency set to 25000 KHz
16:09:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:27: ####CSD Registe 2.0 Values####
16:09:27: CSD_STRUCTURE                                 :0x1
16:09:27: Reserv1                                       :0x0
16:09:27: Time Access 1 TAAC                            :0xe
16:09:27: Time Access 2 NSAC*100                        :0x0
16:09:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:27: Card Command Classess CCC                     :0x5b5
16:09:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:27: DSR(driver stage register)  DSR_IMP           :0x0
16:09:27: Reserv2                                       :0x0
16:09:27: Device Size C_SIZE                            :0xedc8
16:09:27: Reserv3                                       :0x0
16:09:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:27: Reserv4                                       :0x0
16:09:27: Write Speed Factor R2W_FACTOR                 :0x2
16:09:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:27: FILE_FORMAT_GRP                               :0x0
16:09:27: COPY flag                                     :0x1
16:09:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:27: File_Format                                   :0x0
16:09:27: CRC                                           :0x0
16:09:27: ####CSD Registe Values####  

16:09:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:09:27: [GetSCRRegisterEntry] Passed
16:09:27: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:09:27: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:09:27: Data_Status_After Erases          : 0
16:09:27: CPRM Security Support             : No Security
16:09:27: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:09:27: Spec. Version                     : Version 3.0X
16:09:27: Extended Security Support         : Extended_Security_Not_Supported
16:09:27: Command Support                   : COMMAND_SUPPORT
16:09:27: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:09:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0545AFC0>, <py_sfcl.CommandDataDefinition object at 0x062449F0>) , Command count = 271 ] 
16:09:27: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:09:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460990>, <py_sfcl.CommandDataDefinition object at 0x06244780>) , Command count = 272 ] 
16:09:27: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:09:27: [ SetBusWidth(0x4) , Command count = 273 ] 
16:09:27: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:09:27: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x062448D0>, <0x200/0x200, Spc, pat:0x0>) , Command count = 274 ] 
16:09:27: Protected Area Size 0x28000
16:09:27: Bus Width           2
16:09:27: Secure Mode         0
16:09:27: Speed  Class        4
16:09:27: Perf Move           0
16:09:27: Au Size             9
16:09:27: Erase Size          15
16:09:27: Erase Timeout       1
16:09:27: Erase offset        1
16:09:27: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:09:27: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:09:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:09:27: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 275 ] 
16:09:27: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:09:27: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:09:27: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:09:27: Host Frequency set to 100000 KHz
16:09:27: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:09:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:27: ####CSD Registe 2.0 Values####
16:09:27: CSD_STRUCTURE                                 :0x1
16:09:27: Reserv1                                       :0x0
16:09:27: Time Access 1 TAAC                            :0xe
16:09:27: Time Access 2 NSAC*100                        :0x0
16:09:27: Data Transfer Rate TRAN_SPEED                 :0xb
16:09:27: Card Command Classess CCC                     :0x5b5
16:09:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:27: DSR(driver stage register)  DSR_IMP           :0x0
16:09:27: Reserv2                                       :0x0
16:09:27: Device Size C_SIZE                            :0xedc8
16:09:27: Reserv3                                       :0x0
16:09:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:27: Reserv4                                       :0x0
16:09:27: Write Speed Factor R2W_FACTOR                 :0x2
16:09:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:27: FILE_FORMAT_GRP                               :0x0
16:09:27: COPY flag                                     :0x1
16:09:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:27: File_Format                                   :0x0
16:09:27: CRC                                           :0x0
16:09:27: ####CSD Registe Values####  

16:09:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0545A900>, <py_sfcl.CommandDataDefinition object at 0x06244180>) , Command count = 276 ] 
16:09:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:09:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460C00>, <py_sfcl.CommandDataDefinition object at 0x062445D0>) , Command count = 277 ] 
16:09:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:09:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:09:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 278 ] 
16:09:27: [GO18_globalSetVolt]### Set Host Voltage value.
16:09:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:09:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x05460C60>, 0x0, True) , Command count = 279 ] 
16:09:27: [GO18_globalSetVolt]### Host voltage value is set.
16:09:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:09:28: [ SetVolt(<py_sfcl.SDVoltage object at 0x05460C90>, 0x0, False) , Command count = 280 ] 
16:09:28: [GO18_globalSetVolt]### Host voltage value is set.
16:09:28: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:28: Host Frequency set to 25000 KHz
16:09:28: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:28: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Soft Reset*********
16:09:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 281 ] 
16:09:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
16:09:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:28: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
16:09:28: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

16:09:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460E40>, <py_sfcl.CommandDataDefinition object at 0x062447B0>) , Command count = 282 ] 
16:09:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460ED0>, <py_sfcl.CommandDataDefinition object at 0x06244F00>) , Command count = 283 ] 
16:09:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:28: [ SetCardRCA(0x1, 0xD555) , Command count = 284 ] 
16:09:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:28: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:09:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:28: [ SetBusWidth(0x1) , Command count = 285 ] 
16:09:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:28: ####CSD Registe 2.0 Values####
16:09:28: CSD_STRUCTURE                                 :0x1
16:09:28: Reserv1                                       :0x0
16:09:28: Time Access 1 TAAC                            :0xe
16:09:28: Time Access 2 NSAC*100                        :0x0
16:09:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:28: Card Command Classess CCC                     :0x5b5
16:09:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:28: DSR(driver stage register)  DSR_IMP           :0x0
16:09:28: Reserv2                                       :0x0
16:09:28: Device Size C_SIZE                            :0xedc8
16:09:28: Reserv3                                       :0x0
16:09:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:28: Reserv4                                       :0x0
16:09:28: Write Speed Factor R2W_FACTOR                 :0x2
16:09:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:28: FILE_FORMAT_GRP                               :0x0
16:09:28: COPY flag                                     :0x1
16:09:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:28: File_Format                                   :0x0
16:09:28: CRC                                           :0x0
16:09:28: ####CSD Registe Values####  

16:09:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:28: ProductSerialNumber = 0x23482900
16:09:28: CardMaximumLBA      = 0x3b72400
16:09:28: CardCapacity        = 32G
16:09:28: Is card secure      = 0
16:09:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:29: [DVTCommonLib]###  LogicalWrite called
16:09:30: [ WriteLba(0x34EF52F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 286 ] 
16:09:30: [DVTCommonLib]###  LogicalWrite Completed 

16:09:30: [DVTCommonLib]###  LogicalRead called
16:09:32: [ ReadLba(0x34EF52F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 287 ] 
16:09:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:32: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle Reset*********
16:09:32: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
16:09:34: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetResetFreq
16:09:34: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:09:34: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:09:34: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]RUNNING Cmd8, Cmd55, ACmd41 
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2030>, <py_sfcl.CommandDataDefinition object at 0x062442A0>) , Command count = 288 ] 
16:09:34: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x06244210>, <py_sfcl.CommandDataDefinition object at 0x06244E70>) , Command count = 289 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460FC0>, <py_sfcl.CommandDataDefinition object at 0x06244F90>) , Command count = 290 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C22A0>, <py_sfcl.CommandDataDefinition object at 0x06244660>) , Command count = 291 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C24B0>, <py_sfcl.CommandDataDefinition object at 0x062443C0>) , Command count = 292 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2780>, <py_sfcl.CommandDataDefinition object at 0x060C27B0>) , Command count = 293 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2AE0>, <py_sfcl.CommandDataDefinition object at 0x062447E0>) , Command count = 294 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CF90>, <py_sfcl.CommandDataDefinition object at 0x06244C90>) , Command count = 295 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CF00>, <py_sfcl.CommandDataDefinition object at 0x06244FC0>) , Command count = 296 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CE10>, <py_sfcl.CommandDataDefinition object at 0x06244750>) , Command count = 297 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x06244A80>) , Command count = 298 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F180>, <py_sfcl.CommandDataDefinition object at 0x06244960>) , Command count = 299 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7E40>, <py_sfcl.CommandDataDefinition object at 0x061C7D80>) , Command count = 300 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7AB0>, <py_sfcl.CommandDataDefinition object at 0x061C7F60>) , Command count = 301 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7840>, <py_sfcl.CommandDataDefinition object at 0x06244B10>) , Command count = 302 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7990>, <py_sfcl.CommandDataDefinition object at 0x062444B0>) , Command count = 303 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C79F0>, <py_sfcl.CommandDataDefinition object at 0x062440F0>) , Command count = 304 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7B70>, <py_sfcl.CommandDataDefinition object at 0x061C7750>) , Command count = 305 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7870>, <py_sfcl.CommandDataDefinition object at 0x061C79C0>) , Command count = 306 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7780>, <py_sfcl.CommandDataDefinition object at 0x06244EA0>) , Command count = 307 ] 
16:09:34: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7960>, <py_sfcl.CommandDataDefinition object at 0x061C7E70>) , Command count = 308 ] 
16:09:34: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:09:34: [ SetCardCap(True) , Command count = 309 ] 
16:09:34: [ SetSdMmcCardMode(0x2, True) , Command count = 310 ] 
16:09:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2630>, <py_sfcl.CommandDataDefinition object at 0x061C7570>) , Command count = 311 ] 
16:09:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7A20>, <py_sfcl.CommandDataDefinition object at 0x061C7B40>) , Command count = 312 ] 
16:09:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:34: [ SetCardRCA(0x1, 0xD555) , Command count = 313 ] 
16:09:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:34: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
16:09:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:34: Host Frequency set to 25000 KHz
16:09:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:34: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:09:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:34: [ SetBusWidth(0x1) , Command count = 314 ] 
16:09:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:34: ####CSD Registe 2.0 Values####
16:09:34: CSD_STRUCTURE                                 :0x1
16:09:34: Reserv1                                       :0x0
16:09:34: Time Access 1 TAAC                            :0xe
16:09:34: Time Access 2 NSAC*100                        :0x0
16:09:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:34: Card Command Classess CCC                     :0x5b5
16:09:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:34: DSR(driver stage register)  DSR_IMP           :0x0
16:09:34: Reserv2                                       :0x0
16:09:34: Device Size C_SIZE                            :0xedc8
16:09:34: Reserv3                                       :0x0
16:09:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:35: Reserv4                                       :0x0
16:09:35: Write Speed Factor R2W_FACTOR                 :0x2
16:09:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:35: FILE_FORMAT_GRP                               :0x0
16:09:35: COPY flag                                     :0x1
16:09:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:35: File_Format                                   :0x0
16:09:35: CRC                                           :0x0
16:09:35: ####CSD Registe Values####  

16:09:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:35: ProductSerialNumber = 0x23482900
16:09:35: CardMaximumLBA      = 0x3b72400
16:09:35: CardCapacity        = 32G
16:09:35: Is card secure      = 0
16:09:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:35: [DVTCommonLib]###  LogicalWrite called
16:09:36: [ WriteLba(0x44A96, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 315 ] 
16:09:36: [DVTCommonLib]###  LogicalWrite Completed 

16:09:36: [DVTCommonLib]###  LogicalRead called
16:09:38: [ ReadLba(0x44A96, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 316 ] 
16:09:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:38: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle & CMD 0 Reset*********
16:09:38: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
16:09:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 317 ] 
16:09:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:40: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

16:09:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460DB0>, <py_sfcl.CommandDataDefinition object at 0x061D50F0>) , Command count = 318 ] 
16:09:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061C7C00>, <py_sfcl.CommandDataDefinition object at 0x061C7AE0>) , Command count = 319 ] 
16:09:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:40: [ SetCardRCA(0x1, 0xD555) , Command count = 320 ] 
16:09:40: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:40: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:09:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:40: [ SetBusWidth(0x1) , Command count = 321 ] 
16:09:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:40: ####CSD Registe 2.0 Values####
16:09:40: CSD_STRUCTURE                                 :0x1
16:09:40: Reserv1                                       :0x0
16:09:40: Time Access 1 TAAC                            :0xe
16:09:40: Time Access 2 NSAC*100                        :0x0
16:09:40: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:40: Card Command Classess CCC                     :0x5b5
16:09:40: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:40: DSR(driver stage register)  DSR_IMP           :0x0
16:09:40: Reserv2                                       :0x0
16:09:40: Device Size C_SIZE                            :0xedc8
16:09:40: Reserv3                                       :0x0
16:09:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:40: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:40: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:40: Reserv4                                       :0x0
16:09:40: Write Speed Factor R2W_FACTOR                 :0x2
16:09:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:40: FILE_FORMAT_GRP                               :0x0
16:09:40: COPY flag                                     :0x1
16:09:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:40: File_Format                                   :0x0
16:09:40: CRC                                           :0x0
16:09:40: ####CSD Registe Values####  

16:09:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:40: ProductSerialNumber = 0x23482900
16:09:40: CardMaximumLBA      = 0x3b72400
16:09:40: CardCapacity        = 32G
16:09:40: Is card secure      = 0
16:09:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:40: [DVTCommonLib]###  LogicalWrite called
16:09:42: [ WriteLba(0x2D9834D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 322 ] 
16:09:42: [DVTCommonLib]###  LogicalWrite Completed 

16:09:42: [DVTCommonLib]###  LogicalRead called
16:09:43: [ ReadLba(0x2D9834D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 323 ] 
16:09:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:43: [RT2HCSD35_1_1_1_3.py]***Test Pattern Filed in Soft Reset***
16:09:43: [RT2HCSD35_1_1_1_3.py]CALL : globalSetLSHostFreq
16:09:43: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:09:43: Host Frequency set to 25000 KHz
16:09:43: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:09:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 0 times 

16:09:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:09:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 324 ] 
16:09:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5810>, <py_sfcl.CommandDataDefinition object at 0x061D5AE0>) , Command count = 325 ] 
16:09:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5BD0>, <py_sfcl.CommandDataDefinition object at 0x061D59C0>) , Command count = 326 ] 
16:09:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:43: [ SetCardRCA(0x1, 0xD555) , Command count = 327 ] 
16:09:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:09:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:44: [ SetBusWidth(0x1) , Command count = 328 ] 
16:09:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:44: ####CSD Registe 2.0 Values####
16:09:44: CSD_STRUCTURE                                 :0x1
16:09:44: Reserv1                                       :0x0
16:09:44: Time Access 1 TAAC                            :0xe
16:09:44: Time Access 2 NSAC*100                        :0x0
16:09:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:44: Card Command Classess CCC                     :0x5b5
16:09:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:44: DSR(driver stage register)  DSR_IMP           :0x0
16:09:44: Reserv2                                       :0x0
16:09:44: Device Size C_SIZE                            :0xedc8
16:09:44: Reserv3                                       :0x0
16:09:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:44: Reserv4                                       :0x0
16:09:44: Write Speed Factor R2W_FACTOR                 :0x2
16:09:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:44: FILE_FORMAT_GRP                               :0x0
16:09:44: COPY flag                                     :0x1
16:09:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:44: File_Format                                   :0x0
16:09:44: CRC                                           :0x0
16:09:44: ####CSD Registe Values####  

16:09:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:44: ProductSerialNumber = 0x23482900
16:09:44: CardMaximumLBA      = 0x3b72400
16:09:44: CardCapacity        = 32G
16:09:44: Is card secure      = 0
16:09:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:44: [DVTCommonLib]###  LogicalWrite called
16:09:45: [ WriteLba(0x159482C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 329 ] 
16:09:45: [DVTCommonLib]###  LogicalWrite Completed 

16:09:45: [DVTCommonLib]###  LogicalRead called
16:09:47: [ ReadLba(0x159482C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 330 ] 
16:09:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 1 times 

16:09:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:09:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 331 ] 
16:09:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D58D0>, <py_sfcl.CommandDataDefinition object at 0x061D5C60>) , Command count = 332 ] 
16:09:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5900>, <py_sfcl.CommandDataDefinition object at 0x061D5930>) , Command count = 333 ] 
16:09:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:47: [ SetCardRCA(0x1, 0xD555) , Command count = 334 ] 
16:09:47: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:09:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:47: [ SetBusWidth(0x1) , Command count = 335 ] 
16:09:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:47: ####CSD Registe 2.0 Values####
16:09:47: CSD_STRUCTURE                                 :0x1
16:09:47: Reserv1                                       :0x0
16:09:47: Time Access 1 TAAC                            :0xe
16:09:47: Time Access 2 NSAC*100                        :0x0
16:09:47: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:47: Card Command Classess CCC                     :0x5b5
16:09:47: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:47: DSR(driver stage register)  DSR_IMP           :0x0
16:09:47: Reserv2                                       :0x0
16:09:47: Device Size C_SIZE                            :0xedc8
16:09:47: Reserv3                                       :0x0
16:09:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:47: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:47: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:47: Reserv4                                       :0x0
16:09:47: Write Speed Factor R2W_FACTOR                 :0x2
16:09:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:47: FILE_FORMAT_GRP                               :0x0
16:09:47: COPY flag                                     :0x1
16:09:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:47: File_Format                                   :0x0
16:09:47: CRC                                           :0x0
16:09:47: ####CSD Registe Values####  

16:09:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:47: ProductSerialNumber = 0x23482900
16:09:47: CardMaximumLBA      = 0x3b72400
16:09:47: CardCapacity        = 32G
16:09:47: Is card secure      = 0
16:09:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:47: [DVTCommonLib]###  LogicalWrite called
16:09:49: [ WriteLba(0x2596D29, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 336 ] 
16:09:49: [DVTCommonLib]###  LogicalWrite Completed 

16:09:49: [DVTCommonLib]###  LogicalRead called
16:09:50: [ ReadLba(0x2596D29, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 337 ] 
16:09:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 2 times 

16:09:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:09:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 338 ] 
16:09:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D50C0>, <py_sfcl.CommandDataDefinition object at 0x061D57B0>) , Command count = 339 ] 
16:09:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA060>, <py_sfcl.CommandDataDefinition object at 0x061D5EA0>) , Command count = 340 ] 
16:09:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:50: [ SetCardRCA(0x1, 0xD555) , Command count = 341 ] 
16:09:50: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:09:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:50: [ SetBusWidth(0x1) , Command count = 342 ] 
16:09:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:50: ####CSD Registe 2.0 Values####
16:09:50: CSD_STRUCTURE                                 :0x1
16:09:50: Reserv1                                       :0x0
16:09:50: Time Access 1 TAAC                            :0xe
16:09:50: Time Access 2 NSAC*100                        :0x0
16:09:50: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:50: Card Command Classess CCC                     :0x5b5
16:09:50: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:50: DSR(driver stage register)  DSR_IMP           :0x0
16:09:50: Reserv2                                       :0x0
16:09:50: Device Size C_SIZE                            :0xedc8
16:09:50: Reserv3                                       :0x0
16:09:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:50: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:50: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:50: Reserv4                                       :0x0
16:09:50: Write Speed Factor R2W_FACTOR                 :0x2
16:09:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:50: FILE_FORMAT_GRP                               :0x0
16:09:50: COPY flag                                     :0x1
16:09:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:50: File_Format                                   :0x0
16:09:50: CRC                                           :0x0
16:09:50: ####CSD Registe Values####  

16:09:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:50: ProductSerialNumber = 0x23482900
16:09:50: CardMaximumLBA      = 0x3b72400
16:09:50: CardCapacity        = 32G
16:09:50: Is card secure      = 0
16:09:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:50: [DVTCommonLib]###  LogicalWrite called
16:09:52: [ WriteLba(0x2393C67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 343 ] 
16:09:52: [DVTCommonLib]###  LogicalWrite Completed 

16:09:52: [DVTCommonLib]###  LogicalRead called
16:09:53: [ ReadLba(0x2393C67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 344 ] 
16:09:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 3 times 

16:09:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:09:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 345 ] 
16:09:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA2D0>, <py_sfcl.CommandDataDefinition object at 0x061DA300>) , Command count = 346 ] 
16:09:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA450>, <py_sfcl.CommandDataDefinition object at 0x061DA2A0>) , Command count = 347 ] 
16:09:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:54: [ SetCardRCA(0x1, 0xD555) , Command count = 348 ] 
16:09:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:09:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:54: [ SetBusWidth(0x1) , Command count = 349 ] 
16:09:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:54: ####CSD Registe 2.0 Values####
16:09:54: CSD_STRUCTURE                                 :0x1
16:09:54: Reserv1                                       :0x0
16:09:54: Time Access 1 TAAC                            :0xe
16:09:54: Time Access 2 NSAC*100                        :0x0
16:09:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:54: Card Command Classess CCC                     :0x5b5
16:09:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:54: DSR(driver stage register)  DSR_IMP           :0x0
16:09:54: Reserv2                                       :0x0
16:09:54: Device Size C_SIZE                            :0xedc8
16:09:54: Reserv3                                       :0x0
16:09:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:54: Reserv4                                       :0x0
16:09:54: Write Speed Factor R2W_FACTOR                 :0x2
16:09:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:54: FILE_FORMAT_GRP                               :0x0
16:09:54: COPY flag                                     :0x1
16:09:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:54: File_Format                                   :0x0
16:09:54: CRC                                           :0x0
16:09:54: ####CSD Registe Values####  

16:09:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:54: ProductSerialNumber = 0x23482900
16:09:54: CardMaximumLBA      = 0x3b72400
16:09:54: CardCapacity        = 32G
16:09:54: Is card secure      = 0
16:09:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:54: [DVTCommonLib]###  LogicalWrite called
16:09:55: [ WriteLba(0x167F539, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 350 ] 
16:09:55: [DVTCommonLib]###  LogicalWrite Completed 

16:09:55: [DVTCommonLib]###  LogicalRead called
16:09:57: [ ReadLba(0x167F539, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 351 ] 
16:09:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:09:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:09:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 4 times 

16:09:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:09:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:09:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 352 ] 
16:09:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:09:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:09:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:09:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:09:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:09:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA240>, <py_sfcl.CommandDataDefinition object at 0x061DA540>) , Command count = 353 ] 
16:09:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:09:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA810>, <py_sfcl.CommandDataDefinition object at 0x061DA390>) , Command count = 354 ] 
16:09:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:09:57: [ SetCardRCA(0x1, 0xD555) , Command count = 355 ] 
16:09:57: [DVTCommonLib]### Identification :Idenfication of card completed 

16:09:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:09:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:09:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:09:57: [ SetBusWidth(0x1) , Command count = 356 ] 
16:09:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:09:57: ####CSD Registe 2.0 Values####
16:09:57: CSD_STRUCTURE                                 :0x1
16:09:57: Reserv1                                       :0x0
16:09:57: Time Access 1 TAAC                            :0xe
16:09:57: Time Access 2 NSAC*100                        :0x0
16:09:57: Data Transfer Rate TRAN_SPEED                 :0x32
16:09:57: Card Command Classess CCC                     :0x5b5
16:09:57: Max Read Data Block Length  READ_BL_LEN       :0x9
16:09:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:09:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:09:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:09:57: DSR(driver stage register)  DSR_IMP           :0x0
16:09:57: Reserv2                                       :0x0
16:09:57: Device Size C_SIZE                            :0xedc8
16:09:57: Reserv3                                       :0x0
16:09:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:09:57: Erase Sector Size SECTOR_SIZE                 :0x7f
16:09:57: Write Protect Group Size WP_GRP_SIZE          :0x0
16:09:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:09:57: Reserv4                                       :0x0
16:09:57: Write Speed Factor R2W_FACTOR                 :0x2
16:09:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:09:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:09:57: FILE_FORMAT_GRP                               :0x0
16:09:57: COPY flag                                     :0x1
16:09:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:09:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:09:57: File_Format                                   :0x0
16:09:57: CRC                                           :0x0
16:09:57: ####CSD Registe Values####  

16:09:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:09:57: ProductSerialNumber = 0x23482900
16:09:57: CardMaximumLBA      = 0x3b72400
16:09:57: CardCapacity        = 32G
16:09:57: Is card secure      = 0
16:09:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:09:57: [DVTCommonLib]###  LogicalWrite called
16:09:59: [ WriteLba(0xF37B8B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 357 ] 
16:09:59: [DVTCommonLib]###  LogicalWrite Completed 

16:09:59: [DVTCommonLib]###  LogicalRead called
16:10:00: [ ReadLba(0xF37B8B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 358 ] 
16:10:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 5 times 

16:10:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 359 ] 
16:10:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA090>, <py_sfcl.CommandDataDefinition object at 0x061E1F60>) , Command count = 360 ] 
16:10:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA030>, <py_sfcl.CommandDataDefinition object at 0x061EA060>) , Command count = 361 ] 
16:10:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:00: [ SetCardRCA(0x1, 0xD555) , Command count = 362 ] 
16:10:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:00: [ SetBusWidth(0x1) , Command count = 363 ] 
16:10:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:00: ####CSD Registe 2.0 Values####
16:10:00: CSD_STRUCTURE                                 :0x1
16:10:00: Reserv1                                       :0x0
16:10:00: Time Access 1 TAAC                            :0xe
16:10:00: Time Access 2 NSAC*100                        :0x0
16:10:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:00: Card Command Classess CCC                     :0x5b5
16:10:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:00: DSR(driver stage register)  DSR_IMP           :0x0
16:10:00: Reserv2                                       :0x0
16:10:00: Device Size C_SIZE                            :0xedc8
16:10:00: Reserv3                                       :0x0
16:10:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:00: Reserv4                                       :0x0
16:10:00: Write Speed Factor R2W_FACTOR                 :0x2
16:10:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:00: FILE_FORMAT_GRP                               :0x0
16:10:00: COPY flag                                     :0x1
16:10:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:00: File_Format                                   :0x0
16:10:00: CRC                                           :0x0
16:10:00: ####CSD Registe Values####  

16:10:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:00: ProductSerialNumber = 0x23482900
16:10:00: CardMaximumLBA      = 0x3b72400
16:10:00: CardCapacity        = 32G
16:10:00: Is card secure      = 0
16:10:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:00: [DVTCommonLib]###  LogicalWrite called
16:10:02: [ WriteLba(0x2228CD7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 364 ] 
16:10:02: [DVTCommonLib]###  LogicalWrite Completed 

16:10:02: [DVTCommonLib]###  LogicalRead called
16:10:04: [ ReadLba(0x2228CD7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 365 ] 
16:10:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 6 times 

16:10:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 366 ] 
16:10:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA390>, <py_sfcl.CommandDataDefinition object at 0x061EA3C0>) , Command count = 367 ] 
16:10:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA420>, <py_sfcl.CommandDataDefinition object at 0x061EA450>) , Command count = 368 ] 
16:10:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:04: [ SetCardRCA(0x1, 0xD555) , Command count = 369 ] 
16:10:04: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:04: [ SetBusWidth(0x1) , Command count = 370 ] 
16:10:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:04: ####CSD Registe 2.0 Values####
16:10:04: CSD_STRUCTURE                                 :0x1
16:10:04: Reserv1                                       :0x0
16:10:04: Time Access 1 TAAC                            :0xe
16:10:04: Time Access 2 NSAC*100                        :0x0
16:10:04: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:04: Card Command Classess CCC                     :0x5b5
16:10:04: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:04: DSR(driver stage register)  DSR_IMP           :0x0
16:10:04: Reserv2                                       :0x0
16:10:04: Device Size C_SIZE                            :0xedc8
16:10:04: Reserv3                                       :0x0
16:10:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:04: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:04: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:04: Reserv4                                       :0x0
16:10:04: Write Speed Factor R2W_FACTOR                 :0x2
16:10:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:04: FILE_FORMAT_GRP                               :0x0
16:10:04: COPY flag                                     :0x1
16:10:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:04: File_Format                                   :0x0
16:10:04: CRC                                           :0x0
16:10:04: ####CSD Registe Values####  

16:10:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:04: ProductSerialNumber = 0x23482900
16:10:04: CardMaximumLBA      = 0x3b72400
16:10:04: CardCapacity        = 32G
16:10:04: Is card secure      = 0
16:10:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:04: [DVTCommonLib]###  LogicalWrite called
16:10:05: [ WriteLba(0x23A7E95, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 371 ] 
16:10:05: [DVTCommonLib]###  LogicalWrite Completed 

16:10:05: [DVTCommonLib]###  LogicalRead called
16:10:07: [ ReadLba(0x23A7E95, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 372 ] 
16:10:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 7 times 

16:10:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 373 ] 
16:10:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA300>, <py_sfcl.CommandDataDefinition object at 0x061EA780>) , Command count = 374 ] 
16:10:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA810>, <py_sfcl.CommandDataDefinition object at 0x061EA840>) , Command count = 375 ] 
16:10:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:07: [ SetCardRCA(0x1, 0xD555) , Command count = 376 ] 
16:10:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:07: [ SetBusWidth(0x1) , Command count = 377 ] 
16:10:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:07: ####CSD Registe 2.0 Values####
16:10:07: CSD_STRUCTURE                                 :0x1
16:10:07: Reserv1                                       :0x0
16:10:07: Time Access 1 TAAC                            :0xe
16:10:07: Time Access 2 NSAC*100                        :0x0
16:10:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:07: Card Command Classess CCC                     :0x5b5
16:10:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:07: DSR(driver stage register)  DSR_IMP           :0x0
16:10:07: Reserv2                                       :0x0
16:10:07: Device Size C_SIZE                            :0xedc8
16:10:07: Reserv3                                       :0x0
16:10:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:07: Reserv4                                       :0x0
16:10:07: Write Speed Factor R2W_FACTOR                 :0x2
16:10:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:07: FILE_FORMAT_GRP                               :0x0
16:10:07: COPY flag                                     :0x1
16:10:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:07: File_Format                                   :0x0
16:10:07: CRC                                           :0x0
16:10:07: ####CSD Registe Values####  

16:10:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:07: ProductSerialNumber = 0x23482900
16:10:07: CardMaximumLBA      = 0x3b72400
16:10:07: CardCapacity        = 32G
16:10:07: Is card secure      = 0
16:10:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:07: [DVTCommonLib]###  LogicalWrite called
16:10:09: [ WriteLba(0x2959794, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 378 ] 
16:10:09: [DVTCommonLib]###  LogicalWrite Completed 

16:10:09: [DVTCommonLib]###  LogicalRead called
16:10:10: [ ReadLba(0x2959794, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 379 ] 
16:10:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 8 times 

16:10:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 380 ] 
16:10:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA6F0>, <py_sfcl.CommandDataDefinition object at 0x061EAAB0>) , Command count = 381 ] 
16:10:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EABD0>, <py_sfcl.CommandDataDefinition object at 0x061EABA0>) , Command count = 382 ] 
16:10:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:10: [ SetCardRCA(0x1, 0xD555) , Command count = 383 ] 
16:10:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:10: [ SetBusWidth(0x1) , Command count = 384 ] 
16:10:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:10: ####CSD Registe 2.0 Values####
16:10:10: CSD_STRUCTURE                                 :0x1
16:10:10: Reserv1                                       :0x0
16:10:10: Time Access 1 TAAC                            :0xe
16:10:10: Time Access 2 NSAC*100                        :0x0
16:10:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:10: Card Command Classess CCC                     :0x5b5
16:10:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:10: DSR(driver stage register)  DSR_IMP           :0x0
16:10:10: Reserv2                                       :0x0
16:10:10: Device Size C_SIZE                            :0xedc8
16:10:10: Reserv3                                       :0x0
16:10:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:10: Reserv4                                       :0x0
16:10:10: Write Speed Factor R2W_FACTOR                 :0x2
16:10:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:10: FILE_FORMAT_GRP                               :0x0
16:10:10: COPY flag                                     :0x1
16:10:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:10: File_Format                                   :0x0
16:10:10: CRC                                           :0x0
16:10:10: ####CSD Registe Values####  

16:10:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:10: ProductSerialNumber = 0x23482900
16:10:10: CardMaximumLBA      = 0x3b72400
16:10:10: CardCapacity        = 32G
16:10:10: Is card secure      = 0
16:10:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:10: [DVTCommonLib]###  LogicalWrite called
16:10:12: [ WriteLba(0x1E5632A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 385 ] 
16:10:12: [DVTCommonLib]###  LogicalWrite Completed 

16:10:12: [DVTCommonLib]###  LogicalRead called
16:10:14: [ ReadLba(0x1E5632A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 386 ] 
16:10:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 9 times 

16:10:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 387 ] 
16:10:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA9C0>, <py_sfcl.CommandDataDefinition object at 0x061EAD50>) , Command count = 388 ] 
16:10:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAE10>, <py_sfcl.CommandDataDefinition object at 0x061EAE40>) , Command count = 389 ] 
16:10:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:14: [ SetCardRCA(0x1, 0xD555) , Command count = 390 ] 
16:10:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:14: [ SetBusWidth(0x1) , Command count = 391 ] 
16:10:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:14: ####CSD Registe 2.0 Values####
16:10:14: CSD_STRUCTURE                                 :0x1
16:10:14: Reserv1                                       :0x0
16:10:14: Time Access 1 TAAC                            :0xe
16:10:14: Time Access 2 NSAC*100                        :0x0
16:10:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:14: Card Command Classess CCC                     :0x5b5
16:10:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:14: DSR(driver stage register)  DSR_IMP           :0x0
16:10:14: Reserv2                                       :0x0
16:10:14: Device Size C_SIZE                            :0xedc8
16:10:14: Reserv3                                       :0x0
16:10:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:14: Reserv4                                       :0x0
16:10:14: Write Speed Factor R2W_FACTOR                 :0x2
16:10:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:14: FILE_FORMAT_GRP                               :0x0
16:10:14: COPY flag                                     :0x1
16:10:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:14: File_Format                                   :0x0
16:10:14: CRC                                           :0x0
16:10:14: ####CSD Registe Values####  

16:10:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:14: ProductSerialNumber = 0x23482900
16:10:14: CardMaximumLBA      = 0x3b72400
16:10:14: CardCapacity        = 32G
16:10:14: Is card secure      = 0
16:10:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:14: [DVTCommonLib]###  LogicalWrite called
16:10:15: [ WriteLba(0xC0E081, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 392 ] 
16:10:15: [DVTCommonLib]###  LogicalWrite Completed 

16:10:15: [DVTCommonLib]###  LogicalRead called
16:10:17: [ ReadLba(0xC0E081, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 393 ] 
16:10:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 10 times 

16:10:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 394 ] 
16:10:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 395 ] 
16:10:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x061ED270>) , Command count = 396 ] 
16:10:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:17: [ SetCardRCA(0x1, 0xD555) , Command count = 397 ] 
16:10:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:17: [ SetBusWidth(0x1) , Command count = 398 ] 
16:10:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:17: ####CSD Registe 2.0 Values####
16:10:17: CSD_STRUCTURE                                 :0x1
16:10:17: Reserv1                                       :0x0
16:10:17: Time Access 1 TAAC                            :0xe
16:10:17: Time Access 2 NSAC*100                        :0x0
16:10:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:17: Card Command Classess CCC                     :0x5b5
16:10:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:17: DSR(driver stage register)  DSR_IMP           :0x0
16:10:17: Reserv2                                       :0x0
16:10:17: Device Size C_SIZE                            :0xedc8
16:10:17: Reserv3                                       :0x0
16:10:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:17: Reserv4                                       :0x0
16:10:17: Write Speed Factor R2W_FACTOR                 :0x2
16:10:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:17: FILE_FORMAT_GRP                               :0x0
16:10:17: COPY flag                                     :0x1
16:10:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:17: File_Format                                   :0x0
16:10:17: CRC                                           :0x0
16:10:17: ####CSD Registe Values####  

16:10:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:17: ProductSerialNumber = 0x23482900
16:10:17: CardMaximumLBA      = 0x3b72400
16:10:17: CardCapacity        = 32G
16:10:17: Is card secure      = 0
16:10:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:17: [DVTCommonLib]###  LogicalWrite called
16:10:19: [ WriteLba(0x1841801, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 399 ] 
16:10:19: [DVTCommonLib]###  LogicalWrite Completed 

16:10:19: [DVTCommonLib]###  LogicalRead called
16:10:20: [ ReadLba(0x1841801, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 400 ] 
16:10:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 11 times 

16:10:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 401 ] 
16:10:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED120>, <py_sfcl.CommandDataDefinition object at 0x061ED5A0>) , Command count = 402 ] 
16:10:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED630>, <py_sfcl.CommandDataDefinition object at 0x061ED660>) , Command count = 403 ] 
16:10:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:21: [ SetCardRCA(0x1, 0xD555) , Command count = 404 ] 
16:10:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:21: [ SetBusWidth(0x1) , Command count = 405 ] 
16:10:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:21: ####CSD Registe 2.0 Values####
16:10:21: CSD_STRUCTURE                                 :0x1
16:10:21: Reserv1                                       :0x0
16:10:21: Time Access 1 TAAC                            :0xe
16:10:21: Time Access 2 NSAC*100                        :0x0
16:10:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:21: Card Command Classess CCC                     :0x5b5
16:10:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:21: DSR(driver stage register)  DSR_IMP           :0x0
16:10:21: Reserv2                                       :0x0
16:10:21: Device Size C_SIZE                            :0xedc8
16:10:21: Reserv3                                       :0x0
16:10:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:21: Reserv4                                       :0x0
16:10:21: Write Speed Factor R2W_FACTOR                 :0x2
16:10:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:21: FILE_FORMAT_GRP                               :0x0
16:10:21: COPY flag                                     :0x1
16:10:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:21: File_Format                                   :0x0
16:10:21: CRC                                           :0x0
16:10:21: ####CSD Registe Values####  

16:10:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:21: ProductSerialNumber = 0x23482900
16:10:21: CardMaximumLBA      = 0x3b72400
16:10:21: CardCapacity        = 32G
16:10:21: Is card secure      = 0
16:10:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:21: [DVTCommonLib]###  LogicalWrite called
16:10:22: [ WriteLba(0x28B67EE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 406 ] 
16:10:22: [DVTCommonLib]###  LogicalWrite Completed 

16:10:22: [DVTCommonLib]###  LogicalRead called
16:10:24: [ ReadLba(0x28B67EE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 407 ] 
16:10:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 12 times 

16:10:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 408 ] 
16:10:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED510>, <py_sfcl.CommandDataDefinition object at 0x061ED9C0>) , Command count = 409 ] 
16:10:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x061ED930>) , Command count = 410 ] 
16:10:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:24: [ SetCardRCA(0x1, 0xD555) , Command count = 411 ] 
16:10:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:24: [ SetBusWidth(0x1) , Command count = 412 ] 
16:10:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:24: ####CSD Registe 2.0 Values####
16:10:24: CSD_STRUCTURE                                 :0x1
16:10:24: Reserv1                                       :0x0
16:10:24: Time Access 1 TAAC                            :0xe
16:10:24: Time Access 2 NSAC*100                        :0x0
16:10:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:24: Card Command Classess CCC                     :0x5b5
16:10:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:24: DSR(driver stage register)  DSR_IMP           :0x0
16:10:24: Reserv2                                       :0x0
16:10:24: Device Size C_SIZE                            :0xedc8
16:10:24: Reserv3                                       :0x0
16:10:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:24: Reserv4                                       :0x0
16:10:24: Write Speed Factor R2W_FACTOR                 :0x2
16:10:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:24: FILE_FORMAT_GRP                               :0x0
16:10:24: COPY flag                                     :0x1
16:10:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:24: File_Format                                   :0x0
16:10:24: CRC                                           :0x0
16:10:24: ####CSD Registe Values####  

16:10:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:24: ProductSerialNumber = 0x23482900
16:10:24: CardMaximumLBA      = 0x3b72400
16:10:24: CardCapacity        = 32G
16:10:24: Is card secure      = 0
16:10:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:24: [DVTCommonLib]###  LogicalWrite called
16:10:26: [ WriteLba(0x1DF6352, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 413 ] 
16:10:26: [DVTCommonLib]###  LogicalWrite Completed 

16:10:26: [DVTCommonLib]###  LogicalRead called
16:10:27: [ ReadLba(0x1DF6352, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 414 ] 
16:10:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 13 times 

16:10:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 415 ] 
16:10:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED990>, <py_sfcl.CommandDataDefinition object at 0x061EDFC0>) , Command count = 416 ] 
16:10:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4060>, <py_sfcl.CommandDataDefinition object at 0x061EDF90>) , Command count = 417 ] 
16:10:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:27: [ SetCardRCA(0x1, 0xD555) , Command count = 418 ] 
16:10:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:27: [ SetBusWidth(0x1) , Command count = 419 ] 
16:10:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:27: ####CSD Registe 2.0 Values####
16:10:27: CSD_STRUCTURE                                 :0x1
16:10:27: Reserv1                                       :0x0
16:10:27: Time Access 1 TAAC                            :0xe
16:10:27: Time Access 2 NSAC*100                        :0x0
16:10:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:27: Card Command Classess CCC                     :0x5b5
16:10:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:27: DSR(driver stage register)  DSR_IMP           :0x0
16:10:27: Reserv2                                       :0x0
16:10:27: Device Size C_SIZE                            :0xedc8
16:10:27: Reserv3                                       :0x0
16:10:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:27: Reserv4                                       :0x0
16:10:27: Write Speed Factor R2W_FACTOR                 :0x2
16:10:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:27: FILE_FORMAT_GRP                               :0x0
16:10:27: COPY flag                                     :0x1
16:10:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:27: File_Format                                   :0x0
16:10:27: CRC                                           :0x0
16:10:27: ####CSD Registe Values####  

16:10:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:27: ProductSerialNumber = 0x23482900
16:10:27: CardMaximumLBA      = 0x3b72400
16:10:27: CardCapacity        = 32G
16:10:27: Is card secure      = 0
16:10:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:27: [DVTCommonLib]###  LogicalWrite called
16:10:29: [ WriteLba(0xD08568, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 420 ] 
16:10:29: [DVTCommonLib]###  LogicalWrite Completed 

16:10:29: [DVTCommonLib]###  LogicalRead called
16:10:31: [ ReadLba(0xD08568, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 421 ] 
16:10:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 14 times 

16:10:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 422 ] 
16:10:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 423 ] 
16:10:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F41B0>, <py_sfcl.CommandDataDefinition object at 0x061F41E0>) , Command count = 424 ] 
16:10:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:31: [ SetCardRCA(0x1, 0xD555) , Command count = 425 ] 
16:10:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:31: [ SetBusWidth(0x1) , Command count = 426 ] 
16:10:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:31: ####CSD Registe 2.0 Values####
16:10:31: CSD_STRUCTURE                                 :0x1
16:10:31: Reserv1                                       :0x0
16:10:31: Time Access 1 TAAC                            :0xe
16:10:31: Time Access 2 NSAC*100                        :0x0
16:10:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:31: Card Command Classess CCC                     :0x5b5
16:10:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:31: DSR(driver stage register)  DSR_IMP           :0x0
16:10:31: Reserv2                                       :0x0
16:10:31: Device Size C_SIZE                            :0xedc8
16:10:31: Reserv3                                       :0x0
16:10:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:31: Reserv4                                       :0x0
16:10:31: Write Speed Factor R2W_FACTOR                 :0x2
16:10:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:31: FILE_FORMAT_GRP                               :0x0
16:10:31: COPY flag                                     :0x1
16:10:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:31: File_Format                                   :0x0
16:10:31: CRC                                           :0x0
16:10:31: ####CSD Registe Values####  

16:10:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:31: ProductSerialNumber = 0x23482900
16:10:31: CardMaximumLBA      = 0x3b72400
16:10:31: CardCapacity        = 32G
16:10:31: Is card secure      = 0
16:10:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:31: [DVTCommonLib]###  LogicalWrite called
16:10:32: [ WriteLba(0x2601553, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 427 ] 
16:10:32: [DVTCommonLib]###  LogicalWrite Completed 

16:10:32: [DVTCommonLib]###  LogicalRead called
16:10:34: [ ReadLba(0x2601553, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 428 ] 
16:10:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 15 times 

16:10:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 429 ] 
16:10:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4180>, <py_sfcl.CommandDataDefinition object at 0x061F46F0>) , Command count = 430 ] 
16:10:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4630>, <py_sfcl.CommandDataDefinition object at 0x061F45D0>) , Command count = 431 ] 
16:10:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:34: [ SetCardRCA(0x1, 0xD555) , Command count = 432 ] 
16:10:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:34: [ SetBusWidth(0x1) , Command count = 433 ] 
16:10:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:34: ####CSD Registe 2.0 Values####
16:10:34: CSD_STRUCTURE                                 :0x1
16:10:34: Reserv1                                       :0x0
16:10:34: Time Access 1 TAAC                            :0xe
16:10:34: Time Access 2 NSAC*100                        :0x0
16:10:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:34: Card Command Classess CCC                     :0x5b5
16:10:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:34: DSR(driver stage register)  DSR_IMP           :0x0
16:10:34: Reserv2                                       :0x0
16:10:34: Device Size C_SIZE                            :0xedc8
16:10:34: Reserv3                                       :0x0
16:10:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:34: Reserv4                                       :0x0
16:10:34: Write Speed Factor R2W_FACTOR                 :0x2
16:10:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:34: FILE_FORMAT_GRP                               :0x0
16:10:34: COPY flag                                     :0x1
16:10:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:34: File_Format                                   :0x0
16:10:34: CRC                                           :0x0
16:10:34: ####CSD Registe Values####  

16:10:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:34: ProductSerialNumber = 0x23482900
16:10:34: CardMaximumLBA      = 0x3b72400
16:10:34: CardCapacity        = 32G
16:10:34: Is card secure      = 0
16:10:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:34: [DVTCommonLib]###  LogicalWrite called
16:10:36: [ WriteLba(0xB1B956, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 434 ] 
16:10:36: [DVTCommonLib]###  LogicalWrite Completed 

16:10:36: [DVTCommonLib]###  LogicalRead called
16:10:37: [ ReadLba(0xB1B956, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 435 ] 
16:10:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 16 times 

16:10:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 436 ] 
16:10:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F42D0>, <py_sfcl.CommandDataDefinition object at 0x061F4840>) , Command count = 437 ] 
16:10:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F48D0>, <py_sfcl.CommandDataDefinition object at 0x061F4900>) , Command count = 438 ] 
16:10:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:37: [ SetCardRCA(0x1, 0xD555) , Command count = 439 ] 
16:10:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:37: [ SetBusWidth(0x1) , Command count = 440 ] 
16:10:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:37: ####CSD Registe 2.0 Values####
16:10:37: CSD_STRUCTURE                                 :0x1
16:10:37: Reserv1                                       :0x0
16:10:37: Time Access 1 TAAC                            :0xe
16:10:37: Time Access 2 NSAC*100                        :0x0
16:10:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:37: Card Command Classess CCC                     :0x5b5
16:10:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:37: DSR(driver stage register)  DSR_IMP           :0x0
16:10:37: Reserv2                                       :0x0
16:10:37: Device Size C_SIZE                            :0xedc8
16:10:37: Reserv3                                       :0x0
16:10:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:37: Reserv4                                       :0x0
16:10:37: Write Speed Factor R2W_FACTOR                 :0x2
16:10:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:37: FILE_FORMAT_GRP                               :0x0
16:10:37: COPY flag                                     :0x1
16:10:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:37: File_Format                                   :0x0
16:10:37: CRC                                           :0x0
16:10:37: ####CSD Registe Values####  

16:10:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:37: ProductSerialNumber = 0x23482900
16:10:37: CardMaximumLBA      = 0x3b72400
16:10:37: CardCapacity        = 32G
16:10:37: Is card secure      = 0
16:10:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:37: [DVTCommonLib]###  LogicalWrite called
16:10:39: [ WriteLba(0x12C6FEA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 441 ] 
16:10:39: [DVTCommonLib]###  LogicalWrite Completed 

16:10:39: [DVTCommonLib]###  LogicalRead called
16:10:41: [ ReadLba(0x12C6FEA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 442 ] 
16:10:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 17 times 

16:10:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 443 ] 
16:10:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F47B0>, <py_sfcl.CommandDataDefinition object at 0x061F4C60>) , Command count = 444 ] 
16:10:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4BA0>, <py_sfcl.CommandDataDefinition object at 0x061F4BD0>) , Command count = 445 ] 
16:10:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:41: [ SetCardRCA(0x1, 0xD555) , Command count = 446 ] 
16:10:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:41: [ SetBusWidth(0x1) , Command count = 447 ] 
16:10:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:41: ####CSD Registe 2.0 Values####
16:10:41: CSD_STRUCTURE                                 :0x1
16:10:41: Reserv1                                       :0x0
16:10:41: Time Access 1 TAAC                            :0xe
16:10:41: Time Access 2 NSAC*100                        :0x0
16:10:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:41: Card Command Classess CCC                     :0x5b5
16:10:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:41: DSR(driver stage register)  DSR_IMP           :0x0
16:10:41: Reserv2                                       :0x0
16:10:41: Device Size C_SIZE                            :0xedc8
16:10:41: Reserv3                                       :0x0
16:10:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:41: Reserv4                                       :0x0
16:10:41: Write Speed Factor R2W_FACTOR                 :0x2
16:10:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:41: FILE_FORMAT_GRP                               :0x0
16:10:41: COPY flag                                     :0x1
16:10:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:41: File_Format                                   :0x0
16:10:41: CRC                                           :0x0
16:10:41: ####CSD Registe Values####  

16:10:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:41: ProductSerialNumber = 0x23482900
16:10:41: CardMaximumLBA      = 0x3b72400
16:10:41: CardCapacity        = 32G
16:10:41: Is card secure      = 0
16:10:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:41: [DVTCommonLib]###  LogicalWrite called
16:10:42: [ WriteLba(0x9326B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 448 ] 
16:10:42: [DVTCommonLib]###  LogicalWrite Completed 

16:10:42: [DVTCommonLib]###  LogicalRead called
16:10:44: [ ReadLba(0x9326B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 449 ] 
16:10:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 18 times 

16:10:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 450 ] 
16:10:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C30>, <py_sfcl.CommandDataDefinition object at 0x061F4D20>) , Command count = 451 ] 
16:10:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E10>, <py_sfcl.CommandDataDefinition object at 0x061F4E40>) , Command count = 452 ] 
16:10:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:44: [ SetCardRCA(0x1, 0xD555) , Command count = 453 ] 
16:10:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:44: [ SetBusWidth(0x1) , Command count = 454 ] 
16:10:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:44: ####CSD Registe 2.0 Values####
16:10:44: CSD_STRUCTURE                                 :0x1
16:10:44: Reserv1                                       :0x0
16:10:44: Time Access 1 TAAC                            :0xe
16:10:44: Time Access 2 NSAC*100                        :0x0
16:10:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:44: Card Command Classess CCC                     :0x5b5
16:10:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:44: DSR(driver stage register)  DSR_IMP           :0x0
16:10:44: Reserv2                                       :0x0
16:10:44: Device Size C_SIZE                            :0xedc8
16:10:44: Reserv3                                       :0x0
16:10:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:44: Reserv4                                       :0x0
16:10:44: Write Speed Factor R2W_FACTOR                 :0x2
16:10:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:44: FILE_FORMAT_GRP                               :0x0
16:10:44: COPY flag                                     :0x1
16:10:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:44: File_Format                                   :0x0
16:10:44: CRC                                           :0x0
16:10:44: ####CSD Registe Values####  

16:10:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:44: ProductSerialNumber = 0x23482900
16:10:44: CardMaximumLBA      = 0x3b72400
16:10:44: CardCapacity        = 32G
16:10:44: Is card secure      = 0
16:10:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:44: [DVTCommonLib]###  LogicalWrite called
16:10:46: [ WriteLba(0x94AEB4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 455 ] 
16:10:46: [DVTCommonLib]###  LogicalWrite Completed 

16:10:46: [DVTCommonLib]###  LogicalRead called
16:10:47: [ ReadLba(0x94AEB4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 456 ] 
16:10:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 19 times 

16:10:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 457 ] 
16:10:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA210>, <py_sfcl.CommandDataDefinition object at 0x061FA240>) , Command count = 458 ] 
16:10:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2A0>, <py_sfcl.CommandDataDefinition object at 0x061FA2D0>) , Command count = 459 ] 
16:10:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:47: [ SetCardRCA(0x1, 0xD555) , Command count = 460 ] 
16:10:47: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:48: [ SetBusWidth(0x1) , Command count = 461 ] 
16:10:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:48: ####CSD Registe 2.0 Values####
16:10:48: CSD_STRUCTURE                                 :0x1
16:10:48: Reserv1                                       :0x0
16:10:48: Time Access 1 TAAC                            :0xe
16:10:48: Time Access 2 NSAC*100                        :0x0
16:10:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:48: Card Command Classess CCC                     :0x5b5
16:10:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:48: DSR(driver stage register)  DSR_IMP           :0x0
16:10:48: Reserv2                                       :0x0
16:10:48: Device Size C_SIZE                            :0xedc8
16:10:48: Reserv3                                       :0x0
16:10:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:48: Reserv4                                       :0x0
16:10:48: Write Speed Factor R2W_FACTOR                 :0x2
16:10:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:48: FILE_FORMAT_GRP                               :0x0
16:10:48: COPY flag                                     :0x1
16:10:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:48: File_Format                                   :0x0
16:10:48: CRC                                           :0x0
16:10:48: ####CSD Registe Values####  

16:10:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:48: ProductSerialNumber = 0x23482900
16:10:48: CardMaximumLBA      = 0x3b72400
16:10:48: CardCapacity        = 32G
16:10:48: Is card secure      = 0
16:10:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:48: [DVTCommonLib]###  LogicalWrite called
16:10:49: [ WriteLba(0x13BF47A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 462 ] 
16:10:49: [DVTCommonLib]###  LogicalWrite Completed 

16:10:49: [DVTCommonLib]###  LogicalRead called
16:10:51: [ ReadLba(0x13BF47A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 463 ] 
16:10:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 20 times 

16:10:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 464 ] 
16:10:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA180>, <py_sfcl.CommandDataDefinition object at 0x061FA600>) , Command count = 465 ] 
16:10:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA690>, <py_sfcl.CommandDataDefinition object at 0x061FA6C0>) , Command count = 466 ] 
16:10:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:51: [ SetCardRCA(0x1, 0xD555) , Command count = 467 ] 
16:10:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:51: [ SetBusWidth(0x1) , Command count = 468 ] 
16:10:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:51: ####CSD Registe 2.0 Values####
16:10:51: CSD_STRUCTURE                                 :0x1
16:10:51: Reserv1                                       :0x0
16:10:51: Time Access 1 TAAC                            :0xe
16:10:51: Time Access 2 NSAC*100                        :0x0
16:10:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:51: Card Command Classess CCC                     :0x5b5
16:10:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:51: DSR(driver stage register)  DSR_IMP           :0x0
16:10:51: Reserv2                                       :0x0
16:10:51: Device Size C_SIZE                            :0xedc8
16:10:51: Reserv3                                       :0x0
16:10:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:51: Reserv4                                       :0x0
16:10:51: Write Speed Factor R2W_FACTOR                 :0x2
16:10:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:51: FILE_FORMAT_GRP                               :0x0
16:10:51: COPY flag                                     :0x1
16:10:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:51: File_Format                                   :0x0
16:10:51: CRC                                           :0x0
16:10:51: ####CSD Registe Values####  

16:10:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:51: ProductSerialNumber = 0x23482900
16:10:51: CardMaximumLBA      = 0x3b72400
16:10:51: CardCapacity        = 32G
16:10:51: Is card secure      = 0
16:10:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:51: [DVTCommonLib]###  LogicalWrite called
16:10:53: [ WriteLba(0x334B45E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 469 ] 
16:10:53: [DVTCommonLib]###  LogicalWrite Completed 

16:10:53: [DVTCommonLib]###  LogicalRead called
16:10:54: [ ReadLba(0x334B45E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 470 ] 
16:10:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 21 times 

16:10:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 471 ] 
16:10:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA570>, <py_sfcl.CommandDataDefinition object at 0x061FA9F0>) , Command count = 472 ] 
16:10:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAB10>, <py_sfcl.CommandDataDefinition object at 0x061FAAE0>) , Command count = 473 ] 
16:10:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:54: [ SetCardRCA(0x1, 0xD555) , Command count = 474 ] 
16:10:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:54: [ SetBusWidth(0x1) , Command count = 475 ] 
16:10:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:54: ####CSD Registe 2.0 Values####
16:10:54: CSD_STRUCTURE                                 :0x1
16:10:54: Reserv1                                       :0x0
16:10:54: Time Access 1 TAAC                            :0xe
16:10:54: Time Access 2 NSAC*100                        :0x0
16:10:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:54: Card Command Classess CCC                     :0x5b5
16:10:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:54: DSR(driver stage register)  DSR_IMP           :0x0
16:10:54: Reserv2                                       :0x0
16:10:54: Device Size C_SIZE                            :0xedc8
16:10:54: Reserv3                                       :0x0
16:10:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:54: Reserv4                                       :0x0
16:10:54: Write Speed Factor R2W_FACTOR                 :0x2
16:10:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:54: FILE_FORMAT_GRP                               :0x0
16:10:54: COPY flag                                     :0x1
16:10:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:54: File_Format                                   :0x0
16:10:54: CRC                                           :0x0
16:10:54: ####CSD Registe Values####  

16:10:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:54: ProductSerialNumber = 0x23482900
16:10:54: CardMaximumLBA      = 0x3b72400
16:10:54: CardCapacity        = 32G
16:10:54: Is card secure      = 0
16:10:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:54: [DVTCommonLib]###  LogicalWrite called
16:10:56: [ WriteLba(0xBBC036, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 476 ] 
16:10:56: [DVTCommonLib]###  LogicalWrite Completed 

16:10:56: [DVTCommonLib]###  LogicalRead called
16:10:57: [ ReadLba(0xBBC036, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 477 ] 
16:10:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:10:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:10:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 22 times 

16:10:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:10:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:10:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 478 ] 
16:10:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:10:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:10:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:10:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:10:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:10:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA960>, <py_sfcl.CommandDataDefinition object at 0x061FABA0>) , Command count = 479 ] 
16:10:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:10:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAAB0>, <py_sfcl.CommandDataDefinition object at 0x061FA900>) , Command count = 480 ] 
16:10:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:10:58: [ SetCardRCA(0x1, 0xD555) , Command count = 481 ] 
16:10:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:10:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:10:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:10:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:10:58: [ SetBusWidth(0x1) , Command count = 482 ] 
16:10:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:10:58: ####CSD Registe 2.0 Values####
16:10:58: CSD_STRUCTURE                                 :0x1
16:10:58: Reserv1                                       :0x0
16:10:58: Time Access 1 TAAC                            :0xe
16:10:58: Time Access 2 NSAC*100                        :0x0
16:10:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:10:58: Card Command Classess CCC                     :0x5b5
16:10:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:10:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:10:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:10:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:10:58: DSR(driver stage register)  DSR_IMP           :0x0
16:10:58: Reserv2                                       :0x0
16:10:58: Device Size C_SIZE                            :0xedc8
16:10:58: Reserv3                                       :0x0
16:10:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:10:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:10:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:10:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:10:58: Reserv4                                       :0x0
16:10:58: Write Speed Factor R2W_FACTOR                 :0x2
16:10:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:10:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:10:58: FILE_FORMAT_GRP                               :0x0
16:10:58: COPY flag                                     :0x1
16:10:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:10:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:10:58: File_Format                                   :0x0
16:10:58: CRC                                           :0x0
16:10:58: ####CSD Registe Values####  

16:10:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:10:58: ProductSerialNumber = 0x23482900
16:10:58: CardMaximumLBA      = 0x3b72400
16:10:58: CardCapacity        = 32G
16:10:58: Is card secure      = 0
16:10:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:10:58: [DVTCommonLib]###  LogicalWrite called
16:10:59: [ WriteLba(0x21AB333, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 483 ] 
16:10:59: [DVTCommonLib]###  LogicalWrite Completed 

16:10:59: [DVTCommonLib]###  LogicalRead called
16:11:01: [ ReadLba(0x21AB333, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 484 ] 
16:11:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 23 times 

16:11:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 485 ] 
16:11:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FAEA0>) , Command count = 486 ] 
16:11:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE060>, <py_sfcl.CommandDataDefinition object at 0x061FE090>) , Command count = 487 ] 
16:11:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:01: [ SetCardRCA(0x1, 0xD555) , Command count = 488 ] 
16:11:01: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:01: [ SetBusWidth(0x1) , Command count = 489 ] 
16:11:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:01: ####CSD Registe 2.0 Values####
16:11:01: CSD_STRUCTURE                                 :0x1
16:11:01: Reserv1                                       :0x0
16:11:01: Time Access 1 TAAC                            :0xe
16:11:01: Time Access 2 NSAC*100                        :0x0
16:11:01: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:01: Card Command Classess CCC                     :0x5b5
16:11:01: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:01: DSR(driver stage register)  DSR_IMP           :0x0
16:11:01: Reserv2                                       :0x0
16:11:01: Device Size C_SIZE                            :0xedc8
16:11:01: Reserv3                                       :0x0
16:11:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:01: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:01: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:01: Reserv4                                       :0x0
16:11:01: Write Speed Factor R2W_FACTOR                 :0x2
16:11:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:01: FILE_FORMAT_GRP                               :0x0
16:11:01: COPY flag                                     :0x1
16:11:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:01: File_Format                                   :0x0
16:11:01: CRC                                           :0x0
16:11:01: ####CSD Registe Values####  

16:11:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:01: ProductSerialNumber = 0x23482900
16:11:01: CardMaximumLBA      = 0x3b72400
16:11:01: CardCapacity        = 32G
16:11:01: Is card secure      = 0
16:11:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:01: [DVTCommonLib]###  LogicalWrite called
16:11:03: [ WriteLba(0x3114DA1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 490 ] 
16:11:03: [DVTCommonLib]###  LogicalWrite Completed 

16:11:03: [DVTCommonLib]###  LogicalRead called
16:11:04: [ ReadLba(0x3114DA1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 491 ] 
16:11:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 24 times 

16:11:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 492 ] 
16:11:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE030>, <py_sfcl.CommandDataDefinition object at 0x061FE3C0>) , Command count = 493 ] 
16:11:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE450>, <py_sfcl.CommandDataDefinition object at 0x061FE480>) , Command count = 494 ] 
16:11:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:04: [ SetCardRCA(0x1, 0xD555) , Command count = 495 ] 
16:11:04: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:04: [ SetBusWidth(0x1) , Command count = 496 ] 
16:11:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:04: ####CSD Registe 2.0 Values####
16:11:04: CSD_STRUCTURE                                 :0x1
16:11:04: Reserv1                                       :0x0
16:11:04: Time Access 1 TAAC                            :0xe
16:11:04: Time Access 2 NSAC*100                        :0x0
16:11:04: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:04: Card Command Classess CCC                     :0x5b5
16:11:04: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:04: DSR(driver stage register)  DSR_IMP           :0x0
16:11:04: Reserv2                                       :0x0
16:11:04: Device Size C_SIZE                            :0xedc8
16:11:04: Reserv3                                       :0x0
16:11:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:04: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:04: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:04: Reserv4                                       :0x0
16:11:04: Write Speed Factor R2W_FACTOR                 :0x2
16:11:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:04: FILE_FORMAT_GRP                               :0x0
16:11:04: COPY flag                                     :0x1
16:11:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:04: File_Format                                   :0x0
16:11:04: CRC                                           :0x0
16:11:04: ####CSD Registe Values####  

16:11:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:04: ProductSerialNumber = 0x23482900
16:11:04: CardMaximumLBA      = 0x3b72400
16:11:04: CardCapacity        = 32G
16:11:04: Is card secure      = 0
16:11:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:04: [DVTCommonLib]###  LogicalWrite called
16:11:06: [ WriteLba(0x16C7C6B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 497 ] 
16:11:06: [DVTCommonLib]###  LogicalWrite Completed 

16:11:06: [DVTCommonLib]###  LogicalRead called
16:11:08: [ ReadLba(0x16C7C6B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 498 ] 
16:11:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 25 times 

16:11:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 499 ] 
16:11:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE330>, <py_sfcl.CommandDataDefinition object at 0x061FE7B0>) , Command count = 500 ] 
16:11:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE840>, <py_sfcl.CommandDataDefinition object at 0x061FE870>) , Command count = 501 ] 
16:11:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:08: [ SetCardRCA(0x1, 0xD555) , Command count = 502 ] 
16:11:08: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:08: [ SetBusWidth(0x1) , Command count = 503 ] 
16:11:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:08: ####CSD Registe 2.0 Values####
16:11:08: CSD_STRUCTURE                                 :0x1
16:11:08: Reserv1                                       :0x0
16:11:08: Time Access 1 TAAC                            :0xe
16:11:08: Time Access 2 NSAC*100                        :0x0
16:11:08: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:08: Card Command Classess CCC                     :0x5b5
16:11:08: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:08: DSR(driver stage register)  DSR_IMP           :0x0
16:11:08: Reserv2                                       :0x0
16:11:08: Device Size C_SIZE                            :0xedc8
16:11:08: Reserv3                                       :0x0
16:11:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:08: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:08: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:08: Reserv4                                       :0x0
16:11:08: Write Speed Factor R2W_FACTOR                 :0x2
16:11:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:08: FILE_FORMAT_GRP                               :0x0
16:11:08: COPY flag                                     :0x1
16:11:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:08: File_Format                                   :0x0
16:11:08: CRC                                           :0x0
16:11:08: ####CSD Registe Values####  

16:11:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:08: ProductSerialNumber = 0x23482900
16:11:08: CardMaximumLBA      = 0x3b72400
16:11:08: CardCapacity        = 32G
16:11:08: Is card secure      = 0
16:11:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:08: [DVTCommonLib]###  LogicalWrite called
16:11:09: [ WriteLba(0x39B02D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 504 ] 
16:11:09: [DVTCommonLib]###  LogicalWrite Completed 

16:11:09: [DVTCommonLib]###  LogicalRead called
16:11:11: [ ReadLba(0x39B02D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 505 ] 
16:11:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 26 times 

16:11:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 506 ] 
16:11:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FE720>) , Command count = 507 ] 
16:11:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0541D7B0>, <py_sfcl.CommandDataDefinition object at 0x061FEAE0>) , Command count = 508 ] 
16:11:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:11: [ SetCardRCA(0x1, 0xD555) , Command count = 509 ] 
16:11:11: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:11: [ SetBusWidth(0x1) , Command count = 510 ] 
16:11:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:11: ####CSD Registe 2.0 Values####
16:11:11: CSD_STRUCTURE                                 :0x1
16:11:11: Reserv1                                       :0x0
16:11:11: Time Access 1 TAAC                            :0xe
16:11:11: Time Access 2 NSAC*100                        :0x0
16:11:11: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:11: Card Command Classess CCC                     :0x5b5
16:11:11: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:11: DSR(driver stage register)  DSR_IMP           :0x0
16:11:11: Reserv2                                       :0x0
16:11:11: Device Size C_SIZE                            :0xedc8
16:11:11: Reserv3                                       :0x0
16:11:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:11: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:11: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:11: Reserv4                                       :0x0
16:11:11: Write Speed Factor R2W_FACTOR                 :0x2
16:11:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:11: FILE_FORMAT_GRP                               :0x0
16:11:11: COPY flag                                     :0x1
16:11:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:11: File_Format                                   :0x0
16:11:11: CRC                                           :0x0
16:11:11: ####CSD Registe Values####  

16:11:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:11: ProductSerialNumber = 0x23482900
16:11:11: CardMaximumLBA      = 0x3b72400
16:11:11: CardCapacity        = 32G
16:11:11: Is card secure      = 0
16:11:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:11: [DVTCommonLib]###  LogicalWrite called
16:11:13: [ WriteLba(0x27858C0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 511 ] 
16:11:13: [DVTCommonLib]###  LogicalWrite Completed 

16:11:13: [DVTCommonLib]###  LogicalRead called
16:11:14: [ ReadLba(0x27858C0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 512 ] 
16:11:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 27 times 

16:11:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 513 ] 
16:11:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FEA20>) , Command count = 514 ] 
16:11:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE990>, <py_sfcl.CommandDataDefinition object at 0x061FE900>) , Command count = 515 ] 
16:11:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:14: [ SetCardRCA(0x1, 0xD555) , Command count = 516 ] 
16:11:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:14: [ SetBusWidth(0x1) , Command count = 517 ] 
16:11:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:14: ####CSD Registe 2.0 Values####
16:11:14: CSD_STRUCTURE                                 :0x1
16:11:14: Reserv1                                       :0x0
16:11:14: Time Access 1 TAAC                            :0xe
16:11:14: Time Access 2 NSAC*100                        :0x0
16:11:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:14: Card Command Classess CCC                     :0x5b5
16:11:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:14: DSR(driver stage register)  DSR_IMP           :0x0
16:11:14: Reserv2                                       :0x0
16:11:14: Device Size C_SIZE                            :0xedc8
16:11:14: Reserv3                                       :0x0
16:11:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:14: Reserv4                                       :0x0
16:11:14: Write Speed Factor R2W_FACTOR                 :0x2
16:11:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:14: FILE_FORMAT_GRP                               :0x0
16:11:14: COPY flag                                     :0x1
16:11:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:14: File_Format                                   :0x0
16:11:14: CRC                                           :0x0
16:11:14: ####CSD Registe Values####  

16:11:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:14: ProductSerialNumber = 0x23482900
16:11:14: CardMaximumLBA      = 0x3b72400
16:11:14: CardCapacity        = 32G
16:11:14: Is card secure      = 0
16:11:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:14: [DVTCommonLib]###  LogicalWrite called
16:11:16: [ WriteLba(0x2A9FA3F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 518 ] 
16:11:16: [DVTCommonLib]###  LogicalWrite Completed 

16:11:16: [DVTCommonLib]###  LogicalRead called
16:11:18: [ ReadLba(0x2A9FA3F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 519 ] 
16:11:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 28 times 

16:11:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 520 ] 
16:11:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EE70>, <py_sfcl.CommandDataDefinition object at 0x061FE9F0>) , Command count = 521 ] 
16:11:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EF30>, <py_sfcl.CommandDataDefinition object at 0x061FE810>) , Command count = 522 ] 
16:11:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:18: [ SetCardRCA(0x1, 0xD555) , Command count = 523 ] 
16:11:18: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:18: [ SetBusWidth(0x1) , Command count = 524 ] 
16:11:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:18: ####CSD Registe 2.0 Values####
16:11:18: CSD_STRUCTURE                                 :0x1
16:11:18: Reserv1                                       :0x0
16:11:18: Time Access 1 TAAC                            :0xe
16:11:18: Time Access 2 NSAC*100                        :0x0
16:11:18: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:18: Card Command Classess CCC                     :0x5b5
16:11:18: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:18: DSR(driver stage register)  DSR_IMP           :0x0
16:11:18: Reserv2                                       :0x0
16:11:18: Device Size C_SIZE                            :0xedc8
16:11:18: Reserv3                                       :0x0
16:11:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:18: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:18: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:18: Reserv4                                       :0x0
16:11:18: Write Speed Factor R2W_FACTOR                 :0x2
16:11:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:18: FILE_FORMAT_GRP                               :0x0
16:11:18: COPY flag                                     :0x1
16:11:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:18: File_Format                                   :0x0
16:11:18: CRC                                           :0x0
16:11:18: ####CSD Registe Values####  

16:11:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:18: ProductSerialNumber = 0x23482900
16:11:18: CardMaximumLBA      = 0x3b72400
16:11:18: CardCapacity        = 32G
16:11:18: Is card secure      = 0
16:11:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:18: [DVTCommonLib]###  LogicalWrite called
16:11:19: [ WriteLba(0x2444244, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 525 ] 
16:11:19: [DVTCommonLib]###  LogicalWrite Completed 

16:11:19: [DVTCommonLib]###  LogicalRead called
16:11:21: [ ReadLba(0x2444244, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 526 ] 
16:11:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 29 times 

16:11:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 527 ] 
16:11:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC30>, <py_sfcl.CommandDataDefinition object at 0x0545A900>) , Command count = 528 ] 
16:11:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460C30>, <py_sfcl.CommandDataDefinition object at 0x061FE5A0>) , Command count = 529 ] 
16:11:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:21: [ SetCardRCA(0x1, 0xD555) , Command count = 530 ] 
16:11:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:21: [ SetBusWidth(0x1) , Command count = 531 ] 
16:11:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:21: ####CSD Registe 2.0 Values####
16:11:21: CSD_STRUCTURE                                 :0x1
16:11:21: Reserv1                                       :0x0
16:11:21: Time Access 1 TAAC                            :0xe
16:11:21: Time Access 2 NSAC*100                        :0x0
16:11:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:21: Card Command Classess CCC                     :0x5b5
16:11:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:21: DSR(driver stage register)  DSR_IMP           :0x0
16:11:21: Reserv2                                       :0x0
16:11:21: Device Size C_SIZE                            :0xedc8
16:11:21: Reserv3                                       :0x0
16:11:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:21: Reserv4                                       :0x0
16:11:21: Write Speed Factor R2W_FACTOR                 :0x2
16:11:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:21: FILE_FORMAT_GRP                               :0x0
16:11:21: COPY flag                                     :0x1
16:11:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:21: File_Format                                   :0x0
16:11:21: CRC                                           :0x0
16:11:21: ####CSD Registe Values####  

16:11:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:21: ProductSerialNumber = 0x23482900
16:11:21: CardMaximumLBA      = 0x3b72400
16:11:21: CardCapacity        = 32G
16:11:21: Is card secure      = 0
16:11:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:21: [DVTCommonLib]###  LogicalWrite called
16:11:23: [ WriteLba(0x37B2672, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 532 ] 
16:11:23: [DVTCommonLib]###  LogicalWrite Completed 

16:11:23: [DVTCommonLib]###  LogicalRead called
16:11:24: [ ReadLba(0x37B2672, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 533 ] 
16:11:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 30 times 

16:11:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 534 ] 
16:11:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460990>, <py_sfcl.CommandDataDefinition object at 0x05460F00>) , Command count = 535 ] 
16:11:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F30>, <py_sfcl.CommandDataDefinition object at 0x061FE420>) , Command count = 536 ] 
16:11:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:25: [ SetCardRCA(0x1, 0xD555) , Command count = 537 ] 
16:11:25: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:25: [ SetBusWidth(0x1) , Command count = 538 ] 
16:11:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:25: ####CSD Registe 2.0 Values####
16:11:25: CSD_STRUCTURE                                 :0x1
16:11:25: Reserv1                                       :0x0
16:11:25: Time Access 1 TAAC                            :0xe
16:11:25: Time Access 2 NSAC*100                        :0x0
16:11:25: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:25: Card Command Classess CCC                     :0x5b5
16:11:25: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:25: DSR(driver stage register)  DSR_IMP           :0x0
16:11:25: Reserv2                                       :0x0
16:11:25: Device Size C_SIZE                            :0xedc8
16:11:25: Reserv3                                       :0x0
16:11:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:25: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:25: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:25: Reserv4                                       :0x0
16:11:25: Write Speed Factor R2W_FACTOR                 :0x2
16:11:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:25: FILE_FORMAT_GRP                               :0x0
16:11:25: COPY flag                                     :0x1
16:11:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:25: File_Format                                   :0x0
16:11:25: CRC                                           :0x0
16:11:25: ####CSD Registe Values####  

16:11:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:25: ProductSerialNumber = 0x23482900
16:11:25: CardMaximumLBA      = 0x3b72400
16:11:25: CardCapacity        = 32G
16:11:25: Is card secure      = 0
16:11:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:25: [DVTCommonLib]###  LogicalWrite called
16:11:26: [ WriteLba(0x2A6BD11, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 539 ] 
16:11:26: [DVTCommonLib]###  LogicalWrite Completed 

16:11:26: [DVTCommonLib]###  LogicalRead called
16:11:28: [ ReadLba(0x2A6BD11, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 540 ] 
16:11:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 31 times 

16:11:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 541 ] 
16:11:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460E40>, <py_sfcl.CommandDataDefinition object at 0x05460FC0>) , Command count = 542 ] 
16:11:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C22A0>, <py_sfcl.CommandDataDefinition object at 0x061FAD80>) , Command count = 543 ] 
16:11:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:28: [ SetCardRCA(0x1, 0xD555) , Command count = 544 ] 
16:11:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:28: [ SetBusWidth(0x1) , Command count = 545 ] 
16:11:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:28: ####CSD Registe 2.0 Values####
16:11:28: CSD_STRUCTURE                                 :0x1
16:11:28: Reserv1                                       :0x0
16:11:28: Time Access 1 TAAC                            :0xe
16:11:28: Time Access 2 NSAC*100                        :0x0
16:11:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:28: Card Command Classess CCC                     :0x5b5
16:11:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:28: DSR(driver stage register)  DSR_IMP           :0x0
16:11:28: Reserv2                                       :0x0
16:11:28: Device Size C_SIZE                            :0xedc8
16:11:28: Reserv3                                       :0x0
16:11:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:28: Reserv4                                       :0x0
16:11:28: Write Speed Factor R2W_FACTOR                 :0x2
16:11:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:28: FILE_FORMAT_GRP                               :0x0
16:11:28: COPY flag                                     :0x1
16:11:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:28: File_Format                                   :0x0
16:11:28: CRC                                           :0x0
16:11:28: ####CSD Registe Values####  

16:11:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:28: ProductSerialNumber = 0x23482900
16:11:28: CardMaximumLBA      = 0x3b72400
16:11:28: CardCapacity        = 32G
16:11:28: Is card secure      = 0
16:11:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:28: [DVTCommonLib]###  LogicalWrite called
16:11:30: [ WriteLba(0x15B8BDF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 546 ] 
16:11:30: [DVTCommonLib]###  LogicalWrite Completed 

16:11:30: [DVTCommonLib]###  LogicalRead called
16:11:31: [ ReadLba(0x15B8BDF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 547 ] 
16:11:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 32 times 

16:11:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 548 ] 
16:11:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE1B0>, <py_sfcl.CommandDataDefinition object at 0x0612CE10>) , Command count = 549 ] 
16:11:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x061FAE40>) , Command count = 550 ] 
16:11:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:31: [ SetCardRCA(0x1, 0xD555) , Command count = 551 ] 
16:11:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:31: [ SetBusWidth(0x1) , Command count = 552 ] 
16:11:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:31: ####CSD Registe 2.0 Values####
16:11:31: CSD_STRUCTURE                                 :0x1
16:11:31: Reserv1                                       :0x0
16:11:31: Time Access 1 TAAC                            :0xe
16:11:31: Time Access 2 NSAC*100                        :0x0
16:11:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:31: Card Command Classess CCC                     :0x5b5
16:11:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:31: DSR(driver stage register)  DSR_IMP           :0x0
16:11:31: Reserv2                                       :0x0
16:11:31: Device Size C_SIZE                            :0xedc8
16:11:31: Reserv3                                       :0x0
16:11:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:31: Reserv4                                       :0x0
16:11:31: Write Speed Factor R2W_FACTOR                 :0x2
16:11:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:31: FILE_FORMAT_GRP                               :0x0
16:11:31: COPY flag                                     :0x1
16:11:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:31: File_Format                                   :0x0
16:11:31: CRC                                           :0x0
16:11:31: ####CSD Registe Values####  

16:11:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:31: ProductSerialNumber = 0x23482900
16:11:31: CardMaximumLBA      = 0x3b72400
16:11:31: CardCapacity        = 32G
16:11:31: Is card secure      = 0
16:11:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:31: [DVTCommonLib]###  LogicalWrite called
16:11:33: [ WriteLba(0x8CCB63, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 553 ] 
16:11:33: [DVTCommonLib]###  LogicalWrite Completed 

16:11:33: [DVTCommonLib]###  LogicalRead called
16:11:35: [ ReadLba(0x8CCB63, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 554 ] 
16:11:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 33 times 

16:11:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 555 ] 
16:11:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CF00>, <py_sfcl.CommandDataDefinition object at 0x061FADE0>) , Command count = 556 ] 
16:11:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAC30>, <py_sfcl.CommandDataDefinition object at 0x061FAD50>) , Command count = 557 ] 
16:11:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:35: [ SetCardRCA(0x1, 0xD555) , Command count = 558 ] 
16:11:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:35: [ SetBusWidth(0x1) , Command count = 559 ] 
16:11:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:35: ####CSD Registe 2.0 Values####
16:11:35: CSD_STRUCTURE                                 :0x1
16:11:35: Reserv1                                       :0x0
16:11:35: Time Access 1 TAAC                            :0xe
16:11:35: Time Access 2 NSAC*100                        :0x0
16:11:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:35: Card Command Classess CCC                     :0x5b5
16:11:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:35: DSR(driver stage register)  DSR_IMP           :0x0
16:11:35: Reserv2                                       :0x0
16:11:35: Device Size C_SIZE                            :0xedc8
16:11:35: Reserv3                                       :0x0
16:11:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:35: Reserv4                                       :0x0
16:11:35: Write Speed Factor R2W_FACTOR                 :0x2
16:11:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:35: FILE_FORMAT_GRP                               :0x0
16:11:35: COPY flag                                     :0x1
16:11:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:35: File_Format                                   :0x0
16:11:35: CRC                                           :0x0
16:11:35: ####CSD Registe Values####  

16:11:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:35: ProductSerialNumber = 0x23482900
16:11:35: CardMaximumLBA      = 0x3b72400
16:11:35: CardCapacity        = 32G
16:11:35: Is card secure      = 0
16:11:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:35: [DVTCommonLib]###  LogicalWrite called
16:11:36: [ WriteLba(0x22CADA4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 560 ] 
16:11:36: [DVTCommonLib]###  LogicalWrite Completed 

16:11:36: [DVTCommonLib]###  LogicalRead called
16:11:38: [ ReadLba(0x22CADA4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 561 ] 
16:11:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 34 times 

16:11:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 562 ] 
16:11:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2630>, <py_sfcl.CommandDataDefinition object at 0x061FAF60>) , Command count = 563 ] 
16:11:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA510>, <py_sfcl.CommandDataDefinition object at 0x061FA5D0>) , Command count = 564 ] 
16:11:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:38: [ SetCardRCA(0x1, 0xD555) , Command count = 565 ] 
16:11:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:38: [ SetBusWidth(0x1) , Command count = 566 ] 
16:11:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:38: ####CSD Registe 2.0 Values####
16:11:38: CSD_STRUCTURE                                 :0x1
16:11:38: Reserv1                                       :0x0
16:11:38: Time Access 1 TAAC                            :0xe
16:11:38: Time Access 2 NSAC*100                        :0x0
16:11:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:38: Card Command Classess CCC                     :0x5b5
16:11:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:38: DSR(driver stage register)  DSR_IMP           :0x0
16:11:38: Reserv2                                       :0x0
16:11:38: Device Size C_SIZE                            :0xedc8
16:11:38: Reserv3                                       :0x0
16:11:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:38: Reserv4                                       :0x0
16:11:38: Write Speed Factor R2W_FACTOR                 :0x2
16:11:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:38: FILE_FORMAT_GRP                               :0x0
16:11:38: COPY flag                                     :0x1
16:11:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:38: File_Format                                   :0x0
16:11:38: CRC                                           :0x0
16:11:38: ####CSD Registe Values####  

16:11:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:38: ProductSerialNumber = 0x23482900
16:11:38: CardMaximumLBA      = 0x3b72400
16:11:38: CardCapacity        = 32G
16:11:38: Is card secure      = 0
16:11:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:38: [DVTCommonLib]###  LogicalWrite called
16:11:40: [ WriteLba(0x11B602F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 567 ] 
16:11:40: [DVTCommonLib]###  LogicalWrite Completed 

16:11:40: [DVTCommonLib]###  LogicalRead called
16:11:41: [ ReadLba(0x11B602F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 568 ] 
16:11:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 35 times 

16:11:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 569 ] 
16:11:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460DB0>, <py_sfcl.CommandDataDefinition object at 0x061FA750>) , Command count = 570 ] 
16:11:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA150>, <py_sfcl.CommandDataDefinition object at 0x061F4390>) , Command count = 571 ] 
16:11:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:41: [ SetCardRCA(0x1, 0xD555) , Command count = 572 ] 
16:11:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:41: [ SetBusWidth(0x1) , Command count = 573 ] 
16:11:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:41: ####CSD Registe 2.0 Values####
16:11:41: CSD_STRUCTURE                                 :0x1
16:11:41: Reserv1                                       :0x0
16:11:41: Time Access 1 TAAC                            :0xe
16:11:41: Time Access 2 NSAC*100                        :0x0
16:11:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:41: Card Command Classess CCC                     :0x5b5
16:11:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:41: DSR(driver stage register)  DSR_IMP           :0x0
16:11:41: Reserv2                                       :0x0
16:11:41: Device Size C_SIZE                            :0xedc8
16:11:41: Reserv3                                       :0x0
16:11:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:41: Reserv4                                       :0x0
16:11:41: Write Speed Factor R2W_FACTOR                 :0x2
16:11:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:41: FILE_FORMAT_GRP                               :0x0
16:11:41: COPY flag                                     :0x1
16:11:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:41: File_Format                                   :0x0
16:11:41: CRC                                           :0x0
16:11:41: ####CSD Registe Values####  

16:11:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:41: ProductSerialNumber = 0x23482900
16:11:41: CardMaximumLBA      = 0x3b72400
16:11:41: CardCapacity        = 32G
16:11:41: Is card secure      = 0
16:11:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:41: [DVTCommonLib]###  LogicalWrite called
16:11:43: [ WriteLba(0x2BDC352, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 574 ] 
16:11:43: [DVTCommonLib]###  LogicalWrite Completed 

16:11:43: [DVTCommonLib]###  LogicalRead called
16:11:45: [ ReadLba(0x2BDC352, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 575 ] 
16:11:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 36 times 

16:11:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 576 ] 
16:11:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA540>, <py_sfcl.CommandDataDefinition object at 0x061F4FC0>) , Command count = 577 ] 
16:11:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4F60>, <py_sfcl.CommandDataDefinition object at 0x061F4ED0>) , Command count = 578 ] 
16:11:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:45: [ SetCardRCA(0x1, 0xD555) , Command count = 579 ] 
16:11:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:45: [ SetBusWidth(0x1) , Command count = 580 ] 
16:11:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:45: ####CSD Registe 2.0 Values####
16:11:45: CSD_STRUCTURE                                 :0x1
16:11:45: Reserv1                                       :0x0
16:11:45: Time Access 1 TAAC                            :0xe
16:11:45: Time Access 2 NSAC*100                        :0x0
16:11:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:45: Card Command Classess CCC                     :0x5b5
16:11:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:45: DSR(driver stage register)  DSR_IMP           :0x0
16:11:45: Reserv2                                       :0x0
16:11:45: Device Size C_SIZE                            :0xedc8
16:11:45: Reserv3                                       :0x0
16:11:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:45: Reserv4                                       :0x0
16:11:45: Write Speed Factor R2W_FACTOR                 :0x2
16:11:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:45: FILE_FORMAT_GRP                               :0x0
16:11:45: COPY flag                                     :0x1
16:11:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:45: File_Format                                   :0x0
16:11:45: CRC                                           :0x0
16:11:45: ####CSD Registe Values####  

16:11:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:45: ProductSerialNumber = 0x23482900
16:11:45: CardMaximumLBA      = 0x3b72400
16:11:45: CardCapacity        = 32G
16:11:45: Is card secure      = 0
16:11:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:45: [DVTCommonLib]###  LogicalWrite called
16:11:46: [ WriteLba(0x143E839, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 581 ] 
16:11:46: [DVTCommonLib]###  LogicalWrite Completed 

16:11:46: [DVTCommonLib]###  LogicalRead called
16:11:48: [ ReadLba(0x143E839, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 582 ] 
16:11:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 37 times 

16:11:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 583 ] 
16:11:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E40>, <py_sfcl.CommandDataDefinition object at 0x061F4A50>) , Command count = 584 ] 
16:11:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4750>, <py_sfcl.CommandDataDefinition object at 0x061F4810>) , Command count = 585 ] 
16:11:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:48: [ SetCardRCA(0x1, 0xD555) , Command count = 586 ] 
16:11:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:48: [ SetBusWidth(0x1) , Command count = 587 ] 
16:11:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:48: ####CSD Registe 2.0 Values####
16:11:48: CSD_STRUCTURE                                 :0x1
16:11:48: Reserv1                                       :0x0
16:11:48: Time Access 1 TAAC                            :0xe
16:11:48: Time Access 2 NSAC*100                        :0x0
16:11:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:48: Card Command Classess CCC                     :0x5b5
16:11:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:48: DSR(driver stage register)  DSR_IMP           :0x0
16:11:48: Reserv2                                       :0x0
16:11:48: Device Size C_SIZE                            :0xedc8
16:11:48: Reserv3                                       :0x0
16:11:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:48: Reserv4                                       :0x0
16:11:48: Write Speed Factor R2W_FACTOR                 :0x2
16:11:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:48: FILE_FORMAT_GRP                               :0x0
16:11:48: COPY flag                                     :0x1
16:11:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:48: File_Format                                   :0x0
16:11:48: CRC                                           :0x0
16:11:48: ####CSD Registe Values####  

16:11:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:48: ProductSerialNumber = 0x23482900
16:11:48: CardMaximumLBA      = 0x3b72400
16:11:48: CardCapacity        = 32G
16:11:48: Is card secure      = 0
16:11:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:48: [DVTCommonLib]###  LogicalWrite called
16:11:50: [ WriteLba(0x12E0F7B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 588 ] 
16:11:50: [DVTCommonLib]###  LogicalWrite Completed 

16:11:50: [DVTCommonLib]###  LogicalRead called
16:11:51: [ ReadLba(0x12E0F7B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 589 ] 
16:11:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 38 times 

16:11:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 590 ] 
16:11:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4A20>, <py_sfcl.CommandDataDefinition object at 0x061EDC00>) , Command count = 591 ] 
16:11:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA80>, <py_sfcl.CommandDataDefinition object at 0x061ED690>) , Command count = 592 ] 
16:11:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:51: [ SetCardRCA(0x1, 0xD555) , Command count = 593 ] 
16:11:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:51: [ SetBusWidth(0x1) , Command count = 594 ] 
16:11:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:51: ####CSD Registe 2.0 Values####
16:11:51: CSD_STRUCTURE                                 :0x1
16:11:51: Reserv1                                       :0x0
16:11:51: Time Access 1 TAAC                            :0xe
16:11:51: Time Access 2 NSAC*100                        :0x0
16:11:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:51: Card Command Classess CCC                     :0x5b5
16:11:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:51: DSR(driver stage register)  DSR_IMP           :0x0
16:11:51: Reserv2                                       :0x0
16:11:51: Device Size C_SIZE                            :0xedc8
16:11:51: Reserv3                                       :0x0
16:11:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:51: Reserv4                                       :0x0
16:11:51: Write Speed Factor R2W_FACTOR                 :0x2
16:11:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:51: FILE_FORMAT_GRP                               :0x0
16:11:51: COPY flag                                     :0x1
16:11:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:51: File_Format                                   :0x0
16:11:51: CRC                                           :0x0
16:11:51: ####CSD Registe Values####  

16:11:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:52: ProductSerialNumber = 0x23482900
16:11:52: CardMaximumLBA      = 0x3b72400
16:11:52: CardCapacity        = 32G
16:11:52: Is card secure      = 0
16:11:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:52: [DVTCommonLib]###  LogicalWrite called
16:11:53: [ WriteLba(0x163E4EB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 595 ] 
16:11:53: [DVTCommonLib]###  LogicalWrite Completed 

16:11:53: [DVTCommonLib]###  LogicalRead called
16:11:55: [ ReadLba(0x163E4EB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 596 ] 
16:11:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 39 times 

16:11:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 597 ] 
16:11:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4330>, <py_sfcl.CommandDataDefinition object at 0x061ED3F0>) , Command count = 598 ] 
16:11:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x061ED300>) , Command count = 599 ] 
16:11:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:55: [ SetCardRCA(0x1, 0xD555) , Command count = 600 ] 
16:11:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:55: [ SetBusWidth(0x1) , Command count = 601 ] 
16:11:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:55: ####CSD Registe 2.0 Values####
16:11:55: CSD_STRUCTURE                                 :0x1
16:11:55: Reserv1                                       :0x0
16:11:55: Time Access 1 TAAC                            :0xe
16:11:55: Time Access 2 NSAC*100                        :0x0
16:11:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:55: Card Command Classess CCC                     :0x5b5
16:11:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:55: DSR(driver stage register)  DSR_IMP           :0x0
16:11:55: Reserv2                                       :0x0
16:11:55: Device Size C_SIZE                            :0xedc8
16:11:55: Reserv3                                       :0x0
16:11:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:55: Reserv4                                       :0x0
16:11:55: Write Speed Factor R2W_FACTOR                 :0x2
16:11:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:55: FILE_FORMAT_GRP                               :0x0
16:11:55: COPY flag                                     :0x1
16:11:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:55: File_Format                                   :0x0
16:11:55: CRC                                           :0x0
16:11:55: ####CSD Registe Values####  

16:11:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:55: ProductSerialNumber = 0x23482900
16:11:55: CardMaximumLBA      = 0x3b72400
16:11:55: CardCapacity        = 32G
16:11:55: Is card secure      = 0
16:11:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:55: [DVTCommonLib]###  LogicalWrite called
16:11:57: [ WriteLba(0x361EBF5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 602 ] 
16:11:57: [DVTCommonLib]###  LogicalWrite Completed 

16:11:57: [DVTCommonLib]###  LogicalRead called
16:11:58: [ ReadLba(0x361EBF5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 603 ] 
16:11:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:11:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:11:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 40 times 

16:11:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:11:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:11:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 604 ] 
16:11:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:11:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:11:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:11:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:11:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:11:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:11:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4B0>, <py_sfcl.CommandDataDefinition object at 0x061EAE40>) , Command count = 605 ] 
16:11:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:11:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA7E0>, <py_sfcl.CommandDataDefinition object at 0x061EAF60>) , Command count = 606 ] 
16:11:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:11:58: [ SetCardRCA(0x1, 0xD555) , Command count = 607 ] 
16:11:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:11:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:11:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:11:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:11:58: [ SetBusWidth(0x1) , Command count = 608 ] 
16:11:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:11:58: ####CSD Registe 2.0 Values####
16:11:58: CSD_STRUCTURE                                 :0x1
16:11:58: Reserv1                                       :0x0
16:11:58: Time Access 1 TAAC                            :0xe
16:11:58: Time Access 2 NSAC*100                        :0x0
16:11:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:11:58: Card Command Classess CCC                     :0x5b5
16:11:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:11:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:11:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:11:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:11:58: DSR(driver stage register)  DSR_IMP           :0x0
16:11:58: Reserv2                                       :0x0
16:11:58: Device Size C_SIZE                            :0xedc8
16:11:58: Reserv3                                       :0x0
16:11:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:11:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:11:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:11:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:11:58: Reserv4                                       :0x0
16:11:58: Write Speed Factor R2W_FACTOR                 :0x2
16:11:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:11:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:11:58: FILE_FORMAT_GRP                               :0x0
16:11:58: COPY flag                                     :0x1
16:11:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:11:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:11:58: File_Format                                   :0x0
16:11:58: CRC                                           :0x0
16:11:58: ####CSD Registe Values####  

16:11:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:11:58: ProductSerialNumber = 0x23482900
16:11:58: CardMaximumLBA      = 0x3b72400
16:11:58: CardCapacity        = 32G
16:11:58: Is card secure      = 0
16:11:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:11:58: [DVTCommonLib]###  LogicalWrite called
16:12:00: [ WriteLba(0x649216, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 609 ] 
16:12:00: [DVTCommonLib]###  LogicalWrite Completed 

16:12:00: [DVTCommonLib]###  LogicalRead called
16:12:01: [ ReadLba(0x649216, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 610 ] 
16:12:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 41 times 

16:12:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 611 ] 
16:12:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAC60>, <py_sfcl.CommandDataDefinition object at 0x061EA090>) , Command count = 612 ] 
16:12:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA0C0>, <py_sfcl.CommandDataDefinition object at 0x061EADB0>) , Command count = 613 ] 
16:12:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:02: [ SetCardRCA(0x1, 0xD555) , Command count = 614 ] 
16:12:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:02: [ SetBusWidth(0x1) , Command count = 615 ] 
16:12:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:02: ####CSD Registe 2.0 Values####
16:12:02: CSD_STRUCTURE                                 :0x1
16:12:02: Reserv1                                       :0x0
16:12:02: Time Access 1 TAAC                            :0xe
16:12:02: Time Access 2 NSAC*100                        :0x0
16:12:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:02: Card Command Classess CCC                     :0x5b5
16:12:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:02: DSR(driver stage register)  DSR_IMP           :0x0
16:12:02: Reserv2                                       :0x0
16:12:02: Device Size C_SIZE                            :0xedc8
16:12:02: Reserv3                                       :0x0
16:12:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:02: Reserv4                                       :0x0
16:12:02: Write Speed Factor R2W_FACTOR                 :0x2
16:12:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:02: FILE_FORMAT_GRP                               :0x0
16:12:02: COPY flag                                     :0x1
16:12:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:02: File_Format                                   :0x0
16:12:02: CRC                                           :0x0
16:12:02: ####CSD Registe Values####  

16:12:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:02: ProductSerialNumber = 0x23482900
16:12:02: CardMaximumLBA      = 0x3b72400
16:12:02: CardCapacity        = 32G
16:12:02: Is card secure      = 0
16:12:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:02: [DVTCommonLib]###  LogicalWrite called
16:12:03: [ WriteLba(0x37BA274, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 616 ] 
16:12:03: [DVTCommonLib]###  LogicalWrite Completed 

16:12:03: [DVTCommonLib]###  LogicalRead called
16:12:05: [ ReadLba(0x37BA274, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 617 ] 
16:12:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 42 times 

16:12:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 618 ] 
16:12:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAF90>, <py_sfcl.CommandDataDefinition object at 0x061EA390>) , Command count = 619 ] 
16:12:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA4B0>, <py_sfcl.CommandDataDefinition object at 0x061EA510>) , Command count = 620 ] 
16:12:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:05: [ SetCardRCA(0x1, 0xD555) , Command count = 621 ] 
16:12:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:05: [ SetBusWidth(0x1) , Command count = 622 ] 
16:12:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:05: ####CSD Registe 2.0 Values####
16:12:05: CSD_STRUCTURE                                 :0x1
16:12:05: Reserv1                                       :0x0
16:12:05: Time Access 1 TAAC                            :0xe
16:12:05: Time Access 2 NSAC*100                        :0x0
16:12:05: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:05: Card Command Classess CCC                     :0x5b5
16:12:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:05: DSR(driver stage register)  DSR_IMP           :0x0
16:12:05: Reserv2                                       :0x0
16:12:05: Device Size C_SIZE                            :0xedc8
16:12:05: Reserv3                                       :0x0
16:12:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:05: Reserv4                                       :0x0
16:12:05: Write Speed Factor R2W_FACTOR                 :0x2
16:12:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:05: FILE_FORMAT_GRP                               :0x0
16:12:05: COPY flag                                     :0x1
16:12:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:05: File_Format                                   :0x0
16:12:05: CRC                                           :0x0
16:12:05: ####CSD Registe Values####  

16:12:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:05: ProductSerialNumber = 0x23482900
16:12:05: CardMaximumLBA      = 0x3b72400
16:12:05: CardCapacity        = 32G
16:12:05: Is card secure      = 0
16:12:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:05: [DVTCommonLib]###  LogicalWrite called
16:12:07: [ WriteLba(0x1D40177, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 623 ] 
16:12:07: [DVTCommonLib]###  LogicalWrite Completed 

16:12:07: [DVTCommonLib]###  LogicalRead called
16:12:08: [ ReadLba(0x1D40177, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 624 ] 
16:12:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 43 times 

16:12:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 625 ] 
16:12:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA030>, <py_sfcl.CommandDataDefinition object at 0x061EA300>) , Command count = 626 ] 
16:12:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA8A0>, <py_sfcl.CommandDataDefinition object at 0x061EA900>) , Command count = 627 ] 
16:12:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:08: [ SetCardRCA(0x1, 0xD555) , Command count = 628 ] 
16:12:08: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:08: [ SetBusWidth(0x1) , Command count = 629 ] 
16:12:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:08: ####CSD Registe 2.0 Values####
16:12:08: CSD_STRUCTURE                                 :0x1
16:12:08: Reserv1                                       :0x0
16:12:08: Time Access 1 TAAC                            :0xe
16:12:08: Time Access 2 NSAC*100                        :0x0
16:12:08: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:08: Card Command Classess CCC                     :0x5b5
16:12:08: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:08: DSR(driver stage register)  DSR_IMP           :0x0
16:12:08: Reserv2                                       :0x0
16:12:08: Device Size C_SIZE                            :0xedc8
16:12:08: Reserv3                                       :0x0
16:12:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:08: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:08: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:08: Reserv4                                       :0x0
16:12:08: Write Speed Factor R2W_FACTOR                 :0x2
16:12:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:08: FILE_FORMAT_GRP                               :0x0
16:12:08: COPY flag                                     :0x1
16:12:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:08: File_Format                                   :0x0
16:12:08: CRC                                           :0x0
16:12:08: ####CSD Registe Values####  

16:12:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:08: ProductSerialNumber = 0x23482900
16:12:08: CardMaximumLBA      = 0x3b72400
16:12:08: CardCapacity        = 32G
16:12:08: Is card secure      = 0
16:12:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:08: [DVTCommonLib]###  LogicalWrite called
16:12:10: [ WriteLba(0x22803A8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 630 ] 
16:12:10: [DVTCommonLib]###  LogicalWrite Completed 

16:12:10: [DVTCommonLib]###  LogicalRead called
16:12:12: [ ReadLba(0x22803A8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 631 ] 
16:12:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 44 times 

16:12:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 632 ] 
16:12:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA420>, <py_sfcl.CommandDataDefinition object at 0x061EA6F0>) , Command count = 633 ] 
16:12:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EADE0>, <py_sfcl.CommandDataDefinition object at 0x061EAB10>) , Command count = 634 ] 
16:12:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:12: [ SetCardRCA(0x1, 0xD555) , Command count = 635 ] 
16:12:12: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:12: [ SetBusWidth(0x1) , Command count = 636 ] 
16:12:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:12: ####CSD Registe 2.0 Values####
16:12:12: CSD_STRUCTURE                                 :0x1
16:12:12: Reserv1                                       :0x0
16:12:12: Time Access 1 TAAC                            :0xe
16:12:12: Time Access 2 NSAC*100                        :0x0
16:12:12: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:12: Card Command Classess CCC                     :0x5b5
16:12:12: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:12: DSR(driver stage register)  DSR_IMP           :0x0
16:12:12: Reserv2                                       :0x0
16:12:12: Device Size C_SIZE                            :0xedc8
16:12:12: Reserv3                                       :0x0
16:12:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:12: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:12: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:12: Reserv4                                       :0x0
16:12:12: Write Speed Factor R2W_FACTOR                 :0x2
16:12:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:12: FILE_FORMAT_GRP                               :0x0
16:12:12: COPY flag                                     :0x1
16:12:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:12: File_Format                                   :0x0
16:12:12: CRC                                           :0x0
16:12:12: ####CSD Registe Values####  

16:12:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:12: ProductSerialNumber = 0x23482900
16:12:12: CardMaximumLBA      = 0x3b72400
16:12:12: CardCapacity        = 32G
16:12:12: Is card secure      = 0
16:12:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:12: [DVTCommonLib]###  LogicalWrite called
16:12:13: [ WriteLba(0x15EE606, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 637 ] 
16:12:13: [DVTCommonLib]###  LogicalWrite Completed 

16:12:13: [DVTCommonLib]###  LogicalRead called
16:12:15: [ ReadLba(0x15EE606, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 638 ] 
16:12:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 45 times 

16:12:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 639 ] 
16:12:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA810>, <py_sfcl.CommandDataDefinition object at 0x061EA9C0>) , Command count = 640 ] 
16:12:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAEA0>, <py_sfcl.CommandDataDefinition object at 0x061EAF00>) , Command count = 641 ] 
16:12:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:15: [ SetCardRCA(0x1, 0xD555) , Command count = 642 ] 
16:12:15: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:15: [ SetBusWidth(0x1) , Command count = 643 ] 
16:12:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:15: ####CSD Registe 2.0 Values####
16:12:15: CSD_STRUCTURE                                 :0x1
16:12:15: Reserv1                                       :0x0
16:12:15: Time Access 1 TAAC                            :0xe
16:12:15: Time Access 2 NSAC*100                        :0x0
16:12:15: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:15: Card Command Classess CCC                     :0x5b5
16:12:15: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:15: DSR(driver stage register)  DSR_IMP           :0x0
16:12:15: Reserv2                                       :0x0
16:12:15: Device Size C_SIZE                            :0xedc8
16:12:15: Reserv3                                       :0x0
16:12:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:15: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:15: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:15: Reserv4                                       :0x0
16:12:15: Write Speed Factor R2W_FACTOR                 :0x2
16:12:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:15: FILE_FORMAT_GRP                               :0x0
16:12:15: COPY flag                                     :0x1
16:12:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:15: File_Format                                   :0x0
16:12:15: CRC                                           :0x0
16:12:15: ####CSD Registe Values####  

16:12:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:15: ProductSerialNumber = 0x23482900
16:12:15: CardMaximumLBA      = 0x3b72400
16:12:15: CardCapacity        = 32G
16:12:15: Is card secure      = 0
16:12:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:15: [DVTCommonLib]###  LogicalWrite called
16:12:17: [ WriteLba(0x161363E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 644 ] 
16:12:17: [DVTCommonLib]###  LogicalWrite Completed 

16:12:17: [DVTCommonLib]###  LogicalRead called
16:12:18: [ ReadLba(0x161363E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 645 ] 
16:12:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 46 times 

16:12:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 646 ] 
16:12:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 647 ] 
16:12:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x061EAF00>) , Command count = 648 ] 
16:12:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:18: [ SetCardRCA(0x1, 0xD555) , Command count = 649 ] 
16:12:18: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:18: [ SetBusWidth(0x1) , Command count = 650 ] 
16:12:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:18: ####CSD Registe 2.0 Values####
16:12:18: CSD_STRUCTURE                                 :0x1
16:12:18: Reserv1                                       :0x0
16:12:18: Time Access 1 TAAC                            :0xe
16:12:18: Time Access 2 NSAC*100                        :0x0
16:12:18: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:18: Card Command Classess CCC                     :0x5b5
16:12:18: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:18: DSR(driver stage register)  DSR_IMP           :0x0
16:12:18: Reserv2                                       :0x0
16:12:18: Device Size C_SIZE                            :0xedc8
16:12:18: Reserv3                                       :0x0
16:12:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:18: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:18: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:18: Reserv4                                       :0x0
16:12:18: Write Speed Factor R2W_FACTOR                 :0x2
16:12:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:18: FILE_FORMAT_GRP                               :0x0
16:12:18: COPY flag                                     :0x1
16:12:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:18: File_Format                                   :0x0
16:12:18: CRC                                           :0x0
16:12:18: ####CSD Registe Values####  

16:12:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:18: ProductSerialNumber = 0x23482900
16:12:18: CardMaximumLBA      = 0x3b72400
16:12:18: CardCapacity        = 32G
16:12:18: Is card secure      = 0
16:12:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:18: [DVTCommonLib]###  LogicalWrite called
16:12:20: [ WriteLba(0x23B5AEC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 651 ] 
16:12:20: [DVTCommonLib]###  LogicalWrite Completed 

16:12:20: [DVTCommonLib]###  LogicalRead called
16:12:22: [ ReadLba(0x23B5AEC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 652 ] 
16:12:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 47 times 

16:12:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 653 ] 
16:12:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2A0>, <py_sfcl.CommandDataDefinition object at 0x061ED120>) , Command count = 654 ] 
16:12:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061ED5D0>) , Command count = 655 ] 
16:12:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:22: [ SetCardRCA(0x1, 0xD555) , Command count = 656 ] 
16:12:22: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:22: [ SetBusWidth(0x1) , Command count = 657 ] 
16:12:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:22: ####CSD Registe 2.0 Values####
16:12:22: CSD_STRUCTURE                                 :0x1
16:12:22: Reserv1                                       :0x0
16:12:22: Time Access 1 TAAC                            :0xe
16:12:22: Time Access 2 NSAC*100                        :0x0
16:12:22: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:22: Card Command Classess CCC                     :0x5b5
16:12:22: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:22: DSR(driver stage register)  DSR_IMP           :0x0
16:12:22: Reserv2                                       :0x0
16:12:22: Device Size C_SIZE                            :0xedc8
16:12:22: Reserv3                                       :0x0
16:12:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:22: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:22: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:22: Reserv4                                       :0x0
16:12:22: Write Speed Factor R2W_FACTOR                 :0x2
16:12:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:22: FILE_FORMAT_GRP                               :0x0
16:12:22: COPY flag                                     :0x1
16:12:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:22: File_Format                                   :0x0
16:12:22: CRC                                           :0x0
16:12:22: ####CSD Registe Values####  

16:12:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:22: ProductSerialNumber = 0x23482900
16:12:22: CardMaximumLBA      = 0x3b72400
16:12:22: CardCapacity        = 32G
16:12:22: Is card secure      = 0
16:12:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:22: [DVTCommonLib]###  LogicalWrite called
16:12:23: [ WriteLba(0x28CF97E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 658 ] 
16:12:23: [DVTCommonLib]###  LogicalWrite Completed 

16:12:23: [DVTCommonLib]###  LogicalRead called
16:12:25: [ ReadLba(0x28CF97E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 659 ] 
16:12:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 48 times 

16:12:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 660 ] 
16:12:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x061ED510>) , Command count = 661 ] 
16:12:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x061EDA50>) , Command count = 662 ] 
16:12:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:25: [ SetCardRCA(0x1, 0xD555) , Command count = 663 ] 
16:12:25: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:25: [ SetBusWidth(0x1) , Command count = 664 ] 
16:12:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:25: ####CSD Registe 2.0 Values####
16:12:25: CSD_STRUCTURE                                 :0x1
16:12:25: Reserv1                                       :0x0
16:12:25: Time Access 1 TAAC                            :0xe
16:12:25: Time Access 2 NSAC*100                        :0x0
16:12:25: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:25: Card Command Classess CCC                     :0x5b5
16:12:25: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:25: DSR(driver stage register)  DSR_IMP           :0x0
16:12:25: Reserv2                                       :0x0
16:12:25: Device Size C_SIZE                            :0xedc8
16:12:25: Reserv3                                       :0x0
16:12:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:25: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:25: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:25: Reserv4                                       :0x0
16:12:25: Write Speed Factor R2W_FACTOR                 :0x2
16:12:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:25: FILE_FORMAT_GRP                               :0x0
16:12:25: COPY flag                                     :0x1
16:12:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:25: File_Format                                   :0x0
16:12:25: CRC                                           :0x0
16:12:25: ####CSD Registe Values####  

16:12:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:25: ProductSerialNumber = 0x23482900
16:12:25: CardMaximumLBA      = 0x3b72400
16:12:25: CardCapacity        = 32G
16:12:25: Is card secure      = 0
16:12:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:25: [DVTCommonLib]###  LogicalWrite called
16:12:27: [ WriteLba(0x1F34739, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 665 ] 
16:12:27: [DVTCommonLib]###  LogicalWrite Completed 

16:12:27: [DVTCommonLib]###  LogicalRead called
16:12:28: [ ReadLba(0x1F34739, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 666 ] 
16:12:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 49 times 

16:12:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 667 ] 
16:12:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED630>, <py_sfcl.CommandDataDefinition object at 0x061ED990>) , Command count = 668 ] 
16:12:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F40C0>, <py_sfcl.CommandDataDefinition object at 0x061ED7E0>) , Command count = 669 ] 
16:12:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:28: [ SetCardRCA(0x1, 0xD555) , Command count = 670 ] 
16:12:29: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:29: [ SetBusWidth(0x1) , Command count = 671 ] 
16:12:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:29: ####CSD Registe 2.0 Values####
16:12:29: CSD_STRUCTURE                                 :0x1
16:12:29: Reserv1                                       :0x0
16:12:29: Time Access 1 TAAC                            :0xe
16:12:29: Time Access 2 NSAC*100                        :0x0
16:12:29: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:29: Card Command Classess CCC                     :0x5b5
16:12:29: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:29: DSR(driver stage register)  DSR_IMP           :0x0
16:12:29: Reserv2                                       :0x0
16:12:29: Device Size C_SIZE                            :0xedc8
16:12:29: Reserv3                                       :0x0
16:12:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:29: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:29: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:29: Reserv4                                       :0x0
16:12:29: Write Speed Factor R2W_FACTOR                 :0x2
16:12:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:29: FILE_FORMAT_GRP                               :0x0
16:12:29: COPY flag                                     :0x1
16:12:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:29: File_Format                                   :0x0
16:12:29: CRC                                           :0x0
16:12:29: ####CSD Registe Values####  

16:12:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:29: ProductSerialNumber = 0x23482900
16:12:29: CardMaximumLBA      = 0x3b72400
16:12:29: CardCapacity        = 32G
16:12:29: Is card secure      = 0
16:12:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:29: [DVTCommonLib]###  LogicalWrite called
16:12:30: [ WriteLba(0x2D78D99, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 672 ] 
16:12:30: [DVTCommonLib]###  LogicalWrite Completed 

16:12:30: [DVTCommonLib]###  LogicalRead called
16:12:32: [ ReadLba(0x2D78D99, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 673 ] 
16:12:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 50 times 

16:12:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 674 ] 
16:12:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 675 ] 
16:12:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4450>, <py_sfcl.CommandDataDefinition object at 0x061ED900>) , Command count = 676 ] 
16:12:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:32: [ SetCardRCA(0x1, 0xD555) , Command count = 677 ] 
16:12:32: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:32: [ SetBusWidth(0x1) , Command count = 678 ] 
16:12:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:32: ####CSD Registe 2.0 Values####
16:12:32: CSD_STRUCTURE                                 :0x1
16:12:32: Reserv1                                       :0x0
16:12:32: Time Access 1 TAAC                            :0xe
16:12:32: Time Access 2 NSAC*100                        :0x0
16:12:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:32: Card Command Classess CCC                     :0x5b5
16:12:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:32: DSR(driver stage register)  DSR_IMP           :0x0
16:12:32: Reserv2                                       :0x0
16:12:32: Device Size C_SIZE                            :0xedc8
16:12:32: Reserv3                                       :0x0
16:12:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:32: Reserv4                                       :0x0
16:12:32: Write Speed Factor R2W_FACTOR                 :0x2
16:12:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:32: FILE_FORMAT_GRP                               :0x0
16:12:32: COPY flag                                     :0x1
16:12:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:32: File_Format                                   :0x0
16:12:32: CRC                                           :0x0
16:12:32: ####CSD Registe Values####  

16:12:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:32: ProductSerialNumber = 0x23482900
16:12:32: CardMaximumLBA      = 0x3b72400
16:12:32: CardCapacity        = 32G
16:12:32: Is card secure      = 0
16:12:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:32: [DVTCommonLib]###  LogicalWrite called
16:12:34: [ WriteLba(0x271310C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 679 ] 
16:12:34: [DVTCommonLib]###  LogicalWrite Completed 

16:12:34: [DVTCommonLib]###  LogicalRead called
16:12:35: [ ReadLba(0x271310C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 680 ] 
16:12:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 51 times 

16:12:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 681 ] 
16:12:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4060>, <py_sfcl.CommandDataDefinition object at 0x061F4180>) , Command count = 682 ] 
16:12:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4030>, <py_sfcl.CommandDataDefinition object at 0x061F4540>) , Command count = 683 ] 
16:12:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:35: [ SetCardRCA(0x1, 0xD555) , Command count = 684 ] 
16:12:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:35: [ SetBusWidth(0x1) , Command count = 685 ] 
16:12:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:35: ####CSD Registe 2.0 Values####
16:12:35: CSD_STRUCTURE                                 :0x1
16:12:35: Reserv1                                       :0x0
16:12:35: Time Access 1 TAAC                            :0xe
16:12:35: Time Access 2 NSAC*100                        :0x0
16:12:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:35: Card Command Classess CCC                     :0x5b5
16:12:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:35: DSR(driver stage register)  DSR_IMP           :0x0
16:12:35: Reserv2                                       :0x0
16:12:35: Device Size C_SIZE                            :0xedc8
16:12:35: Reserv3                                       :0x0
16:12:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:35: Reserv4                                       :0x0
16:12:35: Write Speed Factor R2W_FACTOR                 :0x2
16:12:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:35: FILE_FORMAT_GRP                               :0x0
16:12:35: COPY flag                                     :0x1
16:12:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:35: File_Format                                   :0x0
16:12:35: CRC                                           :0x0
16:12:35: ####CSD Registe Values####  

16:12:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:35: ProductSerialNumber = 0x23482900
16:12:35: CardMaximumLBA      = 0x3b72400
16:12:35: CardCapacity        = 32G
16:12:35: Is card secure      = 0
16:12:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:35: [DVTCommonLib]###  LogicalWrite called
16:12:37: [ WriteLba(0x30A8939, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 686 ] 
16:12:37: [DVTCommonLib]###  LogicalWrite Completed 

16:12:37: [DVTCommonLib]###  LogicalRead called
16:12:38: [ ReadLba(0x30A8939, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 687 ] 
16:12:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 52 times 

16:12:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 688 ] 
16:12:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F41B0>, <py_sfcl.CommandDataDefinition object at 0x061F42D0>) , Command count = 689 ] 
16:12:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4960>, <py_sfcl.CommandDataDefinition object at 0x061F49C0>) , Command count = 690 ] 
16:12:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:39: [ SetCardRCA(0x1, 0xD555) , Command count = 691 ] 
16:12:39: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:39: [ SetBusWidth(0x1) , Command count = 692 ] 
16:12:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:39: ####CSD Registe 2.0 Values####
16:12:39: CSD_STRUCTURE                                 :0x1
16:12:39: Reserv1                                       :0x0
16:12:39: Time Access 1 TAAC                            :0xe
16:12:39: Time Access 2 NSAC*100                        :0x0
16:12:39: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:39: Card Command Classess CCC                     :0x5b5
16:12:39: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:39: DSR(driver stage register)  DSR_IMP           :0x0
16:12:39: Reserv2                                       :0x0
16:12:39: Device Size C_SIZE                            :0xedc8
16:12:39: Reserv3                                       :0x0
16:12:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:39: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:39: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:39: Reserv4                                       :0x0
16:12:39: Write Speed Factor R2W_FACTOR                 :0x2
16:12:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:39: FILE_FORMAT_GRP                               :0x0
16:12:39: COPY flag                                     :0x1
16:12:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:39: File_Format                                   :0x0
16:12:39: CRC                                           :0x0
16:12:39: ####CSD Registe Values####  

16:12:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:39: ProductSerialNumber = 0x23482900
16:12:39: CardMaximumLBA      = 0x3b72400
16:12:39: CardCapacity        = 32G
16:12:39: Is card secure      = 0
16:12:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:39: [DVTCommonLib]###  LogicalWrite called
16:12:40: [ WriteLba(0x2D27924, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 693 ] 
16:12:40: [DVTCommonLib]###  LogicalWrite Completed 

16:12:40: [DVTCommonLib]###  LogicalRead called
16:12:42: [ ReadLba(0x2D27924, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 694 ] 
16:12:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 53 times 

16:12:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 695 ] 
16:12:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4630>, <py_sfcl.CommandDataDefinition object at 0x061F47B0>) , Command count = 696 ] 
16:12:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C90>, <py_sfcl.CommandDataDefinition object at 0x061F4CF0>) , Command count = 697 ] 
16:12:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:42: [ SetCardRCA(0x1, 0xD555) , Command count = 698 ] 
16:12:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:42: [ SetBusWidth(0x1) , Command count = 699 ] 
16:12:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:42: ####CSD Registe 2.0 Values####
16:12:42: CSD_STRUCTURE                                 :0x1
16:12:42: Reserv1                                       :0x0
16:12:42: Time Access 1 TAAC                            :0xe
16:12:42: Time Access 2 NSAC*100                        :0x0
16:12:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:42: Card Command Classess CCC                     :0x5b5
16:12:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:42: DSR(driver stage register)  DSR_IMP           :0x0
16:12:42: Reserv2                                       :0x0
16:12:42: Device Size C_SIZE                            :0xedc8
16:12:42: Reserv3                                       :0x0
16:12:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:42: Reserv4                                       :0x0
16:12:42: Write Speed Factor R2W_FACTOR                 :0x2
16:12:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:42: FILE_FORMAT_GRP                               :0x0
16:12:42: COPY flag                                     :0x1
16:12:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:42: File_Format                                   :0x0
16:12:42: CRC                                           :0x0
16:12:42: ####CSD Registe Values####  

16:12:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:42: ProductSerialNumber = 0x23482900
16:12:42: CardMaximumLBA      = 0x3b72400
16:12:42: CardCapacity        = 32G
16:12:42: Is card secure      = 0
16:12:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:42: [DVTCommonLib]###  LogicalWrite called
16:12:44: [ WriteLba(0x35502EF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 700 ] 
16:12:44: [DVTCommonLib]###  LogicalWrite Completed 

16:12:44: [DVTCommonLib]###  LogicalRead called
16:12:45: [ ReadLba(0x35502EF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 701 ] 
16:12:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 54 times 

16:12:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 702 ] 
16:12:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F48D0>, <py_sfcl.CommandDataDefinition object at 0x061F4C30>) , Command count = 703 ] 
16:12:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA030>, <py_sfcl.CommandDataDefinition object at 0x061F4F30>) , Command count = 704 ] 
16:12:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:45: [ SetCardRCA(0x1, 0xD555) , Command count = 705 ] 
16:12:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:45: [ SetBusWidth(0x1) , Command count = 706 ] 
16:12:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:45: ####CSD Registe 2.0 Values####
16:12:45: CSD_STRUCTURE                                 :0x1
16:12:45: Reserv1                                       :0x0
16:12:45: Time Access 1 TAAC                            :0xe
16:12:45: Time Access 2 NSAC*100                        :0x0
16:12:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:45: Card Command Classess CCC                     :0x5b5
16:12:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:45: DSR(driver stage register)  DSR_IMP           :0x0
16:12:45: Reserv2                                       :0x0
16:12:45: Device Size C_SIZE                            :0xedc8
16:12:45: Reserv3                                       :0x0
16:12:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:45: Reserv4                                       :0x0
16:12:45: Write Speed Factor R2W_FACTOR                 :0x2
16:12:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:45: FILE_FORMAT_GRP                               :0x0
16:12:45: COPY flag                                     :0x1
16:12:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:45: File_Format                                   :0x0
16:12:45: CRC                                           :0x0
16:12:45: ####CSD Registe Values####  

16:12:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:45: ProductSerialNumber = 0x23482900
16:12:45: CardMaximumLBA      = 0x3b72400
16:12:45: CardCapacity        = 32G
16:12:45: Is card secure      = 0
16:12:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:45: [DVTCommonLib]###  LogicalWrite called
16:12:47: [ WriteLba(0x1880672, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 707 ] 
16:12:47: [DVTCommonLib]###  LogicalWrite Completed 

16:12:47: [DVTCommonLib]###  LogicalRead called
16:12:49: [ ReadLba(0x1880672, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 708 ] 
16:12:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 55 times 

16:12:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 709 ] 
16:12:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4BA0>, <py_sfcl.CommandDataDefinition object at 0x061FA210>) , Command count = 710 ] 
16:12:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA330>, <py_sfcl.CommandDataDefinition object at 0x061FA390>) , Command count = 711 ] 
16:12:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:49: [ SetCardRCA(0x1, 0xD555) , Command count = 712 ] 
16:12:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:49: [ SetBusWidth(0x1) , Command count = 713 ] 
16:12:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:49: ####CSD Registe 2.0 Values####
16:12:49: CSD_STRUCTURE                                 :0x1
16:12:49: Reserv1                                       :0x0
16:12:49: Time Access 1 TAAC                            :0xe
16:12:49: Time Access 2 NSAC*100                        :0x0
16:12:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:49: Card Command Classess CCC                     :0x5b5
16:12:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:49: DSR(driver stage register)  DSR_IMP           :0x0
16:12:49: Reserv2                                       :0x0
16:12:49: Device Size C_SIZE                            :0xedc8
16:12:49: Reserv3                                       :0x0
16:12:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:49: Reserv4                                       :0x0
16:12:49: Write Speed Factor R2W_FACTOR                 :0x2
16:12:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:49: FILE_FORMAT_GRP                               :0x0
16:12:49: COPY flag                                     :0x1
16:12:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:49: File_Format                                   :0x0
16:12:49: CRC                                           :0x0
16:12:49: ####CSD Registe Values####  

16:12:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:49: ProductSerialNumber = 0x23482900
16:12:49: CardMaximumLBA      = 0x3b72400
16:12:49: CardCapacity        = 32G
16:12:49: Is card secure      = 0
16:12:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:49: [DVTCommonLib]###  LogicalWrite called
16:12:50: [ WriteLba(0x249B9B2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 714 ] 
16:12:50: [DVTCommonLib]###  LogicalWrite Completed 

16:12:50: [DVTCommonLib]###  LogicalRead called
16:12:52: [ ReadLba(0x249B9B2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 715 ] 
16:12:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 56 times 

16:12:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 716 ] 
16:12:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA300>, <py_sfcl.CommandDataDefinition object at 0x061FA180>) , Command count = 717 ] 
16:12:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA720>, <py_sfcl.CommandDataDefinition object at 0x061FA780>) , Command count = 718 ] 
16:12:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:52: [ SetCardRCA(0x1, 0xD555) , Command count = 719 ] 
16:12:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:52: [ SetBusWidth(0x1) , Command count = 720 ] 
16:12:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:52: ####CSD Registe 2.0 Values####
16:12:52: CSD_STRUCTURE                                 :0x1
16:12:52: Reserv1                                       :0x0
16:12:52: Time Access 1 TAAC                            :0xe
16:12:52: Time Access 2 NSAC*100                        :0x0
16:12:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:52: Card Command Classess CCC                     :0x5b5
16:12:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:52: DSR(driver stage register)  DSR_IMP           :0x0
16:12:52: Reserv2                                       :0x0
16:12:52: Device Size C_SIZE                            :0xedc8
16:12:52: Reserv3                                       :0x0
16:12:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:52: Reserv4                                       :0x0
16:12:52: Write Speed Factor R2W_FACTOR                 :0x2
16:12:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:52: FILE_FORMAT_GRP                               :0x0
16:12:52: COPY flag                                     :0x1
16:12:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:52: File_Format                                   :0x0
16:12:52: CRC                                           :0x0
16:12:52: ####CSD Registe Values####  

16:12:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:52: ProductSerialNumber = 0x23482900
16:12:52: CardMaximumLBA      = 0x3b72400
16:12:52: CardCapacity        = 32G
16:12:52: Is card secure      = 0
16:12:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:52: [DVTCommonLib]###  LogicalWrite called
16:12:54: [ WriteLba(0x1D705CB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 721 ] 
16:12:54: [DVTCommonLib]###  LogicalWrite Completed 

16:12:54: [DVTCommonLib]###  LogicalRead called
16:12:55: [ ReadLba(0x1D705CB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 722 ] 
16:12:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 57 times 

16:12:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 723 ] 
16:12:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2A0>, <py_sfcl.CommandDataDefinition object at 0x061FA570>) , Command count = 724 ] 
16:12:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAB40>, <py_sfcl.CommandDataDefinition object at 0x061FAA50>) , Command count = 725 ] 
16:12:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:55: [ SetCardRCA(0x1, 0xD555) , Command count = 726 ] 
16:12:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:55: [ SetBusWidth(0x1) , Command count = 727 ] 
16:12:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:55: ####CSD Registe 2.0 Values####
16:12:55: CSD_STRUCTURE                                 :0x1
16:12:55: Reserv1                                       :0x0
16:12:55: Time Access 1 TAAC                            :0xe
16:12:55: Time Access 2 NSAC*100                        :0x0
16:12:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:55: Card Command Classess CCC                     :0x5b5
16:12:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:55: DSR(driver stage register)  DSR_IMP           :0x0
16:12:55: Reserv2                                       :0x0
16:12:55: Device Size C_SIZE                            :0xedc8
16:12:55: Reserv3                                       :0x0
16:12:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:55: Reserv4                                       :0x0
16:12:55: Write Speed Factor R2W_FACTOR                 :0x2
16:12:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:55: FILE_FORMAT_GRP                               :0x0
16:12:55: COPY flag                                     :0x1
16:12:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:55: File_Format                                   :0x0
16:12:55: CRC                                           :0x0
16:12:55: ####CSD Registe Values####  

16:12:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:55: ProductSerialNumber = 0x23482900
16:12:55: CardMaximumLBA      = 0x3b72400
16:12:55: CardCapacity        = 32G
16:12:55: Is card secure      = 0
16:12:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:55: [DVTCommonLib]###  LogicalWrite called
16:12:57: [ WriteLba(0x16705DD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 728 ] 
16:12:57: [DVTCommonLib]###  LogicalWrite Completed 

16:12:57: [DVTCommonLib]###  LogicalRead called
16:12:59: [ ReadLba(0x16705DD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 729 ] 
16:12:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:12:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:12:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 58 times 

16:12:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:12:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:12:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 730 ] 
16:12:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:12:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:12:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:12:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:12:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:12:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:12:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA690>, <py_sfcl.CommandDataDefinition object at 0x061FA960>) , Command count = 731 ] 
16:12:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:12:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAC00>, <py_sfcl.CommandDataDefinition object at 0x061FA9C0>) , Command count = 732 ] 
16:12:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:12:59: [ SetCardRCA(0x1, 0xD555) , Command count = 733 ] 
16:12:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:12:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:12:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:12:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:12:59: [ SetBusWidth(0x1) , Command count = 734 ] 
16:12:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:12:59: ####CSD Registe 2.0 Values####
16:12:59: CSD_STRUCTURE                                 :0x1
16:12:59: Reserv1                                       :0x0
16:12:59: Time Access 1 TAAC                            :0xe
16:12:59: Time Access 2 NSAC*100                        :0x0
16:12:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:12:59: Card Command Classess CCC                     :0x5b5
16:12:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:12:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:12:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:12:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:12:59: DSR(driver stage register)  DSR_IMP           :0x0
16:12:59: Reserv2                                       :0x0
16:12:59: Device Size C_SIZE                            :0xedc8
16:12:59: Reserv3                                       :0x0
16:12:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:12:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:12:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:12:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:12:59: Reserv4                                       :0x0
16:12:59: Write Speed Factor R2W_FACTOR                 :0x2
16:12:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:12:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:12:59: FILE_FORMAT_GRP                               :0x0
16:12:59: COPY flag                                     :0x1
16:12:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:12:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:12:59: File_Format                                   :0x0
16:12:59: CRC                                           :0x0
16:12:59: ####CSD Registe Values####  

16:12:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:12:59: ProductSerialNumber = 0x23482900
16:12:59: CardMaximumLBA      = 0x3b72400
16:12:59: CardCapacity        = 32G
16:12:59: Is card secure      = 0
16:12:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:12:59: [DVTCommonLib]###  LogicalWrite called
16:13:00: [ WriteLba(0x349E04B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 735 ] 
16:13:00: [DVTCommonLib]###  LogicalWrite Completed 

16:13:00: [DVTCommonLib]###  LogicalRead called
16:13:02: [ ReadLba(0x349E04B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 736 ] 
16:13:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 59 times 

16:13:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 737 ] 
16:13:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 738 ] 
16:13:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0F0>, <py_sfcl.CommandDataDefinition object at 0x061FAEA0>) , Command count = 739 ] 
16:13:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:02: [ SetCardRCA(0x1, 0xD555) , Command count = 740 ] 
16:13:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:02: [ SetBusWidth(0x1) , Command count = 741 ] 
16:13:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:02: ####CSD Registe 2.0 Values####
16:13:02: CSD_STRUCTURE                                 :0x1
16:13:02: Reserv1                                       :0x0
16:13:02: Time Access 1 TAAC                            :0xe
16:13:02: Time Access 2 NSAC*100                        :0x0
16:13:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:02: Card Command Classess CCC                     :0x5b5
16:13:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:02: DSR(driver stage register)  DSR_IMP           :0x0
16:13:02: Reserv2                                       :0x0
16:13:02: Device Size C_SIZE                            :0xedc8
16:13:02: Reserv3                                       :0x0
16:13:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:02: Reserv4                                       :0x0
16:13:02: Write Speed Factor R2W_FACTOR                 :0x2
16:13:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:02: FILE_FORMAT_GRP                               :0x0
16:13:02: COPY flag                                     :0x1
16:13:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:02: File_Format                                   :0x0
16:13:02: CRC                                           :0x0
16:13:02: ####CSD Registe Values####  

16:13:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:02: ProductSerialNumber = 0x23482900
16:13:02: CardMaximumLBA      = 0x3b72400
16:13:02: CardCapacity        = 32G
16:13:02: Is card secure      = 0
16:13:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:02: [DVTCommonLib]###  LogicalWrite called
16:13:04: [ WriteLba(0x454B5B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 742 ] 
16:13:04: [DVTCommonLib]###  LogicalWrite Completed 

16:13:04: [DVTCommonLib]###  LogicalRead called
16:13:05: [ ReadLba(0x454B5B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 743 ] 
16:13:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 60 times 

16:13:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 744 ] 
16:13:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAAB0>, <py_sfcl.CommandDataDefinition object at 0x061FE030>) , Command count = 745 ] 
16:13:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE4E0>, <py_sfcl.CommandDataDefinition object at 0x061FE540>) , Command count = 746 ] 
16:13:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:05: [ SetCardRCA(0x1, 0xD555) , Command count = 747 ] 
16:13:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:06: [ SetBusWidth(0x1) , Command count = 748 ] 
16:13:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:06: ####CSD Registe 2.0 Values####
16:13:06: CSD_STRUCTURE                                 :0x1
16:13:06: Reserv1                                       :0x0
16:13:06: Time Access 1 TAAC                            :0xe
16:13:06: Time Access 2 NSAC*100                        :0x0
16:13:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:06: Card Command Classess CCC                     :0x5b5
16:13:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:06: DSR(driver stage register)  DSR_IMP           :0x0
16:13:06: Reserv2                                       :0x0
16:13:06: Device Size C_SIZE                            :0xedc8
16:13:06: Reserv3                                       :0x0
16:13:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:06: Reserv4                                       :0x0
16:13:06: Write Speed Factor R2W_FACTOR                 :0x2
16:13:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:06: FILE_FORMAT_GRP                               :0x0
16:13:06: COPY flag                                     :0x1
16:13:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:06: File_Format                                   :0x0
16:13:06: CRC                                           :0x0
16:13:06: ####CSD Registe Values####  

16:13:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:06: ProductSerialNumber = 0x23482900
16:13:06: CardMaximumLBA      = 0x3b72400
16:13:06: CardCapacity        = 32G
16:13:06: Is card secure      = 0
16:13:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:06: [DVTCommonLib]###  LogicalWrite called
16:13:07: [ WriteLba(0x2B1924, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 749 ] 
16:13:07: [DVTCommonLib]###  LogicalWrite Completed 

16:13:07: [DVTCommonLib]###  LogicalRead called
16:13:09: [ ReadLba(0x2B1924, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 750 ] 
16:13:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 61 times 

16:13:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 751 ] 
16:13:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE060>, <py_sfcl.CommandDataDefinition object at 0x061FE330>) , Command count = 752 ] 
16:13:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE8D0>, <py_sfcl.CommandDataDefinition object at 0x061FE930>) , Command count = 753 ] 
16:13:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:09: [ SetCardRCA(0x1, 0xD555) , Command count = 754 ] 
16:13:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:09: [ SetBusWidth(0x1) , Command count = 755 ] 
16:13:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:09: ####CSD Registe 2.0 Values####
16:13:09: CSD_STRUCTURE                                 :0x1
16:13:09: Reserv1                                       :0x0
16:13:09: Time Access 1 TAAC                            :0xe
16:13:09: Time Access 2 NSAC*100                        :0x0
16:13:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:09: Card Command Classess CCC                     :0x5b5
16:13:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:09: DSR(driver stage register)  DSR_IMP           :0x0
16:13:09: Reserv2                                       :0x0
16:13:09: Device Size C_SIZE                            :0xedc8
16:13:09: Reserv3                                       :0x0
16:13:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:09: Reserv4                                       :0x0
16:13:09: Write Speed Factor R2W_FACTOR                 :0x2
16:13:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:09: FILE_FORMAT_GRP                               :0x0
16:13:09: COPY flag                                     :0x1
16:13:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:09: File_Format                                   :0x0
16:13:09: CRC                                           :0x0
16:13:09: ####CSD Registe Values####  

16:13:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:09: ProductSerialNumber = 0x23482900
16:13:09: CardMaximumLBA      = 0x3b72400
16:13:09: CardCapacity        = 32G
16:13:09: Is card secure      = 0
16:13:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:09: [DVTCommonLib]###  LogicalWrite called
16:13:11: [ WriteLba(0x193652E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 756 ] 
16:13:11: [DVTCommonLib]###  LogicalWrite Completed 

16:13:11: [DVTCommonLib]###  LogicalRead called
16:13:12: [ ReadLba(0x193652E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 757 ] 
16:13:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 62 times 

16:13:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 758 ] 
16:13:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FE450>) , Command count = 759 ] 
16:13:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054413F0>, <py_sfcl.CommandDataDefinition object at 0x061FEB40>) , Command count = 760 ] 
16:13:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:12: [ SetCardRCA(0x1, 0xD555) , Command count = 761 ] 
16:13:12: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:12: [ SetBusWidth(0x1) , Command count = 762 ] 
16:13:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:12: ####CSD Registe 2.0 Values####
16:13:12: CSD_STRUCTURE                                 :0x1
16:13:12: Reserv1                                       :0x0
16:13:12: Time Access 1 TAAC                            :0xe
16:13:12: Time Access 2 NSAC*100                        :0x0
16:13:12: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:12: Card Command Classess CCC                     :0x5b5
16:13:12: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:12: DSR(driver stage register)  DSR_IMP           :0x0
16:13:12: Reserv2                                       :0x0
16:13:12: Device Size C_SIZE                            :0xedc8
16:13:12: Reserv3                                       :0x0
16:13:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:12: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:12: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:12: Reserv4                                       :0x0
16:13:12: Write Speed Factor R2W_FACTOR                 :0x2
16:13:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:12: FILE_FORMAT_GRP                               :0x0
16:13:12: COPY flag                                     :0x1
16:13:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:12: File_Format                                   :0x0
16:13:12: CRC                                           :0x0
16:13:12: ####CSD Registe Values####  

16:13:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:12: ProductSerialNumber = 0x23482900
16:13:12: CardMaximumLBA      = 0x3b72400
16:13:12: CardCapacity        = 32G
16:13:12: Is card secure      = 0
16:13:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:12: [DVTCommonLib]###  LogicalWrite called
16:13:14: [ WriteLba(0x2522B61, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 763 ] 
16:13:14: [DVTCommonLib]###  LogicalWrite Completed 

16:13:14: [DVTCommonLib]###  LogicalRead called
16:13:15: [ ReadLba(0x2522B61, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 764 ] 
16:13:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 63 times 

16:13:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 765 ] 
16:13:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FE840>) , Command count = 766 ] 
16:13:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E240>, <py_sfcl.CommandDataDefinition object at 0x061FE9C0>) , Command count = 767 ] 
16:13:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:16: [ SetCardRCA(0x1, 0xD555) , Command count = 768 ] 
16:13:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:16: [ SetBusWidth(0x1) , Command count = 769 ] 
16:13:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:16: ####CSD Registe 2.0 Values####
16:13:16: CSD_STRUCTURE                                 :0x1
16:13:16: Reserv1                                       :0x0
16:13:16: Time Access 1 TAAC                            :0xe
16:13:16: Time Access 2 NSAC*100                        :0x0
16:13:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:16: Card Command Classess CCC                     :0x5b5
16:13:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:16: DSR(driver stage register)  DSR_IMP           :0x0
16:13:16: Reserv2                                       :0x0
16:13:16: Device Size C_SIZE                            :0xedc8
16:13:16: Reserv3                                       :0x0
16:13:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:16: Reserv4                                       :0x0
16:13:16: Write Speed Factor R2W_FACTOR                 :0x2
16:13:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:16: FILE_FORMAT_GRP                               :0x0
16:13:16: COPY flag                                     :0x1
16:13:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:16: File_Format                                   :0x0
16:13:16: CRC                                           :0x0
16:13:16: ####CSD Registe Values####  

16:13:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:16: ProductSerialNumber = 0x23482900
16:13:16: CardMaximumLBA      = 0x3b72400
16:13:16: CardCapacity        = 32G
16:13:16: Is card secure      = 0
16:13:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:16: [DVTCommonLib]###  LogicalWrite called
16:13:17: [ WriteLba(0x283D51A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 770 ] 
16:13:17: [DVTCommonLib]###  LogicalWrite Completed 

16:13:17: [DVTCommonLib]###  LogicalRead called
16:13:19: [ ReadLba(0x283D51A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 771 ] 
16:13:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 64 times 

16:13:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 772 ] 
16:13:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0541D7B0>, <py_sfcl.CommandDataDefinition object at 0x0544EE70>) , Command count = 773 ] 
16:13:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0545AFC0>, <py_sfcl.CommandDataDefinition object at 0x061FE6C0>) , Command count = 774 ] 
16:13:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:19: [ SetCardRCA(0x1, 0xD555) , Command count = 775 ] 
16:13:19: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:19: [ SetBusWidth(0x1) , Command count = 776 ] 
16:13:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:19: ####CSD Registe 2.0 Values####
16:13:19: CSD_STRUCTURE                                 :0x1
16:13:19: Reserv1                                       :0x0
16:13:19: Time Access 1 TAAC                            :0xe
16:13:19: Time Access 2 NSAC*100                        :0x0
16:13:19: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:19: Card Command Classess CCC                     :0x5b5
16:13:19: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:19: DSR(driver stage register)  DSR_IMP           :0x0
16:13:19: Reserv2                                       :0x0
16:13:19: Device Size C_SIZE                            :0xedc8
16:13:19: Reserv3                                       :0x0
16:13:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:19: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:19: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:19: Reserv4                                       :0x0
16:13:19: Write Speed Factor R2W_FACTOR                 :0x2
16:13:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:19: FILE_FORMAT_GRP                               :0x0
16:13:19: COPY flag                                     :0x1
16:13:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:19: File_Format                                   :0x0
16:13:19: CRC                                           :0x0
16:13:19: ####CSD Registe Values####  

16:13:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:19: ProductSerialNumber = 0x23482900
16:13:19: CardMaximumLBA      = 0x3b72400
16:13:19: CardCapacity        = 32G
16:13:19: Is card secure      = 0
16:13:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:19: [DVTCommonLib]###  LogicalWrite called
16:13:21: [ WriteLba(0x134B298, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 777 ] 
16:13:21: [DVTCommonLib]###  LogicalWrite Completed 

16:13:21: [DVTCommonLib]###  LogicalRead called
16:13:22: [ ReadLba(0x134B298, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 778 ] 
16:13:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 65 times 

16:13:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 779 ] 
16:13:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC30>, <py_sfcl.CommandDataDefinition object at 0x0545A900>) , Command count = 780 ] 
16:13:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC00>, <py_sfcl.CommandDataDefinition object at 0x061FE5D0>) , Command count = 781 ] 
16:13:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:22: [ SetCardRCA(0x1, 0xD555) , Command count = 782 ] 
16:13:22: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:22: [ SetBusWidth(0x1) , Command count = 783 ] 
16:13:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:22: ####CSD Registe 2.0 Values####
16:13:22: CSD_STRUCTURE                                 :0x1
16:13:22: Reserv1                                       :0x0
16:13:22: Time Access 1 TAAC                            :0xe
16:13:22: Time Access 2 NSAC*100                        :0x0
16:13:22: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:22: Card Command Classess CCC                     :0x5b5
16:13:22: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:22: DSR(driver stage register)  DSR_IMP           :0x0
16:13:22: Reserv2                                       :0x0
16:13:22: Device Size C_SIZE                            :0xedc8
16:13:22: Reserv3                                       :0x0
16:13:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:22: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:22: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:22: Reserv4                                       :0x0
16:13:22: Write Speed Factor R2W_FACTOR                 :0x2
16:13:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:22: FILE_FORMAT_GRP                               :0x0
16:13:22: COPY flag                                     :0x1
16:13:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:22: File_Format                                   :0x0
16:13:22: CRC                                           :0x0
16:13:22: ####CSD Registe Values####  

16:13:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:22: ProductSerialNumber = 0x23482900
16:13:22: CardMaximumLBA      = 0x3b72400
16:13:22: CardCapacity        = 32G
16:13:22: Is card secure      = 0
16:13:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:22: [DVTCommonLib]###  LogicalWrite called
16:13:24: [ WriteLba(0x27A8DB9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 784 ] 
16:13:24: [DVTCommonLib]###  LogicalWrite Completed 

16:13:24: [DVTCommonLib]###  LogicalRead called
16:13:26: [ ReadLba(0x27A8DB9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 785 ] 
16:13:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 66 times 

16:13:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 786 ] 
16:13:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EF30>, <py_sfcl.CommandDataDefinition object at 0x05460990>) , Command count = 787 ] 
16:13:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE300>, <py_sfcl.CommandDataDefinition object at 0x061FE390>) , Command count = 788 ] 
16:13:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:26: [ SetCardRCA(0x1, 0xD555) , Command count = 789 ] 
16:13:26: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:26: [ SetBusWidth(0x1) , Command count = 790 ] 
16:13:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:26: ####CSD Registe 2.0 Values####
16:13:26: CSD_STRUCTURE                                 :0x1
16:13:26: Reserv1                                       :0x0
16:13:26: Time Access 1 TAAC                            :0xe
16:13:26: Time Access 2 NSAC*100                        :0x0
16:13:26: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:26: Card Command Classess CCC                     :0x5b5
16:13:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:26: DSR(driver stage register)  DSR_IMP           :0x0
16:13:26: Reserv2                                       :0x0
16:13:26: Device Size C_SIZE                            :0xedc8
16:13:26: Reserv3                                       :0x0
16:13:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:26: Reserv4                                       :0x0
16:13:26: Write Speed Factor R2W_FACTOR                 :0x2
16:13:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:26: FILE_FORMAT_GRP                               :0x0
16:13:26: COPY flag                                     :0x1
16:13:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:26: File_Format                                   :0x0
16:13:26: CRC                                           :0x0
16:13:26: ####CSD Registe Values####  

16:13:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:26: ProductSerialNumber = 0x23482900
16:13:26: CardMaximumLBA      = 0x3b72400
16:13:26: CardCapacity        = 32G
16:13:26: Is card secure      = 0
16:13:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:26: [DVTCommonLib]###  LogicalWrite called
16:13:27: [ WriteLba(0x640D1A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 791 ] 
16:13:27: [DVTCommonLib]###  LogicalWrite Completed 

16:13:27: [DVTCommonLib]###  LogicalRead called
16:13:29: [ ReadLba(0x640D1A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 792 ] 
16:13:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 67 times 

16:13:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 793 ] 
16:13:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460C30>, <py_sfcl.CommandDataDefinition object at 0x05460E40>) , Command count = 794 ] 
16:13:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C24B0>, <py_sfcl.CommandDataDefinition object at 0x061FE390>) , Command count = 795 ] 
16:13:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:29: [ SetCardRCA(0x1, 0xD555) , Command count = 796 ] 
16:13:29: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:29: [ SetBusWidth(0x1) , Command count = 797 ] 
16:13:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:29: ####CSD Registe 2.0 Values####
16:13:29: CSD_STRUCTURE                                 :0x1
16:13:29: Reserv1                                       :0x0
16:13:29: Time Access 1 TAAC                            :0xe
16:13:29: Time Access 2 NSAC*100                        :0x0
16:13:29: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:29: Card Command Classess CCC                     :0x5b5
16:13:29: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:29: DSR(driver stage register)  DSR_IMP           :0x0
16:13:29: Reserv2                                       :0x0
16:13:29: Device Size C_SIZE                            :0xedc8
16:13:29: Reserv3                                       :0x0
16:13:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:29: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:29: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:29: Reserv4                                       :0x0
16:13:29: Write Speed Factor R2W_FACTOR                 :0x2
16:13:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:29: FILE_FORMAT_GRP                               :0x0
16:13:29: COPY flag                                     :0x1
16:13:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:29: File_Format                                   :0x0
16:13:29: CRC                                           :0x0
16:13:29: ####CSD Registe Values####  

16:13:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:29: ProductSerialNumber = 0x23482900
16:13:29: CardMaximumLBA      = 0x3b72400
16:13:29: CardCapacity        = 32G
16:13:29: Is card secure      = 0
16:13:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:29: [DVTCommonLib]###  LogicalWrite called
16:13:31: [ WriteLba(0x246A1A3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 798 ] 
16:13:31: [DVTCommonLib]###  LogicalWrite Completed 

16:13:31: [DVTCommonLib]###  LogicalRead called
16:13:32: [ ReadLba(0x246A1A3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 799 ] 
16:13:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 68 times 

16:13:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 800 ] 
16:13:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F30>, <py_sfcl.CommandDataDefinition object at 0x061FE1B0>) , Command count = 801 ] 
16:13:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F180>, <py_sfcl.CommandDataDefinition object at 0x061FAE10>) , Command count = 802 ] 
16:13:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:32: [ SetCardRCA(0x1, 0xD555) , Command count = 803 ] 
16:13:32: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:32: [ SetBusWidth(0x1) , Command count = 804 ] 
16:13:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:32: ####CSD Registe 2.0 Values####
16:13:32: CSD_STRUCTURE                                 :0x1
16:13:32: Reserv1                                       :0x0
16:13:32: Time Access 1 TAAC                            :0xe
16:13:32: Time Access 2 NSAC*100                        :0x0
16:13:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:32: Card Command Classess CCC                     :0x5b5
16:13:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:32: DSR(driver stage register)  DSR_IMP           :0x0
16:13:32: Reserv2                                       :0x0
16:13:32: Device Size C_SIZE                            :0xedc8
16:13:32: Reserv3                                       :0x0
16:13:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:32: Reserv4                                       :0x0
16:13:32: Write Speed Factor R2W_FACTOR                 :0x2
16:13:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:32: FILE_FORMAT_GRP                               :0x0
16:13:32: COPY flag                                     :0x1
16:13:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:32: File_Format                                   :0x0
16:13:32: CRC                                           :0x0
16:13:32: ####CSD Registe Values####  

16:13:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:32: ProductSerialNumber = 0x23482900
16:13:32: CardMaximumLBA      = 0x3b72400
16:13:32: CardCapacity        = 32G
16:13:32: Is card secure      = 0
16:13:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:32: [DVTCommonLib]###  LogicalWrite called
16:13:34: [ WriteLba(0x1B2FD64, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 805 ] 
16:13:34: [DVTCommonLib]###  LogicalWrite Completed 

16:13:34: [DVTCommonLib]###  LogicalRead called
16:13:36: [ ReadLba(0x1B2FD64, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 806 ] 
16:13:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 69 times 

16:13:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 807 ] 
16:13:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C22A0>, <py_sfcl.CommandDataDefinition object at 0x0612CF00>) , Command count = 808 ] 
16:13:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA870>, <py_sfcl.CommandDataDefinition object at 0x061FA840>) , Command count = 809 ] 
16:13:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:36: [ SetCardRCA(0x1, 0xD555) , Command count = 810 ] 
16:13:36: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:36: [ SetBusWidth(0x1) , Command count = 811 ] 
16:13:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:36: ####CSD Registe 2.0 Values####
16:13:36: CSD_STRUCTURE                                 :0x1
16:13:36: Reserv1                                       :0x0
16:13:36: Time Access 1 TAAC                            :0xe
16:13:36: Time Access 2 NSAC*100                        :0x0
16:13:36: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:36: Card Command Classess CCC                     :0x5b5
16:13:36: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:36: DSR(driver stage register)  DSR_IMP           :0x0
16:13:36: Reserv2                                       :0x0
16:13:36: Device Size C_SIZE                            :0xedc8
16:13:36: Reserv3                                       :0x0
16:13:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:36: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:36: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:36: Reserv4                                       :0x0
16:13:36: Write Speed Factor R2W_FACTOR                 :0x2
16:13:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:36: FILE_FORMAT_GRP                               :0x0
16:13:36: COPY flag                                     :0x1
16:13:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:36: File_Format                                   :0x0
16:13:36: CRC                                           :0x0
16:13:36: ####CSD Registe Values####  

16:13:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:36: ProductSerialNumber = 0x23482900
16:13:36: CardMaximumLBA      = 0x3b72400
16:13:36: CardCapacity        = 32G
16:13:36: Is card secure      = 0
16:13:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:36: [DVTCommonLib]###  LogicalWrite called
16:13:37: [ WriteLba(0x1CFF281, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 812 ] 
16:13:37: [DVTCommonLib]###  LogicalWrite Completed 

16:13:37: [DVTCommonLib]###  LogicalRead called
16:13:39: [ ReadLba(0x1CFF281, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 813 ] 
16:13:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 70 times 

16:13:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 814 ] 
16:13:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F060>, <py_sfcl.CommandDataDefinition object at 0x060C2630>) , Command count = 815 ] 
16:13:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA480>, <py_sfcl.CommandDataDefinition object at 0x061FA450>) , Command count = 816 ] 
16:13:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:39: [ SetCardRCA(0x1, 0xD555) , Command count = 817 ] 
16:13:39: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:39: [ SetBusWidth(0x1) , Command count = 818 ] 
16:13:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:39: ####CSD Registe 2.0 Values####
16:13:39: CSD_STRUCTURE                                 :0x1
16:13:39: Reserv1                                       :0x0
16:13:39: Time Access 1 TAAC                            :0xe
16:13:39: Time Access 2 NSAC*100                        :0x0
16:13:39: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:39: Card Command Classess CCC                     :0x5b5
16:13:39: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:39: DSR(driver stage register)  DSR_IMP           :0x0
16:13:39: Reserv2                                       :0x0
16:13:39: Device Size C_SIZE                            :0xedc8
16:13:39: Reserv3                                       :0x0
16:13:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:39: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:39: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:39: Reserv4                                       :0x0
16:13:39: Write Speed Factor R2W_FACTOR                 :0x2
16:13:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:39: FILE_FORMAT_GRP                               :0x0
16:13:39: COPY flag                                     :0x1
16:13:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:39: File_Format                                   :0x0
16:13:39: CRC                                           :0x0
16:13:39: ####CSD Registe Values####  

16:13:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:39: ProductSerialNumber = 0x23482900
16:13:39: CardMaximumLBA      = 0x3b72400
16:13:39: CardCapacity        = 32G
16:13:39: Is card secure      = 0
16:13:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:39: [DVTCommonLib]###  LogicalWrite called
16:13:41: [ WriteLba(0x37FBD3F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 819 ] 
16:13:41: [DVTCommonLib]###  LogicalWrite Completed 

16:13:41: [DVTCommonLib]###  LogicalRead called
16:13:42: [ ReadLba(0x37FBD3F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 820 ] 
16:13:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 71 times 

16:13:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 821 ] 
16:13:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460DB0>, <py_sfcl.CommandDataDefinition object at 0x061F4090>) , Command count = 822 ] 
16:13:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4690>, <py_sfcl.CommandDataDefinition object at 0x061FA750>) , Command count = 823 ] 
16:13:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:43: [ SetCardRCA(0x1, 0xD555) , Command count = 824 ] 
16:13:43: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:43: [ SetBusWidth(0x1) , Command count = 825 ] 
16:13:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:43: ####CSD Registe 2.0 Values####
16:13:43: CSD_STRUCTURE                                 :0x1
16:13:43: Reserv1                                       :0x0
16:13:43: Time Access 1 TAAC                            :0xe
16:13:43: Time Access 2 NSAC*100                        :0x0
16:13:43: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:43: Card Command Classess CCC                     :0x5b5
16:13:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:43: DSR(driver stage register)  DSR_IMP           :0x0
16:13:43: Reserv2                                       :0x0
16:13:43: Device Size C_SIZE                            :0xedc8
16:13:43: Reserv3                                       :0x0
16:13:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:43: Reserv4                                       :0x0
16:13:43: Write Speed Factor R2W_FACTOR                 :0x2
16:13:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:43: FILE_FORMAT_GRP                               :0x0
16:13:43: COPY flag                                     :0x1
16:13:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:43: File_Format                                   :0x0
16:13:43: CRC                                           :0x0
16:13:43: ####CSD Registe Values####  

16:13:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:43: ProductSerialNumber = 0x23482900
16:13:43: CardMaximumLBA      = 0x3b72400
16:13:43: CardCapacity        = 32G
16:13:43: Is card secure      = 0
16:13:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:43: [DVTCommonLib]###  LogicalWrite called
16:13:44: [ WriteLba(0x187959C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 826 ] 
16:13:44: [DVTCommonLib]###  LogicalWrite Completed 

16:13:44: [DVTCommonLib]###  LogicalRead called
16:13:46: [ ReadLba(0x187959C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 827 ] 
16:13:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 72 times 

16:13:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 828 ] 
16:13:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA510>, <py_sfcl.CommandDataDefinition object at 0x061FA540>) , Command count = 829 ] 
16:13:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E70>, <py_sfcl.CommandDataDefinition object at 0x061F4F00>) , Command count = 830 ] 
16:13:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:46: [ SetCardRCA(0x1, 0xD555) , Command count = 831 ] 
16:13:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:46: [ SetBusWidth(0x1) , Command count = 832 ] 
16:13:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:46: ####CSD Registe 2.0 Values####
16:13:46: CSD_STRUCTURE                                 :0x1
16:13:46: Reserv1                                       :0x0
16:13:46: Time Access 1 TAAC                            :0xe
16:13:46: Time Access 2 NSAC*100                        :0x0
16:13:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:46: Card Command Classess CCC                     :0x5b5
16:13:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:46: DSR(driver stage register)  DSR_IMP           :0x0
16:13:46: Reserv2                                       :0x0
16:13:46: Device Size C_SIZE                            :0xedc8
16:13:46: Reserv3                                       :0x0
16:13:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:46: Reserv4                                       :0x0
16:13:46: Write Speed Factor R2W_FACTOR                 :0x2
16:13:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:46: FILE_FORMAT_GRP                               :0x0
16:13:46: COPY flag                                     :0x1
16:13:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:46: File_Format                                   :0x0
16:13:46: CRC                                           :0x0
16:13:46: ####CSD Registe Values####  

16:13:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:46: ProductSerialNumber = 0x23482900
16:13:46: CardMaximumLBA      = 0x3b72400
16:13:46: CardCapacity        = 32G
16:13:46: Is card secure      = 0
16:13:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:46: [DVTCommonLib]###  LogicalWrite called
16:13:48: [ WriteLba(0x1D5C54E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 833 ] 
16:13:48: [DVTCommonLib]###  LogicalWrite Completed 

16:13:48: [DVTCommonLib]###  LogicalRead called
16:13:49: [ ReadLba(0x1D5C54E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 834 ] 
16:13:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 73 times 

16:13:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 835 ] 
16:13:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA150>, <py_sfcl.CommandDataDefinition object at 0x061F4E40>) , Command count = 836 ] 
16:13:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F45A0>, <py_sfcl.CommandDataDefinition object at 0x061F4570>) , Command count = 837 ] 
16:13:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:49: [ SetCardRCA(0x1, 0xD555) , Command count = 838 ] 
16:13:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:49: [ SetBusWidth(0x1) , Command count = 839 ] 
16:13:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:49: ####CSD Registe 2.0 Values####
16:13:49: CSD_STRUCTURE                                 :0x1
16:13:49: Reserv1                                       :0x0
16:13:49: Time Access 1 TAAC                            :0xe
16:13:49: Time Access 2 NSAC*100                        :0x0
16:13:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:49: Card Command Classess CCC                     :0x5b5
16:13:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:49: DSR(driver stage register)  DSR_IMP           :0x0
16:13:49: Reserv2                                       :0x0
16:13:49: Device Size C_SIZE                            :0xedc8
16:13:49: Reserv3                                       :0x0
16:13:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:49: Reserv4                                       :0x0
16:13:49: Write Speed Factor R2W_FACTOR                 :0x2
16:13:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:49: FILE_FORMAT_GRP                               :0x0
16:13:49: COPY flag                                     :0x1
16:13:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:49: File_Format                                   :0x0
16:13:49: CRC                                           :0x0
16:13:49: ####CSD Registe Values####  

16:13:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:49: ProductSerialNumber = 0x23482900
16:13:49: CardMaximumLBA      = 0x3b72400
16:13:49: CardCapacity        = 32G
16:13:49: Is card secure      = 0
16:13:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:49: [DVTCommonLib]###  LogicalWrite called
16:13:51: [ WriteLba(0x1BD1DB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 840 ] 
16:13:51: [DVTCommonLib]###  LogicalWrite Completed 

16:13:51: [DVTCommonLib]###  LogicalRead called
16:13:53: [ ReadLba(0x1BD1DB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 841 ] 
16:13:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 74 times 

16:13:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 842 ] 
16:13:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4F60>, <py_sfcl.CommandDataDefinition object at 0x061F4A20>) , Command count = 843 ] 
16:13:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6F0>, <py_sfcl.CommandDataDefinition object at 0x061ED780>) , Command count = 844 ] 
16:13:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:53: [ SetCardRCA(0x1, 0xD555) , Command count = 845 ] 
16:13:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:53: [ SetBusWidth(0x1) , Command count = 846 ] 
16:13:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:53: ####CSD Registe 2.0 Values####
16:13:53: CSD_STRUCTURE                                 :0x1
16:13:53: Reserv1                                       :0x0
16:13:53: Time Access 1 TAAC                            :0xe
16:13:53: Time Access 2 NSAC*100                        :0x0
16:13:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:53: Card Command Classess CCC                     :0x5b5
16:13:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:53: DSR(driver stage register)  DSR_IMP           :0x0
16:13:53: Reserv2                                       :0x0
16:13:53: Device Size C_SIZE                            :0xedc8
16:13:53: Reserv3                                       :0x0
16:13:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:53: Reserv4                                       :0x0
16:13:53: Write Speed Factor R2W_FACTOR                 :0x2
16:13:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:53: FILE_FORMAT_GRP                               :0x0
16:13:53: COPY flag                                     :0x1
16:13:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:53: File_Format                                   :0x0
16:13:53: CRC                                           :0x0
16:13:53: ####CSD Registe Values####  

16:13:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:53: ProductSerialNumber = 0x23482900
16:13:53: CardMaximumLBA      = 0x3b72400
16:13:53: CardCapacity        = 32G
16:13:53: Is card secure      = 0
16:13:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:53: [DVTCommonLib]###  LogicalWrite called
16:13:54: [ WriteLba(0x30D48E1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 847 ] 
16:13:54: [DVTCommonLib]###  LogicalWrite Completed 

16:13:54: [DVTCommonLib]###  LogicalRead called
16:13:56: [ ReadLba(0x30D48E1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 848 ] 
16:13:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 75 times 

16:13:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 849 ] 
16:13:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4750>, <py_sfcl.CommandDataDefinition object at 0x061F4330>) , Command count = 850 ] 
16:13:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3C0>, <py_sfcl.CommandDataDefinition object at 0x061ED4E0>) , Command count = 851 ] 
16:13:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:56: [ SetCardRCA(0x1, 0xD555) , Command count = 852 ] 
16:13:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:56: [ SetBusWidth(0x1) , Command count = 853 ] 
16:13:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:56: ####CSD Registe 2.0 Values####
16:13:56: CSD_STRUCTURE                                 :0x1
16:13:56: Reserv1                                       :0x0
16:13:56: Time Access 1 TAAC                            :0xe
16:13:56: Time Access 2 NSAC*100                        :0x0
16:13:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:56: Card Command Classess CCC                     :0x5b5
16:13:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:56: DSR(driver stage register)  DSR_IMP           :0x0
16:13:56: Reserv2                                       :0x0
16:13:56: Device Size C_SIZE                            :0xedc8
16:13:56: Reserv3                                       :0x0
16:13:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:56: Reserv4                                       :0x0
16:13:56: Write Speed Factor R2W_FACTOR                 :0x2
16:13:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:56: FILE_FORMAT_GRP                               :0x0
16:13:56: COPY flag                                     :0x1
16:13:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:56: File_Format                                   :0x0
16:13:56: CRC                                           :0x0
16:13:56: ####CSD Registe Values####  

16:13:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:56: ProductSerialNumber = 0x23482900
16:13:56: CardMaximumLBA      = 0x3b72400
16:13:56: CardCapacity        = 32G
16:13:56: Is card secure      = 0
16:13:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:56: [DVTCommonLib]###  LogicalWrite called
16:13:58: [ WriteLba(0xFDED0A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 854 ] 
16:13:58: [DVTCommonLib]###  LogicalWrite Completed 

16:13:58: [DVTCommonLib]###  LogicalRead called
16:13:59: [ ReadLba(0xFDED0A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 855 ] 
16:13:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:13:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:13:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 76 times 

16:13:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:13:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:13:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 856 ] 
16:13:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:13:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:13:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:13:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:13:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:13:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA80>, <py_sfcl.CommandDataDefinition object at 0x061ED4B0>) , Command count = 857 ] 
16:13:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:13:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAF30>, <py_sfcl.CommandDataDefinition object at 0x061EAFC0>) , Command count = 858 ] 
16:13:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:13:59: [ SetCardRCA(0x1, 0xD555) , Command count = 859 ] 
16:13:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:13:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:13:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:13:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:13:59: [ SetBusWidth(0x1) , Command count = 860 ] 
16:13:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:13:59: ####CSD Registe 2.0 Values####
16:13:59: CSD_STRUCTURE                                 :0x1
16:13:59: Reserv1                                       :0x0
16:13:59: Time Access 1 TAAC                            :0xe
16:13:59: Time Access 2 NSAC*100                        :0x0
16:13:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:13:59: Card Command Classess CCC                     :0x5b5
16:13:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:13:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:13:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:13:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:13:59: DSR(driver stage register)  DSR_IMP           :0x0
16:13:59: Reserv2                                       :0x0
16:13:59: Device Size C_SIZE                            :0xedc8
16:13:59: Reserv3                                       :0x0
16:13:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:13:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:13:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:13:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:13:59: Reserv4                                       :0x0
16:13:59: Write Speed Factor R2W_FACTOR                 :0x2
16:13:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:13:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:13:59: FILE_FORMAT_GRP                               :0x0
16:13:59: COPY flag                                     :0x1
16:13:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:13:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:13:59: File_Format                                   :0x0
16:13:59: CRC                                           :0x0
16:13:59: ####CSD Registe Values####  

16:13:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:13:59: ProductSerialNumber = 0x23482900
16:13:59: CardMaximumLBA      = 0x3b72400
16:13:59: CardCapacity        = 32G
16:13:59: Is card secure      = 0
16:13:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:13:59: [DVTCommonLib]###  LogicalWrite called
16:14:01: [ WriteLba(0x252322F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 861 ] 
16:14:01: [DVTCommonLib]###  LogicalWrite Completed 

16:14:01: [DVTCommonLib]###  LogicalRead called
16:14:03: [ ReadLba(0x252322F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 862 ] 
16:14:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 77 times 

16:14:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 863 ] 
16:14:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x061EAC60>) , Command count = 864 ] 
16:14:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA150>, <py_sfcl.CommandDataDefinition object at 0x061EAB70>) , Command count = 865 ] 
16:14:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:03: [ SetCardRCA(0x1, 0xD555) , Command count = 866 ] 
16:14:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:03: [ SetBusWidth(0x1) , Command count = 867 ] 
16:14:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:03: ####CSD Registe 2.0 Values####
16:14:03: CSD_STRUCTURE                                 :0x1
16:14:03: Reserv1                                       :0x0
16:14:03: Time Access 1 TAAC                            :0xe
16:14:03: Time Access 2 NSAC*100                        :0x0
16:14:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:03: Card Command Classess CCC                     :0x5b5
16:14:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:03: DSR(driver stage register)  DSR_IMP           :0x0
16:14:03: Reserv2                                       :0x0
16:14:03: Device Size C_SIZE                            :0xedc8
16:14:03: Reserv3                                       :0x0
16:14:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:03: Reserv4                                       :0x0
16:14:03: Write Speed Factor R2W_FACTOR                 :0x2
16:14:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:03: FILE_FORMAT_GRP                               :0x0
16:14:03: COPY flag                                     :0x1
16:14:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:03: File_Format                                   :0x0
16:14:03: CRC                                           :0x0
16:14:03: ####CSD Registe Values####  

16:14:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:03: ProductSerialNumber = 0x23482900
16:14:03: CardMaximumLBA      = 0x3b72400
16:14:03: CardCapacity        = 32G
16:14:03: Is card secure      = 0
16:14:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:03: [DVTCommonLib]###  LogicalWrite called
16:14:04: [ WriteLba(0xD56348, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 868 ] 
16:14:04: [DVTCommonLib]###  LogicalWrite Completed 

16:14:04: [DVTCommonLib]###  LogicalRead called
16:14:06: [ ReadLba(0xD56348, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 869 ] 
16:14:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 78 times 

16:14:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 870 ] 
16:14:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA7E0>, <py_sfcl.CommandDataDefinition object at 0x061EAF90>) , Command count = 871 ] 
16:14:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA540>, <py_sfcl.CommandDataDefinition object at 0x061EA480>) , Command count = 872 ] 
16:14:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:06: [ SetCardRCA(0x1, 0xD555) , Command count = 873 ] 
16:14:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:06: [ SetBusWidth(0x1) , Command count = 874 ] 
16:14:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:06: ####CSD Registe 2.0 Values####
16:14:06: CSD_STRUCTURE                                 :0x1
16:14:06: Reserv1                                       :0x0
16:14:06: Time Access 1 TAAC                            :0xe
16:14:06: Time Access 2 NSAC*100                        :0x0
16:14:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:06: Card Command Classess CCC                     :0x5b5
16:14:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:06: DSR(driver stage register)  DSR_IMP           :0x0
16:14:06: Reserv2                                       :0x0
16:14:06: Device Size C_SIZE                            :0xedc8
16:14:06: Reserv3                                       :0x0
16:14:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:06: Reserv4                                       :0x0
16:14:06: Write Speed Factor R2W_FACTOR                 :0x2
16:14:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:06: FILE_FORMAT_GRP                               :0x0
16:14:06: COPY flag                                     :0x1
16:14:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:06: File_Format                                   :0x0
16:14:06: CRC                                           :0x0
16:14:06: ####CSD Registe Values####  

16:14:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:06: ProductSerialNumber = 0x23482900
16:14:06: CardMaximumLBA      = 0x3b72400
16:14:06: CardCapacity        = 32G
16:14:06: Is card secure      = 0
16:14:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:06: [DVTCommonLib]###  LogicalWrite called
16:14:08: [ WriteLba(0xF0CC63, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 875 ] 
16:14:08: [DVTCommonLib]###  LogicalWrite Completed 

16:14:08: [DVTCommonLib]###  LogicalRead called
16:14:09: [ ReadLba(0xF0CC63, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 876 ] 
16:14:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 79 times 

16:14:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 877 ] 
16:14:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA0C0>, <py_sfcl.CommandDataDefinition object at 0x061EA030>) , Command count = 878 ] 
16:14:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA930>, <py_sfcl.CommandDataDefinition object at 0x061EA7B0>) , Command count = 879 ] 
16:14:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:09: [ SetCardRCA(0x1, 0xD555) , Command count = 880 ] 
16:14:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:09: [ SetBusWidth(0x1) , Command count = 881 ] 
16:14:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:09: ####CSD Registe 2.0 Values####
16:14:09: CSD_STRUCTURE                                 :0x1
16:14:09: Reserv1                                       :0x0
16:14:09: Time Access 1 TAAC                            :0xe
16:14:09: Time Access 2 NSAC*100                        :0x0
16:14:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:09: Card Command Classess CCC                     :0x5b5
16:14:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:09: DSR(driver stage register)  DSR_IMP           :0x0
16:14:09: Reserv2                                       :0x0
16:14:09: Device Size C_SIZE                            :0xedc8
16:14:09: Reserv3                                       :0x0
16:14:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:09: Reserv4                                       :0x0
16:14:09: Write Speed Factor R2W_FACTOR                 :0x2
16:14:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:09: FILE_FORMAT_GRP                               :0x0
16:14:09: COPY flag                                     :0x1
16:14:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:09: File_Format                                   :0x0
16:14:09: CRC                                           :0x0
16:14:09: ####CSD Registe Values####  

16:14:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:09: ProductSerialNumber = 0x23482900
16:14:09: CardMaximumLBA      = 0x3b72400
16:14:09: CardCapacity        = 32G
16:14:09: Is card secure      = 0
16:14:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:09: [DVTCommonLib]###  LogicalWrite called
16:14:11: [ WriteLba(0x388C0EF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 882 ] 
16:14:11: [DVTCommonLib]###  LogicalWrite Completed 

16:14:11: [DVTCommonLib]###  LogicalRead called
16:14:13: [ ReadLba(0x388C0EF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 883 ] 
16:14:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 80 times 

16:14:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 884 ] 
16:14:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA4B0>, <py_sfcl.CommandDataDefinition object at 0x061EA420>) , Command count = 885 ] 
16:14:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAA50>, <py_sfcl.CommandDataDefinition object at 0x061EAAE0>) , Command count = 886 ] 
16:14:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:13: [ SetCardRCA(0x1, 0xD555) , Command count = 887 ] 
16:14:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:13: [ SetBusWidth(0x1) , Command count = 888 ] 
16:14:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:13: ####CSD Registe 2.0 Values####
16:14:13: CSD_STRUCTURE                                 :0x1
16:14:13: Reserv1                                       :0x0
16:14:13: Time Access 1 TAAC                            :0xe
16:14:13: Time Access 2 NSAC*100                        :0x0
16:14:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:13: Card Command Classess CCC                     :0x5b5
16:14:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:13: DSR(driver stage register)  DSR_IMP           :0x0
16:14:13: Reserv2                                       :0x0
16:14:13: Device Size C_SIZE                            :0xedc8
16:14:13: Reserv3                                       :0x0
16:14:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:13: Reserv4                                       :0x0
16:14:13: Write Speed Factor R2W_FACTOR                 :0x2
16:14:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:13: FILE_FORMAT_GRP                               :0x0
16:14:13: COPY flag                                     :0x1
16:14:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:13: File_Format                                   :0x0
16:14:13: CRC                                           :0x0
16:14:13: ####CSD Registe Values####  

16:14:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:13: ProductSerialNumber = 0x23482900
16:14:13: CardMaximumLBA      = 0x3b72400
16:14:13: CardCapacity        = 32G
16:14:13: Is card secure      = 0
16:14:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:13: [DVTCommonLib]###  LogicalWrite called
16:14:15: [ WriteLba(0x1D4A036, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 889 ] 
16:14:15: [DVTCommonLib]###  LogicalWrite Completed 

16:14:15: [DVTCommonLib]###  LogicalRead called
16:14:16: [ ReadLba(0x1D4A036, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 890 ] 
16:14:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 81 times 

16:14:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 891 ] 
16:14:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA8A0>, <py_sfcl.CommandDataDefinition object at 0x061EA810>) , Command count = 892 ] 
16:14:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED060>, <py_sfcl.CommandDataDefinition object at 0x061EAD80>) , Command count = 893 ] 
16:14:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:16: [ SetCardRCA(0x1, 0xD555) , Command count = 894 ] 
16:14:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:16: [ SetBusWidth(0x1) , Command count = 895 ] 
16:14:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:16: ####CSD Registe 2.0 Values####
16:14:16: CSD_STRUCTURE                                 :0x1
16:14:16: Reserv1                                       :0x0
16:14:16: Time Access 1 TAAC                            :0xe
16:14:16: Time Access 2 NSAC*100                        :0x0
16:14:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:16: Card Command Classess CCC                     :0x5b5
16:14:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:16: DSR(driver stage register)  DSR_IMP           :0x0
16:14:16: Reserv2                                       :0x0
16:14:16: Device Size C_SIZE                            :0xedc8
16:14:16: Reserv3                                       :0x0
16:14:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:16: Reserv4                                       :0x0
16:14:16: Write Speed Factor R2W_FACTOR                 :0x2
16:14:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:16: FILE_FORMAT_GRP                               :0x0
16:14:16: COPY flag                                     :0x1
16:14:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:16: File_Format                                   :0x0
16:14:16: CRC                                           :0x0
16:14:16: ####CSD Registe Values####  

16:14:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:16: ProductSerialNumber = 0x23482900
16:14:16: CardMaximumLBA      = 0x3b72400
16:14:16: CardCapacity        = 32G
16:14:16: Is card secure      = 0
16:14:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:16: [DVTCommonLib]###  LogicalWrite called
16:14:18: [ WriteLba(0x167583D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 896 ] 
16:14:18: [DVTCommonLib]###  LogicalWrite Completed 

16:14:18: [DVTCommonLib]###  LogicalRead called
16:14:19: [ ReadLba(0x167583D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 897 ] 
16:14:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 82 times 

16:14:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 898 ] 
16:14:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 899 ] 
16:14:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x061EABD0>) , Command count = 900 ] 
16:14:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:20: [ SetCardRCA(0x1, 0xD555) , Command count = 901 ] 
16:14:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:20: [ SetBusWidth(0x1) , Command count = 902 ] 
16:14:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:20: ####CSD Registe 2.0 Values####
16:14:20: CSD_STRUCTURE                                 :0x1
16:14:20: Reserv1                                       :0x0
16:14:20: Time Access 1 TAAC                            :0xe
16:14:20: Time Access 2 NSAC*100                        :0x0
16:14:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:20: Card Command Classess CCC                     :0x5b5
16:14:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:20: DSR(driver stage register)  DSR_IMP           :0x0
16:14:20: Reserv2                                       :0x0
16:14:20: Device Size C_SIZE                            :0xedc8
16:14:20: Reserv3                                       :0x0
16:14:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:20: Reserv4                                       :0x0
16:14:20: Write Speed Factor R2W_FACTOR                 :0x2
16:14:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:20: FILE_FORMAT_GRP                               :0x0
16:14:20: COPY flag                                     :0x1
16:14:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:20: File_Format                                   :0x0
16:14:20: CRC                                           :0x0
16:14:20: ####CSD Registe Values####  

16:14:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:20: ProductSerialNumber = 0x23482900
16:14:20: CardMaximumLBA      = 0x3b72400
16:14:20: CardCapacity        = 32G
16:14:20: Is card secure      = 0
16:14:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:20: [DVTCommonLib]###  LogicalWrite called
16:14:21: [ WriteLba(0x2962A00, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 903 ] 
16:14:21: [DVTCommonLib]###  LogicalWrite Completed 

16:14:21: [DVTCommonLib]###  LogicalRead called
16:14:23: [ ReadLba(0x2962A00, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 904 ] 
16:14:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 83 times 

16:14:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 905 ] 
16:14:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x061ED2A0>) , Command count = 906 ] 
16:14:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x061EABD0>) , Command count = 907 ] 
16:14:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:23: [ SetCardRCA(0x1, 0xD555) , Command count = 908 ] 
16:14:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:23: [ SetBusWidth(0x1) , Command count = 909 ] 
16:14:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:23: ####CSD Registe 2.0 Values####
16:14:23: CSD_STRUCTURE                                 :0x1
16:14:23: Reserv1                                       :0x0
16:14:23: Time Access 1 TAAC                            :0xe
16:14:23: Time Access 2 NSAC*100                        :0x0
16:14:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:23: Card Command Classess CCC                     :0x5b5
16:14:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:23: DSR(driver stage register)  DSR_IMP           :0x0
16:14:23: Reserv2                                       :0x0
16:14:23: Device Size C_SIZE                            :0xedc8
16:14:23: Reserv3                                       :0x0
16:14:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:23: Reserv4                                       :0x0
16:14:23: Write Speed Factor R2W_FACTOR                 :0x2
16:14:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:23: FILE_FORMAT_GRP                               :0x0
16:14:23: COPY flag                                     :0x1
16:14:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:23: File_Format                                   :0x0
16:14:23: CRC                                           :0x0
16:14:23: ####CSD Registe Values####  

16:14:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:23: ProductSerialNumber = 0x23482900
16:14:23: CardMaximumLBA      = 0x3b72400
16:14:23: CardCapacity        = 32G
16:14:23: Is card secure      = 0
16:14:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:23: [DVTCommonLib]###  LogicalWrite called
16:14:25: [ WriteLba(0x1ECDB36, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 910 ] 
16:14:25: [DVTCommonLib]###  LogicalWrite Completed 

16:14:25: [DVTCommonLib]###  LogicalRead called
16:14:26: [ ReadLba(0x1ECDB36, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 911 ] 
16:14:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 84 times 

16:14:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 912 ] 
16:14:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x061ED240>) , Command count = 913 ] 
16:14:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py_sfcl.CommandDataDefinition object at 0x061ED9C0>) , Command count = 914 ] 
16:14:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:26: [ SetCardRCA(0x1, 0xD555) , Command count = 915 ] 
16:14:26: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:26: [ SetBusWidth(0x1) , Command count = 916 ] 
16:14:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:26: ####CSD Registe 2.0 Values####
16:14:26: CSD_STRUCTURE                                 :0x1
16:14:26: Reserv1                                       :0x0
16:14:26: Time Access 1 TAAC                            :0xe
16:14:26: Time Access 2 NSAC*100                        :0x0
16:14:26: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:26: Card Command Classess CCC                     :0x5b5
16:14:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:26: DSR(driver stage register)  DSR_IMP           :0x0
16:14:26: Reserv2                                       :0x0
16:14:26: Device Size C_SIZE                            :0xedc8
16:14:26: Reserv3                                       :0x0
16:14:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:26: Reserv4                                       :0x0
16:14:26: Write Speed Factor R2W_FACTOR                 :0x2
16:14:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:26: FILE_FORMAT_GRP                               :0x0
16:14:26: COPY flag                                     :0x1
16:14:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:26: File_Format                                   :0x0
16:14:26: CRC                                           :0x0
16:14:26: ####CSD Registe Values####  

16:14:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:26: ProductSerialNumber = 0x23482900
16:14:26: CardMaximumLBA      = 0x3b72400
16:14:26: CardCapacity        = 32G
16:14:26: Is card secure      = 0
16:14:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:26: [DVTCommonLib]###  LogicalWrite called
16:14:28: [ WriteLba(0x2566F65, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 917 ] 
16:14:28: [DVTCommonLib]###  LogicalWrite Completed 

16:14:28: [DVTCommonLib]###  LogicalRead called
16:14:30: [ ReadLba(0x2566F65, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 918 ] 
16:14:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 85 times 

16:14:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 919 ] 
16:14:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061ED630>) , Command count = 920 ] 
16:14:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x061EDED0>) , Command count = 921 ] 
16:14:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:30: [ SetCardRCA(0x1, 0xD555) , Command count = 922 ] 
16:14:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:30: [ SetBusWidth(0x1) , Command count = 923 ] 
16:14:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:30: ####CSD Registe 2.0 Values####
16:14:30: CSD_STRUCTURE                                 :0x1
16:14:30: Reserv1                                       :0x0
16:14:30: Time Access 1 TAAC                            :0xe
16:14:30: Time Access 2 NSAC*100                        :0x0
16:14:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:30: Card Command Classess CCC                     :0x5b5
16:14:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:30: DSR(driver stage register)  DSR_IMP           :0x0
16:14:30: Reserv2                                       :0x0
16:14:30: Device Size C_SIZE                            :0xedc8
16:14:30: Reserv3                                       :0x0
16:14:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:30: Reserv4                                       :0x0
16:14:30: Write Speed Factor R2W_FACTOR                 :0x2
16:14:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:30: FILE_FORMAT_GRP                               :0x0
16:14:30: COPY flag                                     :0x1
16:14:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:30: File_Format                                   :0x0
16:14:30: CRC                                           :0x0
16:14:30: ####CSD Registe Values####  

16:14:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:30: ProductSerialNumber = 0x23482900
16:14:30: CardMaximumLBA      = 0x3b72400
16:14:30: CardCapacity        = 32G
16:14:30: Is card secure      = 0
16:14:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:30: [DVTCommonLib]###  LogicalWrite called
16:14:31: [ WriteLba(0x2F7E73, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 924 ] 
16:14:31: [DVTCommonLib]###  LogicalWrite Completed 

16:14:31: [DVTCommonLib]###  LogicalRead called
16:14:33: [ ReadLba(0x2F7E73, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 925 ] 
16:14:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 86 times 

16:14:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 926 ] 
16:14:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 927 ] 
16:14:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4360>, <py_sfcl.CommandDataDefinition object at 0x061EDA20>) , Command count = 928 ] 
16:14:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:33: [ SetCardRCA(0x1, 0xD555) , Command count = 929 ] 
16:14:33: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:33: [ SetBusWidth(0x1) , Command count = 930 ] 
16:14:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:33: ####CSD Registe 2.0 Values####
16:14:33: CSD_STRUCTURE                                 :0x1
16:14:33: Reserv1                                       :0x0
16:14:33: Time Access 1 TAAC                            :0xe
16:14:33: Time Access 2 NSAC*100                        :0x0
16:14:33: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:33: Card Command Classess CCC                     :0x5b5
16:14:33: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:33: DSR(driver stage register)  DSR_IMP           :0x0
16:14:33: Reserv2                                       :0x0
16:14:33: Device Size C_SIZE                            :0xedc8
16:14:33: Reserv3                                       :0x0
16:14:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:33: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:33: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:33: Reserv4                                       :0x0
16:14:33: Write Speed Factor R2W_FACTOR                 :0x2
16:14:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:33: FILE_FORMAT_GRP                               :0x0
16:14:33: COPY flag                                     :0x1
16:14:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:33: File_Format                                   :0x0
16:14:33: CRC                                           :0x0
16:14:33: ####CSD Registe Values####  

16:14:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:33: ProductSerialNumber = 0x23482900
16:14:33: CardMaximumLBA      = 0x3b72400
16:14:33: CardCapacity        = 32G
16:14:33: Is card secure      = 0
16:14:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:33: [DVTCommonLib]###  LogicalWrite called
16:14:35: [ WriteLba(0x29358B5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 931 ] 
16:14:35: [DVTCommonLib]###  LogicalWrite Completed 

16:14:35: [DVTCommonLib]###  LogicalRead called
16:14:36: [ ReadLba(0x29358B5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 932 ] 
16:14:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 87 times 

16:14:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 933 ] 
16:14:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F40C0>, <py_sfcl.CommandDataDefinition object at 0x061F4060>) , Command count = 934 ] 
16:14:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4660>, <py_sfcl.CommandDataDefinition object at 0x061F4510>) , Command count = 935 ] 
16:14:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:36: [ SetCardRCA(0x1, 0xD555) , Command count = 936 ] 
16:14:36: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:36: [ SetBusWidth(0x1) , Command count = 937 ] 
16:14:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:36: ####CSD Registe 2.0 Values####
16:14:36: CSD_STRUCTURE                                 :0x1
16:14:36: Reserv1                                       :0x0
16:14:36: Time Access 1 TAAC                            :0xe
16:14:36: Time Access 2 NSAC*100                        :0x0
16:14:36: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:36: Card Command Classess CCC                     :0x5b5
16:14:36: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:36: DSR(driver stage register)  DSR_IMP           :0x0
16:14:36: Reserv2                                       :0x0
16:14:36: Device Size C_SIZE                            :0xedc8
16:14:36: Reserv3                                       :0x0
16:14:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:36: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:36: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:36: Reserv4                                       :0x0
16:14:36: Write Speed Factor R2W_FACTOR                 :0x2
16:14:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:36: FILE_FORMAT_GRP                               :0x0
16:14:36: COPY flag                                     :0x1
16:14:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:36: File_Format                                   :0x0
16:14:36: CRC                                           :0x0
16:14:36: ####CSD Registe Values####  

16:14:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:36: ProductSerialNumber = 0x23482900
16:14:36: CardMaximumLBA      = 0x3b72400
16:14:36: CardCapacity        = 32G
16:14:36: Is card secure      = 0
16:14:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:36: [DVTCommonLib]###  LogicalWrite called
16:14:38: [ WriteLba(0xDC8B6E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 938 ] 
16:14:38: [DVTCommonLib]###  LogicalWrite Completed 

16:14:38: [DVTCommonLib]###  LogicalRead called
16:14:40: [ ReadLba(0xDC8B6E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 939 ] 
16:14:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 88 times 

16:14:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 940 ] 
16:14:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x061F41B0>) , Command count = 941 ] 
16:14:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F49F0>, <py_sfcl.CommandDataDefinition object at 0x061F4870>) , Command count = 942 ] 
16:14:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:40: [ SetCardRCA(0x1, 0xD555) , Command count = 943 ] 
16:14:40: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:40: [ SetBusWidth(0x1) , Command count = 944 ] 
16:14:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:40: ####CSD Registe 2.0 Values####
16:14:40: CSD_STRUCTURE                                 :0x1
16:14:40: Reserv1                                       :0x0
16:14:40: Time Access 1 TAAC                            :0xe
16:14:40: Time Access 2 NSAC*100                        :0x0
16:14:40: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:40: Card Command Classess CCC                     :0x5b5
16:14:40: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:40: DSR(driver stage register)  DSR_IMP           :0x0
16:14:40: Reserv2                                       :0x0
16:14:40: Device Size C_SIZE                            :0xedc8
16:14:40: Reserv3                                       :0x0
16:14:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:40: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:40: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:40: Reserv4                                       :0x0
16:14:40: Write Speed Factor R2W_FACTOR                 :0x2
16:14:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:40: FILE_FORMAT_GRP                               :0x0
16:14:40: COPY flag                                     :0x1
16:14:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:40: File_Format                                   :0x0
16:14:40: CRC                                           :0x0
16:14:40: ####CSD Registe Values####  

16:14:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:40: ProductSerialNumber = 0x23482900
16:14:40: CardMaximumLBA      = 0x3b72400
16:14:40: CardCapacity        = 32G
16:14:40: Is card secure      = 0
16:14:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:40: [DVTCommonLib]###  LogicalWrite called
16:14:41: [ WriteLba(0x9F29E8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 945 ] 
16:14:41: [DVTCommonLib]###  LogicalWrite Completed 

16:14:41: [DVTCommonLib]###  LogicalRead called
16:14:43: [ ReadLba(0x9F29E8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 946 ] 
16:14:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 89 times 

16:14:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 947 ] 
16:14:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4030>, <py_sfcl.CommandDataDefinition object at 0x061F4630>) , Command count = 948 ] 
16:14:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4DB0>, <py_sfcl.CommandDataDefinition object at 0x061F4C00>) , Command count = 949 ] 
16:14:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:43: [ SetCardRCA(0x1, 0xD555) , Command count = 950 ] 
16:14:43: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:43: [ SetBusWidth(0x1) , Command count = 951 ] 
16:14:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:43: ####CSD Registe 2.0 Values####
16:14:43: CSD_STRUCTURE                                 :0x1
16:14:43: Reserv1                                       :0x0
16:14:43: Time Access 1 TAAC                            :0xe
16:14:43: Time Access 2 NSAC*100                        :0x0
16:14:43: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:43: Card Command Classess CCC                     :0x5b5
16:14:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:43: DSR(driver stage register)  DSR_IMP           :0x0
16:14:43: Reserv2                                       :0x0
16:14:43: Device Size C_SIZE                            :0xedc8
16:14:43: Reserv3                                       :0x0
16:14:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:43: Reserv4                                       :0x0
16:14:43: Write Speed Factor R2W_FACTOR                 :0x2
16:14:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:43: FILE_FORMAT_GRP                               :0x0
16:14:43: COPY flag                                     :0x1
16:14:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:43: File_Format                                   :0x0
16:14:43: CRC                                           :0x0
16:14:43: ####CSD Registe Values####  

16:14:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:43: ProductSerialNumber = 0x23482900
16:14:43: CardMaximumLBA      = 0x3b72400
16:14:43: CardCapacity        = 32G
16:14:43: Is card secure      = 0
16:14:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:43: [DVTCommonLib]###  LogicalWrite called
16:14:45: [ WriteLba(0x1F556B4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 952 ] 
16:14:45: [DVTCommonLib]###  LogicalWrite Completed 

16:14:45: [DVTCommonLib]###  LogicalRead called
16:14:46: [ ReadLba(0x1F556B4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 953 ] 
16:14:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 90 times 

16:14:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 954 ] 
16:14:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4960>, <py_sfcl.CommandDataDefinition object at 0x061F48D0>) , Command count = 955 ] 
16:14:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA0C0>, <py_sfcl.CommandDataDefinition object at 0x061F4D50>) , Command count = 956 ] 
16:14:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:46: [ SetCardRCA(0x1, 0xD555) , Command count = 957 ] 
16:14:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:46: [ SetBusWidth(0x1) , Command count = 958 ] 
16:14:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:46: ####CSD Registe 2.0 Values####
16:14:46: CSD_STRUCTURE                                 :0x1
16:14:46: Reserv1                                       :0x0
16:14:46: Time Access 1 TAAC                            :0xe
16:14:46: Time Access 2 NSAC*100                        :0x0
16:14:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:46: Card Command Classess CCC                     :0x5b5
16:14:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:46: DSR(driver stage register)  DSR_IMP           :0x0
16:14:46: Reserv2                                       :0x0
16:14:46: Device Size C_SIZE                            :0xedc8
16:14:46: Reserv3                                       :0x0
16:14:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:46: Reserv4                                       :0x0
16:14:46: Write Speed Factor R2W_FACTOR                 :0x2
16:14:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:46: FILE_FORMAT_GRP                               :0x0
16:14:46: COPY flag                                     :0x1
16:14:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:46: File_Format                                   :0x0
16:14:46: CRC                                           :0x0
16:14:46: ####CSD Registe Values####  

16:14:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:47: ProductSerialNumber = 0x23482900
16:14:47: CardMaximumLBA      = 0x3b72400
16:14:47: CardCapacity        = 32G
16:14:47: Is card secure      = 0
16:14:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:47: [DVTCommonLib]###  LogicalWrite called
16:14:48: [ WriteLba(0x335B5D6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 959 ] 
16:14:48: [DVTCommonLib]###  LogicalWrite Completed 

16:14:48: [DVTCommonLib]###  LogicalRead called
16:14:50: [ ReadLba(0x335B5D6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 960 ] 
16:14:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 91 times 

16:14:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 961 ] 
16:14:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C90>, <py_sfcl.CommandDataDefinition object at 0x061F4BA0>) , Command count = 962 ] 
16:14:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA3C0>, <py_sfcl.CommandDataDefinition object at 0x061FA1E0>) , Command count = 963 ] 
16:14:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:50: [ SetCardRCA(0x1, 0xD555) , Command count = 964 ] 
16:14:50: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:50: [ SetBusWidth(0x1) , Command count = 965 ] 
16:14:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:50: ####CSD Registe 2.0 Values####
16:14:50: CSD_STRUCTURE                                 :0x1
16:14:50: Reserv1                                       :0x0
16:14:50: Time Access 1 TAAC                            :0xe
16:14:50: Time Access 2 NSAC*100                        :0x0
16:14:50: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:50: Card Command Classess CCC                     :0x5b5
16:14:50: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:50: DSR(driver stage register)  DSR_IMP           :0x0
16:14:50: Reserv2                                       :0x0
16:14:50: Device Size C_SIZE                            :0xedc8
16:14:50: Reserv3                                       :0x0
16:14:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:50: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:50: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:50: Reserv4                                       :0x0
16:14:50: Write Speed Factor R2W_FACTOR                 :0x2
16:14:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:50: FILE_FORMAT_GRP                               :0x0
16:14:50: COPY flag                                     :0x1
16:14:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:50: File_Format                                   :0x0
16:14:50: CRC                                           :0x0
16:14:50: ####CSD Registe Values####  

16:14:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:50: ProductSerialNumber = 0x23482900
16:14:50: CardMaximumLBA      = 0x3b72400
16:14:50: CardCapacity        = 32G
16:14:50: Is card secure      = 0
16:14:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:50: [DVTCommonLib]###  LogicalWrite called
16:14:52: [ WriteLba(0x2A74BBA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 966 ] 
16:14:52: [DVTCommonLib]###  LogicalWrite Completed 

16:14:52: [DVTCommonLib]###  LogicalRead called
16:14:53: [ ReadLba(0x2A74BBA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 967 ] 
16:14:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 92 times 

16:14:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 968 ] 
16:14:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4F30>, <py_sfcl.CommandDataDefinition object at 0x061FA300>) , Command count = 969 ] 
16:14:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA7B0>, <py_sfcl.CommandDataDefinition object at 0x061FA630>) , Command count = 970 ] 
16:14:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:53: [ SetCardRCA(0x1, 0xD555) , Command count = 971 ] 
16:14:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:53: [ SetBusWidth(0x1) , Command count = 972 ] 
16:14:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:53: ####CSD Registe 2.0 Values####
16:14:53: CSD_STRUCTURE                                 :0x1
16:14:53: Reserv1                                       :0x0
16:14:53: Time Access 1 TAAC                            :0xe
16:14:53: Time Access 2 NSAC*100                        :0x0
16:14:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:53: Card Command Classess CCC                     :0x5b5
16:14:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:53: DSR(driver stage register)  DSR_IMP           :0x0
16:14:53: Reserv2                                       :0x0
16:14:53: Device Size C_SIZE                            :0xedc8
16:14:53: Reserv3                                       :0x0
16:14:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:53: Reserv4                                       :0x0
16:14:53: Write Speed Factor R2W_FACTOR                 :0x2
16:14:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:53: FILE_FORMAT_GRP                               :0x0
16:14:53: COPY flag                                     :0x1
16:14:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:53: File_Format                                   :0x0
16:14:53: CRC                                           :0x0
16:14:53: ####CSD Registe Values####  

16:14:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:53: ProductSerialNumber = 0x23482900
16:14:53: CardMaximumLBA      = 0x3b72400
16:14:53: CardCapacity        = 32G
16:14:53: Is card secure      = 0
16:14:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:53: [DVTCommonLib]###  LogicalWrite called
16:14:55: [ WriteLba(0x1C48794, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 973 ] 
16:14:55: [DVTCommonLib]###  LogicalWrite Completed 

16:14:55: [DVTCommonLib]###  LogicalRead called
16:14:56: [ ReadLba(0x1C48794, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 974 ] 
16:14:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:14:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:14:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 93 times 

16:14:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:14:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:14:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 975 ] 
16:14:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:14:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:14:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:14:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:14:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:14:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:14:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA330>, <py_sfcl.CommandDataDefinition object at 0x061FA2A0>) , Command count = 976 ] 
16:14:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:14:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAA80>, <py_sfcl.CommandDataDefinition object at 0x061FAA20>) , Command count = 977 ] 
16:14:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:14:57: [ SetCardRCA(0x1, 0xD555) , Command count = 978 ] 
16:14:57: [DVTCommonLib]### Identification :Idenfication of card completed 

16:14:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:14:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:14:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:14:57: [ SetBusWidth(0x1) , Command count = 979 ] 
16:14:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:14:57: ####CSD Registe 2.0 Values####
16:14:57: CSD_STRUCTURE                                 :0x1
16:14:57: Reserv1                                       :0x0
16:14:57: Time Access 1 TAAC                            :0xe
16:14:57: Time Access 2 NSAC*100                        :0x0
16:14:57: Data Transfer Rate TRAN_SPEED                 :0x32
16:14:57: Card Command Classess CCC                     :0x5b5
16:14:57: Max Read Data Block Length  READ_BL_LEN       :0x9
16:14:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:14:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:14:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:14:57: DSR(driver stage register)  DSR_IMP           :0x0
16:14:57: Reserv2                                       :0x0
16:14:57: Device Size C_SIZE                            :0xedc8
16:14:57: Reserv3                                       :0x0
16:14:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:14:57: Erase Sector Size SECTOR_SIZE                 :0x7f
16:14:57: Write Protect Group Size WP_GRP_SIZE          :0x0
16:14:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:14:57: Reserv4                                       :0x0
16:14:57: Write Speed Factor R2W_FACTOR                 :0x2
16:14:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:14:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:14:57: FILE_FORMAT_GRP                               :0x0
16:14:57: COPY flag                                     :0x1
16:14:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:14:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:14:57: File_Format                                   :0x0
16:14:57: CRC                                           :0x0
16:14:57: ####CSD Registe Values####  

16:14:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:14:57: ProductSerialNumber = 0x23482900
16:14:57: CardMaximumLBA      = 0x3b72400
16:14:57: CardCapacity        = 32G
16:14:57: Is card secure      = 0
16:14:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:14:57: [DVTCommonLib]###  LogicalWrite called
16:14:58: [ WriteLba(0x2E8EB5C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 980 ] 
16:14:58: [DVTCommonLib]###  LogicalWrite Completed 

16:14:58: [DVTCommonLib]###  LogicalRead called
16:15:00: [ ReadLba(0x2E8EB5C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 981 ] 
16:15:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 94 times 

16:15:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 982 ] 
16:15:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA720>, <py_sfcl.CommandDataDefinition object at 0x061FA690>) , Command count = 983 ] 
16:15:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FACF0>, <py_sfcl.CommandDataDefinition object at 0x061FAC60>) , Command count = 984 ] 
16:15:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:00: [ SetCardRCA(0x1, 0xD555) , Command count = 985 ] 
16:15:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:00: [ SetBusWidth(0x1) , Command count = 986 ] 
16:15:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:00: ####CSD Registe 2.0 Values####
16:15:00: CSD_STRUCTURE                                 :0x1
16:15:00: Reserv1                                       :0x0
16:15:00: Time Access 1 TAAC                            :0xe
16:15:00: Time Access 2 NSAC*100                        :0x0
16:15:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:00: Card Command Classess CCC                     :0x5b5
16:15:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:00: DSR(driver stage register)  DSR_IMP           :0x0
16:15:00: Reserv2                                       :0x0
16:15:00: Device Size C_SIZE                            :0xedc8
16:15:00: Reserv3                                       :0x0
16:15:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:00: Reserv4                                       :0x0
16:15:00: Write Speed Factor R2W_FACTOR                 :0x2
16:15:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:00: FILE_FORMAT_GRP                               :0x0
16:15:00: COPY flag                                     :0x1
16:15:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:00: File_Format                                   :0x0
16:15:00: CRC                                           :0x0
16:15:00: ####CSD Registe Values####  

16:15:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:00: ProductSerialNumber = 0x23482900
16:15:00: CardMaximumLBA      = 0x3b72400
16:15:00: CardCapacity        = 32G
16:15:00: Is card secure      = 0
16:15:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:00: [DVTCommonLib]###  LogicalWrite called
16:15:02: [ WriteLba(0x2935B54, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 987 ] 
16:15:02: [DVTCommonLib]###  LogicalWrite Completed 

16:15:02: [DVTCommonLib]###  LogicalRead called
16:15:03: [ ReadLba(0x2935B54, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 988 ] 
16:15:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 95 times 

16:15:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 989 ] 
16:15:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 990 ] 
16:15:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE180>, <py_sfcl.CommandDataDefinition object at 0x061FAF90>) , Command count = 991 ] 
16:15:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:03: [ SetCardRCA(0x1, 0xD555) , Command count = 992 ] 
16:15:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:03: [ SetBusWidth(0x1) , Command count = 993 ] 
16:15:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:03: ####CSD Registe 2.0 Values####
16:15:03: CSD_STRUCTURE                                 :0x1
16:15:03: Reserv1                                       :0x0
16:15:03: Time Access 1 TAAC                            :0xe
16:15:03: Time Access 2 NSAC*100                        :0x0
16:15:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:03: Card Command Classess CCC                     :0x5b5
16:15:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:03: DSR(driver stage register)  DSR_IMP           :0x0
16:15:03: Reserv2                                       :0x0
16:15:03: Device Size C_SIZE                            :0xedc8
16:15:03: Reserv3                                       :0x0
16:15:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:03: Reserv4                                       :0x0
16:15:03: Write Speed Factor R2W_FACTOR                 :0x2
16:15:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:03: FILE_FORMAT_GRP                               :0x0
16:15:03: COPY flag                                     :0x1
16:15:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:03: File_Format                                   :0x0
16:15:03: CRC                                           :0x0
16:15:03: ####CSD Registe Values####  

16:15:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:03: ProductSerialNumber = 0x23482900
16:15:03: CardMaximumLBA      = 0x3b72400
16:15:03: CardCapacity        = 32G
16:15:03: Is card secure      = 0
16:15:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:03: [DVTCommonLib]###  LogicalWrite called
16:15:05: [ WriteLba(0x2B3692E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 994 ] 
16:15:05: [DVTCommonLib]###  LogicalWrite Completed 

16:15:05: [DVTCommonLib]###  LogicalRead called
16:15:07: [ ReadLba(0x2B3692E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 995 ] 
16:15:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 96 times 

16:15:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 996 ] 
16:15:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE030>, <py_sfcl.CommandDataDefinition object at 0x061FE3F0>) , Command count = 997 ] 
16:15:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE570>, <py_sfcl.CommandDataDefinition object at 0x061FAAB0>) , Command count = 998 ] 
16:15:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:07: [ SetCardRCA(0x1, 0xD555) , Command count = 999 ] 
16:15:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:07: [ SetBusWidth(0x1) , Command count = 1000 ] 
16:15:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:07: ####CSD Registe 2.0 Values####
16:15:07: CSD_STRUCTURE                                 :0x1
16:15:07: Reserv1                                       :0x0
16:15:07: Time Access 1 TAAC                            :0xe
16:15:07: Time Access 2 NSAC*100                        :0x0
16:15:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:07: Card Command Classess CCC                     :0x5b5
16:15:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:07: DSR(driver stage register)  DSR_IMP           :0x0
16:15:07: Reserv2                                       :0x0
16:15:07: Device Size C_SIZE                            :0xedc8
16:15:07: Reserv3                                       :0x0
16:15:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:07: Reserv4                                       :0x0
16:15:07: Write Speed Factor R2W_FACTOR                 :0x2
16:15:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:07: FILE_FORMAT_GRP                               :0x0
16:15:07: COPY flag                                     :0x1
16:15:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:07: File_Format                                   :0x0
16:15:07: CRC                                           :0x0
16:15:07: ####CSD Registe Values####  

16:15:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:07: ProductSerialNumber = 0x23482900
16:15:07: CardMaximumLBA      = 0x3b72400
16:15:07: CardCapacity        = 32G
16:15:07: Is card secure      = 0
16:15:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:07: [DVTCommonLib]###  LogicalWrite called
16:15:08: [ WriteLba(0x8C4698, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1001 ] 
16:15:08: [DVTCommonLib]###  LogicalWrite Completed 

16:15:08: [DVTCommonLib]###  LogicalRead called
16:15:10: [ ReadLba(0x8C4698, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1002 ] 
16:15:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 97 times 

16:15:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1003 ] 
16:15:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0F0>, <py_sfcl.CommandDataDefinition object at 0x061FE060>) , Command count = 1004 ] 
16:15:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE960>, <py_sfcl.CommandDataDefinition object at 0x061FE7B0>) , Command count = 1005 ] 
16:15:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1006 ] 
16:15:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:10: [ SetBusWidth(0x1) , Command count = 1007 ] 
16:15:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:10: ####CSD Registe 2.0 Values####
16:15:10: CSD_STRUCTURE                                 :0x1
16:15:10: Reserv1                                       :0x0
16:15:10: Time Access 1 TAAC                            :0xe
16:15:10: Time Access 2 NSAC*100                        :0x0
16:15:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:10: Card Command Classess CCC                     :0x5b5
16:15:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:10: DSR(driver stage register)  DSR_IMP           :0x0
16:15:10: Reserv2                                       :0x0
16:15:10: Device Size C_SIZE                            :0xedc8
16:15:10: Reserv3                                       :0x0
16:15:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:10: Reserv4                                       :0x0
16:15:10: Write Speed Factor R2W_FACTOR                 :0x2
16:15:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:10: FILE_FORMAT_GRP                               :0x0
16:15:10: COPY flag                                     :0x1
16:15:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:10: File_Format                                   :0x0
16:15:10: CRC                                           :0x0
16:15:10: ####CSD Registe Values####  

16:15:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:10: ProductSerialNumber = 0x23482900
16:15:10: CardMaximumLBA      = 0x3b72400
16:15:10: CardCapacity        = 32G
16:15:10: Is card secure      = 0
16:15:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:10: [DVTCommonLib]###  LogicalWrite called
16:15:12: [ WriteLba(0xBB07B3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1008 ] 
16:15:12: [DVTCommonLib]###  LogicalWrite Completed 

16:15:12: [DVTCommonLib]###  LogicalRead called
16:15:13: [ ReadLba(0xBB07B3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1009 ] 
16:15:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 98 times 

16:15:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1010 ] 
16:15:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FE4E0>) , Command count = 1011 ] 
16:15:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E0F0>, <py_sfcl.CommandDataDefinition object at 0x061FEB10>) , Command count = 1012 ] 
16:15:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1013 ] 
16:15:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:13: [ SetBusWidth(0x1) , Command count = 1014 ] 
16:15:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:13: ####CSD Registe 2.0 Values####
16:15:13: CSD_STRUCTURE                                 :0x1
16:15:13: Reserv1                                       :0x0
16:15:13: Time Access 1 TAAC                            :0xe
16:15:13: Time Access 2 NSAC*100                        :0x0
16:15:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:13: Card Command Classess CCC                     :0x5b5
16:15:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:13: DSR(driver stage register)  DSR_IMP           :0x0
16:15:13: Reserv2                                       :0x0
16:15:13: Device Size C_SIZE                            :0xedc8
16:15:13: Reserv3                                       :0x0
16:15:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:13: Reserv4                                       :0x0
16:15:13: Write Speed Factor R2W_FACTOR                 :0x2
16:15:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:13: FILE_FORMAT_GRP                               :0x0
16:15:13: COPY flag                                     :0x1
16:15:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:13: File_Format                                   :0x0
16:15:13: CRC                                           :0x0
16:15:13: ####CSD Registe Values####  

16:15:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:13: ProductSerialNumber = 0x23482900
16:15:13: CardMaximumLBA      = 0x3b72400
16:15:13: CardCapacity        = 32G
16:15:13: Is card secure      = 0
16:15:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:13: [DVTCommonLib]###  LogicalWrite called
16:15:15: [ WriteLba(0x1BB319A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1015 ] 
16:15:15: [DVTCommonLib]###  LogicalWrite Completed 

16:15:15: [DVTCommonLib]###  LogicalRead called
16:15:17: [ ReadLba(0x1BB319A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1016 ] 
16:15:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 99 times 

16:15:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1017 ] 
16:15:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FE8D0>) , Command count = 1018 ] 
16:15:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE8A0>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 1019 ] 
16:15:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1020 ] 
16:15:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:17: [ SetBusWidth(0x1) , Command count = 1021 ] 
16:15:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:17: ####CSD Registe 2.0 Values####
16:15:17: CSD_STRUCTURE                                 :0x1
16:15:17: Reserv1                                       :0x0
16:15:17: Time Access 1 TAAC                            :0xe
16:15:17: Time Access 2 NSAC*100                        :0x0
16:15:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:17: Card Command Classess CCC                     :0x5b5
16:15:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:17: DSR(driver stage register)  DSR_IMP           :0x0
16:15:17: Reserv2                                       :0x0
16:15:17: Device Size C_SIZE                            :0xedc8
16:15:17: Reserv3                                       :0x0
16:15:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:17: Reserv4                                       :0x0
16:15:17: Write Speed Factor R2W_FACTOR                 :0x2
16:15:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:17: FILE_FORMAT_GRP                               :0x0
16:15:17: COPY flag                                     :0x1
16:15:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:17: File_Format                                   :0x0
16:15:17: CRC                                           :0x0
16:15:17: ####CSD Registe Values####  

16:15:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:17: ProductSerialNumber = 0x23482900
16:15:17: CardMaximumLBA      = 0x3b72400
16:15:17: CardCapacity        = 32G
16:15:17: Is card secure      = 0
16:15:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:17: [DVTCommonLib]###  LogicalWrite called
16:15:18: [ WriteLba(0x1BB6FAA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1022 ] 
16:15:18: [DVTCommonLib]###  LogicalWrite Completed 

16:15:18: [DVTCommonLib]###  LogicalRead called
16:15:20: [ ReadLba(0x1BB6FAA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1023 ] 
16:15:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 100 times 

16:15:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1024 ] 
16:15:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054413F0>, <py_sfcl.CommandDataDefinition object at 0x0541D7B0>) , Command count = 1025 ] 
16:15:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460A20>, <py_sfcl.CommandDataDefinition object at 0x061FE600>) , Command count = 1026 ] 
16:15:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1027 ] 
16:15:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:20: [ SetBusWidth(0x1) , Command count = 1028 ] 
16:15:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:20: ####CSD Registe 2.0 Values####
16:15:20: CSD_STRUCTURE                                 :0x1
16:15:20: Reserv1                                       :0x0
16:15:20: Time Access 1 TAAC                            :0xe
16:15:20: Time Access 2 NSAC*100                        :0x0
16:15:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:20: Card Command Classess CCC                     :0x5b5
16:15:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:20: DSR(driver stage register)  DSR_IMP           :0x0
16:15:20: Reserv2                                       :0x0
16:15:20: Device Size C_SIZE                            :0xedc8
16:15:20: Reserv3                                       :0x0
16:15:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:20: Reserv4                                       :0x0
16:15:20: Write Speed Factor R2W_FACTOR                 :0x2
16:15:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:20: FILE_FORMAT_GRP                               :0x0
16:15:20: COPY flag                                     :0x1
16:15:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:20: File_Format                                   :0x0
16:15:20: CRC                                           :0x0
16:15:20: ####CSD Registe Values####  

16:15:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:20: ProductSerialNumber = 0x23482900
16:15:20: CardMaximumLBA      = 0x3b72400
16:15:20: CardCapacity        = 32G
16:15:20: Is card secure      = 0
16:15:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:20: [DVTCommonLib]###  LogicalWrite called
16:15:22: [ WriteLba(0x1C12711, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1029 ] 
16:15:22: [DVTCommonLib]###  LogicalWrite Completed 

16:15:22: [DVTCommonLib]###  LogicalRead called
16:15:23: [ ReadLba(0x1C12711, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1030 ] 
16:15:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 101 times 

16:15:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1031 ] 
16:15:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E240>, <py_sfcl.CommandDataDefinition object at 0x0544EC30>) , Command count = 1032 ] 
16:15:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460C60>, <py_sfcl.CommandDataDefinition object at 0x061FE6F0>) , Command count = 1033 ] 
16:15:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1034 ] 
16:15:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:24: [ SetBusWidth(0x1) , Command count = 1035 ] 
16:15:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:24: ####CSD Registe 2.0 Values####
16:15:24: CSD_STRUCTURE                                 :0x1
16:15:24: Reserv1                                       :0x0
16:15:24: Time Access 1 TAAC                            :0xe
16:15:24: Time Access 2 NSAC*100                        :0x0
16:15:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:24: Card Command Classess CCC                     :0x5b5
16:15:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:24: DSR(driver stage register)  DSR_IMP           :0x0
16:15:24: Reserv2                                       :0x0
16:15:24: Device Size C_SIZE                            :0xedc8
16:15:24: Reserv3                                       :0x0
16:15:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:24: Reserv4                                       :0x0
16:15:24: Write Speed Factor R2W_FACTOR                 :0x2
16:15:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:24: FILE_FORMAT_GRP                               :0x0
16:15:24: COPY flag                                     :0x1
16:15:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:24: File_Format                                   :0x0
16:15:24: CRC                                           :0x0
16:15:24: ####CSD Registe Values####  

16:15:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:24: ProductSerialNumber = 0x23482900
16:15:24: CardMaximumLBA      = 0x3b72400
16:15:24: CardCapacity        = 32G
16:15:24: Is card secure      = 0
16:15:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:24: [DVTCommonLib]###  LogicalWrite called
16:15:25: [ WriteLba(0x36A5E00, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1036 ] 
16:15:25: [DVTCommonLib]###  LogicalWrite Completed 

16:15:25: [DVTCommonLib]###  LogicalRead called
16:15:27: [ ReadLba(0x36A5E00, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1037 ] 
16:15:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 102 times 

16:15:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1038 ] 
16:15:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0545AFC0>, <py_sfcl.CommandDataDefinition object at 0x0544EF30>) , Command count = 1039 ] 
16:15:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E210>, <py_sfcl.CommandDataDefinition object at 0x061FE4B0>) , Command count = 1040 ] 
16:15:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1041 ] 
16:15:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:27: [ SetBusWidth(0x1) , Command count = 1042 ] 
16:15:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:27: ####CSD Registe 2.0 Values####
16:15:27: CSD_STRUCTURE                                 :0x1
16:15:27: Reserv1                                       :0x0
16:15:27: Time Access 1 TAAC                            :0xe
16:15:27: Time Access 2 NSAC*100                        :0x0
16:15:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:27: Card Command Classess CCC                     :0x5b5
16:15:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:27: DSR(driver stage register)  DSR_IMP           :0x0
16:15:27: Reserv2                                       :0x0
16:15:27: Device Size C_SIZE                            :0xedc8
16:15:27: Reserv3                                       :0x0
16:15:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:27: Reserv4                                       :0x0
16:15:27: Write Speed Factor R2W_FACTOR                 :0x2
16:15:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:27: FILE_FORMAT_GRP                               :0x0
16:15:27: COPY flag                                     :0x1
16:15:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:27: File_Format                                   :0x0
16:15:27: CRC                                           :0x0
16:15:27: ####CSD Registe Values####  

16:15:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:27: ProductSerialNumber = 0x23482900
16:15:27: CardMaximumLBA      = 0x3b72400
16:15:27: CardCapacity        = 32G
16:15:27: Is card secure      = 0
16:15:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:27: [DVTCommonLib]###  LogicalWrite called
16:15:29: [ WriteLba(0x102BDB2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1043 ] 
16:15:29: [DVTCommonLib]###  LogicalWrite Completed 

16:15:29: [DVTCommonLib]###  LogicalRead called
16:15:30: [ ReadLba(0x102BDB2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1044 ] 
16:15:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 103 times 

16:15:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1045 ] 
16:15:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC00>, <py_sfcl.CommandDataDefinition object at 0x05460C30>) , Command count = 1046 ] 
16:15:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2780>, <py_sfcl.CommandDataDefinition object at 0x061FE1E0>) , Command count = 1047 ] 
16:15:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1048 ] 
16:15:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:30: [ SetBusWidth(0x1) , Command count = 1049 ] 
16:15:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:30: ####CSD Registe 2.0 Values####
16:15:30: CSD_STRUCTURE                                 :0x1
16:15:30: Reserv1                                       :0x0
16:15:30: Time Access 1 TAAC                            :0xe
16:15:30: Time Access 2 NSAC*100                        :0x0
16:15:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:30: Card Command Classess CCC                     :0x5b5
16:15:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:30: DSR(driver stage register)  DSR_IMP           :0x0
16:15:30: Reserv2                                       :0x0
16:15:30: Device Size C_SIZE                            :0xedc8
16:15:30: Reserv3                                       :0x0
16:15:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:30: Reserv4                                       :0x0
16:15:30: Write Speed Factor R2W_FACTOR                 :0x2
16:15:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:30: FILE_FORMAT_GRP                               :0x0
16:15:30: COPY flag                                     :0x1
16:15:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:30: File_Format                                   :0x0
16:15:30: CRC                                           :0x0
16:15:30: ####CSD Registe Values####  

16:15:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:30: ProductSerialNumber = 0x23482900
16:15:30: CardMaximumLBA      = 0x3b72400
16:15:30: CardCapacity        = 32G
16:15:30: Is card secure      = 0
16:15:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:30: [DVTCommonLib]###  LogicalWrite called
16:15:32: [ WriteLba(0x13AC5E6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1050 ] 
16:15:32: [DVTCommonLib]###  LogicalWrite Completed 

16:15:32: [DVTCommonLib]###  LogicalRead called
16:15:33: [ ReadLba(0x13AC5E6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1051 ] 
16:15:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 104 times 

16:15:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1052 ] 
16:15:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460FC0>, <py_sfcl.CommandDataDefinition object at 0x05460F30>) , Command count = 1053 ] 
16:15:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAF30>, <py_sfcl.CommandDataDefinition object at 0x061FAFC0>) , Command count = 1054 ] 
16:15:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1055 ] 
16:15:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:34: [ SetBusWidth(0x1) , Command count = 1056 ] 
16:15:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:34: ####CSD Registe 2.0 Values####
16:15:34: CSD_STRUCTURE                                 :0x1
16:15:34: Reserv1                                       :0x0
16:15:34: Time Access 1 TAAC                            :0xe
16:15:34: Time Access 2 NSAC*100                        :0x0
16:15:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:34: Card Command Classess CCC                     :0x5b5
16:15:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:34: DSR(driver stage register)  DSR_IMP           :0x0
16:15:34: Reserv2                                       :0x0
16:15:34: Device Size C_SIZE                            :0xedc8
16:15:34: Reserv3                                       :0x0
16:15:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:34: Reserv4                                       :0x0
16:15:34: Write Speed Factor R2W_FACTOR                 :0x2
16:15:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:34: FILE_FORMAT_GRP                               :0x0
16:15:34: COPY flag                                     :0x1
16:15:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:34: File_Format                                   :0x0
16:15:34: CRC                                           :0x0
16:15:34: ####CSD Registe Values####  

16:15:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:34: ProductSerialNumber = 0x23482900
16:15:34: CardMaximumLBA      = 0x3b72400
16:15:34: CardCapacity        = 32G
16:15:34: Is card secure      = 0
16:15:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:34: [DVTCommonLib]###  LogicalWrite called
16:15:35: [ WriteLba(0xB24E98, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1057 ] 
16:15:35: [DVTCommonLib]###  LogicalWrite Completed 

16:15:35: [DVTCommonLib]###  LogicalRead called
16:15:37: [ ReadLba(0xB24E98, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1058 ] 
16:15:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 105 times 

16:15:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1059 ] 
16:15:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C24B0>, <py_sfcl.CommandDataDefinition object at 0x060C22A0>) , Command count = 1060 ] 
16:15:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA930>, <py_sfcl.CommandDataDefinition object at 0x061FAD20>) , Command count = 1061 ] 
16:15:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1062 ] 
16:15:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:37: [ SetBusWidth(0x1) , Command count = 1063 ] 
16:15:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:37: ####CSD Registe 2.0 Values####
16:15:37: CSD_STRUCTURE                                 :0x1
16:15:37: Reserv1                                       :0x0
16:15:37: Time Access 1 TAAC                            :0xe
16:15:37: Time Access 2 NSAC*100                        :0x0
16:15:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:37: Card Command Classess CCC                     :0x5b5
16:15:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:37: DSR(driver stage register)  DSR_IMP           :0x0
16:15:37: Reserv2                                       :0x0
16:15:37: Device Size C_SIZE                            :0xedc8
16:15:37: Reserv3                                       :0x0
16:15:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:37: Reserv4                                       :0x0
16:15:37: Write Speed Factor R2W_FACTOR                 :0x2
16:15:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:37: FILE_FORMAT_GRP                               :0x0
16:15:37: COPY flag                                     :0x1
16:15:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:37: File_Format                                   :0x0
16:15:37: CRC                                           :0x0
16:15:37: ####CSD Registe Values####  

16:15:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:37: ProductSerialNumber = 0x23482900
16:15:37: CardMaximumLBA      = 0x3b72400
16:15:37: CardCapacity        = 32G
16:15:37: Is card secure      = 0
16:15:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:37: [DVTCommonLib]###  LogicalWrite called
16:15:39: [ WriteLba(0x1D477D6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1064 ] 
16:15:39: [DVTCommonLib]###  LogicalWrite Completed 

16:15:39: [DVTCommonLib]###  LogicalRead called
16:15:40: [ ReadLba(0x1D477D6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1065 ] 
16:15:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 106 times 

16:15:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1066 ] 
16:15:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0613F180>, <py_sfcl.CommandDataDefinition object at 0x0613F060>) , Command count = 1067 ] 
16:15:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F60>, <py_sfcl.CommandDataDefinition object at 0x061FA6F0>) , Command count = 1068 ] 
16:15:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1069 ] 
16:15:40: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:40: [ SetBusWidth(0x1) , Command count = 1070 ] 
16:15:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:40: ####CSD Registe 2.0 Values####
16:15:40: CSD_STRUCTURE                                 :0x1
16:15:40: Reserv1                                       :0x0
16:15:40: Time Access 1 TAAC                            :0xe
16:15:40: Time Access 2 NSAC*100                        :0x0
16:15:40: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:40: Card Command Classess CCC                     :0x5b5
16:15:40: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:40: DSR(driver stage register)  DSR_IMP           :0x0
16:15:40: Reserv2                                       :0x0
16:15:40: Device Size C_SIZE                            :0xedc8
16:15:40: Reserv3                                       :0x0
16:15:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:40: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:40: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:40: Reserv4                                       :0x0
16:15:40: Write Speed Factor R2W_FACTOR                 :0x2
16:15:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:40: FILE_FORMAT_GRP                               :0x0
16:15:40: COPY flag                                     :0x1
16:15:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:40: File_Format                                   :0x0
16:15:40: CRC                                           :0x0
16:15:40: ####CSD Registe Values####  

16:15:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:40: ProductSerialNumber = 0x23482900
16:15:40: CardMaximumLBA      = 0x3b72400
16:15:40: CardCapacity        = 32G
16:15:40: Is card secure      = 0
16:15:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:40: [DVTCommonLib]###  LogicalWrite called
16:15:42: [ WriteLba(0x19E5041, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1071 ] 
16:15:42: [DVTCommonLib]###  LogicalWrite Completed 

16:15:42: [DVTCommonLib]###  LogicalRead called
16:15:44: [ ReadLba(0x19E5041, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1072 ] 
16:15:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 107 times 

16:15:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1073 ] 
16:15:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460DB0>, <py_sfcl.CommandDataDefinition object at 0x061F4090>) , Command count = 1074 ] 
16:15:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4DE0>, <py_sfcl.CommandDataDefinition object at 0x061FA360>) , Command count = 1075 ] 
16:15:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1076 ] 
16:15:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:44: [ SetBusWidth(0x1) , Command count = 1077 ] 
16:15:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:44: ####CSD Registe 2.0 Values####
16:15:44: CSD_STRUCTURE                                 :0x1
16:15:44: Reserv1                                       :0x0
16:15:44: Time Access 1 TAAC                            :0xe
16:15:44: Time Access 2 NSAC*100                        :0x0
16:15:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:44: Card Command Classess CCC                     :0x5b5
16:15:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:44: DSR(driver stage register)  DSR_IMP           :0x0
16:15:44: Reserv2                                       :0x0
16:15:44: Device Size C_SIZE                            :0xedc8
16:15:44: Reserv3                                       :0x0
16:15:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:44: Reserv4                                       :0x0
16:15:44: Write Speed Factor R2W_FACTOR                 :0x2
16:15:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:44: FILE_FORMAT_GRP                               :0x0
16:15:44: COPY flag                                     :0x1
16:15:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:44: File_Format                                   :0x0
16:15:44: CRC                                           :0x0
16:15:44: ####CSD Registe Values####  

16:15:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:44: ProductSerialNumber = 0x23482900
16:15:44: CardMaximumLBA      = 0x3b72400
16:15:44: CardCapacity        = 32G
16:15:44: Is card secure      = 0
16:15:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:44: [DVTCommonLib]###  LogicalWrite called
16:15:45: [ WriteLba(0x3A74E6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1078 ] 
16:15:45: [DVTCommonLib]###  LogicalWrite Completed 

16:15:45: [DVTCommonLib]###  LogicalRead called
16:15:47: [ ReadLba(0x3A74E6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1079 ] 
16:15:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 108 times 

16:15:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1080 ] 
16:15:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA480>, <py_sfcl.CommandDataDefinition object at 0x061FA510>) , Command count = 1081 ] 
16:15:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4A80>, <py_sfcl.CommandDataDefinition object at 0x061F4F90>) , Command count = 1082 ] 
16:15:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1083 ] 
16:15:47: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:47: [ SetBusWidth(0x1) , Command count = 1084 ] 
16:15:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:47: ####CSD Registe 2.0 Values####
16:15:47: CSD_STRUCTURE                                 :0x1
16:15:47: Reserv1                                       :0x0
16:15:47: Time Access 1 TAAC                            :0xe
16:15:47: Time Access 2 NSAC*100                        :0x0
16:15:47: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:47: Card Command Classess CCC                     :0x5b5
16:15:47: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:47: DSR(driver stage register)  DSR_IMP           :0x0
16:15:47: Reserv2                                       :0x0
16:15:47: Device Size C_SIZE                            :0xedc8
16:15:47: Reserv3                                       :0x0
16:15:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:47: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:47: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:47: Reserv4                                       :0x0
16:15:47: Write Speed Factor R2W_FACTOR                 :0x2
16:15:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:47: FILE_FORMAT_GRP                               :0x0
16:15:47: COPY flag                                     :0x1
16:15:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:47: File_Format                                   :0x0
16:15:47: CRC                                           :0x0
16:15:47: ####CSD Registe Values####  

16:15:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:47: ProductSerialNumber = 0x23482900
16:15:47: CardMaximumLBA      = 0x3b72400
16:15:47: CardCapacity        = 32G
16:15:47: Is card secure      = 0
16:15:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:47: [DVTCommonLib]###  LogicalWrite called
16:15:49: [ WriteLba(0x1897E00, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1085 ] 
16:15:49: [DVTCommonLib]###  LogicalWrite Completed 

16:15:49: [DVTCommonLib]###  LogicalRead called
16:15:50: [ ReadLba(0x1897E00, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1086 ] 
16:15:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 109 times 

16:15:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1087 ] 
16:15:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA750>, <py_sfcl.CommandDataDefinition object at 0x061FA150>) , Command count = 1088 ] 
16:15:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4780>, <py_sfcl.CommandDataDefinition object at 0x061F48A0>) , Command count = 1089 ] 
16:15:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1090 ] 
16:15:50: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:50: [ SetBusWidth(0x1) , Command count = 1091 ] 
16:15:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:50: ####CSD Registe 2.0 Values####
16:15:50: CSD_STRUCTURE                                 :0x1
16:15:50: Reserv1                                       :0x0
16:15:50: Time Access 1 TAAC                            :0xe
16:15:50: Time Access 2 NSAC*100                        :0x0
16:15:50: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:50: Card Command Classess CCC                     :0x5b5
16:15:50: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:50: DSR(driver stage register)  DSR_IMP           :0x0
16:15:50: Reserv2                                       :0x0
16:15:50: Device Size C_SIZE                            :0xedc8
16:15:50: Reserv3                                       :0x0
16:15:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:50: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:50: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:50: Reserv4                                       :0x0
16:15:50: Write Speed Factor R2W_FACTOR                 :0x2
16:15:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:50: FILE_FORMAT_GRP                               :0x0
16:15:50: COPY flag                                     :0x1
16:15:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:50: File_Format                                   :0x0
16:15:50: CRC                                           :0x0
16:15:50: ####CSD Registe Values####  

16:15:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:50: ProductSerialNumber = 0x23482900
16:15:50: CardMaximumLBA      = 0x3b72400
16:15:50: CardCapacity        = 32G
16:15:50: Is card secure      = 0
16:15:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:50: [DVTCommonLib]###  LogicalWrite called
16:15:52: [ WriteLba(0x16BE6F9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1092 ] 
16:15:52: [DVTCommonLib]###  LogicalWrite Completed 

16:15:52: [DVTCommonLib]###  LogicalRead called
16:15:54: [ ReadLba(0x16BE6F9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1093 ] 
16:15:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 110 times 

16:15:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1094 ] 
16:15:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E70>, <py_sfcl.CommandDataDefinition object at 0x061F4F60>) , Command count = 1095 ] 
16:15:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061EDAB0>) , Command count = 1096 ] 
16:15:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1097 ] 
16:15:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:54: [ SetBusWidth(0x1) , Command count = 1098 ] 
16:15:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:54: ####CSD Registe 2.0 Values####
16:15:54: CSD_STRUCTURE                                 :0x1
16:15:54: Reserv1                                       :0x0
16:15:54: Time Access 1 TAAC                            :0xe
16:15:54: Time Access 2 NSAC*100                        :0x0
16:15:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:54: Card Command Classess CCC                     :0x5b5
16:15:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:54: DSR(driver stage register)  DSR_IMP           :0x0
16:15:54: Reserv2                                       :0x0
16:15:54: Device Size C_SIZE                            :0xedc8
16:15:54: Reserv3                                       :0x0
16:15:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:54: Reserv4                                       :0x0
16:15:54: Write Speed Factor R2W_FACTOR                 :0x2
16:15:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:54: FILE_FORMAT_GRP                               :0x0
16:15:54: COPY flag                                     :0x1
16:15:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:54: File_Format                                   :0x0
16:15:54: CRC                                           :0x0
16:15:54: ####CSD Registe Values####  

16:15:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:54: ProductSerialNumber = 0x23482900
16:15:54: CardMaximumLBA      = 0x3b72400
16:15:54: CardCapacity        = 32G
16:15:54: Is card secure      = 0
16:15:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:54: [DVTCommonLib]###  LogicalWrite called
16:15:55: [ WriteLba(0x2E22B3C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1099 ] 
16:15:55: [DVTCommonLib]###  LogicalWrite Completed 

16:15:55: [DVTCommonLib]###  LogicalRead called
16:15:57: [ ReadLba(0x2E22B3C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1100 ] 
16:15:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:15:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:15:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 111 times 

16:15:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:15:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:15:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1101 ] 
16:15:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:15:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:15:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:15:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:15:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:15:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:15:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F45A0>, <py_sfcl.CommandDataDefinition object at 0x061F4750>) , Command count = 1102 ] 
16:15:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:15:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3F0>, <py_sfcl.CommandDataDefinition object at 0x061EAC30>) , Command count = 1103 ] 
16:15:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:15:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1104 ] 
16:15:57: [DVTCommonLib]### Identification :Idenfication of card completed 

16:15:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:15:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:15:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:15:57: [ SetBusWidth(0x1) , Command count = 1105 ] 
16:15:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:15:57: ####CSD Registe 2.0 Values####
16:15:57: CSD_STRUCTURE                                 :0x1
16:15:57: Reserv1                                       :0x0
16:15:57: Time Access 1 TAAC                            :0xe
16:15:57: Time Access 2 NSAC*100                        :0x0
16:15:57: Data Transfer Rate TRAN_SPEED                 :0x32
16:15:57: Card Command Classess CCC                     :0x5b5
16:15:57: Max Read Data Block Length  READ_BL_LEN       :0x9
16:15:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:15:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:15:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:15:57: DSR(driver stage register)  DSR_IMP           :0x0
16:15:57: Reserv2                                       :0x0
16:15:57: Device Size C_SIZE                            :0xedc8
16:15:57: Reserv3                                       :0x0
16:15:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:15:57: Erase Sector Size SECTOR_SIZE                 :0x7f
16:15:57: Write Protect Group Size WP_GRP_SIZE          :0x0
16:15:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:15:57: Reserv4                                       :0x0
16:15:57: Write Speed Factor R2W_FACTOR                 :0x2
16:15:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:15:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:15:57: FILE_FORMAT_GRP                               :0x0
16:15:57: COPY flag                                     :0x1
16:15:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:15:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:15:57: File_Format                                   :0x0
16:15:57: CRC                                           :0x0
16:15:57: ####CSD Registe Values####  

16:15:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:15:57: ProductSerialNumber = 0x23482900
16:15:57: CardMaximumLBA      = 0x3b72400
16:15:57: CardCapacity        = 32G
16:15:57: Is card secure      = 0
16:15:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:15:57: [DVTCommonLib]###  LogicalWrite called
16:15:59: [ WriteLba(0x18F7CDC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1106 ] 
16:15:59: [DVTCommonLib]###  LogicalWrite Completed 

16:15:59: [DVTCommonLib]###  LogicalRead called
16:16:00: [ ReadLba(0x18F7CDC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1107 ] 
16:16:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 112 times 

16:16:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1108 ] 
16:16:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6F0>, <py_sfcl.CommandDataDefinition object at 0x061EDA80>) , Command count = 1109 ] 
16:16:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAED0>, <py_sfcl.CommandDataDefinition object at 0x061EAC90>) , Command count = 1110 ] 
16:16:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1111 ] 
16:16:01: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:01: [ SetBusWidth(0x1) , Command count = 1112 ] 
16:16:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:01: ####CSD Registe 2.0 Values####
16:16:01: CSD_STRUCTURE                                 :0x1
16:16:01: Reserv1                                       :0x0
16:16:01: Time Access 1 TAAC                            :0xe
16:16:01: Time Access 2 NSAC*100                        :0x0
16:16:01: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:01: Card Command Classess CCC                     :0x5b5
16:16:01: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:01: DSR(driver stage register)  DSR_IMP           :0x0
16:16:01: Reserv2                                       :0x0
16:16:01: Device Size C_SIZE                            :0xedc8
16:16:01: Reserv3                                       :0x0
16:16:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:01: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:01: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:01: Reserv4                                       :0x0
16:16:01: Write Speed Factor R2W_FACTOR                 :0x2
16:16:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:01: FILE_FORMAT_GRP                               :0x0
16:16:01: COPY flag                                     :0x1
16:16:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:01: File_Format                                   :0x0
16:16:01: CRC                                           :0x0
16:16:01: ####CSD Registe Values####  

16:16:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:01: ProductSerialNumber = 0x23482900
16:16:01: CardMaximumLBA      = 0x3b72400
16:16:01: CardCapacity        = 32G
16:16:01: Is card secure      = 0
16:16:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:01: [DVTCommonLib]###  LogicalWrite called
16:16:02: [ WriteLba(0x28D2D33, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1113 ] 
16:16:02: [DVTCommonLib]###  LogicalWrite Completed 

16:16:02: [DVTCommonLib]###  LogicalRead called
16:16:04: [ ReadLba(0x28D2D33, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1114 ] 
16:16:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 113 times 

16:16:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1115 ] 
16:16:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3C0>, <py_sfcl.CommandDataDefinition object at 0x061ED390>) , Command count = 1116 ] 
16:16:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA1E0>, <py_sfcl.CommandDataDefinition object at 0x061EA120>) , Command count = 1117 ] 
16:16:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1118 ] 
16:16:04: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:04: [ SetBusWidth(0x1) , Command count = 1119 ] 
16:16:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:04: ####CSD Registe 2.0 Values####
16:16:04: CSD_STRUCTURE                                 :0x1
16:16:04: Reserv1                                       :0x0
16:16:04: Time Access 1 TAAC                            :0xe
16:16:04: Time Access 2 NSAC*100                        :0x0
16:16:04: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:04: Card Command Classess CCC                     :0x5b5
16:16:04: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:04: DSR(driver stage register)  DSR_IMP           :0x0
16:16:04: Reserv2                                       :0x0
16:16:04: Device Size C_SIZE                            :0xedc8
16:16:04: Reserv3                                       :0x0
16:16:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:04: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:04: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:04: Reserv4                                       :0x0
16:16:04: Write Speed Factor R2W_FACTOR                 :0x2
16:16:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:04: FILE_FORMAT_GRP                               :0x0
16:16:04: COPY flag                                     :0x1
16:16:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:04: File_Format                                   :0x0
16:16:04: CRC                                           :0x0
16:16:04: ####CSD Registe Values####  

16:16:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:04: ProductSerialNumber = 0x23482900
16:16:04: CardMaximumLBA      = 0x3b72400
16:16:04: CardCapacity        = 32G
16:16:04: Is card secure      = 0
16:16:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:04: [DVTCommonLib]###  LogicalWrite called
16:16:06: [ WriteLba(0x17767C7, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1120 ] 
16:16:06: [DVTCommonLib]###  LogicalWrite Completed 

16:16:06: [DVTCommonLib]###  LogicalRead called
16:16:07: [ ReadLba(0x17767C7, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1121 ] 
16:16:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 114 times 

16:16:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1122 ] 
16:16:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAF30>, <py_sfcl.CommandDataDefinition object at 0x061EA7E0>) , Command count = 1123 ] 
16:16:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA240>, <py_sfcl.CommandDataDefinition object at 0x061EA3C0>) , Command count = 1124 ] 
16:16:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1125 ] 
16:16:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:07: [ SetBusWidth(0x1) , Command count = 1126 ] 
16:16:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:07: ####CSD Registe 2.0 Values####
16:16:07: CSD_STRUCTURE                                 :0x1
16:16:07: Reserv1                                       :0x0
16:16:07: Time Access 1 TAAC                            :0xe
16:16:07: Time Access 2 NSAC*100                        :0x0
16:16:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:07: Card Command Classess CCC                     :0x5b5
16:16:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:07: DSR(driver stage register)  DSR_IMP           :0x0
16:16:07: Reserv2                                       :0x0
16:16:07: Device Size C_SIZE                            :0xedc8
16:16:07: Reserv3                                       :0x0
16:16:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:07: Reserv4                                       :0x0
16:16:07: Write Speed Factor R2W_FACTOR                 :0x2
16:16:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:07: FILE_FORMAT_GRP                               :0x0
16:16:07: COPY flag                                     :0x1
16:16:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:07: File_Format                                   :0x0
16:16:07: CRC                                           :0x0
16:16:07: ####CSD Registe Values####  

16:16:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:07: ProductSerialNumber = 0x23482900
16:16:07: CardMaximumLBA      = 0x3b72400
16:16:07: CardCapacity        = 32G
16:16:07: Is card secure      = 0
16:16:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:07: [DVTCommonLib]###  LogicalWrite called
16:16:09: [ WriteLba(0x2AAB52, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1127 ] 
16:16:09: [DVTCommonLib]###  LogicalWrite Completed 

16:16:09: [DVTCommonLib]###  LogicalRead called
16:16:10: [ ReadLba(0x2AAB52, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1128 ] 
16:16:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 115 times 

16:16:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1129 ] 
16:16:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA150>, <py_sfcl.CommandDataDefinition object at 0x061EA0C0>) , Command count = 1130 ] 
16:16:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA270>, <py_sfcl.CommandDataDefinition object at 0x061EA780>) , Command count = 1131 ] 
16:16:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1132 ] 
16:16:11: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:11: [ SetBusWidth(0x1) , Command count = 1133 ] 
16:16:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:11: ####CSD Registe 2.0 Values####
16:16:11: CSD_STRUCTURE                                 :0x1
16:16:11: Reserv1                                       :0x0
16:16:11: Time Access 1 TAAC                            :0xe
16:16:11: Time Access 2 NSAC*100                        :0x0
16:16:11: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:11: Card Command Classess CCC                     :0x5b5
16:16:11: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:11: DSR(driver stage register)  DSR_IMP           :0x0
16:16:11: Reserv2                                       :0x0
16:16:11: Device Size C_SIZE                            :0xedc8
16:16:11: Reserv3                                       :0x0
16:16:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:11: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:11: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:11: Reserv4                                       :0x0
16:16:11: Write Speed Factor R2W_FACTOR                 :0x2
16:16:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:11: FILE_FORMAT_GRP                               :0x0
16:16:11: COPY flag                                     :0x1
16:16:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:11: File_Format                                   :0x0
16:16:11: CRC                                           :0x0
16:16:11: ####CSD Registe Values####  

16:16:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:11: ProductSerialNumber = 0x23482900
16:16:11: CardMaximumLBA      = 0x3b72400
16:16:11: CardCapacity        = 32G
16:16:11: Is card secure      = 0
16:16:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:11: [DVTCommonLib]###  LogicalWrite called
16:16:12: [ WriteLba(0x956269, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1134 ] 
16:16:12: [DVTCommonLib]###  LogicalWrite Completed 

16:16:12: [DVTCommonLib]###  LogicalRead called
16:16:14: [ ReadLba(0x956269, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1135 ] 
16:16:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 116 times 

16:16:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1136 ] 
16:16:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA540>, <py_sfcl.CommandDataDefinition object at 0x061EA4B0>) , Command count = 1137 ] 
16:16:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA660>, <py_sfcl.CommandDataDefinition object at 0x061EAAB0>) , Command count = 1138 ] 
16:16:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1139 ] 
16:16:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:14: [ SetBusWidth(0x1) , Command count = 1140 ] 
16:16:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:14: ####CSD Registe 2.0 Values####
16:16:14: CSD_STRUCTURE                                 :0x1
16:16:14: Reserv1                                       :0x0
16:16:14: Time Access 1 TAAC                            :0xe
16:16:14: Time Access 2 NSAC*100                        :0x0
16:16:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:14: Card Command Classess CCC                     :0x5b5
16:16:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:14: DSR(driver stage register)  DSR_IMP           :0x0
16:16:14: Reserv2                                       :0x0
16:16:14: Device Size C_SIZE                            :0xedc8
16:16:14: Reserv3                                       :0x0
16:16:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:14: Reserv4                                       :0x0
16:16:14: Write Speed Factor R2W_FACTOR                 :0x2
16:16:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:14: FILE_FORMAT_GRP                               :0x0
16:16:14: COPY flag                                     :0x1
16:16:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:14: File_Format                                   :0x0
16:16:14: CRC                                           :0x0
16:16:14: ####CSD Registe Values####  

16:16:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:14: ProductSerialNumber = 0x23482900
16:16:14: CardMaximumLBA      = 0x3b72400
16:16:14: CardCapacity        = 32G
16:16:14: Is card secure      = 0
16:16:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:14: [DVTCommonLib]###  LogicalWrite called
16:16:16: [ WriteLba(0x124CDA1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1141 ] 
16:16:16: [DVTCommonLib]###  LogicalWrite Completed 

16:16:16: [DVTCommonLib]###  LogicalRead called
16:16:17: [ ReadLba(0x124CDA1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1142 ] 
16:16:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 117 times 

16:16:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1143 ] 
16:16:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA930>, <py_sfcl.CommandDataDefinition object at 0x061EA8A0>) , Command count = 1144 ] 
16:16:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x061EAD50>) , Command count = 1145 ] 
16:16:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1146 ] 
16:16:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:17: [ SetBusWidth(0x1) , Command count = 1147 ] 
16:16:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:17: ####CSD Registe 2.0 Values####
16:16:17: CSD_STRUCTURE                                 :0x1
16:16:17: Reserv1                                       :0x0
16:16:17: Time Access 1 TAAC                            :0xe
16:16:17: Time Access 2 NSAC*100                        :0x0
16:16:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:17: Card Command Classess CCC                     :0x5b5
16:16:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:17: DSR(driver stage register)  DSR_IMP           :0x0
16:16:17: Reserv2                                       :0x0
16:16:17: Device Size C_SIZE                            :0xedc8
16:16:17: Reserv3                                       :0x0
16:16:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:17: Reserv4                                       :0x0
16:16:17: Write Speed Factor R2W_FACTOR                 :0x2
16:16:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:17: FILE_FORMAT_GRP                               :0x0
16:16:17: COPY flag                                     :0x1
16:16:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:17: File_Format                                   :0x0
16:16:17: CRC                                           :0x0
16:16:17: ####CSD Registe Values####  

16:16:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:17: ProductSerialNumber = 0x23482900
16:16:17: CardMaximumLBA      = 0x3b72400
16:16:17: CardCapacity        = 32G
16:16:17: Is card secure      = 0
16:16:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:17: [DVTCommonLib]###  LogicalWrite called
16:16:19: [ WriteLba(0x1323ABD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1148 ] 
16:16:19: [DVTCommonLib]###  LogicalWrite Completed 

16:16:19: [DVTCommonLib]###  LogicalRead called
16:16:21: [ ReadLba(0x1323ABD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1149 ] 
16:16:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 118 times 

16:16:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1150 ] 
16:16:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 1151 ] 
16:16:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED030>, <py_sfcl.CommandDataDefinition object at 0x061EAEA0>) , Command count = 1152 ] 
16:16:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1153 ] 
16:16:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:21: [ SetBusWidth(0x1) , Command count = 1154 ] 
16:16:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:21: ####CSD Registe 2.0 Values####
16:16:21: CSD_STRUCTURE                                 :0x1
16:16:21: Reserv1                                       :0x0
16:16:21: Time Access 1 TAAC                            :0xe
16:16:21: Time Access 2 NSAC*100                        :0x0
16:16:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:21: Card Command Classess CCC                     :0x5b5
16:16:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:21: DSR(driver stage register)  DSR_IMP           :0x0
16:16:21: Reserv2                                       :0x0
16:16:21: Device Size C_SIZE                            :0xedc8
16:16:21: Reserv3                                       :0x0
16:16:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:21: Reserv4                                       :0x0
16:16:21: Write Speed Factor R2W_FACTOR                 :0x2
16:16:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:21: FILE_FORMAT_GRP                               :0x0
16:16:21: COPY flag                                     :0x1
16:16:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:21: File_Format                                   :0x0
16:16:21: CRC                                           :0x0
16:16:21: ####CSD Registe Values####  

16:16:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:21: ProductSerialNumber = 0x23482900
16:16:21: CardMaximumLBA      = 0x3b72400
16:16:21: CardCapacity        = 32G
16:16:21: Is card secure      = 0
16:16:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:21: [DVTCommonLib]###  LogicalWrite called
16:16:22: [ WriteLba(0x143B392, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1155 ] 
16:16:22: [DVTCommonLib]###  LogicalWrite Completed 

16:16:22: [DVTCommonLib]###  LogicalRead called
16:16:24: [ ReadLba(0x143B392, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1156 ] 
16:16:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 119 times 

16:16:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1157 ] 
16:16:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED060>, <py_sfcl.CommandDataDefinition object at 0x061ED330>) , Command count = 1158 ] 
16:16:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA960>, <py_sfcl.CommandDataDefinition object at 0x061EAEA0>) , Command count = 1159 ] 
16:16:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1160 ] 
16:16:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:24: [ SetBusWidth(0x1) , Command count = 1161 ] 
16:16:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:24: ####CSD Registe 2.0 Values####
16:16:24: CSD_STRUCTURE                                 :0x1
16:16:24: Reserv1                                       :0x0
16:16:24: Time Access 1 TAAC                            :0xe
16:16:24: Time Access 2 NSAC*100                        :0x0
16:16:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:24: Card Command Classess CCC                     :0x5b5
16:16:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:24: DSR(driver stage register)  DSR_IMP           :0x0
16:16:24: Reserv2                                       :0x0
16:16:24: Device Size C_SIZE                            :0xedc8
16:16:24: Reserv3                                       :0x0
16:16:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:24: Reserv4                                       :0x0
16:16:24: Write Speed Factor R2W_FACTOR                 :0x2
16:16:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:24: FILE_FORMAT_GRP                               :0x0
16:16:24: COPY flag                                     :0x1
16:16:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:24: File_Format                                   :0x0
16:16:24: CRC                                           :0x0
16:16:24: ####CSD Registe Values####  

16:16:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:24: ProductSerialNumber = 0x23482900
16:16:24: CardMaximumLBA      = 0x3b72400
16:16:24: CardCapacity        = 32G
16:16:24: Is card secure      = 0
16:16:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:24: [DVTCommonLib]###  LogicalWrite called
16:16:26: [ WriteLba(0x39939DB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1162 ] 
16:16:26: [DVTCommonLib]###  LogicalWrite Completed 

16:16:26: [DVTCommonLib]###  LogicalRead called
16:16:27: [ ReadLba(0x39939DB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1163 ] 
16:16:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 120 times 

16:16:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1164 ] 
16:16:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x061ED2D0>) , Command count = 1165 ] 
16:16:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA5D0>, <py_sfcl.CommandDataDefinition object at 0x061EAEA0>) , Command count = 1166 ] 
16:16:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1167 ] 
16:16:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:27: [ SetBusWidth(0x1) , Command count = 1168 ] 
16:16:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:27: ####CSD Registe 2.0 Values####
16:16:27: CSD_STRUCTURE                                 :0x1
16:16:27: Reserv1                                       :0x0
16:16:27: Time Access 1 TAAC                            :0xe
16:16:27: Time Access 2 NSAC*100                        :0x0
16:16:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:27: Card Command Classess CCC                     :0x5b5
16:16:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:27: DSR(driver stage register)  DSR_IMP           :0x0
16:16:27: Reserv2                                       :0x0
16:16:27: Device Size C_SIZE                            :0xedc8
16:16:27: Reserv3                                       :0x0
16:16:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:27: Reserv4                                       :0x0
16:16:27: Write Speed Factor R2W_FACTOR                 :0x2
16:16:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:27: FILE_FORMAT_GRP                               :0x0
16:16:27: COPY flag                                     :0x1
16:16:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:27: File_Format                                   :0x0
16:16:27: CRC                                           :0x0
16:16:27: ####CSD Registe Values####  

16:16:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:27: ProductSerialNumber = 0x23482900
16:16:27: CardMaximumLBA      = 0x3b72400
16:16:27: CardCapacity        = 32G
16:16:27: Is card secure      = 0
16:16:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:27: [DVTCommonLib]###  LogicalWrite called
16:16:29: [ WriteLba(0x194A94, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1169 ] 
16:16:29: [DVTCommonLib]###  LogicalWrite Completed 

16:16:29: [DVTCommonLib]###  LogicalRead called
16:16:31: [ ReadLba(0x194A94, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1170 ] 
16:16:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 121 times 

16:16:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1171 ] 
16:16:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x061ED6C0>) , Command count = 1172 ] 
16:16:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED810>, <py_sfcl.CommandDataDefinition object at 0x061EA5D0>) , Command count = 1173 ] 
16:16:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1174 ] 
16:16:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:31: [ SetBusWidth(0x1) , Command count = 1175 ] 
16:16:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:31: ####CSD Registe 2.0 Values####
16:16:31: CSD_STRUCTURE                                 :0x1
16:16:31: Reserv1                                       :0x0
16:16:31: Time Access 1 TAAC                            :0xe
16:16:31: Time Access 2 NSAC*100                        :0x0
16:16:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:31: Card Command Classess CCC                     :0x5b5
16:16:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:31: DSR(driver stage register)  DSR_IMP           :0x0
16:16:31: Reserv2                                       :0x0
16:16:31: Device Size C_SIZE                            :0xedc8
16:16:31: Reserv3                                       :0x0
16:16:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:31: Reserv4                                       :0x0
16:16:31: Write Speed Factor R2W_FACTOR                 :0x2
16:16:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:31: FILE_FORMAT_GRP                               :0x0
16:16:31: COPY flag                                     :0x1
16:16:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:31: File_Format                                   :0x0
16:16:31: CRC                                           :0x0
16:16:31: ####CSD Registe Values####  

16:16:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:31: ProductSerialNumber = 0x23482900
16:16:31: CardMaximumLBA      = 0x3b72400
16:16:31: CardCapacity        = 32G
16:16:31: Is card secure      = 0
16:16:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:31: [DVTCommonLib]###  LogicalWrite called
16:16:32: [ WriteLba(0x47D5A4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1176 ] 
16:16:32: [DVTCommonLib]###  LogicalWrite Completed 

16:16:32: [DVTCommonLib]###  LogicalRead called
16:16:34: [ ReadLba(0x47D5A4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1177 ] 
16:16:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 122 times 

16:16:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1178 ] 
16:16:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 1179 ] 
16:16:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x061EA2A0>) , Command count = 1180 ] 
16:16:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1181 ] 
16:16:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:34: [ SetBusWidth(0x1) , Command count = 1182 ] 
16:16:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:34: ####CSD Registe 2.0 Values####
16:16:34: CSD_STRUCTURE                                 :0x1
16:16:34: Reserv1                                       :0x0
16:16:34: Time Access 1 TAAC                            :0xe
16:16:34: Time Access 2 NSAC*100                        :0x0
16:16:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:34: Card Command Classess CCC                     :0x5b5
16:16:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:34: DSR(driver stage register)  DSR_IMP           :0x0
16:16:34: Reserv2                                       :0x0
16:16:34: Device Size C_SIZE                            :0xedc8
16:16:34: Reserv3                                       :0x0
16:16:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:34: Reserv4                                       :0x0
16:16:34: Write Speed Factor R2W_FACTOR                 :0x2
16:16:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:34: FILE_FORMAT_GRP                               :0x0
16:16:34: COPY flag                                     :0x1
16:16:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:34: File_Format                                   :0x0
16:16:34: CRC                                           :0x0
16:16:34: ####CSD Registe Values####  

16:16:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:34: ProductSerialNumber = 0x23482900
16:16:34: CardMaximumLBA      = 0x3b72400
16:16:34: CardCapacity        = 32G
16:16:34: Is card secure      = 0
16:16:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:34: [DVTCommonLib]###  LogicalWrite called
16:16:36: [ WriteLba(0x24424C2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1183 ] 
16:16:36: [DVTCommonLib]###  LogicalWrite Completed 

16:16:36: [DVTCommonLib]###  LogicalRead called
16:16:37: [ ReadLba(0x24424C2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1184 ] 
16:16:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 123 times 

16:16:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1185 ] 
16:16:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x061F40C0>) , Command count = 1186 ] 
16:16:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F43F0>, <py_sfcl.CommandDataDefinition object at 0x061F4180>) , Command count = 1187 ] 
16:16:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1188 ] 
16:16:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:38: [ SetBusWidth(0x1) , Command count = 1189 ] 
16:16:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:38: ####CSD Registe 2.0 Values####
16:16:38: CSD_STRUCTURE                                 :0x1
16:16:38: Reserv1                                       :0x0
16:16:38: Time Access 1 TAAC                            :0xe
16:16:38: Time Access 2 NSAC*100                        :0x0
16:16:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:38: Card Command Classess CCC                     :0x5b5
16:16:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:38: DSR(driver stage register)  DSR_IMP           :0x0
16:16:38: Reserv2                                       :0x0
16:16:38: Device Size C_SIZE                            :0xedc8
16:16:38: Reserv3                                       :0x0
16:16:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:38: Reserv4                                       :0x0
16:16:38: Write Speed Factor R2W_FACTOR                 :0x2
16:16:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:38: FILE_FORMAT_GRP                               :0x0
16:16:38: COPY flag                                     :0x1
16:16:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:38: File_Format                                   :0x0
16:16:38: CRC                                           :0x0
16:16:38: ####CSD Registe Values####  

16:16:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:38: ProductSerialNumber = 0x23482900
16:16:38: CardMaximumLBA      = 0x3b72400
16:16:38: CardCapacity        = 32G
16:16:38: Is card secure      = 0
16:16:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:38: [DVTCommonLib]###  LogicalWrite called
16:16:39: [ WriteLba(0x150687D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1190 ] 
16:16:39: [DVTCommonLib]###  LogicalWrite Completed 

16:16:39: [DVTCommonLib]###  LogicalRead called
16:16:41: [ ReadLba(0x150687D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1191 ] 
16:16:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 124 times 

16:16:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1192 ] 
16:16:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x061ED900>) , Command count = 1193 ] 
16:16:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4600>, <py_sfcl.CommandDataDefinition object at 0x061F4840>) , Command count = 1194 ] 
16:16:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1195 ] 
16:16:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:41: [ SetBusWidth(0x1) , Command count = 1196 ] 
16:16:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:41: ####CSD Registe 2.0 Values####
16:16:41: CSD_STRUCTURE                                 :0x1
16:16:41: Reserv1                                       :0x0
16:16:41: Time Access 1 TAAC                            :0xe
16:16:41: Time Access 2 NSAC*100                        :0x0
16:16:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:41: Card Command Classess CCC                     :0x5b5
16:16:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:41: DSR(driver stage register)  DSR_IMP           :0x0
16:16:41: Reserv2                                       :0x0
16:16:41: Device Size C_SIZE                            :0xedc8
16:16:41: Reserv3                                       :0x0
16:16:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:41: Reserv4                                       :0x0
16:16:41: Write Speed Factor R2W_FACTOR                 :0x2
16:16:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:41: FILE_FORMAT_GRP                               :0x0
16:16:41: COPY flag                                     :0x1
16:16:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:41: File_Format                                   :0x0
16:16:41: CRC                                           :0x0
16:16:41: ####CSD Registe Values####  

16:16:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:41: ProductSerialNumber = 0x23482900
16:16:41: CardMaximumLBA      = 0x3b72400
16:16:41: CardCapacity        = 32G
16:16:41: Is card secure      = 0
16:16:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:41: [DVTCommonLib]###  LogicalWrite called
16:16:43: [ WriteLba(0xF887A6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1197 ] 
16:16:43: [DVTCommonLib]###  LogicalWrite Completed 

16:16:43: [DVTCommonLib]###  LogicalRead called
16:16:44: [ ReadLba(0xF887A6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1198 ] 
16:16:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 125 times 

16:16:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1199 ] 
16:16:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4660>, <py_sfcl.CommandDataDefinition object at 0x061F4030>) , Command count = 1200 ] 
16:16:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C60>, <py_sfcl.CommandDataDefinition object at 0x061F47B0>) , Command count = 1201 ] 
16:16:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1202 ] 
16:16:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:44: [ SetBusWidth(0x1) , Command count = 1203 ] 
16:16:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:44: ####CSD Registe 2.0 Values####
16:16:44: CSD_STRUCTURE                                 :0x1
16:16:44: Reserv1                                       :0x0
16:16:44: Time Access 1 TAAC                            :0xe
16:16:44: Time Access 2 NSAC*100                        :0x0
16:16:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:44: Card Command Classess CCC                     :0x5b5
16:16:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:44: DSR(driver stage register)  DSR_IMP           :0x0
16:16:44: Reserv2                                       :0x0
16:16:44: Device Size C_SIZE                            :0xedc8
16:16:44: Reserv3                                       :0x0
16:16:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:44: Reserv4                                       :0x0
16:16:44: Write Speed Factor R2W_FACTOR                 :0x2
16:16:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:44: FILE_FORMAT_GRP                               :0x0
16:16:44: COPY flag                                     :0x1
16:16:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:44: File_Format                                   :0x0
16:16:44: CRC                                           :0x0
16:16:44: ####CSD Registe Values####  

16:16:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:44: ProductSerialNumber = 0x23482900
16:16:44: CardMaximumLBA      = 0x3b72400
16:16:44: CardCapacity        = 32G
16:16:44: Is card secure      = 0
16:16:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:44: [DVTCommonLib]###  LogicalWrite called
16:16:46: [ WriteLba(0x73955F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1204 ] 
16:16:46: [DVTCommonLib]###  LogicalWrite Completed 

16:16:46: [DVTCommonLib]###  LogicalRead called
16:16:48: [ ReadLba(0x73955F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1205 ] 
16:16:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 126 times 

16:16:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1206 ] 
16:16:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F49F0>, <py_sfcl.CommandDataDefinition object at 0x061F4960>) , Command count = 1207 ] 
16:16:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D20>, <py_sfcl.CommandDataDefinition object at 0x061F4C30>) , Command count = 1208 ] 
16:16:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1209 ] 
16:16:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:48: [ SetBusWidth(0x1) , Command count = 1210 ] 
16:16:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:48: ####CSD Registe 2.0 Values####
16:16:48: CSD_STRUCTURE                                 :0x1
16:16:48: Reserv1                                       :0x0
16:16:48: Time Access 1 TAAC                            :0xe
16:16:48: Time Access 2 NSAC*100                        :0x0
16:16:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:48: Card Command Classess CCC                     :0x5b5
16:16:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:48: DSR(driver stage register)  DSR_IMP           :0x0
16:16:48: Reserv2                                       :0x0
16:16:48: Device Size C_SIZE                            :0xedc8
16:16:48: Reserv3                                       :0x0
16:16:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:48: Reserv4                                       :0x0
16:16:48: Write Speed Factor R2W_FACTOR                 :0x2
16:16:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:48: FILE_FORMAT_GRP                               :0x0
16:16:48: COPY flag                                     :0x1
16:16:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:48: File_Format                                   :0x0
16:16:48: CRC                                           :0x0
16:16:48: ####CSD Registe Values####  

16:16:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:48: ProductSerialNumber = 0x23482900
16:16:48: CardMaximumLBA      = 0x3b72400
16:16:48: CardCapacity        = 32G
16:16:48: Is card secure      = 0
16:16:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:48: [DVTCommonLib]###  LogicalWrite called
16:16:49: [ WriteLba(0x1FCFF31, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1211 ] 
16:16:49: [DVTCommonLib]###  LogicalWrite Completed 

16:16:49: [DVTCommonLib]###  LogicalRead called
16:16:51: [ ReadLba(0x1FCFF31, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1212 ] 
16:16:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 127 times 

16:16:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1213 ] 
16:16:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4DB0>, <py_sfcl.CommandDataDefinition object at 0x061F4C90>) , Command count = 1214 ] 
16:16:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA060>, <py_sfcl.CommandDataDefinition object at 0x061FA240>) , Command count = 1215 ] 
16:16:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1216 ] 
16:16:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:51: [ SetBusWidth(0x1) , Command count = 1217 ] 
16:16:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:51: ####CSD Registe 2.0 Values####
16:16:51: CSD_STRUCTURE                                 :0x1
16:16:51: Reserv1                                       :0x0
16:16:51: Time Access 1 TAAC                            :0xe
16:16:51: Time Access 2 NSAC*100                        :0x0
16:16:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:51: Card Command Classess CCC                     :0x5b5
16:16:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:51: DSR(driver stage register)  DSR_IMP           :0x0
16:16:51: Reserv2                                       :0x0
16:16:51: Device Size C_SIZE                            :0xedc8
16:16:51: Reserv3                                       :0x0
16:16:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:51: Reserv4                                       :0x0
16:16:51: Write Speed Factor R2W_FACTOR                 :0x2
16:16:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:51: FILE_FORMAT_GRP                               :0x0
16:16:51: COPY flag                                     :0x1
16:16:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:51: File_Format                                   :0x0
16:16:51: CRC                                           :0x0
16:16:51: ####CSD Registe Values####  

16:16:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:51: ProductSerialNumber = 0x23482900
16:16:51: CardMaximumLBA      = 0x3b72400
16:16:51: CardCapacity        = 32G
16:16:51: Is card secure      = 0
16:16:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:51: [DVTCommonLib]###  LogicalWrite called
16:16:53: [ WriteLba(0x591C8A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1218 ] 
16:16:53: [DVTCommonLib]###  LogicalWrite Completed 

16:16:53: [DVTCommonLib]###  LogicalRead called
16:16:54: [ ReadLba(0x591C8A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1219 ] 
16:16:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 128 times 

16:16:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1220 ] 
16:16:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D50>, <py_sfcl.CommandDataDefinition object at 0x061F4F30>) , Command count = 1221 ] 
16:16:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA600>, <py_sfcl.CommandDataDefinition object at 0x061FA180>) , Command count = 1222 ] 
16:16:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1223 ] 
16:16:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:54: [ SetBusWidth(0x1) , Command count = 1224 ] 
16:16:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:54: ####CSD Registe 2.0 Values####
16:16:54: CSD_STRUCTURE                                 :0x1
16:16:54: Reserv1                                       :0x0
16:16:54: Time Access 1 TAAC                            :0xe
16:16:54: Time Access 2 NSAC*100                        :0x0
16:16:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:54: Card Command Classess CCC                     :0x5b5
16:16:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:54: DSR(driver stage register)  DSR_IMP           :0x0
16:16:54: Reserv2                                       :0x0
16:16:54: Device Size C_SIZE                            :0xedc8
16:16:54: Reserv3                                       :0x0
16:16:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:54: Reserv4                                       :0x0
16:16:54: Write Speed Factor R2W_FACTOR                 :0x2
16:16:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:54: FILE_FORMAT_GRP                               :0x0
16:16:54: COPY flag                                     :0x1
16:16:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:54: File_Format                                   :0x0
16:16:54: CRC                                           :0x0
16:16:54: ####CSD Registe Values####  

16:16:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:54: ProductSerialNumber = 0x23482900
16:16:54: CardMaximumLBA      = 0x3b72400
16:16:54: CardCapacity        = 32G
16:16:54: Is card secure      = 0
16:16:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:54: [DVTCommonLib]###  LogicalWrite called
16:16:56: [ WriteLba(0x130CE1A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1225 ] 
16:16:56: [DVTCommonLib]###  LogicalWrite Completed 

16:16:56: [DVTCommonLib]###  LogicalRead called
16:16:58: [ ReadLba(0x130CE1A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1226 ] 
16:16:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:16:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:16:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 129 times 

16:16:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:16:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:16:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1227 ] 
16:16:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:16:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:16:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:16:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:16:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:16:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:16:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA3C0>, <py_sfcl.CommandDataDefinition object at 0x061FA330>) , Command count = 1228 ] 
16:16:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:16:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA8A0>, <py_sfcl.CommandDataDefinition object at 0x061FA9F0>) , Command count = 1229 ] 
16:16:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:16:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1230 ] 
16:16:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:16:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:16:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:16:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:16:58: [ SetBusWidth(0x1) , Command count = 1231 ] 
16:16:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:16:58: ####CSD Registe 2.0 Values####
16:16:58: CSD_STRUCTURE                                 :0x1
16:16:58: Reserv1                                       :0x0
16:16:58: Time Access 1 TAAC                            :0xe
16:16:58: Time Access 2 NSAC*100                        :0x0
16:16:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:16:58: Card Command Classess CCC                     :0x5b5
16:16:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:16:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:16:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:16:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:16:58: DSR(driver stage register)  DSR_IMP           :0x0
16:16:58: Reserv2                                       :0x0
16:16:58: Device Size C_SIZE                            :0xedc8
16:16:58: Reserv3                                       :0x0
16:16:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:16:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:16:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:16:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:16:58: Reserv4                                       :0x0
16:16:58: Write Speed Factor R2W_FACTOR                 :0x2
16:16:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:16:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:16:58: FILE_FORMAT_GRP                               :0x0
16:16:58: COPY flag                                     :0x1
16:16:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:16:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:16:58: File_Format                                   :0x0
16:16:58: CRC                                           :0x0
16:16:58: ####CSD Registe Values####  

16:16:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:16:58: ProductSerialNumber = 0x23482900
16:16:58: CardMaximumLBA      = 0x3b72400
16:16:58: CardCapacity        = 32G
16:16:58: Is card secure      = 0
16:16:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:16:58: [DVTCommonLib]###  LogicalWrite called
16:16:59: [ WriteLba(0x6DC011, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1232 ] 
16:17:00: [DVTCommonLib]###  LogicalWrite Completed 

16:17:00: [DVTCommonLib]###  LogicalRead called
16:17:01: [ ReadLba(0x6DC011, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1233 ] 
16:17:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 130 times 

16:17:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1234 ] 
16:17:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA7B0>, <py_sfcl.CommandDataDefinition object at 0x061FA720>) , Command count = 1235 ] 
16:17:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA990>, <py_sfcl.CommandDataDefinition object at 0x061FABA0>) , Command count = 1236 ] 
16:17:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1237 ] 
16:17:01: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:01: [ SetBusWidth(0x1) , Command count = 1238 ] 
16:17:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:01: ####CSD Registe 2.0 Values####
16:17:01: CSD_STRUCTURE                                 :0x1
16:17:01: Reserv1                                       :0x0
16:17:01: Time Access 1 TAAC                            :0xe
16:17:01: Time Access 2 NSAC*100                        :0x0
16:17:01: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:01: Card Command Classess CCC                     :0x5b5
16:17:01: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:01: DSR(driver stage register)  DSR_IMP           :0x0
16:17:01: Reserv2                                       :0x0
16:17:01: Device Size C_SIZE                            :0xedc8
16:17:01: Reserv3                                       :0x0
16:17:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:01: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:01: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:01: Reserv4                                       :0x0
16:17:01: Write Speed Factor R2W_FACTOR                 :0x2
16:17:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:01: FILE_FORMAT_GRP                               :0x0
16:17:01: COPY flag                                     :0x1
16:17:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:01: File_Format                                   :0x0
16:17:01: CRC                                           :0x0
16:17:01: ####CSD Registe Values####  

16:17:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:01: ProductSerialNumber = 0x23482900
16:17:01: CardMaximumLBA      = 0x3b72400
16:17:01: CardCapacity        = 32G
16:17:01: Is card secure      = 0
16:17:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:01: [DVTCommonLib]###  LogicalWrite called
16:17:03: [ WriteLba(0x35FF3BC, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1239 ] 
16:17:03: [DVTCommonLib]###  LogicalWrite Completed 

16:17:03: [DVTCommonLib]###  LogicalRead called
16:17:04: [ ReadLba(0x35FF3BC, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1240 ] 
16:17:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 131 times 

16:17:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1241 ] 
16:17:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 1242 ] 
16:17:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE210>, <py_sfcl.CommandDataDefinition object at 0x061FAB10>) , Command count = 1243 ] 
16:17:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1244 ] 
16:17:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:05: [ SetBusWidth(0x1) , Command count = 1245 ] 
16:17:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:05: ####CSD Registe 2.0 Values####
16:17:05: CSD_STRUCTURE                                 :0x1
16:17:05: Reserv1                                       :0x0
16:17:05: Time Access 1 TAAC                            :0xe
16:17:05: Time Access 2 NSAC*100                        :0x0
16:17:05: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:05: Card Command Classess CCC                     :0x5b5
16:17:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:05: DSR(driver stage register)  DSR_IMP           :0x0
16:17:05: Reserv2                                       :0x0
16:17:05: Device Size C_SIZE                            :0xedc8
16:17:05: Reserv3                                       :0x0
16:17:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:05: Reserv4                                       :0x0
16:17:05: Write Speed Factor R2W_FACTOR                 :0x2
16:17:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:05: FILE_FORMAT_GRP                               :0x0
16:17:05: COPY flag                                     :0x1
16:17:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:05: File_Format                                   :0x0
16:17:05: CRC                                           :0x0
16:17:05: ####CSD Registe Values####  

16:17:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:05: ProductSerialNumber = 0x23482900
16:17:05: CardMaximumLBA      = 0x3b72400
16:17:05: CardCapacity        = 32G
16:17:05: Is card secure      = 0
16:17:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:05: [DVTCommonLib]###  LogicalWrite called
16:17:06: [ WriteLba(0x2E6E011, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1246 ] 
16:17:06: [DVTCommonLib]###  LogicalWrite Completed 

16:17:06: [DVTCommonLib]###  LogicalRead called
16:17:08: [ ReadLba(0x2E6E011, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1247 ] 
16:17:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 132 times 

16:17:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1248 ] 
16:17:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE030>, <py_sfcl.CommandDataDefinition object at 0x061FE3F0>) , Command count = 1249 ] 
16:17:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE270>, <py_sfcl.CommandDataDefinition object at 0x061FAEA0>) , Command count = 1250 ] 
16:17:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1251 ] 
16:17:08: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:08: [ SetBusWidth(0x1) , Command count = 1252 ] 
16:17:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:08: ####CSD Registe 2.0 Values####
16:17:08: CSD_STRUCTURE                                 :0x1
16:17:08: Reserv1                                       :0x0
16:17:08: Time Access 1 TAAC                            :0xe
16:17:08: Time Access 2 NSAC*100                        :0x0
16:17:08: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:08: Card Command Classess CCC                     :0x5b5
16:17:08: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:08: DSR(driver stage register)  DSR_IMP           :0x0
16:17:08: Reserv2                                       :0x0
16:17:08: Device Size C_SIZE                            :0xedc8
16:17:08: Reserv3                                       :0x0
16:17:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:08: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:08: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:08: Reserv4                                       :0x0
16:17:08: Write Speed Factor R2W_FACTOR                 :0x2
16:17:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:08: FILE_FORMAT_GRP                               :0x0
16:17:08: COPY flag                                     :0x1
16:17:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:08: File_Format                                   :0x0
16:17:08: CRC                                           :0x0
16:17:08: ####CSD Registe Values####  

16:17:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:08: ProductSerialNumber = 0x23482900
16:17:08: CardMaximumLBA      = 0x3b72400
16:17:08: CardCapacity        = 32G
16:17:08: Is card secure      = 0
16:17:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:08: [DVTCommonLib]###  LogicalWrite called
16:17:10: [ WriteLba(0x2EF0279, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1253 ] 
16:17:10: [DVTCommonLib]###  LogicalWrite Completed 

16:17:10: [DVTCommonLib]###  LogicalRead called
16:17:11: [ ReadLba(0x2EF0279, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1254 ] 
16:17:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 133 times 

16:17:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1255 ] 
16:17:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE180>, <py_sfcl.CommandDataDefinition object at 0x061FE0F0>) , Command count = 1256 ] 
16:17:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE540>, <py_sfcl.CommandDataDefinition object at 0x061FA6C0>) , Command count = 1257 ] 
16:17:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1258 ] 
16:17:11: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:11: [ SetBusWidth(0x1) , Command count = 1259 ] 
16:17:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:11: ####CSD Registe 2.0 Values####
16:17:11: CSD_STRUCTURE                                 :0x1
16:17:11: Reserv1                                       :0x0
16:17:11: Time Access 1 TAAC                            :0xe
16:17:11: Time Access 2 NSAC*100                        :0x0
16:17:11: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:11: Card Command Classess CCC                     :0x5b5
16:17:11: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:11: DSR(driver stage register)  DSR_IMP           :0x0
16:17:11: Reserv2                                       :0x0
16:17:11: Device Size C_SIZE                            :0xedc8
16:17:11: Reserv3                                       :0x0
16:17:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:11: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:11: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:11: Reserv4                                       :0x0
16:17:11: Write Speed Factor R2W_FACTOR                 :0x2
16:17:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:11: FILE_FORMAT_GRP                               :0x0
16:17:11: COPY flag                                     :0x1
16:17:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:11: File_Format                                   :0x0
16:17:11: CRC                                           :0x0
16:17:11: ####CSD Registe Values####  

16:17:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:11: ProductSerialNumber = 0x23482900
16:17:11: CardMaximumLBA      = 0x3b72400
16:17:11: CardCapacity        = 32G
16:17:11: Is card secure      = 0
16:17:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:11: [DVTCommonLib]###  LogicalWrite called
16:17:13: [ WriteLba(0x19E3306, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1260 ] 
16:17:13: [DVTCommonLib]###  LogicalWrite Completed 

16:17:13: [DVTCommonLib]###  LogicalRead called
16:17:15: [ ReadLba(0x19E3306, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1261 ] 
16:17:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 134 times 

16:17:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1262 ] 
16:17:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FE570>) , Command count = 1263 ] 
16:17:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337FC0>, <py_sfcl.CommandDataDefinition object at 0x061FE450>) , Command count = 1264 ] 
16:17:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1265 ] 
16:17:15: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:15: [ SetBusWidth(0x1) , Command count = 1266 ] 
16:17:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:15: ####CSD Registe 2.0 Values####
16:17:15: CSD_STRUCTURE                                 :0x1
16:17:15: Reserv1                                       :0x0
16:17:15: Time Access 1 TAAC                            :0xe
16:17:15: Time Access 2 NSAC*100                        :0x0
16:17:15: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:15: Card Command Classess CCC                     :0x5b5
16:17:15: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:15: DSR(driver stage register)  DSR_IMP           :0x0
16:17:15: Reserv2                                       :0x0
16:17:15: Device Size C_SIZE                            :0xedc8
16:17:15: Reserv3                                       :0x0
16:17:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:15: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:15: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:15: Reserv4                                       :0x0
16:17:15: Write Speed Factor R2W_FACTOR                 :0x2
16:17:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:15: FILE_FORMAT_GRP                               :0x0
16:17:15: COPY flag                                     :0x1
16:17:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:15: File_Format                                   :0x0
16:17:15: CRC                                           :0x0
16:17:15: ####CSD Registe Values####  

16:17:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:15: ProductSerialNumber = 0x23482900
16:17:15: CardMaximumLBA      = 0x3b72400
16:17:15: CardCapacity        = 32G
16:17:15: Is card secure      = 0
16:17:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:15: [DVTCommonLib]###  LogicalWrite called
16:17:16: [ WriteLba(0x27BE26E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1267 ] 
16:17:16: [DVTCommonLib]###  LogicalWrite Completed 

16:17:16: [DVTCommonLib]###  LogicalRead called
16:17:18: [ ReadLba(0x27BE26E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1268 ] 
16:17:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 135 times 

16:17:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1269 ] 
16:17:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FE960>) , Command count = 1270 ] 
16:17:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEA20>, <py_sfcl.CommandDataDefinition object at 0x061FE840>) , Command count = 1271 ] 
16:17:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1272 ] 
16:17:18: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:18: [ SetBusWidth(0x1) , Command count = 1273 ] 
16:17:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:18: ####CSD Registe 2.0 Values####
16:17:18: CSD_STRUCTURE                                 :0x1
16:17:18: Reserv1                                       :0x0
16:17:18: Time Access 1 TAAC                            :0xe
16:17:18: Time Access 2 NSAC*100                        :0x0
16:17:18: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:18: Card Command Classess CCC                     :0x5b5
16:17:18: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:18: DSR(driver stage register)  DSR_IMP           :0x0
16:17:18: Reserv2                                       :0x0
16:17:18: Device Size C_SIZE                            :0xedc8
16:17:18: Reserv3                                       :0x0
16:17:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:18: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:18: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:18: Reserv4                                       :0x0
16:17:18: Write Speed Factor R2W_FACTOR                 :0x2
16:17:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:18: FILE_FORMAT_GRP                               :0x0
16:17:18: COPY flag                                     :0x1
16:17:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:18: File_Format                                   :0x0
16:17:18: CRC                                           :0x0
16:17:18: ####CSD Registe Values####  

16:17:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:18: ProductSerialNumber = 0x23482900
16:17:18: CardMaximumLBA      = 0x3b72400
16:17:18: CardCapacity        = 32G
16:17:18: Is card secure      = 0
16:17:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:18: [DVTCommonLib]###  LogicalWrite called
16:17:20: [ WriteLba(0x370FE8F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1274 ] 
16:17:20: [DVTCommonLib]###  LogicalWrite Completed 

16:17:20: [DVTCommonLib]###  LogicalRead called
16:17:21: [ ReadLba(0x370FE8F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1275 ] 
16:17:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 136 times 

16:17:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1276 ] 
16:17:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E0F0>, <py_sfcl.CommandDataDefinition object at 0x054413F0>) , Command count = 1277 ] 
16:17:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE9F0>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 1278 ] 
16:17:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1279 ] 
16:17:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:22: [ SetBusWidth(0x1) , Command count = 1280 ] 
16:17:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:22: ####CSD Registe 2.0 Values####
16:17:22: CSD_STRUCTURE                                 :0x1
16:17:22: Reserv1                                       :0x0
16:17:22: Time Access 1 TAAC                            :0xe
16:17:22: Time Access 2 NSAC*100                        :0x0
16:17:22: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:22: Card Command Classess CCC                     :0x5b5
16:17:22: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:22: DSR(driver stage register)  DSR_IMP           :0x0
16:17:22: Reserv2                                       :0x0
16:17:22: Device Size C_SIZE                            :0xedc8
16:17:22: Reserv3                                       :0x0
16:17:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:22: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:22: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:22: Reserv4                                       :0x0
16:17:22: Write Speed Factor R2W_FACTOR                 :0x2
16:17:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:22: FILE_FORMAT_GRP                               :0x0
16:17:22: COPY flag                                     :0x1
16:17:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:22: File_Format                                   :0x0
16:17:22: CRC                                           :0x0
16:17:22: ####CSD Registe Values####  

16:17:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:22: ProductSerialNumber = 0x23482900
16:17:22: CardMaximumLBA      = 0x3b72400
16:17:22: CardCapacity        = 32G
16:17:22: Is card secure      = 0
16:17:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:22: [DVTCommonLib]###  LogicalWrite called
16:17:23: [ WriteLba(0x2E37FED, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1281 ] 
16:17:23: [DVTCommonLib]###  LogicalWrite Completed 

16:17:23: [DVTCommonLib]###  LogicalRead called
16:17:25: [ ReadLba(0x2E37FED, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1282 ] 
16:17:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 137 times 

16:17:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1283 ] 
16:17:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EE70>, <py_sfcl.CommandDataDefinition object at 0x0544E240>) , Command count = 1284 ] 
16:17:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE990>, <py_sfcl.CommandDataDefinition object at 0x061FE600>) , Command count = 1285 ] 
16:17:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1286 ] 
16:17:25: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:25: [ SetBusWidth(0x1) , Command count = 1287 ] 
16:17:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:25: ####CSD Registe 2.0 Values####
16:17:25: CSD_STRUCTURE                                 :0x1
16:17:25: Reserv1                                       :0x0
16:17:25: Time Access 1 TAAC                            :0xe
16:17:25: Time Access 2 NSAC*100                        :0x0
16:17:25: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:25: Card Command Classess CCC                     :0x5b5
16:17:25: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:25: DSR(driver stage register)  DSR_IMP           :0x0
16:17:25: Reserv2                                       :0x0
16:17:25: Device Size C_SIZE                            :0xedc8
16:17:25: Reserv3                                       :0x0
16:17:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:25: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:25: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:25: Reserv4                                       :0x0
16:17:25: Write Speed Factor R2W_FACTOR                 :0x2
16:17:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:25: FILE_FORMAT_GRP                               :0x0
16:17:25: COPY flag                                     :0x1
16:17:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:25: File_Format                                   :0x0
16:17:25: CRC                                           :0x0
16:17:25: ####CSD Registe Values####  

16:17:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:25: ProductSerialNumber = 0x23482900
16:17:25: CardMaximumLBA      = 0x3b72400
16:17:25: CardCapacity        = 32G
16:17:25: Is card secure      = 0
16:17:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:25: [DVTCommonLib]###  LogicalWrite called
16:17:27: [ WriteLba(0x1DD944, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1288 ] 
16:17:27: [DVTCommonLib]###  LogicalWrite Completed 

16:17:27: [DVTCommonLib]###  LogicalRead called
16:17:28: [ ReadLba(0x1DD944, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1289 ] 
16:17:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 138 times 

16:17:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1290 ] 
16:17:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460A20>, <py_sfcl.CommandDataDefinition object at 0x0545AFC0>) , Command count = 1291 ] 
16:17:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337E40>, <py_sfcl.CommandDataDefinition object at 0x061FE5D0>) , Command count = 1292 ] 
16:17:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1293 ] 
16:17:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:28: [ SetBusWidth(0x1) , Command count = 1294 ] 
16:17:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:28: ####CSD Registe 2.0 Values####
16:17:28: CSD_STRUCTURE                                 :0x1
16:17:28: Reserv1                                       :0x0
16:17:28: Time Access 1 TAAC                            :0xe
16:17:28: Time Access 2 NSAC*100                        :0x0
16:17:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:28: Card Command Classess CCC                     :0x5b5
16:17:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:28: DSR(driver stage register)  DSR_IMP           :0x0
16:17:28: Reserv2                                       :0x0
16:17:28: Device Size C_SIZE                            :0xedc8
16:17:28: Reserv3                                       :0x0
16:17:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:28: Reserv4                                       :0x0
16:17:28: Write Speed Factor R2W_FACTOR                 :0x2
16:17:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:28: FILE_FORMAT_GRP                               :0x0
16:17:28: COPY flag                                     :0x1
16:17:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:28: File_Format                                   :0x0
16:17:28: CRC                                           :0x0
16:17:28: ####CSD Registe Values####  

16:17:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:28: ProductSerialNumber = 0x23482900
16:17:28: CardMaximumLBA      = 0x3b72400
16:17:28: CardCapacity        = 32G
16:17:28: Is card secure      = 0
16:17:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:28: [DVTCommonLib]###  LogicalWrite called
16:17:30: [ WriteLba(0xC27F0A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1295 ] 
16:17:30: [DVTCommonLib]###  LogicalWrite Completed 

16:17:30: [DVTCommonLib]###  LogicalRead called
16:17:32: [ ReadLba(0xC27F0A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1296 ] 
16:17:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 139 times 

16:17:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1297 ] 
16:17:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC00>, <py_sfcl.CommandDataDefinition object at 0x05460C60>) , Command count = 1298 ] 
16:17:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE300>, <py_sfcl.CommandDataDefinition object at 0x061FE4B0>) , Command count = 1299 ] 
16:17:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1300 ] 
16:17:32: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:32: [ SetBusWidth(0x1) , Command count = 1301 ] 
16:17:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:32: ####CSD Registe 2.0 Values####
16:17:32: CSD_STRUCTURE                                 :0x1
16:17:32: Reserv1                                       :0x0
16:17:32: Time Access 1 TAAC                            :0xe
16:17:32: Time Access 2 NSAC*100                        :0x0
16:17:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:32: Card Command Classess CCC                     :0x5b5
16:17:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:32: DSR(driver stage register)  DSR_IMP           :0x0
16:17:32: Reserv2                                       :0x0
16:17:32: Device Size C_SIZE                            :0xedc8
16:17:32: Reserv3                                       :0x0
16:17:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:32: Reserv4                                       :0x0
16:17:32: Write Speed Factor R2W_FACTOR                 :0x2
16:17:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:32: FILE_FORMAT_GRP                               :0x0
16:17:32: COPY flag                                     :0x1
16:17:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:32: File_Format                                   :0x0
16:17:32: CRC                                           :0x0
16:17:32: ####CSD Registe Values####  

16:17:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:32: ProductSerialNumber = 0x23482900
16:17:32: CardMaximumLBA      = 0x3b72400
16:17:32: CardCapacity        = 32G
16:17:32: Is card secure      = 0
16:17:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:32: [DVTCommonLib]###  LogicalWrite called
16:17:33: [ WriteLba(0x3226432, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1302 ] 
16:17:33: [DVTCommonLib]###  LogicalWrite Completed 

16:17:33: [DVTCommonLib]###  LogicalRead called
16:17:35: [ ReadLba(0x3226432, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1303 ] 
16:17:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 140 times 

16:17:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1304 ] 
16:17:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E210>, <py_sfcl.CommandDataDefinition object at 0x05460FC0>) , Command count = 1305 ] 
16:17:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2AE0>, <py_sfcl.CommandDataDefinition object at 0x061FE4B0>) , Command count = 1306 ] 
16:17:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1307 ] 
16:17:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:35: [ SetBusWidth(0x1) , Command count = 1308 ] 
16:17:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:35: ####CSD Registe 2.0 Values####
16:17:35: CSD_STRUCTURE                                 :0x1
16:17:35: Reserv1                                       :0x0
16:17:35: Time Access 1 TAAC                            :0xe
16:17:35: Time Access 2 NSAC*100                        :0x0
16:17:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:35: Card Command Classess CCC                     :0x5b5
16:17:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:35: DSR(driver stage register)  DSR_IMP           :0x0
16:17:35: Reserv2                                       :0x0
16:17:35: Device Size C_SIZE                            :0xedc8
16:17:35: Reserv3                                       :0x0
16:17:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:35: Reserv4                                       :0x0
16:17:35: Write Speed Factor R2W_FACTOR                 :0x2
16:17:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:35: FILE_FORMAT_GRP                               :0x0
16:17:35: COPY flag                                     :0x1
16:17:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:35: File_Format                                   :0x0
16:17:35: CRC                                           :0x0
16:17:35: ####CSD Registe Values####  

16:17:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:35: ProductSerialNumber = 0x23482900
16:17:35: CardMaximumLBA      = 0x3b72400
16:17:35: CardCapacity        = 32G
16:17:35: Is card secure      = 0
16:17:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:35: [DVTCommonLib]###  LogicalWrite called
16:17:37: [ WriteLba(0x28E4723, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1309 ] 
16:17:37: [DVTCommonLib]###  LogicalWrite Completed 

16:17:37: [DVTCommonLib]###  LogicalRead called
16:17:38: [ ReadLba(0x28E4723, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1310 ] 
16:17:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 141 times 

16:17:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1311 ] 
16:17:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2780>, <py_sfcl.CommandDataDefinition object at 0x060C24B0>) , Command count = 1312 ] 
16:17:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAFC0>, <py_sfcl.CommandDataDefinition object at 0x061FE4B0>) , Command count = 1313 ] 
16:17:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1314 ] 
16:17:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:38: [ SetBusWidth(0x1) , Command count = 1315 ] 
16:17:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:38: ####CSD Registe 2.0 Values####
16:17:38: CSD_STRUCTURE                                 :0x1
16:17:38: Reserv1                                       :0x0
16:17:38: Time Access 1 TAAC                            :0xe
16:17:38: Time Access 2 NSAC*100                        :0x0
16:17:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:38: Card Command Classess CCC                     :0x5b5
16:17:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:38: DSR(driver stage register)  DSR_IMP           :0x0
16:17:38: Reserv2                                       :0x0
16:17:38: Device Size C_SIZE                            :0xedc8
16:17:38: Reserv3                                       :0x0
16:17:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:38: Reserv4                                       :0x0
16:17:38: Write Speed Factor R2W_FACTOR                 :0x2
16:17:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:38: FILE_FORMAT_GRP                               :0x0
16:17:38: COPY flag                                     :0x1
16:17:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:38: File_Format                                   :0x0
16:17:38: CRC                                           :0x0
16:17:38: ####CSD Registe Values####  

16:17:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:38: ProductSerialNumber = 0x23482900
16:17:38: CardMaximumLBA      = 0x3b72400
16:17:38: CardCapacity        = 32G
16:17:38: Is card secure      = 0
16:17:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:38: [DVTCommonLib]###  LogicalWrite called
16:17:40: [ WriteLba(0x18D8F17, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1316 ] 
16:17:40: [DVTCommonLib]###  LogicalWrite Completed 

16:17:40: [DVTCommonLib]###  LogicalRead called
16:17:42: [ ReadLba(0x18D8F17, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1317 ] 
16:17:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 142 times 

16:17:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1318 ] 
16:17:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CF00>, <py_sfcl.CommandDataDefinition object at 0x0613F180>) , Command count = 1319 ] 
16:17:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA660>, <py_sfcl.CommandDataDefinition object at 0x061FAF60>) , Command count = 1320 ] 
16:17:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1321 ] 
16:17:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:42: [ SetBusWidth(0x1) , Command count = 1322 ] 
16:17:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:42: ####CSD Registe 2.0 Values####
16:17:42: CSD_STRUCTURE                                 :0x1
16:17:42: Reserv1                                       :0x0
16:17:42: Time Access 1 TAAC                            :0xe
16:17:42: Time Access 2 NSAC*100                        :0x0
16:17:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:42: Card Command Classess CCC                     :0x5b5
16:17:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:42: DSR(driver stage register)  DSR_IMP           :0x0
16:17:42: Reserv2                                       :0x0
16:17:42: Device Size C_SIZE                            :0xedc8
16:17:42: Reserv3                                       :0x0
16:17:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:42: Reserv4                                       :0x0
16:17:42: Write Speed Factor R2W_FACTOR                 :0x2
16:17:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:42: FILE_FORMAT_GRP                               :0x0
16:17:42: COPY flag                                     :0x1
16:17:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:42: File_Format                                   :0x0
16:17:42: CRC                                           :0x0
16:17:42: ####CSD Registe Values####  

16:17:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:42: ProductSerialNumber = 0x23482900
16:17:42: CardMaximumLBA      = 0x3b72400
16:17:42: CardCapacity        = 32G
16:17:42: Is card secure      = 0
16:17:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:42: [DVTCommonLib]###  LogicalWrite called
16:17:43: [ WriteLba(0x1DC5462, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1323 ] 
16:17:43: [DVTCommonLib]###  LogicalWrite Completed 

16:17:43: [DVTCommonLib]###  LogicalRead called
16:17:45: [ ReadLba(0x1DC5462, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1324 ] 
16:17:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 143 times 

16:17:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1325 ] 
16:17:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2630>, <py_sfcl.CommandDataDefinition object at 0x05460DB0>) , Command count = 1326 ] 
16:17:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543A480>, <py_sfcl.CommandDataDefinition object at 0x061FAC30>) , Command count = 1327 ] 
16:17:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1328 ] 
16:17:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:45: [ SetBusWidth(0x1) , Command count = 1329 ] 
16:17:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:45: ####CSD Registe 2.0 Values####
16:17:45: CSD_STRUCTURE                                 :0x1
16:17:45: Reserv1                                       :0x0
16:17:45: Time Access 1 TAAC                            :0xe
16:17:45: Time Access 2 NSAC*100                        :0x0
16:17:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:45: Card Command Classess CCC                     :0x5b5
16:17:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:45: DSR(driver stage register)  DSR_IMP           :0x0
16:17:45: Reserv2                                       :0x0
16:17:45: Device Size C_SIZE                            :0xedc8
16:17:45: Reserv3                                       :0x0
16:17:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:45: Reserv4                                       :0x0
16:17:45: Write Speed Factor R2W_FACTOR                 :0x2
16:17:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:45: FILE_FORMAT_GRP                               :0x0
16:17:45: COPY flag                                     :0x1
16:17:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:45: File_Format                                   :0x0
16:17:45: CRC                                           :0x0
16:17:45: ####CSD Registe Values####  

16:17:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:45: ProductSerialNumber = 0x23482900
16:17:45: CardMaximumLBA      = 0x3b72400
16:17:45: CardCapacity        = 32G
16:17:45: Is card secure      = 0
16:17:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:45: [DVTCommonLib]###  LogicalWrite called
16:17:47: [ WriteLba(0x3077866, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1330 ] 
16:17:47: [DVTCommonLib]###  LogicalWrite Completed 

16:17:47: [DVTCommonLib]###  LogicalRead called
16:17:48: [ ReadLba(0x3077866, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1331 ] 
16:17:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 144 times 

16:17:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1332 ] 
16:17:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F60>, <py_sfcl.CommandDataDefinition object at 0x061FA480>) , Command count = 1333 ] 
16:17:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4AB0>, <py_sfcl.CommandDataDefinition object at 0x061F4FC0>) , Command count = 1334 ] 
16:17:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1335 ] 
16:17:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:49: [ SetBusWidth(0x1) , Command count = 1336 ] 
16:17:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:49: ####CSD Registe 2.0 Values####
16:17:49: CSD_STRUCTURE                                 :0x1
16:17:49: Reserv1                                       :0x0
16:17:49: Time Access 1 TAAC                            :0xe
16:17:49: Time Access 2 NSAC*100                        :0x0
16:17:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:49: Card Command Classess CCC                     :0x5b5
16:17:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:49: DSR(driver stage register)  DSR_IMP           :0x0
16:17:49: Reserv2                                       :0x0
16:17:49: Device Size C_SIZE                            :0xedc8
16:17:49: Reserv3                                       :0x0
16:17:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:49: Reserv4                                       :0x0
16:17:49: Write Speed Factor R2W_FACTOR                 :0x2
16:17:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:49: FILE_FORMAT_GRP                               :0x0
16:17:49: COPY flag                                     :0x1
16:17:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:49: File_Format                                   :0x0
16:17:49: CRC                                           :0x0
16:17:49: ####CSD Registe Values####  

16:17:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:49: ProductSerialNumber = 0x23482900
16:17:49: CardMaximumLBA      = 0x3b72400
16:17:49: CardCapacity        = 32G
16:17:49: Is card secure      = 0
16:17:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:49: [DVTCommonLib]###  LogicalWrite called
16:17:50: [ WriteLba(0x2EBDF9C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1337 ] 
16:17:50: [DVTCommonLib]###  LogicalWrite Completed 

16:17:50: [DVTCommonLib]###  LogicalRead called
16:17:52: [ ReadLba(0x2EBDF9C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1338 ] 
16:17:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 145 times 

16:17:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1339 ] 
16:17:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA360>, <py_sfcl.CommandDataDefinition object at 0x061FA750>) , Command count = 1340 ] 
16:17:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4390>, <py_sfcl.CommandDataDefinition object at 0x061F4A50>) , Command count = 1341 ] 
16:17:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1342 ] 
16:17:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:52: [ SetBusWidth(0x1) , Command count = 1343 ] 
16:17:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:52: ####CSD Registe 2.0 Values####
16:17:52: CSD_STRUCTURE                                 :0x1
16:17:52: Reserv1                                       :0x0
16:17:52: Time Access 1 TAAC                            :0xe
16:17:52: Time Access 2 NSAC*100                        :0x0
16:17:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:52: Card Command Classess CCC                     :0x5b5
16:17:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:52: DSR(driver stage register)  DSR_IMP           :0x0
16:17:52: Reserv2                                       :0x0
16:17:52: Device Size C_SIZE                            :0xedc8
16:17:52: Reserv3                                       :0x0
16:17:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:52: Reserv4                                       :0x0
16:17:52: Write Speed Factor R2W_FACTOR                 :0x2
16:17:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:52: FILE_FORMAT_GRP                               :0x0
16:17:52: COPY flag                                     :0x1
16:17:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:52: File_Format                                   :0x0
16:17:52: CRC                                           :0x0
16:17:52: ####CSD Registe Values####  

16:17:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:52: ProductSerialNumber = 0x23482900
16:17:52: CardMaximumLBA      = 0x3b72400
16:17:52: CardCapacity        = 32G
16:17:52: Is card secure      = 0
16:17:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:52: [DVTCommonLib]###  LogicalWrite called
16:17:54: [ WriteLba(0x9050A4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1344 ] 
16:17:54: [DVTCommonLib]###  LogicalWrite Completed 

16:17:54: [DVTCommonLib]###  LogicalRead called
16:17:55: [ ReadLba(0x9050A4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1345 ] 
16:17:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 146 times 

16:17:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1346 ] 
16:17:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDC00>, <py_sfcl.CommandDataDefinition object at 0x061F4A80>) , Command count = 1347 ] 
16:17:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F46C0>, <py_sfcl.CommandDataDefinition object at 0x061F4F60>) , Command count = 1348 ] 
16:17:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1349 ] 
16:17:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:55: [ SetBusWidth(0x1) , Command count = 1350 ] 
16:17:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:55: ####CSD Registe 2.0 Values####
16:17:55: CSD_STRUCTURE                                 :0x1
16:17:55: Reserv1                                       :0x0
16:17:55: Time Access 1 TAAC                            :0xe
16:17:55: Time Access 2 NSAC*100                        :0x0
16:17:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:55: Card Command Classess CCC                     :0x5b5
16:17:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:55: DSR(driver stage register)  DSR_IMP           :0x0
16:17:55: Reserv2                                       :0x0
16:17:55: Device Size C_SIZE                            :0xedc8
16:17:55: Reserv3                                       :0x0
16:17:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:55: Reserv4                                       :0x0
16:17:55: Write Speed Factor R2W_FACTOR                 :0x2
16:17:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:55: FILE_FORMAT_GRP                               :0x0
16:17:55: COPY flag                                     :0x1
16:17:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:55: File_Format                                   :0x0
16:17:55: CRC                                           :0x0
16:17:55: ####CSD Registe Values####  

16:17:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:55: ProductSerialNumber = 0x23482900
16:17:55: CardMaximumLBA      = 0x3b72400
16:17:55: CardCapacity        = 32G
16:17:55: Is card secure      = 0
16:17:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:55: [DVTCommonLib]###  LogicalWrite called
16:17:57: [ WriteLba(0x358D654, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1351 ] 
16:17:57: [DVTCommonLib]###  LogicalWrite Completed 

16:17:57: [DVTCommonLib]###  LogicalRead called
16:17:59: [ ReadLba(0x358D654, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1352 ] 
16:17:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:17:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:17:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 147 times 

16:17:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:17:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:17:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1353 ] 
16:17:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:17:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:17:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:17:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:17:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:17:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4780>, <py_sfcl.CommandDataDefinition object at 0x061F45A0>) , Command count = 1354 ] 
16:17:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:17:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4330>, <py_sfcl.CommandDataDefinition object at 0x061F4570>) , Command count = 1355 ] 
16:17:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:17:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1356 ] 
16:17:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:17:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:17:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:17:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:17:59: [ SetBusWidth(0x1) , Command count = 1357 ] 
16:17:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:17:59: ####CSD Registe 2.0 Values####
16:17:59: CSD_STRUCTURE                                 :0x1
16:17:59: Reserv1                                       :0x0
16:17:59: Time Access 1 TAAC                            :0xe
16:17:59: Time Access 2 NSAC*100                        :0x0
16:17:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:17:59: Card Command Classess CCC                     :0x5b5
16:17:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:17:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:17:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:17:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:17:59: DSR(driver stage register)  DSR_IMP           :0x0
16:17:59: Reserv2                                       :0x0
16:17:59: Device Size C_SIZE                            :0xedc8
16:17:59: Reserv3                                       :0x0
16:17:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:17:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:17:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:17:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:17:59: Reserv4                                       :0x0
16:17:59: Write Speed Factor R2W_FACTOR                 :0x2
16:17:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:17:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:17:59: FILE_FORMAT_GRP                               :0x0
16:17:59: COPY flag                                     :0x1
16:17:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:17:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:17:59: File_Format                                   :0x0
16:17:59: CRC                                           :0x0
16:17:59: ####CSD Registe Values####  

16:17:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:17:59: ProductSerialNumber = 0x23482900
16:17:59: CardMaximumLBA      = 0x3b72400
16:17:59: CardCapacity        = 32G
16:17:59: Is card secure      = 0
16:17:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:17:59: [DVTCommonLib]###  LogicalWrite called
16:18:00: [ WriteLba(0x39D2668, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1358 ] 
16:18:00: [DVTCommonLib]###  LogicalWrite Completed 

16:18:00: [DVTCommonLib]###  LogicalRead called
16:18:02: [ ReadLba(0x39D2668, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1359 ] 
16:18:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 148 times 

16:18:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1360 ] 
16:18:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061ED6F0>) , Command count = 1361 ] 
16:18:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4690>, <py_sfcl.CommandDataDefinition object at 0x061EAB40>) , Command count = 1362 ] 
16:18:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1363 ] 
16:18:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:02: [ SetBusWidth(0x1) , Command count = 1364 ] 
16:18:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:02: ####CSD Registe 2.0 Values####
16:18:02: CSD_STRUCTURE                                 :0x1
16:18:02: Reserv1                                       :0x0
16:18:02: Time Access 1 TAAC                            :0xe
16:18:02: Time Access 2 NSAC*100                        :0x0
16:18:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:02: Card Command Classess CCC                     :0x5b5
16:18:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:02: DSR(driver stage register)  DSR_IMP           :0x0
16:18:02: Reserv2                                       :0x0
16:18:02: Device Size C_SIZE                            :0xedc8
16:18:02: Reserv3                                       :0x0
16:18:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:02: Reserv4                                       :0x0
16:18:02: Write Speed Factor R2W_FACTOR                 :0x2
16:18:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:02: FILE_FORMAT_GRP                               :0x0
16:18:02: COPY flag                                     :0x1
16:18:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:02: File_Format                                   :0x0
16:18:02: CRC                                           :0x0
16:18:02: ####CSD Registe Values####  

16:18:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:02: ProductSerialNumber = 0x23482900
16:18:02: CardMaximumLBA      = 0x3b72400
16:18:02: CardCapacity        = 32G
16:18:02: Is card secure      = 0
16:18:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:02: [DVTCommonLib]###  LogicalWrite called
16:18:04: [ WriteLba(0x341A6F0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1365 ] 
16:18:04: [DVTCommonLib]###  LogicalWrite Completed 

16:18:04: [DVTCommonLib]###  LogicalRead called
16:18:05: [ ReadLba(0x341A6F0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1366 ] 
16:18:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 149 times 

16:18:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1367 ] 
16:18:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3F0>, <py_sfcl.CommandDataDefinition object at 0x061ED3C0>) , Command count = 1368 ] 
16:18:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAD20>, <py_sfcl.CommandDataDefinition object at 0x061EA090>) , Command count = 1369 ] 
16:18:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1370 ] 
16:18:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:05: [ SetBusWidth(0x1) , Command count = 1371 ] 
16:18:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:05: ####CSD Registe 2.0 Values####
16:18:05: CSD_STRUCTURE                                 :0x1
16:18:05: Reserv1                                       :0x0
16:18:05: Time Access 1 TAAC                            :0xe
16:18:05: Time Access 2 NSAC*100                        :0x0
16:18:05: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:05: Card Command Classess CCC                     :0x5b5
16:18:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:05: DSR(driver stage register)  DSR_IMP           :0x0
16:18:05: Reserv2                                       :0x0
16:18:05: Device Size C_SIZE                            :0xedc8
16:18:05: Reserv3                                       :0x0
16:18:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:05: Reserv4                                       :0x0
16:18:05: Write Speed Factor R2W_FACTOR                 :0x2
16:18:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:05: FILE_FORMAT_GRP                               :0x0
16:18:05: COPY flag                                     :0x1
16:18:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:05: File_Format                                   :0x0
16:18:05: CRC                                           :0x0
16:18:05: ####CSD Registe Values####  

16:18:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:06: ProductSerialNumber = 0x23482900
16:18:06: CardMaximumLBA      = 0x3b72400
16:18:06: CardCapacity        = 32G
16:18:06: Is card secure      = 0
16:18:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:06: [DVTCommonLib]###  LogicalWrite called
16:18:07: [ WriteLba(0xC2DA36, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1372 ] 
16:18:07: [DVTCommonLib]###  LogicalWrite Completed 

16:18:07: [DVTCommonLib]###  LogicalRead called
16:18:09: [ ReadLba(0xC2DA36, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1373 ] 
16:18:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 150 times 

16:18:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1374 ] 
16:18:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAED0>, <py_sfcl.CommandDataDefinition object at 0x061EAF30>) , Command count = 1375 ] 
16:18:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA870>, <py_sfcl.CommandDataDefinition object at 0x061EA390>) , Command count = 1376 ] 
16:18:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1377 ] 
16:18:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:09: [ SetBusWidth(0x1) , Command count = 1378 ] 
16:18:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:09: ####CSD Registe 2.0 Values####
16:18:09: CSD_STRUCTURE                                 :0x1
16:18:09: Reserv1                                       :0x0
16:18:09: Time Access 1 TAAC                            :0xe
16:18:09: Time Access 2 NSAC*100                        :0x0
16:18:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:09: Card Command Classess CCC                     :0x5b5
16:18:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:09: DSR(driver stage register)  DSR_IMP           :0x0
16:18:09: Reserv2                                       :0x0
16:18:09: Device Size C_SIZE                            :0xedc8
16:18:09: Reserv3                                       :0x0
16:18:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:09: Reserv4                                       :0x0
16:18:09: Write Speed Factor R2W_FACTOR                 :0x2
16:18:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:09: FILE_FORMAT_GRP                               :0x0
16:18:09: COPY flag                                     :0x1
16:18:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:09: File_Format                                   :0x0
16:18:09: CRC                                           :0x0
16:18:09: ####CSD Registe Values####  

16:18:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:09: ProductSerialNumber = 0x23482900
16:18:09: CardMaximumLBA      = 0x3b72400
16:18:09: CardCapacity        = 32G
16:18:09: Is card secure      = 0
16:18:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:09: [DVTCommonLib]###  LogicalWrite called
16:18:11: [ WriteLba(0x1D96671, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1379 ] 
16:18:11: [DVTCommonLib]###  LogicalWrite Completed 

16:18:11: [DVTCommonLib]###  LogicalRead called
16:18:12: [ ReadLba(0x1D96671, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1380 ] 
16:18:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 151 times 

16:18:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1381 ] 
16:18:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA1E0>, <py_sfcl.CommandDataDefinition object at 0x061EA150>) , Command count = 1382 ] 
16:18:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA8D0>, <py_sfcl.CommandDataDefinition object at 0x061EA300>) , Command count = 1383 ] 
16:18:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1384 ] 
16:18:12: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:12: [ SetBusWidth(0x1) , Command count = 1385 ] 
16:18:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:12: ####CSD Registe 2.0 Values####
16:18:12: CSD_STRUCTURE                                 :0x1
16:18:12: Reserv1                                       :0x0
16:18:12: Time Access 1 TAAC                            :0xe
16:18:12: Time Access 2 NSAC*100                        :0x0
16:18:12: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:12: Card Command Classess CCC                     :0x5b5
16:18:12: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:12: DSR(driver stage register)  DSR_IMP           :0x0
16:18:12: Reserv2                                       :0x0
16:18:12: Device Size C_SIZE                            :0xedc8
16:18:12: Reserv3                                       :0x0
16:18:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:12: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:12: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:12: Reserv4                                       :0x0
16:18:12: Write Speed Factor R2W_FACTOR                 :0x2
16:18:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:12: FILE_FORMAT_GRP                               :0x0
16:18:12: COPY flag                                     :0x1
16:18:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:12: File_Format                                   :0x0
16:18:12: CRC                                           :0x0
16:18:12: ####CSD Registe Values####  

16:18:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:12: ProductSerialNumber = 0x23482900
16:18:12: CardMaximumLBA      = 0x3b72400
16:18:12: CardCapacity        = 32G
16:18:12: Is card secure      = 0
16:18:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:12: [DVTCommonLib]###  LogicalWrite called
16:18:14: [ WriteLba(0x17619E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1386 ] 
16:18:14: [DVTCommonLib]###  LogicalWrite Completed 

16:18:14: [DVTCommonLib]###  LogicalRead called
16:18:15: [ ReadLba(0x17619E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1387 ] 
16:18:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 152 times 

16:18:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1388 ] 
16:18:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA240>, <py_sfcl.CommandDataDefinition object at 0x061EA540>) , Command count = 1389 ] 
16:18:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA690>, <py_sfcl.CommandDataDefinition object at 0x061EA6F0>) , Command count = 1390 ] 
16:18:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1391 ] 
16:18:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:16: [ SetBusWidth(0x1) , Command count = 1392 ] 
16:18:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:16: ####CSD Registe 2.0 Values####
16:18:16: CSD_STRUCTURE                                 :0x1
16:18:16: Reserv1                                       :0x0
16:18:16: Time Access 1 TAAC                            :0xe
16:18:16: Time Access 2 NSAC*100                        :0x0
16:18:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:16: Card Command Classess CCC                     :0x5b5
16:18:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:16: DSR(driver stage register)  DSR_IMP           :0x0
16:18:16: Reserv2                                       :0x0
16:18:16: Device Size C_SIZE                            :0xedc8
16:18:16: Reserv3                                       :0x0
16:18:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:16: Reserv4                                       :0x0
16:18:16: Write Speed Factor R2W_FACTOR                 :0x2
16:18:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:16: FILE_FORMAT_GRP                               :0x0
16:18:16: COPY flag                                     :0x1
16:18:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:16: File_Format                                   :0x0
16:18:16: CRC                                           :0x0
16:18:16: ####CSD Registe Values####  

16:18:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:16: ProductSerialNumber = 0x23482900
16:18:16: CardMaximumLBA      = 0x3b72400
16:18:16: CardCapacity        = 32G
16:18:16: Is card secure      = 0
16:18:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:16: [DVTCommonLib]###  LogicalWrite called
16:18:17: [ WriteLba(0x48E175, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1393 ] 
16:18:17: [DVTCommonLib]###  LogicalWrite Completed 

16:18:17: [DVTCommonLib]###  LogicalRead called
16:18:19: [ ReadLba(0x48E175, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1394 ] 
16:18:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 153 times 

16:18:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1395 ] 
16:18:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA270>, <py_sfcl.CommandDataDefinition object at 0x061EA930>) , Command count = 1396 ] 
16:18:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA750>, <py_sfcl.CommandDataDefinition object at 0x061EA9C0>) , Command count = 1397 ] 
16:18:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1398 ] 
16:18:19: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:19: [ SetBusWidth(0x1) , Command count = 1399 ] 
16:18:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:19: ####CSD Registe 2.0 Values####
16:18:19: CSD_STRUCTURE                                 :0x1
16:18:19: Reserv1                                       :0x0
16:18:19: Time Access 1 TAAC                            :0xe
16:18:19: Time Access 2 NSAC*100                        :0x0
16:18:19: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:19: Card Command Classess CCC                     :0x5b5
16:18:19: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:19: DSR(driver stage register)  DSR_IMP           :0x0
16:18:19: Reserv2                                       :0x0
16:18:19: Device Size C_SIZE                            :0xedc8
16:18:19: Reserv3                                       :0x0
16:18:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:19: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:19: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:19: Reserv4                                       :0x0
16:18:19: Write Speed Factor R2W_FACTOR                 :0x2
16:18:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:19: FILE_FORMAT_GRP                               :0x0
16:18:19: COPY flag                                     :0x1
16:18:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:19: File_Format                                   :0x0
16:18:19: CRC                                           :0x0
16:18:19: ####CSD Registe Values####  

16:18:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:19: ProductSerialNumber = 0x23482900
16:18:19: CardMaximumLBA      = 0x3b72400
16:18:19: CardCapacity        = 32G
16:18:19: Is card secure      = 0
16:18:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:19: [DVTCommonLib]###  LogicalWrite called
16:18:21: [ WriteLba(0x129C855, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1400 ] 
16:18:21: [DVTCommonLib]###  LogicalWrite Completed 

16:18:21: [DVTCommonLib]###  LogicalRead called
16:18:22: [ ReadLba(0x129C855, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1401 ] 
16:18:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 154 times 

16:18:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1402 ] 
16:18:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 1403 ] 
16:18:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA630>, <py_sfcl.CommandDataDefinition object at 0x061EADE0>) , Command count = 1404 ] 
16:18:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1405 ] 
16:18:22: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:22: [ SetBusWidth(0x1) , Command count = 1406 ] 
16:18:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:22: ####CSD Registe 2.0 Values####
16:18:22: CSD_STRUCTURE                                 :0x1
16:18:22: Reserv1                                       :0x0
16:18:22: Time Access 1 TAAC                            :0xe
16:18:22: Time Access 2 NSAC*100                        :0x0
16:18:22: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:22: Card Command Classess CCC                     :0x5b5
16:18:22: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:22: DSR(driver stage register)  DSR_IMP           :0x0
16:18:22: Reserv2                                       :0x0
16:18:22: Device Size C_SIZE                            :0xedc8
16:18:22: Reserv3                                       :0x0
16:18:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:22: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:22: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:22: Reserv4                                       :0x0
16:18:22: Write Speed Factor R2W_FACTOR                 :0x2
16:18:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:22: FILE_FORMAT_GRP                               :0x0
16:18:22: COPY flag                                     :0x1
16:18:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:22: File_Format                                   :0x0
16:18:22: CRC                                           :0x0
16:18:22: ####CSD Registe Values####  

16:18:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:22: ProductSerialNumber = 0x23482900
16:18:22: CardMaximumLBA      = 0x3b72400
16:18:22: CardCapacity        = 32G
16:18:22: Is card secure      = 0
16:18:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:22: [DVTCommonLib]###  LogicalWrite called
16:18:24: [ WriteLba(0x2E2EF28, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1407 ] 
16:18:24: [DVTCommonLib]###  LogicalWrite Completed 

16:18:24: [DVTCommonLib]###  LogicalRead called
16:18:26: [ ReadLba(0x2E2EF28, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1408 ] 
16:18:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 155 times 

16:18:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1409 ] 
16:18:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x061ED060>) , Command count = 1410 ] 
16:18:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA720>, <py_sfcl.CommandDataDefinition object at 0x061EADE0>) , Command count = 1411 ] 
16:18:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1412 ] 
16:18:26: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:26: [ SetBusWidth(0x1) , Command count = 1413 ] 
16:18:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:26: ####CSD Registe 2.0 Values####
16:18:26: CSD_STRUCTURE                                 :0x1
16:18:26: Reserv1                                       :0x0
16:18:26: Time Access 1 TAAC                            :0xe
16:18:26: Time Access 2 NSAC*100                        :0x0
16:18:26: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:26: Card Command Classess CCC                     :0x5b5
16:18:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:26: DSR(driver stage register)  DSR_IMP           :0x0
16:18:26: Reserv2                                       :0x0
16:18:26: Device Size C_SIZE                            :0xedc8
16:18:26: Reserv3                                       :0x0
16:18:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:26: Reserv4                                       :0x0
16:18:26: Write Speed Factor R2W_FACTOR                 :0x2
16:18:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:26: FILE_FORMAT_GRP                               :0x0
16:18:26: COPY flag                                     :0x1
16:18:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:26: File_Format                                   :0x0
16:18:26: CRC                                           :0x0
16:18:26: ####CSD Registe Values####  

16:18:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:26: ProductSerialNumber = 0x23482900
16:18:26: CardMaximumLBA      = 0x3b72400
16:18:26: CardCapacity        = 32G
16:18:26: Is card secure      = 0
16:18:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:26: [DVTCommonLib]###  LogicalWrite called
16:18:27: [ WriteLba(0x2D47499, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1414 ] 
16:18:27: [DVTCommonLib]###  LogicalWrite Completed 

16:18:27: [DVTCommonLib]###  LogicalRead called
16:18:29: [ ReadLba(0x2D47499, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1415 ] 
16:18:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 156 times 

16:18:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1416 ] 
16:18:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED030>, <py_sfcl.CommandDataDefinition object at 0x061ED360>) , Command count = 1417 ] 
16:18:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED480>, <py_sfcl.CommandDataDefinition object at 0x061EABD0>) , Command count = 1418 ] 
16:18:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1419 ] 
16:18:29: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:29: [ SetBusWidth(0x1) , Command count = 1420 ] 
16:18:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:29: ####CSD Registe 2.0 Values####
16:18:29: CSD_STRUCTURE                                 :0x1
16:18:29: Reserv1                                       :0x0
16:18:29: Time Access 1 TAAC                            :0xe
16:18:29: Time Access 2 NSAC*100                        :0x0
16:18:29: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:29: Card Command Classess CCC                     :0x5b5
16:18:29: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:29: DSR(driver stage register)  DSR_IMP           :0x0
16:18:29: Reserv2                                       :0x0
16:18:29: Device Size C_SIZE                            :0xedc8
16:18:29: Reserv3                                       :0x0
16:18:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:29: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:29: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:29: Reserv4                                       :0x0
16:18:29: Write Speed Factor R2W_FACTOR                 :0x2
16:18:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:29: FILE_FORMAT_GRP                               :0x0
16:18:29: COPY flag                                     :0x1
16:18:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:29: File_Format                                   :0x0
16:18:29: CRC                                           :0x0
16:18:29: ####CSD Registe Values####  

16:18:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:29: ProductSerialNumber = 0x23482900
16:18:29: CardMaximumLBA      = 0x3b72400
16:18:29: CardCapacity        = 32G
16:18:29: Is card secure      = 0
16:18:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:29: [DVTCommonLib]###  LogicalWrite called
16:18:31: [ WriteLba(0x1343711, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1421 ] 
16:18:31: [DVTCommonLib]###  LogicalWrite Completed 

16:18:31: [DVTCommonLib]###  LogicalRead called
16:18:32: [ ReadLba(0x1343711, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1422 ] 
16:18:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 157 times 

16:18:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1423 ] 
16:18:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED240>, <py_sfcl.CommandDataDefinition object at 0x061ED750>) , Command count = 1424 ] 
16:18:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x061EABD0>) , Command count = 1425 ] 
16:18:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1426 ] 
16:18:33: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:33: [ SetBusWidth(0x1) , Command count = 1427 ] 
16:18:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:33: ####CSD Registe 2.0 Values####
16:18:33: CSD_STRUCTURE                                 :0x1
16:18:33: Reserv1                                       :0x0
16:18:33: Time Access 1 TAAC                            :0xe
16:18:33: Time Access 2 NSAC*100                        :0x0
16:18:33: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:33: Card Command Classess CCC                     :0x5b5
16:18:33: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:33: DSR(driver stage register)  DSR_IMP           :0x0
16:18:33: Reserv2                                       :0x0
16:18:33: Device Size C_SIZE                            :0xedc8
16:18:33: Reserv3                                       :0x0
16:18:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:33: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:33: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:33: Reserv4                                       :0x0
16:18:33: Write Speed Factor R2W_FACTOR                 :0x2
16:18:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:33: FILE_FORMAT_GRP                               :0x0
16:18:33: COPY flag                                     :0x1
16:18:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:33: File_Format                                   :0x0
16:18:33: CRC                                           :0x0
16:18:33: ####CSD Registe Values####  

16:18:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:33: ProductSerialNumber = 0x23482900
16:18:33: CardMaximumLBA      = 0x3b72400
16:18:33: CardCapacity        = 32G
16:18:33: Is card secure      = 0
16:18:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:33: [DVTCommonLib]###  LogicalWrite called
16:18:34: [ WriteLba(0x281A5F6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1428 ] 
16:18:34: [DVTCommonLib]###  LogicalWrite Completed 

16:18:34: [DVTCommonLib]###  LogicalRead called
16:18:36: [ ReadLba(0x281A5F6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1429 ] 
16:18:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 158 times 

16:18:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1430 ] 
16:18:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 1431 ] 
16:18:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD20>, <py_sfcl.CommandDataDefinition object at 0x061EABD0>) , Command count = 1432 ] 
16:18:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1433 ] 
16:18:36: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:36: [ SetBusWidth(0x1) , Command count = 1434 ] 
16:18:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:36: ####CSD Registe 2.0 Values####
16:18:36: CSD_STRUCTURE                                 :0x1
16:18:36: Reserv1                                       :0x0
16:18:36: Time Access 1 TAAC                            :0xe
16:18:36: Time Access 2 NSAC*100                        :0x0
16:18:36: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:36: Card Command Classess CCC                     :0x5b5
16:18:36: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:36: DSR(driver stage register)  DSR_IMP           :0x0
16:18:36: Reserv2                                       :0x0
16:18:36: Device Size C_SIZE                            :0xedc8
16:18:36: Reserv3                                       :0x0
16:18:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:36: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:36: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:36: Reserv4                                       :0x0
16:18:36: Write Speed Factor R2W_FACTOR                 :0x2
16:18:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:36: FILE_FORMAT_GRP                               :0x0
16:18:36: COPY flag                                     :0x1
16:18:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:36: File_Format                                   :0x0
16:18:36: CRC                                           :0x0
16:18:36: ####CSD Registe Values####  

16:18:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:36: ProductSerialNumber = 0x23482900
16:18:36: CardMaximumLBA      = 0x3b72400
16:18:36: CardCapacity        = 32G
16:18:36: Is card secure      = 0
16:18:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:36: [DVTCommonLib]###  LogicalWrite called
16:18:38: [ WriteLba(0x31D2456, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1435 ] 
16:18:38: [DVTCommonLib]###  LogicalWrite Completed 

16:18:38: [DVTCommonLib]###  LogicalRead called
16:18:39: [ ReadLba(0x31D2456, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1436 ] 
16:18:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 159 times 

16:18:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1437 ] 
16:18:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED810>, <py_sfcl.CommandDataDefinition object at 0x061ED8D0>) , Command count = 1438 ] 
16:18:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EACF0>, <py_sfcl.CommandDataDefinition object at 0x061EABD0>) , Command count = 1439 ] 
16:18:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1440 ] 
16:18:39: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:39: [ SetBusWidth(0x1) , Command count = 1441 ] 
16:18:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:39: ####CSD Registe 2.0 Values####
16:18:39: CSD_STRUCTURE                                 :0x1
16:18:39: Reserv1                                       :0x0
16:18:39: Time Access 1 TAAC                            :0xe
16:18:39: Time Access 2 NSAC*100                        :0x0
16:18:39: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:39: Card Command Classess CCC                     :0x5b5
16:18:39: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:39: DSR(driver stage register)  DSR_IMP           :0x0
16:18:39: Reserv2                                       :0x0
16:18:39: Device Size C_SIZE                            :0xedc8
16:18:39: Reserv3                                       :0x0
16:18:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:39: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:39: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:39: Reserv4                                       :0x0
16:18:39: Write Speed Factor R2W_FACTOR                 :0x2
16:18:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:39: FILE_FORMAT_GRP                               :0x0
16:18:39: COPY flag                                     :0x1
16:18:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:39: File_Format                                   :0x0
16:18:39: CRC                                           :0x0
16:18:39: ####CSD Registe Values####  

16:18:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:39: ProductSerialNumber = 0x23482900
16:18:39: CardMaximumLBA      = 0x3b72400
16:18:39: CardCapacity        = 32G
16:18:39: Is card secure      = 0
16:18:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:39: [DVTCommonLib]###  LogicalWrite called
16:18:41: [ WriteLba(0x2D8A7FF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1442 ] 
16:18:41: [DVTCommonLib]###  LogicalWrite Completed 

16:18:41: [DVTCommonLib]###  LogicalRead called
16:18:42: [ ReadLba(0x2D8A7FF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1443 ] 
16:18:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 160 times 

16:18:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1444 ] 
16:18:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9F0>, <py_sfcl.CommandDataDefinition object at 0x061EDA20>) , Command count = 1445 ] 
16:18:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F44E0>, <py_sfcl.CommandDataDefinition object at 0x061F4510>) , Command count = 1446 ] 
16:18:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1447 ] 
16:18:43: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:43: [ SetBusWidth(0x1) , Command count = 1448 ] 
16:18:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:43: ####CSD Registe 2.0 Values####
16:18:43: CSD_STRUCTURE                                 :0x1
16:18:43: Reserv1                                       :0x0
16:18:43: Time Access 1 TAAC                            :0xe
16:18:43: Time Access 2 NSAC*100                        :0x0
16:18:43: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:43: Card Command Classess CCC                     :0x5b5
16:18:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:43: DSR(driver stage register)  DSR_IMP           :0x0
16:18:43: Reserv2                                       :0x0
16:18:43: Device Size C_SIZE                            :0xedc8
16:18:43: Reserv3                                       :0x0
16:18:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:43: Reserv4                                       :0x0
16:18:43: Write Speed Factor R2W_FACTOR                 :0x2
16:18:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:43: FILE_FORMAT_GRP                               :0x0
16:18:43: COPY flag                                     :0x1
16:18:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:43: File_Format                                   :0x0
16:18:43: CRC                                           :0x0
16:18:43: ####CSD Registe Values####  

16:18:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:43: ProductSerialNumber = 0x23482900
16:18:43: CardMaximumLBA      = 0x3b72400
16:18:43: CardCapacity        = 32G
16:18:43: Is card secure      = 0
16:18:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:43: [DVTCommonLib]###  LogicalWrite called
16:18:44: [ WriteLba(0x250A10A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1449 ] 
16:18:44: [DVTCommonLib]###  LogicalWrite Completed 

16:18:44: [DVTCommonLib]###  LogicalRead called
16:18:46: [ ReadLba(0x250A10A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1450 ] 
16:18:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 161 times 

16:18:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1451 ] 
16:18:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F43F0>, <py_sfcl.CommandDataDefinition object at 0x061F4660>) , Command count = 1452 ] 
16:18:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4720>, <py_sfcl.CommandDataDefinition object at 0x061F4630>) , Command count = 1453 ] 
16:18:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1454 ] 
16:18:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:46: [ SetBusWidth(0x1) , Command count = 1455 ] 
16:18:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:46: ####CSD Registe 2.0 Values####
16:18:46: CSD_STRUCTURE                                 :0x1
16:18:46: Reserv1                                       :0x0
16:18:46: Time Access 1 TAAC                            :0xe
16:18:46: Time Access 2 NSAC*100                        :0x0
16:18:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:46: Card Command Classess CCC                     :0x5b5
16:18:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:46: DSR(driver stage register)  DSR_IMP           :0x0
16:18:46: Reserv2                                       :0x0
16:18:46: Device Size C_SIZE                            :0xedc8
16:18:46: Reserv3                                       :0x0
16:18:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:46: Reserv4                                       :0x0
16:18:46: Write Speed Factor R2W_FACTOR                 :0x2
16:18:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:46: FILE_FORMAT_GRP                               :0x0
16:18:46: COPY flag                                     :0x1
16:18:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:46: File_Format                                   :0x0
16:18:46: CRC                                           :0x0
16:18:46: ####CSD Registe Values####  

16:18:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:46: ProductSerialNumber = 0x23482900
16:18:46: CardMaximumLBA      = 0x3b72400
16:18:46: CardCapacity        = 32G
16:18:46: Is card secure      = 0
16:18:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:46: [DVTCommonLib]###  LogicalWrite called
16:18:48: [ WriteLba(0x2C7CCC3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1456 ] 
16:18:48: [DVTCommonLib]###  LogicalWrite Completed 

16:18:48: [DVTCommonLib]###  LogicalRead called
16:18:49: [ ReadLba(0x2C7CCC3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1457 ] 
16:18:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 162 times 

16:18:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1458 ] 
16:18:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4600>, <py_sfcl.CommandDataDefinition object at 0x061F49F0>) , Command count = 1459 ] 
16:18:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B10>, <py_sfcl.CommandDataDefinition object at 0x061F4CF0>) , Command count = 1460 ] 
16:18:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1461 ] 
16:18:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:49: [ SetBusWidth(0x1) , Command count = 1462 ] 
16:18:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:49: ####CSD Registe 2.0 Values####
16:18:49: CSD_STRUCTURE                                 :0x1
16:18:49: Reserv1                                       :0x0
16:18:49: Time Access 1 TAAC                            :0xe
16:18:49: Time Access 2 NSAC*100                        :0x0
16:18:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:49: Card Command Classess CCC                     :0x5b5
16:18:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:49: DSR(driver stage register)  DSR_IMP           :0x0
16:18:49: Reserv2                                       :0x0
16:18:49: Device Size C_SIZE                            :0xedc8
16:18:49: Reserv3                                       :0x0
16:18:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:49: Reserv4                                       :0x0
16:18:49: Write Speed Factor R2W_FACTOR                 :0x2
16:18:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:49: FILE_FORMAT_GRP                               :0x0
16:18:49: COPY flag                                     :0x1
16:18:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:49: File_Format                                   :0x0
16:18:49: CRC                                           :0x0
16:18:49: ####CSD Registe Values####  

16:18:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:49: ProductSerialNumber = 0x23482900
16:18:49: CardMaximumLBA      = 0x3b72400
16:18:49: CardCapacity        = 32G
16:18:49: Is card secure      = 0
16:18:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:49: [DVTCommonLib]###  LogicalWrite called
16:18:51: [ WriteLba(0x33827EB, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1463 ] 
16:18:51: [DVTCommonLib]###  LogicalWrite Completed 

16:18:51: [DVTCommonLib]###  LogicalRead called
16:18:53: [ ReadLba(0x33827EB, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1464 ] 
16:18:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 163 times 

16:18:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1465 ] 
16:18:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA210>, <py_sfcl.CommandDataDefinition object at 0x061F4C60>) , Command count = 1466 ] 
16:18:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA120>, <py_sfcl.CommandDataDefinition object at 0x061F4C90>) , Command count = 1467 ] 
16:18:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1468 ] 
16:18:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:53: [ SetBusWidth(0x1) , Command count = 1469 ] 
16:18:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:53: ####CSD Registe 2.0 Values####
16:18:53: CSD_STRUCTURE                                 :0x1
16:18:53: Reserv1                                       :0x0
16:18:53: Time Access 1 TAAC                            :0xe
16:18:53: Time Access 2 NSAC*100                        :0x0
16:18:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:53: Card Command Classess CCC                     :0x5b5
16:18:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:53: DSR(driver stage register)  DSR_IMP           :0x0
16:18:53: Reserv2                                       :0x0
16:18:53: Device Size C_SIZE                            :0xedc8
16:18:53: Reserv3                                       :0x0
16:18:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:53: Reserv4                                       :0x0
16:18:53: Write Speed Factor R2W_FACTOR                 :0x2
16:18:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:53: FILE_FORMAT_GRP                               :0x0
16:18:53: COPY flag                                     :0x1
16:18:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:53: File_Format                                   :0x0
16:18:53: CRC                                           :0x0
16:18:53: ####CSD Registe Values####  

16:18:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:53: ProductSerialNumber = 0x23482900
16:18:53: CardMaximumLBA      = 0x3b72400
16:18:53: CardCapacity        = 32G
16:18:53: Is card secure      = 0
16:18:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:53: [DVTCommonLib]###  LogicalWrite called
16:18:54: [ WriteLba(0xCE0A25, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1470 ] 
16:18:54: [DVTCommonLib]###  LogicalWrite Completed 

16:18:54: [DVTCommonLib]###  LogicalRead called
16:18:56: [ ReadLba(0xCE0A25, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1471 ] 
16:18:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 164 times 

16:18:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1472 ] 
16:18:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D20>, <py_sfcl.CommandDataDefinition object at 0x061F4D50>) , Command count = 1473 ] 
16:18:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA030>, <py_sfcl.CommandDataDefinition object at 0x061FA300>) , Command count = 1474 ] 
16:18:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1475 ] 
16:18:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:56: [ SetBusWidth(0x1) , Command count = 1476 ] 
16:18:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:56: ####CSD Registe 2.0 Values####
16:18:56: CSD_STRUCTURE                                 :0x1
16:18:56: Reserv1                                       :0x0
16:18:56: Time Access 1 TAAC                            :0xe
16:18:56: Time Access 2 NSAC*100                        :0x0
16:18:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:18:56: Card Command Classess CCC                     :0x5b5
16:18:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:18:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:18:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:18:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:18:56: DSR(driver stage register)  DSR_IMP           :0x0
16:18:56: Reserv2                                       :0x0
16:18:56: Device Size C_SIZE                            :0xedc8
16:18:56: Reserv3                                       :0x0
16:18:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:18:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:18:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:18:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:18:56: Reserv4                                       :0x0
16:18:56: Write Speed Factor R2W_FACTOR                 :0x2
16:18:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:18:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:18:56: FILE_FORMAT_GRP                               :0x0
16:18:56: COPY flag                                     :0x1
16:18:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:18:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:18:56: File_Format                                   :0x0
16:18:56: CRC                                           :0x0
16:18:56: ####CSD Registe Values####  

16:18:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:18:56: ProductSerialNumber = 0x23482900
16:18:56: CardMaximumLBA      = 0x3b72400
16:18:56: CardCapacity        = 32G
16:18:56: Is card secure      = 0
16:18:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:18:56: [DVTCommonLib]###  LogicalWrite called
16:18:58: [ WriteLba(0x2D5DE66, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1477 ] 
16:18:58: [DVTCommonLib]###  LogicalWrite Completed 

16:18:58: [DVTCommonLib]###  LogicalRead called
16:18:59: [ ReadLba(0x2D5DE66, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1478 ] 
16:18:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:18:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:18:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 165 times 

16:18:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:18:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:18:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1479 ] 
16:18:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:18:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:18:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:18:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:18:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:18:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:18:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA060>, <py_sfcl.CommandDataDefinition object at 0x061FA3C0>) , Command count = 1480 ] 
16:18:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:18:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA4E0>, <py_sfcl.CommandDataDefinition object at 0x061FA570>) , Command count = 1481 ] 
16:18:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:18:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1482 ] 
16:18:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:18:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:18:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:18:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:18:59: [ SetBusWidth(0x1) , Command count = 1483 ] 
16:18:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:18:59: ####CSD Registe 2.0 Values####
16:18:59: CSD_STRUCTURE                                 :0x1
16:18:59: Reserv1                                       :0x0
16:18:59: Time Access 1 TAAC                            :0xe
16:18:59: Time Access 2 NSAC*100                        :0x0
16:18:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:00: Card Command Classess CCC                     :0x5b5
16:19:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:00: DSR(driver stage register)  DSR_IMP           :0x0
16:19:00: Reserv2                                       :0x0
16:19:00: Device Size C_SIZE                            :0xedc8
16:19:00: Reserv3                                       :0x0
16:19:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:00: Reserv4                                       :0x0
16:19:00: Write Speed Factor R2W_FACTOR                 :0x2
16:19:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:00: FILE_FORMAT_GRP                               :0x0
16:19:00: COPY flag                                     :0x1
16:19:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:00: File_Format                                   :0x0
16:19:00: CRC                                           :0x0
16:19:00: ####CSD Registe Values####  

16:19:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:00: ProductSerialNumber = 0x23482900
16:19:00: CardMaximumLBA      = 0x3b72400
16:19:00: CardCapacity        = 32G
16:19:00: Is card secure      = 0
16:19:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:00: [DVTCommonLib]###  LogicalWrite called
16:19:01: [ WriteLba(0x14D4EF0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1484 ] 
16:19:01: [DVTCommonLib]###  LogicalWrite Completed 

16:19:01: [DVTCommonLib]###  LogicalRead called
16:19:03: [ ReadLba(0x14D4EF0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1485 ] 
16:19:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 166 times 

16:19:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1486 ] 
16:19:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA600>, <py_sfcl.CommandDataDefinition object at 0x061FA7B0>) , Command count = 1487 ] 
16:19:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA8D0>, <py_sfcl.CommandDataDefinition object at 0x061FA960>) , Command count = 1488 ] 
16:19:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1489 ] 
16:19:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:03: [ SetBusWidth(0x1) , Command count = 1490 ] 
16:19:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:03: ####CSD Registe 2.0 Values####
16:19:03: CSD_STRUCTURE                                 :0x1
16:19:03: Reserv1                                       :0x0
16:19:03: Time Access 1 TAAC                            :0xe
16:19:03: Time Access 2 NSAC*100                        :0x0
16:19:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:03: Card Command Classess CCC                     :0x5b5
16:19:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:03: DSR(driver stage register)  DSR_IMP           :0x0
16:19:03: Reserv2                                       :0x0
16:19:03: Device Size C_SIZE                            :0xedc8
16:19:03: Reserv3                                       :0x0
16:19:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:03: Reserv4                                       :0x0
16:19:03: Write Speed Factor R2W_FACTOR                 :0x2
16:19:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:03: FILE_FORMAT_GRP                               :0x0
16:19:03: COPY flag                                     :0x1
16:19:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:03: File_Format                                   :0x0
16:19:03: CRC                                           :0x0
16:19:03: ####CSD Registe Values####  

16:19:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:03: ProductSerialNumber = 0x23482900
16:19:03: CardMaximumLBA      = 0x3b72400
16:19:03: CardCapacity        = 32G
16:19:03: Is card secure      = 0
16:19:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:03: [DVTCommonLib]###  LogicalWrite called
16:19:05: [ WriteLba(0x12F12A0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1491 ] 
16:19:05: [DVTCommonLib]###  LogicalWrite Completed 

16:19:05: [DVTCommonLib]###  LogicalRead called
16:19:06: [ ReadLba(0x12F12A0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1492 ] 
16:19:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 167 times 

16:19:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1493 ] 
16:19:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 1494 ] 
16:19:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAC90>, <py_sfcl.CommandDataDefinition object at 0x061FAB40>) , Command count = 1495 ] 
16:19:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1496 ] 
16:19:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:06: [ SetBusWidth(0x1) , Command count = 1497 ] 
16:19:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:06: ####CSD Registe 2.0 Values####
16:19:06: CSD_STRUCTURE                                 :0x1
16:19:06: Reserv1                                       :0x0
16:19:06: Time Access 1 TAAC                            :0xe
16:19:06: Time Access 2 NSAC*100                        :0x0
16:19:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:06: Card Command Classess CCC                     :0x5b5
16:19:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:06: DSR(driver stage register)  DSR_IMP           :0x0
16:19:06: Reserv2                                       :0x0
16:19:06: Device Size C_SIZE                            :0xedc8
16:19:06: Reserv3                                       :0x0
16:19:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:06: Reserv4                                       :0x0
16:19:06: Write Speed Factor R2W_FACTOR                 :0x2
16:19:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:06: FILE_FORMAT_GRP                               :0x0
16:19:06: COPY flag                                     :0x1
16:19:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:06: File_Format                                   :0x0
16:19:06: CRC                                           :0x0
16:19:06: ####CSD Registe Values####  

16:19:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:06: ProductSerialNumber = 0x23482900
16:19:06: CardMaximumLBA      = 0x3b72400
16:19:06: CardCapacity        = 32G
16:19:06: Is card secure      = 0
16:19:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:06: [DVTCommonLib]###  LogicalWrite called
16:19:08: [ WriteLba(0xBB7243, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1498 ] 
16:19:08: [DVTCommonLib]###  LogicalWrite Completed 

16:19:08: [DVTCommonLib]###  LogicalRead called
16:19:09: [ ReadLba(0xBB7243, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1499 ] 
16:19:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 168 times 

16:19:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1500 ] 
16:19:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE030>, <py_sfcl.CommandDataDefinition object at 0x061FE3F0>) , Command count = 1501 ] 
16:19:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE2D0>, <py_sfcl.CommandDataDefinition object at 0x061FAC00>) , Command count = 1502 ] 
16:19:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1503 ] 
16:19:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:10: [ SetBusWidth(0x1) , Command count = 1504 ] 
16:19:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:10: ####CSD Registe 2.0 Values####
16:19:10: CSD_STRUCTURE                                 :0x1
16:19:10: Reserv1                                       :0x0
16:19:10: Time Access 1 TAAC                            :0xe
16:19:10: Time Access 2 NSAC*100                        :0x0
16:19:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:10: Card Command Classess CCC                     :0x5b5
16:19:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:10: DSR(driver stage register)  DSR_IMP           :0x0
16:19:10: Reserv2                                       :0x0
16:19:10: Device Size C_SIZE                            :0xedc8
16:19:10: Reserv3                                       :0x0
16:19:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:10: Reserv4                                       :0x0
16:19:10: Write Speed Factor R2W_FACTOR                 :0x2
16:19:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:10: FILE_FORMAT_GRP                               :0x0
16:19:10: COPY flag                                     :0x1
16:19:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:10: File_Format                                   :0x0
16:19:10: CRC                                           :0x0
16:19:10: ####CSD Registe Values####  

16:19:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:10: ProductSerialNumber = 0x23482900
16:19:10: CardMaximumLBA      = 0x3b72400
16:19:10: CardCapacity        = 32G
16:19:10: Is card secure      = 0
16:19:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:10: [DVTCommonLib]###  LogicalWrite called
16:19:11: [ WriteLba(0x5CFAE2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1505 ] 
16:19:11: [DVTCommonLib]###  LogicalWrite Completed 

16:19:11: [DVTCommonLib]###  LogicalRead called
16:19:13: [ ReadLba(0x5CFAE2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1506 ] 
16:19:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 169 times 

16:19:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1507 ] 
16:19:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAEA0>, <py_sfcl.CommandDataDefinition object at 0x061FE210>) , Command count = 1508 ] 
16:19:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE2A0>, <py_sfcl.CommandDataDefinition object at 0x061FE0F0>) , Command count = 1509 ] 
16:19:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:13: [ SetCardRCA(0x1, 0xD555) , Command count = 1510 ] 
16:19:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:13: [ SetBusWidth(0x1) , Command count = 1511 ] 
16:19:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:13: ####CSD Registe 2.0 Values####
16:19:13: CSD_STRUCTURE                                 :0x1
16:19:13: Reserv1                                       :0x0
16:19:13: Time Access 1 TAAC                            :0xe
16:19:13: Time Access 2 NSAC*100                        :0x0
16:19:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:13: Card Command Classess CCC                     :0x5b5
16:19:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:13: DSR(driver stage register)  DSR_IMP           :0x0
16:19:13: Reserv2                                       :0x0
16:19:13: Device Size C_SIZE                            :0xedc8
16:19:13: Reserv3                                       :0x0
16:19:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:13: Reserv4                                       :0x0
16:19:13: Write Speed Factor R2W_FACTOR                 :0x2
16:19:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:13: FILE_FORMAT_GRP                               :0x0
16:19:13: COPY flag                                     :0x1
16:19:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:13: File_Format                                   :0x0
16:19:13: CRC                                           :0x0
16:19:13: ####CSD Registe Values####  

16:19:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:13: ProductSerialNumber = 0x23482900
16:19:13: CardMaximumLBA      = 0x3b72400
16:19:13: CardCapacity        = 32G
16:19:13: Is card secure      = 0
16:19:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:13: [DVTCommonLib]###  LogicalWrite called
16:19:15: [ WriteLba(0x37310F6, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1512 ] 
16:19:15: [DVTCommonLib]###  LogicalWrite Completed 

16:19:15: [DVTCommonLib]###  LogicalRead called
16:19:16: [ ReadLba(0x37310F6, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1513 ] 
16:19:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 170 times 

16:19:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1514 ] 
16:19:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FA6C0>) , Command count = 1515 ] 
16:19:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE690>, <py_sfcl.CommandDataDefinition object at 0x061FE570>) , Command count = 1516 ] 
16:19:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1517 ] 
16:19:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:16: [ SetBusWidth(0x1) , Command count = 1518 ] 
16:19:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:16: ####CSD Registe 2.0 Values####
16:19:16: CSD_STRUCTURE                                 :0x1
16:19:16: Reserv1                                       :0x0
16:19:16: Time Access 1 TAAC                            :0xe
16:19:16: Time Access 2 NSAC*100                        :0x0
16:19:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:16: Card Command Classess CCC                     :0x5b5
16:19:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:16: DSR(driver stage register)  DSR_IMP           :0x0
16:19:16: Reserv2                                       :0x0
16:19:16: Device Size C_SIZE                            :0xedc8
16:19:16: Reserv3                                       :0x0
16:19:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:16: Reserv4                                       :0x0
16:19:16: Write Speed Factor R2W_FACTOR                 :0x2
16:19:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:16: FILE_FORMAT_GRP                               :0x0
16:19:16: COPY flag                                     :0x1
16:19:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:16: File_Format                                   :0x0
16:19:16: CRC                                           :0x0
16:19:16: ####CSD Registe Values####  

16:19:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:16: ProductSerialNumber = 0x23482900
16:19:16: CardMaximumLBA      = 0x3b72400
16:19:16: CardCapacity        = 32G
16:19:16: Is card secure      = 0
16:19:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:16: [DVTCommonLib]###  LogicalWrite called
16:19:18: [ WriteLba(0x211DD41, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1519 ] 
16:19:18: [DVTCommonLib]###  LogicalWrite Completed 

16:19:18: [DVTCommonLib]###  LogicalRead called
16:19:20: [ ReadLba(0x211DD41, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1520 ] 
16:19:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 171 times 

16:19:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1521 ] 
16:19:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FA7E0>) , Command count = 1522 ] 
16:19:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEA50>, <py_sfcl.CommandDataDefinition object at 0x061FE960>) , Command count = 1523 ] 
16:19:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:20: [ SetCardRCA(0x1, 0xD555) , Command count = 1524 ] 
16:19:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:20: [ SetBusWidth(0x1) , Command count = 1525 ] 
16:19:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:20: ####CSD Registe 2.0 Values####
16:19:20: CSD_STRUCTURE                                 :0x1
16:19:20: Reserv1                                       :0x0
16:19:20: Time Access 1 TAAC                            :0xe
16:19:20: Time Access 2 NSAC*100                        :0x0
16:19:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:20: Card Command Classess CCC                     :0x5b5
16:19:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:20: DSR(driver stage register)  DSR_IMP           :0x0
16:19:20: Reserv2                                       :0x0
16:19:20: Device Size C_SIZE                            :0xedc8
16:19:20: Reserv3                                       :0x0
16:19:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:20: Reserv4                                       :0x0
16:19:20: Write Speed Factor R2W_FACTOR                 :0x2
16:19:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:20: FILE_FORMAT_GRP                               :0x0
16:19:20: COPY flag                                     :0x1
16:19:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:20: File_Format                                   :0x0
16:19:20: CRC                                           :0x0
16:19:20: ####CSD Registe Values####  

16:19:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:20: ProductSerialNumber = 0x23482900
16:19:20: CardMaximumLBA      = 0x3b72400
16:19:20: CardCapacity        = 32G
16:19:20: Is card secure      = 0
16:19:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:20: [DVTCommonLib]###  LogicalWrite called
16:19:21: [ WriteLba(0x21AAC5D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1526 ] 
16:19:21: [DVTCommonLib]###  LogicalWrite Completed 

16:19:21: [DVTCommonLib]###  LogicalRead called
16:19:23: [ ReadLba(0x21AAC5D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1527 ] 
16:19:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 172 times 

16:19:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1528 ] 
16:19:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337FC0>, <py_sfcl.CommandDataDefinition object at 0x0544E0F0>) , Command count = 1529 ] 
16:19:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05422150>, <py_sfcl.CommandDataDefinition object at 0x061FE960>) , Command count = 1530 ] 
16:19:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:23: [ SetCardRCA(0x1, 0xD555) , Command count = 1531 ] 
16:19:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:23: [ SetBusWidth(0x1) , Command count = 1532 ] 
16:19:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:23: ####CSD Registe 2.0 Values####
16:19:23: CSD_STRUCTURE                                 :0x1
16:19:23: Reserv1                                       :0x0
16:19:23: Time Access 1 TAAC                            :0xe
16:19:23: Time Access 2 NSAC*100                        :0x0
16:19:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:23: Card Command Classess CCC                     :0x5b5
16:19:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:23: DSR(driver stage register)  DSR_IMP           :0x0
16:19:23: Reserv2                                       :0x0
16:19:23: Device Size C_SIZE                            :0xedc8
16:19:23: Reserv3                                       :0x0
16:19:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:23: Reserv4                                       :0x0
16:19:23: Write Speed Factor R2W_FACTOR                 :0x2
16:19:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:23: FILE_FORMAT_GRP                               :0x0
16:19:23: COPY flag                                     :0x1
16:19:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:23: File_Format                                   :0x0
16:19:23: CRC                                           :0x0
16:19:23: ####CSD Registe Values####  

16:19:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:23: ProductSerialNumber = 0x23482900
16:19:23: CardMaximumLBA      = 0x3b72400
16:19:23: CardCapacity        = 32G
16:19:23: Is card secure      = 0
16:19:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:23: [DVTCommonLib]###  LogicalWrite called
16:19:25: [ WriteLba(0x1B9F10B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1533 ] 
16:19:25: [DVTCommonLib]###  LogicalWrite Completed 

16:19:25: [DVTCommonLib]###  LogicalRead called
16:19:26: [ ReadLba(0x1B9F10B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1534 ] 
16:19:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 173 times 

16:19:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1535 ] 
16:19:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0541D7B0>, <py_sfcl.CommandDataDefinition object at 0x0544EE70>) , Command count = 1536 ] 
16:19:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544CEA0>, <py_sfcl.CommandDataDefinition object at 0x061FE960>) , Command count = 1537 ] 
16:19:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1538 ] 
16:19:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:27: [ SetBusWidth(0x1) , Command count = 1539 ] 
16:19:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:27: ####CSD Registe 2.0 Values####
16:19:27: CSD_STRUCTURE                                 :0x1
16:19:27: Reserv1                                       :0x0
16:19:27: Time Access 1 TAAC                            :0xe
16:19:27: Time Access 2 NSAC*100                        :0x0
16:19:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:27: Card Command Classess CCC                     :0x5b5
16:19:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:27: DSR(driver stage register)  DSR_IMP           :0x0
16:19:27: Reserv2                                       :0x0
16:19:27: Device Size C_SIZE                            :0xedc8
16:19:27: Reserv3                                       :0x0
16:19:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:27: Reserv4                                       :0x0
16:19:27: Write Speed Factor R2W_FACTOR                 :0x2
16:19:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:27: FILE_FORMAT_GRP                               :0x0
16:19:27: COPY flag                                     :0x1
16:19:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:27: File_Format                                   :0x0
16:19:27: CRC                                           :0x0
16:19:27: ####CSD Registe Values####  

16:19:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:27: ProductSerialNumber = 0x23482900
16:19:27: CardMaximumLBA      = 0x3b72400
16:19:27: CardCapacity        = 32G
16:19:27: Is card secure      = 0
16:19:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:27: [DVTCommonLib]###  LogicalWrite called
16:19:28: [ WriteLba(0x23A7722, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1540 ] 
16:19:28: [DVTCommonLib]###  LogicalWrite Completed 

16:19:28: [DVTCommonLib]###  LogicalRead called
16:19:30: [ ReadLba(0x23A7722, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1541 ] 
16:19:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 174 times 

16:19:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1542 ] 
16:19:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC30>, <py_sfcl.CommandDataDefinition object at 0x05460A20>) , Command count = 1543 ] 
16:19:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE780>, <py_sfcl.CommandDataDefinition object at 0x061FE6F0>) , Command count = 1544 ] 
16:19:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:30: [ SetCardRCA(0x1, 0xD555) , Command count = 1545 ] 
16:19:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:30: [ SetBusWidth(0x1) , Command count = 1546 ] 
16:19:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:30: ####CSD Registe 2.0 Values####
16:19:30: CSD_STRUCTURE                                 :0x1
16:19:30: Reserv1                                       :0x0
16:19:30: Time Access 1 TAAC                            :0xe
16:19:30: Time Access 2 NSAC*100                        :0x0
16:19:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:30: Card Command Classess CCC                     :0x5b5
16:19:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:30: DSR(driver stage register)  DSR_IMP           :0x0
16:19:30: Reserv2                                       :0x0
16:19:30: Device Size C_SIZE                            :0xedc8
16:19:30: Reserv3                                       :0x0
16:19:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:30: Reserv4                                       :0x0
16:19:30: Write Speed Factor R2W_FACTOR                 :0x2
16:19:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:30: FILE_FORMAT_GRP                               :0x0
16:19:30: COPY flag                                     :0x1
16:19:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:30: File_Format                                   :0x0
16:19:30: CRC                                           :0x0
16:19:30: ####CSD Registe Values####  

16:19:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:30: ProductSerialNumber = 0x23482900
16:19:30: CardMaximumLBA      = 0x3b72400
16:19:30: CardCapacity        = 32G
16:19:30: Is card secure      = 0
16:19:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:30: [DVTCommonLib]###  LogicalWrite called
16:19:32: [ WriteLba(0xA8BA7F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1547 ] 
16:19:32: [DVTCommonLib]###  LogicalWrite Completed 

16:19:32: [DVTCommonLib]###  LogicalRead called
16:19:33: [ ReadLba(0xA8BA7F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1548 ] 
16:19:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 175 times 

16:19:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1549 ] 
16:19:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EF30>, <py_sfcl.CommandDataDefinition object at 0x0544EC00>) , Command count = 1550 ] 
16:19:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460C00>, <py_sfcl.CommandDataDefinition object at 0x061FE6F0>) , Command count = 1551 ] 
16:19:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1552 ] 
16:19:33: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:33: [ SetBusWidth(0x1) , Command count = 1553 ] 
16:19:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:33: ####CSD Registe 2.0 Values####
16:19:33: CSD_STRUCTURE                                 :0x1
16:19:33: Reserv1                                       :0x0
16:19:33: Time Access 1 TAAC                            :0xe
16:19:33: Time Access 2 NSAC*100                        :0x0
16:19:33: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:33: Card Command Classess CCC                     :0x5b5
16:19:33: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:33: DSR(driver stage register)  DSR_IMP           :0x0
16:19:33: Reserv2                                       :0x0
16:19:33: Device Size C_SIZE                            :0xedc8
16:19:33: Reserv3                                       :0x0
16:19:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:33: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:33: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:33: Reserv4                                       :0x0
16:19:33: Write Speed Factor R2W_FACTOR                 :0x2
16:19:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:33: FILE_FORMAT_GRP                               :0x0
16:19:33: COPY flag                                     :0x1
16:19:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:33: File_Format                                   :0x0
16:19:33: CRC                                           :0x0
16:19:33: ####CSD Registe Values####  

16:19:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:33: ProductSerialNumber = 0x23482900
16:19:33: CardMaximumLBA      = 0x3b72400
16:19:33: CardCapacity        = 32G
16:19:33: Is card secure      = 0
16:19:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:33: [DVTCommonLib]###  LogicalWrite called
16:19:35: [ WriteLba(0xC2CDE5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1554 ] 
16:19:35: [DVTCommonLib]###  LogicalWrite Completed 

16:19:35: [DVTCommonLib]###  LogicalRead called
16:19:37: [ ReadLba(0xC2CDE5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1555 ] 
16:19:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 176 times 

16:19:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1556 ] 
16:19:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337E40>, <py_sfcl.CommandDataDefinition object at 0x0544E210>) , Command count = 1557 ] 
16:19:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2030>, <py_sfcl.CommandDataDefinition object at 0x061FE1B0>) , Command count = 1558 ] 
16:19:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:37: [ SetCardRCA(0x1, 0xD555) , Command count = 1559 ] 
16:19:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:37: [ SetBusWidth(0x1) , Command count = 1560 ] 
16:19:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:37: ####CSD Registe 2.0 Values####
16:19:37: CSD_STRUCTURE                                 :0x1
16:19:37: Reserv1                                       :0x0
16:19:37: Time Access 1 TAAC                            :0xe
16:19:37: Time Access 2 NSAC*100                        :0x0
16:19:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:37: Card Command Classess CCC                     :0x5b5
16:19:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:37: DSR(driver stage register)  DSR_IMP           :0x0
16:19:37: Reserv2                                       :0x0
16:19:37: Device Size C_SIZE                            :0xedc8
16:19:37: Reserv3                                       :0x0
16:19:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:37: Reserv4                                       :0x0
16:19:37: Write Speed Factor R2W_FACTOR                 :0x2
16:19:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:37: FILE_FORMAT_GRP                               :0x0
16:19:37: COPY flag                                     :0x1
16:19:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:37: File_Format                                   :0x0
16:19:37: CRC                                           :0x0
16:19:37: ####CSD Registe Values####  

16:19:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:37: ProductSerialNumber = 0x23482900
16:19:37: CardMaximumLBA      = 0x3b72400
16:19:37: CardCapacity        = 32G
16:19:37: Is card secure      = 0
16:19:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:37: [DVTCommonLib]###  LogicalWrite called
16:19:38: [ WriteLba(0x26161E3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1561 ] 
16:19:38: [DVTCommonLib]###  LogicalWrite Completed 

16:19:38: [DVTCommonLib]###  LogicalRead called
16:19:40: [ ReadLba(0x26161E3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1562 ] 
16:19:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 177 times 

16:19:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1563 ] 
16:19:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F30>, <py_sfcl.CommandDataDefinition object at 0x060C2780>) , Command count = 1564 ] 
16:19:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CF90>, <py_sfcl.CommandDataDefinition object at 0x061FE390>) , Command count = 1565 ] 
16:19:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:40: [ SetCardRCA(0x1, 0xD555) , Command count = 1566 ] 
16:19:40: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:40: [ SetBusWidth(0x1) , Command count = 1567 ] 
16:19:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:40: ####CSD Registe 2.0 Values####
16:19:40: CSD_STRUCTURE                                 :0x1
16:19:40: Reserv1                                       :0x0
16:19:40: Time Access 1 TAAC                            :0xe
16:19:40: Time Access 2 NSAC*100                        :0x0
16:19:40: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:40: Card Command Classess CCC                     :0x5b5
16:19:40: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:40: DSR(driver stage register)  DSR_IMP           :0x0
16:19:40: Reserv2                                       :0x0
16:19:40: Device Size C_SIZE                            :0xedc8
16:19:40: Reserv3                                       :0x0
16:19:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:40: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:40: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:40: Reserv4                                       :0x0
16:19:40: Write Speed Factor R2W_FACTOR                 :0x2
16:19:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:40: FILE_FORMAT_GRP                               :0x0
16:19:40: COPY flag                                     :0x1
16:19:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:40: File_Format                                   :0x0
16:19:40: CRC                                           :0x0
16:19:40: ####CSD Registe Values####  

16:19:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:40: ProductSerialNumber = 0x23482900
16:19:40: CardMaximumLBA      = 0x3b72400
16:19:40: CardCapacity        = 32G
16:19:40: Is card secure      = 0
16:19:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:40: [DVTCommonLib]###  LogicalWrite called
16:19:42: [ WriteLba(0xA026F1, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1568 ] 
16:19:42: [DVTCommonLib]###  LogicalWrite Completed 

16:19:42: [DVTCommonLib]###  LogicalRead called
16:19:43: [ ReadLba(0xA026F1, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1569 ] 
16:19:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 178 times 

16:19:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1570 ] 
16:19:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2AE0>, <py_sfcl.CommandDataDefinition object at 0x0612CF00>) , Command count = 1571 ] 
16:19:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAE70>, <py_sfcl.CommandDataDefinition object at 0x061FAD20>) , Command count = 1572 ] 
16:19:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1573 ] 
16:19:43: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:43: [ SetBusWidth(0x1) , Command count = 1574 ] 
16:19:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:43: ####CSD Registe 2.0 Values####
16:19:43: CSD_STRUCTURE                                 :0x1
16:19:43: Reserv1                                       :0x0
16:19:43: Time Access 1 TAAC                            :0xe
16:19:43: Time Access 2 NSAC*100                        :0x0
16:19:43: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:43: Card Command Classess CCC                     :0x5b5
16:19:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:43: DSR(driver stage register)  DSR_IMP           :0x0
16:19:43: Reserv2                                       :0x0
16:19:43: Device Size C_SIZE                            :0xedc8
16:19:43: Reserv3                                       :0x0
16:19:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:43: Reserv4                                       :0x0
16:19:43: Write Speed Factor R2W_FACTOR                 :0x2
16:19:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:43: FILE_FORMAT_GRP                               :0x0
16:19:43: COPY flag                                     :0x1
16:19:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:43: File_Format                                   :0x0
16:19:43: CRC                                           :0x0
16:19:43: ####CSD Registe Values####  

16:19:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:43: ProductSerialNumber = 0x23482900
16:19:43: CardMaximumLBA      = 0x3b72400
16:19:43: CardCapacity        = 32G
16:19:43: Is card secure      = 0
16:19:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:43: [DVTCommonLib]###  LogicalWrite called
16:19:45: [ WriteLba(0x12DF1F3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1575 ] 
16:19:45: [DVTCommonLib]###  LogicalWrite Completed 

16:19:45: [DVTCommonLib]###  LogicalRead called
16:19:47: [ ReadLba(0x12DF1F3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1576 ] 
16:19:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 179 times 

16:19:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1577 ] 
16:19:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE4B0>, <py_sfcl.CommandDataDefinition object at 0x060C2630>) , Command count = 1578 ] 
16:19:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA450>, <py_sfcl.CommandDataDefinition object at 0x061FA870>) , Command count = 1579 ] 
16:19:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:47: [ SetCardRCA(0x1, 0xD555) , Command count = 1580 ] 
16:19:47: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:47: [ SetBusWidth(0x1) , Command count = 1581 ] 
16:19:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:47: ####CSD Registe 2.0 Values####
16:19:47: CSD_STRUCTURE                                 :0x1
16:19:47: Reserv1                                       :0x0
16:19:47: Time Access 1 TAAC                            :0xe
16:19:47: Time Access 2 NSAC*100                        :0x0
16:19:47: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:47: Card Command Classess CCC                     :0x5b5
16:19:47: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:47: DSR(driver stage register)  DSR_IMP           :0x0
16:19:47: Reserv2                                       :0x0
16:19:47: Device Size C_SIZE                            :0xedc8
16:19:47: Reserv3                                       :0x0
16:19:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:47: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:47: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:47: Reserv4                                       :0x0
16:19:47: Write Speed Factor R2W_FACTOR                 :0x2
16:19:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:47: FILE_FORMAT_GRP                               :0x0
16:19:47: COPY flag                                     :0x1
16:19:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:47: File_Format                                   :0x0
16:19:47: CRC                                           :0x0
16:19:47: ####CSD Registe Values####  

16:19:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:47: ProductSerialNumber = 0x23482900
16:19:47: CardMaximumLBA      = 0x3b72400
16:19:47: CardCapacity        = 32G
16:19:47: Is card secure      = 0
16:19:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:47: [DVTCommonLib]###  LogicalWrite called
16:19:48: [ WriteLba(0x523708, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1582 ] 
16:19:48: [DVTCommonLib]###  LogicalWrite Completed 

16:19:48: [DVTCommonLib]###  LogicalRead called
16:19:50: [ ReadLba(0x523708, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1583 ] 
16:19:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 180 times 

16:19:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1584 ] 
16:19:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F60>, <py_sfcl.CommandDataDefinition object at 0x061F4090>) , Command count = 1585 ] 
16:19:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA420>, <py_sfcl.CommandDataDefinition object at 0x061FA480>) , Command count = 1586 ] 
16:19:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:50: [ SetCardRCA(0x1, 0xD555) , Command count = 1587 ] 
16:19:50: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:50: [ SetBusWidth(0x1) , Command count = 1588 ] 
16:19:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:50: ####CSD Registe 2.0 Values####
16:19:50: CSD_STRUCTURE                                 :0x1
16:19:50: Reserv1                                       :0x0
16:19:50: Time Access 1 TAAC                            :0xe
16:19:50: Time Access 2 NSAC*100                        :0x0
16:19:50: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:50: Card Command Classess CCC                     :0x5b5
16:19:50: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:50: DSR(driver stage register)  DSR_IMP           :0x0
16:19:50: Reserv2                                       :0x0
16:19:50: Device Size C_SIZE                            :0xedc8
16:19:50: Reserv3                                       :0x0
16:19:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:50: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:50: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:50: Reserv4                                       :0x0
16:19:50: Write Speed Factor R2W_FACTOR                 :0x2
16:19:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:50: FILE_FORMAT_GRP                               :0x0
16:19:50: COPY flag                                     :0x1
16:19:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:50: File_Format                                   :0x0
16:19:50: CRC                                           :0x0
16:19:50: ####CSD Registe Values####  

16:19:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:50: ProductSerialNumber = 0x23482900
16:19:50: CardMaximumLBA      = 0x3b72400
16:19:50: CardCapacity        = 32G
16:19:50: Is card secure      = 0
16:19:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:50: [DVTCommonLib]###  LogicalWrite called
16:19:52: [ WriteLba(0x133C661, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1589 ] 
16:19:52: [DVTCommonLib]###  LogicalWrite Completed 

16:19:52: [DVTCommonLib]###  LogicalRead called
16:19:53: [ ReadLba(0x133C661, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1590 ] 
16:19:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 181 times 

16:19:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1591 ] 
16:19:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543A480>, <py_sfcl.CommandDataDefinition object at 0x061FA360>) , Command count = 1592 ] 
16:19:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E10>, <py_sfcl.CommandDataDefinition object at 0x061F4E40>) , Command count = 1593 ] 
16:19:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1594 ] 
16:19:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:54: [ SetBusWidth(0x1) , Command count = 1595 ] 
16:19:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:54: ####CSD Registe 2.0 Values####
16:19:54: CSD_STRUCTURE                                 :0x1
16:19:54: Reserv1                                       :0x0
16:19:54: Time Access 1 TAAC                            :0xe
16:19:54: Time Access 2 NSAC*100                        :0x0
16:19:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:54: Card Command Classess CCC                     :0x5b5
16:19:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:54: DSR(driver stage register)  DSR_IMP           :0x0
16:19:54: Reserv2                                       :0x0
16:19:54: Device Size C_SIZE                            :0xedc8
16:19:54: Reserv3                                       :0x0
16:19:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:54: Reserv4                                       :0x0
16:19:54: Write Speed Factor R2W_FACTOR                 :0x2
16:19:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:54: FILE_FORMAT_GRP                               :0x0
16:19:54: COPY flag                                     :0x1
16:19:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:54: File_Format                                   :0x0
16:19:54: CRC                                           :0x0
16:19:54: ####CSD Registe Values####  

16:19:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:54: ProductSerialNumber = 0x23482900
16:19:54: CardMaximumLBA      = 0x3b72400
16:19:54: CardCapacity        = 32G
16:19:54: Is card secure      = 0
16:19:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:54: [DVTCommonLib]###  LogicalWrite called
16:19:55: [ WriteLba(0x1100280, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1596 ] 
16:19:55: [DVTCommonLib]###  LogicalWrite Completed 

16:19:55: [DVTCommonLib]###  LogicalRead called
16:19:57: [ ReadLba(0x1100280, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1597 ] 
16:19:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:19:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:19:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 182 times 

16:19:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:19:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:19:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1598 ] 
16:19:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:19:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:19:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:19:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:19:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:19:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA150>, <py_sfcl.CommandDataDefinition object at 0x061EDC00>) , Command count = 1599 ] 
16:19:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:19:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B70>, <py_sfcl.CommandDataDefinition object at 0x061F4A20>) , Command count = 1600 ] 
16:19:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:19:57: [ SetCardRCA(0x1, 0xD555) , Command count = 1601 ] 
16:19:57: [DVTCommonLib]### Identification :Idenfication of card completed 

16:19:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:19:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:19:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:19:57: [ SetBusWidth(0x1) , Command count = 1602 ] 
16:19:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:19:57: ####CSD Registe 2.0 Values####
16:19:57: CSD_STRUCTURE                                 :0x1
16:19:57: Reserv1                                       :0x0
16:19:57: Time Access 1 TAAC                            :0xe
16:19:57: Time Access 2 NSAC*100                        :0x0
16:19:57: Data Transfer Rate TRAN_SPEED                 :0x32
16:19:57: Card Command Classess CCC                     :0x5b5
16:19:57: Max Read Data Block Length  READ_BL_LEN       :0x9
16:19:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:19:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:19:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:19:57: DSR(driver stage register)  DSR_IMP           :0x0
16:19:57: Reserv2                                       :0x0
16:19:57: Device Size C_SIZE                            :0xedc8
16:19:57: Reserv3                                       :0x0
16:19:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:19:57: Erase Sector Size SECTOR_SIZE                 :0x7f
16:19:57: Write Protect Group Size WP_GRP_SIZE          :0x0
16:19:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:19:57: Reserv4                                       :0x0
16:19:57: Write Speed Factor R2W_FACTOR                 :0x2
16:19:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:19:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:19:57: FILE_FORMAT_GRP                               :0x0
16:19:57: COPY flag                                     :0x1
16:19:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:19:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:19:57: File_Format                                   :0x0
16:19:57: CRC                                           :0x0
16:19:57: ####CSD Registe Values####  

16:19:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:19:57: ProductSerialNumber = 0x23482900
16:19:57: CardMaximumLBA      = 0x3b72400
16:19:57: CardCapacity        = 32G
16:19:57: Is card secure      = 0
16:19:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:19:57: [DVTCommonLib]###  LogicalWrite called
16:19:59: [ WriteLba(0x1BCCA27, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1603 ] 
16:19:59: [DVTCommonLib]###  LogicalWrite Completed 

16:19:59: [DVTCommonLib]###  LogicalRead called
16:20:00: [ ReadLba(0x1BCCA27, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1604 ] 
16:20:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 183 times 

16:20:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1605 ] 
16:20:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4390>, <py_sfcl.CommandDataDefinition object at 0x061F4780>) , Command count = 1606 ] 
16:20:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4270>, <py_sfcl.CommandDataDefinition object at 0x061F4F00>) , Command count = 1607 ] 
16:20:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1608 ] 
16:20:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:00: [ SetBusWidth(0x1) , Command count = 1609 ] 
16:20:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:00: ####CSD Registe 2.0 Values####
16:20:00: CSD_STRUCTURE                                 :0x1
16:20:00: Reserv1                                       :0x0
16:20:00: Time Access 1 TAAC                            :0xe
16:20:00: Time Access 2 NSAC*100                        :0x0
16:20:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:00: Card Command Classess CCC                     :0x5b5
16:20:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:00: DSR(driver stage register)  DSR_IMP           :0x0
16:20:00: Reserv2                                       :0x0
16:20:00: Device Size C_SIZE                            :0xedc8
16:20:00: Reserv3                                       :0x0
16:20:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:00: Reserv4                                       :0x0
16:20:00: Write Speed Factor R2W_FACTOR                 :0x2
16:20:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:00: FILE_FORMAT_GRP                               :0x0
16:20:00: COPY flag                                     :0x1
16:20:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:00: File_Format                                   :0x0
16:20:00: CRC                                           :0x0
16:20:00: ####CSD Registe Values####  

16:20:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:00: ProductSerialNumber = 0x23482900
16:20:00: CardMaximumLBA      = 0x3b72400
16:20:00: CardCapacity        = 32G
16:20:00: Is card secure      = 0
16:20:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:00: [DVTCommonLib]###  LogicalWrite called
16:20:02: [ WriteLba(0x1013271, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1610 ] 
16:20:02: [DVTCommonLib]###  LogicalWrite Completed 

16:20:02: [DVTCommonLib]###  LogicalRead called
16:20:04: [ ReadLba(0x1013271, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1611 ] 
16:20:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 184 times 

16:20:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:04: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1612 ] 
16:20:04: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:04: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:04: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:04: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:04: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:04: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061ED6F0>) , Command count = 1613 ] 
16:20:04: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:04: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4570>, <py_sfcl.CommandDataDefinition object at 0x061EA0F0>) , Command count = 1614 ] 
16:20:04: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:04: [ SetCardRCA(0x1, 0xD555) , Command count = 1615 ] 
16:20:04: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:04: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:04: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:04: [ SetBusWidth(0x1) , Command count = 1616 ] 
16:20:04: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:04: ####CSD Registe 2.0 Values####
16:20:04: CSD_STRUCTURE                                 :0x1
16:20:04: Reserv1                                       :0x0
16:20:04: Time Access 1 TAAC                            :0xe
16:20:04: Time Access 2 NSAC*100                        :0x0
16:20:04: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:04: Card Command Classess CCC                     :0x5b5
16:20:04: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:04: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:04: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:04: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:04: DSR(driver stage register)  DSR_IMP           :0x0
16:20:04: Reserv2                                       :0x0
16:20:04: Device Size C_SIZE                            :0xedc8
16:20:04: Reserv3                                       :0x0
16:20:04: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:04: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:04: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:04: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:04: Reserv4                                       :0x0
16:20:04: Write Speed Factor R2W_FACTOR                 :0x2
16:20:04: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:04: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:04: FILE_FORMAT_GRP                               :0x0
16:20:04: COPY flag                                     :0x1
16:20:04: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:04: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:04: File_Format                                   :0x0
16:20:04: CRC                                           :0x0
16:20:04: ####CSD Registe Values####  

16:20:04: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:04: ProductSerialNumber = 0x23482900
16:20:04: CardMaximumLBA      = 0x3b72400
16:20:04: CardCapacity        = 32G
16:20:04: Is card secure      = 0
16:20:04: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:04: [DVTCommonLib]###  LogicalWrite called
16:20:05: [ WriteLba(0x3284BA8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1617 ] 
16:20:05: [DVTCommonLib]###  LogicalWrite Completed 

16:20:05: [DVTCommonLib]###  LogicalRead called
16:20:07: [ ReadLba(0x3284BA8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1618 ] 
16:20:07: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:07: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 185 times 

16:20:07: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:07: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:07: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1619 ] 
16:20:07: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:07: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:07: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:07: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:07: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:07: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA80>, <py_sfcl.CommandDataDefinition object at 0x061ED3F0>) , Command count = 1620 ] 
16:20:07: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:07: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4EA0>, <py_sfcl.CommandDataDefinition object at 0x061EAC60>) , Command count = 1621 ] 
16:20:07: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:07: [ SetCardRCA(0x1, 0xD555) , Command count = 1622 ] 
16:20:07: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:07: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:07: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:07: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:07: [ SetBusWidth(0x1) , Command count = 1623 ] 
16:20:07: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:07: ####CSD Registe 2.0 Values####
16:20:07: CSD_STRUCTURE                                 :0x1
16:20:07: Reserv1                                       :0x0
16:20:07: Time Access 1 TAAC                            :0xe
16:20:07: Time Access 2 NSAC*100                        :0x0
16:20:07: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:07: Card Command Classess CCC                     :0x5b5
16:20:07: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:07: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:07: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:07: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:07: DSR(driver stage register)  DSR_IMP           :0x0
16:20:07: Reserv2                                       :0x0
16:20:07: Device Size C_SIZE                            :0xedc8
16:20:07: Reserv3                                       :0x0
16:20:07: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:07: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:07: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:07: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:07: Reserv4                                       :0x0
16:20:07: Write Speed Factor R2W_FACTOR                 :0x2
16:20:07: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:07: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:07: FILE_FORMAT_GRP                               :0x0
16:20:07: COPY flag                                     :0x1
16:20:07: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:07: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:07: File_Format                                   :0x0
16:20:07: CRC                                           :0x0
16:20:07: ####CSD Registe Values####  

16:20:07: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:07: ProductSerialNumber = 0x23482900
16:20:07: CardMaximumLBA      = 0x3b72400
16:20:07: CardCapacity        = 32G
16:20:07: Is card secure      = 0
16:20:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:07: [DVTCommonLib]###  LogicalWrite called
16:20:09: [ WriteLba(0x1CE0069, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1624 ] 
16:20:09: [DVTCommonLib]###  LogicalWrite Completed 

16:20:09: [DVTCommonLib]###  LogicalRead called
16:20:10: [ ReadLba(0x1CE0069, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1625 ] 
16:20:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 186 times 

16:20:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1626 ] 
16:20:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4690>, <py_sfcl.CommandDataDefinition object at 0x061EAED0>) , Command count = 1627 ] 
16:20:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E1B0>, <py_sfcl.CommandDataDefinition object at 0x061EAF90>) , Command count = 1628 ] 
16:20:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:10: [ SetCardRCA(0x1, 0xD555) , Command count = 1629 ] 
16:20:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:10: [ SetBusWidth(0x1) , Command count = 1630 ] 
16:20:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:10: ####CSD Registe 2.0 Values####
16:20:10: CSD_STRUCTURE                                 :0x1
16:20:10: Reserv1                                       :0x0
16:20:10: Time Access 1 TAAC                            :0xe
16:20:10: Time Access 2 NSAC*100                        :0x0
16:20:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:10: Card Command Classess CCC                     :0x5b5
16:20:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:10: DSR(driver stage register)  DSR_IMP           :0x0
16:20:10: Reserv2                                       :0x0
16:20:10: Device Size C_SIZE                            :0xedc8
16:20:10: Reserv3                                       :0x0
16:20:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:10: Reserv4                                       :0x0
16:20:10: Write Speed Factor R2W_FACTOR                 :0x2
16:20:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:10: FILE_FORMAT_GRP                               :0x0
16:20:10: COPY flag                                     :0x1
16:20:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:10: File_Format                                   :0x0
16:20:10: CRC                                           :0x0
16:20:10: ####CSD Registe Values####  

16:20:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:11: ProductSerialNumber = 0x23482900
16:20:11: CardMaximumLBA      = 0x3b72400
16:20:11: CardCapacity        = 32G
16:20:11: Is card secure      = 0
16:20:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:11: [DVTCommonLib]###  LogicalWrite called
16:20:12: [ WriteLba(0x25C1E65, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1631 ] 
16:20:12: [DVTCommonLib]###  LogicalWrite Completed 

16:20:12: [DVTCommonLib]###  LogicalRead called
16:20:14: [ ReadLba(0x25C1E65, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1632 ] 
16:20:14: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:14: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 187 times 

16:20:14: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:14: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:14: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1633 ] 
16:20:14: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:14: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:14: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:14: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:14: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:14: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAD20>, <py_sfcl.CommandDataDefinition object at 0x061EA1E0>) , Command count = 1634 ] 
16:20:14: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:14: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA1B0>, <py_sfcl.CommandDataDefinition object at 0x061EA030>) , Command count = 1635 ] 
16:20:14: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:14: [ SetCardRCA(0x1, 0xD555) , Command count = 1636 ] 
16:20:14: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:14: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:14: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:14: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:14: [ SetBusWidth(0x1) , Command count = 1637 ] 
16:20:14: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:14: ####CSD Registe 2.0 Values####
16:20:14: CSD_STRUCTURE                                 :0x1
16:20:14: Reserv1                                       :0x0
16:20:14: Time Access 1 TAAC                            :0xe
16:20:14: Time Access 2 NSAC*100                        :0x0
16:20:14: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:14: Card Command Classess CCC                     :0x5b5
16:20:14: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:14: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:14: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:14: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:14: DSR(driver stage register)  DSR_IMP           :0x0
16:20:14: Reserv2                                       :0x0
16:20:14: Device Size C_SIZE                            :0xedc8
16:20:14: Reserv3                                       :0x0
16:20:14: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:14: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:14: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:14: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:14: Reserv4                                       :0x0
16:20:14: Write Speed Factor R2W_FACTOR                 :0x2
16:20:14: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:14: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:14: FILE_FORMAT_GRP                               :0x0
16:20:14: COPY flag                                     :0x1
16:20:14: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:14: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:14: File_Format                                   :0x0
16:20:14: CRC                                           :0x0
16:20:14: ####CSD Registe Values####  

16:20:14: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:14: ProductSerialNumber = 0x23482900
16:20:14: CardMaximumLBA      = 0x3b72400
16:20:14: CardCapacity        = 32G
16:20:14: Is card secure      = 0
16:20:14: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:14: [DVTCommonLib]###  LogicalWrite called
16:20:16: [ WriteLba(0x17436EF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1638 ] 
16:20:16: [DVTCommonLib]###  LogicalWrite Completed 

16:20:16: [DVTCommonLib]###  LogicalRead called
16:20:17: [ ReadLba(0x17436EF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1639 ] 
16:20:17: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:17: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 188 times 

16:20:17: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:17: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1640 ] 
16:20:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA870>, <py_sfcl.CommandDataDefinition object at 0x061EA240>) , Command count = 1641 ] 
16:20:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA9F0>, <py_sfcl.CommandDataDefinition object at 0x061EA420>) , Command count = 1642 ] 
16:20:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:17: [ SetCardRCA(0x1, 0xD555) , Command count = 1643 ] 
16:20:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:17: [ SetBusWidth(0x1) , Command count = 1644 ] 
16:20:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:17: ####CSD Registe 2.0 Values####
16:20:17: CSD_STRUCTURE                                 :0x1
16:20:17: Reserv1                                       :0x0
16:20:17: Time Access 1 TAAC                            :0xe
16:20:17: Time Access 2 NSAC*100                        :0x0
16:20:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:17: Card Command Classess CCC                     :0x5b5
16:20:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:17: DSR(driver stage register)  DSR_IMP           :0x0
16:20:17: Reserv2                                       :0x0
16:20:17: Device Size C_SIZE                            :0xedc8
16:20:17: Reserv3                                       :0x0
16:20:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:17: Reserv4                                       :0x0
16:20:17: Write Speed Factor R2W_FACTOR                 :0x2
16:20:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:17: FILE_FORMAT_GRP                               :0x0
16:20:17: COPY flag                                     :0x1
16:20:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:17: File_Format                                   :0x0
16:20:17: CRC                                           :0x0
16:20:17: ####CSD Registe Values####  

16:20:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:17: ProductSerialNumber = 0x23482900
16:20:17: CardMaximumLBA      = 0x3b72400
16:20:17: CardCapacity        = 32G
16:20:17: Is card secure      = 0
16:20:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:17: [DVTCommonLib]###  LogicalWrite called
16:20:19: [ WriteLba(0x2BF70F4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1645 ] 
16:20:19: [DVTCommonLib]###  LogicalWrite Completed 

16:20:19: [DVTCommonLib]###  LogicalRead called
16:20:21: [ ReadLba(0x2BF70F4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1646 ] 
16:20:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 189 times 

16:20:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:21: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1647 ] 
16:20:21: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:21: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:21: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:21: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:21: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:21: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA8D0>, <py_sfcl.CommandDataDefinition object at 0x061EA270>) , Command count = 1648 ] 
16:20:21: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:21: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA4E0>, <py_sfcl.CommandDataDefinition object at 0x061EA810>) , Command count = 1649 ] 
16:20:21: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:21: [ SetCardRCA(0x1, 0xD555) , Command count = 1650 ] 
16:20:21: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:21: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:21: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:21: [ SetBusWidth(0x1) , Command count = 1651 ] 
16:20:21: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:21: ####CSD Registe 2.0 Values####
16:20:21: CSD_STRUCTURE                                 :0x1
16:20:21: Reserv1                                       :0x0
16:20:21: Time Access 1 TAAC                            :0xe
16:20:21: Time Access 2 NSAC*100                        :0x0
16:20:21: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:21: Card Command Classess CCC                     :0x5b5
16:20:21: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:21: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:21: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:21: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:21: DSR(driver stage register)  DSR_IMP           :0x0
16:20:21: Reserv2                                       :0x0
16:20:21: Device Size C_SIZE                            :0xedc8
16:20:21: Reserv3                                       :0x0
16:20:21: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:21: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:21: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:21: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:21: Reserv4                                       :0x0
16:20:21: Write Speed Factor R2W_FACTOR                 :0x2
16:20:21: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:21: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:21: FILE_FORMAT_GRP                               :0x0
16:20:21: COPY flag                                     :0x1
16:20:21: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:21: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:21: File_Format                                   :0x0
16:20:21: CRC                                           :0x0
16:20:21: ####CSD Registe Values####  

16:20:21: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:21: ProductSerialNumber = 0x23482900
16:20:21: CardMaximumLBA      = 0x3b72400
16:20:21: CardCapacity        = 32G
16:20:21: Is card secure      = 0
16:20:21: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:21: [DVTCommonLib]###  LogicalWrite called
16:20:22: [ WriteLba(0x149CBC0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1652 ] 
16:20:22: [DVTCommonLib]###  LogicalWrite Completed 

16:20:22: [DVTCommonLib]###  LogicalRead called
16:20:24: [ ReadLba(0x149CBC0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1653 ] 
16:20:24: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:24: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 190 times 

16:20:24: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:24: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:24: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1654 ] 
16:20:24: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:24: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:24: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:24: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:24: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:24: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 1655 ] 
16:20:24: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:24: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA330>, <py_sfcl.CommandDataDefinition object at 0x061EAA50>) , Command count = 1656 ] 
16:20:24: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:24: [ SetCardRCA(0x1, 0xD555) , Command count = 1657 ] 
16:20:24: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:24: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:24: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:24: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:24: [ SetBusWidth(0x1) , Command count = 1658 ] 
16:20:24: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:24: ####CSD Registe 2.0 Values####
16:20:24: CSD_STRUCTURE                                 :0x1
16:20:24: Reserv1                                       :0x0
16:20:24: Time Access 1 TAAC                            :0xe
16:20:24: Time Access 2 NSAC*100                        :0x0
16:20:24: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:24: Card Command Classess CCC                     :0x5b5
16:20:24: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:24: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:24: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:24: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:24: DSR(driver stage register)  DSR_IMP           :0x0
16:20:24: Reserv2                                       :0x0
16:20:24: Device Size C_SIZE                            :0xedc8
16:20:24: Reserv3                                       :0x0
16:20:24: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:24: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:24: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:24: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:24: Reserv4                                       :0x0
16:20:24: Write Speed Factor R2W_FACTOR                 :0x2
16:20:24: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:24: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:24: FILE_FORMAT_GRP                               :0x0
16:20:24: COPY flag                                     :0x1
16:20:24: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:24: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:24: File_Format                                   :0x0
16:20:24: CRC                                           :0x0
16:20:24: ####CSD Registe Values####  

16:20:24: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:24: ProductSerialNumber = 0x23482900
16:20:24: CardMaximumLBA      = 0x3b72400
16:20:24: CardCapacity        = 32G
16:20:24: Is card secure      = 0
16:20:24: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:24: [DVTCommonLib]###  LogicalWrite called
16:20:26: [ WriteLba(0x278D24E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1659 ] 
16:20:26: [DVTCommonLib]###  LogicalWrite Completed 

16:20:26: [DVTCommonLib]###  LogicalRead called
16:20:27: [ ReadLba(0x278D24E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1660 ] 
16:20:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 191 times 

16:20:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1661 ] 
16:20:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x061ED060>) , Command count = 1662 ] 
16:20:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED150>, <py_sfcl.CommandDataDefinition object at 0x061EAF00>) , Command count = 1663 ] 
16:20:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:27: [ SetCardRCA(0x1, 0xD555) , Command count = 1664 ] 
16:20:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:27: [ SetBusWidth(0x1) , Command count = 1665 ] 
16:20:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:27: ####CSD Registe 2.0 Values####
16:20:27: CSD_STRUCTURE                                 :0x1
16:20:27: Reserv1                                       :0x0
16:20:27: Time Access 1 TAAC                            :0xe
16:20:27: Time Access 2 NSAC*100                        :0x0
16:20:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:27: Card Command Classess CCC                     :0x5b5
16:20:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:27: DSR(driver stage register)  DSR_IMP           :0x0
16:20:27: Reserv2                                       :0x0
16:20:27: Device Size C_SIZE                            :0xedc8
16:20:27: Reserv3                                       :0x0
16:20:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:27: Reserv4                                       :0x0
16:20:27: Write Speed Factor R2W_FACTOR                 :0x2
16:20:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:27: FILE_FORMAT_GRP                               :0x0
16:20:27: COPY flag                                     :0x1
16:20:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:27: File_Format                                   :0x0
16:20:27: CRC                                           :0x0
16:20:27: ####CSD Registe Values####  

16:20:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:27: ProductSerialNumber = 0x23482900
16:20:27: CardMaximumLBA      = 0x3b72400
16:20:27: CardCapacity        = 32G
16:20:27: Is card secure      = 0
16:20:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:27: [DVTCommonLib]###  LogicalWrite called
16:20:29: [ WriteLba(0x133975B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1666 ] 
16:20:29: [DVTCommonLib]###  LogicalWrite Completed 

16:20:29: [DVTCommonLib]###  LogicalRead called
16:20:31: [ ReadLba(0x133975B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1667 ] 
16:20:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:31: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 192 times 

16:20:31: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:31: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:31: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1668 ] 
16:20:31: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:31: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:31: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:31: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:31: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:31: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x061ED030>) , Command count = 1669 ] 
16:20:31: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:31: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED540>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 1670 ] 
16:20:31: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:31: [ SetCardRCA(0x1, 0xD555) , Command count = 1671 ] 
16:20:31: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:31: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:31: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:31: [ SetBusWidth(0x1) , Command count = 1672 ] 
16:20:31: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:31: ####CSD Registe 2.0 Values####
16:20:31: CSD_STRUCTURE                                 :0x1
16:20:31: Reserv1                                       :0x0
16:20:31: Time Access 1 TAAC                            :0xe
16:20:31: Time Access 2 NSAC*100                        :0x0
16:20:31: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:31: Card Command Classess CCC                     :0x5b5
16:20:31: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:31: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:31: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:31: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:31: DSR(driver stage register)  DSR_IMP           :0x0
16:20:31: Reserv2                                       :0x0
16:20:31: Device Size C_SIZE                            :0xedc8
16:20:31: Reserv3                                       :0x0
16:20:31: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:31: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:31: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:31: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:31: Reserv4                                       :0x0
16:20:31: Write Speed Factor R2W_FACTOR                 :0x2
16:20:31: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:31: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:31: FILE_FORMAT_GRP                               :0x0
16:20:31: COPY flag                                     :0x1
16:20:31: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:31: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:31: File_Format                                   :0x0
16:20:31: CRC                                           :0x0
16:20:31: ####CSD Registe Values####  

16:20:31: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:31: ProductSerialNumber = 0x23482900
16:20:31: CardMaximumLBA      = 0x3b72400
16:20:31: CardCapacity        = 32G
16:20:31: Is card secure      = 0
16:20:31: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:31: [DVTCommonLib]###  LogicalWrite called
16:20:32: [ WriteLba(0x12521AF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1673 ] 
16:20:32: [DVTCommonLib]###  LogicalWrite Completed 

16:20:32: [DVTCommonLib]###  LogicalRead called
16:20:34: [ ReadLba(0x12521AF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1674 ] 
16:20:34: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:34: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 193 times 

16:20:34: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:34: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:34: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1675 ] 
16:20:34: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:34: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:34: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:34: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:34: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:34: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED2D0>, <py_sfcl.CommandDataDefinition object at 0x061ED240>) , Command count = 1676 ] 
16:20:34: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:34: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8A0>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 1677 ] 
16:20:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:34: [ SetCardRCA(0x1, 0xD555) , Command count = 1678 ] 
16:20:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:34: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:34: [ SetBusWidth(0x1) , Command count = 1679 ] 
16:20:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:34: ####CSD Registe 2.0 Values####
16:20:34: CSD_STRUCTURE                                 :0x1
16:20:34: Reserv1                                       :0x0
16:20:34: Time Access 1 TAAC                            :0xe
16:20:34: Time Access 2 NSAC*100                        :0x0
16:20:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:34: Card Command Classess CCC                     :0x5b5
16:20:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:34: DSR(driver stage register)  DSR_IMP           :0x0
16:20:34: Reserv2                                       :0x0
16:20:34: Device Size C_SIZE                            :0xedc8
16:20:34: Reserv3                                       :0x0
16:20:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:34: Reserv4                                       :0x0
16:20:34: Write Speed Factor R2W_FACTOR                 :0x2
16:20:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:34: FILE_FORMAT_GRP                               :0x0
16:20:34: COPY flag                                     :0x1
16:20:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:34: File_Format                                   :0x0
16:20:34: CRC                                           :0x0
16:20:34: ####CSD Registe Values####  

16:20:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:34: ProductSerialNumber = 0x23482900
16:20:34: CardMaximumLBA      = 0x3b72400
16:20:34: CardCapacity        = 32G
16:20:34: Is card secure      = 0
16:20:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:34: [DVTCommonLib]###  LogicalWrite called
16:20:36: [ WriteLba(0x17B6614, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1680 ] 
16:20:36: [DVTCommonLib]###  LogicalWrite Completed 

16:20:36: [DVTCommonLib]###  LogicalRead called
16:20:37: [ ReadLba(0x17B6614, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1681 ] 
16:20:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 194 times 

16:20:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1682 ] 
16:20:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 1683 ] 
16:20:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 1684 ] 
16:20:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1685 ] 
16:20:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:38: [ SetBusWidth(0x1) , Command count = 1686 ] 
16:20:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:38: ####CSD Registe 2.0 Values####
16:20:38: CSD_STRUCTURE                                 :0x1
16:20:38: Reserv1                                       :0x0
16:20:38: Time Access 1 TAAC                            :0xe
16:20:38: Time Access 2 NSAC*100                        :0x0
16:20:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:38: Card Command Classess CCC                     :0x5b5
16:20:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:38: DSR(driver stage register)  DSR_IMP           :0x0
16:20:38: Reserv2                                       :0x0
16:20:38: Device Size C_SIZE                            :0xedc8
16:20:38: Reserv3                                       :0x0
16:20:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:38: Reserv4                                       :0x0
16:20:38: Write Speed Factor R2W_FACTOR                 :0x2
16:20:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:38: FILE_FORMAT_GRP                               :0x0
16:20:38: COPY flag                                     :0x1
16:20:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:38: File_Format                                   :0x0
16:20:38: CRC                                           :0x0
16:20:38: ####CSD Registe Values####  

16:20:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:38: ProductSerialNumber = 0x23482900
16:20:38: CardMaximumLBA      = 0x3b72400
16:20:38: CardCapacity        = 32G
16:20:38: Is card secure      = 0
16:20:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:38: [DVTCommonLib]###  LogicalWrite called
16:20:39: [ WriteLba(0x28DF78B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1687 ] 
16:20:39: [DVTCommonLib]###  LogicalWrite Completed 

16:20:39: [DVTCommonLib]###  LogicalRead called
16:20:41: [ ReadLba(0x28DF78B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1688 ] 
16:20:41: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:41: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 195 times 

16:20:41: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:41: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:41: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1689 ] 
16:20:41: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:41: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:41: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:41: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:41: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:41: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED870>, <py_sfcl.CommandDataDefinition object at 0x061ED810>) , Command count = 1690 ] 
16:20:41: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:41: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4120>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 1691 ] 
16:20:41: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:41: [ SetCardRCA(0x1, 0xD555) , Command count = 1692 ] 
16:20:41: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:41: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:41: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:41: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:41: [ SetBusWidth(0x1) , Command count = 1693 ] 
16:20:41: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:41: ####CSD Registe 2.0 Values####
16:20:41: CSD_STRUCTURE                                 :0x1
16:20:41: Reserv1                                       :0x0
16:20:41: Time Access 1 TAAC                            :0xe
16:20:41: Time Access 2 NSAC*100                        :0x0
16:20:41: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:41: Card Command Classess CCC                     :0x5b5
16:20:41: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:41: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:41: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:41: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:41: DSR(driver stage register)  DSR_IMP           :0x0
16:20:41: Reserv2                                       :0x0
16:20:41: Device Size C_SIZE                            :0xedc8
16:20:41: Reserv3                                       :0x0
16:20:41: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:41: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:41: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:41: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:41: Reserv4                                       :0x0
16:20:41: Write Speed Factor R2W_FACTOR                 :0x2
16:20:41: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:41: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:41: FILE_FORMAT_GRP                               :0x0
16:20:41: COPY flag                                     :0x1
16:20:41: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:41: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:41: File_Format                                   :0x0
16:20:41: CRC                                           :0x0
16:20:41: ####CSD Registe Values####  

16:20:41: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:41: ProductSerialNumber = 0x23482900
16:20:41: CardMaximumLBA      = 0x3b72400
16:20:41: CardCapacity        = 32G
16:20:41: Is card secure      = 0
16:20:41: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:41: [DVTCommonLib]###  LogicalWrite called
16:20:43: [ WriteLba(0x156B7F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1694 ] 
16:20:43: [DVTCommonLib]###  LogicalWrite Completed 

16:20:43: [DVTCommonLib]###  LogicalRead called
16:20:44: [ ReadLba(0x156B7F5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1695 ] 
16:20:44: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:44: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 196 times 

16:20:44: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:44: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1696 ] 
16:20:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDD20>, <py_sfcl.CommandDataDefinition object at 0x061ED9F0>) , Command count = 1697 ] 
16:20:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4300>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 1698 ] 
16:20:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:44: [ SetCardRCA(0x1, 0xD555) , Command count = 1699 ] 
16:20:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:44: [ SetBusWidth(0x1) , Command count = 1700 ] 
16:20:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:44: ####CSD Registe 2.0 Values####
16:20:44: CSD_STRUCTURE                                 :0x1
16:20:44: Reserv1                                       :0x0
16:20:44: Time Access 1 TAAC                            :0xe
16:20:44: Time Access 2 NSAC*100                        :0x0
16:20:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:44: Card Command Classess CCC                     :0x5b5
16:20:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:44: DSR(driver stage register)  DSR_IMP           :0x0
16:20:44: Reserv2                                       :0x0
16:20:44: Device Size C_SIZE                            :0xedc8
16:20:44: Reserv3                                       :0x0
16:20:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:44: Reserv4                                       :0x0
16:20:44: Write Speed Factor R2W_FACTOR                 :0x2
16:20:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:44: FILE_FORMAT_GRP                               :0x0
16:20:44: COPY flag                                     :0x1
16:20:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:44: File_Format                                   :0x0
16:20:44: CRC                                           :0x0
16:20:44: ####CSD Registe Values####  

16:20:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:44: ProductSerialNumber = 0x23482900
16:20:44: CardMaximumLBA      = 0x3b72400
16:20:44: CardCapacity        = 32G
16:20:44: Is card secure      = 0
16:20:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:44: [DVTCommonLib]###  LogicalWrite called
16:20:46: [ WriteLba(0x84A916, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1701 ] 
16:20:46: [DVTCommonLib]###  LogicalWrite Completed 

16:20:46: [DVTCommonLib]###  LogicalRead called
16:20:48: [ ReadLba(0x84A916, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1702 ] 
16:20:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 197 times 

16:20:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:48: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1703 ] 
16:20:48: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:48: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:48: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:48: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:48: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:48: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED900>, <py_sfcl.CommandDataDefinition object at 0x061F43F0>) , Command count = 1704 ] 
16:20:48: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:48: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F47E0>, <py_sfcl.CommandDataDefinition object at 0x061EA960>) , Command count = 1705 ] 
16:20:48: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:48: [ SetCardRCA(0x1, 0xD555) , Command count = 1706 ] 
16:20:48: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:48: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:48: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:48: [ SetBusWidth(0x1) , Command count = 1707 ] 
16:20:48: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:48: ####CSD Registe 2.0 Values####
16:20:48: CSD_STRUCTURE                                 :0x1
16:20:48: Reserv1                                       :0x0
16:20:48: Time Access 1 TAAC                            :0xe
16:20:48: Time Access 2 NSAC*100                        :0x0
16:20:48: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:48: Card Command Classess CCC                     :0x5b5
16:20:48: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:48: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:48: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:48: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:48: DSR(driver stage register)  DSR_IMP           :0x0
16:20:48: Reserv2                                       :0x0
16:20:48: Device Size C_SIZE                            :0xedc8
16:20:48: Reserv3                                       :0x0
16:20:48: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:48: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:48: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:48: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:48: Reserv4                                       :0x0
16:20:48: Write Speed Factor R2W_FACTOR                 :0x2
16:20:48: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:48: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:48: FILE_FORMAT_GRP                               :0x0
16:20:48: COPY flag                                     :0x1
16:20:48: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:48: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:48: File_Format                                   :0x0
16:20:48: CRC                                           :0x0
16:20:48: ####CSD Registe Values####  

16:20:48: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:48: ProductSerialNumber = 0x23482900
16:20:48: CardMaximumLBA      = 0x3b72400
16:20:48: CardCapacity        = 32G
16:20:48: Is card secure      = 0
16:20:48: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:48: [DVTCommonLib]###  LogicalWrite called
16:20:49: [ WriteLba(0xA70977, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1708 ] 
16:20:49: [DVTCommonLib]###  LogicalWrite Completed 

16:20:49: [DVTCommonLib]###  LogicalRead called
16:20:51: [ ReadLba(0xA70977, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1709 ] 
16:20:51: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:51: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 198 times 

16:20:51: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:51: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:51: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1710 ] 
16:20:51: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:51: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:51: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:51: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:51: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:51: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F44E0>, <py_sfcl.CommandDataDefinition object at 0x061F4600>) , Command count = 1711 ] 
16:20:51: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:51: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B40>, <py_sfcl.CommandDataDefinition object at 0x061F4960>) , Command count = 1712 ] 
16:20:51: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:51: [ SetCardRCA(0x1, 0xD555) , Command count = 1713 ] 
16:20:51: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:51: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:51: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:51: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:51: [ SetBusWidth(0x1) , Command count = 1714 ] 
16:20:51: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:51: ####CSD Registe 2.0 Values####
16:20:51: CSD_STRUCTURE                                 :0x1
16:20:51: Reserv1                                       :0x0
16:20:51: Time Access 1 TAAC                            :0xe
16:20:51: Time Access 2 NSAC*100                        :0x0
16:20:51: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:51: Card Command Classess CCC                     :0x5b5
16:20:51: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:51: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:51: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:51: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:51: DSR(driver stage register)  DSR_IMP           :0x0
16:20:51: Reserv2                                       :0x0
16:20:51: Device Size C_SIZE                            :0xedc8
16:20:51: Reserv3                                       :0x0
16:20:51: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:51: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:51: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:51: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:51: Reserv4                                       :0x0
16:20:51: Write Speed Factor R2W_FACTOR                 :0x2
16:20:51: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:51: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:51: FILE_FORMAT_GRP                               :0x0
16:20:51: COPY flag                                     :0x1
16:20:51: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:51: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:51: File_Format                                   :0x0
16:20:51: CRC                                           :0x0
16:20:51: ####CSD Registe Values####  

16:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:51: ProductSerialNumber = 0x23482900
16:20:51: CardMaximumLBA      = 0x3b72400
16:20:51: CardCapacity        = 32G
16:20:51: Is card secure      = 0
16:20:51: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:51: [DVTCommonLib]###  LogicalWrite called
16:20:53: [ WriteLba(0x355FC5F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1715 ] 
16:20:53: [DVTCommonLib]###  LogicalWrite Completed 

16:20:53: [DVTCommonLib]###  LogicalRead called
16:20:54: [ ReadLba(0x355FC5F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1716 ] 
16:20:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 199 times 

16:20:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1717 ] 
16:20:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA210>, <py_sfcl.CommandDataDefinition object at 0x061F4720>) , Command count = 1718 ] 
16:20:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D80>, <py_sfcl.CommandDataDefinition object at 0x061F4BA0>) , Command count = 1719 ] 
16:20:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:54: [ SetCardRCA(0x1, 0xD555) , Command count = 1720 ] 
16:20:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:54: [ SetBusWidth(0x1) , Command count = 1721 ] 
16:20:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:54: ####CSD Registe 2.0 Values####
16:20:54: CSD_STRUCTURE                                 :0x1
16:20:54: Reserv1                                       :0x0
16:20:54: Time Access 1 TAAC                            :0xe
16:20:54: Time Access 2 NSAC*100                        :0x0
16:20:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:54: Card Command Classess CCC                     :0x5b5
16:20:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:54: DSR(driver stage register)  DSR_IMP           :0x0
16:20:54: Reserv2                                       :0x0
16:20:54: Device Size C_SIZE                            :0xedc8
16:20:54: Reserv3                                       :0x0
16:20:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:54: Reserv4                                       :0x0
16:20:54: Write Speed Factor R2W_FACTOR                 :0x2
16:20:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:54: FILE_FORMAT_GRP                               :0x0
16:20:54: COPY flag                                     :0x1
16:20:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:54: File_Format                                   :0x0
16:20:54: CRC                                           :0x0
16:20:54: ####CSD Registe Values####  

16:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:55: ProductSerialNumber = 0x23482900
16:20:55: CardMaximumLBA      = 0x3b72400
16:20:55: CardCapacity        = 32G
16:20:55: Is card secure      = 0
16:20:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:55: [DVTCommonLib]###  LogicalWrite called
16:20:56: [ WriteLba(0x258A792, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1722 ] 
16:20:56: [DVTCommonLib]###  LogicalWrite Completed 

16:20:56: [DVTCommonLib]###  LogicalRead called
16:20:58: [ ReadLba(0x258A792, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1723 ] 
16:20:58: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:20:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:20:58: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 200 times 

16:20:58: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:20:58: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:20:58: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1724 ] 
16:20:58: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:20:58: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:20:58: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:20:58: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:20:58: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:20:58: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B10>, <py_sfcl.CommandDataDefinition object at 0x061F4D20>) , Command count = 1725 ] 
16:20:58: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:20:58: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA1B0>, <py_sfcl.CommandDataDefinition object at 0x061FA120>) , Command count = 1726 ] 
16:20:58: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:20:58: [ SetCardRCA(0x1, 0xD555) , Command count = 1727 ] 
16:20:58: [DVTCommonLib]### Identification :Idenfication of card completed 

16:20:58: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:20:58: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:20:58: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:20:58: [ SetBusWidth(0x1) , Command count = 1728 ] 
16:20:58: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:20:58: ####CSD Registe 2.0 Values####
16:20:58: CSD_STRUCTURE                                 :0x1
16:20:58: Reserv1                                       :0x0
16:20:58: Time Access 1 TAAC                            :0xe
16:20:58: Time Access 2 NSAC*100                        :0x0
16:20:58: Data Transfer Rate TRAN_SPEED                 :0x32
16:20:58: Card Command Classess CCC                     :0x5b5
16:20:58: Max Read Data Block Length  READ_BL_LEN       :0x9
16:20:58: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:20:58: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:20:58: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:20:58: DSR(driver stage register)  DSR_IMP           :0x0
16:20:58: Reserv2                                       :0x0
16:20:58: Device Size C_SIZE                            :0xedc8
16:20:58: Reserv3                                       :0x0
16:20:58: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:20:58: Erase Sector Size SECTOR_SIZE                 :0x7f
16:20:58: Write Protect Group Size WP_GRP_SIZE          :0x0
16:20:58: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:20:58: Reserv4                                       :0x0
16:20:58: Write Speed Factor R2W_FACTOR                 :0x2
16:20:58: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:20:58: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:20:58: FILE_FORMAT_GRP                               :0x0
16:20:58: COPY flag                                     :0x1
16:20:58: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:20:58: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:20:58: File_Format                                   :0x0
16:20:58: CRC                                           :0x0
16:20:58: ####CSD Registe Values####  

16:20:58: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:20:58: ProductSerialNumber = 0x23482900
16:20:58: CardMaximumLBA      = 0x3b72400
16:20:58: CardCapacity        = 32G
16:20:58: Is card secure      = 0
16:20:58: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:20:58: [DVTCommonLib]###  LogicalWrite called
16:21:00: [ WriteLba(0x16F555A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1729 ] 
16:21:00: [DVTCommonLib]###  LogicalWrite Completed 

16:21:00: [DVTCommonLib]###  LogicalRead called
16:21:01: [ ReadLba(0x16F555A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1730 ] 
16:21:01: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:01: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 201 times 

16:21:01: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:01: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:01: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1731 ] 
16:21:01: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:01: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:01: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:01: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:01: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:01: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C90>, <py_sfcl.CommandDataDefinition object at 0x061FA060>) , Command count = 1732 ] 
16:21:01: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:01: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA5A0>, <py_sfcl.CommandDataDefinition object at 0x061FA2A0>) , Command count = 1733 ] 
16:21:01: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:01: [ SetCardRCA(0x1, 0xD555) , Command count = 1734 ] 
16:21:01: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:01: [ SetBusWidth(0x1) , Command count = 1735 ] 
16:21:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:01: ####CSD Registe 2.0 Values####
16:21:01: CSD_STRUCTURE                                 :0x1
16:21:01: Reserv1                                       :0x0
16:21:01: Time Access 1 TAAC                            :0xe
16:21:01: Time Access 2 NSAC*100                        :0x0
16:21:01: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:01: Card Command Classess CCC                     :0x5b5
16:21:01: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:01: DSR(driver stage register)  DSR_IMP           :0x0
16:21:01: Reserv2                                       :0x0
16:21:01: Device Size C_SIZE                            :0xedc8
16:21:01: Reserv3                                       :0x0
16:21:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:01: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:01: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:01: Reserv4                                       :0x0
16:21:01: Write Speed Factor R2W_FACTOR                 :0x2
16:21:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:01: FILE_FORMAT_GRP                               :0x0
16:21:01: COPY flag                                     :0x1
16:21:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:01: File_Format                                   :0x0
16:21:01: CRC                                           :0x0
16:21:01: ####CSD Registe Values####  

16:21:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:01: ProductSerialNumber = 0x23482900
16:21:01: CardMaximumLBA      = 0x3b72400
16:21:01: CardCapacity        = 32G
16:21:01: Is card secure      = 0
16:21:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:01: [DVTCommonLib]###  LogicalWrite called
16:21:03: [ WriteLba(0xFB3C67, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1736 ] 
16:21:03: [DVTCommonLib]###  LogicalWrite Completed 

16:21:03: [DVTCommonLib]###  LogicalRead called
16:21:04: [ ReadLba(0xFB3C67, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1737 ] 
16:21:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:04: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 202 times 

16:21:04: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:04: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1738 ] 
16:21:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA030>, <py_sfcl.CommandDataDefinition object at 0x061FA600>) , Command count = 1739 ] 
16:21:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA090>, <py_sfcl.CommandDataDefinition object at 0x061FA690>) , Command count = 1740 ] 
16:21:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1741 ] 
16:21:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:05: [ SetBusWidth(0x1) , Command count = 1742 ] 
16:21:05: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:05: ####CSD Registe 2.0 Values####
16:21:05: CSD_STRUCTURE                                 :0x1
16:21:05: Reserv1                                       :0x0
16:21:05: Time Access 1 TAAC                            :0xe
16:21:05: Time Access 2 NSAC*100                        :0x0
16:21:05: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:05: Card Command Classess CCC                     :0x5b5
16:21:05: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:05: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:05: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:05: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:05: DSR(driver stage register)  DSR_IMP           :0x0
16:21:05: Reserv2                                       :0x0
16:21:05: Device Size C_SIZE                            :0xedc8
16:21:05: Reserv3                                       :0x0
16:21:05: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:05: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:05: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:05: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:05: Reserv4                                       :0x0
16:21:05: Write Speed Factor R2W_FACTOR                 :0x2
16:21:05: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:05: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:05: FILE_FORMAT_GRP                               :0x0
16:21:05: COPY flag                                     :0x1
16:21:05: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:05: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:05: File_Format                                   :0x0
16:21:05: CRC                                           :0x0
16:21:05: ####CSD Registe Values####  

16:21:05: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:05: ProductSerialNumber = 0x23482900
16:21:05: CardMaximumLBA      = 0x3b72400
16:21:05: CardCapacity        = 32G
16:21:05: Is card secure      = 0
16:21:05: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:05: [DVTCommonLib]###  LogicalWrite called
16:21:06: [ WriteLba(0x2A6B33C, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1743 ] 
16:21:06: [DVTCommonLib]###  LogicalWrite Completed 

16:21:06: [DVTCommonLib]###  LogicalRead called
16:21:08: [ ReadLba(0x2A6B33C, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1744 ] 
16:21:08: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:08: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 203 times 

16:21:08: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:08: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:08: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1745 ] 
16:21:08: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:08: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:08: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:08: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:08: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:08: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 1746 ] 
16:21:08: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:08: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAB70>, <py_sfcl.CommandDataDefinition object at 0x061FAA80>) , Command count = 1747 ] 
16:21:08: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:08: [ SetCardRCA(0x1, 0xD555) , Command count = 1748 ] 
16:21:08: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:08: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:08: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:08: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:08: [ SetBusWidth(0x1) , Command count = 1749 ] 
16:21:08: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:08: ####CSD Registe 2.0 Values####
16:21:08: CSD_STRUCTURE                                 :0x1
16:21:08: Reserv1                                       :0x0
16:21:08: Time Access 1 TAAC                            :0xe
16:21:08: Time Access 2 NSAC*100                        :0x0
16:21:08: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:08: Card Command Classess CCC                     :0x5b5
16:21:08: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:08: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:08: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:08: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:08: DSR(driver stage register)  DSR_IMP           :0x0
16:21:08: Reserv2                                       :0x0
16:21:08: Device Size C_SIZE                            :0xedc8
16:21:08: Reserv3                                       :0x0
16:21:08: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:08: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:08: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:08: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:08: Reserv4                                       :0x0
16:21:08: Write Speed Factor R2W_FACTOR                 :0x2
16:21:08: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:08: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:08: FILE_FORMAT_GRP                               :0x0
16:21:08: COPY flag                                     :0x1
16:21:08: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:08: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:08: File_Format                                   :0x0
16:21:08: CRC                                           :0x0
16:21:08: ####CSD Registe Values####  

16:21:08: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:08: ProductSerialNumber = 0x23482900
16:21:08: CardMaximumLBA      = 0x3b72400
16:21:08: CardCapacity        = 32G
16:21:08: Is card secure      = 0
16:21:08: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:08: [DVTCommonLib]###  LogicalWrite called
16:21:10: [ WriteLba(0xD4810B, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1750 ] 
16:21:10: [DVTCommonLib]###  LogicalWrite Completed 

16:21:10: [DVTCommonLib]###  LogicalRead called
16:21:11: [ ReadLba(0xD4810B, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1751 ] 
16:21:11: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:11: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 204 times 

16:21:11: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:11: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:11: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1752 ] 
16:21:11: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:11: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:11: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:11: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:11: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:11: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE030>, <py_sfcl.CommandDataDefinition object at 0x061FE3F0>) , Command count = 1753 ] 
16:21:11: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:11: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAF00>, <py_sfcl.CommandDataDefinition object at 0x061FACF0>) , Command count = 1754 ] 
16:21:11: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:11: [ SetCardRCA(0x1, 0xD555) , Command count = 1755 ] 
16:21:11: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:11: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:11: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:11: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:11: [ SetBusWidth(0x1) , Command count = 1756 ] 
16:21:11: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:11: ####CSD Registe 2.0 Values####
16:21:11: CSD_STRUCTURE                                 :0x1
16:21:11: Reserv1                                       :0x0
16:21:11: Time Access 1 TAAC                            :0xe
16:21:11: Time Access 2 NSAC*100                        :0x0
16:21:11: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:11: Card Command Classess CCC                     :0x5b5
16:21:11: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:11: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:11: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:11: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:11: DSR(driver stage register)  DSR_IMP           :0x0
16:21:11: Reserv2                                       :0x0
16:21:11: Device Size C_SIZE                            :0xedc8
16:21:11: Reserv3                                       :0x0
16:21:11: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:11: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:11: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:11: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:11: Reserv4                                       :0x0
16:21:11: Write Speed Factor R2W_FACTOR                 :0x2
16:21:11: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:11: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:11: FILE_FORMAT_GRP                               :0x0
16:21:11: COPY flag                                     :0x1
16:21:11: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:11: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:11: File_Format                                   :0x0
16:21:11: CRC                                           :0x0
16:21:11: ####CSD Registe Values####  

16:21:11: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:11: ProductSerialNumber = 0x23482900
16:21:11: CardMaximumLBA      = 0x3b72400
16:21:11: CardCapacity        = 32G
16:21:11: Is card secure      = 0
16:21:11: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:11: [DVTCommonLib]###  LogicalWrite called
16:21:13: [ WriteLba(0xC92375, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1757 ] 
16:21:13: [DVTCommonLib]###  LogicalWrite Completed 

16:21:13: [DVTCommonLib]###  LogicalRead called
16:21:15: [ ReadLba(0xC92375, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1758 ] 
16:21:15: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:15: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 205 times 

16:21:15: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:15: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:15: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1759 ] 
16:21:15: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:15: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:15: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:15: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:15: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:15: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE210>, <py_sfcl.CommandDataDefinition object at 0x061FE7E0>) , Command count = 1760 ] 
16:21:15: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:15: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE360>, <py_sfcl.CommandDataDefinition object at 0x061FAEA0>) , Command count = 1761 ] 
16:21:15: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:15: [ SetCardRCA(0x1, 0xD555) , Command count = 1762 ] 
16:21:15: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:15: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:15: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:15: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:15: [ SetBusWidth(0x1) , Command count = 1763 ] 
16:21:15: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:15: ####CSD Registe 2.0 Values####
16:21:15: CSD_STRUCTURE                                 :0x1
16:21:15: Reserv1                                       :0x0
16:21:15: Time Access 1 TAAC                            :0xe
16:21:15: Time Access 2 NSAC*100                        :0x0
16:21:15: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:15: Card Command Classess CCC                     :0x5b5
16:21:15: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:15: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:15: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:15: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:15: DSR(driver stage register)  DSR_IMP           :0x0
16:21:15: Reserv2                                       :0x0
16:21:15: Device Size C_SIZE                            :0xedc8
16:21:15: Reserv3                                       :0x0
16:21:15: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:15: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:15: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:15: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:15: Reserv4                                       :0x0
16:21:15: Write Speed Factor R2W_FACTOR                 :0x2
16:21:15: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:15: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:15: FILE_FORMAT_GRP                               :0x0
16:21:15: COPY flag                                     :0x1
16:21:15: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:15: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:15: File_Format                                   :0x0
16:21:15: CRC                                           :0x0
16:21:15: ####CSD Registe Values####  

16:21:15: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:15: ProductSerialNumber = 0x23482900
16:21:15: CardMaximumLBA      = 0x3b72400
16:21:15: CardCapacity        = 32G
16:21:15: Is card secure      = 0
16:21:15: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:15: [DVTCommonLib]###  LogicalWrite called
16:21:16: [ WriteLba(0x2471072, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1764 ] 
16:21:16: [DVTCommonLib]###  LogicalWrite Completed 

16:21:16: [DVTCommonLib]###  LogicalRead called
16:21:18: [ ReadLba(0x2471072, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1765 ] 
16:21:18: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:18: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 206 times 

16:21:18: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:18: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:18: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1766 ] 
16:21:18: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:18: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:18: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:18: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:18: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FA6C0>) , Command count = 1767 ] 
16:21:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE750>, <py_sfcl.CommandDataDefinition object at 0x061FE720>) , Command count = 1768 ] 
16:21:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:18: [ SetCardRCA(0x1, 0xD555) , Command count = 1769 ] 
16:21:18: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:18: [ SetBusWidth(0x1) , Command count = 1770 ] 
16:21:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:18: ####CSD Registe 2.0 Values####
16:21:18: CSD_STRUCTURE                                 :0x1
16:21:18: Reserv1                                       :0x0
16:21:18: Time Access 1 TAAC                            :0xe
16:21:18: Time Access 2 NSAC*100                        :0x0
16:21:18: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:18: Card Command Classess CCC                     :0x5b5
16:21:18: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:18: DSR(driver stage register)  DSR_IMP           :0x0
16:21:18: Reserv2                                       :0x0
16:21:18: Device Size C_SIZE                            :0xedc8
16:21:18: Reserv3                                       :0x0
16:21:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:18: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:18: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:18: Reserv4                                       :0x0
16:21:18: Write Speed Factor R2W_FACTOR                 :0x2
16:21:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:18: FILE_FORMAT_GRP                               :0x0
16:21:18: COPY flag                                     :0x1
16:21:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:18: File_Format                                   :0x0
16:21:18: CRC                                           :0x0
16:21:18: ####CSD Registe Values####  

16:21:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:18: ProductSerialNumber = 0x23482900
16:21:18: CardMaximumLBA      = 0x3b72400
16:21:18: CardCapacity        = 32G
16:21:18: Is card secure      = 0
16:21:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:18: [DVTCommonLib]###  LogicalWrite called
16:21:20: [ WriteLba(0x2173A27, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1771 ] 
16:21:20: [DVTCommonLib]###  LogicalWrite Completed 

16:21:20: [DVTCommonLib]###  LogicalRead called
16:21:21: [ ReadLba(0x2173A27, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1772 ] 
16:21:21: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:21: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:21: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 207 times 

16:21:21: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:21: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1773 ] 
16:21:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FA7E0>) , Command count = 1774 ] 
16:21:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEA80>, <py_sfcl.CommandDataDefinition object at 0x061FE8D0>) , Command count = 1775 ] 
16:21:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1776 ] 
16:21:22: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:22: [ SetBusWidth(0x1) , Command count = 1777 ] 
16:21:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:22: ####CSD Registe 2.0 Values####
16:21:22: CSD_STRUCTURE                                 :0x1
16:21:22: Reserv1                                       :0x0
16:21:22: Time Access 1 TAAC                            :0xe
16:21:22: Time Access 2 NSAC*100                        :0x0
16:21:22: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:22: Card Command Classess CCC                     :0x5b5
16:21:22: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:22: DSR(driver stage register)  DSR_IMP           :0x0
16:21:22: Reserv2                                       :0x0
16:21:22: Device Size C_SIZE                            :0xedc8
16:21:22: Reserv3                                       :0x0
16:21:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:22: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:22: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:22: Reserv4                                       :0x0
16:21:22: Write Speed Factor R2W_FACTOR                 :0x2
16:21:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:22: FILE_FORMAT_GRP                               :0x0
16:21:22: COPY flag                                     :0x1
16:21:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:22: File_Format                                   :0x0
16:21:22: CRC                                           :0x0
16:21:22: ####CSD Registe Values####  

16:21:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:22: ProductSerialNumber = 0x23482900
16:21:22: CardMaximumLBA      = 0x3b72400
16:21:22: CardCapacity        = 32G
16:21:22: Is card secure      = 0
16:21:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:22: [DVTCommonLib]###  LogicalWrite called
16:21:23: [ WriteLba(0x33BD3FF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1778 ] 
16:21:23: [DVTCommonLib]###  LogicalWrite Completed 

16:21:23: [DVTCommonLib]###  LogicalRead called
16:21:25: [ ReadLba(0x33BD3FF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1779 ] 
16:21:25: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:25: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 208 times 

16:21:25: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:25: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:25: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1780 ] 
16:21:25: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:25: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:25: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:25: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:25: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:25: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337FC0>, <py_sfcl.CommandDataDefinition object at 0x0544E0F0>) , Command count = 1781 ] 
16:21:25: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:25: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEBA0>, <py_sfcl.CommandDataDefinition object at 0x061FE840>) , Command count = 1782 ] 
16:21:25: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:25: [ SetCardRCA(0x1, 0xD555) , Command count = 1783 ] 
16:21:25: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:25: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:25: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:25: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:25: [ SetBusWidth(0x1) , Command count = 1784 ] 
16:21:25: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:25: ####CSD Registe 2.0 Values####
16:21:25: CSD_STRUCTURE                                 :0x1
16:21:25: Reserv1                                       :0x0
16:21:25: Time Access 1 TAAC                            :0xe
16:21:25: Time Access 2 NSAC*100                        :0x0
16:21:25: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:25: Card Command Classess CCC                     :0x5b5
16:21:25: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:25: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:25: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:25: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:25: DSR(driver stage register)  DSR_IMP           :0x0
16:21:25: Reserv2                                       :0x0
16:21:25: Device Size C_SIZE                            :0xedc8
16:21:25: Reserv3                                       :0x0
16:21:25: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:25: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:25: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:25: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:25: Reserv4                                       :0x0
16:21:25: Write Speed Factor R2W_FACTOR                 :0x2
16:21:25: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:25: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:25: FILE_FORMAT_GRP                               :0x0
16:21:25: COPY flag                                     :0x1
16:21:25: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:25: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:25: File_Format                                   :0x0
16:21:25: CRC                                           :0x0
16:21:25: ####CSD Registe Values####  

16:21:25: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:25: ProductSerialNumber = 0x23482900
16:21:25: CardMaximumLBA      = 0x3b72400
16:21:25: CardCapacity        = 32G
16:21:25: Is card secure      = 0
16:21:25: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:25: [DVTCommonLib]###  LogicalWrite called
16:21:27: [ WriteLba(0x175052D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1785 ] 
16:21:27: [DVTCommonLib]###  LogicalWrite Completed 

16:21:27: [DVTCommonLib]###  LogicalRead called
16:21:28: [ ReadLba(0x175052D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1786 ] 
16:21:28: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:28: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 209 times 

16:21:28: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:28: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:28: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1787 ] 
16:21:28: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:28: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:28: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:28: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:28: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:28: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054413F0>, <py_sfcl.CommandDataDefinition object at 0x0541D7B0>) , Command count = 1788 ] 
16:21:28: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:28: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEB70>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 1789 ] 
16:21:28: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:28: [ SetCardRCA(0x1, 0xD555) , Command count = 1790 ] 
16:21:28: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:28: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:28: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:28: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:28: [ SetBusWidth(0x1) , Command count = 1791 ] 
16:21:28: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:28: ####CSD Registe 2.0 Values####
16:21:28: CSD_STRUCTURE                                 :0x1
16:21:28: Reserv1                                       :0x0
16:21:28: Time Access 1 TAAC                            :0xe
16:21:28: Time Access 2 NSAC*100                        :0x0
16:21:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:28: Card Command Classess CCC                     :0x5b5
16:21:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:28: DSR(driver stage register)  DSR_IMP           :0x0
16:21:28: Reserv2                                       :0x0
16:21:28: Device Size C_SIZE                            :0xedc8
16:21:28: Reserv3                                       :0x0
16:21:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:28: Reserv4                                       :0x0
16:21:28: Write Speed Factor R2W_FACTOR                 :0x2
16:21:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:28: FILE_FORMAT_GRP                               :0x0
16:21:28: COPY flag                                     :0x1
16:21:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:28: File_Format                                   :0x0
16:21:28: CRC                                           :0x0
16:21:28: ####CSD Registe Values####  

16:21:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:28: ProductSerialNumber = 0x23482900
16:21:28: CardMaximumLBA      = 0x3b72400
16:21:28: CardCapacity        = 32G
16:21:28: Is card secure      = 0
16:21:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:28: [DVTCommonLib]###  LogicalWrite called
16:21:30: [ WriteLba(0x283BFFE, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1792 ] 
16:21:30: [DVTCommonLib]###  LogicalWrite Completed 

16:21:30: [DVTCommonLib]###  LogicalRead called
16:21:32: [ ReadLba(0x283BFFE, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1793 ] 
16:21:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 210 times 

16:21:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:32: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1794 ] 
16:21:32: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:32: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:32: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:32: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:32: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:32: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05422150>, <py_sfcl.CommandDataDefinition object at 0x0544EC30>) , Command count = 1795 ] 
16:21:32: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:32: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE630>, <py_sfcl.CommandDataDefinition object at 0x061FE600>) , Command count = 1796 ] 
16:21:32: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:32: [ SetCardRCA(0x1, 0xD555) , Command count = 1797 ] 
16:21:32: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:32: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:32: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:32: [ SetBusWidth(0x1) , Command count = 1798 ] 
16:21:32: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:32: ####CSD Registe 2.0 Values####
16:21:32: CSD_STRUCTURE                                 :0x1
16:21:32: Reserv1                                       :0x0
16:21:32: Time Access 1 TAAC                            :0xe
16:21:32: Time Access 2 NSAC*100                        :0x0
16:21:32: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:32: Card Command Classess CCC                     :0x5b5
16:21:32: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:32: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:32: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:32: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:32: DSR(driver stage register)  DSR_IMP           :0x0
16:21:32: Reserv2                                       :0x0
16:21:32: Device Size C_SIZE                            :0xedc8
16:21:32: Reserv3                                       :0x0
16:21:32: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:32: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:32: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:32: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:32: Reserv4                                       :0x0
16:21:32: Write Speed Factor R2W_FACTOR                 :0x2
16:21:32: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:32: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:32: FILE_FORMAT_GRP                               :0x0
16:21:32: COPY flag                                     :0x1
16:21:32: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:32: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:32: File_Format                                   :0x0
16:21:32: CRC                                           :0x0
16:21:32: ####CSD Registe Values####  

16:21:32: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:32: ProductSerialNumber = 0x23482900
16:21:32: CardMaximumLBA      = 0x3b72400
16:21:32: CardCapacity        = 32G
16:21:32: Is card secure      = 0
16:21:32: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:32: [DVTCommonLib]###  LogicalWrite called
16:21:33: [ WriteLba(0x2DDBF5D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1799 ] 
16:21:33: [DVTCommonLib]###  LogicalWrite Completed 

16:21:33: [DVTCommonLib]###  LogicalRead called
16:21:35: [ ReadLba(0x2DDBF5D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1800 ] 
16:21:35: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:35: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 211 times 

16:21:35: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:35: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:35: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1801 ] 
16:21:35: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:35: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:35: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:35: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:35: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:35: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544CEA0>, <py_sfcl.CommandDataDefinition object at 0x0544EF30>) , Command count = 1802 ] 
16:21:35: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:35: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE240>, <py_sfcl.CommandDataDefinition object at 0x061FE5D0>) , Command count = 1803 ] 
16:21:35: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:35: [ SetCardRCA(0x1, 0xD555) , Command count = 1804 ] 
16:21:35: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:35: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:35: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:35: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:35: [ SetBusWidth(0x1) , Command count = 1805 ] 
16:21:35: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:35: ####CSD Registe 2.0 Values####
16:21:35: CSD_STRUCTURE                                 :0x1
16:21:35: Reserv1                                       :0x0
16:21:35: Time Access 1 TAAC                            :0xe
16:21:35: Time Access 2 NSAC*100                        :0x0
16:21:35: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:35: Card Command Classess CCC                     :0x5b5
16:21:35: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:35: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:35: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:35: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:35: DSR(driver stage register)  DSR_IMP           :0x0
16:21:35: Reserv2                                       :0x0
16:21:35: Device Size C_SIZE                            :0xedc8
16:21:35: Reserv3                                       :0x0
16:21:35: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:35: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:35: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:35: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:35: Reserv4                                       :0x0
16:21:35: Write Speed Factor R2W_FACTOR                 :0x2
16:21:35: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:35: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:35: FILE_FORMAT_GRP                               :0x0
16:21:35: COPY flag                                     :0x1
16:21:35: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:35: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:35: File_Format                                   :0x0
16:21:35: CRC                                           :0x0
16:21:35: ####CSD Registe Values####  

16:21:35: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:35: ProductSerialNumber = 0x23482900
16:21:35: CardMaximumLBA      = 0x3b72400
16:21:35: CardCapacity        = 32G
16:21:35: Is card secure      = 0
16:21:35: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:35: [DVTCommonLib]###  LogicalWrite called
16:21:37: [ WriteLba(0x36E6A94, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1806 ] 
16:21:37: [DVTCommonLib]###  LogicalWrite Completed 

16:21:37: [DVTCommonLib]###  LogicalRead called
16:21:38: [ ReadLba(0x36E6A94, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1807 ] 
16:21:38: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:38: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 212 times 

16:21:38: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:38: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:38: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1808 ] 
16:21:38: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:38: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:38: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:38: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:38: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:38: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FACC0>, <py_sfcl.CommandDataDefinition object at 0x05337E40>) , Command count = 1809 ] 
16:21:38: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:38: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE120>, <py_sfcl.CommandDataDefinition object at 0x061FE300>) , Command count = 1810 ] 
16:21:38: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:38: [ SetCardRCA(0x1, 0xD555) , Command count = 1811 ] 
16:21:38: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:38: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:38: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:38: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:38: [ SetBusWidth(0x1) , Command count = 1812 ] 
16:21:38: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:38: ####CSD Registe 2.0 Values####
16:21:38: CSD_STRUCTURE                                 :0x1
16:21:38: Reserv1                                       :0x0
16:21:38: Time Access 1 TAAC                            :0xe
16:21:38: Time Access 2 NSAC*100                        :0x0
16:21:38: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:38: Card Command Classess CCC                     :0x5b5
16:21:38: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:38: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:38: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:38: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:38: DSR(driver stage register)  DSR_IMP           :0x0
16:21:38: Reserv2                                       :0x0
16:21:38: Device Size C_SIZE                            :0xedc8
16:21:38: Reserv3                                       :0x0
16:21:38: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:38: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:38: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:38: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:38: Reserv4                                       :0x0
16:21:38: Write Speed Factor R2W_FACTOR                 :0x2
16:21:38: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:38: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:38: FILE_FORMAT_GRP                               :0x0
16:21:38: COPY flag                                     :0x1
16:21:38: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:38: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:38: File_Format                                   :0x0
16:21:38: CRC                                           :0x0
16:21:38: ####CSD Registe Values####  

16:21:38: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:38: ProductSerialNumber = 0x23482900
16:21:38: CardMaximumLBA      = 0x3b72400
16:21:38: CardCapacity        = 32G
16:21:38: Is card secure      = 0
16:21:38: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:38: [DVTCommonLib]###  LogicalWrite called
16:21:40: [ WriteLba(0x1946266, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1813 ] 
16:21:40: [DVTCommonLib]###  LogicalWrite Completed 

16:21:40: [DVTCommonLib]###  LogicalRead called
16:21:42: [ ReadLba(0x1946266, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1814 ] 
16:21:42: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:42: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 213 times 

16:21:42: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:42: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:42: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1815 ] 
16:21:42: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:42: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:42: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:42: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:42: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:42: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2780>, <py_sfcl.CommandDataDefinition object at 0x061FADE0>) , Command count = 1816 ] 
16:21:42: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:42: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C27B0>, <py_sfcl.CommandDataDefinition object at 0x061FE1B0>) , Command count = 1817 ] 
16:21:42: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:42: [ SetCardRCA(0x1, 0xD555) , Command count = 1818 ] 
16:21:42: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:42: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:42: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:42: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:42: [ SetBusWidth(0x1) , Command count = 1819 ] 
16:21:42: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:42: ####CSD Registe 2.0 Values####
16:21:42: CSD_STRUCTURE                                 :0x1
16:21:42: Reserv1                                       :0x0
16:21:42: Time Access 1 TAAC                            :0xe
16:21:42: Time Access 2 NSAC*100                        :0x0
16:21:42: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:42: Card Command Classess CCC                     :0x5b5
16:21:42: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:42: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:42: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:42: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:42: DSR(driver stage register)  DSR_IMP           :0x0
16:21:42: Reserv2                                       :0x0
16:21:42: Device Size C_SIZE                            :0xedc8
16:21:42: Reserv3                                       :0x0
16:21:42: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:42: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:42: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:42: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:42: Reserv4                                       :0x0
16:21:42: Write Speed Factor R2W_FACTOR                 :0x2
16:21:42: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:42: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:42: FILE_FORMAT_GRP                               :0x0
16:21:42: COPY flag                                     :0x1
16:21:42: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:42: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:42: File_Format                                   :0x0
16:21:42: CRC                                           :0x0
16:21:42: ####CSD Registe Values####  

16:21:42: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:42: ProductSerialNumber = 0x23482900
16:21:42: CardMaximumLBA      = 0x3b72400
16:21:42: CardCapacity        = 32G
16:21:42: Is card secure      = 0
16:21:42: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:42: [DVTCommonLib]###  LogicalWrite called
16:21:43: [ WriteLba(0x22EBDD9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1820 ] 
16:21:43: [DVTCommonLib]###  LogicalWrite Completed 

16:21:43: [DVTCommonLib]###  LogicalRead called
16:21:45: [ ReadLba(0x22EBDD9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1821 ] 
16:21:45: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:45: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 214 times 

16:21:45: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:45: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:45: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1822 ] 
16:21:45: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:45: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:45: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:45: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:45: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:45: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2030>, <py_sfcl.CommandDataDefinition object at 0x060C2AE0>) , Command count = 1823 ] 
16:21:45: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:45: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FADB0>, <py_sfcl.CommandDataDefinition object at 0x061FAFC0>) , Command count = 1824 ] 
16:21:45: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:45: [ SetCardRCA(0x1, 0xD555) , Command count = 1825 ] 
16:21:45: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:45: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:45: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:45: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:45: [ SetBusWidth(0x1) , Command count = 1826 ] 
16:21:45: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:45: ####CSD Registe 2.0 Values####
16:21:45: CSD_STRUCTURE                                 :0x1
16:21:45: Reserv1                                       :0x0
16:21:45: Time Access 1 TAAC                            :0xe
16:21:45: Time Access 2 NSAC*100                        :0x0
16:21:45: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:45: Card Command Classess CCC                     :0x5b5
16:21:45: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:45: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:45: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:45: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:45: DSR(driver stage register)  DSR_IMP           :0x0
16:21:45: Reserv2                                       :0x0
16:21:45: Device Size C_SIZE                            :0xedc8
16:21:45: Reserv3                                       :0x0
16:21:45: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:45: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:45: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:45: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:45: Reserv4                                       :0x0
16:21:45: Write Speed Factor R2W_FACTOR                 :0x2
16:21:45: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:45: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:45: FILE_FORMAT_GRP                               :0x0
16:21:45: COPY flag                                     :0x1
16:21:45: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:45: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:45: File_Format                                   :0x0
16:21:45: CRC                                           :0x0
16:21:45: ####CSD Registe Values####  

16:21:45: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:45: ProductSerialNumber = 0x23482900
16:21:45: CardMaximumLBA      = 0x3b72400
16:21:45: CardCapacity        = 32G
16:21:45: Is card secure      = 0
16:21:45: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:45: [DVTCommonLib]###  LogicalWrite called
16:21:47: [ WriteLba(0x2E707, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1827 ] 
16:21:47: [DVTCommonLib]###  LogicalWrite Completed 

16:21:47: [DVTCommonLib]###  LogicalRead called
16:21:48: [ ReadLba(0x2E707, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1828 ] 
16:21:48: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:48: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:48: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 215 times 

16:21:48: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:48: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1829 ] 
16:21:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0612CF90>, <py_sfcl.CommandDataDefinition object at 0x061FE4B0>) , Command count = 1830 ] 
16:21:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA810>, <py_sfcl.CommandDataDefinition object at 0x061FAF60>) , Command count = 1831 ] 
16:21:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1832 ] 
16:21:49: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:49: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:49: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:49: [ SetBusWidth(0x1) , Command count = 1833 ] 
16:21:49: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:49: ####CSD Registe 2.0 Values####
16:21:49: CSD_STRUCTURE                                 :0x1
16:21:49: Reserv1                                       :0x0
16:21:49: Time Access 1 TAAC                            :0xe
16:21:49: Time Access 2 NSAC*100                        :0x0
16:21:49: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:49: Card Command Classess CCC                     :0x5b5
16:21:49: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:49: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:49: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:49: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:49: DSR(driver stage register)  DSR_IMP           :0x0
16:21:49: Reserv2                                       :0x0
16:21:49: Device Size C_SIZE                            :0xedc8
16:21:49: Reserv3                                       :0x0
16:21:49: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:49: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:49: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:49: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:49: Reserv4                                       :0x0
16:21:49: Write Speed Factor R2W_FACTOR                 :0x2
16:21:49: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:49: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:49: FILE_FORMAT_GRP                               :0x0
16:21:49: COPY flag                                     :0x1
16:21:49: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:49: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:49: File_Format                                   :0x0
16:21:49: CRC                                           :0x0
16:21:49: ####CSD Registe Values####  

16:21:49: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:49: ProductSerialNumber = 0x23482900
16:21:49: CardMaximumLBA      = 0x3b72400
16:21:49: CardCapacity        = 32G
16:21:49: Is card secure      = 0
16:21:49: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:49: [DVTCommonLib]###  LogicalWrite called
16:21:50: [ WriteLba(0x1C0C263, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1834 ] 
16:21:50: [DVTCommonLib]###  LogicalWrite Completed 

16:21:50: [DVTCommonLib]###  LogicalRead called
16:21:52: [ ReadLba(0x1C0C263, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1835 ] 
16:21:52: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:52: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 216 times 

16:21:52: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:52: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:52: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1836 ] 
16:21:52: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:52: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:52: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:52: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:52: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:52: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460DB0>, <py_sfcl.CommandDataDefinition object at 0x05460F60>) , Command count = 1837 ] 
16:21:52: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:52: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA3F0>, <py_sfcl.CommandDataDefinition object at 0x061FA510>) , Command count = 1838 ] 
16:21:52: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:52: [ SetCardRCA(0x1, 0xD555) , Command count = 1839 ] 
16:21:52: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:52: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:52: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:52: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:52: [ SetBusWidth(0x1) , Command count = 1840 ] 
16:21:52: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:52: ####CSD Registe 2.0 Values####
16:21:52: CSD_STRUCTURE                                 :0x1
16:21:52: Reserv1                                       :0x0
16:21:52: Time Access 1 TAAC                            :0xe
16:21:52: Time Access 2 NSAC*100                        :0x0
16:21:52: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:52: Card Command Classess CCC                     :0x5b5
16:21:52: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:52: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:52: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:52: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:52: DSR(driver stage register)  DSR_IMP           :0x0
16:21:52: Reserv2                                       :0x0
16:21:52: Device Size C_SIZE                            :0xedc8
16:21:52: Reserv3                                       :0x0
16:21:52: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:52: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:52: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:52: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:52: Reserv4                                       :0x0
16:21:52: Write Speed Factor R2W_FACTOR                 :0x2
16:21:52: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:52: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:52: FILE_FORMAT_GRP                               :0x0
16:21:52: COPY flag                                     :0x1
16:21:52: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:52: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:52: File_Format                                   :0x0
16:21:52: CRC                                           :0x0
16:21:52: ####CSD Registe Values####  

16:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:52: ProductSerialNumber = 0x23482900
16:21:52: CardMaximumLBA      = 0x3b72400
16:21:52: CardCapacity        = 32G
16:21:52: Is card secure      = 0
16:21:52: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:52: [DVTCommonLib]###  LogicalWrite called
16:21:54: [ WriteLba(0x303AE64, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1841 ] 
16:21:54: [DVTCommonLib]###  LogicalWrite Completed 

16:21:54: [DVTCommonLib]###  LogicalRead called
16:21:55: [ ReadLba(0x303AE64, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1842 ] 
16:21:55: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:55: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 217 times 

16:21:55: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:55: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:55: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1843 ] 
16:21:55: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:55: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:55: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:55: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:55: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:55: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543A480>, <py_sfcl.CommandDataDefinition object at 0x061F4DE0>) , Command count = 1844 ] 
16:21:55: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:55: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4CC0>, <py_sfcl.CommandDataDefinition object at 0x061FA360>) , Command count = 1845 ] 
16:21:55: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:55: [ SetCardRCA(0x1, 0xD555) , Command count = 1846 ] 
16:21:55: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:55: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:55: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:55: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:55: [ SetBusWidth(0x1) , Command count = 1847 ] 
16:21:55: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:55: ####CSD Registe 2.0 Values####
16:21:55: CSD_STRUCTURE                                 :0x1
16:21:55: Reserv1                                       :0x0
16:21:55: Time Access 1 TAAC                            :0xe
16:21:55: Time Access 2 NSAC*100                        :0x0
16:21:55: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:55: Card Command Classess CCC                     :0x5b5
16:21:55: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:55: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:55: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:55: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:55: DSR(driver stage register)  DSR_IMP           :0x0
16:21:55: Reserv2                                       :0x0
16:21:55: Device Size C_SIZE                            :0xedc8
16:21:55: Reserv3                                       :0x0
16:21:55: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:55: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:55: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:55: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:55: Reserv4                                       :0x0
16:21:55: Write Speed Factor R2W_FACTOR                 :0x2
16:21:55: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:55: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:55: FILE_FORMAT_GRP                               :0x0
16:21:55: COPY flag                                     :0x1
16:21:55: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:55: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:55: File_Format                                   :0x0
16:21:55: CRC                                           :0x0
16:21:55: ####CSD Registe Values####  

16:21:55: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:55: ProductSerialNumber = 0x23482900
16:21:55: CardMaximumLBA      = 0x3b72400
16:21:55: CardCapacity        = 32G
16:21:55: Is card secure      = 0
16:21:55: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:55: [DVTCommonLib]###  LogicalWrite called
16:21:57: [ WriteLba(0x1D4572F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1848 ] 
16:21:57: [DVTCommonLib]###  LogicalWrite Completed 

16:21:57: [DVTCommonLib]###  LogicalRead called
16:21:59: [ ReadLba(0x1D4572F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1849 ] 
16:21:59: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:21:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:21:59: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 218 times 

16:21:59: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:21:59: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:21:59: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1850 ] 
16:21:59: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:21:59: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:21:59: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:21:59: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:21:59: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:21:59: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA420>, <py_sfcl.CommandDataDefinition object at 0x061FA150>) , Command count = 1851 ] 
16:21:59: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:21:59: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4990>, <py_sfcl.CommandDataDefinition object at 0x061F4E70>) , Command count = 1852 ] 
16:21:59: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:21:59: [ SetCardRCA(0x1, 0xD555) , Command count = 1853 ] 
16:21:59: [DVTCommonLib]### Identification :Idenfication of card completed 

16:21:59: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:21:59: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:21:59: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:21:59: [ SetBusWidth(0x1) , Command count = 1854 ] 
16:21:59: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:21:59: ####CSD Registe 2.0 Values####
16:21:59: CSD_STRUCTURE                                 :0x1
16:21:59: Reserv1                                       :0x0
16:21:59: Time Access 1 TAAC                            :0xe
16:21:59: Time Access 2 NSAC*100                        :0x0
16:21:59: Data Transfer Rate TRAN_SPEED                 :0x32
16:21:59: Card Command Classess CCC                     :0x5b5
16:21:59: Max Read Data Block Length  READ_BL_LEN       :0x9
16:21:59: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:21:59: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:21:59: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:21:59: DSR(driver stage register)  DSR_IMP           :0x0
16:21:59: Reserv2                                       :0x0
16:21:59: Device Size C_SIZE                            :0xedc8
16:21:59: Reserv3                                       :0x0
16:21:59: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:21:59: Erase Sector Size SECTOR_SIZE                 :0x7f
16:21:59: Write Protect Group Size WP_GRP_SIZE          :0x0
16:21:59: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:21:59: Reserv4                                       :0x0
16:21:59: Write Speed Factor R2W_FACTOR                 :0x2
16:21:59: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:21:59: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:21:59: FILE_FORMAT_GRP                               :0x0
16:21:59: COPY flag                                     :0x1
16:21:59: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:21:59: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:21:59: File_Format                                   :0x0
16:21:59: CRC                                           :0x0
16:21:59: ####CSD Registe Values####  

16:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:21:59: ProductSerialNumber = 0x23482900
16:21:59: CardMaximumLBA      = 0x3b72400
16:21:59: CardCapacity        = 32G
16:21:59: Is card secure      = 0
16:21:59: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:21:59: [DVTCommonLib]###  LogicalWrite called
16:22:00: [ WriteLba(0x77F486, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1855 ] 
16:22:00: [DVTCommonLib]###  LogicalWrite Completed 

16:22:00: [DVTCommonLib]###  LogicalRead called
16:22:02: [ ReadLba(0x77F486, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1856 ] 
16:22:02: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:02: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 219 times 

16:22:02: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:02: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:02: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1857 ] 
16:22:02: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:02: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:02: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:02: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:02: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:02: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E10>, <py_sfcl.CommandDataDefinition object at 0x061F4390>) , Command count = 1858 ] 
16:22:02: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:02: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB40>, <py_sfcl.CommandDataDefinition object at 0x061F4750>) , Command count = 1859 ] 
16:22:02: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:02: [ SetCardRCA(0x1, 0xD555) , Command count = 1860 ] 
16:22:02: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:02: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:02: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:02: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:02: [ SetBusWidth(0x1) , Command count = 1861 ] 
16:22:02: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:02: ####CSD Registe 2.0 Values####
16:22:02: CSD_STRUCTURE                                 :0x1
16:22:02: Reserv1                                       :0x0
16:22:02: Time Access 1 TAAC                            :0xe
16:22:02: Time Access 2 NSAC*100                        :0x0
16:22:02: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:02: Card Command Classess CCC                     :0x5b5
16:22:02: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:02: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:02: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:02: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:02: DSR(driver stage register)  DSR_IMP           :0x0
16:22:02: Reserv2                                       :0x0
16:22:02: Device Size C_SIZE                            :0xedc8
16:22:02: Reserv3                                       :0x0
16:22:02: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:02: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:02: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:02: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:02: Reserv4                                       :0x0
16:22:02: Write Speed Factor R2W_FACTOR                 :0x2
16:22:02: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:02: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:02: FILE_FORMAT_GRP                               :0x0
16:22:02: COPY flag                                     :0x1
16:22:02: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:02: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:02: File_Format                                   :0x0
16:22:02: CRC                                           :0x0
16:22:02: ####CSD Registe Values####  

16:22:02: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:02: ProductSerialNumber = 0x23482900
16:22:02: CardMaximumLBA      = 0x3b72400
16:22:02: CardCapacity        = 32G
16:22:02: Is card secure      = 0
16:22:02: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:02: [DVTCommonLib]###  LogicalWrite called
16:22:04: [ WriteLba(0x22C98D8, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1862 ] 
16:22:04: [DVTCommonLib]###  LogicalWrite Completed 

16:22:04: [DVTCommonLib]###  LogicalRead called
16:22:05: [ ReadLba(0x22C98D8, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1863 ] 
16:22:05: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:05: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 220 times 

16:22:05: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:05: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:05: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1864 ] 
16:22:05: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:05: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:05: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:05: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:05: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:05: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061ED6F0>) , Command count = 1865 ] 
16:22:05: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:05: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED570>, <py_sfcl.CommandDataDefinition object at 0x061F46C0>) , Command count = 1866 ] 
16:22:05: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:05: [ SetCardRCA(0x1, 0xD555) , Command count = 1867 ] 
16:22:05: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:05: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:05: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:05: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:06: [ SetBusWidth(0x1) , Command count = 1868 ] 
16:22:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:06: ####CSD Registe 2.0 Values####
16:22:06: CSD_STRUCTURE                                 :0x1
16:22:06: Reserv1                                       :0x0
16:22:06: Time Access 1 TAAC                            :0xe
16:22:06: Time Access 2 NSAC*100                        :0x0
16:22:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:06: Card Command Classess CCC                     :0x5b5
16:22:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:06: DSR(driver stage register)  DSR_IMP           :0x0
16:22:06: Reserv2                                       :0x0
16:22:06: Device Size C_SIZE                            :0xedc8
16:22:06: Reserv3                                       :0x0
16:22:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:06: Reserv4                                       :0x0
16:22:06: Write Speed Factor R2W_FACTOR                 :0x2
16:22:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:06: FILE_FORMAT_GRP                               :0x0
16:22:06: COPY flag                                     :0x1
16:22:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:06: File_Format                                   :0x0
16:22:06: CRC                                           :0x0
16:22:06: ####CSD Registe Values####  

16:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:06: ProductSerialNumber = 0x23482900
16:22:06: CardMaximumLBA      = 0x3b72400
16:22:06: CardCapacity        = 32G
16:22:06: Is card secure      = 0
16:22:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:06: [DVTCommonLib]###  LogicalWrite called
16:22:07: [ WriteLba(0x28F7AAD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1869 ] 
16:22:07: [DVTCommonLib]###  LogicalWrite Completed 

16:22:07: [DVTCommonLib]###  LogicalRead called
16:22:09: [ ReadLba(0x28F7AAD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1870 ] 
16:22:09: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:09: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 221 times 

16:22:09: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:09: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:09: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1871 ] 
16:22:09: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:09: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:09: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:09: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:09: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:09: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4270>, <py_sfcl.CommandDataDefinition object at 0x061EDA80>) , Command count = 1872 ] 
16:22:09: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:09: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAE10>, <py_sfcl.CommandDataDefinition object at 0x061EAB40>) , Command count = 1873 ] 
16:22:09: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:09: [ SetCardRCA(0x1, 0xD555) , Command count = 1874 ] 
16:22:09: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:09: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:09: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:09: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:09: [ SetBusWidth(0x1) , Command count = 1875 ] 
16:22:09: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:09: ####CSD Registe 2.0 Values####
16:22:09: CSD_STRUCTURE                                 :0x1
16:22:09: Reserv1                                       :0x0
16:22:09: Time Access 1 TAAC                            :0xe
16:22:09: Time Access 2 NSAC*100                        :0x0
16:22:09: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:09: Card Command Classess CCC                     :0x5b5
16:22:09: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:09: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:09: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:09: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:09: DSR(driver stage register)  DSR_IMP           :0x0
16:22:09: Reserv2                                       :0x0
16:22:09: Device Size C_SIZE                            :0xedc8
16:22:09: Reserv3                                       :0x0
16:22:09: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:09: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:09: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:09: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:09: Reserv4                                       :0x0
16:22:09: Write Speed Factor R2W_FACTOR                 :0x2
16:22:09: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:09: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:09: FILE_FORMAT_GRP                               :0x0
16:22:09: COPY flag                                     :0x1
16:22:09: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:09: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:09: File_Format                                   :0x0
16:22:09: CRC                                           :0x0
16:22:09: ####CSD Registe Values####  

16:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:09: ProductSerialNumber = 0x23482900
16:22:09: CardMaximumLBA      = 0x3b72400
16:22:09: CardCapacity        = 32G
16:22:09: Is card secure      = 0
16:22:09: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:09: [DVTCommonLib]###  LogicalWrite called
16:22:11: [ WriteLba(0xEBBFF2, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1876 ] 
16:22:11: [DVTCommonLib]###  LogicalWrite Completed 

16:22:11: [DVTCommonLib]###  LogicalRead called
16:22:12: [ ReadLba(0xEBBFF2, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1877 ] 
16:22:12: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:12: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 222 times 

16:22:12: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:12: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:12: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1878 ] 
16:22:12: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:12: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:12: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:12: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:12: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4570>, <py_sfcl.CommandDataDefinition object at 0x061F4690>) , Command count = 1879 ] 
16:22:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544ECC0>, <py_sfcl.CommandDataDefinition object at 0x061EA7E0>) , Command count = 1880 ] 
16:22:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:12: [ SetCardRCA(0x1, 0xD555) , Command count = 1881 ] 
16:22:12: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:12: [ SetBusWidth(0x1) , Command count = 1882 ] 
16:22:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:12: ####CSD Registe 2.0 Values####
16:22:12: CSD_STRUCTURE                                 :0x1
16:22:12: Reserv1                                       :0x0
16:22:12: Time Access 1 TAAC                            :0xe
16:22:12: Time Access 2 NSAC*100                        :0x0
16:22:12: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:12: Card Command Classess CCC                     :0x5b5
16:22:12: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:12: DSR(driver stage register)  DSR_IMP           :0x0
16:22:12: Reserv2                                       :0x0
16:22:12: Device Size C_SIZE                            :0xedc8
16:22:12: Reserv3                                       :0x0
16:22:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:12: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:12: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:12: Reserv4                                       :0x0
16:22:12: Write Speed Factor R2W_FACTOR                 :0x2
16:22:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:12: FILE_FORMAT_GRP                               :0x0
16:22:12: COPY flag                                     :0x1
16:22:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:12: File_Format                                   :0x0
16:22:12: CRC                                           :0x0
16:22:12: ####CSD Registe Values####  

16:22:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:12: ProductSerialNumber = 0x23482900
16:22:12: CardMaximumLBA      = 0x3b72400
16:22:12: CardCapacity        = 32G
16:22:12: Is card secure      = 0
16:22:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:12: [DVTCommonLib]###  LogicalWrite called
16:22:14: [ WriteLba(0x17EC461, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1883 ] 
16:22:14: [DVTCommonLib]###  LogicalWrite Completed 

16:22:14: [DVTCommonLib]###  LogicalRead called
16:22:16: [ ReadLba(0x17EC461, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1884 ] 
16:22:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 223 times 

16:22:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:16: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1885 ] 
16:22:16: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:16: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:16: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:16: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:16: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:16: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4EA0>, <py_sfcl.CommandDataDefinition object at 0x061EAD20>) , Command count = 1886 ] 
16:22:16: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:16: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA060>, <py_sfcl.CommandDataDefinition object at 0x061EA0C0>) , Command count = 1887 ] 
16:22:16: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:16: [ SetCardRCA(0x1, 0xD555) , Command count = 1888 ] 
16:22:16: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:16: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:16: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:16: [ SetBusWidth(0x1) , Command count = 1889 ] 
16:22:16: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:16: ####CSD Registe 2.0 Values####
16:22:16: CSD_STRUCTURE                                 :0x1
16:22:16: Reserv1                                       :0x0
16:22:16: Time Access 1 TAAC                            :0xe
16:22:16: Time Access 2 NSAC*100                        :0x0
16:22:16: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:16: Card Command Classess CCC                     :0x5b5
16:22:16: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:16: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:16: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:16: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:16: DSR(driver stage register)  DSR_IMP           :0x0
16:22:16: Reserv2                                       :0x0
16:22:16: Device Size C_SIZE                            :0xedc8
16:22:16: Reserv3                                       :0x0
16:22:16: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:16: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:16: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:16: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:16: Reserv4                                       :0x0
16:22:16: Write Speed Factor R2W_FACTOR                 :0x2
16:22:16: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:16: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:16: FILE_FORMAT_GRP                               :0x0
16:22:16: COPY flag                                     :0x1
16:22:16: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:16: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:16: File_Format                                   :0x0
16:22:16: CRC                                           :0x0
16:22:16: ####CSD Registe Values####  

16:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:16: ProductSerialNumber = 0x23482900
16:22:16: CardMaximumLBA      = 0x3b72400
16:22:16: CardCapacity        = 32G
16:22:16: Is card secure      = 0
16:22:16: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:16: [DVTCommonLib]###  LogicalWrite called
16:22:17: [ WriteLba(0x134BA23, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1890 ] 
16:22:17: [DVTCommonLib]###  LogicalWrite Completed 

16:22:17: [DVTCommonLib]###  LogicalRead called
16:22:19: [ ReadLba(0x134BA23, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1891 ] 
16:22:19: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:19: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 224 times 

16:22:19: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:19: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:19: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1892 ] 
16:22:19: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:19: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:19: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:19: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:19: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:19: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E1B0>, <py_sfcl.CommandDataDefinition object at 0x061EA870>) , Command count = 1893 ] 
16:22:19: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:19: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA450>, <py_sfcl.CommandDataDefinition object at 0x061EA4B0>) , Command count = 1894 ] 
16:22:19: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:19: [ SetCardRCA(0x1, 0xD555) , Command count = 1895 ] 
16:22:19: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:19: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:19: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:19: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:19: [ SetBusWidth(0x1) , Command count = 1896 ] 
16:22:19: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:19: ####CSD Registe 2.0 Values####
16:22:19: CSD_STRUCTURE                                 :0x1
16:22:19: Reserv1                                       :0x0
16:22:19: Time Access 1 TAAC                            :0xe
16:22:19: Time Access 2 NSAC*100                        :0x0
16:22:19: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:19: Card Command Classess CCC                     :0x5b5
16:22:19: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:19: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:19: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:19: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:19: DSR(driver stage register)  DSR_IMP           :0x0
16:22:19: Reserv2                                       :0x0
16:22:19: Device Size C_SIZE                            :0xedc8
16:22:19: Reserv3                                       :0x0
16:22:19: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:19: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:19: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:19: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:19: Reserv4                                       :0x0
16:22:19: Write Speed Factor R2W_FACTOR                 :0x2
16:22:19: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:19: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:19: FILE_FORMAT_GRP                               :0x0
16:22:19: COPY flag                                     :0x1
16:22:19: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:19: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:19: File_Format                                   :0x0
16:22:19: CRC                                           :0x0
16:22:19: ####CSD Registe Values####  

16:22:19: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:19: ProductSerialNumber = 0x23482900
16:22:19: CardMaximumLBA      = 0x3b72400
16:22:19: CardCapacity        = 32G
16:22:19: Is card secure      = 0
16:22:19: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:19: [DVTCommonLib]###  LogicalWrite called
16:22:21: [ WriteLba(0x1D6C26, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1897 ] 
16:22:21: [DVTCommonLib]###  LogicalWrite Completed 

16:22:21: [DVTCommonLib]###  LogicalRead called
16:22:22: [ ReadLba(0x1D6C26, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1898 ] 
16:22:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:22: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 225 times 

16:22:22: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:22: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:22: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1899 ] 
16:22:22: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:22: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:22: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:22: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:22: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:22: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA1B0>, <py_sfcl.CommandDataDefinition object at 0x061EA8D0>) , Command count = 1900 ] 
16:22:22: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:22: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA840>, <py_sfcl.CommandDataDefinition object at 0x061EA8A0>) , Command count = 1901 ] 
16:22:22: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:22: [ SetCardRCA(0x1, 0xD555) , Command count = 1902 ] 
16:22:22: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:22: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:22: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:22: [ SetBusWidth(0x1) , Command count = 1903 ] 
16:22:22: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:22: ####CSD Registe 2.0 Values####
16:22:22: CSD_STRUCTURE                                 :0x1
16:22:22: Reserv1                                       :0x0
16:22:22: Time Access 1 TAAC                            :0xe
16:22:22: Time Access 2 NSAC*100                        :0x0
16:22:22: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:22: Card Command Classess CCC                     :0x5b5
16:22:22: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:22: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:22: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:22: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:22: DSR(driver stage register)  DSR_IMP           :0x0
16:22:22: Reserv2                                       :0x0
16:22:22: Device Size C_SIZE                            :0xedc8
16:22:22: Reserv3                                       :0x0
16:22:22: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:22: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:22: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:22: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:22: Reserv4                                       :0x0
16:22:22: Write Speed Factor R2W_FACTOR                 :0x2
16:22:22: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:22: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:22: FILE_FORMAT_GRP                               :0x0
16:22:22: COPY flag                                     :0x1
16:22:22: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:22: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:22: File_Format                                   :0x0
16:22:22: CRC                                           :0x0
16:22:22: ####CSD Registe Values####  

16:22:22: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:22: ProductSerialNumber = 0x23482900
16:22:22: CardMaximumLBA      = 0x3b72400
16:22:22: CardCapacity        = 32G
16:22:22: Is card secure      = 0
16:22:22: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:22: [DVTCommonLib]###  LogicalWrite called
16:22:24: [ WriteLba(0x295F19F, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1904 ] 
16:22:24: [DVTCommonLib]###  LogicalWrite Completed 

16:22:24: [DVTCommonLib]###  LogicalRead called
16:22:26: [ ReadLba(0x295F19F, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1905 ] 
16:22:26: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:26: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 226 times 

16:22:26: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1906 ] 
16:22:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:26: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 1907 ] 
16:22:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAED0>, <py_sfcl.CommandDataDefinition object at 0x061EA660>) , Command count = 1908 ] 
16:22:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:26: [ SetCardRCA(0x1, 0xD555) , Command count = 1909 ] 
16:22:26: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:26: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:26: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:26: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:26: [ SetBusWidth(0x1) , Command count = 1910 ] 
16:22:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:26: ####CSD Registe 2.0 Values####
16:22:26: CSD_STRUCTURE                                 :0x1
16:22:26: Reserv1                                       :0x0
16:22:26: Time Access 1 TAAC                            :0xe
16:22:26: Time Access 2 NSAC*100                        :0x0
16:22:26: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:26: Card Command Classess CCC                     :0x5b5
16:22:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:26: DSR(driver stage register)  DSR_IMP           :0x0
16:22:26: Reserv2                                       :0x0
16:22:26: Device Size C_SIZE                            :0xedc8
16:22:26: Reserv3                                       :0x0
16:22:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:26: Reserv4                                       :0x0
16:22:26: Write Speed Factor R2W_FACTOR                 :0x2
16:22:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:26: FILE_FORMAT_GRP                               :0x0
16:22:26: COPY flag                                     :0x1
16:22:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:26: File_Format                                   :0x0
16:22:26: CRC                                           :0x0
16:22:26: ####CSD Registe Values####  

16:22:26: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:26: ProductSerialNumber = 0x23482900
16:22:26: CardMaximumLBA      = 0x3b72400
16:22:26: CardCapacity        = 32G
16:22:26: Is card secure      = 0
16:22:26: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:26: [DVTCommonLib]###  LogicalWrite called
16:22:27: [ WriteLba(0x27C42E3, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1911 ] 
16:22:27: [DVTCommonLib]###  LogicalWrite Completed 

16:22:27: [DVTCommonLib]###  LogicalRead called
16:22:29: [ ReadLba(0x27C42E3, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1912 ] 
16:22:29: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:29: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 227 times 

16:22:29: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:29: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:29: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1913 ] 
16:22:29: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:29: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:29: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:29: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:29: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:29: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x061ED060>) , Command count = 1914 ] 
16:22:29: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:29: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x061EA630>) , Command count = 1915 ] 
16:22:29: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:29: [ SetCardRCA(0x1, 0xD555) , Command count = 1916 ] 
16:22:29: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:29: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:29: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:29: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:29: [ SetBusWidth(0x1) , Command count = 1917 ] 
16:22:29: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:29: ####CSD Registe 2.0 Values####
16:22:29: CSD_STRUCTURE                                 :0x1
16:22:29: Reserv1                                       :0x0
16:22:29: Time Access 1 TAAC                            :0xe
16:22:29: Time Access 2 NSAC*100                        :0x0
16:22:29: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:29: Card Command Classess CCC                     :0x5b5
16:22:29: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:29: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:29: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:29: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:29: DSR(driver stage register)  DSR_IMP           :0x0
16:22:29: Reserv2                                       :0x0
16:22:29: Device Size C_SIZE                            :0xedc8
16:22:29: Reserv3                                       :0x0
16:22:29: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:29: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:29: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:29: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:29: Reserv4                                       :0x0
16:22:29: Write Speed Factor R2W_FACTOR                 :0x2
16:22:29: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:29: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:29: FILE_FORMAT_GRP                               :0x0
16:22:29: COPY flag                                     :0x1
16:22:29: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:29: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:29: File_Format                                   :0x0
16:22:29: CRC                                           :0x0
16:22:29: ####CSD Registe Values####  

16:22:29: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:29: ProductSerialNumber = 0x23482900
16:22:29: CardMaximumLBA      = 0x3b72400
16:22:29: CardCapacity        = 32G
16:22:29: Is card secure      = 0
16:22:29: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:29: [DVTCommonLib]###  LogicalWrite called
16:22:31: [ WriteLba(0x121BCBF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1918 ] 
16:22:31: [DVTCommonLib]###  LogicalWrite Completed 

16:22:31: [DVTCommonLib]###  LogicalRead called
16:22:32: [ ReadLba(0x121BCBF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1919 ] 
16:22:32: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:32: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:32: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 228 times 

16:22:32: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:32: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1920 ] 
16:22:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x061ED030>) , Command count = 1921 ] 
16:22:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED270>, <py_sfcl.CommandDataDefinition object at 0x061EADE0>) , Command count = 1922 ] 
16:22:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:33: [ SetCardRCA(0x1, 0xD555) , Command count = 1923 ] 
16:22:33: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:33: [ SetBusWidth(0x1) , Command count = 1924 ] 
16:22:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:33: ####CSD Registe 2.0 Values####
16:22:33: CSD_STRUCTURE                                 :0x1
16:22:33: Reserv1                                       :0x0
16:22:33: Time Access 1 TAAC                            :0xe
16:22:33: Time Access 2 NSAC*100                        :0x0
16:22:33: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:33: Card Command Classess CCC                     :0x5b5
16:22:33: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:33: DSR(driver stage register)  DSR_IMP           :0x0
16:22:33: Reserv2                                       :0x0
16:22:33: Device Size C_SIZE                            :0xedc8
16:22:33: Reserv3                                       :0x0
16:22:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:33: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:33: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:33: Reserv4                                       :0x0
16:22:33: Write Speed Factor R2W_FACTOR                 :0x2
16:22:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:33: FILE_FORMAT_GRP                               :0x0
16:22:33: COPY flag                                     :0x1
16:22:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:33: File_Format                                   :0x0
16:22:33: CRC                                           :0x0
16:22:33: ####CSD Registe Values####  

16:22:33: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:33: ProductSerialNumber = 0x23482900
16:22:33: CardMaximumLBA      = 0x3b72400
16:22:33: CardCapacity        = 32G
16:22:33: Is card secure      = 0
16:22:33: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:33: [DVTCommonLib]###  LogicalWrite called
16:22:34: [ WriteLba(0x173E91D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1925 ] 
16:22:34: [DVTCommonLib]###  LogicalWrite Completed 

16:22:34: [DVTCommonLib]###  LogicalRead called
16:22:36: [ ReadLba(0x173E91D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1926 ] 
16:22:36: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:36: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 229 times 

16:22:36: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:36: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:36: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1927 ] 
16:22:36: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:36: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:36: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:36: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:36: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:36: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED150>, <py_sfcl.CommandDataDefinition object at 0x061ED2D0>) , Command count = 1928 ] 
16:22:36: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:36: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED660>, <py_sfcl.CommandDataDefinition object at 0x061EADE0>) , Command count = 1929 ] 
16:22:36: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:36: [ SetCardRCA(0x1, 0xD555) , Command count = 1930 ] 
16:22:36: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:36: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:36: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:36: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:36: [ SetBusWidth(0x1) , Command count = 1931 ] 
16:22:36: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:36: ####CSD Registe 2.0 Values####
16:22:36: CSD_STRUCTURE                                 :0x1
16:22:36: Reserv1                                       :0x0
16:22:36: Time Access 1 TAAC                            :0xe
16:22:36: Time Access 2 NSAC*100                        :0x0
16:22:36: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:36: Card Command Classess CCC                     :0x5b5
16:22:36: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:36: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:36: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:36: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:36: DSR(driver stage register)  DSR_IMP           :0x0
16:22:36: Reserv2                                       :0x0
16:22:36: Device Size C_SIZE                            :0xedc8
16:22:36: Reserv3                                       :0x0
16:22:36: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:36: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:36: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:36: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:36: Reserv4                                       :0x0
16:22:36: Write Speed Factor R2W_FACTOR                 :0x2
16:22:36: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:36: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:36: FILE_FORMAT_GRP                               :0x0
16:22:36: COPY flag                                     :0x1
16:22:36: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:36: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:36: File_Format                                   :0x0
16:22:36: CRC                                           :0x0
16:22:36: ####CSD Registe Values####  

16:22:36: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:36: ProductSerialNumber = 0x23482900
16:22:36: CardMaximumLBA      = 0x3b72400
16:22:36: CardCapacity        = 32G
16:22:36: Is card secure      = 0
16:22:36: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:36: [DVTCommonLib]###  LogicalWrite called
16:22:38: [ WriteLba(0x227E1F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1932 ] 
16:22:38: [DVTCommonLib]###  LogicalWrite Completed 

16:22:38: [DVTCommonLib]###  LogicalRead called
16:22:39: [ ReadLba(0x227E1F5, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1933 ] 
16:22:39: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:39: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 230 times 

16:22:39: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:39: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:39: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1934 ] 
16:22:39: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:39: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:39: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:39: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:39: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:39: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 1935 ] 
16:22:39: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:39: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED930>, <py_sfcl.CommandDataDefinition object at 0x061ED630>) , Command count = 1936 ] 
16:22:39: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:39: [ SetCardRCA(0x1, 0xD555) , Command count = 1937 ] 
16:22:39: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:39: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:39: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:39: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:39: [ SetBusWidth(0x1) , Command count = 1938 ] 
16:22:39: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:39: ####CSD Registe 2.0 Values####
16:22:39: CSD_STRUCTURE                                 :0x1
16:22:39: Reserv1                                       :0x0
16:22:39: Time Access 1 TAAC                            :0xe
16:22:39: Time Access 2 NSAC*100                        :0x0
16:22:39: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:39: Card Command Classess CCC                     :0x5b5
16:22:39: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:39: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:39: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:39: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:39: DSR(driver stage register)  DSR_IMP           :0x0
16:22:39: Reserv2                                       :0x0
16:22:39: Device Size C_SIZE                            :0xedc8
16:22:39: Reserv3                                       :0x0
16:22:39: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:39: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:39: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:39: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:39: Reserv4                                       :0x0
16:22:39: Write Speed Factor R2W_FACTOR                 :0x2
16:22:39: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:39: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:39: FILE_FORMAT_GRP                               :0x0
16:22:39: COPY flag                                     :0x1
16:22:39: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:39: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:39: File_Format                                   :0x0
16:22:39: CRC                                           :0x0
16:22:39: ####CSD Registe Values####  

16:22:39: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:39: ProductSerialNumber = 0x23482900
16:22:39: CardMaximumLBA      = 0x3b72400
16:22:39: CardCapacity        = 32G
16:22:39: Is card secure      = 0
16:22:39: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:39: [DVTCommonLib]###  LogicalWrite called
16:22:41: [ WriteLba(0xBCE865, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1939 ] 
16:22:41: [DVTCommonLib]###  LogicalWrite Completed 

16:22:41: [DVTCommonLib]###  LogicalRead called
16:22:43: [ ReadLba(0xBCE865, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1940 ] 
16:22:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 231 times 

16:22:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:43: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1941 ] 
16:22:43: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:43: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:43: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:43: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:43: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:43: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8A0>, <py_sfcl.CommandDataDefinition object at 0x061ED870>) , Command count = 1942 ] 
16:22:43: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:43: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F46F0>, <py_sfcl.CommandDataDefinition object at 0x061EA7B0>) , Command count = 1943 ] 
16:22:43: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:43: [ SetCardRCA(0x1, 0xD555) , Command count = 1944 ] 
16:22:43: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:43: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:43: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:43: [ SetBusWidth(0x1) , Command count = 1945 ] 
16:22:43: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:43: ####CSD Registe 2.0 Values####
16:22:43: CSD_STRUCTURE                                 :0x1
16:22:43: Reserv1                                       :0x0
16:22:43: Time Access 1 TAAC                            :0xe
16:22:43: Time Access 2 NSAC*100                        :0x0
16:22:43: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:43: Card Command Classess CCC                     :0x5b5
16:22:43: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:43: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:43: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:43: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:43: DSR(driver stage register)  DSR_IMP           :0x0
16:22:43: Reserv2                                       :0x0
16:22:43: Device Size C_SIZE                            :0xedc8
16:22:43: Reserv3                                       :0x0
16:22:43: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:43: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:43: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:43: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:43: Reserv4                                       :0x0
16:22:43: Write Speed Factor R2W_FACTOR                 :0x2
16:22:43: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:43: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:43: FILE_FORMAT_GRP                               :0x0
16:22:43: COPY flag                                     :0x1
16:22:43: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:43: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:43: File_Format                                   :0x0
16:22:43: CRC                                           :0x0
16:22:43: ####CSD Registe Values####  

16:22:43: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:43: ProductSerialNumber = 0x23482900
16:22:43: CardMaximumLBA      = 0x3b72400
16:22:43: CardCapacity        = 32G
16:22:43: Is card secure      = 0
16:22:43: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:43: [DVTCommonLib]###  LogicalWrite called
16:22:44: [ WriteLba(0x33369BD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1946 ] 
16:22:44: [DVTCommonLib]###  LogicalWrite Completed 

16:22:44: [DVTCommonLib]###  LogicalRead called
16:22:46: [ ReadLba(0x33369BD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1947 ] 
16:22:46: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:46: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 232 times 

16:22:46: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:46: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:46: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1948 ] 
16:22:46: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:46: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:46: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:46: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:46: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:46: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAE0>, <py_sfcl.CommandDataDefinition object at 0x061EDD20>) , Command count = 1949 ] 
16:22:46: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:46: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EABD0>, <py_sfcl.CommandDataDefinition object at 0x061EA7B0>) , Command count = 1950 ] 
16:22:46: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:46: [ SetCardRCA(0x1, 0xD555) , Command count = 1951 ] 
16:22:46: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:46: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:46: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:46: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:46: [ SetBusWidth(0x1) , Command count = 1952 ] 
16:22:46: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:46: ####CSD Registe 2.0 Values####
16:22:46: CSD_STRUCTURE                                 :0x1
16:22:46: Reserv1                                       :0x0
16:22:46: Time Access 1 TAAC                            :0xe
16:22:46: Time Access 2 NSAC*100                        :0x0
16:22:46: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:46: Card Command Classess CCC                     :0x5b5
16:22:46: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:46: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:46: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:46: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:46: DSR(driver stage register)  DSR_IMP           :0x0
16:22:46: Reserv2                                       :0x0
16:22:46: Device Size C_SIZE                            :0xedc8
16:22:46: Reserv3                                       :0x0
16:22:46: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:46: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:46: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:46: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:46: Reserv4                                       :0x0
16:22:46: Write Speed Factor R2W_FACTOR                 :0x2
16:22:46: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:46: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:46: FILE_FORMAT_GRP                               :0x0
16:22:46: COPY flag                                     :0x1
16:22:46: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:46: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:46: File_Format                                   :0x0
16:22:46: CRC                                           :0x0
16:22:46: ####CSD Registe Values####  

16:22:46: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:46: ProductSerialNumber = 0x23482900
16:22:46: CardMaximumLBA      = 0x3b72400
16:22:46: CardCapacity        = 32G
16:22:46: Is card secure      = 0
16:22:46: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:46: [DVTCommonLib]###  LogicalWrite called
16:22:48: [ WriteLba(0x1D4DCA4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1953 ] 
16:22:48: [DVTCommonLib]###  LogicalWrite Completed 

16:22:48: [DVTCommonLib]###  LogicalRead called
16:22:49: [ ReadLba(0x1D4DCA4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1954 ] 
16:22:49: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:49: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:49: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 233 times 

16:22:49: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:49: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:49: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1955 ] 
16:22:49: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:49: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:49: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:49: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:49: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:49: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x061ED900>) , Command count = 1956 ] 
16:22:49: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:49: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA900>, <py_sfcl.CommandDataDefinition object at 0x061EA7B0>) , Command count = 1957 ] 
16:22:49: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:49: [ SetCardRCA(0x1, 0xD555) , Command count = 1958 ] 
16:22:50: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:50: [ SetBusWidth(0x1) , Command count = 1959 ] 
16:22:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:50: ####CSD Registe 2.0 Values####
16:22:50: CSD_STRUCTURE                                 :0x1
16:22:50: Reserv1                                       :0x0
16:22:50: Time Access 1 TAAC                            :0xe
16:22:50: Time Access 2 NSAC*100                        :0x0
16:22:50: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:50: Card Command Classess CCC                     :0x5b5
16:22:50: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:50: DSR(driver stage register)  DSR_IMP           :0x0
16:22:50: Reserv2                                       :0x0
16:22:50: Device Size C_SIZE                            :0xedc8
16:22:50: Reserv3                                       :0x0
16:22:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:50: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:50: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:50: Reserv4                                       :0x0
16:22:50: Write Speed Factor R2W_FACTOR                 :0x2
16:22:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:50: FILE_FORMAT_GRP                               :0x0
16:22:50: COPY flag                                     :0x1
16:22:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:50: File_Format                                   :0x0
16:22:50: CRC                                           :0x0
16:22:50: ####CSD Registe Values####  

16:22:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:50: ProductSerialNumber = 0x23482900
16:22:50: CardMaximumLBA      = 0x3b72400
16:22:50: CardCapacity        = 32G
16:22:50: Is card secure      = 0
16:22:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:50: [DVTCommonLib]###  LogicalWrite called
16:22:51: [ WriteLba(0x213287D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1960 ] 
16:22:51: [DVTCommonLib]###  LogicalWrite Completed 

16:22:51: [DVTCommonLib]###  LogicalRead called
16:22:53: [ ReadLba(0x213287D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1961 ] 
16:22:53: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:53: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 234 times 

16:22:53: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:53: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:53: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1962 ] 
16:22:53: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:53: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:53: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:53: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:53: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:53: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4300>, <py_sfcl.CommandDataDefinition object at 0x061F44E0>) , Command count = 1963 ] 
16:22:53: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:53: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4900>, <py_sfcl.CommandDataDefinition object at 0x061EA7B0>) , Command count = 1964 ] 
16:22:53: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:53: [ SetCardRCA(0x1, 0xD555) , Command count = 1965 ] 
16:22:53: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:53: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:53: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:53: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:53: [ SetBusWidth(0x1) , Command count = 1966 ] 
16:22:53: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:53: ####CSD Registe 2.0 Values####
16:22:53: CSD_STRUCTURE                                 :0x1
16:22:53: Reserv1                                       :0x0
16:22:53: Time Access 1 TAAC                            :0xe
16:22:53: Time Access 2 NSAC*100                        :0x0
16:22:53: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:53: Card Command Classess CCC                     :0x5b5
16:22:53: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:53: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:53: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:53: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:53: DSR(driver stage register)  DSR_IMP           :0x0
16:22:53: Reserv2                                       :0x0
16:22:53: Device Size C_SIZE                            :0xedc8
16:22:53: Reserv3                                       :0x0
16:22:53: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:53: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:53: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:53: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:53: Reserv4                                       :0x0
16:22:53: Write Speed Factor R2W_FACTOR                 :0x2
16:22:53: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:53: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:53: FILE_FORMAT_GRP                               :0x0
16:22:53: COPY flag                                     :0x1
16:22:53: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:53: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:53: File_Format                                   :0x0
16:22:53: CRC                                           :0x0
16:22:53: ####CSD Registe Values####  

16:22:53: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:53: ProductSerialNumber = 0x23482900
16:22:53: CardMaximumLBA      = 0x3b72400
16:22:53: CardCapacity        = 32G
16:22:53: Is card secure      = 0
16:22:53: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:53: [DVTCommonLib]###  LogicalWrite called
16:22:55: [ WriteLba(0x13904F4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1967 ] 
16:22:55: [DVTCommonLib]###  LogicalWrite Completed 

16:22:55: [DVTCommonLib]###  LogicalRead called
16:22:56: [ ReadLba(0x13904F4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1968 ] 
16:22:56: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:22:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:22:56: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 235 times 

16:22:56: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:22:56: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:22:56: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1969 ] 
16:22:56: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:22:56: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:22:56: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:22:56: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:22:56: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:22:56: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:22:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA210>, <py_sfcl.CommandDataDefinition object at 0x061F47E0>) , Command count = 1970 ] 
16:22:56: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:22:56: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C60>, <py_sfcl.CommandDataDefinition object at 0x061EADB0>) , Command count = 1971 ] 
16:22:56: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:22:56: [ SetCardRCA(0x1, 0xD555) , Command count = 1972 ] 
16:22:56: [DVTCommonLib]### Identification :Idenfication of card completed 

16:22:56: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:22:56: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:22:56: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:22:56: [ SetBusWidth(0x1) , Command count = 1973 ] 
16:22:56: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:22:56: ####CSD Registe 2.0 Values####
16:22:56: CSD_STRUCTURE                                 :0x1
16:22:56: Reserv1                                       :0x0
16:22:56: Time Access 1 TAAC                            :0xe
16:22:56: Time Access 2 NSAC*100                        :0x0
16:22:56: Data Transfer Rate TRAN_SPEED                 :0x32
16:22:56: Card Command Classess CCC                     :0x5b5
16:22:56: Max Read Data Block Length  READ_BL_LEN       :0x9
16:22:56: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:22:56: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:22:56: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:22:56: DSR(driver stage register)  DSR_IMP           :0x0
16:22:56: Reserv2                                       :0x0
16:22:56: Device Size C_SIZE                            :0xedc8
16:22:56: Reserv3                                       :0x0
16:22:56: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:22:56: Erase Sector Size SECTOR_SIZE                 :0x7f
16:22:56: Write Protect Group Size WP_GRP_SIZE          :0x0
16:22:56: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:22:56: Reserv4                                       :0x0
16:22:56: Write Speed Factor R2W_FACTOR                 :0x2
16:22:56: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:22:56: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:22:56: FILE_FORMAT_GRP                               :0x0
16:22:56: COPY flag                                     :0x1
16:22:56: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:22:56: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:22:56: File_Format                                   :0x0
16:22:56: CRC                                           :0x0
16:22:56: ####CSD Registe Values####  

16:22:56: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:22:56: ProductSerialNumber = 0x23482900
16:22:56: CardMaximumLBA      = 0x3b72400
16:22:56: CardCapacity        = 32G
16:22:56: Is card secure      = 0
16:22:56: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:22:56: [DVTCommonLib]###  LogicalWrite called
16:22:58: [ WriteLba(0x126B37A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1974 ] 
16:22:58: [DVTCommonLib]###  LogicalWrite Completed 

16:22:58: [DVTCommonLib]###  LogicalRead called
16:23:00: [ ReadLba(0x126B37A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1975 ] 
16:23:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 236 times 

16:23:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1976 ] 
16:23:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B40>, <py_sfcl.CommandDataDefinition object at 0x061F4B10>) , Command count = 1977 ] 
16:23:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA270>, <py_sfcl.CommandDataDefinition object at 0x061EADB0>) , Command count = 1978 ] 
16:23:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:00: [ SetCardRCA(0x1, 0xD555) , Command count = 1979 ] 
16:23:00: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:00: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:00: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:00: [ SetBusWidth(0x1) , Command count = 1980 ] 
16:23:00: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:00: ####CSD Registe 2.0 Values####
16:23:00: CSD_STRUCTURE                                 :0x1
16:23:00: Reserv1                                       :0x0
16:23:00: Time Access 1 TAAC                            :0xe
16:23:00: Time Access 2 NSAC*100                        :0x0
16:23:00: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:00: Card Command Classess CCC                     :0x5b5
16:23:00: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:00: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:00: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:00: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:00: DSR(driver stage register)  DSR_IMP           :0x0
16:23:00: Reserv2                                       :0x0
16:23:00: Device Size C_SIZE                            :0xedc8
16:23:00: Reserv3                                       :0x0
16:23:00: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:00: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:00: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:00: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:00: Reserv4                                       :0x0
16:23:00: Write Speed Factor R2W_FACTOR                 :0x2
16:23:00: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:00: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:00: FILE_FORMAT_GRP                               :0x0
16:23:00: COPY flag                                     :0x1
16:23:00: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:00: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:00: File_Format                                   :0x0
16:23:00: CRC                                           :0x0
16:23:00: ####CSD Registe Values####  

16:23:00: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:00: ProductSerialNumber = 0x23482900
16:23:00: CardMaximumLBA      = 0x3b72400
16:23:00: CardCapacity        = 32G
16:23:00: Is card secure      = 0
16:23:00: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:00: [DVTCommonLib]###  LogicalWrite called
16:23:01: [ WriteLba(0x2A71B17, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1981 ] 
16:23:01: [DVTCommonLib]###  LogicalWrite Completed 

16:23:01: [DVTCommonLib]###  LogicalRead called
16:23:03: [ ReadLba(0x2A71B17, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1982 ] 
16:23:03: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:03: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 237 times 

16:23:03: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:03: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:03: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1983 ] 
16:23:03: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:03: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:03: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:03: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:03: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:03: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D80>, <py_sfcl.CommandDataDefinition object at 0x061F4C90>) , Command count = 1984 ] 
16:23:03: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:03: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2D0>, <py_sfcl.CommandDataDefinition object at 0x061FA3C0>) , Command count = 1985 ] 
16:23:03: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:03: [ SetCardRCA(0x1, 0xD555) , Command count = 1986 ] 
16:23:03: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:03: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:03: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:03: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:03: [ SetBusWidth(0x1) , Command count = 1987 ] 
16:23:03: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:03: ####CSD Registe 2.0 Values####
16:23:03: CSD_STRUCTURE                                 :0x1
16:23:03: Reserv1                                       :0x0
16:23:03: Time Access 1 TAAC                            :0xe
16:23:03: Time Access 2 NSAC*100                        :0x0
16:23:03: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:03: Card Command Classess CCC                     :0x5b5
16:23:03: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:03: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:03: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:03: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:03: DSR(driver stage register)  DSR_IMP           :0x0
16:23:03: Reserv2                                       :0x0
16:23:03: Device Size C_SIZE                            :0xedc8
16:23:03: Reserv3                                       :0x0
16:23:03: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:03: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:03: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:03: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:03: Reserv4                                       :0x0
16:23:03: Write Speed Factor R2W_FACTOR                 :0x2
16:23:03: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:03: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:03: FILE_FORMAT_GRP                               :0x0
16:23:03: COPY flag                                     :0x1
16:23:03: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:03: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:03: File_Format                                   :0x0
16:23:03: CRC                                           :0x0
16:23:03: ####CSD Registe Values####  

16:23:03: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:03: ProductSerialNumber = 0x23482900
16:23:03: CardMaximumLBA      = 0x3b72400
16:23:03: CardCapacity        = 32G
16:23:03: Is card secure      = 0
16:23:03: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:03: [DVTCommonLib]###  LogicalWrite called
16:23:05: [ WriteLba(0x2DEF015, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1988 ] 
16:23:05: [DVTCommonLib]###  LogicalWrite Completed 

16:23:05: [DVTCommonLib]###  LogicalRead called
16:23:06: [ ReadLba(0x2DEF015, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1989 ] 
16:23:06: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:06: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 238 times 

16:23:06: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:06: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:06: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1990 ] 
16:23:06: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:06: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:06: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:06: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:06: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA1B0>, <py_sfcl.CommandDataDefinition object at 0x061FA030>) , Command count = 1991 ] 
16:23:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA720>, <py_sfcl.CommandDataDefinition object at 0x061FA7B0>) , Command count = 1992 ] 
16:23:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:06: [ SetCardRCA(0x1, 0xD555) , Command count = 1993 ] 
16:23:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:06: [ SetBusWidth(0x1) , Command count = 1994 ] 
16:23:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:06: ####CSD Registe 2.0 Values####
16:23:06: CSD_STRUCTURE                                 :0x1
16:23:06: Reserv1                                       :0x0
16:23:06: Time Access 1 TAAC                            :0xe
16:23:06: Time Access 2 NSAC*100                        :0x0
16:23:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:06: Card Command Classess CCC                     :0x5b5
16:23:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:06: DSR(driver stage register)  DSR_IMP           :0x0
16:23:06: Reserv2                                       :0x0
16:23:06: Device Size C_SIZE                            :0xedc8
16:23:06: Reserv3                                       :0x0
16:23:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:06: Reserv4                                       :0x0
16:23:06: Write Speed Factor R2W_FACTOR                 :0x2
16:23:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:06: FILE_FORMAT_GRP                               :0x0
16:23:06: COPY flag                                     :0x1
16:23:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:06: File_Format                                   :0x0
16:23:06: CRC                                           :0x0
16:23:06: ####CSD Registe Values####  

16:23:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:06: ProductSerialNumber = 0x23482900
16:23:06: CardMaximumLBA      = 0x3b72400
16:23:06: CardCapacity        = 32G
16:23:06: Is card secure      = 0
16:23:06: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:06: [DVTCommonLib]###  LogicalWrite called
16:23:08: [ WriteLba(0x2CCAE2E, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 1995 ] 
16:23:08: [DVTCommonLib]###  LogicalWrite Completed 

16:23:08: [DVTCommonLib]###  LogicalRead called
16:23:10: [ ReadLba(0x2CCAE2E, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 1996 ] 
16:23:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:10: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 239 times 

16:23:10: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:10: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:10: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 1997 ] 
16:23:10: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:10: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:10: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:10: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:10: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:10: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 1998 ] 
16:23:10: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:10: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAAE0>, <py_sfcl.CommandDataDefinition object at 0x061FA8A0>) , Command count = 1999 ] 
16:23:10: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:10: [ SetCardRCA(0x1, 0xD555) , Command count = 2000 ] 
16:23:10: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:10: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:10: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:10: [ SetBusWidth(0x1) , Command count = 2001 ] 
16:23:10: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:10: ####CSD Registe 2.0 Values####
16:23:10: CSD_STRUCTURE                                 :0x1
16:23:10: Reserv1                                       :0x0
16:23:10: Time Access 1 TAAC                            :0xe
16:23:10: Time Access 2 NSAC*100                        :0x0
16:23:10: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:10: Card Command Classess CCC                     :0x5b5
16:23:10: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:10: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:10: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:10: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:10: DSR(driver stage register)  DSR_IMP           :0x0
16:23:10: Reserv2                                       :0x0
16:23:10: Device Size C_SIZE                            :0xedc8
16:23:10: Reserv3                                       :0x0
16:23:10: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:10: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:10: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:10: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:10: Reserv4                                       :0x0
16:23:10: Write Speed Factor R2W_FACTOR                 :0x2
16:23:10: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:10: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:10: FILE_FORMAT_GRP                               :0x0
16:23:10: COPY flag                                     :0x1
16:23:10: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:10: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:10: File_Format                                   :0x0
16:23:10: CRC                                           :0x0
16:23:10: ####CSD Registe Values####  

16:23:10: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:10: ProductSerialNumber = 0x23482900
16:23:10: CardMaximumLBA      = 0x3b72400
16:23:10: CardCapacity        = 32G
16:23:10: Is card secure      = 0
16:23:10: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:10: [DVTCommonLib]###  LogicalWrite called
16:23:11: [ WriteLba(0x295E742, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2002 ] 
16:23:11: [DVTCommonLib]###  LogicalWrite Completed 

16:23:11: [DVTCommonLib]###  LogicalRead called
16:23:13: [ ReadLba(0x295E742, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2003 ] 
16:23:13: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:13: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 240 times 

16:23:13: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:13: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:13: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2004 ] 
16:23:13: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:13: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:13: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:13: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:13: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:13: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE030>, <py_sfcl.CommandDataDefinition object at 0x061FE3F0>) , Command count = 2005 ] 
16:23:13: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:13: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA900>, <py_sfcl.CommandDataDefinition object at 0x061FA990>) , Command count = 2006 ] 
16:23:13: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:13: [ SetCardRCA(0x1, 0xD555) , Command count = 2007 ] 
16:23:13: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:13: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:13: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:13: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:13: [ SetBusWidth(0x1) , Command count = 2008 ] 
16:23:13: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:13: ####CSD Registe 2.0 Values####
16:23:13: CSD_STRUCTURE                                 :0x1
16:23:13: Reserv1                                       :0x0
16:23:13: Time Access 1 TAAC                            :0xe
16:23:13: Time Access 2 NSAC*100                        :0x0
16:23:13: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:13: Card Command Classess CCC                     :0x5b5
16:23:13: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:13: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:13: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:13: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:13: DSR(driver stage register)  DSR_IMP           :0x0
16:23:13: Reserv2                                       :0x0
16:23:13: Device Size C_SIZE                            :0xedc8
16:23:13: Reserv3                                       :0x0
16:23:13: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:13: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:13: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:13: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:13: Reserv4                                       :0x0
16:23:13: Write Speed Factor R2W_FACTOR                 :0x2
16:23:13: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:13: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:13: FILE_FORMAT_GRP                               :0x0
16:23:13: COPY flag                                     :0x1
16:23:13: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:13: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:13: File_Format                                   :0x0
16:23:13: CRC                                           :0x0
16:23:13: ####CSD Registe Values####  

16:23:13: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:13: ProductSerialNumber = 0x23482900
16:23:13: CardMaximumLBA      = 0x3b72400
16:23:13: CardCapacity        = 32G
16:23:13: Is card secure      = 0
16:23:13: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:13: [DVTCommonLib]###  LogicalWrite called
16:23:15: [ WriteLba(0x5D2549, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2009 ] 
16:23:15: [DVTCommonLib]###  LogicalWrite Completed 

16:23:15: [DVTCommonLib]###  LogicalRead called
16:23:16: [ ReadLba(0x5D2549, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2010 ] 
16:23:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:16: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 241 times 

16:23:16: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:16: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:17: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2011 ] 
16:23:17: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:17: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:17: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:17: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:17: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:17: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAB70>, <py_sfcl.CommandDataDefinition object at 0x061FAC00>) , Command count = 2012 ] 
16:23:17: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:17: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FABA0>, <py_sfcl.CommandDataDefinition object at 0x061FE210>) , Command count = 2013 ] 
16:23:17: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:17: [ SetCardRCA(0x1, 0xD555) , Command count = 2014 ] 
16:23:17: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:17: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:17: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:17: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:17: [ SetBusWidth(0x1) , Command count = 2015 ] 
16:23:17: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:17: ####CSD Registe 2.0 Values####
16:23:17: CSD_STRUCTURE                                 :0x1
16:23:17: Reserv1                                       :0x0
16:23:17: Time Access 1 TAAC                            :0xe
16:23:17: Time Access 2 NSAC*100                        :0x0
16:23:17: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:17: Card Command Classess CCC                     :0x5b5
16:23:17: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:17: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:17: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:17: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:17: DSR(driver stage register)  DSR_IMP           :0x0
16:23:17: Reserv2                                       :0x0
16:23:17: Device Size C_SIZE                            :0xedc8
16:23:17: Reserv3                                       :0x0
16:23:17: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:17: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:17: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:17: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:17: Reserv4                                       :0x0
16:23:17: Write Speed Factor R2W_FACTOR                 :0x2
16:23:17: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:17: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:17: FILE_FORMAT_GRP                               :0x0
16:23:17: COPY flag                                     :0x1
16:23:17: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:17: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:17: File_Format                                   :0x0
16:23:17: CRC                                           :0x0
16:23:17: ####CSD Registe Values####  

16:23:17: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:17: ProductSerialNumber = 0x23482900
16:23:17: CardMaximumLBA      = 0x3b72400
16:23:17: CardCapacity        = 32G
16:23:17: Is card secure      = 0
16:23:17: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:17: [DVTCommonLib]###  LogicalWrite called
16:23:18: [ WriteLba(0x34940DF, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2016 ] 
16:23:18: [DVTCommonLib]###  LogicalWrite Completed 

16:23:18: [DVTCommonLib]###  LogicalRead called
16:23:20: [ ReadLba(0x34940DF, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2017 ] 
16:23:20: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:20: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 242 times 

16:23:20: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:20: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:20: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2018 ] 
16:23:20: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:20: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:20: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:20: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:20: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:20: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543EE10>, <py_sfcl.CommandDataDefinition object at 0x061FAF00>) , Command count = 2019 ] 
16:23:20: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:20: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE270>, <py_sfcl.CommandDataDefinition object at 0x061FE2D0>) , Command count = 2020 ] 
16:23:20: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:20: [ SetCardRCA(0x1, 0xD555) , Command count = 2021 ] 
16:23:20: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:20: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:20: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:20: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:20: [ SetBusWidth(0x1) , Command count = 2022 ] 
16:23:20: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:20: ####CSD Registe 2.0 Values####
16:23:20: CSD_STRUCTURE                                 :0x1
16:23:20: Reserv1                                       :0x0
16:23:20: Time Access 1 TAAC                            :0xe
16:23:20: Time Access 2 NSAC*100                        :0x0
16:23:20: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:20: Card Command Classess CCC                     :0x5b5
16:23:20: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:20: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:20: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:20: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:20: DSR(driver stage register)  DSR_IMP           :0x0
16:23:20: Reserv2                                       :0x0
16:23:20: Device Size C_SIZE                            :0xedc8
16:23:20: Reserv3                                       :0x0
16:23:20: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:20: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:20: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:20: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:20: Reserv4                                       :0x0
16:23:20: Write Speed Factor R2W_FACTOR                 :0x2
16:23:20: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:20: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:20: FILE_FORMAT_GRP                               :0x0
16:23:20: COPY flag                                     :0x1
16:23:20: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:20: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:20: File_Format                                   :0x0
16:23:20: CRC                                           :0x0
16:23:20: ####CSD Registe Values####  

16:23:20: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:20: ProductSerialNumber = 0x23482900
16:23:20: CardMaximumLBA      = 0x3b72400
16:23:20: CardCapacity        = 32G
16:23:20: Is card secure      = 0
16:23:20: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:20: [DVTCommonLib]###  LogicalWrite called
16:23:22: [ WriteLba(0x22D29DD, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2023 ] 
16:23:22: [DVTCommonLib]###  LogicalWrite Completed 

16:23:22: [DVTCommonLib]###  LogicalRead called
16:23:23: [ ReadLba(0x22D29DD, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2024 ] 
16:23:23: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:23: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 243 times 

16:23:23: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:23: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:23: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2025 ] 
16:23:23: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:23: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:23: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:23: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:23: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:23: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0527CE70>, <py_sfcl.CommandDataDefinition object at 0x061FAEA0>) , Command count = 2026 ] 
16:23:23: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:23: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE870>, <py_sfcl.CommandDataDefinition object at 0x061FE540>) , Command count = 2027 ] 
16:23:23: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:23: [ SetCardRCA(0x1, 0xD555) , Command count = 2028 ] 
16:23:23: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:23: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:23: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:23: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:23: [ SetBusWidth(0x1) , Command count = 2029 ] 
16:23:23: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:23: ####CSD Registe 2.0 Values####
16:23:23: CSD_STRUCTURE                                 :0x1
16:23:23: Reserv1                                       :0x0
16:23:23: Time Access 1 TAAC                            :0xe
16:23:23: Time Access 2 NSAC*100                        :0x0
16:23:23: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:23: Card Command Classess CCC                     :0x5b5
16:23:23: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:23: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:23: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:23: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:23: DSR(driver stage register)  DSR_IMP           :0x0
16:23:23: Reserv2                                       :0x0
16:23:23: Device Size C_SIZE                            :0xedc8
16:23:23: Reserv3                                       :0x0
16:23:23: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:23: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:23: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:23: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:23: Reserv4                                       :0x0
16:23:23: Write Speed Factor R2W_FACTOR                 :0x2
16:23:23: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:23: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:23: FILE_FORMAT_GRP                               :0x0
16:23:23: COPY flag                                     :0x1
16:23:23: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:23: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:23: File_Format                                   :0x0
16:23:23: CRC                                           :0x0
16:23:23: ####CSD Registe Values####  

16:23:23: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:23: ProductSerialNumber = 0x23482900
16:23:23: CardMaximumLBA      = 0x3b72400
16:23:23: CardCapacity        = 32G
16:23:23: Is card secure      = 0
16:23:23: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:23: [DVTCommonLib]###  LogicalWrite called
16:23:25: [ WriteLba(0x8CA769, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2030 ] 
16:23:25: [DVTCommonLib]###  LogicalWrite Completed 

16:23:25: [DVTCommonLib]###  LogicalRead called
16:23:27: [ ReadLba(0x8CA769, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2031 ] 
16:23:27: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:27: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 244 times 

16:23:27: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2032 ] 
16:23:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05337FC0>, <py_sfcl.CommandDataDefinition object at 0x0544E0F0>) , Command count = 2033 ] 
16:23:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEAE0>, <py_sfcl.CommandDataDefinition object at 0x061FEA50>) , Command count = 2034 ] 
16:23:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2035 ] 
16:23:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:27: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:27: [ SetBusWidth(0x1) , Command count = 2036 ] 
16:23:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:27: ####CSD Registe 2.0 Values####
16:23:27: CSD_STRUCTURE                                 :0x1
16:23:27: Reserv1                                       :0x0
16:23:27: Time Access 1 TAAC                            :0xe
16:23:27: Time Access 2 NSAC*100                        :0x0
16:23:27: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:27: Card Command Classess CCC                     :0x5b5
16:23:27: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:27: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:27: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:27: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:27: DSR(driver stage register)  DSR_IMP           :0x0
16:23:27: Reserv2                                       :0x0
16:23:27: Device Size C_SIZE                            :0xedc8
16:23:27: Reserv3                                       :0x0
16:23:27: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:27: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:27: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:27: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:27: Reserv4                                       :0x0
16:23:27: Write Speed Factor R2W_FACTOR                 :0x2
16:23:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:27: FILE_FORMAT_GRP                               :0x0
16:23:27: COPY flag                                     :0x1
16:23:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:27: File_Format                                   :0x0
16:23:27: CRC                                           :0x0
16:23:27: ####CSD Registe Values####  

16:23:27: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:27: ProductSerialNumber = 0x23482900
16:23:27: CardMaximumLBA      = 0x3b72400
16:23:27: CardCapacity        = 32G
16:23:27: Is card secure      = 0
16:23:27: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:27: [DVTCommonLib]###  LogicalWrite called
16:23:28: [ WriteLba(0x173931, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2037 ] 
16:23:28: [DVTCommonLib]###  LogicalWrite Completed 

16:23:28: [DVTCommonLib]###  LogicalRead called
16:23:30: [ ReadLba(0x173931, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2038 ] 
16:23:30: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:30: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 245 times 

16:23:30: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:30: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:30: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2039 ] 
16:23:30: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:30: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:30: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:30: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:30: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:30: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x054413F0>, <py_sfcl.CommandDataDefinition object at 0x0541D7B0>) , Command count = 2040 ] 
16:23:30: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:30: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FEB10>, <py_sfcl.CommandDataDefinition object at 0x061FEA80>) , Command count = 2041 ] 
16:23:30: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:30: [ SetCardRCA(0x1, 0xD555) , Command count = 2042 ] 
16:23:30: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:30: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:30: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:30: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:30: [ SetBusWidth(0x1) , Command count = 2043 ] 
16:23:30: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:30: ####CSD Registe 2.0 Values####
16:23:30: CSD_STRUCTURE                                 :0x1
16:23:30: Reserv1                                       :0x0
16:23:30: Time Access 1 TAAC                            :0xe
16:23:30: Time Access 2 NSAC*100                        :0x0
16:23:30: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:30: Card Command Classess CCC                     :0x5b5
16:23:30: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:30: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:30: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:30: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:30: DSR(driver stage register)  DSR_IMP           :0x0
16:23:30: Reserv2                                       :0x0
16:23:30: Device Size C_SIZE                            :0xedc8
16:23:30: Reserv3                                       :0x0
16:23:30: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:30: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:30: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:30: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:30: Reserv4                                       :0x0
16:23:30: Write Speed Factor R2W_FACTOR                 :0x2
16:23:30: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:30: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:30: FILE_FORMAT_GRP                               :0x0
16:23:30: COPY flag                                     :0x1
16:23:30: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:30: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:30: File_Format                                   :0x0
16:23:30: CRC                                           :0x0
16:23:30: ####CSD Registe Values####  

16:23:30: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:30: ProductSerialNumber = 0x23482900
16:23:30: CardMaximumLBA      = 0x3b72400
16:23:30: CardCapacity        = 32G
16:23:30: Is card secure      = 0
16:23:30: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:30: [DVTCommonLib]###  LogicalWrite called
16:23:32: [ WriteLba(0x589909, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2044 ] 
16:23:32: [DVTCommonLib]###  LogicalWrite Completed 

16:23:32: [DVTCommonLib]###  LogicalRead called
16:23:33: [ ReadLba(0x589909, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2045 ] 
16:23:33: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:33: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 246 times 

16:23:33: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:33: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:33: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2046 ] 
16:23:33: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:33: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:33: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:33: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:33: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05422150>, <py_sfcl.CommandDataDefinition object at 0x0544EE70>) , Command count = 2047 ] 
16:23:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE960>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 2048 ] 
16:23:33: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:33: [ SetCardRCA(0x1, 0xD555) , Command count = 2049 ] 
16:23:33: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:33: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:33: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:33: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:33: [ SetBusWidth(0x1) , Command count = 2050 ] 
16:23:33: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:33: ####CSD Registe 2.0 Values####
16:23:33: CSD_STRUCTURE                                 :0x1
16:23:33: Reserv1                                       :0x0
16:23:33: Time Access 1 TAAC                            :0xe
16:23:33: Time Access 2 NSAC*100                        :0x0
16:23:33: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:33: Card Command Classess CCC                     :0x5b5
16:23:33: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:33: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:33: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:33: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:33: DSR(driver stage register)  DSR_IMP           :0x0
16:23:33: Reserv2                                       :0x0
16:23:33: Device Size C_SIZE                            :0xedc8
16:23:33: Reserv3                                       :0x0
16:23:33: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:33: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:33: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:33: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:33: Reserv4                                       :0x0
16:23:33: Write Speed Factor R2W_FACTOR                 :0x2
16:23:33: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:33: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:33: FILE_FORMAT_GRP                               :0x0
16:23:33: COPY flag                                     :0x1
16:23:33: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:33: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:33: File_Format                                   :0x0
16:23:33: CRC                                           :0x0
16:23:33: ####CSD Registe Values####  

16:23:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:34: ProductSerialNumber = 0x23482900
16:23:34: CardMaximumLBA      = 0x3b72400
16:23:34: CardCapacity        = 32G
16:23:34: Is card secure      = 0
16:23:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:34: [DVTCommonLib]###  LogicalWrite called
16:23:35: [ WriteLba(0xFCAFFA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2051 ] 
16:23:35: [DVTCommonLib]###  LogicalWrite Completed 

16:23:35: [DVTCommonLib]###  LogicalRead called
16:23:37: [ ReadLba(0xFCAFFA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2052 ] 
16:23:37: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:37: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 247 times 

16:23:37: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:37: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:37: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2053 ] 
16:23:37: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:37: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:37: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:37: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:37: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:37: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544CEA0>, <py_sfcl.CommandDataDefinition object at 0x0544EF30>) , Command count = 2054 ] 
16:23:37: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:37: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE5A0>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 2055 ] 
16:23:37: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:37: [ SetCardRCA(0x1, 0xD555) , Command count = 2056 ] 
16:23:37: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:37: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:37: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:37: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:37: [ SetBusWidth(0x1) , Command count = 2057 ] 
16:23:37: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:37: ####CSD Registe 2.0 Values####
16:23:37: CSD_STRUCTURE                                 :0x1
16:23:37: Reserv1                                       :0x0
16:23:37: Time Access 1 TAAC                            :0xe
16:23:37: Time Access 2 NSAC*100                        :0x0
16:23:37: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:37: Card Command Classess CCC                     :0x5b5
16:23:37: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:37: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:37: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:37: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:37: DSR(driver stage register)  DSR_IMP           :0x0
16:23:37: Reserv2                                       :0x0
16:23:37: Device Size C_SIZE                            :0xedc8
16:23:37: Reserv3                                       :0x0
16:23:37: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:37: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:37: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:37: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:37: Reserv4                                       :0x0
16:23:37: Write Speed Factor R2W_FACTOR                 :0x2
16:23:37: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:37: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:37: FILE_FORMAT_GRP                               :0x0
16:23:37: COPY flag                                     :0x1
16:23:37: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:37: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:37: File_Format                                   :0x0
16:23:37: CRC                                           :0x0
16:23:37: ####CSD Registe Values####  

16:23:37: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:37: ProductSerialNumber = 0x23482900
16:23:37: CardMaximumLBA      = 0x3b72400
16:23:37: CardCapacity        = 32G
16:23:37: Is card secure      = 0
16:23:37: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:37: [DVTCommonLib]###  LogicalWrite called
16:23:39: [ WriteLba(0x340E146, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2058 ] 
16:23:39: [DVTCommonLib]###  LogicalWrite Completed 

16:23:39: [DVTCommonLib]###  LogicalRead called
16:23:40: [ ReadLba(0x340E146, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2059 ] 
16:23:40: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:40: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 248 times 

16:23:40: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:40: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:40: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2060 ] 
16:23:40: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:40: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:40: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:40: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:40: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:40: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544EC00>, <py_sfcl.CommandDataDefinition object at 0x061FACC0>) , Command count = 2061 ] 
16:23:40: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:40: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE420>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 2062 ] 
16:23:40: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:40: [ SetCardRCA(0x1, 0xD555) , Command count = 2063 ] 
16:23:40: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:40: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:40: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:40: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:40: [ SetBusWidth(0x1) , Command count = 2064 ] 
16:23:40: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:40: ####CSD Registe 2.0 Values####
16:23:40: CSD_STRUCTURE                                 :0x1
16:23:40: Reserv1                                       :0x0
16:23:40: Time Access 1 TAAC                            :0xe
16:23:40: Time Access 2 NSAC*100                        :0x0
16:23:40: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:40: Card Command Classess CCC                     :0x5b5
16:23:40: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:40: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:40: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:40: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:40: DSR(driver stage register)  DSR_IMP           :0x0
16:23:40: Reserv2                                       :0x0
16:23:40: Device Size C_SIZE                            :0xedc8
16:23:40: Reserv3                                       :0x0
16:23:40: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:40: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:40: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:40: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:40: Reserv4                                       :0x0
16:23:40: Write Speed Factor R2W_FACTOR                 :0x2
16:23:40: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:40: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:40: FILE_FORMAT_GRP                               :0x0
16:23:40: COPY flag                                     :0x1
16:23:40: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:40: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:40: File_Format                                   :0x0
16:23:40: CRC                                           :0x0
16:23:40: ####CSD Registe Values####  

16:23:40: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:40: ProductSerialNumber = 0x23482900
16:23:40: CardMaximumLBA      = 0x3b72400
16:23:40: CardCapacity        = 32G
16:23:40: Is card secure      = 0
16:23:40: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:40: [DVTCommonLib]###  LogicalWrite called
16:23:42: [ WriteLba(0x3336258, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2065 ] 
16:23:42: [DVTCommonLib]###  LogicalWrite Completed 

16:23:42: [DVTCommonLib]###  LogicalRead called
16:23:43: [ ReadLba(0x3336258, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2066 ] 
16:23:43: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:43: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:43: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 249 times 

16:23:43: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:43: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:44: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2067 ] 
16:23:44: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:44: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:44: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:44: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:44: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:44: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E210>, <py_sfcl.CommandDataDefinition object at 0x060C2780>) , Command count = 2068 ] 
16:23:44: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:44: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAD80>, <py_sfcl.CommandDataDefinition object at 0x061FEAB0>) , Command count = 2069 ] 
16:23:44: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:44: [ SetCardRCA(0x1, 0xD555) , Command count = 2070 ] 
16:23:44: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:44: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:44: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:44: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:44: [ SetBusWidth(0x1) , Command count = 2071 ] 
16:23:44: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:44: ####CSD Registe 2.0 Values####
16:23:44: CSD_STRUCTURE                                 :0x1
16:23:44: Reserv1                                       :0x0
16:23:44: Time Access 1 TAAC                            :0xe
16:23:44: Time Access 2 NSAC*100                        :0x0
16:23:44: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:44: Card Command Classess CCC                     :0x5b5
16:23:44: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:44: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:44: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:44: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:44: DSR(driver stage register)  DSR_IMP           :0x0
16:23:44: Reserv2                                       :0x0
16:23:44: Device Size C_SIZE                            :0xedc8
16:23:44: Reserv3                                       :0x0
16:23:44: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:44: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:44: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:44: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:44: Reserv4                                       :0x0
16:23:44: Write Speed Factor R2W_FACTOR                 :0x2
16:23:44: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:44: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:44: FILE_FORMAT_GRP                               :0x0
16:23:44: COPY flag                                     :0x1
16:23:44: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:44: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:44: File_Format                                   :0x0
16:23:44: CRC                                           :0x0
16:23:44: ####CSD Registe Values####  

16:23:44: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:44: ProductSerialNumber = 0x23482900
16:23:44: CardMaximumLBA      = 0x3b72400
16:23:44: CardCapacity        = 32G
16:23:44: Is card secure      = 0
16:23:44: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:44: [DVTCommonLib]###  LogicalWrite called
16:23:45: [ WriteLba(0x2C18D70, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2072 ] 
16:23:45: [DVTCommonLib]###  LogicalWrite Completed 

16:23:45: [DVTCommonLib]###  LogicalRead called
16:23:47: [ ReadLba(0x2C18D70, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2073 ] 
16:23:47: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:47: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 250 times 

16:23:47: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:47: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:47: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2074 ] 
16:23:47: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:47: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:47: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:47: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:47: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:47: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE120>, <py_sfcl.CommandDataDefinition object at 0x060C2030>) , Command count = 2075 ] 
16:23:47: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:47: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460C30>, <py_sfcl.CommandDataDefinition object at 0x0613F180>) , Command count = 2076 ] 
16:23:47: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:47: [ SetCardRCA(0x1, 0xD555) , Command count = 2077 ] 
16:23:47: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:47: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:47: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:47: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:47: [ SetBusWidth(0x1) , Command count = 2078 ] 
16:23:47: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:47: ####CSD Registe 2.0 Values####
16:23:47: CSD_STRUCTURE                                 :0x1
16:23:47: Reserv1                                       :0x0
16:23:47: Time Access 1 TAAC                            :0xe
16:23:47: Time Access 2 NSAC*100                        :0x0
16:23:47: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:47: Card Command Classess CCC                     :0x5b5
16:23:47: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:47: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:47: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:47: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:47: DSR(driver stage register)  DSR_IMP           :0x0
16:23:47: Reserv2                                       :0x0
16:23:47: Device Size C_SIZE                            :0xedc8
16:23:47: Reserv3                                       :0x0
16:23:47: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:47: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:47: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:47: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:47: Reserv4                                       :0x0
16:23:47: Write Speed Factor R2W_FACTOR                 :0x2
16:23:47: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:47: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:47: FILE_FORMAT_GRP                               :0x0
16:23:47: COPY flag                                     :0x1
16:23:47: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:47: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:47: File_Format                                   :0x0
16:23:47: CRC                                           :0x0
16:23:47: ####CSD Registe Values####  

16:23:47: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:47: ProductSerialNumber = 0x23482900
16:23:47: CardMaximumLBA      = 0x3b72400
16:23:47: CardCapacity        = 32G
16:23:47: Is card secure      = 0
16:23:47: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:47: [DVTCommonLib]###  LogicalWrite called
16:23:49: [ WriteLba(0x10BF3AA, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2079 ] 
16:23:49: [DVTCommonLib]###  LogicalWrite Completed 

16:23:49: [DVTCommonLib]###  LogicalRead called
16:23:50: [ ReadLba(0x10BF3AA, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2080 ] 
16:23:50: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:50: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 251 times 

16:23:50: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:50: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:50: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2081 ] 
16:23:50: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:50: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:50: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:50: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:50: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:50: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C27B0>, <py_sfcl.CommandDataDefinition object at 0x0612CF90>) , Command count = 2082 ] 
16:23:50: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:50: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAD50>, <py_sfcl.CommandDataDefinition object at 0x061FAD20>) , Command count = 2083 ] 
16:23:50: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:50: [ SetCardRCA(0x1, 0xD555) , Command count = 2084 ] 
16:23:50: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:50: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:50: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:50: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:50: [ SetBusWidth(0x1) , Command count = 2085 ] 
16:23:50: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:50: ####CSD Registe 2.0 Values####
16:23:50: CSD_STRUCTURE                                 :0x1
16:23:50: Reserv1                                       :0x0
16:23:50: Time Access 1 TAAC                            :0xe
16:23:50: Time Access 2 NSAC*100                        :0x0
16:23:50: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:50: Card Command Classess CCC                     :0x5b5
16:23:50: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:50: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:50: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:50: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:50: DSR(driver stage register)  DSR_IMP           :0x0
16:23:50: Reserv2                                       :0x0
16:23:50: Device Size C_SIZE                            :0xedc8
16:23:50: Reserv3                                       :0x0
16:23:50: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:50: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:50: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:50: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:50: Reserv4                                       :0x0
16:23:50: Write Speed Factor R2W_FACTOR                 :0x2
16:23:50: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:50: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:50: FILE_FORMAT_GRP                               :0x0
16:23:50: COPY flag                                     :0x1
16:23:50: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:50: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:50: File_Format                                   :0x0
16:23:50: CRC                                           :0x0
16:23:50: ####CSD Registe Values####  

16:23:50: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:50: ProductSerialNumber = 0x23482900
16:23:50: CardMaximumLBA      = 0x3b72400
16:23:50: CardCapacity        = 32G
16:23:50: Is card secure      = 0
16:23:50: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:50: [DVTCommonLib]###  LogicalWrite called
16:23:52: [ WriteLba(0x29F7BB9, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2086 ] 
16:23:52: [DVTCommonLib]###  LogicalWrite Completed 

16:23:52: [DVTCommonLib]###  LogicalRead called
16:23:54: [ ReadLba(0x29F7BB9, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2087 ] 
16:23:54: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:54: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 252 times 

16:23:54: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:54: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:54: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2088 ] 
16:23:54: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:54: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:54: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:54: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:54: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:54: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x060C2630>, <py_sfcl.CommandDataDefinition object at 0x05460DB0>) , Command count = 2089 ] 
16:23:54: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:54: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA6F0>, <py_sfcl.CommandDataDefinition object at 0x061FA870>) , Command count = 2090 ] 
16:23:54: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:54: [ SetCardRCA(0x1, 0xD555) , Command count = 2091 ] 
16:23:54: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:54: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:54: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:54: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:54: [ SetBusWidth(0x1) , Command count = 2092 ] 
16:23:54: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:54: ####CSD Registe 2.0 Values####
16:23:54: CSD_STRUCTURE                                 :0x1
16:23:54: Reserv1                                       :0x0
16:23:54: Time Access 1 TAAC                            :0xe
16:23:54: Time Access 2 NSAC*100                        :0x0
16:23:54: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:54: Card Command Classess CCC                     :0x5b5
16:23:54: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:54: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:54: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:54: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:54: DSR(driver stage register)  DSR_IMP           :0x0
16:23:54: Reserv2                                       :0x0
16:23:54: Device Size C_SIZE                            :0xedc8
16:23:54: Reserv3                                       :0x0
16:23:54: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:54: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:54: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:54: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:54: Reserv4                                       :0x0
16:23:54: Write Speed Factor R2W_FACTOR                 :0x2
16:23:54: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:54: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:54: FILE_FORMAT_GRP                               :0x0
16:23:54: COPY flag                                     :0x1
16:23:54: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:54: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:54: File_Format                                   :0x0
16:23:54: CRC                                           :0x0
16:23:54: ####CSD Registe Values####  

16:23:54: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:54: ProductSerialNumber = 0x23482900
16:23:54: CardMaximumLBA      = 0x3b72400
16:23:54: CardCapacity        = 32G
16:23:54: Is card secure      = 0
16:23:54: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:54: [DVTCommonLib]###  LogicalWrite called
16:23:55: [ WriteLba(0x90B55D, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2093 ] 
16:23:55: [DVTCommonLib]###  LogicalWrite Completed 

16:23:55: [DVTCommonLib]###  LogicalRead called
16:23:57: [ ReadLba(0x90B55D, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2094 ] 
16:23:57: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:23:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:23:57: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 253 times 

16:23:57: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:23:57: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:23:57: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2095 ] 
16:23:57: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:23:57: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:23:57: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:23:57: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:23:57: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:23:57: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:23:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0543A480>, <py_sfcl.CommandDataDefinition object at 0x061F4090>) , Command count = 2096 ] 
16:23:57: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:23:57: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA750>, <py_sfcl.CommandDataDefinition object at 0x061FA510>) , Command count = 2097 ] 
16:23:57: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:23:57: [ SetCardRCA(0x1, 0xD555) , Command count = 2098 ] 
16:23:57: [DVTCommonLib]### Identification :Idenfication of card completed 

16:23:57: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:23:57: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:23:57: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:23:57: [ SetBusWidth(0x1) , Command count = 2099 ] 
16:23:57: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:23:57: ####CSD Registe 2.0 Values####
16:23:57: CSD_STRUCTURE                                 :0x1
16:23:57: Reserv1                                       :0x0
16:23:57: Time Access 1 TAAC                            :0xe
16:23:57: Time Access 2 NSAC*100                        :0x0
16:23:57: Data Transfer Rate TRAN_SPEED                 :0x32
16:23:57: Card Command Classess CCC                     :0x5b5
16:23:57: Max Read Data Block Length  READ_BL_LEN       :0x9
16:23:57: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:23:57: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:23:57: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:23:57: DSR(driver stage register)  DSR_IMP           :0x0
16:23:57: Reserv2                                       :0x0
16:23:57: Device Size C_SIZE                            :0xedc8
16:23:57: Reserv3                                       :0x0
16:23:57: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:23:57: Erase Sector Size SECTOR_SIZE                 :0x7f
16:23:57: Write Protect Group Size WP_GRP_SIZE          :0x0
16:23:57: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:23:57: Reserv4                                       :0x0
16:23:57: Write Speed Factor R2W_FACTOR                 :0x2
16:23:57: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:23:57: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:23:57: FILE_FORMAT_GRP                               :0x0
16:23:57: COPY flag                                     :0x1
16:23:57: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:23:57: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:23:57: File_Format                                   :0x0
16:23:57: CRC                                           :0x0
16:23:57: ####CSD Registe Values####  

16:23:57: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:23:57: ProductSerialNumber = 0x23482900
16:23:57: CardMaximumLBA      = 0x3b72400
16:23:57: CardCapacity        = 32G
16:23:57: Is card secure      = 0
16:23:57: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:23:57: [DVTCommonLib]###  LogicalWrite called
16:23:59: [ WriteLba(0xD95312, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2100 ] 
16:23:59: [DVTCommonLib]###  LogicalWrite Completed 

16:23:59: [DVTCommonLib]###  LogicalRead called
16:24:00: [ ReadLba(0xD95312, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2101 ] 
16:24:00: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:00: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:00: [RT2HCSD35_1_1_1_3.py]PatternChange1_SD_HIGH Loop for 255 times,completed 254 times 

16:24:00: [RT2HCSD35_1_1_1_3.py]RESET card and IDENTIFICATION of the card
16:24:00: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:00: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2102 ] 
16:24:00: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:24:00: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:24:00: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:24:00: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:24:00: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:24:00: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA420>, <py_sfcl.CommandDataDefinition object at 0x061FA150>) , Command count = 2103 ] 
16:24:00: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:00: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4ED0>, <py_sfcl.CommandDataDefinition object at 0x061F4A80>) , Command count = 2104 ] 
16:24:00: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:00: [ SetCardRCA(0x1, 0xD555) , Command count = 2105 ] 
16:24:01: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:01: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:24:01: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:01: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:24:01: [ SetBusWidth(0x1) , Command count = 2106 ] 
16:24:01: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:01: ####CSD Registe 2.0 Values####
16:24:01: CSD_STRUCTURE                                 :0x1
16:24:01: Reserv1                                       :0x0
16:24:01: Time Access 1 TAAC                            :0xe
16:24:01: Time Access 2 NSAC*100                        :0x0
16:24:01: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:01: Card Command Classess CCC                     :0x5b5
16:24:01: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:01: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:01: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:01: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:01: DSR(driver stage register)  DSR_IMP           :0x0
16:24:01: Reserv2                                       :0x0
16:24:01: Device Size C_SIZE                            :0xedc8
16:24:01: Reserv3                                       :0x0
16:24:01: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:01: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:01: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:01: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:01: Reserv4                                       :0x0
16:24:01: Write Speed Factor R2W_FACTOR                 :0x2
16:24:01: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:01: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:01: FILE_FORMAT_GRP                               :0x0
16:24:01: COPY flag                                     :0x1
16:24:01: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:01: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:01: File_Format                                   :0x0
16:24:01: CRC                                           :0x0
16:24:01: ####CSD Registe Values####  

16:24:01: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:01: ProductSerialNumber = 0x23482900
16:24:01: CardMaximumLBA      = 0x3b72400
16:24:01: CardCapacity        = 32G
16:24:01: Is card secure      = 0
16:24:01: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:01: [DVTCommonLib]###  LogicalWrite called
16:24:02: [ WriteLba(0x1B037B0, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2107 ] 
16:24:02: [DVTCommonLib]###  LogicalWrite Completed 

16:24:02: [DVTCommonLib]###  LogicalRead called
16:24:04: [ ReadLba(0x1B037B0, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2108 ] 
16:24:04: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:04: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:04: [RT2HCSD35_1_1_1_3.py]***Test Pattern Filed in Power Cycle Reset***
16:24:04: [RT2HCSD35_1_1_1_3.py]PatternChange2_SD_HIGH Loop for 255 times,completed 0 times

16:24:04: [RT2HCSD35_1_1_1_3.py]POWER : OFF and ON
16:24:06: [RT2HCSD35_1_1_1_3.py]CALL : globalSetResetFreq
16:24:06: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:24:06: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4990>, <py_sfcl.CommandDataDefinition object at 0x061F4E70>) , Command count = 2109 ] 
16:24:06: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 0, 8]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4E10>, <py_sfcl.CommandDataDefinition object at 0x061F4390>) , Command count = 2110 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4810>, <py_sfcl.CommandDataDefinition object at 0x061F4A20>) , Command count = 2111 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA4B0>, <py_sfcl.CommandDataDefinition object at 0x061EAE70>) , Command count = 2112 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F48A0>, <py_sfcl.CommandDataDefinition object at 0x061EA090>) , Command count = 2113 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5A0>, <py_sfcl.CommandDataDefinition object at 0x061E1F90>) , Command count = 2114 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4F00>, <py_sfcl.CommandDataDefinition object at 0x061E1F30>) , Command count = 2115 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB40>, <py_sfcl.CommandDataDefinition object at 0x061F4750>) , Command count = 2116 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED7B0>, <py_sfcl.CommandDataDefinition object at 0x061ED6F0>) , Command count = 2117 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED690>, <py_sfcl.CommandDataDefinition object at 0x061E1E70>) , Command count = 2118 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAE40>, <py_sfcl.CommandDataDefinition object at 0x061E1CF0>) , Command count = 2119 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDAB0>, <py_sfcl.CommandDataDefinition object at 0x061E1ED0>) , Command count = 2120 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4330>, <py_sfcl.CommandDataDefinition object at 0x061E1E10>) , Command count = 2121 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED3C0>, <py_sfcl.CommandDataDefinition object at 0x061E1EA0>) , Command count = 2122 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F46C0>, <py_sfcl.CommandDataDefinition object at 0x061ED570>) , Command count = 2123 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4270>, <py_sfcl.CommandDataDefinition object at 0x061EDA80>) , Command count = 2124 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAC90>, <py_sfcl.CommandDataDefinition object at 0x061E1D80>) , Command count = 2125 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED4E0>, <py_sfcl.CommandDataDefinition object at 0x061DA540>) , Command count = 2126 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061DA450>, <py_sfcl.CommandDataDefinition object at 0x061DA2A0>) , Command count = 2127 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED390>, <py_sfcl.CommandDataDefinition object at 0x061DA510>) , Command count = 2128 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAC60>, <py_sfcl.CommandDataDefinition object at 0x061DA180>) , Command count = 2129 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAE10>, <py_sfcl.CommandDataDefinition object at 0x061EAB40>) , Command count = 2130 ] 
16:24:06: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4570>, <py_sfcl.CommandDataDefinition object at 0x061F4690>) , Command count = 2131 ] 
16:24:06: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:24:06: [ SetCardCap(True) , Command count = 2132 ] 
16:24:06: [ SetSdMmcCardMode(0x2, True) , Command count = 2133 ] 
16:24:06: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAE40>, <py_sfcl.CommandDataDefinition object at 0x061DA4E0>) , Command count = 2134 ] 
16:24:06: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:06: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4BD0>, <py_sfcl.CommandDataDefinition object at 0x061DA300>) , Command count = 2135 ] 
16:24:06: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:06: [ SetCardRCA(0x1, 0xD555) , Command count = 2136 ] 
16:24:06: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:06: [RT2HCSD35_1_1_1_3.py]CALL : globalSetLSHostFreq
16:24:06: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:06: Host Frequency set to 25000 KHz
16:24:06: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:06: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:24:06: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:06: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:24:06: [ SetBusWidth(0x1) , Command count = 2137 ] 
16:24:06: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:06: ####CSD Registe 2.0 Values####
16:24:06: CSD_STRUCTURE                                 :0x1
16:24:06: Reserv1                                       :0x0
16:24:06: Time Access 1 TAAC                            :0xe
16:24:06: Time Access 2 NSAC*100                        :0x0
16:24:06: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:06: Card Command Classess CCC                     :0x5b5
16:24:06: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:06: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:06: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:06: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:06: DSR(driver stage register)  DSR_IMP           :0x0
16:24:06: Reserv2                                       :0x0
16:24:06: Device Size C_SIZE                            :0xedc8
16:24:06: Reserv3                                       :0x0
16:24:06: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:06: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:06: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:06: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:06: Reserv4                                       :0x0
16:24:06: Write Speed Factor R2W_FACTOR                 :0x2
16:24:06: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:06: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:06: FILE_FORMAT_GRP                               :0x0
16:24:06: COPY flag                                     :0x1
16:24:06: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:06: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:06: File_Format                                   :0x0
16:24:06: CRC                                           :0x0
16:24:06: ####CSD Registe Values####  

16:24:06: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:07: ProductSerialNumber = 0x23482900
16:24:07: CardMaximumLBA      = 0x3b72400
16:24:07: CardCapacity        = 32G
16:24:07: Is card secure      = 0
16:24:07: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:07: [DVTCommonLib]###  LogicalWrite called
16:24:08: [ WriteLba(0x1805EA4, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2138 ] 
16:24:08: [DVTCommonLib]###  LogicalWrite Completed 

16:24:08: [DVTCommonLib]###  LogicalRead called
16:24:10: [ ReadLba(0x1805EA4, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2139 ] 
16:24:10: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:10: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:10: [RT2HCSD35_1_1_1_3.py]PatternChange2_SD_HIGH Loop for 255 times,completed 1 times

16:24:10: [RT2HCSD35_1_1_1_3.py]POWER : OFF and ON
16:24:12: [RT2HCSD35_1_1_1_3.py]CALL : globalSetResetFreq
16:24:12: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:24:12: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EABA0>, <py_sfcl.CommandDataDefinition object at 0x061EA1E0>) , Command count = 2140 ] 
16:24:12: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 1, 42]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA6C0>, <py_sfcl.CommandDataDefinition object at 0x061EA7E0>) , Command count = 2141 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA390>, <py_sfcl.CommandDataDefinition object at 0x061DA030>) , Command count = 2142 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA030>, <py_sfcl.CommandDataDefinition object at 0x061DA3C0>) , Command count = 2143 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA060>, <py_sfcl.CommandDataDefinition object at 0x061EA0C0>) , Command count = 2144 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E1B0>, <py_sfcl.CommandDataDefinition object at 0x061EA870>) , Command count = 2145 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAC30>, <py_sfcl.CommandDataDefinition object at 0x061DA270>) , Command count = 2146 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA3C0>, <py_sfcl.CommandDataDefinition object at 0x061DA120>) , Command count = 2147 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAD50>, <py_sfcl.CommandDataDefinition object at 0x061DA6F0>) , Command count = 2148 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA300>, <py_sfcl.CommandDataDefinition object at 0x061DA810>) , Command count = 2149 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA420>, <py_sfcl.CommandDataDefinition object at 0x061DA840>) , Command count = 2150 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA450>, <py_sfcl.CommandDataDefinition object at 0x061EA4B0>) , Command count = 2151 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA1B0>, <py_sfcl.CommandDataDefinition object at 0x061EA8D0>) , Command count = 2152 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAF60>, <py_sfcl.CommandDataDefinition object at 0x061DA570>) , Command count = 2153 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x0544E180>, <py_sfcl.CommandDataDefinition object at 0x061DA0C0>) , Command count = 2154 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D5A20>, <py_sfcl.CommandDataDefinition object at 0x061D50C0>) , Command count = 2155 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA6F0>, <py_sfcl.CommandDataDefinition object at 0x061D5870>) , Command count = 2156 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA810>, <py_sfcl.CommandDataDefinition object at 0x061D5930>) , Command count = 2157 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA840>, <py_sfcl.CommandDataDefinition object at 0x061EA8A0>) , Command count = 2158 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED1B0>, <py_sfcl.CommandDataDefinition object at 0x061ED1E0>) , Command count = 2159 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED180>, <py_sfcl.CommandDataDefinition object at 0x061D5720>) , Command count = 2160 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAFC0>, <py_sfcl.CommandDataDefinition object at 0x061D5AB0>) , Command count = 2161 ] 
16:24:12: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA360>, <py_sfcl.CommandDataDefinition object at 0x061D58D0>) , Command count = 2162 ] 
16:24:12: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:24:12: [ SetCardCap(True) , Command count = 2163 ] 
16:24:12: [ SetSdMmcCardMode(0x2, True) , Command count = 2164 ] 
16:24:12: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAED0>, <py_sfcl.CommandDataDefinition object at 0x061EA660>) , Command count = 2165 ] 
16:24:12: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:12: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED0F0>, <py_sfcl.CommandDataDefinition object at 0x061ED060>) , Command count = 2166 ] 
16:24:12: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:12: [ SetCardRCA(0x1, 0xD555) , Command count = 2167 ] 
16:24:12: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:12: [RT2HCSD35_1_1_1_3.py]CALL : globalSetLSHostFreq
16:24:12: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:12: Host Frequency set to 25000 KHz
16:24:12: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:12: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:24:12: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:12: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:24:12: [ SetBusWidth(0x1) , Command count = 2168 ] 
16:24:12: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:12: ####CSD Registe 2.0 Values####
16:24:12: CSD_STRUCTURE                                 :0x1
16:24:12: Reserv1                                       :0x0
16:24:12: Time Access 1 TAAC                            :0xe
16:24:12: Time Access 2 NSAC*100                        :0x0
16:24:12: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:12: Card Command Classess CCC                     :0x5b5
16:24:12: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:12: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:12: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:12: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:12: DSR(driver stage register)  DSR_IMP           :0x0
16:24:12: Reserv2                                       :0x0
16:24:12: Device Size C_SIZE                            :0xedc8
16:24:12: Reserv3                                       :0x0
16:24:12: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:12: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:12: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:12: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:12: Reserv4                                       :0x0
16:24:12: Write Speed Factor R2W_FACTOR                 :0x2
16:24:12: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:12: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:12: FILE_FORMAT_GRP                               :0x0
16:24:12: COPY flag                                     :0x1
16:24:12: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:12: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:12: File_Format                                   :0x0
16:24:12: CRC                                           :0x0
16:24:12: ####CSD Registe Values####  

16:24:12: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:12: ProductSerialNumber = 0x23482900
16:24:12: CardMaximumLBA      = 0x3b72400
16:24:12: CardCapacity        = 32G
16:24:12: Is card secure      = 0
16:24:12: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:12: [DVTCommonLib]###  LogicalWrite called
16:24:14: [ WriteLba(0x1EFEA03, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2169 ] 
16:24:14: [DVTCommonLib]###  LogicalWrite Completed 

16:24:14: [DVTCommonLib]###  LogicalRead called
16:24:16: [ ReadLba(0x1EFEA03, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2170 ] 
16:24:16: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:16: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:16: [RT2HCSD35_1_1_1_3.py]PatternChange2_SD_HIGH Loop for 255 times,completed 2 times

16:24:16: [RT2HCSD35_1_1_1_3.py]POWER : OFF and ON
16:24:18: [RT2HCSD35_1_1_1_3.py]CALL : globalSetResetFreq
16:24:18: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:24:18: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED360>, <py_sfcl.CommandDataDefinition object at 0x061D59C0>) , Command count = 2171 ] 
16:24:18: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 0, 0, 1, 2, 76]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED210>, <py_sfcl.CommandDataDefinition object at 0x061EA630>) , Command count = 2172 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED330>, <py_sfcl.CommandDataDefinition object at 0x061ED030>) , Command count = 2173 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA3F0>, <py_sfcl.CommandDataDefinition object at 0x061D5CC0>) , Command count = 2174 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA780>, <py_sfcl.CommandDataDefinition object at 0x061D5F30>) , Command count = 2175 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F45D0>, <py_sfcl.CommandDataDefinition object at 0x061D5A50>) , Command count = 2176 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA720>, <py_sfcl.CommandDataDefinition object at 0x061D5DB0>) , Command count = 2177 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED750>, <py_sfcl.CommandDataDefinition object at 0x061D5AE0>) , Command count = 2178 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED270>, <py_sfcl.CommandDataDefinition object at 0x061ED240>) , Command count = 2179 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED150>, <py_sfcl.CommandDataDefinition object at 0x061ED2D0>) , Command count = 2180 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED5D0>, <py_sfcl.CommandDataDefinition object at 0x061D57E0>) , Command count = 2181 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED510>, <py_sfcl.CommandDataDefinition object at 0x061D5090>) , Command count = 2182 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061D56F0>, <py_sfcl.CommandDataDefinition object at 0x061D5120>) , Command count = 2183 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED6C0>, <py_sfcl.CommandDataDefinition object at 0x061D5150>) , Command count = 2184 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED480>, <py_sfcl.CommandDataDefinition object at 0x061D59F0>) , Command count = 2185 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED660>, <py_sfcl.CommandDataDefinition object at 0x061ED540>) , Command count = 2186 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4240>, <py_sfcl.CommandDataDefinition object at 0x061F4210>) , Command count = 2187 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA50>, <py_sfcl.CommandDataDefinition object at 0x061D5B10>) , Command count = 2188 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED9C0>, <py_sfcl.CommandDataDefinition object at 0x061D5990>) , Command count = 2189 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDFC0>, <py_sfcl.CommandDataDefinition object at 0x061D5E10>) , Command count = 2190 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED600>, <py_sfcl.CommandDataDefinition object at 0x061D5B70>) , Command count = 2191 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED8D0>, <py_sfcl.CommandDataDefinition object at 0x061D5780>) , Command count = 2192 ] 
16:24:18: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061ED930>, <py_sfcl.CommandDataDefinition object at 0x061ED630>) , Command count = 2193 ] 
16:24:18: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:24:18: [ SetCardCap(True) , Command count = 2194 ] 
16:24:18: [ SetSdMmcCardMode(0x2, True) , Command count = 2195 ] 
16:24:18: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EA120>, <py_sfcl.CommandDataDefinition object at 0x061EAB70>) , Command count = 2196 ] 
16:24:18: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:18: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDB10>, <py_sfcl.CommandDataDefinition object at 0x061D5D20>) , Command count = 2197 ] 
16:24:18: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:18: [ SetCardRCA(0x1, 0xD555) , Command count = 2198 ] 
16:24:18: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:18: [RT2HCSD35_1_1_1_3.py]CALL : globalSetLSHostFreq
16:24:18: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:18: Host Frequency set to 25000 KHz
16:24:18: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:18: [RT2HCSD35_1_1_1_3.py]CALL : AddressForWriteRead
16:24:18: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:18: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:24:18: [ SetBusWidth(0x1) , Command count = 2199 ] 
16:24:18: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:18: ####CSD Registe 2.0 Values####
16:24:18: CSD_STRUCTURE                                 :0x1
16:24:18: Reserv1                                       :0x0
16:24:18: Time Access 1 TAAC                            :0xe
16:24:18: Time Access 2 NSAC*100                        :0x0
16:24:18: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:18: Card Command Classess CCC                     :0x5b5
16:24:18: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:18: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:18: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:18: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:18: DSR(driver stage register)  DSR_IMP           :0x0
16:24:18: Reserv2                                       :0x0
16:24:18: Device Size C_SIZE                            :0xedc8
16:24:18: Reserv3                                       :0x0
16:24:18: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:18: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:18: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:18: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:18: Reserv4                                       :0x0
16:24:18: Write Speed Factor R2W_FACTOR                 :0x2
16:24:18: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:18: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:18: FILE_FORMAT_GRP                               :0x0
16:24:18: COPY flag                                     :0x1
16:24:18: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:18: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:18: File_Format                                   :0x0
16:24:18: CRC                                           :0x0
16:24:18: ####CSD Registe Values####  

16:24:18: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:18: ProductSerialNumber = 0x23482900
16:24:18: CardMaximumLBA      = 0x3b72400
16:24:18: CardCapacity        = 32G
16:24:18: Is card secure      = 0
16:24:18: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:18: [DVTCommonLib]###  LogicalWrite called
16:24:20: [ WriteLba(0xCB8734, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2200 ] 
16:24:20: [DVTCommonLib]###  LogicalWrite Completed 

16:24:20: [DVTCommonLib]###  LogicalRead called
16:24:22: [ ReadLba(0xCB8734, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2201 ] 
16:24:22: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:22: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:22: [RT2HCSD35_1_1_1_3.py]PatternChange2_SD_HIGH Loop for 255 times,completed 3 times

16:24:22: [RT2HCSD35_1_1_1_3.py]POWER : OFF and ON
16:24:24: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD35_1_1_1_3' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD35_1_1_1_3.pyc'> with error  
16:24:24: ########################################
16:24:24: ########################################
16:24:24: Stated Running script RT2HCSD36_1_1_1_4 
16:24:24: ########################################
16:24:24: [RT2HCSD36_1_1_1_4.py]###### Set Card Time Out values test. 
16:24:24: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:26: Host Frequency set to 25000 KHz
16:24:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:26: [GO18_globalSetVolt]### Set Host Voltage value.
16:24:26: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:24:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x061C7780>, 0x0, True) , Command count = 2202 ] 
16:24:26: [GO18_globalSetVolt]### Host voltage value is set.
16:24:26: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:24:26: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F4360>, 0x0, False) , Command count = 2203 ] 
16:24:26: [GO18_globalSetVolt]### Host voltage value is set.
16:24:26: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2204 ] 
16:24:26: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:26: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x1, 0x0, 0x1, False, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2205 ] 
16:24:26: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC1FF8000
16:24:26: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:24:26: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:24:26: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:24:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 called 
16:24:26: [ SwitchVolt_CMD11(True, 0x0, 0x5) , Command count = 2206 ] 
16:24:26: [DVTCommonLib]### SwitchVolt_CMD11 :SwitchVolt_CMD11 Completed
16:24:26: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F43F0>, <py_sfcl.CommandDataDefinition object at 0x061F4030>) , Command count = 2207 ] 
16:24:26: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EDA20>, <py_sfcl.CommandDataDefinition object at 0x061ED900>) , Command count = 2208 ] 
16:24:26: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 0, 12]
16:24:26: [ SetCardRCA(0x1, 0xD555) , Command count = 2209 ] 
16:24:26: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:26: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:26: Host Frequency set to 25000 KHz
16:24:26: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:26: ####CSD Registe 2.0 Values####
16:24:26: CSD_STRUCTURE                                 :0x1
16:24:26: Reserv1                                       :0x0
16:24:26: Time Access 1 TAAC                            :0xe
16:24:26: Time Access 2 NSAC*100                        :0x0
16:24:26: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:26: Card Command Classess CCC                     :0x5b5
16:24:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:26: DSR(driver stage register)  DSR_IMP           :0x0
16:24:26: Reserv2                                       :0x0
16:24:26: Device Size C_SIZE                            :0xedc8
16:24:26: Reserv3                                       :0x0
16:24:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:26: Reserv4                                       :0x0
16:24:26: Write Speed Factor R2W_FACTOR                 :0x2
16:24:26: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:26: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:26: FILE_FORMAT_GRP                               :0x0
16:24:26: COPY flag                                     :0x1
16:24:26: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:26: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:26: File_Format                                   :0x0
16:24:26: CRC                                           :0x0
16:24:26: ####CSD Registe Values####  

16:24:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register#####
16:24:26: [GetSCRRegisterEntry] Passed
16:24:26: SCR_STRUCTURE Version             : SCR_VERSION_1.0
16:24:26: SD Memory Card - Spec. Version    : SPEC VERSION 2.00 or 3.0X
16:24:26: Data_Status_After Erases          : 0
16:24:26: CPRM Security Support             : No Security
16:24:26: DAT Bus widths supported          : 1 bit [DAT0] and 4 bit (DAT0-3)
16:24:26: Spec. Version                     : Version 3.0X
16:24:26: Extended Security Support         : Extended_Security_Not_Supported
16:24:26: Command Support                   : COMMAND_SUPPORT
16:24:26: [DVTCommonLib]### GET_SCR_Reg_Values :###SCR Register##### 

16:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FABD0>, <py_sfcl.CommandDataDefinition object at 0x061C7AB0>) , Command count = 2210 ] 
16:24:26: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Tran', 'READY_FOR_DATA', 'APP_CMD']
16:24:26: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4180>, <py_sfcl.CommandDataDefinition object at 0x061C7E40>) , Command count = 2211 ] 
16:24:26: ACmd51[ SEND_SCR ] Passed with R1 type response:[51, 0, 0, 9, 32, 18]
16:24:26: [ SetBusWidth(0x4) , Command count = 2212 ] 
16:24:26: [DVTCommonLib]### GetSDStatus :######SD Status#######
16:24:26: [ CardGetStdStructure(<py_sfcl.STD_STRUCT object at 0x061C7930>, <0x200/0x200, Spc, pat:0x0>) , Command count = 2213 ] 
16:24:26: Protected Area Size 0x28000
16:24:26: Bus Width           2
16:24:26: Secure Mode         0
16:24:26: Speed  Class        4
16:24:26: Perf Move           0
16:24:26: Au Size             9
16:24:26: Erase Size          15
16:24:26: Erase Timeout       1
16:24:26: Erase offset        1
16:24:26: [DVTCommonLib]### GetSDStatus :######SD Status#######

16:24:26: [G02_GlobalSetBusMode]### Bus width is set to Four and Verified
16:24:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API called
16:24:26: [ CardSwitchCmd(True, [0x2, 0xF, 0xF, 0x1, 0xF, 0xF], <0x40/0x200, Spc, pat:0x0>, 0x40) , Command count = 2214 ] 
16:24:26: [DVTCommonLib]### CardSwitchCommand[INFO]:['OperatingCurrent:250 mA', 'SDR50 SWITCHED', '400mA SWITCHED']
16:24:26: [DVTCommonLib]### CardSwitchCommand[INFO]:Swithing Speed class API completed 

16:24:26: [GO17_globalSetVeryHSHostFreq.py]### Set the Very High Host Frequency (e.g. lightning)
16:24:26: Host Frequency set to 100000 KHz
16:24:26: [GO17_globalSetVeryHSHostFreq.py]###  globalRandom value is NONE
16:24:26: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 11, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:26: ####CSD Registe 2.0 Values####
16:24:26: CSD_STRUCTURE                                 :0x1
16:24:26: Reserv1                                       :0x0
16:24:26: Time Access 1 TAAC                            :0xe
16:24:26: Time Access 2 NSAC*100                        :0x0
16:24:26: Data Transfer Rate TRAN_SPEED                 :0xb
16:24:26: Card Command Classess CCC                     :0x5b5
16:24:26: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:26: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:26: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:26: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:26: DSR(driver stage register)  DSR_IMP           :0x0
16:24:26: Reserv2                                       :0x0
16:24:26: Device Size C_SIZE                            :0xedc8
16:24:26: Reserv3                                       :0x0
16:24:26: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:26: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:26: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:26: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:26: Reserv4                                       :0x0
16:24:27: Write Speed Factor R2W_FACTOR                 :0x2
16:24:27: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:27: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:27: FILE_FORMAT_GRP                               :0x0
16:24:27: COPY flag                                     :0x1
16:24:27: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:27: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:27: File_Format                                   :0x0
16:24:27: CRC                                           :0x0
16:24:27: ####CSD Registe Values####  

16:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4300>, <py_sfcl.CommandDataDefinition object at 0x061F44E0>) , Command count = 2215 ] 
16:24:27: CMD13[ SEND_STATUS ] Passed with R1 type response:[13, 'CURRENT_STATE:Stby', 'READY_FOR_DATA']
16:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F49C0>, <py_sfcl.CommandDataDefinition object at 0x061EA900>) , Command count = 2216 ] 
16:24:27: CMD7[ SEL_DESELECT_CARD ] Passed with R1 type response:[7, 0, 0, 7, 0, 14]
16:24:27: [GO4_globalInitCard]### Switch to Specify Card Type Completed 


16:24:27: [ CardSetTimeOut(0x1F4, 0xFA, 0x64) , Command count = 2217 ] 
16:24:27: [GO18_globalSetVolt]### Set Host Voltage value.
16:24:27: [GO18_globalSetVolt]### maxVoltage=3.8V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Flash (VDDF) 
16:24:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F4840>, 0x0, True) , Command count = 2218 ] 
16:24:27: [GO18_globalSetVolt]### Host voltage value is set.
16:24:27: [GO18_globalSetVolt]### maxVoltage=3300 V, maxCurrent=250mA, A2DRate=62.5 Hz, PowerSupplier=Host (VDDH) 
16:24:27: [ SetVolt(<py_sfcl.SDVoltage object at 0x061F4630>, 0x0, False) , Command count = 2219 ] 
16:24:27: [GO18_globalSetVolt]### Host voltage value is set.
16:24:27: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:27: Host Frequency set to 25000 KHz
16:24:27: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:27: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Soft Reset*********
16:24:27: [DVTCommonLib]### Reset the card with OCR value : 0x41FF8000
16:24:27: [ CardReset(py_sfcl.CARD_MODE.SD, 0x41FF8000, 0x1, True, <0x200/0x200, Spc, pat:0x0>, 0x0, 0x0, 0x1, True, True, 0x1, 0x1, 0xAA, 0x0) , Command count = 2220 ] 
16:24:27: [DVTCommonLib]### Reset[INFO] :Response of CardReset : 0xC0FF8000
16:24:27: [DVTCommonLib]### Reset[INFO]: Card response as High Capacity from card.
16:24:27: [DVTCommonLib]### Reset[INFO]: VOLA from card : 0x1
16:24:27: [DVTCommonLib]### Reset[INFO]: CMD Pattern from card : 0xAA
16:24:27: [DVTCommonLib]### Reset[INFO]: Reserved bits from card : 0x0
16:24:27: [DVTCommonLib]### Reset[INFO]: Expected OCR Failed
16:24:27: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py] ###[INFO] : Reset Compared Passed

16:24:27: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4900>, <py_sfcl.CommandDataDefinition object at 0x061F4720>) , Command count = 2221 ] 
16:24:27: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:27: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA210>, <py_sfcl.CommandDataDefinition object at 0x061F47E0>) , Command count = 2222 ] 
16:24:27: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:27: [ SetCardRCA(0x1, 0xD555) , Command count = 2223 ] 
16:24:27: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:27: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:24:27: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:27: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:24:27: [ SetBusWidth(0x1) , Command count = 2224 ] 
16:24:27: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:28: ####CSD Registe 2.0 Values####
16:24:28: CSD_STRUCTURE                                 :0x1
16:24:28: Reserv1                                       :0x0
16:24:28: Time Access 1 TAAC                            :0xe
16:24:28: Time Access 2 NSAC*100                        :0x0
16:24:28: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:28: Card Command Classess CCC                     :0x5b5
16:24:28: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:28: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:28: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:28: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:28: DSR(driver stage register)  DSR_IMP           :0x0
16:24:28: Reserv2                                       :0x0
16:24:28: Device Size C_SIZE                            :0xedc8
16:24:28: Reserv3                                       :0x0
16:24:28: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:28: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:28: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:28: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:28: Reserv4                                       :0x0
16:24:28: Write Speed Factor R2W_FACTOR                 :0x2
16:24:28: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:28: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:28: FILE_FORMAT_GRP                               :0x0
16:24:28: COPY flag                                     :0x1
16:24:28: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:28: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:28: File_Format                                   :0x0
16:24:28: CRC                                           :0x0
16:24:28: ####CSD Registe Values####  

16:24:28: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:28: ProductSerialNumber = 0x23482900
16:24:28: CardMaximumLBA      = 0x3b72400
16:24:28: CardCapacity        = 32G
16:24:28: Is card secure      = 0
16:24:28: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:28: [DVTCommonLib]###  LogicalWrite called
16:24:30: [ WriteLba(0x386E82A, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2225 ] 
16:24:30: [DVTCommonLib]###  LogicalWrite Completed 

16:24:30: [DVTCommonLib]###  LogicalRead called
16:24:31: [ ReadLba(0x386E82A, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2226 ] 
16:24:31: [DVTCommonLib]###  LogicalRead Completed with Verification 

16:24:31: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS COMPLETED.
16:24:31: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]*********Power Cycle Reset*********
16:24:31: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]POWER : OFF and ON
16:24:33: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetResetFreq
16:24:33: [GO13_globalSetResetFreq.py]### Set the Host Frequency during Initilization process
16:24:33: [GO13_globalSetResetFreq.py]### Host Frequency set to 300KHz
16:24:33: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]RUNNING Cmd8, Cmd55, ACmd41 
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4BA0>, <py_sfcl.CommandDataDefinition object at 0x061C79F0>) , Command count = 2227 ] 
16:24:33: CMD8[ SEND_IF_COND ] Passed with R7 type response:[8, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'VOLA Voltage accepted - 2.7-3.6V', 'Check Pattern 0xAA', 'CRC 7']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460F90>, <py_sfcl.CommandDataDefinition object at 0x061F4D20>) , Command count = 2228 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4B40>, <py_sfcl.CommandDataDefinition object at 0x061F4B10>) , Command count = 2229 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x05460ED0>, <py_sfcl.CommandDataDefinition object at 0x061C7FC0>) , Command count = 2230 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA0C0>, <py_sfcl.CommandDataDefinition object at 0x061C7F60>) , Command count = 2231 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4C30>, <py_sfcl.CommandDataDefinition object at 0x061C7750>) , Command count = 2232 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4F30>, <py_sfcl.CommandDataDefinition object at 0x061C79C0>) , Command count = 2233 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA120>, <py_sfcl.CommandDataDefinition object at 0x061C7D20>) , Command count = 2234 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA270>, <py_sfcl.CommandDataDefinition object at 0x061FA060>) , Command count = 2235 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D80>, <py_sfcl.CommandDataDefinition object at 0x061F4C90>) , Command count = 2236 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA390>, <py_sfcl.CommandDataDefinition object at 0x061C76F0>) , Command count = 2237 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA1E0>, <py_sfcl.CommandDataDefinition object at 0x062444E0>) , Command count = 2238 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA240>, <py_sfcl.CommandDataDefinition object at 0x06244900>) , Command count = 2239 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA300>, <py_sfcl.CommandDataDefinition object at 0x062442D0>) , Command count = 2240 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2A0>, <py_sfcl.CommandDataDefinition object at 0x06244930>) , Command count = 2241 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2D0>, <py_sfcl.CommandDataDefinition object at 0x061FA3C0>) , Command count = 2242 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA1B0>, <py_sfcl.CommandDataDefinition object at 0x061FA030>) , Command count = 2243 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA780>, <py_sfcl.CommandDataDefinition object at 0x06244300>) , Command count = 2244 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAAB0>, <py_sfcl.CommandDataDefinition object at 0x06244D20>) , Command count = 2245 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 0, 255, 128, 0, 255]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA180>, <py_sfcl.CommandDataDefinition object at 0x06244D50>) , Command count = 2246 ] 
16:24:33: CMD55[ APP_CMD ] Passed with R1 type response:[55, 'CURRENT_STATE:Idle', 'READY_FOR_DATA', 'APP_CMD']
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA570>, <py_sfcl.CommandDataDefinition object at 0x062446C0>) , Command count = 2247 ] 
16:24:33: CMD41[ SD_SEND_OP_COND ] Passed with R3 type response:[63, 193, 255, 128, 0, 255]
16:24:33: [ SetCardCap(True) , Command count = 2248 ] 
16:24:33: [ SetSdMmcCardMode(0x2, True) , Command count = 2249 ] 
16:24:33: [DVTCommonLib]### Identification :Idenfication of card(CMD2 and CMD3)
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py_sfcl.CommandDataDefinition object at 0x061FE150>) , Command count = 2250 ] 
16:24:33: CMD2[ ALL_SEND_CID ] Passed with R2 type response:[63, 3, 83, 68, 65, 71, 71, 67, 68, 128, 35, 72, 41, 0, 0, 11]
16:24:33: [ SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FAA50>, <py_sfcl.CommandDataDefinition object at 0x061FA5A0>) , Command count = 2251 ] 
16:24:34: CMD3[ SET_RELATIVE_ADDRESS ] Passed with R6 type response:[3, 213, 85, 5, 32, 0]
16:24:34: [ SetCardRCA(0x1, 0xD555) , Command count = 2252 ] 
16:24:34: [DVTCommonLib]### Identification :Idenfication of card completed 

16:24:34: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : globalSetLSHostFreq
16:24:34: [GO12_globalSetLSHostFreq.py]### Set the Host Frequency in Low Speed mode.
16:24:34: Host Frequency set to 25000 KHz
16:24:34: [GO12_globalSetLSHostFreq.py]###  globalRandom value is NONE
16:24:34: [RT2HCSD08_ResetHighCapacityCardWithDefultValuesInCMD8.py]CALL : AddressForWriteRead
16:24:34: [RT2HCSD01_AddressForWriteRead]### TEST SCRIPT IS STARTED.
16:24:34: [DVTCommonLib]### SetBusWidth :Set the Bus width to 1 

16:24:34: [ SetBusWidth(0x1) , Command count = 2253 ] 
16:24:34: [GET_CSD] Passed and returns CSD 16 byte buffer: [64, 14, 0, 50, 91, 89, 0, 0, 237, 200, 127, 128, 10, 64, 64, 0]
16:24:34: ####CSD Registe 2.0 Values####
16:24:34: CSD_STRUCTURE                                 :0x1
16:24:34: Reserv1                                       :0x0
16:24:34: Time Access 1 TAAC                            :0xe
16:24:34: Time Access 2 NSAC*100                        :0x0
16:24:34: Data Transfer Rate TRAN_SPEED                 :0x32
16:24:34: Card Command Classess CCC                     :0x5b5
16:24:34: Max Read Data Block Length  READ_BL_LEN       :0x9
16:24:34: Partial Blocks for Read READ_BL_PARTIAL       :0x0
16:24:34: Write Block Misalignment WRITE_BLK_MISALIGN   :0x0
16:24:34: Read Block Misalignment READ_BLK_MISALIGN     :0x0
16:24:34: DSR(driver stage register)  DSR_IMP           :0x0
16:24:34: Reserv2                                       :0x0
16:24:34: Device Size C_SIZE                            :0xedc8
16:24:34: Reserv3                                       :0x0
16:24:34: Erase Single Block Enable ERASE_BLK_EN        :0x1
16:24:34: Erase Sector Size SECTOR_SIZE                 :0x7f
16:24:34: Write Protect Group Size WP_GRP_SIZE          :0x0
16:24:34: Write Protect Group Enable  WP_GRP_ENABLE     :0x0
16:24:34: Reserv4                                       :0x0
16:24:34: Write Speed Factor R2W_FACTOR                 :0x2
16:24:34: Max. Write Data Block Length WRITE_BL_LEN     :0x9
16:24:34: Partial Blocks For Write  WRITE_BL_PARTIAL    :0x0
16:24:34: FILE_FORMAT_GRP                               :0x0
16:24:34: COPY flag                                     :0x1
16:24:34: Permanent Write Protection PERM_WRITE_PROTECT :0x0
16:24:34: Temporary Write Protection TMP_WRITE_PROTECT  :0x0
16:24:34: File_Format                                   :0x0
16:24:34: CRC                                           :0x0
16:24:34: ####CSD Registe Values####  

16:24:34: [DVTCommonLib]### CardInfo :###****CARD INFO****
16:24:34: ProductSerialNumber = 0x23482900
16:24:34: CardMaximumLBA      = 0x3b72400
16:24:34: CardCapacity        = 32G
16:24:34: Is card secure      = 0
16:24:34: [DVTCommonLib]### CardInfo :###****CARD INFO**** 

16:24:34: [DVTCommonLib]###  LogicalWrite called
16:24:36: [ WriteLba(0x17DC07, 0x1000, <0x200000/0x200, Spc, pat:0x1>) , Command count = 2254 ] 
16:24:36: [DVTCommonLib]###  LogicalWrite Completed 

16:24:36: [DVTCommonLib]###  LogicalRead called
16:24:37: [ ReadLba(0x17DC07, 0x1000, <0x200000/0x200, Spc, pat:0x0>) , Command count = 2255 ] 
16:24:37: [ GetCardStatus() , Command count = 2256 ] 
16:24:37: [DVTCommonLib]### LogicalRead Failed
16:24:37: [DVTCommonLib]### 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xF5L (245) executing command 'ReadLba'
   Description : POWER_ON_OFF_GENERAL_ERR
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x17DC07, 0x1000, <0x200000/0x200, Spc, pat:0x0>)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>

16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD36_1_1_1_4' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD36_1_1_1_4.pyc'> with error 
CardCommandError:                                  
card access failed on protocol=sd: 
   Error 0xF5L (245) executing command 'ReadLba'
   Description : POWER_ON_OFF_GENERAL_ERR
   Error Layer : UNKNOWN
   SW Error Location : UNKNOWN - UNKNOWN : 0
   Arguments: ('(0x17DC07, 0x1000, <0x200000/0x200, Spc, pat:0x0>)')
   Extended error information:
      Status         : <CantDetermine>
      Is busy?       : <CantDetermine>
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD37_1_1_1_5 
16:24:37: ########################################
16:24:37: [RT2HCSD37_1_1_1_5.py]###### Set Card Time Out values test. 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD37_1_1_1_5' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD37_1_1_1_5.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD38_1_1_1_5a 
16:24:37: ########################################
16:24:37: [RT2HCSD36_1_1_1_4.py]###### Set Card Time Out values test. 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD38_1_1_1_5a' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD38_1_1_1_5a.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD40_1_1_1_6 
16:24:37: ########################################
16:24:37: [RT2HCSD40_1_1_1_6.py]###### Test VOLS(Voltages) Filed during Reset the card 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD40_1_1_1_6' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD40_1_1_1_6.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD41_1_1_1_8 
16:24:37: ########################################
16:24:37: [RT2HCSD41_1_1_1_8]###### Test CCS Bit default value while Reset the card 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD41_1_1_1_8' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD41_1_1_1_8.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD10_1_1_1_10 
16:24:37: ########################################
16:24:37: [RT2HCSD10_1_1_1_10]###### Set Card Time Out values test. 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD10_1_1_1_10' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD10_1_1_1_10.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD11_1_1_1_10a 
16:24:37: ########################################
16:24:37: [RT2HCSD11_1_1_1_10a]###### Set Card Time Out values test. 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD11_1_1_1_10a' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD11_1_1_1_10a.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD12_1_1_1_12 
16:24:37: ########################################
16:24:37: [RT2HCSD12_1_1_1_12]###### Set Card Time Out values test. 
16:24:37: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:37: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD12_1_1_1_12' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD12_1_1_1_12.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:37: ########################################
16:24:37: ########################################
16:24:37: Stated Running script RT2HCSD14_1_1_1_14 
16:24:37: ########################################
16:24:37: [RT2HCSD36_1_1_1_4.py]###### Set Card Time Out values test. 
16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:38: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD14_1_1_1_14' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD14_1_1_1_14.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:38: ########################################
16:24:38: ########################################
16:24:38: Stated Running script RT2HCSD15_1_1_1_14a 
16:24:38: ########################################
16:24:38: [RT2HCSD36_1_1_1_4.py]###### Set Card Time Out values test. 
16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:38: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD15_1_1_1_14a' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD15_1_1_1_14a.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:38: ########################################
16:24:38: ########################################
16:24:38: Stated Running script RT2HCSD16_1_1_1_15 
16:24:38: ########################################
16:24:38: [RT2HCSD36_1_1_1_4.py]###### Set Card Time Out values test. 
16:24:38: [RT2HCSD16_1_1_1_15]###[INFO] Execution Started 

16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:38: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD16_1_1_1_15' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD16_1_1_1_15.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:38: ########################################
16:24:38: ########################################
16:24:38: Stated Running script RT2HCSD21_1_1_1_17 
16:24:38: ########################################
16:24:38: [RT2HCSD21_1_1_1_17.py]###### Test Quary mode  during Soft Reset, after Power Cycle Reset and after  Power Cycle & CMD 0 Reset.
16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:38: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD21_1_1_1_17' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD21_1_1_1_17.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:38: ########################################
16:24:38: ########################################
16:24:38: Stated Running script RT2HCSD22_1_1_1_18 
16:24:38: ########################################
16:24:38: [RT2HCSD22_1_1_1_18.py]###### Test reserved bits 
16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:38: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD22_1_1_1_18' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD22_1_1_1_18.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:38: ########################################
16:24:38: ########################################
16:24:38: Stated Running script RT2HCSD23_1_1_1_19 
16:24:38: ########################################
16:24:38: [RT2HCSD23_1_1_1_19.py]###### Test Reserved bits values during Soft Reset, after Power Cycle Reset and after  Power Cycle & CMD 0 Reset. 
16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:38: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD23_1_1_1_19' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD23_1_1_1_19.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:38: ########################################
16:24:38: ########################################
16:24:38: Stated Running script RT2HCSD25_1_1_1_20 
16:24:38: ########################################
16:24:38: [RT2HCSD25_1_1_1_20.py]###### Test mismatch VOLA Filed during Reset the card 
16:24:38: Calll All RT2HCSD25_1_1_1_20 is STARTED 
16:24:38: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:39: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD25_1_1_1_20' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD25_1_1_1_20.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:39: ########################################
16:24:39: ########################################
16:24:39: Stated Running script RT2HCSD30_1_1_1_21 
16:24:39: ########################################
16:24:39: Skipped Running RT2HCSD30_1_1_1_21 script as  globalProjectType is Not Inand_DV 

16:24:39: ########################################
16:24:39: Stated Running script RT2HCSD03_OCRValuesInHighCapacityCardOverHighCapacityHost 
16:24:39: ########################################
16:24:39: [RT2HCSD03_OCRValuesInHighCapacityCardOverHighCapacityHost.py]###### Test to run scripts depending on the card voltage condition
16:24:39: [RT2HCSD03_OCRValuesInHighCapacityCardOverHighCapacityHost.py]##########CALL : GlobalLoopCounter ##########
16:24:39: [RT2HCSD03_OCRValuesInHighCapacityCardOverHighCapacityHost.py]##########CALL : OCRvaluesInPowerCycleWithCMD0HV ##########
16:24:39: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:39: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD03_OCRValuesInHighCapacityCardOverHighCapacityHost' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD03_OCRValuesInHighCapacityCardOverHighCapacityHost.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:39: ########################################
16:24:39: ########################################
16:24:39: Stated Running script RT2HCSD17_1_1_1_16 
16:24:39: ########################################
16:24:39: [RT2HCSD17_1_1_1_16.py]###### Test to run   RT2HCSD18_1_1_1_16a, RT2HCSD19_1_1_1_16b, RT2HCSD20_1_1_1_16c  during Soft Reset, Power Cycle Reset, during Power Cycle & CMD 0 Reset 
16:24:39: [GO4_globalInitCard]### Switch to Specify Card Type
16:24:39: Failed Running script <module 'HC_Host.SD_Mode.RT2HCSD17_1_1_1_16' from 'C:\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD17_1_1_1_16.pyc'> with error 
GenericPowerError:                                 
   Error 0xF5L (245):
   Failed power off card, rc=245
 
16:24:39: ########################################
16:24:39: ########################################
16:24:39: The Script <class 'HC_Host.SD_Mode.RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.CallAllHighCapacityCardOverHighCapacityHostInSDMode'> has 19 error on running 
16:24:39: ########################################

2016-11-21 16:24:39: 


<<<<<<<<<<<<<<<       PYTHON TRACEBACK       >>>>>>>>>>>>>>>

   File "C:\Program Files\SanDisk\CTF\LIBS\General\AppDriver.py", line 269, in _DoRunApp
     returnData = appMainFunction( *functionArgs, **functionKwArgs )
   File "C:\SDDVT_Python_Package\SDDVT\TestRunner.py", line 121, in Main
     testProcedureObj.RunTestProcedure(randomObj)
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\RTHHCCallAll01_CallAllReset_1.py", line 85, in RunTestProcedure
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\RTHHCCallAll01_CallAllReset_1.py", line 57, in Run
   File "C:\Users\29212\Bala\SDDVT_Python_Package\SDDVT\SD\SpecDVT\SD_SPEC_Ver2_00\Reset_Tests\HC_Ver2_00\HC_Host\SD_Mode\RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.py", line 102, in Run



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  



<<<<<<<<<<<<<<<        ERROR SUMMARY         >>>>>>>>>>>>>>>


 Test reported an error
    The Script <class 'HC_Host.SD_Mode.RT<NUM>HCSD<NUM>_CallAllHighCapacityCardOverHighCapacityHostInSDMode.CallAllHighCapacityCardOverHighCapacityHostInSDMode'> has <NUM> error on running 



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'HC_Host.SD_Mode.RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.CallAllHighCapacityCardOverHighCapacityHostInSDMode'> has 19 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  


<<<<<<<<<<<<<<<       COMMAND HISTORY        >>>>>>>>>>>>>>>

The command history may not capture all of the commands going
to the card so use this information with caution. This is not meant
to be a replacement for a logic or protocol analyzer.

Last 20 commands before error:
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   2237 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061F4D80>, <py      980.493         3.5   read=  0, write=  0                 0       
   2238 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA390>, <py      980.497         3.5   read=  0, write=  0                 0       
   2239 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA1E0>, <py      980.500         3.5   read=  0, write=  0                 0       
   2240 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA240>, <py      980.504         3.5   read=  0, write=  0                 0       
   2241 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA300>, <py      980.508         3.4   read=  0, write=  0                 0       
   2242 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2A0>, <py      980.511         3.5   read=  0, write=  0                 0       
   2243 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA2D0>, <py      980.515         3.5   read=  0, write=  0                 0       
   2244 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA1B0>, <py      980.519         3.5   read=  0, write=  0                 0       
   2245 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA780>, <py      980.522         3.5   read=  0, write=  0                 0       
   2246 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061EAAB0>, <py      980.526        66.7   read=  0, write=  0                 0       
   2247 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA180>, <py      980.593         3.5   read=  0, write=  0                 0       
   2248 SetCardCap(T)                                                               980.596         1.3   read=  0, write=  0                 'Obj'   
   2249 SetSdMmcCardMode(2, T)                                                      980.598         1.4   read=  0, write=  0                 'Obj'   
   2250 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FA570>, <py      980.599         4.0   read=  0, write=  0                 0       
   2251 SendBasicCommand(<py_sfcl.CommandDefinition object at 0x061FE0C0>, <py      980.603       114.1   read=  0, write=  0                 0       
   2252 SetCardRCA(1, D555)                                                         980.718         1.4   read=  0, write=  0                 'Obj'   
   2253 SetBusWidth(1)                                                              980.783         4.1   read=  0, write=  0                 0       
   2254 WriteLba(17DC07, 1000, <200000/200, 1>)                                     981.142      1657.8   read=  0, write=  0                 0       
   2255 ReadLba(17DC07, 1000, <200000/200, 0>)                                      982.800      1242.7   read=  0, write=  0                 F5      
   2256 GetCardStatus()                                                             984.043         5.9   read=  0, write=  0                 'Obj'   

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      
   ------------------------------------------------------------------------------------------------------------------------------------------------
   20 commands.  Total time 00:16:24


Start LBA: 0x17dc07 Transferred block amount: 0xa9c

Latency data
--------------------------------------------------
Time Interval  Reset        Read         Write        
  0 -   8 :    0            109          51           
  8 -  13 :    1            0            0            
 13 -  17 :    0            0            0            
 17 -  21 :    0            0            0            
 21 -  26 :    0            0            0            
 26 -  30 :    0            0            0            
 30 -  34 :    0            0            0            
 34 -  39 :    0            0            0            
 39 -  43 :    0            0            0            
 43 -  48 :    0            0            0            
 48 -  52 :    0            0            0            
 52 -  56 :    0            0            0            
 56 -  61 :    0            0            0            
 61 -  65 :    0            0            0            
 65 -  69 :    0            0            0            
 69 -  74 :    0            0            0            
 74 -  78 :    0            0            0            
 78 -  82 :    0            0            0            
 82 -  87 :    0            0            0            
 87 -  91 :    0            0            0            
 91 -  96 :    0            0            0            
 96 - 100 :    0            0            0            
100 - 104 :    0            0            0            
104 - 109 :    0            0            0            
109 - 113 :    1            0            0            
113 - 117 :    0            0            0            
117 - 122 :    0            0            0            
122 - 126 :    0            0            0            
126 - 131 :    0            0            0            
131 - 135 :    0            0            0            
135 - 139 :    0            0            0            
139 - 144 :    0            0            0            
144 - 148 :    0            0            0            
148 - 152 :    0            0            0            
152 - 157 :    0            0            0            
157 - 161 :    0            0            0            
161 - 165 :    0            0            0            
165 - 170 :    0            0            0            
170 - 174 :    0            0            0            
174 - 179 :    0            0            0            
179 - 183 :    0            0            0            
183 - 187 :    0            0            0            
187 - 192 :    0            0            0            
192 - 196 :    0            0            0            
196 - 200 :    0            0            0            
200 - 205 :    0            0            0            
205 - 209 :    0            0            0            
209 - 214 :    0            0            0            
214 - 218 :    0            0            0            
--------------------------------------------------


List of commands that took the most time to execute:
----------------------------------------------------
      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

    250 WriteLba(0x2173A27, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1716.194826   NA                                  0       
    250 WriteLba(0x9050A4, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1706.131769   NA                                  0       
    250 WriteLba(0x3284BA8, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1696.928078   NA                                  0       
    250 WriteLba(0x156B7F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1694.338814   NA                                  0       
    250 WriteLba(0x1B037B0, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1693.445641   NA                                  0       
    250 WriteLba(0x27BE26E, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1692.947590   NA                                  0       
    250 WriteLba(0x2BF70F4, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1687.245956   NA                                  0       
    250 WriteLba(0x5D2549, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1686.025277   NA                                  0       
    250 WriteLba(0xEBBFF2, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1685.867108   NA                                  0       
    250 WriteLba(0x2E707, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                        NA 1685.337664   NA                                  0       
    250 WriteLba(0x227E1F5, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1685.316836   NA                                  0       
    250 WriteLba(0x77F486, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1681.407584   NA                                  0       
    250 WriteLba(0x12DF1F3, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1680.606778   NA                                  0       
    250 WriteLba(0x29F7BB9, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1676.254411   NA                                  0       
    250 WriteLba(0x12521AF, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1674.555904   NA                                  0       
    250 WriteLba(0x35FF3BC, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1674.316839   NA                                  0       
    250 WriteLba(0x23A7722, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1674.098602   NA                                  0       
    250 WriteLba(0x295F19F, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1673.700765   NA                                  0       
    250 WriteLba(0xC2DA36, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                       NA 1673.485848   NA                                  0       
    250 WriteLba(0x2A6B33C, 0x1000, <0x200000/0x200, Spc, pat:0x1>)                      NA 1673.028244   NA                                  0       

      # Command                                                                FromStart(s) Elapsed(ms)   LatencyMax(ms)                      RV      

Last resetup command number: 2255


<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  

TestFailedError error at 00:16:26.


<<<<<<<<<<<<<<<      SCRIPT FAILS WITH       >>>>>>>>>>>>>>>


 TestFailedError:                                   
    The Script <class 'HC_Host.SD_Mode.RT2HCSD02_CallAllHighCapacityCardOverHighCapacityHostInSDMode.CallAllHighCapacityCardOverHighCapacityHostInSDMode'> has 19 error on running



<<<<<<<<<<<<<<<                              >>>>>>>>>>>>>>>  




   #######    ##     ####  ####    
    ##   #   ####     ##    ##     
    ## #    ##  ##    ##    ##     
    ####    ##  ##    ##    ##     
    ## #    ######    ##    ##     
    ##      ##  ##    ##    ##  ## 
   ####     ##  ##   ####  ####### 
                                   

 

